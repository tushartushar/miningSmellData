Implementation smell,Namespace,Class,File,Method,Description
Long Method,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The method has 102 lines of code.
Long Method,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanImportMultiAddresses,The method has 214 lines of code.
Long Method,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,ShouldPerformMultisigProcessingWithCore,The method has 102 lines of code.
Long Method,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The method has 236 lines of code.
Long Method,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The method has 236 lines of code.
Long Method,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransaction,The method has 217 lines of code.
Long Method,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TestSigHashes,The method has 220 lines of code.
Long Method,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,test_witness,The method has 179 lines of code.
Long Method,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanDetectBase58NetworkAndType,The method has 139 lines of code.
Complex Method,NBitcoin.Tests,base58_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\base58_tests.cs,base58_keys_valid_gen,Cyclomatic complexity of the method is 10
Complex Method,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,FalsePositivesTest,Cyclomatic complexity of the method is 8
Complex Method,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,RandomCoin,Cyclomatic complexity of the method is 11
Complex Method,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,ParseScript,Cyclomatic complexity of the method is 10
Complex Method,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,ParseScriptError,Cyclomatic complexity of the method is 39
Complex Method,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,ParseFlag,Cyclomatic complexity of the method is 18
Complex Method,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,Cyclomatic complexity of the method is 14
Complex Method,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TestSigHashes,Cyclomatic complexity of the method is 34
Complex Method,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,tx_valid,Cyclomatic complexity of the method is 8
Complex Method,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,tx_invalid,Cyclomatic complexity of the method is 9
Long Parameter List,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,AssertMatch,The method has 5 parameters. Parameters: block' vMatchedTxn' txId' expectedMerkleIndex' expectedTxIndex
Long Parameter List,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CreateSpecTransaction,The method has 6 parameters. Parameters: repo' dust' receiver' prior' issuanceA1' issuanceA2
Long Parameter List,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CreateTxToSpendFunds,The method has 5 parameters. Parameters: funds' keys' redeem' withScript' sign
Long Parameter List,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,AssertVerifyScript,The method has 8 parameters. Parameters: wit' amount' scriptSig' scriptPubKey' flags' testIndex' comment' expectedError
Long Parameter List,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,SignSignature,The method has 5 parameters. Parameters: keys' txFrom' txTo' n' knownRedeems
Long Parameter List,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,AssertHasAsset,The method has 6 parameters. Parameters: tx' colored' entry' assetId' quantity' destination
Long Parameter List,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanVerifySequenceLockCore,The method has 6 parameters. Parameters: sequences' prevHeights' currentHeight' first' expected' expectedLock
Long Parameter List,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CreateCreditAndSpend,The method has 5 parameters. Parameters: keystore' outscript' output' input' success
Long Parameter List,NBitcoin.Tests,Wallet,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,AddCoin,The method has 5 parameters. Parameters: nValue' nAge' fIsFromMe' nInput' spendable
Long Parameter List,NBitcoin.Tests.Helpers,XunitLogger,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Helpers\XunitLogger.cs,Log,The method has 5 parameters. Parameters: logLevel' eventId' state' exception' formatter
Long Statement,NBitcoin.Tests,AltcoinTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AltcoinTests.cs,HasCorrectGenesisBlock,The length of the statement  "					Assert.Contains(genesis.Transactions.SelectMany(t => t.Outputs).OfType<ElementsTxOut>()' o => o.IsPeggedAsset == true && o.ConfidentialValue.Amount != null && o.ConfidentialValue.Amount != Money.Zero);" is 201.
Long Statement,NBitcoin.Tests,AltcoinTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AltcoinTests.cs,ElementsAddressTests,The length of the statement  "			var blinded = new BitcoinBlindedAddress("VJL9DzChzwuw7Amnb1SL7M5WEq4TXmzZeAWzNFM5ULcr84gUEpu46Hbs1hZoYJXVkaqM5E3YxAyHy18N"' network);" is 133.
Long Statement,NBitcoin.Tests,AltcoinTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AltcoinTests.cs,ElementsAddressTests,The length of the statement  "			blinded = new BitcoinBlindedAddress("VTpxFwLujc7Z8ufVaVxz1JJq7wVcmq6dxc4dDVBa9jK1zyHfuTUXQpZAhG4JJjv2DYGTKRW5r39RuHXF"' network);" is 129.
Long Statement,NBitcoin.Tests,AltcoinTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AltcoinTests.cs,ElementsAddressTests,The length of the statement  "			Assert.Equal(blinded.ToString()' new BitcoinBlindedAddress(new PubKey("029c293fbb855b709d7af1b696f26b16de06de6746616ebee32aee07be9aadc5f0")' legacy ).ToString());" is 162.
Long Statement,NBitcoin.Tests,AltcoinTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AltcoinTests.cs,ElementsAddressTests,The length of the statement  "			blinded = new BitcoinBlindedAddress("lq1qqds20c9qasz0y9fup3wc8xca6ceeyf7e4w6wd9l4qd4vwh887l76gxpk2nm0alc2cn5kwcwhpysle72s6k6w2uhhtgwsltf66"' network);" is 150.
Long Statement,NBitcoin.Tests,AltcoinTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AltcoinTests.cs,CanParseAddress,The length of the statement  "				var isValid = ((JObject)node.CreateRPCClient().SendCommand("validateaddress"' address.ToString()).Result)["isvalid"].Value<bool>();" is 131.
Long Statement,NBitcoin.Tests,AltcoinTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AltcoinTests.cs,CanParseAddress,The length of the statement  "				isValid = ((JObject)node.CreateRPCClient().SendCommand("validateaddress"' address.ToString()).Result)["isvalid"].Value<bool>();" is 127.
Long Statement,NBitcoin.Tests,AltcoinTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AltcoinTests.cs,DoesRPCCapabilitiesWellAdvertised,The length of the statement  "						Assert.True(builder.Network.Consensus.SupportSegwit' "The node RPC support segwit' but Network.Consensus.SupportSegwit is set to false");" is 137.
Long Statement,NBitcoin.Tests,AltcoinTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AltcoinTests.cs,DoesRPCCapabilitiesWellAdvertised,The length of the statement  "						Assert.False(builder.Network.Consensus.SupportSegwit' "The node RPC does not support segwit' but Network.Consensus.SupportSegwit is set to true (This error can be normal if you are using a old node version)");" is 209.
Long Statement,NBitcoin.Tests,AltcoinTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AltcoinTests.cs,CheckCapabilities,The length of the statement  "				catch (RPCException ex) when (ex.RPCCode != RPCErrorCode.RPC_METHOD_NOT_FOUND && ex.RPCCode != RPCErrorCode.RPC_METHOD_DEPRECATED)" is 130.
Long Statement,NBitcoin.Tests,base58_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\base58_tests.cs,ThrowOnInvalidECKey,The length of the statement  "			Assert.Throws<ArgumentException>(() => new Key(Encoders.Base58.DecodeData("JEKNVnkbo3jma5nREBBJCD7MJVUPAg5THBwPPejEsG9v"))); " is 124.
Long Statement,NBitcoin.Tests,Bech32Test,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bech32Test.cs,DetectInvalidChecksum,The length of the statement  "					throw new Exception($"The \"{test}\" string was recognized as a valid bech32 encoded string. FormatException was expected."); " is 125.
Long Statement,NBitcoin.Tests,bip32_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip32_tests.cs,CheckBIP32Constructors,The length of the statement  "			Assert.Equal(key.Neuter().GetWif(Network.Main)' new ExtPubKey(key.PrivateKey.PubKey' key.ChainCode).GetWif(Network.Main)); " is 122.
Long Statement,NBitcoin.Tests,bip32_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip32_tests.cs,CheckBIP32Constructors,The length of the statement  "			Assert.Equal(key.GetWif(Network.Main)' new ExtKey(key.PrivateKey' key.ChainCode' key.Depth' key.ParentFingerprint' key.Child).GetWif(Network.Main)); " is 148.
Long Statement,NBitcoin.Tests,bip32_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip32_tests.cs,CheckBIP32Constructors,The length of the statement  "			Assert.Equal(key.Neuter().GetWif(Network.Main)' new ExtPubKey(key.PrivateKey.PubKey' key.ChainCode' key.Depth' key.ParentFingerprint' key.Child).GetWif(Network.Main)); " is 167.
Long Statement,NBitcoin.Tests,bip32_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip32_tests.cs,CanRecoverExtKeyFromExtPubKeyAndOneChildExtKey,The length of the statement  "			ExtKey key = ExtKey.Parse("xprv9s21ZrQH143K3Z9EwCXrA5VbypnvWGiE9z22S1cLLPi7r8DVUkTabBvMjeirS8KCyppw24KoD4sFmja8UDU4VL32SBdip78LY6sz3X2GPju"' Network.Main) " is 154.
Long Statement,NBitcoin.Tests,bip32_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip32_tests.cs,CanRoundTripExtKeyBase58Data,The length of the statement  "			Assert.True(ExtKey.Parse(key.ToString(Network.Main)' Network.Main).ToString(Network.Main) == key.ToString(Network.Main)); " is 121.
Long Statement,NBitcoin.Tests,bip32_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip32_tests.cs,CanRoundTripExtKeyBase58Data,The length of the statement  "			Assert.True(ExtPubKey.Parse(pubkey.ToString(Network.Main)' Network.Main).ToString(Network.Main) == pubkey.ToString(Network.Main)); " is 130.
Long Statement,NBitcoin.Tests,BIP38Tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\BIP38Tests.cs,EncryptedSecretECmultiplyNoLotSimple,The length of the statement  "				Assert.False(result.ConfirmationCode.Check("test"' new Key().PubKey.GetAddress(ScriptPubKeyType.Legacy' Network.Main))); " is 120.
Long Statement,NBitcoin.Tests,BIP38Tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\BIP38Tests.cs,EncryptedSecretECmultiplyNoLotSimple,The length of the statement  "				Assert.Equal(result.GeneratedAddress.ToString()' decryptedKey.PubKey.GetAddress(ScriptPubKeyType.Legacy' Network.Main).ToString()); " is 131.
Long Statement,NBitcoin.Tests,bip39_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip39_tests.cs,CanGenerateMnemonicOfSpecificLength,The length of the statement  "			foreach (var count in new[] { WordCount.Twelve' WordCount.TwentyFour' WordCount.TwentyOne' WordCount.Fifteen' WordCount.Eighteen }) " is 131.
Long Statement,NBitcoin.Tests,bip39_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip39_tests.cs,CanDetectBadChecksum,The length of the statement  "			var mnemonic = new Mnemonic("turtle front uncle idea crush write shrug there lottery flower risk shell"' Wordlist.English); " is 123.
Long Statement,NBitcoin.Tests,bip39_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip39_tests.cs,TestKnownEnglish,The length of the statement  "			Assert.Equal(Language.English' Wordlist.AutoDetectLanguage(new string[] { "abandon"' "abandon"' "abandon"' "abandon"' "abandon"' "abandon"' "abandon"' "abandon"' "abandon"' "abandon"' "abandon"' "about" })); " is 207.
Long Statement,NBitcoin.Tests,bip39_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip39_tests.cs,TestKnownJapenese,The length of the statement  "			Assert.Equal(Language.Japanese' Wordlist.AutoDetectLanguage(new string[] { "あいこくしん"' "あいさつ"' "あいだ"' "あおぞら"' "あかちゃん"' "あきる"' "あけがた"' "あける"' "あこがれる"' "あさい"' "あさひ"' "あしあと"' "あじわう"' "あずかる"' "あずき"' "あそぶ"' "あたえる"' "あたためる"' "あたりまえ"' "あたる"' "あつい"' "あつかう"' "あっしゅく"' "あつまり"' "あつめる"' "あてな"' "あてはまる"' "あひる"' "あぶら"' "あぶる"' "あふれる"' "あまい"' "あまど"' "あまやかす"' "あまり"' "あみもの"' "あめりか" })); " is 378.
Long Statement,NBitcoin.Tests,bip39_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip39_tests.cs,TestKnownSpanish,The length of the statement  "			Assert.Equal(Language.Spanish' Wordlist.AutoDetectLanguage(new string[] { "yoga"' "yogur"' "zafiro"' "zanja"' "zapato"' "zarza"' "zona"' "zorro"' "zumo"' "zurdo" })); " is 166.
Long Statement,NBitcoin.Tests,bip39_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip39_tests.cs,TestKnownChineseSimplified,The length of the statement  "			Assert.Equal(Language.ChineseSimplified' Wordlist.AutoDetectLanguage(new string[] { "的"' "一"' "是"' "在"' "不"' "了"' "有"' "和"' "人"' "这" })); " is 137.
Long Statement,NBitcoin.Tests,bip39_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip39_tests.cs,TestKnownChineseTraditional,The length of the statement  "			Assert.Equal(Language.ChineseTraditional' Wordlist.AutoDetectLanguage(new string[] { "的"' "一"' "是"' "在"' "不"' "了"' "有"' "和"' "載" })); " is 133.
Long Statement,NBitcoin.Tests,bip39_Codegen,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip39_tests.cs,GenerateHardcodedBIP39Dictionary,The length of the statement  "			foreach (var lang in new[] { Language.ChineseSimplified' Language.ChineseTraditional' Language.English' Language.Japanese' Language.Spanish' Language.French }) " is 159.
Long Statement,NBitcoin.Tests,bip39_Codegen,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip39_tests.cs,GetLanguage,The length of the statement  "			var data = client.GetAsync("https://raw.githubusercontent.com/bitcoin/bips/master/bip-0039/" + name + ".txt").Result.Content.ReadAsStringAsync().Result; " is 152.
Long Statement,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_create_insert_serialize,The length of the statement  "			Assert.True(filter.Contains(ParseHex("99108ad8ed9bb6274d3980bab5a85c048f0950c8"))' "BloomFilter doesn't contain just-inserted object!"); " is 136.
Long Statement,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_create_insert_serialize,The length of the statement  "			Assert.True(!filter.Contains(ParseHex("19108ad8ed9bb6274d3980bab5a85c048f0950c8"))' "BloomFilter contains something it shouldn't!"); " is 132.
Long Statement,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_create_insert_serialize,The length of the statement  "			Assert.True(filter.Contains(ParseHex("b5a2c786d9ef4658287ced5914b37a1b4aa32eee"))' "BloomFilter doesn't contain just-inserted object (2)!"); " is 140.
Long Statement,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_create_insert_serialize,The length of the statement  "			Assert.True(filter.Contains(ParseHex("b9300670b4c5366e95b2699e8b18bc75e5f729c5"))' "BloomFilter doesn't contain just-inserted object (3)!"); " is 140.
Long Statement,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_create_insert_serialize_with_tweak,The length of the statement  "			Assert.True(filter.Contains(ParseHex("99108ad8ed9bb6274d3980bab5a85c048f0950c8"))' "BloomFilter doesn't contain just-inserted object!"); " is 136.
Long Statement,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_create_insert_serialize_with_tweak,The length of the statement  "			Assert.True(!filter.Contains(ParseHex("19108ad8ed9bb6274d3980bab5a85c048f0950c8"))' "BloomFilter contains something it shouldn't!"); " is 132.
Long Statement,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_create_insert_serialize_with_tweak,The length of the statement  "			Assert.True(filter.Contains(ParseHex("b5a2c786d9ef4658287ced5914b37a1b4aa32eee"))' "BloomFilter doesn't contain just-inserted object (2)!"); " is 140.
Long Statement,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_create_insert_serialize_with_tweak,The length of the statement  "			Assert.True(filter.Contains(ParseHex("b9300670b4c5366e95b2699e8b18bc75e5f729c5"))' "BloomFilter doesn't contain just-inserted object (3)!"); " is 140.
Long Statement,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_match,The length of the statement  "			tx.ReadWrite(ParseHex("01000000010b26e9b7735eb6aabdf358bab62f9816a21ba9ebdb719d5299e88607d722c190000000008b4830450220070aca44506c5cef3a16ed519d7c3c39f8aab192c4e1c90d065f37b8a4af6141022100a8e160b856c2d43d27d8fba71e5aef6405b8643ac4cb7cb3c462aced7f14711a0141046d11fee51b0e60666d5049a9101a72741df480b96ee26488a4d3466b95c9a40ac5eeef87e10a5cd336c19a84565f80fa6c547957b7700ff4dfbdefe76036c339ffffffff021bff3d11000000001976a91404943fdd508053c75000106d3bc6e2754dbcff1988ac2f15de00000000001976a914a266436d2965547608b9e15d9032a7b9d64fa43188ac00000000")' Network.Main); " is 557.
Long Statement,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_match,The length of the statement  "			var ch = new byte[] { 0x01' 0x00' 0x00' 0x00' 0x01' 0x6b' 0xff' 0x7f' 0xcd' 0x4f' 0x85' 0x65' 0xef' 0x40' 0x6d' 0xd5' 0xd6' 0x3d' 0x4f' 0xf9' 0x4f' 0x31' 0x8f' 0xe8' 0x20' 0x27' 0xfd' 0x4d' 0xc4' 0x51' 0xb0' 0x44' 0x74' 0x01' 0x9f' 0x74' 0xb4' 0x00' 0x00' 0x00' 0x00' 0x8c' 0x49' 0x30' 0x46' 0x02' 0x21' 0x00' 0xda' 0x0d' 0xc6' 0xae' 0xce' 0xfe' 0x1e' 0x06' 0xef' 0xdf' 0x05' 0x77' 0x37' 0x57' 0xde' 0xb1' 0x68' 0x82' 0x09' 0x30' 0xe3' 0xb0' 0xd0' 0x3f' 0x46' 0xf5' 0xfc' 0xf1' 0x50' 0xbf' 0x99' 0x0c' 0x02' 0x21' 0x00' 0xd2' 0x5b' 0x5c' 0x87' 0x04' 0x00' 0x76' 0xe4' 0xf2' 0x53' 0xf8' 0x26' 0x2e' 0x76' 0x3e' 0x2d' 0xd5' 0x1e' 0x7f' 0xf0' 0xbe' 0x15' 0x77' 0x27' 0xc4' 0xbc' 0x42' 0x80' 0x7f' 0x17' 0xbd' 0x39' 0x01' 0x41' 0x04' 0xe6' 0xc2' 0x6e' 0xf6' 0x7d' 0xc6' 0x10' 0xd2' 0xcd' 0x19' 0x24' 0x84' 0x78' 0x9a' 0x6c' 0xf9' 0xae' 0xa9' 0x93' 0x0b' 0x94' 0x4b' 0x7e' 0x2d' 0xb5' 0x34' 0x2b' 0x9d' 0x9e' 0x5b' 0x9f' 0xf7' 0x9a' 0xff' 0x9a' 0x2e' 0xe1' 0x97' 0x8d' 0xd7' 0xfd' 0x01' 0xdf' 0xc5' 0x22' 0xee' 0x02' 0x28' 0x3d' 0x3b' 0x06' 0xa9' 0xd0' 0x3a' 0xcf' 0x80' 0x96' 0x96' 0x8d' 0x7d' 0xbb' 0x0f' 0x91' 0x78' 0xff' 0xff' 0xff' 0xff' 0x02' 0x8b' 0xa7' 0x94' 0x0e' 0x00' 0x00' 0x00' 0x00' 0x19' 0x76' 0xa9' 0x14' 0xba' 0xde' 0xec' 0xfd' 0xef' 0x05' 0x07' 0x24' 0x7f' 0xc8' 0xf7' 0x42' 0x41' 0xd7' 0x3b' 0xc0' 0x39' 0x97' 0x2d' 0x7b' 0x88' 0xac' 0x40' 0x94' 0xa8' 0x02' 0x00' 0x00' 0x00' 0x00' 0x19' 0x76' 0xa9' 0x14' 0xc1' 0x09' 0x32' 0x48' 0x3f' 0xec' 0x93' 0xed' 0x51' 0xf5' 0xfe' 0x95' 0xe7' 0x25' 0x59' 0xf2' 0xcc' 0x70' 0x43' 0xf9' 0x88' 0xac' 0x00' 0x00' 0x00' 0x00' 0x00 }; " is 1583.
Long Statement,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_match,The length of the statement  "			filter.Insert(ParseHex("30450220070aca44506c5cef3a16ed519d7c3c39f8aab192c4e1c90d065f37b8a4af6141022100a8e160b856c2d43d27d8fba71e5aef6405b8643ac4cb7cb3c462aced7f14711a01")); " is 172.
Long Statement,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_match,The length of the statement  "			filter.Insert(ParseHex("046d11fee51b0e60666d5049a9101a72741df480b96ee26488a4d3466b95c9a40ac5eeef87e10a5cd336c19a84565f80fa6c547957b7700ff4dfbdefe76036c339")); " is 158.
Long Statement,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_match,The length of the statement  "			OutPoint prevOutPoint = new OutPoint(uint256.Parse("0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b")' 0); " is 125.
Long Statement,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_match,The length of the statement  "			Assert.True(!filter.IsRelevantAndUpdate(tx)' "Simple Bloom filter matched COutPoint for an output we didn't care about"); " is 121.
Long Statement,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_match,The length of the statement  "			Assert.True(!filter.IsRelevantAndUpdate(tx)' "Simple Bloom filter matched COutPoint for an output we didn't care about"); " is 121.
Long Statement,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_1,The length of the statement  "			block.ReadWrite(ParseHex("0100000090f0a9f110702f808219ebea1173056042a714bad51b916cb6800000000000005275289558f51c9966699404ae2294730c3c9f9bda53523ce50e9b95e558da2fdb261b4d4c86041b1ab1bf930901000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0146ffffffff0100f2052a01000000434104e18f7afbe4721580e81e8414fc8c24d7cfacf254bb5c7b949450c3e997c2dc1242487a8169507b631eb3771f2b425483fb13102c4eb5d858eef260fe70fbfae0ac00000000010000000196608ccbafa16abada902780da4dc35dafd7af05fa0da08cf833575f8cf9e836000000004a493046022100dab24889213caf43ae6adc41cf1c9396c08240c199f5225acf45416330fd7dbd022100fe37900e0644bf574493a07fc5edba06dbc07c311b947520c2d514bc5725dcb401ffffffff0100f2052a010000001976a914f15d1921f52e4007b146dfa60f369ed2fc393ce288ac000000000100000001fb766c1288458c2bafcfec81e48b24d98ec706de6b8af7c4e3c29419bfacb56d000000008c493046022100f268ba165ce0ad2e6d93f089cfcd3785de5c963bb5ea6b8c1b23f1ce3e517b9f022100da7c0f21adc6c401887f2bfd1922f11d76159cbc597fbd756a23dcbb00f4d7290141042b4e8625a96127826915a5b109852636ad0da753c9e1d5606a50480cd0c40f1f8b8d898235e571fe9357d9ec842bc4bba1827daaf4de06d71844d0057707966affffffff0280969800000000001976a9146963907531db72d0ed1a0cfb471ccb63923446f388ac80d6e34c000000001976a914f0688ba1c0d1ce182c7af6741e02658c7d4dfcd388ac000000000100000002c40297f730dd7b5a99567eb8d27b78758f607507c52292d02d4031895b52f2ff010000008b483045022100f7edfd4b0aac404e5bab4fd3889e0c6c41aa8d0e6fa122316f68eddd0a65013902205b09cc8b2d56e1cd1f7f2fafd60a129ed94504c4ac7bdc67b56fe67512658b3e014104732012cb962afa90d31b25d8fb0e32c94e513ab7a17805c14ca4c3423e18b4fb5d0e676841733cb83abaf975845c9f6f2a8097b7d04f4908b18368d6fc2d68ecffffffffca5065ff9617cbcba45eb23726df6498a9b9cafed4f54cbab9d227b0035ddefb000000008a473044022068010362a13c7f9919fa832b2dee4e788f61f6f5d344a7c2a0da6ae740605658022006d1af525b9a14a35c003b78b72bd59738cd676f845d1ff3fc25049e01003614014104732012cb962afa90d31b25d8fb0e32c94e513ab7a17805c14ca4c3423e18b4fb5d0e676841733cb83abaf975845c9f6f2a8097b7d04f4908b18368d6fc2d68ecffffffff01001ec4110200000043410469ab4181eceb28985b9b4e895c13fa5e68d85761b7eee311db5addef76fa8621865134a221bd01f28ec9999ee3e021e60766e9d1f3458c115fb28650605f11c9ac000000000100000001cdaf2f758e91c514655e2dc50633d1e4c84989f8aa90a0dbc883f0d23ed5c2fa010000008b48304502207ab51be6f12a1962ba0aaaf24a20e0b69b27a94fac5adf45aa7d2d18ffd9236102210086ae728b370e5329eead9accd880d0cb070aea0c96255fae6c4f1ddcce1fd56e014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff02404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac002d3101000000001976a9141befba0cdc1ad56529371864d9f6cb042faa06b588ac000000000100000001b4a47603e71b61bc3326efd90111bf02d2f549b067f4c4a8fa183b57a0f800cb010000008a4730440220177c37f9a505c3f1a1f0ce2da777c339bd8339ffa02c7cb41f0a5804f473c9230220585b25a2ee80eb59292e52b987dad92acb0c64eced92ed9ee105ad153cdb12d001410443bd44f683467e549dae7d20d1d79cbdb6df985c6e9c029c8d0c6cb46cc1a4d3cf7923c5021b27f7a0b562ada113bc85d5fda5a1b41e87fe6e8802817cf69996ffffffff0280651406000000001976a9145505614859643ab7b547cd7f1f5e7e2a12322d3788ac00aa0271000000001976a914ea4720a7a52fc166c55ff2298e07baf70ae67e1b88ac00000000010000000586c62cd602d219bb60edb14a3e204de0705176f9022fe49a538054fb14abb49e010000008c493046022100f2bc2aba2534becbdf062eb993853a42bbbc282083d0daf9b4b585bd401aa8c9022100b1d7fd7ee0b95600db8535bbf331b19eed8d961f7a8e54159c53675d5f69df8c014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff03ad0e58ccdac3df9dc28a218bcf6f1997b0a93306faaa4b3a28ae83447b2179010000008b483045022100be12b2937179da88599e27bb31c3525097a07cdb52422d165b3ca2f2020ffcf702200971b51f853a53d644ebae9ec8f3512e442b1bcb6c315a5b491d119d10624c83014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff2acfcab629bbc8685792603762c921580030ba144af553d271716a95089e107b010000008b483045022100fa579a840ac258871365dd48cd7552f96c8eea69bd00d84f05b283a0dab311e102207e3c0ee9234814cfbb1b659b83671618f45abc1326b9edcc77d552a4f2a805c0014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffffdcdc6023bbc9944a658ddc588e61eacb737ddf0a3cd24f113b5a8634c517fcd2000000008b4830450221008d6df731df5d32267954bd7d2dda2302b74c6c2a6aa5c0ca64ecbabc1af03c75022010e55c571d65da7701ae2da1956c442df81bbf076cdbac25133f99d98a9ed34c014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffffe15557cd5ce258f479dfd6dc6514edf6d7ed5b21fcfa4a038fd69f06b83ac76e010000008b483045022023b3e0ab071eb11de2eb1cc3a67261b866f86bf6867d4558165f7c8c8aca2d86022100dc6e1f53a91de3efe8f63512850811f26284b62f850c70ca73ed5de8771fb451014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff01404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac00000000010000000166d7577163c932b4f9690ca6a80b6e4eb001f0a2fa9023df5595602aae96ed8d000000008a4730440220262b42546302dfb654a229cefc86432b89628ff259dc87edd1154535b16a67e102207b4634c020a97c3e7bbd0d4d19da6aa2269ad9dded4026e896b213d73ca4b63f014104979b82d02226b3a4597523845754d44f13639e3bf2df5e82c6aab2bdc79687368b01b1ab8b19875ae3c90d661a3d0a33161dab29934edeb36aa01976be3baf8affffffff02404b4c00000000001976a9144854e695a02af0aeacb823ccbc272134561e0a1688ac40420f00000000001976a914abee93376d6b37b5c2940655a6fcaf1c8e74237988ac0000000001000000014e3f8ef2e91349a9059cb4f01e54ab2597c1387161d3da89919f7ea6acdbb371010000008c49304602210081f3183471a5ca22307c0800226f3ef9c353069e0773ac76bb580654d56aa523022100d4c56465bdc069060846f4fbf2f6b20520b2a80b08b168b31e66ddb9c694e240014104976c79848e18251612f8940875b2b08d06e6dc73b9840e8860c066b7e87432c477e9a59a453e71e6d76d5fe34058b800a098fc1740ce3012e8fc8a00c96af966ffffffff02c0e1e400000000001976a9144134e75a6fcb6042034aab5e18570cf1f844f54788ac404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac00000000")' block.GetConsensusFactory()); " is 6167.
Long Statement,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_2,The length of the statement  "			block.ReadWrite(ParseHex("0100000075616236cc2126035fadb38deb65b9102cc2c41c09cdf29fc051906800000000fe7d5e12ef0ff901f6050211249919b1c0653771832b3a80c66cea42847f0ae1d4d26e49ffff001d00f0a4410401000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0804ffff001d029105ffffffff0100f2052a010000004341046d8709a041d34357697dfcb30a9d05900a6294078012bf3bb09c6f9b525f1d16d5503d7905db1ada9501446ea00728668fc5719aa80be2fdfc8a858a4dbdd4fbac00000000010000000255605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d28350000000049483045022100aa46504baa86df8a33b1192b1b9367b4d729dc41e389f2c04f3e5c7f0559aae702205e82253a54bf5c4f65b7428551554b2045167d6d206dfe6a2e198127d3f7df1501ffffffff55605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d2835010000004847304402202329484c35fa9d6bb32a55a70c0982f606ce0e3634b69006138683bcd12cbb6602200c28feb1e2555c3210f1dddb299738b4ff8bbe9667b68cb8764b5ac17b7adf0001ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac0000000001000000025f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028000000004847304402205d6058484157235b06028c30736c15613a28bdb768ee628094ca8b0030d4d6eb0220328789c9a2ec27ddaec0ad5ef58efded42e6ea17c2e1ce838f3d6913f5e95db601ffffffff5f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028010000004a493046022100c45af050d3cea806cedd0ab22520c53ebe63b987b8954146cdca42487b84bdd6022100b9b027716a6b59e640da50a864d6dd8a0ef24c76ce62391fa3eabaf4d2886d2d01ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac000000000100000002e2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b0000000048473044022016e7a727a061ea2254a6c358376aaa617ac537eb836c77d646ebda4c748aac8b0220192ce28bf9f2c06a6467e6531e27648d2b3e2e2bae85159c9242939840295ba501ffffffffe2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b010000004a493046022100b7a1a755588d4190118936e15cd217d133b0e4a53c3c15924010d5648d8925c9022100aaef031874db2114f2d869ac2de4ae53908fbfea5b2b1862e181626bb9005c9f01ffffffff0200e1f505000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00000000")' block.GetConsensusFactory()); " is 2829.
Long Statement,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_2,The length of the statement  "			filter.Insert(ParseHex("044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45af")); " is 158.
Long Statement,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_2_with_update_none,The length of the statement  "			block.ReadWrite(ParseHex("0100000075616236cc2126035fadb38deb65b9102cc2c41c09cdf29fc051906800000000fe7d5e12ef0ff901f6050211249919b1c0653771832b3a80c66cea42847f0ae1d4d26e49ffff001d00f0a4410401000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0804ffff001d029105ffffffff0100f2052a010000004341046d8709a041d34357697dfcb30a9d05900a6294078012bf3bb09c6f9b525f1d16d5503d7905db1ada9501446ea00728668fc5719aa80be2fdfc8a858a4dbdd4fbac00000000010000000255605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d28350000000049483045022100aa46504baa86df8a33b1192b1b9367b4d729dc41e389f2c04f3e5c7f0559aae702205e82253a54bf5c4f65b7428551554b2045167d6d206dfe6a2e198127d3f7df1501ffffffff55605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d2835010000004847304402202329484c35fa9d6bb32a55a70c0982f606ce0e3634b69006138683bcd12cbb6602200c28feb1e2555c3210f1dddb299738b4ff8bbe9667b68cb8764b5ac17b7adf0001ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac0000000001000000025f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028000000004847304402205d6058484157235b06028c30736c15613a28bdb768ee628094ca8b0030d4d6eb0220328789c9a2ec27ddaec0ad5ef58efded42e6ea17c2e1ce838f3d6913f5e95db601ffffffff5f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028010000004a493046022100c45af050d3cea806cedd0ab22520c53ebe63b987b8954146cdca42487b84bdd6022100b9b027716a6b59e640da50a864d6dd8a0ef24c76ce62391fa3eabaf4d2886d2d01ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac000000000100000002e2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b0000000048473044022016e7a727a061ea2254a6c358376aaa617ac537eb836c77d646ebda4c748aac8b0220192ce28bf9f2c06a6467e6531e27648d2b3e2e2bae85159c9242939840295ba501ffffffffe2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b010000004a493046022100b7a1a755588d4190118936e15cd217d133b0e4a53c3c15924010d5648d8925c9022100aaef031874db2114f2d869ac2de4ae53908fbfea5b2b1862e181626bb9005c9f01ffffffff0200e1f505000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00000000")' block.GetConsensusFactory()); " is 2829.
Long Statement,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_2_with_update_none,The length of the statement  "			filter.Insert(ParseHex("044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45af")); " is 158.
Long Statement,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_3_and_serialize,The length of the statement  "			block.ReadWrite(ParseHex("0100000079cda856b143d9db2c1caff01d1aecc8630d30625d10e8b4b8b0000000000000b50cc069d6a3e33e3ff84a5c41d9d3febe7c770fdcc96b2c3ff60abe184f196367291b4d4c86041b8fa45d630101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff08044c86041b020a02ffffffff0100f2052a01000000434104ecd3229b0571c3be876feaac0442a9f13c5a572742927af1dc623353ecf8c202225f64868137a18cdd85cbbb4c74fbccfd4f49639cf1bdc94a5672bb15ad5d4cac00000000")' block.GetConsensusFactory()); " is 491.
Long Statement,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_3_and_serialize,The length of the statement  "			byte[] vch = ParseHex("0100000079cda856b143d9db2c1caff01d1aecc8630d30625d10e8b4b8b0000000000000b50cc069d6a3e33e3ff84a5c41d9d3febe7c770fdcc96b2c3ff60abe184f196367291b4d4c86041b8fa45d630100000001b50cc069d6a3e33e3ff84a5c41d9d3febe7c770fdcc96b2c3ff60abe184f19630101"); " is 264.
Long Statement,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_4,The length of the statement  "			block.ReadWrite(ParseHex("0100000082bb869cf3a793432a66e826e05a6fc37469f8efb7421dc880670100000000007f16c5962e8bd963659c793ce370d95f093bc7e367117b3c30c1f8fdd0d9728776381b4d4c86041b554b85290701000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0136ffffffff0100f2052a01000000434104eaafc2314def4ca98ac970241bcab022b9c1e1f4ea423a20f134c876f2c01ec0f0dd5b2e86e7168cefe0d81113c3807420ce13ad1357231a2252247d97a46a91ac000000000100000001bcad20a6a29827d1424f08989255120bf7f3e9e3cdaaa6bb31b0737fe048724300000000494830450220356e834b046cadc0f8ebb5a8a017b02de59c86305403dad52cd77b55af062ea10221009253cd6c119d4729b77c978e1e2aa19f5ea6e0e52b3f16e32fa608cd5bab753901ffffffff02008d380c010000001976a9142b4b8072ecbba129b6453c63e129e643207249ca88ac0065cd1d000000001976a9141b8dd13b994bcfc787b32aeadf58ccb3615cbd5488ac000000000100000003fdacf9b3eb077412e7a968d2e4f11b9a9dee312d666187ed77ee7d26af16cb0b000000008c493046022100ea1608e70911ca0de5af51ba57ad23b9a51db8d28f82c53563c56a05c20f5a87022100a8bdc8b4a8acc8634c6b420410150775eb7f2474f5615f7fccd65af30f310fbf01410465fdf49e29b06b9a1582287b6279014f834edc317695d125ef623c1cc3aaece245bd69fcad7508666e9c74a49dc9056d5fc14338ef38118dc4afae5fe2c585caffffffff309e1913634ecb50f3c4f83e96e70b2df071b497b8973a3e75429df397b5af83000000004948304502202bdb79c596a9ffc24e96f4386199aba386e9bc7b6071516e2b51dda942b3a1ed022100c53a857e76b724fc14d45311eac5019650d415c3abb5428f3aae16d8e69bec2301ffffffff2089e33491695080c9edc18a428f7d834db5b6d372df13ce2b1b0e0cbcb1e6c10000000049483045022100d4ce67c5896ee251c810ac1ff9ceccd328b497c8f553ab6e08431e7d40bad6b5022033119c0c2b7d792d31f1187779c7bd95aefd93d90a715586d73801d9b47471c601ffffffff0100714460030000001976a914c7b55141d097ea5df7a0ed330cf794376e53ec8d88ac0000000001000000045bf0e214aa4069a3e792ecee1e1bf0c1d397cde8dd08138f4b72a00681743447000000008b48304502200c45de8c4f3e2c1821f2fc878cba97b1e6f8807d94930713aa1c86a67b9bf1e40221008581abfef2e30f957815fc89978423746b2086375ca8ecf359c85c2a5b7c88ad01410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffffd669f7d7958d40fc59d2253d88e0f248e29b599c80bbcec344a83dda5f9aa72c000000008a473044022078124c8beeaa825f9e0b30bff96e564dd859432f2d0cb3b72d3d5d93d38d7e930220691d233b6c0f995be5acb03d70a7f7a65b6bc9bdd426260f38a1346669507a3601410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95fffffffff878af0d93f5229a68166cf051fd372bb7a537232946e0a46f53636b4dafdaa4000000008c493046022100c717d1714551663f69c3c5759bdbb3a0fcd3fab023abc0e522fe6440de35d8290221008d9cbe25bffc44af2b18e81c58eb37293fd7fe1c2e7b46fc37ee8c96c50ab1e201410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff27f2b668859cd7f2f894aa0fd2d9e60963bcd07c88973f425f999b8cbfd7a1e2000000008c493046022100e00847147cbf517bcc2f502f3ddc6d284358d102ed20d47a8aa788a62f0db780022100d17b2d6fa84dcaf1c95d88d7e7c30385aecf415588d749afd3ec81f6022cecd701410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff0100c817a8040000001976a914b6efd80d99179f4f4ff6f4dd0a007d018c385d2188ac000000000100000001834537b2f1ce8ef9373a258e10545ce5a50b758df616cd4356e0032554ebd3c4000000008b483045022100e68f422dd7c34fdce11eeb4509ddae38201773dd62f284e8aa9d96f85099d0b002202243bd399ff96b649a0fad05fa759d6a882f0af8c90cf7632c2840c29070aec20141045e58067e815c2f464c6a2a15f987758374203895710c2d452442e28496ff38ba8f5fd901dc20e29e88477167fe4fc299bf818fd0d9e1632d467b2a3d9503b1aaffffffff0280d7e636030000001976a914f34c3e10eb387efe872acb614c89e78bfca7815d88ac404b4c00000000001976a914a84e272933aaf87e1715d7786c51dfaeb5b65a6f88ac00000000010000000143ac81c8e6f6ef307dfe17f3d906d999e23e0189fda838c5510d850927e03ae7000000008c4930460221009c87c344760a64cb8ae6685a3eec2c1ac1bed5b88c87de51acd0e124f266c16602210082d07c037359c3a257b5c63ebd90f5a5edf97b2ac1c434b08ca998839f346dd40141040ba7e521fa7946d12edbb1d1e95a15c34bd4398195e86433c92b431cd315f455fe30032ede69cad9d1e1ed6c3c4ec0dbfced53438c625462afb792dcb098544bffffffff0240420f00000000001976a9144676d1b820d63ec272f1900d59d43bc6463d96f888ac40420f00000000001976a914648d04341d00d7968b3405c034adc38d4d8fb9bd88ac00000000010000000248cc917501ea5c55f4a8d2009c0567c40cfe037c2e71af017d0a452ff705e3f1000000008b483045022100bf5fdc86dc5f08a5d5c8e43a8c9d5b1ed8c65562e280007b52b133021acd9acc02205e325d613e555f772802bf413d36ba807892ed1a690a77811d3033b3de226e0a01410429fa713b124484cb2bd7b5557b2c0b9df7b2b1fee61825eadc5ae6c37a9920d38bfccdc7dc3cb0c47d7b173dbc9db8d37db0a33ae487982c59c6f8606e9d1791ffffffff41ed70551dd7e841883ab8f0b16bf04176b7d1480e4f0af9f3d4c3595768d068000000008b4830450221008513ad65187b903aed1102d1d0c47688127658c51106753fed0151ce9c16b80902201432b9ebcb87bd04ceb2de66035fbbaf4bf8b00d1cfe41f1a1f7338f9ad79d210141049d4cf80125bf50be1709f718c07ad15d0fc612b7da1f5570dddc35f2a352f0f27c978b06820edca9ef982c35fda2d255afba340068c5035552368bc7200c1488ffffffff0100093d00000000001976a9148edb68822f1ad580b043c7b3df2e400f8699eb4888ac00000000")' block.GetConsensusFactory()); " is 5151.
Long Statement,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_4_test_p2pubkey_only,The length of the statement  "			block.ReadWrite(ParseHex("0100000082bb869cf3a793432a66e826e05a6fc37469f8efb7421dc880670100000000007f16c5962e8bd963659c793ce370d95f093bc7e367117b3c30c1f8fdd0d9728776381b4d4c86041b554b85290701000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0136ffffffff0100f2052a01000000434104eaafc2314def4ca98ac970241bcab022b9c1e1f4ea423a20f134c876f2c01ec0f0dd5b2e86e7168cefe0d81113c3807420ce13ad1357231a2252247d97a46a91ac000000000100000001bcad20a6a29827d1424f08989255120bf7f3e9e3cdaaa6bb31b0737fe048724300000000494830450220356e834b046cadc0f8ebb5a8a017b02de59c86305403dad52cd77b55af062ea10221009253cd6c119d4729b77c978e1e2aa19f5ea6e0e52b3f16e32fa608cd5bab753901ffffffff02008d380c010000001976a9142b4b8072ecbba129b6453c63e129e643207249ca88ac0065cd1d000000001976a9141b8dd13b994bcfc787b32aeadf58ccb3615cbd5488ac000000000100000003fdacf9b3eb077412e7a968d2e4f11b9a9dee312d666187ed77ee7d26af16cb0b000000008c493046022100ea1608e70911ca0de5af51ba57ad23b9a51db8d28f82c53563c56a05c20f5a87022100a8bdc8b4a8acc8634c6b420410150775eb7f2474f5615f7fccd65af30f310fbf01410465fdf49e29b06b9a1582287b6279014f834edc317695d125ef623c1cc3aaece245bd69fcad7508666e9c74a49dc9056d5fc14338ef38118dc4afae5fe2c585caffffffff309e1913634ecb50f3c4f83e96e70b2df071b497b8973a3e75429df397b5af83000000004948304502202bdb79c596a9ffc24e96f4386199aba386e9bc7b6071516e2b51dda942b3a1ed022100c53a857e76b724fc14d45311eac5019650d415c3abb5428f3aae16d8e69bec2301ffffffff2089e33491695080c9edc18a428f7d834db5b6d372df13ce2b1b0e0cbcb1e6c10000000049483045022100d4ce67c5896ee251c810ac1ff9ceccd328b497c8f553ab6e08431e7d40bad6b5022033119c0c2b7d792d31f1187779c7bd95aefd93d90a715586d73801d9b47471c601ffffffff0100714460030000001976a914c7b55141d097ea5df7a0ed330cf794376e53ec8d88ac0000000001000000045bf0e214aa4069a3e792ecee1e1bf0c1d397cde8dd08138f4b72a00681743447000000008b48304502200c45de8c4f3e2c1821f2fc878cba97b1e6f8807d94930713aa1c86a67b9bf1e40221008581abfef2e30f957815fc89978423746b2086375ca8ecf359c85c2a5b7c88ad01410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffffd669f7d7958d40fc59d2253d88e0f248e29b599c80bbcec344a83dda5f9aa72c000000008a473044022078124c8beeaa825f9e0b30bff96e564dd859432f2d0cb3b72d3d5d93d38d7e930220691d233b6c0f995be5acb03d70a7f7a65b6bc9bdd426260f38a1346669507a3601410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95fffffffff878af0d93f5229a68166cf051fd372bb7a537232946e0a46f53636b4dafdaa4000000008c493046022100c717d1714551663f69c3c5759bdbb3a0fcd3fab023abc0e522fe6440de35d8290221008d9cbe25bffc44af2b18e81c58eb37293fd7fe1c2e7b46fc37ee8c96c50ab1e201410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff27f2b668859cd7f2f894aa0fd2d9e60963bcd07c88973f425f999b8cbfd7a1e2000000008c493046022100e00847147cbf517bcc2f502f3ddc6d284358d102ed20d47a8aa788a62f0db780022100d17b2d6fa84dcaf1c95d88d7e7c30385aecf415588d749afd3ec81f6022cecd701410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff0100c817a8040000001976a914b6efd80d99179f4f4ff6f4dd0a007d018c385d2188ac000000000100000001834537b2f1ce8ef9373a258e10545ce5a50b758df616cd4356e0032554ebd3c4000000008b483045022100e68f422dd7c34fdce11eeb4509ddae38201773dd62f284e8aa9d96f85099d0b002202243bd399ff96b649a0fad05fa759d6a882f0af8c90cf7632c2840c29070aec20141045e58067e815c2f464c6a2a15f987758374203895710c2d452442e28496ff38ba8f5fd901dc20e29e88477167fe4fc299bf818fd0d9e1632d467b2a3d9503b1aaffffffff0280d7e636030000001976a914f34c3e10eb387efe872acb614c89e78bfca7815d88ac404b4c00000000001976a914a84e272933aaf87e1715d7786c51dfaeb5b65a6f88ac00000000010000000143ac81c8e6f6ef307dfe17f3d906d999e23e0189fda838c5510d850927e03ae7000000008c4930460221009c87c344760a64cb8ae6685a3eec2c1ac1bed5b88c87de51acd0e124f266c16602210082d07c037359c3a257b5c63ebd90f5a5edf97b2ac1c434b08ca998839f346dd40141040ba7e521fa7946d12edbb1d1e95a15c34bd4398195e86433c92b431cd315f455fe30032ede69cad9d1e1ed6c3c4ec0dbfced53438c625462afb792dcb098544bffffffff0240420f00000000001976a9144676d1b820d63ec272f1900d59d43bc6463d96f888ac40420f00000000001976a914648d04341d00d7968b3405c034adc38d4d8fb9bd88ac00000000010000000248cc917501ea5c55f4a8d2009c0567c40cfe037c2e71af017d0a452ff705e3f1000000008b483045022100bf5fdc86dc5f08a5d5c8e43a8c9d5b1ed8c65562e280007b52b133021acd9acc02205e325d613e555f772802bf413d36ba807892ed1a690a77811d3033b3de226e0a01410429fa713b124484cb2bd7b5557b2c0b9df7b2b1fee61825eadc5ae6c37a9920d38bfccdc7dc3cb0c47d7b173dbc9db8d37db0a33ae487982c59c6f8606e9d1791ffffffff41ed70551dd7e841883ab8f0b16bf04176b7d1480e4f0af9f3d4c3595768d068000000008b4830450221008513ad65187b903aed1102d1d0c47688127658c51106753fed0151ce9c16b80902201432b9ebcb87bd04ceb2de66035fbbaf4bf8b00d1cfe41f1a1f7338f9ad79d210141049d4cf80125bf50be1709f718c07ad15d0fc612b7da1f5570dddc35f2a352f0f27c978b06820edca9ef982c35fda2d255afba340068c5035552368bc7200c1488ffffffff0100093d00000000001976a9148edb68822f1ad580b043c7b3df2e400f8699eb4888ac00000000")' block.GetConsensusFactory()); " is 5151.
Long Statement,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_4_test_p2pubkey_only,The length of the statement  "			filter.Insert(ParseHex("04eaafc2314def4ca98ac970241bcab022b9c1e1f4ea423a20f134c876f2c01ec0f0dd5b2e86e7168cefe0d81113c3807420ce13ad1357231a2252247d97a46a91")); " is 158.
Long Statement,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_4_test_p2pubkey_only,The length of the statement  "			Assert.True(filter.Contains(new OutPoint(uint256.Parse("0x147caa76786596590baa4e98f5d9f48b86c7765e489f7a6ff3360fe5c674360b")' 0))); " is 131.
Long Statement,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_4_test_p2pubkey_only,The length of the statement  "			Assert.True(!filter.Contains(new OutPoint(uint256.Parse("0x02981fa052f0481dbc5868f4fc2166035a10f27a03cfd2de67326471df5bc041")' 0))); " is 132.
Long Statement,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_4_test_update_none,The length of the statement  "			block.ReadWrite(ParseHex("0100000082bb869cf3a793432a66e826e05a6fc37469f8efb7421dc880670100000000007f16c5962e8bd963659c793ce370d95f093bc7e367117b3c30c1f8fdd0d9728776381b4d4c86041b554b85290701000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0136ffffffff0100f2052a01000000434104eaafc2314def4ca98ac970241bcab022b9c1e1f4ea423a20f134c876f2c01ec0f0dd5b2e86e7168cefe0d81113c3807420ce13ad1357231a2252247d97a46a91ac000000000100000001bcad20a6a29827d1424f08989255120bf7f3e9e3cdaaa6bb31b0737fe048724300000000494830450220356e834b046cadc0f8ebb5a8a017b02de59c86305403dad52cd77b55af062ea10221009253cd6c119d4729b77c978e1e2aa19f5ea6e0e52b3f16e32fa608cd5bab753901ffffffff02008d380c010000001976a9142b4b8072ecbba129b6453c63e129e643207249ca88ac0065cd1d000000001976a9141b8dd13b994bcfc787b32aeadf58ccb3615cbd5488ac000000000100000003fdacf9b3eb077412e7a968d2e4f11b9a9dee312d666187ed77ee7d26af16cb0b000000008c493046022100ea1608e70911ca0de5af51ba57ad23b9a51db8d28f82c53563c56a05c20f5a87022100a8bdc8b4a8acc8634c6b420410150775eb7f2474f5615f7fccd65af30f310fbf01410465fdf49e29b06b9a1582287b6279014f834edc317695d125ef623c1cc3aaece245bd69fcad7508666e9c74a49dc9056d5fc14338ef38118dc4afae5fe2c585caffffffff309e1913634ecb50f3c4f83e96e70b2df071b497b8973a3e75429df397b5af83000000004948304502202bdb79c596a9ffc24e96f4386199aba386e9bc7b6071516e2b51dda942b3a1ed022100c53a857e76b724fc14d45311eac5019650d415c3abb5428f3aae16d8e69bec2301ffffffff2089e33491695080c9edc18a428f7d834db5b6d372df13ce2b1b0e0cbcb1e6c10000000049483045022100d4ce67c5896ee251c810ac1ff9ceccd328b497c8f553ab6e08431e7d40bad6b5022033119c0c2b7d792d31f1187779c7bd95aefd93d90a715586d73801d9b47471c601ffffffff0100714460030000001976a914c7b55141d097ea5df7a0ed330cf794376e53ec8d88ac0000000001000000045bf0e214aa4069a3e792ecee1e1bf0c1d397cde8dd08138f4b72a00681743447000000008b48304502200c45de8c4f3e2c1821f2fc878cba97b1e6f8807d94930713aa1c86a67b9bf1e40221008581abfef2e30f957815fc89978423746b2086375ca8ecf359c85c2a5b7c88ad01410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffffd669f7d7958d40fc59d2253d88e0f248e29b599c80bbcec344a83dda5f9aa72c000000008a473044022078124c8beeaa825f9e0b30bff96e564dd859432f2d0cb3b72d3d5d93d38d7e930220691d233b6c0f995be5acb03d70a7f7a65b6bc9bdd426260f38a1346669507a3601410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95fffffffff878af0d93f5229a68166cf051fd372bb7a537232946e0a46f53636b4dafdaa4000000008c493046022100c717d1714551663f69c3c5759bdbb3a0fcd3fab023abc0e522fe6440de35d8290221008d9cbe25bffc44af2b18e81c58eb37293fd7fe1c2e7b46fc37ee8c96c50ab1e201410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff27f2b668859cd7f2f894aa0fd2d9e60963bcd07c88973f425f999b8cbfd7a1e2000000008c493046022100e00847147cbf517bcc2f502f3ddc6d284358d102ed20d47a8aa788a62f0db780022100d17b2d6fa84dcaf1c95d88d7e7c30385aecf415588d749afd3ec81f6022cecd701410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff0100c817a8040000001976a914b6efd80d99179f4f4ff6f4dd0a007d018c385d2188ac000000000100000001834537b2f1ce8ef9373a258e10545ce5a50b758df616cd4356e0032554ebd3c4000000008b483045022100e68f422dd7c34fdce11eeb4509ddae38201773dd62f284e8aa9d96f85099d0b002202243bd399ff96b649a0fad05fa759d6a882f0af8c90cf7632c2840c29070aec20141045e58067e815c2f464c6a2a15f987758374203895710c2d452442e28496ff38ba8f5fd901dc20e29e88477167fe4fc299bf818fd0d9e1632d467b2a3d9503b1aaffffffff0280d7e636030000001976a914f34c3e10eb387efe872acb614c89e78bfca7815d88ac404b4c00000000001976a914a84e272933aaf87e1715d7786c51dfaeb5b65a6f88ac00000000010000000143ac81c8e6f6ef307dfe17f3d906d999e23e0189fda838c5510d850927e03ae7000000008c4930460221009c87c344760a64cb8ae6685a3eec2c1ac1bed5b88c87de51acd0e124f266c16602210082d07c037359c3a257b5c63ebd90f5a5edf97b2ac1c434b08ca998839f346dd40141040ba7e521fa7946d12edbb1d1e95a15c34bd4398195e86433c92b431cd315f455fe30032ede69cad9d1e1ed6c3c4ec0dbfced53438c625462afb792dcb098544bffffffff0240420f00000000001976a9144676d1b820d63ec272f1900d59d43bc6463d96f888ac40420f00000000001976a914648d04341d00d7968b3405c034adc38d4d8fb9bd88ac00000000010000000248cc917501ea5c55f4a8d2009c0567c40cfe037c2e71af017d0a452ff705e3f1000000008b483045022100bf5fdc86dc5f08a5d5c8e43a8c9d5b1ed8c65562e280007b52b133021acd9acc02205e325d613e555f772802bf413d36ba807892ed1a690a77811d3033b3de226e0a01410429fa713b124484cb2bd7b5557b2c0b9df7b2b1fee61825eadc5ae6c37a9920d38bfccdc7dc3cb0c47d7b173dbc9db8d37db0a33ae487982c59c6f8606e9d1791ffffffff41ed70551dd7e841883ab8f0b16bf04176b7d1480e4f0af9f3d4c3595768d068000000008b4830450221008513ad65187b903aed1102d1d0c47688127658c51106753fed0151ce9c16b80902201432b9ebcb87bd04ceb2de66035fbbaf4bf8b00d1cfe41f1a1f7338f9ad79d210141049d4cf80125bf50be1709f718c07ad15d0fc612b7da1f5570dddc35f2a352f0f27c978b06820edca9ef982c35fda2d255afba340068c5035552368bc7200c1488ffffffff0100093d00000000001976a9148edb68822f1ad580b043c7b3df2e400f8699eb4888ac00000000")' block.GetConsensusFactory()); " is 5151.
Long Statement,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_4_test_update_none,The length of the statement  "			filter.Insert(ParseHex("04eaafc2314def4ca98ac970241bcab022b9c1e1f4ea423a20f134c876f2c01ec0f0dd5b2e86e7168cefe0d81113c3807420ce13ad1357231a2252247d97a46a91")); " is 158.
Long Statement,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_4_test_update_none,The length of the statement  "			Assert.True(!filter.Contains(new OutPoint(uint256.Parse("0x147caa76786596590baa4e98f5d9f48b86c7765e489f7a6ff3360fe5c674360b")' 0))); " is 132.
Long Statement,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_4_test_update_none,The length of the statement  "			Assert.True(!filter.Contains((new OutPoint(uint256.Parse("0x02981fa052f0481dbc5868f4fc2166035a10f27a03cfd2de67326471df5bc041")' 0)))); " is 134.
Long Statement,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanCalculateDifficulty,The length of the statement  "			var histories = File.ReadAllText("data/targethistory.csv").Split(new string[] { "\r\n" }' StringSplitOptions.RemoveEmptyEntries); " is 129.
Long Statement,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,LoadMainChain,The length of the statement  "				var bytes = client.GetByteArrayAsync("https://aois.blob.core.windows.net/public/MainChain1.dat").GetAwaiter().GetResult(); " is 122.
Long Statement,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The length of the statement  "			//Finally' for each transfer output' if the asset units forming that output all have the same asset address' the output gets assigned that asset address. If any output contains units from more than one distinct asset address' the whole transaction is considered invalid' and all outputs are uncolored. " is 301.
Long Statement,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The length of the statement  "			//If there are more items in the  asset quantity list  than the number of colorable outputs' the transaction is deemed invalid' and all outputs are uncolored. " is 158.
Long Statement,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanParseAndSetUrlInAssetMetadata,The length of the statement  "			var tx = Transaction.Parse("0100000001ed6f645a2d0eccf693692bc6677cd3c5efaba021db1527c91b9b441fe16da2f7020000006c493046022100991a71c15ebbf77032fc65ccd16ed286435fcc5ba48435510f561079e46dbb2a022100f1e477385196f083a779fd3366e074d34db12754330f02693520951081d5ab19012103f82af267c2f60b7ce274e7e8bc065dad3c1b0ca7a694801c814f128e63242a12ffffffff0358020000000000001976a91477e3e6acdeca221685d0d23a12989b96335a463988ac0000000000000000276a254f4101000180ade2041b753d68747470733a2f2f6370722e736d2f3954627276364a435776e89c0c00000000001976a9142d14f700c8b0a9ff95cb6092faad0795bf790dc788ac00000000"' Network.Main); " is 595.
Long Statement,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeOutputs,The length of the statement  "			//If there are less items in the  asset quantity list  than the number of colorable outputs (all the outputs except the marker output)' the outputs in excess receive an asset quantity of zero. " is 192.
Long Statement,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeOutputs,The length of the statement  "			//If there are more items in the  asset quantity list  than the number of colorable outputs' the transaction is deemed invalid' and all outputs are uncolored. " is 158.
Long Statement,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeOutputs,The length of the statement  "			//If there are less asset units in the input sequence than in the output sequence' the transaction is considered invalid and all outputs are uncolored. " is 151.
Long Statement,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeOutputs,The length of the statement  "			var persistent = new NoSqlColoredTransactionRepository(tester.Repository.Transactions' new InMemoryNoSqlRepository(Network.Main.Consensus.ConsensusFactory)); " is 157.
Long Statement,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeOutputs,The length of the statement  "			Assert.Null(cached.Get(tester.TestedTxId)); //Should not have written in the cache (cache outdated' thinking it is still null) " is 126.
Long Statement,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeOutputs,The length of the statement  "			Assert.NotNull(cached.Get(tx.Inputs[0].PrevOut.Hash)); //However' the previous transaction should have been loaded by loadbulk via ReadThrough " is 142.
Long Statement,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanParseColorMarker2,The length of the statement  "			tx.Outputs.Add(new TxOut(Money.Zero' new Script(Encoders.Hex.DecodeData("6a114f41010003f00100e58e26041234567800104f41010003f00100e58e260412345678")))); " is 151.
Long Statement,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanCreateAssetAddress,The length of the statement  "			//Next' he builds the Pay-to-PubKey-Hash script associated to that address: OP_DUP OP_HASH160 010966776006953D5567439E5E39F86A0D273BEE OP_EQUALVERIFY OP_CHECKSIG " is 161.
Long Statement,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanCreateAssetAddress,The length of the statement  "			Assert.Equal("OP_DUP OP_HASH160 010966776006953D5567439E5E39F86A0D273BEE OP_EQUALVERIFY OP_CHECKSIG"' script.ToString().ToUpper()); " is 131.
Long Statement,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanCreateAssetAddress,The length of the statement  "			//Finally' the hash is converted to a base 58 string with checksum using version byte 23: ALn3aK1fSuG27N96UGYB1kUYUpGKRhBuBC.  " is 125.
Long Statement,NBitcoin.Tests,ConverterTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ConverterTests.cs,CanConvertText,The length of the statement  "					//Different from brainwallet' because brainwallet code convert the data to bitcoin address instead of directely formating in base58check (ie : the data followed be the 4 hash bytes) " is 181.
Long Statement,NBitcoin.Tests,ConverterTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ConverterTests.cs,CanConvertText,The length of the statement  "				//	Expected = "11000011 10101001 00100000 01011110 11000011 10100111 00100000 01101000 01100101 01101100 01101100 01101111 00100000 00100010 00110001 00110010 00110011 00110100 00110101 00100010 00100000 00100000 01110111 01101111 01101111 01101111 01110010 01101100 01100100" " is 276.
Long Statement,NBitcoin.Tests,ConverterTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ConverterTests.cs,CanConvertText,The length of the statement  "				//	Expected = "perfect perfect perfect soul stone royal fault companion sharp cross build leap possess possibly yet bone magic beam illuminate moonlight foul juice darkness universe" " is 182.
Long Statement,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CanReadProviderRegistrationTransaction,The length of the statement  "			var proRegTx = new Dash.ProviderRegistrationTransaction(Encoders.Hex.DecodeData("010000000000effd6116c0bbe178d2e224c0f7fed5313a0b46dd222d63c5196319e2110db1031000000000000000000000000000ffff12ca34aa88c79f25f019d640ab50b569121967fabf3a2c74539b15ddc5d0053e2f3a2e70dbb1808ec60844ac4c8ba5fac73c9b6abbab23ef09df0d2347f2a3182eabead0027a2137e59c9f25f019d640ab50b569121967fabf3a2c74539bc9001976a914de77802bd7fcd19277b5229ac44085e3b3a3687088ac991c137dc07e13f02e188b2f97725f0f4487a0cd502ac8eb3fbc88e3c2f0d4ca411fe30ecf9cc167ff85f7d73efe9506de44762447063a62fbe82f19af39d6a353734ad0cd835d6b38cbe5a965b27a2be353ebe4a6a08e50510027c484ba74c4734c"));" is 633.
Long Statement,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CanReadProviderRegistrationTransaction,The length of the statement  "			Assert.Equal("15ddc5d0053e2f3a2e70dbb1808ec60844ac4c8ba5fac73c9b6abbab23ef09df0d2347f2a3182eabead0027a2137e59c"' Encoders.Hex.EncodeData(proRegTx.KeyIdOperator));" is 162.
Long Statement,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CanReadProviderRegistrationTransaction,The length of the statement  "			Assert.Equal("76a914de77802bd7fcd19277b5229ac44085e3b3a3687088ac"' Encoders.Hex.EncodeData(proRegTx.ScriptPayout.ToBytes()));" is 125.
Long Statement,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CanReadProviderRegistrationTransaction,The length of the statement  "			Assert.Equal("1fe30ecf9cc167ff85f7d73efe9506de44762447063a62fbe82f19af39d6a353734ad0cd835d6b38cbe5a965b27a2be353ebe4a6a08e50510027c484ba74c4734c"' Encoders.Hex.EncodeData(proRegTx.PayloadSig));" is 193.
Long Statement,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CanReadExampleProviderRegistrationTransaction,The length of the statement  "			var proRegTx = new Dash.ProviderRegistrationTransaction(Encoders.Hex.DecodeData("01000000000026d3cb36b5360a23f5f4a2ea4c98d385c0c7a80788439f52a237717d799356a60100000000000000000000000000ffffc38d008f4e1f8a94fb062049b841f716dcded8257a3632fb053c8273ec203d1ea62cbdb54e10618329e4ed93e99bc9c5ab2f4cb0055ad281f9ad0808a1dda6aedf12c41c53142828879b8a94fb062049b841f716dcded8257a3632fb053c00001976a914e4876df5735eaa10a761dca8d62a7a275349022188acbc1055e0331ea0ea63caf80e0a7f417e50df6469a97db1f4f1d81990316a5e0b412045323bca7defef188065a6b30fb3057e4978b4f914e4e8cc0324098ae60ff825693095b927cd9707fe10edbf8ef901fcbc63eb9a0e7cd6fed39d50a8cde1cdb4"));" is 633.
Long Statement,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CanReadExampleProviderRegistrationTransaction,The length of the statement  "			Assert.Equal("8273ec203d1ea62cbdb54e10618329e4ed93e99bc9c5ab2f4cb0055ad281f9ad0808a1dda6aedf12c41c53142828879b"' Encoders.Hex.EncodeData(proRegTx.KeyIdOperator));" is 162.
Long Statement,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CanReadExampleProviderRegistrationTransaction,The length of the statement  "			Assert.Equal("yh9o9kPRK1s3YsuyCBe3DEjBit2RnzhgwH"' proRegTx.ScriptPayout.GetDestinationAddress(Dash.Instance.Testnet).ToString());" is 130.
Long Statement,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CanReadProviderUpdateServiceTransaction,The length of the statement  "				"01007b1100a3e33b86b1e9948a1091648b44ac2e819850e321bbbbd9a7825cf173c800000000000000000000ffffc38d8f314e1f1976a9143e1f214c329557ae3711cb173bcf04d00762f3ff88ac3f7685789f3e6480ba6ed402285da0ed9cd0558265603fa8bad0eec0572cf1eb1746f9c46d654879d9afd67a439d4bc2ef7c1b26de2e59897fa83242d9bd819ff46c71d9e3d7aa1772f4003349b777140bedebded0a42efd64baf34f59c4a79c128df711c10a45505a0c2a94a5908f1642cbb56730f16b2cc2419a45890fb8ff"));" is 417.
Long Statement,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CanReadProviderUpdateServiceTransaction,The length of the statement  "			Assert.Equal("76a9143e1f214c329557ae3711cb173bcf04d00762f3ff88ac"' Encoders.Hex.EncodeData(proUpServTx.ScriptOperatorPayout.ToBytes()));" is 136.
Long Statement,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CanReadProviderUpdateRegistrarTransaction,The length of the statement  "				"01004f0fd120ac35429cdc616e470c53a52e032bba22304f8d1c54cc0af2040c3362000018ece819b998a36a185e323a8749e55fd3dc2e259b741f8580fbd68cbd9f51d30f4d4da34fd5afc71859dca3cf10fbda8a94fb062049b841f716dcded8257a3632fb053c1976a914f25c59be48ee1c4fd3733ecf56f440659f1d6c5088acb309a51267451a7f52e79ef2391aa952e9a0284e8fd8db56cdcae3b49b7e6dab4120c838c08b9492c5039444cac11e466df3609c585010fab636de75c687bab9f6154d9a7c26d7b5384a147fc67ddb2e66e5f773af73dbf818109aec692ed364eafd"));" is 461.
Long Statement,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CanReadProviderUpdateRegistrarTransaction,The length of the statement  "			Assert.Equal("18ece819b998a36a185e323a8749e55fd3dc2e259b741f8580fbd68cbd9f51d30f4d4da34fd5afc71859dca3cf10fbda"' Encoders.Hex.EncodeData(proUpRegTx.PubKeyOperator));" is 165.
Long Statement,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CanReadProviderUpdateRegistrarTransaction,The length of the statement  "			Assert.Equal("76a914f25c59be48ee1c4fd3733ecf56f440659f1d6c5088ac"' Encoders.Hex.EncodeData(proUpRegTx.ScriptPayout.ToBytes()));" is 127.
Long Statement,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CanReadProviderUpdateRegistrarTransaction,The length of the statement  "			Assert.Equal("20c838c08b9492c5039444cac11e466df3609c585010fab636de75c687bab9f6154d9a7c26d7b5384a147fc67ddb2e66e5f773af73dbf818109aec692ed364eafd"' Encoders.Hex.EncodeData(proUpRegTx.PayloadSig));" is 195.
Long Statement,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CanReadProviderUpdateRevocationTransaction,The length of the statement  "				"01006f8a813df204873df003d6efc44e1906eaf6180a762513b1c91252826ce05916010082cf248cf6b8ac6a3cdc826edae582ead20421659ed891f9d4953a540616fb4f05279584b3339ed2ba95711ad28b18ee2878c4a904f76ea4d103e1d739f22ff7e3b9b3db7d0c4a7e120abb4952c3574a18de34fa29828f9fe3f52bd0b1fac17acd04f7751967d782045ab655053653438f1dd1e14ba6adeb8351b78c9eb59bf4"));" is 333.
Long Statement,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CanReadProviderUpdateRevocationTransaction,The length of the statement  "			Assert.Equal("05279584b3339ed2ba95711ad28b18ee2878c4a904f76ea4d103e1d739f22ff7e3b9b3db7d0c4a7e120abb4952c3574a18de34fa29828f9fe3f52bd0b1fac17acd04f7751967d782045ab655053653438f1dd1e14ba6adeb8351b78c9eb59bf4"' Encoders.Hex.EncodeData(proUpRevTx.PayloadSig));" is 257.
Long Statement,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CanReadCoinbaseSpecialTransaction,The length of the statement  "			var cbTx = new Dash.CoinbaseSpecialTransaction(Encoders.Hex.DecodeData("0a0014000000b90100b3ccd30f16aa6aadf553fba6be9320d0002ed01c2f54d4975706763ce8"));" is 152.
Long Statement,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CanReadQuorumCommitmentTransaction,The length of the statement  "				"01001e430400010001f2a1f356b9e086220d38754b1de1e4dcbd8b080c3fa0a62c2bdis 663.
Long Statement,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CanReadQuorumCommitmentTransaction,The length of the statement  "				"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"'" is 195.
Long Statement,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CanReadQuorumCommitmentTransaction,The length of the statement  "				"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"'" is 195.
Long Statement,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CheckDashBlock7000FirstTransaction,The length of the statement  "				"03000500010000000000000000000000000000000000000000000000000000000000000000ffffffff1202581b0e2f5032506f6f6c2d74444153482fffffffff044d125b96010000001976a9144f79c383bc5d3e9d4d81b98f87337cedfa78953688ac40c3609a010000001976a914bafef41416718b231d5ca0143dccbc360d06b77688acf3b00504000000001976a914badadfdebaa6d015a0299f23fbc1fcbdd72ba96f88ac00000000000000002a6a28421df280ea438199057112738c5149e4307689d1201c96a66fbe83f4aa0c4016000000000300000000000000260100581b00000000000000000000000000000000000000000000000000000000000000000000";" is 525.
Long Statement,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CheckDashBlock7000FirstTransaction,The length of the statement  "			Assert.Equal("0100581b00000000000000000000000000000000000000000000000000000000000000000000"' Encoders.Hex.EncodeData(tx.ExtraPayload));" is 135.
Long Statement,NBitcoin.Tests,DeterministicSignatureTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DeterministicSignatureTests.cs,BlindingSignature,The length of the statement  "			var message = new uint256(Encoders.Hex.DecodeData("243F6A8885A308D313198A2E03707344A4093822299F31D0082EFA98EC4E6C89")' false); " is 126.
Long Statement,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The length of the statement  "			Assert.Equal(0x7127512f72f27cceUL' Hashes.SipHash(0x0706050403020100UL' 0x0F0E0D0C0B0A0908UL' new uint256("1f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09080706050403020100"))); " is 176.
Long Statement,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,hash256,The length of the statement  "			Assert.Equal(uint256.Parse("000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f")' Network.Main.GetGenesis().GetHash()); " is 133.
Long Statement,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,quark,The length of the statement  "			var bytes = Encoders.Hex.DecodeData("01000000000000000000000000000000000000000000000000000000000000000000000027cc0d8f6a20e41f445b1045d1c73ba4b068ee60b5fd4aa34027cbbe5c2e161e1546db5af0ff0f1e18cb3f01"); " is 200.
Long Statement,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,x11,The length of the statement  "			var bytes = Encoders.Hex.DecodeData("010000000000000000000000000000000000000000000000000000000000000000000000c762a6567f3cc092f0684bb62b7e00a84890b990f07cc71a6bb58d64b98e02e0022ddb52f0ff0f1ec23fb901"); " is 200.
Long Statement,NBitcoin.Tests,JsonConverterTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\JsonConverterTests.cs,CanSerializeInJson,The length of the statement  "			var psbt = PSBT.Parse("70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f6187650000002202029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f473044022074018ad4180097b873323c0015720b3684cc8123891048e7dbcd9b55ad679c99022073d369b740e3eb53dcefa33823c8070514ca55a7dd9544f157c167913261118c01010304010000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae2206029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f10d90c6a4f000000800000008000000080220602dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d710d90c6a4f0000008000000080010000800001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e887220203089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc473044022062eb7a556107a7c73f45ac4ab5a1dddf6f7075fb1275969a7f383efff784bcb202200c05dbb7470dbf2f08557dd356c7325c1ed30913e996cd3840945db12228da5f010103040100000001042200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903010547522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae2206023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7310d90c6a4f000000800000008003000080220603089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc10d90c6a4f00000080000000800200008000220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000"' Network.Main);" is 2274.
Long Statement,NBitcoin.Tests,JsonConverterTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\JsonConverterTests.cs,CanSerializeInJson,The length of the statement  "			var actualOutpoint = Serializer.ToObject<OutPoint>("\"44f69ca74088d6d88e30156da85aae54543a87f67cdfdabbe9b53a92d6d7027c01000000\""' Network.Main);" is 145.
Long Statement,NBitcoin.Tests,JsonConverterTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\JsonConverterTests.cs,CanSerializeInJson,The length of the statement  "			actualOutpoint = Serializer.ToObject<OutPoint>("\"7c02d7d6923ab5e9bbdadf7cf6873a5454ae5aa86d15308ed8d68840a79cf644-1\""' Network.Main);" is 135.
Long Statement,NBitcoin.Tests,key_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\key_tests.cs,CanVerifySignature,The length of the statement  "					Message = "this is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long message"' " is 553.
Long Statement,NBitcoin.Tests,key_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\key_tests.cs,CanVerifySignature,The length of the statement  "					Message = "this is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long message"' " is 553.
Long Statement,NBitcoin.Tests,key_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\key_tests.cs,CanVerifySignature,The length of the statement  "					Message = "this is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long message"' " is 553.
Long Statement,NBitcoin.Tests,key_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\key_tests.cs,CanVerifySignature,The length of the statement  "					Message = "this is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long messagethis is a very long message"' " is 553.
Long Statement,NBitcoin.Tests,key_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\key_tests.cs,CanVerifyTrezorSignature,The length of the statement  "			byte[] signature = Encoders.Hex.DecodeData("20f2d1a42d08c3a362be49275c3ffeeaa415fc040971985548b9f910812237bb41770bf2c8d488428799fbb7e52c11f1a3404011375e4080e077e0e42ab7a5ba02"); " is 177.
Long Statement,NBitcoin.Tests,key_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\key_tests.cs,CanVerifyTrezorSignature,The length of the statement  "			bool verified = pubKey.VerifyMessage(hiddenChallenge_Sha.Concat(visualChallenge_Sha).ToArray()' Encoders.Base64.EncodeData(signature)); " is 135.
Long Statement,NBitcoin.Tests,key_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\key_tests.cs,CanGeneratePubKeysAndAddress,The length of the statement  "					PubKey = "04d0988bfa799f7d7ef9ab3de97ef481cd0f75d2367ad456607647edde665d6f6fbdd594388756a7beaf73b4822bc22d36e9bda7db82df2b8b623673eefc0b7495"' " is 142.
Long Statement,NBitcoin.Tests,key_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\key_tests.cs,CanGeneratePubKeysAndAddress,The length of the statement  "					PubKey = "0493e5d305cad2588d5fb254065fe48ce446028ba380e6ee663baea9cd105500897eb030c033cdab160f31c36df0ea38330fdd69677df49cd14826902022d17f3f"' " is 142.
Long Statement,NBitcoin.Tests,key_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\key_tests.cs,key_test_from_bytes,The length of the statement  "			Byte[] privateKey = new Byte[32] { 0xE9' 0x87' 0x3D' 0x79' 0xC6' 0xD8' 0x7D' 0xC0' 0xFB' 0x6A' 0x57' 0x78' 0x63' 0x33' 0x89' 0xF4' 0x45' 0x32' 0x13' 0x30' 0x3D' 0xA6' 0x1F' 0x20' 0xBD' 0x67' 0xFC' 0x23' 0x3A' 0xA3' 0x32' 0x62 }; " is 228.
Long Statement,NBitcoin.Tests,NodeBuilderEx,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\NodeBuilderEx.cs,Create,The length of the statement  "			//var builder = NodeBuilder.Create(NodeDownloadData.Feathercoin.v0_16_0' Altcoins.AltNetworkSets.Feathercoin.Regtest' caller);" is 126.
Long Statement,NBitcoin.Tests,NodeBuilderEx,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\NodeBuilderEx.cs,Create,The length of the statement  "			//var builder = NodeBuilder.Create(NodeDownloadData.Groestlcoin.v2_16_3' Altcoins.AltNetworkSets.Groestlcoin.Regtest' caller);" is 126.
Long Statement,NBitcoin.Tests,NodeBuilderEx,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\NodeBuilderEx.cs,Create,The length of the statement  "			//var builder = NodeBuilder.Create(NodeDownloadData.Bitcoinplus.v2_7_0' Altcoins.AltNetworkSets.Bitcoinplus.Regtest' caller);" is 125.
Long Statement,NBitcoin.Tests,NodeBuilderEx,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\NodeBuilderEx.cs,Create,The length of the statement  "			//var builder = NodeBuilder.Create(NodeDownloadData.Chaincoin.v0_16_4 ' Altcoins.AltNetworkSets.Chaincoin.Regtest' caller);" is 123.
Long Statement,NBitcoin.Tests,NodeBuilderEx,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\NodeBuilderEx.cs,Create,The length of the statement  "//			var builder = NodeBuilder.Create(NodeDownloadData.Elements.v0_18_1_1' Altcoins.AltNetworkSets.Liquid.Regtest' caller);" is 123.
Long Statement,NBitcoin.Tests,PaymentTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PaymentTests.cs,CanParsePaymentUrl,The length of the statement  "			url = new BitcoinUrlBuilder("bitcoin:129mVqKUmJ9uwPxKJBnNdABbuaaNfho4Ha?amount=0.06&label=Tom%20%26%20Jerry"' Network.Main); " is 124.
Long Statement,NBitcoin.Tests,PaymentTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PaymentTests.cs,CanParsePaymentUrl,The length of the statement  "			url = new BitcoinUrlBuilder("bitcoin:129mVqKUmJ9uwPxKJBnNdABbuaaNfho4Ha?amount=50&label=Luke-Jr&message=Donation%20for%20project%20xyz"' Network.Main); " is 151.
Long Statement,NBitcoin.Tests,PaymentTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PaymentTests.cs,CanParsePaymentUrl,The length of the statement  "			url = new BitcoinUrlBuilder("bitcoin:129mVqKUmJ9uwPxKJBnNdABbuaaNfho4Ha?amount=50&label=Luke-Jr&message=Donation%20for%20project%20xyz&unknownparam=lol"' Network.Main); " is 168.
Long Statement,NBitcoin.Tests,PaymentTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PaymentTests.cs,CanParsePaymentUrl,The length of the statement  "			Assert.Throws<FormatException>(() => new BitcoinUrlBuilder("bitcoin:129mVqKUmJ9uwPxKJBnNdABbuaaNfho4Ha?amount=50&label=Luke-Jr&message=Donation%20for%20project%20xyz&req-unknownparam=lol"' Network.Main)); " is 204.
Long Statement,NBitcoin.Tests,PaymentTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PaymentTests.cs,CanParsePaymentUrl,The length of the statement  "			Assert.Throws<FormatException>(() => new BitcoinUrlBuilder("bitcoin:129mVqKUmJ9uwPxKJBnNdABbuaaNfho4Ha?amount=50&amount=50"' Network.Main)); " is 140.
Long Statement,NBitcoin.Tests,PaymentTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PaymentTests.cs,CanParsePaymentUrl,The length of the statement  "			url = new BitcoinUrlBuilder("bitcoin:mq7se9wy2egettFxPbmn99cK8v5AFq55Lx?amount=0.11&r=https://merchant.com/pay.php?h%3D2a8628fc2fbe"' Network.TestNet); " is 151.
Long Statement,NBitcoin.Tests,PaymentTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PaymentTests.cs,CanParsePaymentUrl,The length of the statement  "			Assert.Equal("bitcoin:mq7se9wy2egettFxPbmn99cK8v5AFq55Lx?amount=0.11&r=https://merchant.com/pay.php?h%3d2a8628fc2fbe"' url.ToString()); " is 135.
Long Statement,NBitcoin.Tests,PaymentTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PaymentTests.cs,BitcoinUrlKeepUnknowParameter,The length of the statement  "			BitcoinUrlBuilder url = new BitcoinUrlBuilder("bitcoin:?r=https://merchant.com/pay.php?h%3D2a8628fc2fbe&idontknow=test"' Network.Main); " is 135.
Long Statement,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanParseMessages,The length of the statement  "						Message = "f9beb4d976657273696f6e0000000000550000009c7c00000100000000000000e615104d00000000010000000000000000000000000000000000ffff0a000001208d010000000000000000000000000000000000ffff0a000002208ddd9d202c3ab457130055810100"' " is 223.
Long Statement,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanParseMessages,The length of the statement  "						Message = "f9beb4d976657273696f6e000000000064000000358d493262ea0000010000000000000011b2d05000000000010000000000000000000000000000000000ffff000000000000000000000000000000000000000000000000ffff0000000000003b2eb35d8ce617650f2f5361746f7368693a302e372e322fc03e0300"' " is 261.
Long Statement,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanParseMessages,The length of the statement  "						Message = "f9beb4d96164647200000000000000001f000000ed52399b01e215104d010000000000000000000000000000000000ffff0a000001208d"' " is 123.
Long Statement,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanGetMerkleRoot,The length of the statement  "					nodeClient.SendMessageAsync(new GetDataPayload(new InventoryVector(InventoryType.MSG_FILTERED_BLOCK' block.GetHash()))); " is 120.
Long Statement,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanGetMerkleRoot,The length of the statement  "					nodeClient.SendMessageAsync(new GetDataPayload(new InventoryVector(InventoryType.MSG_FILTERED_BLOCK' Network.RegTest.GetGenesis().GetHash()))); " is 143.
Long Statement,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanGetMemPool,The length of the statement  "					node.CreateRPCClient().SendToAddress(new Key().PubKey.GetAddress(ScriptPubKeyType.Legacy' Network.RegTest)' Money.Coins(1.0m)); " is 127.
Long Statement,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,TestDifferentConnectionMethods,The length of the statement  "			foreach (var (onlyForOnionHosts' changeIpIdentities) in new[] { (true' true)' (true' false)' (false' true)' (false' false) }) " is 125.
Long Statement,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanParseReject,The length of the statement  "			var hex = "f9beb4d972656a6563740000000000003a000000db7f7e7802747812156261642d74786e732d696e707574732d7370656e74577a9694da4ff41ae999f6591cff3749ad6a7db19435f3d8af5fecbcff824196"; " is 177.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldCalculateBalanceOfHDKey,The length of the statement  "			expectedChange = bobCoin.Amount - (Money.Coins(0.25m) + Money.Coins(0.01m) + Money.Coins(0.001m)) + Money.Coins(0.123m);" is 120.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,AddingScriptCoinShouldResultMoreInfoThanAddingSeparatelyInCaseOfP2SH,The length of the statement  "				// Since there are no way psbt can know p2sh-p2wpkh is actually a witness input in case we add coins and scripts separately'" is 124.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanRebaseKeypathInPSBT,The length of the statement  "			var masterExtkey = new BitcoinExtKey("tprv8ZgxMBicQKsPd9TeAdPADNnSyH9SSUUbTVeFszDE23Ki6TBB5nCefAdHkK8Fm3qMQR6sHwA56zqRmKmxnHk37JkiFzvncDqoKmPWubu7hDF"' Network.TestNet);" is 169.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanRebaseKeypathInPSBT,The length of the statement  "			tx.Outputs.Add(Money.Coins(1.49990000m)' new Script(Encoders.Hex.DecodeData("0014d85c2b71d0060b09c9886aeb815e50991dda124d")));" is 126.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanRebaseKeypathInPSBT,The length of the statement  "			tx.Outputs.Add(Money.Coins(1.00000000m)' new Script(Encoders.Hex.DecodeData("001400aea9a2e5f0f876a588df5546e8742d1d87008f")));" is 126.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanRebaseKeypathInPSBT,The length of the statement  "			Assert.Equal(new KeyPath(0 | hardenedFlag)' psbt.Inputs[0].HDKeyPaths[accountExtKey.Derive(0 | hardenedFlag).GetPublicKey()].KeyPath);" is 134.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanRebaseKeypathInPSBT,The length of the statement  "			Assert.Equal(new KeyPath(1 | hardenedFlag)' psbt.Inputs[1].HDKeyPaths[accountExtKey.Derive(1 | hardenedFlag).GetPublicKey()].KeyPath);" is 134.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanRebaseKeypathInPSBT,The length of the statement  "			Assert.Equal(accountExtKey.GetPublicKey().GetHDFingerPrint()' psbt.Inputs[0].HDKeyPaths[accountExtKey.Derive(0 | hardenedFlag).GetPublicKey()].MasterFingerprint);" is 162.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanRebaseKeypathInPSBT,The length of the statement  "			Assert.Equal(accountExtKey.GetPublicKey().GetHDFingerPrint()' psbt.Inputs[1].HDKeyPaths[accountExtKey.Derive(1 | hardenedFlag).GetPublicKey()].MasterFingerprint);" is 162.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanRebaseKeypathInPSBT,The length of the statement  "			Assert.Equal(new KeyPath("0'/0'/0'").Derive(0 | hardenedFlag)' psbt.Inputs[0].HDKeyPaths[accountExtKey.Derive(0 | hardenedFlag).GetPublicKey()].KeyPath);" is 153.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanRebaseKeypathInPSBT,The length of the statement  "			Assert.Equal(new KeyPath("0'/0'/0'").Derive(1 | hardenedFlag)' psbt.Inputs[1].HDKeyPaths[accountExtKey.Derive(1 | hardenedFlag).GetPublicKey()].KeyPath);" is 153.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanRebaseKeypathInPSBT,The length of the statement  "			Assert.Equal(masterExtkey.GetPublicKey().GetHDFingerPrint()' psbt.Inputs[0].HDKeyPaths[accountExtKey.Derive(0 | hardenedFlag).GetPublicKey()].MasterFingerprint);" is 161.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanRebaseKeypathInPSBT,The length of the statement  "			Assert.Equal(masterExtkey.GetPublicKey().GetHDFingerPrint()' psbt.Inputs[1].HDKeyPaths[accountExtKey.Derive(1 | hardenedFlag).GetPublicKey()].MasterFingerprint);" is 161.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanRebaseKeypathInPSBT,The length of the statement  "			Assert.Equal(psbt.GetBalance(ScriptPubKeyType.Legacy' masterExtkey)' psbt.GetBalance(ScriptPubKeyType.Legacy' accountExtKey' accountRootedKeyPath));" is 148.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanRebaseKeypathInPSBT,The length of the statement  "				Assert.Equal(psbt.GetBalance(ScriptPubKeyType.Legacy' masterExtkey)' psbt.GetBalance(ScriptPubKeyType.Legacy' accountExtKey.Neuter()' accountRootedKeyPath));" is 157.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanRebaseKeypathInPSBT,The length of the statement  "			Assert.Equal(Money.Zero' psbt.GetBalance(ScriptPubKeyType.Legacy' masterExtkey.Derive(new KeyPath("0'/0'/1'"))' new KeyPath("0'/0'/1'").ToRootedKeyPath(masterFP)));" is 164.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanFollowBIPExample,The length of the statement  "			var extkey = new BitcoinExtKey("tprv8ZgxMBicQKsPd9TeAdPADNnSyH9SSUUbTVeFszDE23Ki6TBB5nCefAdHkK8Fm3qMQR6sHwA56zqRmKmxnHk37JkiFzvncDqoKmPWubu7hDF"' Network.TestNet);" is 163.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanFollowBIPExample,The length of the statement  "			tx.Outputs.Add(Money.Coins(1.49990000m)' new Script(Encoders.Hex.DecodeData("0014d85c2b71d0060b09c9886aeb815e50991dda124d")));" is 126.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanFollowBIPExample,The length of the statement  "			tx.Outputs.Add(Money.Coins(1.00000000m)' new Script(Encoders.Hex.DecodeData("001400aea9a2e5f0f876a588df5546e8742d1d87008f")));" is 126.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanFollowBIPExample,The length of the statement  "			var expectedPsbt = PSBT.Parse("70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f000000000000000000"' extkey.Network);" is 384.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanFollowBIPExample,The length of the statement  "				Transaction.Parse("0200000000010158e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd7501000000171600145f275f436b09a8cc9a2eb2a2f528485c68a56323feffffff02d8231f1b0100000017a914aed962d6654f9a2b36608eb9d64d2b260db4f1118700c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e88702483045022100a22edcc6e5bc511af4cc4ae0de0fcd75c7e04d8c1c3a8aa9d820ed4b967384ec02200642963597b9b1bc22c75e9f3e117284a962188bf5e8a74c895089046a20ad770121035509a48eb623e10aace8bfd0212fdb8a8e5af3c94b0b133b95e114cab89e4f7965000000"' Network.Main)'" is 532.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanFollowBIPExample,The length of the statement  "				Transaction.Parse("0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f618765000000"' Network.Main)" is 409.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanFollowBIPExample,The length of the statement  "				new Script(Encoders.Hex.DecodeData("5221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae"))'" is 182.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanFollowBIPExample,The length of the statement  "				new Script(Encoders.Hex.DecodeData("522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae")));" is 183.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanFollowBIPExample,The length of the statement  "			expectedPsbt = PSBT.Parse("70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f6187650000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae2206029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f10d90c6a4f000000800000008000000080220602dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d710d90c6a4f0000008000000080010000800001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e88701042200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903010547522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae2206023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7310d90c6a4f000000800000008003000080220603089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc10d90c6a4f00000080000000800200008000220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000"' extkey.Network);" is 1824.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanFollowBIPExample,The length of the statement  "			expectedPsbt = PSBT.Parse("70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f618765000000010304010000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae2206029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f10d90c6a4f000000800000008000000080220602dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d710d90c6a4f0000008000000080010000800001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e8870103040100000001042200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903010547522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae2206023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7310d90c6a4f000000800000008003000080220603089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc10d90c6a4f00000080000000800200008000220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000"' extkey.Network);" is 1852.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanFollowBIPExample,The length of the statement  "			expectedPsbt = PSBT.Parse("70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f6187650000002202029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f473044022074018ad4180097b873323c0015720b3684cc8123891048e7dbcd9b55ad679c99022073d369b740e3eb53dcefa33823c8070514ca55a7dd9544f157c167913261118c01010304010000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae2206029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f10d90c6a4f000000800000008000000080220602dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d710d90c6a4f0000008000000080010000800001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e887220203089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc473044022062eb7a556107a7c73f45ac4ab5a1dddf6f7075fb1275969a7f383efff784bcb202200c05dbb7470dbf2f08557dd356c7325c1ed30913e996cd3840945db12228da5f010103040100000001042200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903010547522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae2206023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7310d90c6a4f000000800000008003000080220603089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc10d90c6a4f00000080000000800200008000220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000"' extkey.Network);" is 2280.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanFollowBIPExample,The length of the statement  "			// Given the above updated PSBT' a signer that supports SIGHASH_ALL for P2PKH and P2WPKH spends and uses RFC6979 for nonce generation and has the following keys:" is 161.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanFollowBIPExample,The length of the statement  "			expectedPsbt = PSBT.Parse("70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f618765000000220202dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d7483045022100f61038b308dc1da865a34852746f015772934208c6d24454393cd99bdf2217770220056e675a675a6d0a02b85b14e5e29074d8a25a9b5760bea2816f661910a006ea01010304010000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae2206029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f10d90c6a4f000000800000008000000080220602dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d710d90c6a4f0000008000000080010000800001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e8872202023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e73473044022065f45ba5998b59a27ffe1a7bed016af1f1f90d54b3aa8f7450aa5f56a25103bd02207f724703ad1edb96680b284b56d4ffcb88f7fb759eabbe08aa30f29b851383d2010103040100000001042200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903010547522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae2206023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7310d90c6a4f000000800000008003000080220603089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc10d90c6a4f00000080000000800200008000220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000"' extkey.Network);" is 2282.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanFollowBIPExample,The length of the statement  "			expectedPsbt = PSBT.Parse("70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f6187650000002202029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f473044022074018ad4180097b873323c0015720b3684cc8123891048e7dbcd9b55ad679c99022073d369b740e3eb53dcefa33823c8070514ca55a7dd9544f157c167913261118c01220202dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d7483045022100f61038b308dc1da865a34852746f015772934208c6d24454393cd99bdf2217770220056e675a675a6d0a02b85b14e5e29074d8a25a9b5760bea2816f661910a006ea01010304010000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae2206029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f10d90c6a4f000000800000008000000080220602dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d710d90c6a4f0000008000000080010000800001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e887220203089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc473044022062eb7a556107a7c73f45ac4ab5a1dddf6f7075fb1275969a7f383efff784bcb202200c05dbb7470dbf2f08557dd356c7325c1ed30913e996cd3840945db12228da5f012202023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e73473044022065f45ba5998b59a27ffe1a7bed016af1f1f90d54b3aa8f7450aa5f56a25103bd02207f724703ad1edb96680b284b56d4ffcb88f7fb759eabbe08aa30f29b851383d2010103040100000001042200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903010547522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae2206023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7310d90c6a4f000000800000008003000080220603089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc10d90c6a4f00000080000000800200008000220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000"' extkey.Network);" is 2710.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanFollowBIPExample,The length of the statement  "			expectedPsbt = PSBT.Parse("70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f6187650000000107da00473044022074018ad4180097b873323c0015720b3684cc8123891048e7dbcd9b55ad679c99022073d369b740e3eb53dcefa33823c8070514ca55a7dd9544f157c167913261118c01483045022100f61038b308dc1da865a34852746f015772934208c6d24454393cd99bdf2217770220056e675a675a6d0a02b85b14e5e29074d8a25a9b5760bea2816f661910a006ea01475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae0001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e8870107232200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b20289030108da0400473044022062eb7a556107a7c73f45ac4ab5a1dddf6f7075fb1275969a7f383efff784bcb202200c05dbb7470dbf2f08557dd356c7325c1ed30913e996cd3840945db12228da5f01473044022065f45ba5998b59a27ffe1a7bed016af1f1f90d54b3aa8f7450aa5f56a25103bd02207f724703ad1edb96680b284b56d4ffcb88f7fb759eabbe08aa30f29b851383d20147522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae00220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000"' extkey.Network);" is 1998.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanFollowBIPExample,The length of the statement  "			var expectedTx = Transaction.Parse("0200000000010258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd7500000000da00473044022074018ad4180097b873323c0015720b3684cc8123891048e7dbcd9b55ad679c99022073d369b740e3eb53dcefa33823c8070514ca55a7dd9544f157c167913261118c01483045022100f61038b308dc1da865a34852746f015772934208c6d24454393cd99bdf2217770220056e675a675a6d0a02b85b14e5e29074d8a25a9b5760bea2816f661910a006ea01475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752aeffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d01000000232200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f000400473044022062eb7a556107a7c73f45ac4ab5a1dddf6f7075fb1275969a7f383efff784bcb202200c05dbb7470dbf2f08557dd356c7325c1ed30913e996cd3840945db12228da5f01473044022065f45ba5998b59a27ffe1a7bed016af1f1f90d54b3aa8f7450aa5f56a25103bd02207f724703ad1edb96680b284b56d4ffcb88f7fb759eabbe08aa30f29b851383d20147522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae00000000"' extkey.Network);" is 1311.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanFollowBIPExample,The length of the statement  "			var psbt1 = PSBT.Parse("70736274ff01003f0200000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000ffffffff010000000000000000036a0100000000000a0f0102030405060708090f0102030405060708090a0b0c0d0e0f000a0f0102030405060708090f0102030405060708090a0b0c0d0e0f000a0f0102030405060708090f0102030405060708090a0b0c0d0e0f00"' extkey.Network);" is 353.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanFollowBIPExample,The length of the statement  "			var psbt2 = PSBT.Parse("70736274ff01003f0200000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000ffffffff010000000000000000036a0100000000000a0f0102030405060708100f0102030405060708090a0b0c0d0e0f000a0f0102030405060708100f0102030405060708090a0b0c0d0e0f000a0f0102030405060708100f0102030405060708090a0b0c0d0e0f00"' extkey.Network);" is 353.
Long Statement,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanFollowBIPExample,The length of the statement  "			expectedPsbt = PSBT.Parse("70736274ff01003f0200000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000ffffffff010000000000000000036a0100000000000a0f0102030405060708090f0102030405060708090a0b0c0d0e0f0a0f0102030405060708100f0102030405060708090a0b0c0d0e0f000a0f0102030405060708090f0102030405060708090a0b0c0d0e0f0a0f0102030405060708100f0102030405060708090a0b0c0d0e0f000a0f0102030405060708090f0102030405060708090a0b0c0d0e0f0a0f0102030405060708100f0102030405060708090a0b0c0d0e0f00"' extkey.Network);" is 518.
Long Statement,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,RandomCoin,The length of the statement  "					return new Coin(new uint256(RandomUtils.GetBytes(32))' 0' amount' bob.PubKey.ScriptPubKey.Hash.ScriptPubKey).ToScriptCoin(bob.PubKey.ScriptPubKey); " is 147.
Long Statement,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,RandomCoin,The length of the statement  "					return new Coin(new uint256(RandomUtils.GetBytes(32))' 0' amount' bob.PubKey.ScriptPubKey.WitHash.ScriptPubKey.Hash.ScriptPubKey).ToScriptCoin(bob.PubKey.ScriptPubKey); " is 168.
Long Statement,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,RandomCoin,The length of the statement  "					return new Coin(new uint256(RandomUtils.GetBytes(32))' 0' amount' bob.PubKey.ScriptPubKey.WitHash.ScriptPubKey).ToScriptCoin(bob.PubKey.ScriptPubKey); " is 150.
Long Statement,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,RandomCoin,The length of the statement  "				var script = PayToMultiSigTemplate.Instance.GenerateScriptPubKey((int)(1 + (RandomUtils.GetUInt32() % bobs.Length))' bobs.Select(b => b.PubKey).ToArray()); " is 155.
Long Statement,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,RandomCoin,The length of the statement  "					return new Coin(new uint256(RandomUtils.GetBytes(32))' 0' amount' script.WitHash.ScriptPubKey.Hash.ScriptPubKey).ToScriptCoin(script); " is 134.
Long Statement,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,RandomCoin,The length of the statement  "			return new Coin(new uint256(RandomUtils.GetBytes(32))' 0' amount' p2pkh ? bob.PubKey.Hash.ScriptPubKey : bob.PubKey.WitHash.ScriptPubKey); " is 138.
Long Statement,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,RandomCoin2,The length of the statement  "			return new Coin(new uint256(RandomUtils.GetBytes(32))' 0' amount' p2pkh ? bob.PubKey.Hash.ScriptPubKey : bob.PubKey.WitHash.ScriptPubKey); " is 138.
Long Statement,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanGetRawMemPool,The length of the statement  "				var txid = rpc.SendToAddress(new Key().PubKey.GetAddress(ScriptPubKeyType.Legacy' rpc.Network)' Money.Coins(1.0m)' "hello"' "world"); " is 133.
Long Statement,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanGetMemPool,The length of the statement  "				var txid = rpc.SendToAddress(new Key().PubKey.GetAddress(ScriptPubKeyType.Legacy' rpc.Network)' Money.Coins(1.0m)' "hello"' "world"); " is 133.
Long Statement,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanGetTransactionInfo,The length of the statement  "				var mempoolTxId = rpc.SendToAddress(new Key().PubKey.GetAddress(ScriptPubKeyType.Legacy' builder.Network)' Money.Coins(1)); " is 123.
Long Statement,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanImportMultiAddresses,The length of the statement  "						ScriptPubKey = new ImportMultiAddress.ScriptPubKeyObject { Address = key.PubKey.GetAddress(ScriptPubKeyType.Legacy' network) }' " is 127.
Long Statement,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanImportMultiAddresses,The length of the statement  "						ScriptPubKey = new ImportMultiAddress.ScriptPubKeyObject { Address = key.PubKey.GetAddress(ScriptPubKeyType.Legacy' network) }' " is 127.
Long Statement,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanImportMultiAddresses,The length of the statement  "						ScriptPubKey = new ImportMultiAddress.ScriptPubKeyObject { Address = key.PubKey.GetAddress(ScriptPubKeyType.Legacy' network) }' " is 127.
Long Statement,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanImportMultiAddresses,The length of the statement  "						ScriptPubKey = new ImportMultiAddress.ScriptPubKeyObject { Address = key.PubKey.GetAddress(ScriptPubKeyType.Legacy' network) }' " is 127.
Long Statement,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanImportMultiAddresses,The length of the statement  "						ScriptPubKey = new ImportMultiAddress.ScriptPubKeyObject { Address = key.PubKey.GetAddress(ScriptPubKeyType.Legacy' network) }' " is 127.
Long Statement,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanImportMultiAddresses,The length of the statement  "						ScriptPubKey = new ImportMultiAddress.ScriptPubKeyObject { Address = key.PubKey.GetAddress(ScriptPubKeyType.Legacy' network) }' " is 127.
Long Statement,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanDecodeUnspentCoinWithRedeemScript,The length of the statement  "	""redeemScript"" : ""522103310188e911026cf18c3ce274e0ebb5f95b007f230d8cb7d09879d96dbeab1aff210243930746e6ed6552e03359db521b088134652905bd2d1541fa9124303a41e95621029e03a901b85534ff1e92c43c74431f7ce72046060fcf7a95c37e148f78c7725553ae""' " is 234.
Long Statement,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,ShouldCreatePSBTAcceptableByRPCAsExpected,The length of the statement  "				var dummyScript = new Script("OP_DUP " + "OP_HASH160 " + Op.GetPushOp(dummyKey.PubKey.Hash.ToBytes()) + " OP_EQUALVERIFY"); " is 123.
Long Statement,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,ShouldWalletProcessPSBTAndExtractMempoolAcceptableTX,The length of the statement  "				tx.Outputs.Add(new TxOut(Money.Coins(45)' kOut)); // This has to be big enough since the wallet must use whole kinds of address. " is 128.
Long Statement,NBitcoin.Tests,sample_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\sample_tests.cs,CanBuildSegwitP2SHMultisigTransactions,The length of the statement  "										Redeem: PayToMultiSigTemplate.Instance.GenerateScriptPubKey(keys.Length' keys.Select(k => k.PrivateKey.PubKey).ToArray()))" is 122.
Long Statement,NBitcoin.Tests,sample_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\sample_tests.cs,CanSignPSBTWithRootAndAccountKey,The length of the statement  "				partiallySignedTx.AddKeyPath(masterKey' addresses.Concat(new[] { changeAddress }).Select(a => a.FullAddressPath.KeyPath).ToArray());" is 132.
Long Statement,NBitcoin.Tests,SchnorrSignerTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\SchnorrSignerTests.cs,SingningTest,The length of the statement  "					"787A848E71043D280C50470E8E1532B2DD5D20EE912A45DBDD2BD1DFBF187EF67031A98831859DC34DFFEEDDA86831842CCD0079E1F92AF177F7F22CC1DCED05"}'" is 132.
Long Statement,NBitcoin.Tests,SchnorrSignerTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\SchnorrSignerTests.cs,SingningTest,The length of the statement  "					"2A298DACAE57395A15D0795DDBFD1DCB564DA82B0F269BC70A74F8220429BA1D1E51A22CCEC35599B8F266912281F8365FFC2D035A230434A1A64DC59F7013FD"}'" is 132.
Long Statement,NBitcoin.Tests,SchnorrSignerTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\SchnorrSignerTests.cs,SingningTest,The length of the statement  "					"00DA9B08172A9B6F0466A2DEFD817F2D7AB437E0D253CB5395A963866B3574BE00880371D01766935B92D2AB4CD5C8A2A5837EC57FED7660773A05F0DE142380"}" is 131.
Long Statement,NBitcoin.Tests,SchnorrSignerTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\SchnorrSignerTests.cs,ShouldPassVerifycation,The length of the statement  "			var publicKey = new PubKey(Encoders.Hex.DecodeData("03DEFDEA4CDB677750A420FEE807EACF21EB9898AE79B9768766E4FAA04A2D4A34"));" is 122.
Long Statement,NBitcoin.Tests,SchnorrSignerTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\SchnorrSignerTests.cs,ShouldPassVerifycation,The length of the statement  "			var signature = SchnorrSignature.Parse("00000000000000000000003B78CE563F89A0ED9414F5AA28AD0D96D6795F9C6302A8DC32E64E86A333F20EF56EAC9BA30B7246D6D25E22ADB8C6BE1AEB08D49D");" is 171.
Long Statement,NBitcoin.Tests,SchnorrSignerTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\SchnorrSignerTests.cs,ShouldFailVerifycation,The length of the statement  "					"2A298DACAE57395A15D0795DDBFD1DCB564DA82B0F269BC70A74F8220429BA1DFA16AEE06609280A19B67A24E1977E4697712B5FD2943914ECD5F730901B4AB7"'" is 131.
Long Statement,NBitcoin.Tests,SchnorrSignerTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\SchnorrSignerTests.cs,ShouldFailVerifycation,The length of the statement  "					"00DA9B08172A9B6F0466A2DEFD817F2D7AB437E0D253CB5395A963866B3574BED092F9D860F1776A1F7412AD8A1EB50DACCC222BC8C0E26B2056DF2F273EFDEC"'" is 131.
Long Statement,NBitcoin.Tests,SchnorrSignerTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\SchnorrSignerTests.cs,ShouldFailVerifycation,The length of the statement  "					"787A848E71043D280C50470E8E1532B2DD5D20EE912A45DBDD2BD1DFBF187EF68FCE5677CE7A623CB20011225797CE7A8DE1DC6CCD4F754A47DA6C600E59543C"'" is 131.
Long Statement,NBitcoin.Tests,SchnorrSignerTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\SchnorrSignerTests.cs,ShouldFailVerifycation,The length of the statement  "					"2A298DACAE57395A15D0795DDBFD1DCB564DA82B0F269BC70A74F8220429BA1D1E51A22CCEC35599B8F266912281F8365FFC2D035A230434A1A64DC59F7013FD"'" is 131.
Long Statement,NBitcoin.Tests,SchnorrSignerTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\SchnorrSignerTests.cs,ShouldPassBatchVerifycation,The length of the statement  "					"787A848E71043D280C50470E8E1532B2DD5D20EE912A45DBDD2BD1DFBF187EF67031A98831859DC34DFFEEDDA86831842CCD0079E1F92AF177F7F22CC1DCED05"}'" is 132.
Long Statement,NBitcoin.Tests,SchnorrSignerTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\SchnorrSignerTests.cs,ShouldPassBatchVerifycation,The length of the statement  "					"2A298DACAE57395A15D0795DDBFD1DCB564DA82B0F269BC70A74F8220429BA1D1E51A22CCEC35599B8F266912281F8365FFC2D035A230434A1A64DC59F7013FD"}'" is 132.
Long Statement,NBitcoin.Tests,SchnorrSignerTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\SchnorrSignerTests.cs,ShouldPassBatchVerifycation,The length of the statement  "					"00DA9B08172A9B6F0466A2DEFD817F2D7AB437E0D253CB5395A963866B3574BE00880371D01766935B92D2AB4CD5C8A2A5837EC57FED7660773A05F0DE142380"}" is 131.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanExtractScriptCode,The length of the statement  "			var script = new Script("022b1300040df7414c0251433b7a2516e81689b02e33299c87ae870b5c9407b761 OP_DEPTH 3 OP_EQUAL OP_IF OP_SWAP 020524b8de0a1b57478f2d0e07aa9ea375b736f072281b3749fea044392bccfc52 OP_CHECKSIGVERIFY OP_CODESEPARATOR OP_CHECKSIG OP_ELSE 0 OP_CLTV OP_DROP OP_CHECKSIG OP_ENDIF"); " is 289.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,PayToMultiSigTemplateShouldAcceptNonKeyParameters,The length of the statement  "			var tx = Transaction.Parse("0100000002f9cbafc519425637ba4227f8d0a0b7160b4e65168193d5af39747891de98b5b5000000006b4830450221008dd619c563e527c47d9bd53534a770b102e40faa87f61433580e04e271ef2f960220029886434e18122b53d5decd25f1f4acb2480659fea20aabd856987ba3c3907e0121022b78b756e2258af13779c1a1f37ea6800259716ca4b7f0b87610e0bf3ab52a01ffffffff42e7988254800876b69f24676b3e0205b77be476512ca4d970707dd5c60598ab00000000fd260100483045022015bd0139bcccf990a6af6ec5c1c52ed8222e03a0d51c334df139968525d2fcd20221009f9efe325476eb64c3958e4713e9eefe49bf1d820ed58d2112721b134e2a1a53034930460221008431bdfa72bc67f9d41fe72e94c88fb8f359ffa30b33c72c121c5a877d922e1002210089ef5fc22dd8bfc6bf9ffdb01a9862d27687d424d1fefbab9e9c7176844a187a014c9052483045022015bd0139bcccf990a6af6ec5c1c52ed8222e03a0d51c334df139968525d2fcd20221009f9efe325476eb64c3958e4713e9eefe49bf1d820ed58d2112721b134e2a1a5303210378d430274f8c5ec1321338151e9f27f4c676a008bdf8638d07c0b6be9ab35c71210378d430274f8c5ec1321338151e9f27f4c676a008bdf8638d07c0b6be9ab35c7153aeffffffff01a08601000000000017a914d8dacdadb7462ae15cd906f1878706d0da8660e68700000000"' Network.Main); " is 1099.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,PayToPubkeyHashTemplateDoNotCrashOnInvalidSig,The length of the statement  "			var data = Encoders.Hex.DecodeData("035c030441ef8fa580553f149a5422ba4b0038d160b07a28e6fe2e1041b940fe95b1553c040000000000000050db680300000000000002b0466f722050696572636520616e64205061756c"); " is 189.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,AssertVerifyScript,The length of the statement  "			Script.VerifyScript(scriptSig' spendingTransaction' 0' new TxOut(amount' scriptPubKey)' flags' SigHash.Undefined' out actual); " is 126.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,script_single_hashtype,The length of the statement  "			var tx = Transaction.Parse("010000000390d31c6107013d754529d8818eff285fe40a3e7635f6930fec5d12eb02107a43010000006b483045022100f40815ae3c81a0dd851cc8d376d6fd226c88416671346a9033468cca2cdcc6c202204f764623903e6c4bed1b734b75d82c40f1725e4471a55ad4f51218f86130ac038321033d710ab45bb54ac99618ad23b3c1da661631aa25f23bfe9d22b41876f1d46e4effffffff3ff04a68e22bdd52e7c8cb848156d2d158bd5515b3c50adabc87d0ca2cd3482d010000006a4730440220598d263c107004008e9e26baa1e770be30fd31ee55ded1898f7c00da05a75977022045536bead322ca246779698b9c3df3003377090f41afeca7fb2ce9e328ec4af2832102b738b531def73020bd637f32935924cc88549c8206976226d968edd3a42fc2d7ffffffff46a8dc8970eb96622f27a516adcf40e0fcec5731e7556e174f2a271aef6861c7010000006b483045022100c5b90a777a9fdc90c208dbef7290d1fc1be651f47151ee4ccff646872a454cf90220640cfbc4550446968fbbe9d12528f3adf7d87b31541569c59e790db8a220482583210391332546e22bbe8fe3af54addfad6f8b83d05fa4f5e047593d4c07ae938795beffffffff028036be26000000001976a914ddfb29efad43a667465ac59ff14dc6442a1adfca88ac3d5cba01000000001976a914b64dde7a505a13ca986c40e86e984a8dc81368b688ac00000000"' Network.Main); " is 1087.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanParseAndGeneratePayToPubKeyScript,The length of the statement  "			var scriptSig = new Script("3044022064f45a382a15d3eb5e7fe72076eec4ef0f56fde1adfd710866e729b9e5f3383d02202720a895914c69ab49359087364f06d337a2138305fbc19e20d18da78415ea9301 0364bd4b02a752798342ed91c681a48793bb1c0853cbcd0b978c55e53485b8e27c"); " is 240.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanParseAndGeneratePayToPubKeyScript,The length of the statement  "			Assert.Equal("3044022064f45a382a15d3eb5e7fe72076eec4ef0f56fde1adfd710866e729b9e5f3383d02202720a895914c69ab49359087364f06d337a2138305fbc19e20d18da78415ea9301"' Encoders.Hex.EncodeData(sigResult.TransactionSignature.ToBytes())); " is 226.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanParseAndGeneratePayToPubKeyScript,The length of the statement  "			Assert.Equal(PayToPubkeyHashTemplate.Instance.GenerateScriptSig(sigResult.TransactionSignature' sigResult.PublicKey).ToString()' scriptSig.ToString()); " is 151.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanParseAndGeneratePayToPubkey,The length of the statement  "			scriptPubKey = "0464bd4b02a752798342ed91c681a48793bb1c0853cbcd0b978c55e53485b8e27cff45c67d5f7be479215e9a27cea37afe1a00fa968ae3cbad128c9cee403844b7 OP_CHECKSIG"; " is 160.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanParseAndGeneratePayToPubkey,The length of the statement  "			Assert.Equal("0464bd4b02a752798342ed91c681a48793bb1c0853cbcd0b978c55e53485b8e27cff45c67d5f7be479215e9a27cea37afe1a00fa968ae3cbad128c9cee403844b7"' pub.ToHex()); " is 160.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanParseAndGeneratePayToPubkey,The length of the statement  "			string scriptSig = "3044022064f45a382a15d3eb5e7fe72076eec4ef0f56fde1adfd710866e729b9e5f3383d02202720a895914c69ab49359087364f06d337a2138305fbc19e20d18da78415ea9301"; " is 164.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanParseAndGeneratePayToPubkey,The length of the statement  "			scriptSig = "0044022064f45a382a15d3eb5e7fe72076eec4ef0f56fde1adfd710866e729b9e5f3383d02202720a895914c69ab49359087364f06d337a2138305fbc19e20d18da78415ea9301"; " is 157.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanParseAndGenerateSegwitScripts,The length of the statement  "			Assert.Equal(scriptPubKey' PayToWitPubKeyHashTemplate.Instance.GenerateScriptPubKey((BitcoinWitPubKeyAddress)pubkey.WitHash.GetAddress(Network.Main))); " is 151.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanParseAndGenerateSegwitScripts,The length of the statement  "			var expected = new WitScript("304402206104c335e4adbb920184957f9f710b09de17d015329fde6807b9d321fd2142db02200b24ad996b4aa4ff103000348b5ad690abfd9fddae546af9e568394ed4a8311301 03a65786c1a48d4167aca08cf6eb8eed081e13f45c02dc6000fd8f3bb16242579a"); " is 242.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanParseAndGenerateSegwitScripts,The length of the statement  "				TransactionSignature = new TransactionSignature(Encoders.Hex.DecodeData("304402206104c335e4adbb920184957f9f710b09de17d015329fde6807b9d321fd2142db02200b24ad996b4aa4ff103000348b5ad690abfd9fddae546af9e568394ed4a8311301")) " is 218.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanParseAndGenerateSegwitScripts,The length of the statement  "			var scriptSig = new Script("304402206b782f095f52f12133a96c078b558458b84c925afdb620d96c5f5bbf483e28d502206206796ff45d80216b83c77bafc4e7951fdb10a5bf3e4041c0e6c0938079b22b01 2103"); " is 178.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanParseAndGenerateSegwitScripts,The length of the statement  "			var redeem = new Script(Encoders.Hex.DecodeData("2103a65786c1a48d4167aca08cf6eb8eed081e13f45c02dc6000fd8f3bb16242579aac")); " is 123.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanParseAndGenerateSegwitScripts,The length of the statement  "			expected = new WitScript(new Script("304402206b782f095f52f12133a96c078b558458b84c925afdb620d96c5f5bbf483e28d502206206796ff45d80216b83c77bafc4e7951fdb10a5bf3e4041c0e6c0938079b22b01 2103 2103a65786c1a48d4167aca08cf6eb8eed081e13f45c02dc6000fd8f3bb16242579aac")); " is 259.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanParseAndGeneratePayToMultiSig,The length of the statement  "			string scriptPubKey = "1 0364bd4b02a752798342ed91c681a48793bb1c0853cbcd0b978c55e53485b8e27c 0364bd4b02a752798342ed91c681a48793bb1c0853cbcd0b978c55e53485b8e27d 2 OP_CHECKMULTISIG"; " is 179.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanParseAndGeneratePayToMultiSig,The length of the statement  "			Assert.Equal("0364bd4b02a752798342ed91c681a48793bb1c0853cbcd0b978c55e53485b8e27c"' scriptPubKeyResult.PubKeys[0].ToString()); " is 125.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanParseAndGeneratePayToMultiSig,The length of the statement  "			Assert.Equal("0364bd4b02a752798342ed91c681a48793bb1c0853cbcd0b978c55e53485b8e27d"' scriptPubKeyResult.PubKeys[1].ToString()); " is 125.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanParseAndGeneratePayToMultiSig,The length of the statement  "			Assert.Equal(scriptPubKey' PayToMultiSigTemplate.Instance.GenerateScriptPubKey(1' scriptPubKeyResult.PubKeys).ToString()); " is 122.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanParseAndGeneratePayToMultiSig,The length of the statement  "			var scriptSig = "0 3044022064f45a382a15d3eb5e7fe72076eec4ef0f56fde1adfd710866e729b9e5f3383d02202720a895914c69ab49359087364f06d337a2138305fbc19e20d18da78415ea9301 3044022064f45a382a15d3eb5e7fe72076eec4ef0f56fde1adfd710866e729b9e5f3383d02202720a895914c69ab49359087364f06d337a2138305fbc19e20d18da78415ea9302"; " is 306.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanParseAndGeneratePayToMultiSig,The length of the statement  "			Assert.Equal("3044022064f45a382a15d3eb5e7fe72076eec4ef0f56fde1adfd710866e729b9e5f3383d02202720a895914c69ab49359087364f06d337a2138305fbc19e20d18da78415ea9301"' Encoders.Hex.EncodeData(result[0].ToBytes())); " is 205.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanParseAndGeneratePayToMultiSig,The length of the statement  "			Assert.Equal("3044022064f45a382a15d3eb5e7fe72076eec4ef0f56fde1adfd710866e729b9e5f3383d02202720a895914c69ab49359087364f06d337a2138305fbc19e20d18da78415ea9302"' Encoders.Hex.EncodeData(result[1].ToBytes())); " is 205.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanParseAndGeneratePayToMultiSig,The length of the statement  "			scriptSig = "0 0 3044022064f45a382a15d3eb5e7fe72076eec4ef0f56fde1adfd710866e729b9e5f3383d02202720a895914c69ab49359087364f06d337a2138305fbc19e20d18da78415ea9302"; " is 161.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanParseAndGeneratePayToMultiSig,The length of the statement  "			Assert.Equal("3044022064f45a382a15d3eb5e7fe72076eec4ef0f56fde1adfd710866e729b9e5f3383d02202720a895914c69ab49359087364f06d337a2138305fbc19e20d18da78415ea9302"' Encoders.Hex.EncodeData(result[1].ToBytes())); " is 205.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanParseAndGeneratePayToMultiSig,The length of the statement  "			var sig = new TransactionSignature(Encoders.Hex.DecodeData("3044022064f45a382a15d3eb5e7fe72076eec4ef0f56fde1adfd710866e729b9e5f3383d02202720a895914c69ab49359087364f06d337a2138305fbc19e20d18da78415ea9301")); " is 206.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanParseAndGeneratePayToMultiSig,The length of the statement  "			var expected = new Script("0 3044022064f45a382a15d3eb5e7fe72076eec4ef0f56fde1adfd710866e729b9e5f3383d02202720a895914c69ab49359087364f06d337a2138305fbc19e20d18da78415ea9301 3044022064f45a382a15d3eb5e7fe72076eec4ef0f56fde1adfd710866e729b9e5f3383d02202720a895914c69ab49359087364f06d337a2138305fbc19e20d18da78415ea9301 " + new Script(scriptPubKey).ToHex()); " is 353.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanExtractAddressesFromScript,The length of the statement  "			var payToMultiSig = new Script("1 0364bd4b02a752798342ed91c681a48793bb1c0853cbcd0b978c55e53485b8e27c 0364bd4b02a752798342ed91c681a48793bb1c0853cbcd0b978c55e53485b8e27d 2 OP_CHECKMULTISIG"); " is 189.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanExtractAddressesFromScript,The length of the statement  "			var payToPubKeyHash = new Script("OP_DUP OP_HASH160 356facdac5f5bcae995d13e667bb5864fd1e7d59 OP_EQUALVERIFY OP_CHECKSIG"); " is 122.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanExtractAddressesFromScript,The length of the statement  "			var p2shScriptSig = new Script("0 3044022064f45a382a15d3eb5e7fe72076eec4ef0f56fde1adfd710866e729b9e5f3383d02202720a895914c69ab49359087364f06d337a2138305fbc19e20d18da78415ea9301 51210364bd4b02a752798342ed91c681a48793bb1c0853cbcd0b978c55e53485b8e27c210364bd4b02a752798342ed91c681a48793bb1c0853cbcd0b978c55e53485b8e27d52ae"); " is 322.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanExtractAddressesFromScript,The length of the statement  "			var p2phScriptSig = new Script("3045022100af878a48aab5a71397d518ee1ae3c35267cb559240bc4a06926d65d575090e7f02202a9208e1f13683b4e450b349ae3e7bd4498d5d808f06c4b8059ea41595447af401 02a71e88db4924c7620f3b27fa748817444b6ad02cd8cea32ed3cf2deb8b5ccae7"); " is 246.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,P2PKHScriptSigShouldNotBeMistakenForP2SHScriptSig,The length of the statement  "			var p2pkhScriptSig = new Script("304402206e3f2f829644ffe78b56ec8d0ea3715aee66e533a8195220bdea1526dc6ed3b202205eabcae791abfea55d54f8ec4e6de1bad1f7aa90e91687e81150b411e457025701 029f4485fddb359aeed82d71dc8df2fb0e83e31601c749d468ea92c99c13c5558b"); " is 245.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanParseAndGeneratePayToScript,The length of the statement  "			var redeem = "1 0364bd4b02a752798342ed91c681a48793bb1c0853cbcd0b978c55e53485b8e27c 0364bd4b02a752798342ed91c681a48793bb1c0853cbcd0b978c55e53485b8e27d 2 OP_CHECKMULTISIG"; " is 170.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanParseAndGeneratePayToScript,The length of the statement  "			var scriptSig = "0 3044022064f45a382a15d3eb5e7fe72076eec4ef0f56fde1adfd710866e729b9e5f3383d02202720a895914c69ab49359087364f06d337a2138305fbc19e20d18da78415ea9301 51210364bd4b02a752798342ed91c681a48793bb1c0853cbcd0b978c55e53485b8e27c210364bd4b02a752798342ed91c681a48793bb1c0853cbcd0b978c55e53485b8e27d52ae"; " is 306.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanParseAndGeneratePayToScript,The length of the statement  "			Assert.Equal("3044022064f45a382a15d3eb5e7fe72076eec4ef0f56fde1adfd710866e729b9e5f3383d02202720a895914c69ab49359087364f06d337a2138305fbc19e20d18da78415ea9301"' Encoders.Hex.EncodeData(sigParams.GetMultisigSignatures()[0].ToBytes())); " is 232.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanParseAndGeneratePayToScript,The length of the statement  "			sigParams = PayToScriptHashTemplate.Instance.ExtractScriptSigParameters(new Script(scriptSig)' sigParams.RedeemScript.PaymentScript); " is 133.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanParseAndGeneratePayToScript,The length of the statement  "			sigParams = PayToScriptHashTemplate.Instance.ExtractScriptSigParameters(new Script(scriptSig)' new Script("OP_HASH160 b5b88dd9befc9236915fcdbb7fd50052df50c853 OP_EQUAL")); " is 171.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanParseAndGeneratePayToScript,The length of the statement  "			sigParams = PayToScriptHashTemplate.Instance.ExtractScriptSigParameters(new Script(scriptSig)' new Script("OP_HASH160 OP_EQUAL")); " is 130.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanParseAndGeneratePayToScript,The length of the statement  "			scriptSig = "0 0 51210364bd4b02a752798342ed91c681a48793bb1c0853cbcd0b978c55e53485b8e27c210364bd4b02a752798342ed91c681a48793bb1c0853cbcd0b978c55e53485b8e27d52ae"; " is 161.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,MultisigScriptCanFollowBIP67,The length of the statement  "			var expected = Script.FromBytesUnsafe(Encoders.Hex.DecodeData("522102fe6f0a5a297eb38c391581c4413e084773ea23954d93f7753db7dc0adc188b2f2102ff12471208c14bd580709cb2358d98975247d8765f92bc25eab3b2763ed605f852ae")); " is 209.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,MultisigScriptCanFollowBIP67,The length of the statement  "			expected = Script.FromBytesUnsafe(Encoders.Hex.DecodeData("522102632b12f4ac5b1d1b72b2a3b508c19172de44f6f46bcee50ba33f3f9291e47ed021027735a29bae7780a9755fae7a1c4374c656ac6a69ea9f3697fda61bb99a4f3e772102e2cc6bd5f45edd43bebe7cb9b675f0ce9ed3efe613b177588290ad188d11b40453ae")); " is 273.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,MultisigScriptCanFollowBIP67,The length of the statement  "			var scriptWithoutSort = PayToMultiSigTemplate.Instance.GenerateScriptPubKey(2' false' new PubKey[] { pk2_1' pk2_2' pk2_3 }); " is 124.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,MultisigScriptCanFollowBIP67,The length of the statement  "			expected = Script.FromBytesUnsafe(Encoders.Hex.DecodeData("522102000000000000000000000000000000000000414141414141414141414141414021020000000000000000000000000000000000004141414141414141414141414141210300000000000000000000000000000000000041414141414141414141414141402103000000000000000000000000000000000000414141414141414141414141414154ae")); " is 341.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,MultisigScriptCanFollowBIP67,The length of the statement  "			expected = Script.FromBytesUnsafe(Encoders.Hex.DecodeData("5221021f2f6e1e50cb6a953935c3601284925decd3fd21bc445712576873fb8c6ebc1821022df8750480ad5b26950b25c7ba79d3e37d75f640f8e5d9bcd5b150a0f85014da2103e3818b65bcc73a7d64064106a859cc1a5a728c4345ff0b641209fba0d90de6e953ae")); " is 273.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanIdentifyP2PKScript,The length of the statement  "			var script = Script.FromHex("410496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858eeac"); " is 166.
Long Statement,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanIdentifyMultiSigScript,The length of the statement  "			var script = Script.FromHex("514104cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4410461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af52ae"); " is 302.
Long Statement,NBitcoin.Tests,sighash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\sighash_tests.cs,RandomScript,The length of the statement  "			OpcodeType[] oplist = { OpcodeType.OP_FALSE' OpcodeType.OP_1' OpcodeType.OP_2' OpcodeType.OP_3' OpcodeType.OP_CHECKSIG' OpcodeType.OP_IF' OpcodeType.OP_VERIF' OpcodeType.OP_RETURN' OpcodeType.OP_CODESEPARATOR }; " is 211.
Long Statement,NBitcoin.Tests,StealthAddressTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\StealthAddressTests.cs,BitFieldCanFetchTransaction,The length of the statement  "					Transaction = "0100000001bd365d65c6eeee2d3ae29c6e1b0fb22f70f0135220eac1273c92a13b6039ecdf000000006b48304502202551626a52a088ea585f2aaa8afe1c1b7bc52ea8e577e149f20f0f5f2fc54485022100913643c6a1e54b5284d1c108519d9243213373256ff95ab6c7e3d162175c9e28012102881c1427e826f230246197f7f693f1c923ad2afea1dad901d1c870f7e310c895ffffffff020000000000000000286a2606ab3099ae0359222b4a2dd9a21ebd70331794fb05b0bd605bd9660fdf895906b1a227edcbec306c3402000000001976a9142f62432f367dc3cf67e68f814cc2a3ed5b2e8cec88ac00000000"' " is 499.
Long Statement,NBitcoin.Tests,StealthAddressTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\StealthAddressTests.cs,BitFieldCanFetchTransaction,The length of the statement  "					Transaction = "01000000028d8d968818e464db9dc876eb4edd59e62913d849603ba10afe033159b55652dc010000006b483045022100992e7ce4516cdabffae823557f5854c6ca7a424cc2fe7a9b94f439ecca839f84022025b871cf499f7b0eebcf751a83e7ffe9473b6c5227f95d9989ef8e98937112760121038795ff1d07ef7092e03d612f187d1281705b36d0c11ecf4b11167beb7efc3437ffffffff723372d920d8eaa6bd1fe6ec5adaf913b6d8a48655acded49a3f09191cdf9f3a010000006a47304402206f6ca054242fe5b410d743ae238049799eccdd88637d555ad48d8da1a854bd0802201b13217d0a6a7cf3467074aa8964f3f365541304142503d91813baa0117d1a8101210258cedc6e590493838c612a394d53ffbb283638f9d1d49e1c571b15a885f405d9ffffffff05f0874b00000000001976a914cd08dcd94ba88488b4c02c82fc11fc63fee4e30c88acc0e1e400000000001976a9148784cbfe99e86135d40d276c58fcbbf37af1b48e88ac0000000000000000286a260689d0267d021cc402cf764f2c88138028b6d5c0f06d5caa34edffc1d2286048f0162756ebf1f0874b00000000001976a914923d77bbdd3d29dd4844a51629514bac9e8a2c4d88aca30c0000000000001976a9143aaa9db7a3fbc5dcc9d121a157bf63aaaee9d8f588ac00000000"' " is 997.
Long Statement,NBitcoin.Tests,StealthAddressTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\StealthAddressTests.cs,BitFieldCanFetchTransaction,The length of the statement  "					Transaction = "010000000288b6952f8357b5a8271f6c0608ea779549bf0a9ae72213ce433f7a9c90190be6000000006b4830450221008b1b7369d7bf8a1dd99e6a260ef969840d633ba81fc379bf4f5469afd3b288e2022077e21dd12c1d8b2a4ab2e58fb0113b9e3bb77db4439483f7a8311cac3ad6ce9a012102b0c2eb0cc505a4c9fb62df8a7fcdcc00ddab43ff5752ebc51a0dae11fbfb0648ffffffff4ca2f8960e17b56e690739158994ed23427ffc08445ba3223edacb322db12d4b000000006b483045022100f94d50d846d85a545693574f9e1a680a858f085257c827cd8b211df8d27c558202201bca0407ad67960937999a88c95e52417442703a16036bbe55f071cdff804f69012102884d0c845bff3158e88033bce236cdbfeadba0a7e7381258379612f355681d6dffffffff052f750000000000001976a914a34a179dc97cbb84992d2960ee240b56f1b2ae3088acbca15400000000001976a914139e314f94a8e4fc2864ef2544e7640ba033725b88ac0000000000000000286a26061d6b629c024c7daf682da4afd61aadf401fae316a265c3244d912b375a75b55551d52a583f2f750000000000001976a9142888cb9f0b0f489106bc13f56fdd2ceec1b6883788ac51c30000000000001976a91404316e7db781481d1419feda2c8d7fa9f7b68a6e88ac00000000"' " is 999.
Long Statement,NBitcoin.Tests,StealthAddressTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\StealthAddressTests.cs,CanParseStealthAddress,The length of the statement  "					StealthAddress = "vJmsmwE8cVt9ytJxBuY2jayh8RAfvpG42CyNVYpeVZAkHaiwASobUEzskpXMwbH1TZNBLoxWWYem5WuZewTL8xz3upJ75zKcdVmTfg"' " is 122.
Long Statement,NBitcoin.Tests,StealthAddressTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\StealthAddressTests.cs,CanCreatePayment,The length of the statement  "					StealthAddress = "vJmtjxSDxNPXL4RNapp9ARdqKz3uJyf1EDGjr1Fgqs9c8mYsVH82h8wvnA4i5rtJ57mr3kor1EVJrd4e5upACJd588xe52yXtzumxj"' " is 122.
Long Statement,NBitcoin.Tests,StealthAddressTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\StealthAddressTests.cs,CanCreatePayment,The length of the statement  "					StealthAddress = "vJmyTEybwCKz7W8y6vP62jo7RoyfLneiANcPLBBNYwn98EXzQRStMKqKGRiZhqscuQ6WKy2J3U3zfx72V3b2J6YvxxBcxUj4XMDsw7"' " is 122.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanParseExtKey,The length of the statement  "			new BitcoinExtPubKey("tpubDDtSBgfc8peQPRWaSUfPC6k3QosE6QWv1P3ZBXbmCBQehxd4KdZLpsLJGe4qML2AcgbxZNHdi87929AXeFD2tENmLZD2DWFPGXBDcQzeQ3d"' Network.RegTest); " is 153.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanSelectCoin,The length of the statement  "			var selected = selector.Select(new ICoin[] { CreateCoin("5"' bob)' CreateCoin("5"' bob) }' Money.Parse("2.0")).ToArray(); " is 121.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The length of the statement  "				Assert.Equal(3' setCoinsRet.Count);     // the best should be 20+10+5.  it's incredibly unlikely the 1 or 2 got included (but possible) " is 135.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The length of the statement  "				// now if we try making 16 cents again' the smaller coins can make 5+6+7 = 18 cents' better than the next biggest coin' 20 " is 122.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The length of the statement  "				// and now if we try making 16 cents again' the smaller coins can make 5+6+7 = 18 cents' the same as the next biggest coin' 18 " is 126.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The length of the statement  "				// run the 'mtgox' test (see http://blockexplorer.com/tx/29a3efd3ef04f9153d47a990bd7b048a4b2d213daaa5fb8ed670fb85f13bdbcf) " is 122.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,GetCoins,The length of the statement  "			return new Coin[] { new Coin(new uint256(Enumerable.Range(0' 32).Select(i => (byte)0xaa).ToArray())' 0' Money.Coins(2.0m)' p2sh.ScriptPubKey) }; " is 144.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildAnyoneCanPayTransaction,The length of the statement  "			var aliceBobRedeemScript = PayToMultiSigTemplate.Instance.GenerateScriptPubKey(2' new PubKey[] { aliceKey.PubKey' bobKey.PubKey }); " is 131.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildAnyoneCanPayTransaction,The length of the statement  "			aliceBobCoins.Add(new ScriptCoin(funding' funding.Outputs.To(aliceBobRedeemScript.Hash).First()' aliceBobRedeemScript)); " is 120.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildStealthTransaction,The length of the statement  "			var darkSatoshi = new BitcoinStealthAddress(scanKey.PubKey' stealthKeys.Select(k => k.PubKey).ToArray()' 2' new BitField(3' 5)' Network.Main); " is 142.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanSplitFees,The length of the statement  "			var spentAlice = builder.FindSpentCoins(tx).Where(c => aliceCoins.Contains(c)).OfType<Coin>().Select(c => c.Amount).Sum(); " is 122.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanSplitFees,The length of the statement  "			var receivedAlice = tx.Outputs.AsCoins().Where(c => c.ScriptPubKey == alice.PubKey.Hash.ScriptPubKey).Select(c => c.Amount).Sum(); " is 130.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanSplitFees,The length of the statement  "			var receivedBob = tx.Outputs.AsCoins().Where(c => c.ScriptPubKey == bob.PubKey.Hash.ScriptPubKey).Select(c => c.Amount).Sum(); " is 126.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanVerifySequenceLock,The length of the statement  "				new[] { 12 }' 13' now' true' new SequenceLock(-1' now + TimeSpan.FromMinutes(60.0) + smallStep - TimeSpan.FromSeconds(1))); " is 123.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanVerifySequenceLock,The length of the statement  "				new[] { 12 }' 12' now' false' new SequenceLock(-1' now + TimeSpan.FromMinutes(60.0) + smallStep - TimeSpan.FromSeconds(1))); " is 124.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BigUIntCoverage,The length of the statement  "			Assert.True(new uint160("0102030405060708090102030405060708090102") == new uint160("0102030405060708090102030405060708090102")); " is 128.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BigUIntCoverage,The length of the statement  "			Assert.True(new uint160("0102030405060708090102030405060708090102") == new uint160(new uint160("0102030405060708090102030405060708090102"))); " is 141.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BigUIntCoverage,The length of the statement  "			Assert.True(new uint160("0102030405060708090102030405060708090102") != new uint160(new uint160("0102030405060708090102030405060708090101"))); " is 141.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BigUIntCoverage,The length of the statement  "			Assert.False(new uint160("0102030405060708090102030405060708090102") != new uint160(new uint160("0102030405060708090102030405060708090102"))); " is 142.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BigUIntCoverage,The length of the statement  "			Assert.True(new uint160("0102030405060708090102030405060708090102").Equals(new uint160("0102030405060708090102030405060708090102"))); " is 133.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BigUIntCoverage,The length of the statement  "			Assert.True(new uint160("0102030405060708090102030405060708090102").GetHashCode() == new uint160("0102030405060708090102030405060708090102").GetHashCode()); " is 156.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BigUIntCoverage,The length of the statement  "			Assert.True(new uint160("0102030405060708090102030405060708090102") == uint160.Parse("0102030405060708090102030405060708090102")); " is 130.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BigUIntCoverage,The length of the statement  "			Assert.True(new uint160("0102030405060708090102030405060708090102") > uint160.Parse("0102030405060708090102030405060708090101")); " is 129.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BigUIntCoverage,The length of the statement  "			Assert.True(new uint160("0102030405060708090102030405060708090101") < uint160.Parse("0102030405060708090102030405060708090102")); " is 129.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BigUIntCoverage,The length of the statement  "			Assert.True(new uint160("0102030405060708090102030405060708090101") <= uint160.Parse("0102030405060708090102030405060708090101")); " is 130.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BigUIntCoverage,The length of the statement  "			Assert.True(new uint160("0102030405060708090102030405060708090101") >= uint160.Parse("0102030405060708090102030405060708090101")); " is 130.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BigUIntCoverage,The length of the statement  "			Assert.True(new uint160("0102030405060708090102030405060708090101") <= uint160.Parse("0102030405060708090102030405060708090102")); " is 130.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BigUIntCoverage,The length of the statement  "			Assert.True(new uint160("0102030405060708090102030405060708090102") >= uint160.Parse("0102030405060708090102030405060708090101")); " is 130.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BigUIntCoverage,The length of the statement  "			AssertEx.CollectionEquals(Encoders.Hex.DecodeData("0102030405060708090102030405060708090102030405060708090102030405")' bytes.ToArray()); " is 136.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BigUIntCoverage,The length of the statement  "			Assert.True(new uint256("0102030405060708090102030405060708090102030405060708090102030405") == new uint256(new uint256("0102030405060708090102030405060708090102030405060708090102030405"))); " is 189.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,OtherCoverage,The length of the statement  "			Assert.Equal(System.Net.IPAddress.Parse("127.0.0.1").MapToIPv6()' Utils.MapToIPv6(System.Net.IPAddress.Parse("127.0.0.1"))); " is 124.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BitcoinStreamCoverage,The length of the statement  "			BitcoinStreamCoverageCore(new uint160[] { new uint160(1)' new uint160(2)' new uint160(3)' new uint160(4) }' (BitcoinStream bs' ref uint160[] items) => " is 150.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanCheckSegwitPubkey,The length of the statement  "			var a = new Script("OP_DUP 033fbe0a2aa8dc28ee3b2e271e3fedc7568529ffa20df179b803bf9073c11b6a8b OP_CHECKSIG OP_IF OP_DROP 0382fdfb0a3898bc6504f63204e7d15a63be82a3b910b5b865690dc96d1249f98c OP_ELSE OP_CODESEPARATOR 033fbe0a2aa8dc28ee3b2e271e3fedc7568529ffa20df179b803bf9073c11b6a8b OP_ENDIF OP_CHECKSIG"); " is 302.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanEstimatedFeesCorrectlyIfFeesChangeTransactionSize,The length of the statement  "			var redeem = PayToMultiSigTemplate.Instance.GenerateScriptPubKey(2' new Key().PubKey' new Key().PubKey' new Key().PubKey); " is 122.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanEstimatedFeesCorrectlyIfFeesChangeTransactionSize,The length of the statement  "			transactionBuilder.AddCoins(new Coin(new OutPoint(uint256.Parse("75425c904289f21feef0cffab2081ba22030b633623115adf0780edad443e6c7")' 1)' new TxOut("0.00010000"' PayToScriptHashTemplate.Instance.GenerateScriptPubKey(redeem).GetDestinationAddress(Network.Main))).ToScriptCoin(redeem)); " is 283.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanEstimatedFeesCorrectlyIfFeesChangeTransactionSize,The length of the statement  "			transactionBuilder.AddCoins(new Coin(new OutPoint(uint256.Parse("75425c904289f21feef0cffab2081ba22030b633623115adf0780edad443e6c7")' 2)' new TxOut("0.00091824"' PayToScriptHashTemplate.Instance.GenerateScriptPubKey(redeem).GetDestinationAddress(Network.Main))).ToScriptCoin(redeem)); " is 283.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanEstimatedFeesCorrectlyIfFeesChangeTransactionSize,The length of the statement  "			transactionBuilder.AddCoins(new Coin(new OutPoint(uint256.Parse("75425c904289f21feef0cffab2081ba22030b633623115adf0780edad443e6c7")' 3)' new TxOut("0.00100000"' PayToScriptHashTemplate.Instance.GenerateScriptPubKey(redeem).GetDestinationAddress(Network.Main))).ToScriptCoin(redeem)); " is 283.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanEstimatedFeesCorrectlyIfFeesChangeTransactionSize,The length of the statement  "			transactionBuilder.AddCoins(new Coin(new OutPoint(uint256.Parse("75425c904289f21feef0cffab2081ba22030b633623115adf0780edad443e6c7")' 4)' new TxOut("0.00100000"' PayToScriptHashTemplate.Instance.GenerateScriptPubKey(redeem).GetDestinationAddress(Network.Main))).ToScriptCoin(redeem)); " is 283.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanEstimatedFeesCorrectlyIfFeesChangeTransactionSize,The length of the statement  "			transactionBuilder.AddCoins(new Coin(new OutPoint(uint256.Parse("75425c904289f21feef0cffab2081ba22030b633623115adf0780edad443e6c7")' 5)' new TxOut("0.00246414"' PayToScriptHashTemplate.Instance.GenerateScriptPubKey(redeem).GetDestinationAddress(Network.Main))).ToScriptCoin(redeem)); " is 283.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanEstimatedFeesCorrectlyIfFeesChangeTransactionSize,The length of the statement  "			transactionBuilder.AddCoins(new Coin(new OutPoint(uint256.Parse("75425c904289f21feef0cffab2081ba22030b633623115adf0780edad443e6c7")' 6)' new TxOut("0.00250980"' PayToScriptHashTemplate.Instance.GenerateScriptPubKey(redeem).GetDestinationAddress(Network.Main))).ToScriptCoin(redeem)); " is 283.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanEstimatedFeesCorrectlyIfFeesChangeTransactionSize,The length of the statement  "			transactionBuilder.AddCoins(new Coin(new OutPoint(uint256.Parse("75425c904289f21feef0cffab2081ba22030b633623115adf0780edad443e6c7")' 7)' new TxOut("0.01000000"' PayToScriptHashTemplate.Instance.GenerateScriptPubKey(redeem).GetDestinationAddress(Network.Main))).ToScriptCoin(redeem)); " is 283.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanEstimatedFeesCorrectlyIfFeesChangeTransactionSize,The length of the statement  "			//Adding the estimated fees will cause 6 more coins to be included' so let's verify the actual sent fees take that into account " is 127.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransaction,The length of the statement  "			var multiSigPubKey = PayToMultiSigTemplate.Instance.GenerateScriptPubKey(2' keys.Select(k => k.PubKey).Take(3).ToArray()); " is 122.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanParseLTubLitecoin,The length of the statement  "			new BitcoinExtKey("Ltpv71G8qDifUiNesyXJM9i5RzRB5HHFWfjseAX7mXY6vim2BHMBHgZJi9poW2J5FveLFg4PnPXf6y2VLtYoTDxJAhbVRRpo3GeKKx1wveysYnw"' NBitcoin.Altcoins.Litecoin.Instance.Mainnet); " is 178.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanParseLTubLitecoin,The length of the statement  "			new BitcoinExtPubKey("Ltub2SSUS19CirucVaJxxH11bYDCEmze824yTDJCzRg5fDNN3oBWussWgRA7Zyiya98dAErcvDsw7rAuuZuZug3Ve6iT5uVkwPAKwQphBiQdjNd"' NBitcoin.Altcoins.Litecoin.Instance.Mainnet); " is 181.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanParseElementsStuff,The length of the statement  "			var funding = Transaction.Parse("020000000001ee1de792f9390a96dc619ed809aff7e9441e961fbbc259e157d5320a692e1f5c0d00000000feffffff0301e8298b04333ead007973ccb969ba36772c9fcdaf8747cc5dd372e79898debd7a010000000005f5e1000017a914840c45c52492c79b61cced87cb0f033dd5365a168701e8298b04333ead007973ccb969ba36772c9fcdaf8747cc5dd372e79898debd7a01000001e8ebcb2618001976a9147a27ab132bba2730160b4fe1422f3a5f741f9f6388ac01e8298b04333ead007973ccb969ba36772c9fcdaf8747cc5dd372e79898debd7a0100000000000000e8000000000000"' Altcoins.Liquid.Instance.Regtest); " is 534.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanParseElementsStuff,The length of the statement  "				"0100000001017ab2ccf551f3632954583580519a00a1a6580567802a66e7d46719a5a4fae99f00000000171600149bf32fe6110a55eef7057d74125ba8e5746cd7bdffffffff020125b251070e29ca19043cf33ccd7324e2ddab03ecc4ae0b5e77c4fc0e5cf6c95a010000000002faec980017a914840c45c52492c79b61cced87cb0f033dd5365a16870125b251070e29ca19043cf33ccd7324e2ddab03ecc4ae0b5e77c4fc0e5cf6c95a010000000002faf080001976a9145595d11e0a669b1b4177f0222179d9002ac874a688ac00000000000002473044022029b6df8204455c6769f90870562ed40e95a4d3e762b6175be1e062d8e85c4cf902205ec40246e0fdc17343ab534edf64afcfc2c6304bb534a0cadc3708f8dcd7030f8221033db76f52af98480fe32b2fb32bf368683938421bad77a5bc828f9c79da70f8020000000000"' " is 653.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanParseElementsStuff,The length of the statement  "				"0100000001017ab2ccf551f3632954583580519a00a1a6580567802a66e7d46719a5a4fae99f00000000171600149bf32fe6110a55eef7057d74125ba8e5746cd7bdffffffff020125b251070e29ca19043cf33ccd7324e2ddab03ecc4ae0b5e77c4fc0e5cf6c95a010000000002faec980017a914840c45c52492c79b61cced87cb0f033dd5365a16870125b251070e29ca19043cf33ccd7324e2ddab03ecc4ae0b5e77c4fc0e5cf6c95a010000000002faf080001976a9145595d11e0a669b1b4177f0222179d9002ac874a688ac0000000000000247304402201db6483735db7f24aac8d6ad53ebef5a850c6c805ab49440152676ba1bb9b49602204349d044e3634852e183207f8ad5b796bd58e188c12714190140a1f728b02f870221033db76f52af98480fe32b2fb32bf368683938421bad77a5bc828f9c79da70f8020000000000"' " is 653.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanParseElementsStuff,The length of the statement  "				"0100000001017ab2ccf551f3632954583580519a00a1a6580567802a66e7d46719a5a4fae99f00000000171600149bf32fe6110a55eef7057d74125ba8e5746cd7bdffffffff020125b251070e29ca19043cf33ccd7324e2ddab03ecc4ae0b5e77c4fc0e5cf6c95a010000000002faec980017a914840c45c52492c79b61cced87cb0f033dd5365a16870125b251070e29ca19043cf33ccd7324e2ddab03ecc4ae0b5e77c4fc0e5cf6c95a010000000002faf080001976a9145595d11e0a669b1b4177f0222179d9002ac874a688ac0000000000000247304402203e7206cdc9765a93bdc78458843ed34f317a6989a87513c614405b1a04c6a963022011487dbfd072f78a7a4711cd1ba2c98bba2c0ad510501d3391008985e78cb0b80121033db76f52af98480fe32b2fb32bf368683938421bad77a5bc828f9c79da70f8020000000000"' " is 653.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanParseElementsStuff,The length of the statement  "				"0100000001017ab2ccf551f3632954583580519a00a1a6580567802a66e7d46719a5a4fae99f00000000171600149bf32fe6110a55eef7057d74125ba8e5746cd7bdffffffff020125b251070e29ca19043cf33ccd7324e2ddab03ecc4ae0b5e77c4fc0e5cf6c95a010000000002faec980017a914840c45c52492c79b61cced87cb0f033dd5365a16870125b251070e29ca19043cf33ccd7324e2ddab03ecc4ae0b5e77c4fc0e5cf6c95a010000000002faf080001976a9145595d11e0a669b1b4177f0222179d9002ac874a688ac0000000000000248304502210098e30568134f542885d223cf580a247b777ac919ad139fa08a693b2f2299d3b0022002333cbf441a8ec71ca3d026e4291da9e4a0620bbaba6170817d6b8eab27c80c8121033db76f52af98480fe32b2fb32bf368683938421bad77a5bc828f9c79da70f8020000000000"' " is 655.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanParseElementsStuff,The length of the statement  "				"0100000001017ab2ccf551f3632954583580519a00a1a6580567802a66e7d46719a5a4fae99f00000000171600149bf32fe6110a55eef7057d74125ba8e5746cd7bdffffffff020125b251070e29ca19043cf33ccd7324e2ddab03ecc4ae0b5e77c4fc0e5cf6c95a010000000002faec980017a914840c45c52492c79b61cced87cb0f033dd5365a16870125b251070e29ca19043cf33ccd7324e2ddab03ecc4ae0b5e77c4fc0e5cf6c95a010000000002faf080001976a9145595d11e0a669b1b4177f0222179d9002ac874a688ac00000000000002483045022100d49aa5d8a7bdb1b534089ee153cab55bc507ef2631014b74088a7ea1da23fadb02207b72a76d7f516714a088ce87cdd3b60ce8f6aa61e273e16e7c10307fe565b9130321033db76f52af98480fe32b2fb32bf368683938421bad77a5bc828f9c79da70f8020000000000"' " is 655.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanParseElementsStuff,The length of the statement  "				"0100000001017ab2ccf551f3632954583580519a00a1a6580567802a66e7d46719a5a4fae99f00000000171600149bf32fe6110a55eef7057d74125ba8e5746cd7bdffffffff020125b251070e29ca19043cf33ccd7324e2ddab03ecc4ae0b5e77c4fc0e5cf6c95a010000000002faec980017a914840c45c52492c79b61cced87cb0f033dd5365a16870125b251070e29ca19043cf33ccd7324e2ddab03ecc4ae0b5e77c4fc0e5cf6c95a010000000002faf080001976a9145595d11e0a669b1b4177f0222179d9002ac874a688ac00000000000002483045022100ab56dfc37c6d5842fd994e77ca750758b6f6f71ca52187dc27dd513221d3bd3102206e6af5d5efe2f2c21961cd68450fda2ad7c1e399810d8e44b6801c7d2230669a8321033db76f52af98480fe32b2fb32bf368683938421bad77a5bc828f9c79da70f8020000000000" " is 654.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanParseElementsStuff,The length of the statement  "			var tx = Transaction.Parse("0200000001010000000000000000000000000000000000000000000000000000000000000000ffffffff03520101ffffffff02016d521c38ec1ea15734ae22b7c46064412829c0d0579f0a713d1c04ede979026f01000000000000133f001976a914fc26751a5025129a2fd006c6fbfa598ddd67f7e188ac016d521c38ec1ea15734ae22b7c46064412829c0d0579f0a713d1c04ede979026f01000000000000000000266a24aa21a9ed23ecf05909c8f45525aede26cdad87f0ca9ce8777cfdc3328ab165d87953a520000000000000012000000000000000000000000000000000000000000000000000000000000000000000000000"' Altcoins.Liquid.Instance.Mainnet); " is 559.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanParseElementsStuff,The length of the statement  "			Assert.Equal("QLFdUboUPJnUzvsXKu83hUtrQ1DuxyggRg"' tx.Outputs[0].ScriptPubKey.GetDestinationAddress(Altcoins.Liquid.Instance.Mainnet).ToString()); " is 146.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanParseElementsStuff,The length of the statement  "			var ba = new BitcoinBlindedAddress("CTEuoJahNytfiEJ9UEGBHKsfvfceqg3fvYNC9dfdA8ECCrBzanANe5LFPuyUBJK5C2p1n1XrK5qwYvAw"' Altcoins.Liquid.Instance.Regtest); " is 153.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanParseElementsStuff,The length of the statement  "			var txStr = "0200000001010000000000000000000000000000000000000000000000000000000000000000ffffffff03510101ffffffff0201230f4f5d4b7c6fa845806ee4f67713459e1b69e8e60fcee2e4940c7a0d5de1b201000000000000000000016a01230f4f5d4b7c6fa845806ee4f67713459e1b69e8e60fcee2e4940c7a0d5de1b201000000000000000000266a24aa21a9ed94f15ed3a62165e4a0b99699cc28b48e19cb5bc1b1f47155db62d63f1e047d45000000000000012000000000000000000000000000000000000000000000000000000000000000000000000000"; " is 461.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanParseElementsStuff,The length of the statement  "			txStr = "0200000001010000000000000000000000000000000000000000000000000000000000000000ffffffff03510101ffffffff0201230f4f5d4b7c6fa845806ee4f67713459e1b69e8e60fcee2e4940c7a0d5de1b201000000000000000000016a01230f4f5d4b7c6fa845806ee4f67713459e1b69e8e60fcee2e4940c7a0d5de1b201000000000000000000266a24aa21a9ed94f15ed3a62165e4a0b99699cc28b48e19cb5bc1b1f47155db62d63f1e047d45000000000000012000000000000000000000000000000000000000000000000000000000000000000000000000"; " is 457.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanPartiallySignTransaction,The length of the statement  "			var fundingTransaction = Transaction.Parse("010000000189632848f99722915727c5c75da8db2dbf194342a0429828f66ff88fab2af7d6000000008b483045022100abbc8a73fe2054480bda3f3281da2d0c51e2841391abd4c09f4f908a2034c18d02205bc9e4d68eafb918f3e9662338647a4419c0de1a650ab8983f1d216e2a31d8e30141046f55d7adeff6011c7eac294fe540c57830be80e9355c83869c9260a4b8bf4767a66bacbd70b804dc63d5beeb14180292ad7f3b083372b1d02d7a37dd97ff5c9effffffff0140420f000000000017a914f815b036d9bbbce5e9f2a00abd1bf3dc91e955108700000000"' Network); " is 500.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanPartiallySignTransaction,The length of the statement  "			var gistTransaction = Transaction.Parse("0100000001aca7f3b45654c230e0886a57fb988c3044ef5e8f7f39726d305c61d5e818903c00000000fd5d010048304502200187af928e9d155c4b1ac9c1c9118153239aba76774f775d7c1f9c3e106ff33c0221008822b0f658edec22274d0b6ae9de10ebf2da06b1bbdaaba4e50eb078f39e3d78014730440220795f0f4f5941a77ae032ecb9e33753788d7eb5cb0c78d805575d6b00a1d9bfed02203e1f4ad9332d1416ae01e27038e945bc9db59c732728a383a6f1ed2fb99da7a4014cc952410491bba2510912a5bd37da1fb5b1673010e43d2c6d812c514e91bfa9f2eb129e1c183329db55bd868e209aac2fbc02cb33d98fe74bf23f0c235d6126b1d8334f864104865c40293a680cb9c020e7b1e106d8c1916d3cef99aa431a56d253e69256dac09ef122b1a986818a7cb624532f062c1d1f8722084861c5c3291ccffef4ec687441048d2455d2403e08708fc1f556002f1b6cd83f992d085097f9974ab08a28838f07896fbab08f39495e15fa6fad6edbfb1e754e35fa1c7844c41f322a1863d4621353aeffffffff0140420f00000000001976a914ae56b4db13554d321c402db3961187aed1bbed5b88ac00000000"' Network.Main); " is 930.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanPartiallySignTransaction,The length of the statement  "			AssertCorrectlySigned(gistTransaction' fundingTransaction.Outputs[0]' allowHighS); //One sig in the hard code tx is high " is 120.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanMutateSignature,The length of the statement  "			Transaction funding = Transaction.Parse("010000000189632848f99722915727c5c75da8db2dbf194342a0429828f66ff88fab2af7d6000000008b483045022100abbc8a73fe2054480bda3f3281da2d0c51e2841391abd4c09f4f908a2034c18d02205bc9e4d68eafb918f3e9662338647a4419c0de1a650ab8983f1d216e2a31d8e30141046f55d7adeff6011c7eac294fe540c57830be80e9355c83869c9260a4b8bf4767a66bacbd70b804dc63d5beeb14180292ad7f3b083372b1d02d7a37dd97ff5c9effffffff0140420f000000000017a914f815b036d9bbbce5e9f2a00abd1bf3dc91e955108700000000"' Network); " is 497.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanMutateSignature,The length of the statement  "			Transaction spending = Transaction.Parse("0100000001aca7f3b45654c230e0886a57fb988c3044ef5e8f7f39726d305c61d5e818903c00000000fd5d010048304502200187af928e9d155c4b1ac9c1c9118153239aba76774f775d7c1f9c3e106ff33c0221008822b0f658edec22274d0b6ae9de10ebf2da06b1bbdaaba4e50eb078f39e3d78014730440220795f0f4f5941a77ae032ecb9e33753788d7eb5cb0c78d805575d6b00a1d9bfed02203e1f4ad9332d1416ae01e27038e945bc9db59c732728a383a6f1ed2fb99da7a4014cc952410491bba2510912a5bd37da1fb5b1673010e43d2c6d812c514e91bfa9f2eb129e1c183329db55bd868e209aac2fbc02cb33d98fe74bf23f0c235d6126b1d8334f864104865c40293a680cb9c020e7b1e106d8c1916d3cef99aa431a56d253e69256dac09ef122b1a986818a7cb624532f062c1d1f8722084861c5c3291ccffef4ec687441048d2455d2403e08708fc1f556002f1b6cd83f992d085097f9974ab08a28838f07896fbab08f39495e15fa6fad6edbfb1e754e35fa1c7844c41f322a1863d4621353aeffffffff0140420f00000000001976a914ae56b4db13554d321c402db3961187aed1bbed5b88ac00000000"' Network); " is 926.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TestWtfScript,The length of the statement  "			var source = Transaction.Parse("01000000024c8a18c4d9e623e81272e5c34669d67604637e6d8f64cbf79ba0bcc93c3472f30000000049483045022100bc793ca29e427838cbc24c127733be032178ab623519f796ce0fcdfef58a96f202206174c0f7d7b303e01fbb50052e0f5fcd75a964af5737a9ed2b95c20eef80cd7a01ffffffffd1f8b4607bd6a83db42d6f557f378758d4b03d9d1f2bb3b868bb9c55bbfc8679000000005747304402203424c812ee29c52a39bd6ce41b2a0d8a6210995b4049fa03be65105fc1abdb7402205bccaeb2c0d23d59f70a8175912c49100108d7217ad105bcb001d65be0c25c95010e8856df1cc6b5d55a12704c261963ffffffff01f049020000000000fd76017455947982775e60a57456947982775e60a59a74559479a820555086252d5d479dc034cddb75d6b9e8b6947e3690cec630531203e2f3dfdbfc8774569479a82034ebda879dc394c7522047b9bcc16b985d960b301b9d4f3addb05190b01b1300879a9a745594798277745694798277876320555086252d5d479dc034cddb75d6b9e8b6947e3690cec630531203e2f3dfdbfc672034ebda879dc394c7522047b9bcc16b985d960b301b9d4f3addb05190b01b13006820555086252d5d479dc034cddb75d6b9e8b6947e3690cec630531203e2f3dfdbfc877451947974529479ac9a745594798277745694798277876320555086252d5d479dc034cddb75d6b9e8b6947e3690cec630531203e2f3dfdbfc672034ebda879dc394c7522047b9bcc16b985d960b301b9d4f3addb05190b01b1300682034ebda879dc394c7522047b9bcc16b985d960b301b9d4f3addb05190b01b1300877453947974549479ac9a9b9a7451947974529479ac7453947974549479ac9a9b6900000000"' Network); " is 1318.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TestWtfScript,The length of the statement  "			var spending = Transaction.Parse("0100000001914853959297db6a5aa0e3945a750e4ee311cf47e723dd81d4e397df04c8f500000000008b483045022100bef86c24185a568ce76a4527a88eda58b6ce531e9549d8135d334a6bd077c0350220398385675415edac18a6e623f3f7f7dc2e6a3b11f3beaa2c2763232e0cbf958f012103b81eecef4a027975ea51e6d1220129ed21b6d97c17b27bbbe32a5b934561ba6400000e89dbf6109a1e40f015dfceb0832c0e8856df1cc6b5d55a12704c261963ffffffff01a086010000000000232103b81eecef4a027975ea51e6d1220129ed21b6d97c17b27bbbe32a5b934561ba64ac00000000"' Network); " is 514.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,OP_2ROT,The length of the statement  "			Script scriptSig = new Script(Op.GetPushOp(1)' Op.GetPushOp(2)' Op.GetPushOp(3)' Op.GetPushOp(4)' Op.GetPushOp(5)' Op.GetPushOp(6)); " is 132.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanCheckSegwitSig,The length of the statement  "			Transaction tx = Transaction.Parse("010000000001015d896079097272b13ed9cb22acfabeca9ce83f586d98cc15a08ea2f9c558013b0300000000ffffffff01605af40500000000160014a8cbb5eca9af499cecaa08457690ab367f23d95b0247304402200b6baba4287f3321ae4ec6ba66420d9a48c3f3bc331603e7dca6b12ca75cce6102207fa582041b025605c0474b99a2d3ab5080d6ea14ae3a50b7de92596abf40fb4b012102cdfc0f4701e0c8db3a0913de5f635d0ea76663a8f80925567358d558603fae3500000000"' Network); " is 430.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanCheckSegwitSig,The length of the statement  "			Transaction toCheck = Transaction.Parse("01000000000103b019e2344634c5b34aeb867f2cd8b09dbbd95b5bf8c5d56d58be1dd9077f9d3a00000000da0047304402201b2be1016abd4df4ca699e0430b97bc8dcd4c1c90b6a6ee382be75f42956566402205ab38fddace15ba4b2c4dbacc6793bb1f35a371aa8386f1348bd65dfeda9657201483045022100db1dbea1a5d05ff7daf6d106931ab701a29d2dddd8cd7781e9eb7fefd31139790220319eb8a238e6c635ebe2960f5960eeb96371f5a38503cf41aa89a33807c8b6a50147522102a96e9843b846b8cc3277ea54638f1454378219854ef89c81a8a4e9217f1f3ca02103d5feb2e2f2fa1403ede18aaac7631dd2c9a893953a9ab338e7d9fa749d91f03b52aeffffffffb019e2344634c5b34aeb867f2cd8b09dbbd95b5bf8c5d56d58be1dd9077f9d3a01000000db00483045022100aec68f5760337efdf425007387f094df284a576e824492597b0d046e038034100220434cb22f056e97cd823a13751c482a9f2d3fb956abcfa69db4dcd2679379070101483045022100c7ce0a9617cbcaa9308758092d336b228f67d358ad25a786711a87a29e2f72d102203d608bf6a4416e9493a5d89552633da300e9a237811e9affea3cda3320a3257c0147522102c4bd91a554815c73814848b311051c43ad6a75810269e1ff0eb9c13d828fc6fb21031035e69a48e04bc4d6315590620f784ab79d8369d122bd45ad7e77c81ac1cb1c52aeffffffffbcf750fad5ddd1909d8b3e2edda94f7ae3c866952932823763291b9467e3b9580000000023220020e0be53749d09a8e2d3843633cf11133e51e73944334d11a147f1ae53f1c3dfe5ffffffff019cbaf0080000000017a9148d52e4999751ec43c07eb371119f8c45047d26dc870000040047304402205bdc03fac6c3be92309e4fdd1572147ca56210dbb4413539874a4e3b0670ac0b02206422cd069e6078bcdc8f698ff77aed65566b6fa1ff028cc322d14d036d2c192401473044022022fa0bda2e8e21716b9d74499665e4f31cbcf2bf49d0b535188e7e196e8e90d8022076ad55655fbd54637c0cf5bbd7f07905446e23a621f82a940cb07677dab2f8fe0147522102d01cf4abc1b6c22cc0e0e43e5277f1a7fb544eca52244cd4cb88bef5943c5563210284a2ffb3e6b6ac0ac9444b0ecd9856f79b53bbd3100894ec6dc80e6e956edbeb52ae00000000"' Network); " is 1771.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanCheckSegwitSig,The length of the statement  "			var txOut = tx.Outputs.CreateNewTxOut(Money.Satoshis(100000)' new Script("OP_HASH160 442afa4f034468652c571202da0bf277cb729def OP_EQUAL")); " is 138.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanCheckSegwitSigCore,The length of the statement  "				var param2 = PayToWitPubKeyHashTemplate.Instance.ExtractScriptPubKeyParameters(param1.PublicKey.GetSegwitAddress(Network.Main).Hash.ScriptPubKey); " is 146.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanParseWitTransaction,The length of the statement  "			var hex = "010000000001015d896079097272b13ed9cb22acfabeca9ce83f586d98cc15a08ea2f9c558013b0300000000ffffffff01605af40500000000160014a8cbb5eca9af499cecaa08457690ab367f23d95b0247304402200b6baba4287f3321ae4ec6ba66420d9a48c3f3bc331603e7dca6b12ca75cce6102207fa582041b025605c0474b99a2d3ab5080d6ea14ae3a50b7de92596abf40fb4b012102cdfc0f4701e0c8db3a0913de5f635d0ea76663a8f80925567358d558603fae3500000000"; " is 395.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanParseWitTransaction,The length of the statement  "			tx = Transaction.Parse("010000000001015d896079097272b13ed9cb22acfabeca9ce83f586d98cc15a08ea2f9c558013b0200000000ffffffff01605af40500000000160014a8cbb5eca9af499cecaa08457690ab367f23d95b02483045022100d3edd272c4ff247c36a1af34a2394859ece319f61ee85f759b94ec0ecd61912402206dbdc7c6ca8f7279405464d2d935b5e171dfd76656872f76399dbf333c0ac3a001fdetwork); " is 1398.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,bip143Test,The length of the statement  "			Transaction tx = Transaction.Parse("0100000002fff7f7881a8099afa6940d42d1e7f6362bec38171ea3edf433541db4e4ad969f0000000000eeffffffef51e1b804cc89d182d279655c3aa89e815b1b309fe287d9b2b55d57b90ec68a0100000000ffffffff02202cb206000000001976a9148280b37df378db99f66f85c95a783a76ac7a6d5988ac9093510d000000001976a9143bde42dbee7e4dbe6a21b2d50ce2f0167faa815988ac11000000"' Network); " is 368.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,bip143Test,The length of the statement  "			var output = tx.Outputs.CreateNewTxOut(Money.Satoshis(0x23c34600L)' new Script(Encoders.Hex.DecodeData("76a9141d0f172a0ecb48aee1be1f2687d2963ae33f71a188ac"))); " is 159.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,bip143Test,The length of the statement  "			Assert.Equal(new uint256(Encoders.Hex.DecodeData("c37af31116d1b27caf68aae9e3ac82f1477929014d5b917657d0eb49478cb670")' true)' h); " is 128.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,witnessHasPushSizeLimit,The length of the statement  "			spending.Inputs[0].WitScript = new WitScript(new[] { new byte[521] }.Concat(spending.Inputs[0].WitScript.Pushes).ToArray()); " is 124.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,DoNotThrowsWithSatoshiFormatAndNoOutputs,The length of the statement  "			var tx = Transaction.Parse("02000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0401700101ffffffff02" + " is 133.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,DoNotThrowsWithSatoshiFormatAndNoOutputs,The length of the statement  "				"00f2052a0100000023210295aefb5b15cd9204f18ceda653ebeaada10c69b6ef7f757450c5d66c0f0ebb8dac0000000000000000266a24aa21a9" + " is 120.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,ToPositive,The length of the statement  "			return new ECDSASignature(new BouncyCastle.Math.BigInteger(1' sig.R.ToByteArray())' new BouncyCastle.Math.BigInteger(1' sig.S.ToByteArray())); " is 142.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TestSigHashes,The length of the statement  "						foreach (var modification in new[] { HashModification.NoModification' HashModification.Modification' HashModification.Invalid }) " is 128.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TestSigHashes,The length of the statement  "								var index = txx.Inputs.Select((txin' i) => txin.PrevOut == signedCoin.Outpoint ? i : -1).Where(ii => ii != -1).FirstOrDefault(); " is 128.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TestSigHashes,The length of the statement  "							var sig = PayToPubkeyHashTemplate.Instance.ExtractScriptSigParameters(signedInput.WitScript == WitScript.Empty ? signedInput.ScriptSig : signedInput.WitScript.ToScript()).TransactionSignature; " is 192.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,tx_valid,The length of the statement  "					var txOut = new TxOut(mapprevOutScriptPubKeysAmount.TryGet(tx.Inputs[i].PrevOut)' mapprevOutScriptPubKeys[tx.Inputs[i].PrevOut]); " is 129.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,tx_invalid,The length of the statement  "					mapprevOutScriptPubKeys[new OutPoint(uint256.Parse(vinput[0].ToString())' int.Parse(vinput[1].ToString()))] = script_tests.ParseScript(vinput[2].ToString()); " is 157.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,tx_invalid,The length of the statement  "					var txOut = new TxOut(mapprevOutScriptPubKeysAmount.TryGet(tx.Inputs[i].PrevOut)' mapprevOutScriptPubKeys[tx.Inputs[i].PrevOut]); " is 129.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CheckWithFlag,The length of the statement  "			bool ret = ctx.VerifyScript(inputi.Inputs[0].ScriptSig' output.Outputs[0].ScriptPubKey' new TransactionChecker(inputi' 0' output.Outputs[0])); " is 142.
Long Statement,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,ShouldSendAllRemaining,The length of the statement  "			Assert.Equal(Money.Coins(1.0m) - fee - Money.Coins(0.1m)' tx.Outputs.First(o => o.ScriptPubKey == dest2.ScriptPubKey).Value); " is 125.
Long Statement,NBitcoin.Tests,BrokenCoinSelector,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,Select,The length of the statement  "							.Where(x => coinsToSpend.Any(y => y.ScriptPubKey == x.ScriptPubKey)))// Where the selected coins contains the same script. " is 122.
Long Statement,NBitcoin.Tests,uint256_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\uint256_tests.cs,uintTests,The length of the statement  "			Assert.Throws<FormatException>(() => uint256.Parse("1100000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff")); " is 122.
Long Statement,NBitcoin.Tests,uint256_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\uint256_tests.cs,uintTests,The length of the statement  "			Assert.Throws<FormatException>(() => uint256.Parse("100000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff")); " is 121.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_ParseHex,The length of the statement  "			var result = Encoders.Hex.DecodeData("04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0EA1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f"); " is 171.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_HexStr,The length of the statement  "	  "04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f"); " is 134.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanParseRootedKeyPath,The length of the statement  "			var root = new BitcoinExtKey("tprv8ZgxMBicQKsPdXCKLrSbPbmWWCmwZwU6x9pQKyafAP76SpYnPy9tEMbsTgJ3rPPqvu1ZkM5Xz6w7v9rhvrHYUuPfQu2vu9YNwAxseujuABx"' Network.RegTest); " is 161.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanCalculateGoestlcoinTransactionHash,The length of the statement  "			var bs = new BitcoinStream(Encoders.Hex.DecodeData("020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff03510101ffffffff0200002cd6e21500002321023035994e950a694cd81e0384abc1850cfe3e541a9de9706ca669d21c61548f8bac0000000000000000266a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf90120000000000000000000000000000000000000000000000000000000000000000000000000")); " is 418.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanUseSegwitAddress,The length of the statement  "			var address = (BitcoinWitPubKeyAddress)BitcoinAddress.Create("bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4"' Network.Main); " is 121.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanUseSegwitAddress,The length of the statement  "			Assert.Equal("bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4"' address.ScriptPubKey.GetDestinationAddress(address.Network).ToString()); " is 131.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanUseSegwitAddress,The length of the statement  "			Assert.Equal("tb1qw508d6qejxtdg4y5r3zarvary0c5xw7kxpjzsx"' address.ScriptPubKey.GetDestinationAddress(address.Network).ToNetwork(Network.TestNet).ToString()); " is 158.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanUseSegwitAddress,The length of the statement  "			address = (BitcoinWitPubKeyAddress)BitcoinAddress.Create("tb1qw508d6qejxtdg4y5r3zarvary0c5xw7kxpjzsx"' Network.TestNet); " is 120.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanUseSegwitAddress,The length of the statement  "			Assert.Equal("tb1qw508d6qejxtdg4y5r3zarvary0c5xw7kxpjzsx"' address.ScriptPubKey.GetDestinationAddress(address.Network).ToString()); " is 131.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanUseSegwitAddress,The length of the statement  "			Assert.Throws<FormatException>(() => BitcoinAddress.Create("tb1qw508d6qejxtdg4y5r3zarvary0c5xw7kxpjzsx"' Network.Main)); " is 120.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanUseSegwitAddress,The length of the statement  "			var addressScript = (BitcoinWitScriptAddress)BitcoinAddress.Create("bc1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3qccfmv3"' Network.Main); " is 147.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanUseSegwitAddress,The length of the statement  "			Assert.Equal("bc1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3qccfmv3"' addressScript.Hash.GetAddress(addressScript.Network).ToString()); " is 144.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanUseSegwitAddress,The length of the statement  "			Assert.Equal("bc1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3qccfmv3"' addressScript.ScriptPubKey.GetDestinationAddress(addressScript.Network).ToString()); " is 163.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanUseSegwitAddress,The length of the statement  "			pubkey = new PubKey("0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6"); " is 154.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanUseSegwitAddress,The length of the statement  "			Assert.Equal(new Script("OP_0 010966776006953D5567439E5E39F86A0D273BEE")' pubkey.GetSegwitAddress(Network.Main).ScriptPubKey); " is 126.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanUseSegwitAddress,The length of the statement  "			Assert.Throws<FormatException>(() => Network.Parse<IBase58Data>("bc1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3qccfmv3"' Network.Main)); " is 145.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanUseSegwitAddress,The length of the statement  "			Assert.Throws<Bech32FormatException>(() => Network.Parse<IBitcoinString>("bc1qrp33g0q5c3txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3qccfmv3"' Network.Main)); " is 154.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanUseSegwitAddress,The length of the statement  "			Assert.Throws<Bech32FormatException>(() => new BitcoinWitScriptAddress("bc1qrp33g0q5c3txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3qccfmv3"' Network.Main)); " is 152.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanUseSegwitAddress,The length of the statement  "			Assert.Throws<Bech32FormatException>(() => new BitcoinWitPubKeyAddress("bc1qw507d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4"' Network.Main)); " is 132.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanUseSegwitAddress,The length of the statement  "			var segwit2P2SH = extKey.ExtKey.AsHDScriptPubKey(ScriptPubKeyType.SegwitP2SH).ScriptPubKey.GetDestinationAddress(Network.Main); " is 127.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanUseSegwitAddress,The length of the statement  "			var legacy3 = extKey.Neuter().AsHDScriptPubKey(ScriptPubKeyType.Legacy).ScriptPubKey.GetDestinationAddress(Network.Main); " is 121.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,ScryptTest,The length of the statement  "			Assert.Equal("2331e1fe210127c9ac8fa95eb388e9dd072893890e2ee5646318ceb66089bbfe5ab45f762feeddf53d21c9a2cb183869247c9814f2bff1917fbea8239c548d1d" " is 143.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanReadConvertTargetToDifficulty,The length of the statement  "			Assert.True(uint256.Parse("0x0000000000000000729a4a7e084c90f932d038c407a6535a51dfecdfba1c8906 ") < new Target(419470732).ToUInt256()); " is 134.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanDecodeBTrashAddress,The length of the statement  "			BitcoinAddress trashAddress = bcash.Parse<NBitcoin.Altcoins.BCash.BTrashPubKeyAddress>("bitcoincash:qpm2qsznhks23z7629mms6s4cwef74vcwvy22gdx6a"); " is 145.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanDecodeBTrashAddress,The length of the statement  "			trashAddress = bcash.Parse<NBitcoin.Altcoins.BCash.BTrashScriptAddress>("bitcoincash:ppm2qsznhks23z7629mms6s4cwef74vcwvn0h829pq"); " is 130.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanParseRPCCredentialString,The length of the statement  "			Assert.Equal("wallet=abcd;server=toto:3030;abc:def"' RPCCredentialString.Parse("wallet=abcd;server=toto:3030;abc:def").ToString()); " is 131.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanECDH,The length of the statement  "					Pubkey = "04a5cf05bfe42daffaff4f1732f5868ed7c7919cba279fa7d940e6b02a8b059bde56be218077bcab1ad6b5f5dcb04c42534477fb8d21b6312b0063e08a8ae52b3e"' " is 142.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanECDH,The length of the statement  "					Pubkey = "043f12235bcf2776c8489ed138d4c9b85a1e29f3f4ad2787b9c8588e960867afc9de1e5702caa787665f5d0a4b04015c8bd5f1541e3d170efc3668f6ac587d43bc"' " is 142.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanECDH,The length of the statement  "					Pubkey = "04769c29328998917d9f2f7c6ce46f2f12a6064e937dff722b4811e9c88b4e1d45387fea132321541e8dbdc92384aef1944d650aa889bfa836db078897e5299262"' " is 142.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanEncryptAndDecryptMessages,The length of the statement  "			var text = key.Decrypt("QklFMQORN+6df13s/J7dSUIIK2Y9i9/MmHXwP3jA1daFwWjR+fRWP6qnW3+MZF+d6J8wOWDzrftx4O52fs4yplCyFL3gi+pSGE7YsngXHz/bLiulpQ=="); " is 143.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanGenerateScriptFromAddress,The length of the statement  "			Assert.Equal("OP_DUP OP_HASH160 47376c6f537d62177a2c41c4ca9b45829ab99083 OP_EQUALVERIFY OP_CHECKSIG"' address.ScriptPubKey.ToString()); " is 135.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanGenerateScriptFromAddress,The length of the statement  "			Assert.Equal("OP_DUP OP_HASH160 4d29186f76581c7375d70499afd1d585149d42cd OP_EQUALVERIFY OP_CHECKSIG"' pubKey.Hash.ScriptPubKey.ToString()); " is 139.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanGenerateScriptFromAddress,The length of the statement  "			Assert.Equal("0359d3092e4a8d5f3b3948235b5dec7395259273ccf3c4e9d5e16695a3fc9588d6 OP_CHECKSIG"' pubKey.ScriptPubKey.ToString()); " is 127.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanDetectBase58WithoutAmbiguity,The length of the statement  "			var str = Serializer.ToString(new DummyClass() { ExtPubKey = new ExtKey().Neuter().GetWif(Network.RegTest) }' Network.RegTest); " is 127.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanDetectBase58NetworkAndType,The length of the statement  "						Base58 = "xprv9s21ZrQH143K3Gx1VAAD1ueDmwoPQUApekxWYSJ1f4W4m1nUPpRGdV5sTVhixZJT5cP2NqtEMZ2mrwHdW5RWpohCwspWidCpcLALvioXDyz"' " is 123.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanDetectBase58NetworkAndType,The length of the statement  "						Base58 = "xpub661MyMwAqRbcEhHavVcryjNF2uA5woK6JCNRNJB8Z3dxPU8VNBd9E8GP7fusw2bhgYe7BXt6izr5iUaYo483919jjdtfEpG8j97djnEgJqo"' " is 123.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanConvertToUnixTime,The length of the statement  "			Assert.Throws<ArgumentOutOfRangeException>(() => Utils.DateTimeToUnixTime(Utils.UnixTimeToDateTime(uint.MaxValue) + TimeSpan.FromSeconds(1))); " is 142.
Long Statement,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanConvertToUnixTime,The length of the statement  "			Assert.Throws<ArgumentOutOfRangeException>(() => Utils.DateTimeToUnixTime(Utils.UnixTimeToDateTime(0) - TimeSpan.FromSeconds(1))); " is 130.
Empty Catch Block,NBitcoin.Tests,AltcoinTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AltcoinTests.cs,DoesRPCCapabilitiesWellAdvertised,The method has an empty catch block.
Empty Catch Block,NBitcoin.Tests,AltcoinTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AltcoinTests.cs,CheckCapabilities,The method has an empty catch block.
Empty Catch Block,NBitcoin.Tests,Bech32Test,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bech32Test.cs,DetectInvalidChecksum,The method has an empty catch block.
Empty Catch Block,NBitcoin.Tests,Bech32Test,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bech32Test.cs,InvalidAddress,The method has an empty catch block.
Empty Catch Block,NBitcoin.Tests,Bech32Test,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bech32Test.cs,InvalidAddress,The method has an empty catch block.
Empty Catch Block,NBitcoin.Tests,bip39_Codegen,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip39_tests.cs,GenerateHardcodedNormalization,The method has an empty catch block.
Empty Catch Block,NBitcoin.Tests,ConverterTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ConverterTests.cs,CanConvertText,The method has an empty catch block.
Empty Catch Block,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,MaxConnectionLimit,The method has an empty catch block.
Empty Catch Block,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanCancelConnection,The method has an empty catch block.
Empty Catch Block,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,EnsureHasLibConsensus,The method has an empty catch block.
Empty Catch Block,NBitcoin.Tests,TestUtils,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\TestUtils.cs,EnsureNew,The method has an empty catch block.
Magic Number,NBitcoin.Tests,addrman_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\addrman_tests.cs,CanUseAddrManager,The following statement contains a magic number: var localhost = new NetworkAddress(IPAddress.Parse("127.0.0.1")' 8333);
Magic Number,NBitcoin.Tests,addrman_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\addrman_tests.cs,CanUseAddrManager,The following statement contains a magic number: Assert.False(addr.Ago < TimeSpan.FromSeconds(10.0));
Magic Number,NBitcoin.Tests,addrman_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\addrman_tests.cs,CanStressAddrManager,The following statement contains a magic number: address.Ago = TimeSpan.FromMinutes(5.0);
Magic Number,NBitcoin.Tests,addrman_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\addrman_tests.cs,CanStressAddrManager,The following statement contains a magic number: i < 30
Magic Number,NBitcoin.Tests,addrman_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\addrman_tests.cs,CanStressAddrManager,The following statement contains a magic number: var threads =  				Enumerable  				.Range(0' 20)  				.Select(t => new Thread(() =>  				{  					try  					{  						Random rand = new Random(t);  						for (int i = 0; i < 50; i++)  						{  							NetworkAddress address = RandomNetworkAddress(rand);  							IPAddress addressSource = RandomAddress(rand);  							var operation = rand.Next(0' 7);  							switch (operation)  							{  								case 0:  									addrmanager.Attempt(address);  									break;  								case 1:  									addrmanager.Add(address' addressSource);  									break;  								case 2:  									addrmanager.Select();  									break;  								case 3:  									addrmanager.GetAddr();  									break;  								case 4:  									{  										var several = addrmanager.GetAddr();  										addrmanager.Good(several.Length == 0 ? address : several[0]);  									}  									break;    								case 5:  									addrmanager.Connected(address);  									break;  								case 6:  									addrmanager.ToBytes();  									break;  								default:  									throw new NotSupportedException();  							}  						}  					}  					catch (Exception ex)  					{  						exception = ex;  						throw;  					}  				})).ToArray();
Magic Number,NBitcoin.Tests,addrman_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\addrman_tests.cs,CanStressAddrManager,The following statement contains a magic number: var threads =  				Enumerable  				.Range(0' 20)  				.Select(t => new Thread(() =>  				{  					try  					{  						Random rand = new Random(t);  						for (int i = 0; i < 50; i++)  						{  							NetworkAddress address = RandomNetworkAddress(rand);  							IPAddress addressSource = RandomAddress(rand);  							var operation = rand.Next(0' 7);  							switch (operation)  							{  								case 0:  									addrmanager.Attempt(address);  									break;  								case 1:  									addrmanager.Add(address' addressSource);  									break;  								case 2:  									addrmanager.Select();  									break;  								case 3:  									addrmanager.GetAddr();  									break;  								case 4:  									{  										var several = addrmanager.GetAddr();  										addrmanager.Good(several.Length == 0 ? address : several[0]);  									}  									break;    								case 5:  									addrmanager.Connected(address);  									break;  								case 6:  									addrmanager.ToBytes();  									break;  								default:  									throw new NotSupportedException();  							}  						}  					}  					catch (Exception ex)  					{  						exception = ex;  						throw;  					}  				})).ToArray();
Magic Number,NBitcoin.Tests,addrman_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\addrman_tests.cs,CanStressAddrManager,The following statement contains a magic number: var threads =  				Enumerable  				.Range(0' 20)  				.Select(t => new Thread(() =>  				{  					try  					{  						Random rand = new Random(t);  						for (int i = 0; i < 50; i++)  						{  							NetworkAddress address = RandomNetworkAddress(rand);  							IPAddress addressSource = RandomAddress(rand);  							var operation = rand.Next(0' 7);  							switch (operation)  							{  								case 0:  									addrmanager.Attempt(address);  									break;  								case 1:  									addrmanager.Add(address' addressSource);  									break;  								case 2:  									addrmanager.Select();  									break;  								case 3:  									addrmanager.GetAddr();  									break;  								case 4:  									{  										var several = addrmanager.GetAddr();  										addrmanager.Good(several.Length == 0 ? address : several[0]);  									}  									break;    								case 5:  									addrmanager.Connected(address);  									break;  								case 6:  									addrmanager.ToBytes();  									break;  								default:  									throw new NotSupportedException();  							}  						}  					}  					catch (Exception ex)  					{  						exception = ex;  						throw;  					}  				})).ToArray();
Magic Number,NBitcoin.Tests,addrman_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\addrman_tests.cs,CanStressAddrManager,The following statement contains a magic number: var threads =  				Enumerable  				.Range(0' 20)  				.Select(t => new Thread(() =>  				{  					try  					{  						Random rand = new Random(t);  						for (int i = 0; i < 50; i++)  						{  							NetworkAddress address = RandomNetworkAddress(rand);  							IPAddress addressSource = RandomAddress(rand);  							var operation = rand.Next(0' 7);  							switch (operation)  							{  								case 0:  									addrmanager.Attempt(address);  									break;  								case 1:  									addrmanager.Add(address' addressSource);  									break;  								case 2:  									addrmanager.Select();  									break;  								case 3:  									addrmanager.GetAddr();  									break;  								case 4:  									{  										var several = addrmanager.GetAddr();  										addrmanager.Good(several.Length == 0 ? address : several[0]);  									}  									break;    								case 5:  									addrmanager.Connected(address);  									break;  								case 6:  									addrmanager.ToBytes();  									break;  								default:  									throw new NotSupportedException();  							}  						}  					}  					catch (Exception ex)  					{  						exception = ex;  						throw;  					}  				})).ToArray();
Magic Number,NBitcoin.Tests,addrman_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\addrman_tests.cs,CanStressAddrManager,The following statement contains a magic number: var threads =  				Enumerable  				.Range(0' 20)  				.Select(t => new Thread(() =>  				{  					try  					{  						Random rand = new Random(t);  						for (int i = 0; i < 50; i++)  						{  							NetworkAddress address = RandomNetworkAddress(rand);  							IPAddress addressSource = RandomAddress(rand);  							var operation = rand.Next(0' 7);  							switch (operation)  							{  								case 0:  									addrmanager.Attempt(address);  									break;  								case 1:  									addrmanager.Add(address' addressSource);  									break;  								case 2:  									addrmanager.Select();  									break;  								case 3:  									addrmanager.GetAddr();  									break;  								case 4:  									{  										var several = addrmanager.GetAddr();  										addrmanager.Good(several.Length == 0 ? address : several[0]);  									}  									break;    								case 5:  									addrmanager.Connected(address);  									break;  								case 6:  									addrmanager.ToBytes();  									break;  								default:  									throw new NotSupportedException();  							}  						}  					}  					catch (Exception ex)  					{  						exception = ex;  						throw;  					}  				})).ToArray();
Magic Number,NBitcoin.Tests,addrman_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\addrman_tests.cs,CanStressAddrManager,The following statement contains a magic number: var threads =  				Enumerable  				.Range(0' 20)  				.Select(t => new Thread(() =>  				{  					try  					{  						Random rand = new Random(t);  						for (int i = 0; i < 50; i++)  						{  							NetworkAddress address = RandomNetworkAddress(rand);  							IPAddress addressSource = RandomAddress(rand);  							var operation = rand.Next(0' 7);  							switch (operation)  							{  								case 0:  									addrmanager.Attempt(address);  									break;  								case 1:  									addrmanager.Add(address' addressSource);  									break;  								case 2:  									addrmanager.Select();  									break;  								case 3:  									addrmanager.GetAddr();  									break;  								case 4:  									{  										var several = addrmanager.GetAddr();  										addrmanager.Good(several.Length == 0 ? address : several[0]);  									}  									break;    								case 5:  									addrmanager.Connected(address);  									break;  								case 6:  									addrmanager.ToBytes();  									break;  								default:  									throw new NotSupportedException();  							}  						}  					}  					catch (Exception ex)  					{  						exception = ex;  						throw;  					}  				})).ToArray();
Magic Number,NBitcoin.Tests,addrman_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\addrman_tests.cs,CanStressAddrManager,The following statement contains a magic number: var threads =  				Enumerable  				.Range(0' 20)  				.Select(t => new Thread(() =>  				{  					try  					{  						Random rand = new Random(t);  						for (int i = 0; i < 50; i++)  						{  							NetworkAddress address = RandomNetworkAddress(rand);  							IPAddress addressSource = RandomAddress(rand);  							var operation = rand.Next(0' 7);  							switch (operation)  							{  								case 0:  									addrmanager.Attempt(address);  									break;  								case 1:  									addrmanager.Add(address' addressSource);  									break;  								case 2:  									addrmanager.Select();  									break;  								case 3:  									addrmanager.GetAddr();  									break;  								case 4:  									{  										var several = addrmanager.GetAddr();  										addrmanager.Good(several.Length == 0 ? address : several[0]);  									}  									break;    								case 5:  									addrmanager.Connected(address);  									break;  								case 6:  									addrmanager.ToBytes();  									break;  								default:  									throw new NotSupportedException();  							}  						}  					}  					catch (Exception ex)  					{  						exception = ex;  						throw;  					}  				})).ToArray();
Magic Number,NBitcoin.Tests,addrman_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\addrman_tests.cs,CanStressAddrManager,The following statement contains a magic number: var threads =  				Enumerable  				.Range(0' 20)  				.Select(t => new Thread(() =>  				{  					try  					{  						Random rand = new Random(t);  						for (int i = 0; i < 50; i++)  						{  							NetworkAddress address = RandomNetworkAddress(rand);  							IPAddress addressSource = RandomAddress(rand);  							var operation = rand.Next(0' 7);  							switch (operation)  							{  								case 0:  									addrmanager.Attempt(address);  									break;  								case 1:  									addrmanager.Add(address' addressSource);  									break;  								case 2:  									addrmanager.Select();  									break;  								case 3:  									addrmanager.GetAddr();  									break;  								case 4:  									{  										var several = addrmanager.GetAddr();  										addrmanager.Good(several.Length == 0 ? address : several[0]);  									}  									break;    								case 5:  									addrmanager.Connected(address);  									break;  								case 6:  									addrmanager.ToBytes();  									break;  								default:  									throw new NotSupportedException();  							}  						}  					}  					catch (Exception ex)  					{  						exception = ex;  						throw;  					}  				})).ToArray();
Magic Number,NBitcoin.Tests,addrman_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\addrman_tests.cs,RandomAddress,The following statement contains a magic number: rand.Next(0' 100) == 0
Magic Number,NBitcoin.Tests,addrman_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\addrman_tests.cs,RandomAddress,The following statement contains a magic number: var count = rand.Next(0' 2) % 2 == 0 ? 4 : 16;
Magic Number,NBitcoin.Tests,addrman_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\addrman_tests.cs,RandomAddress,The following statement contains a magic number: var count = rand.Next(0' 2) % 2 == 0 ? 4 : 16;
Magic Number,NBitcoin.Tests,addrman_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\addrman_tests.cs,RandomAddress,The following statement contains a magic number: var count = rand.Next(0' 2) % 2 == 0 ? 4 : 16;
Magic Number,NBitcoin.Tests,addrman_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\addrman_tests.cs,RandomAddress,The following statement contains a magic number: var count = rand.Next(0' 2) % 2 == 0 ? 4 : 16;
Magic Number,NBitcoin.Tests,AltcoinTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AltcoinTests.cs,CanCalculateTransactionHash,The following statement contains a magic number: var blockHash = (await rpc.GenerateAsync(10))[0];
Magic Number,NBitcoin.Tests,AltcoinTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AltcoinTests.cs,CanParseBlock,The following statement contains a magic number: await rpc.GenerateAsync(10);
Magic Number,NBitcoin.Tests,AltcoinTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AltcoinTests.cs,CanSignTransactions,The following statement contains a magic number: txbuilder.Send(new Key().ScriptPubKey' Money.Coins(0.4m));
Magic Number,NBitcoin.Tests,AltcoinTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AltcoinTests.cs,CanSignTransactions,The following statement contains a magic number: txbuilder.SendFees(Money.Coins(0.001m));
Magic Number,NBitcoin.Tests,AltcoinTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AltcoinTests.cs,CanSignTransactions,The following statement contains a magic number: txbuilder = builder.Network.CreateTransactionBuilder() 								.AddCoins(new[] { coin.ToScriptCoin(alice.PubKey.ScriptPubKey)' coin2.ToScriptCoin(alice.PubKey.ScriptPubKey) }) 								.AddKeys(alice) 								.SendAll(new Key().ScriptPubKey) 								.SendFees(Money.Coins(0.00001m)) 								.SubtractFees() 								.SetChange(aliceAddress);
Magic Number,NBitcoin.Tests,AltcoinTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AltcoinTests.cs,CanSyncWithPoW,The following statement contains a magic number: node.Generate(100);
Magic Number,NBitcoin.Tests,AltcoinTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AltcoinTests.cs,CanSyncWithPoW,The following statement contains a magic number: Assert.Equal(100' chain.Height);
Magic Number,NBitcoin.Tests,AltcoinTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AltcoinTests.cs,CorrectCoinMaturity,The following statement contains a magic number: Assert.Contains((await rpc.GetBalancesAsync())' 						pair => pair.Value == Money.FromUnit(2100000' MoneyUnit.BTC));
Magic Number,NBitcoin.Tests,AltcoinTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AltcoinTests.cs,CorrectCoinMaturity,The following statement contains a magic number: Assert.Contains((await rpc.GetBalancesAsync())' 						pair => pair.Value == Money.FromUnit(2100000' MoneyUnit.BTC));
Magic Number,NBitcoin.Tests,AltcoinTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AltcoinTests.cs,CanSyncWithoutPoW,The following statement contains a magic number: node.Generate(100);
Magic Number,NBitcoin.Tests,AltcoinTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AltcoinTests.cs,CanSyncWithoutPoW,The following statement contains a magic number: Assert.Equal(100' chain.Height);
Magic Number,NBitcoin.Tests,AltcoinTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AltcoinTests.cs,CanSyncWithoutPoW,The following statement contains a magic number: var b = node.CreateRPCClient().GetBlock(50);
Magic Number,NBitcoin.Tests,AltcoinTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AltcoinTests.cs,CanSyncWithoutPoW,The following statement contains a magic number: Assert.Equal(b.WithOptions(TransactionOptions.Witness).Header.GetType()' chain.GetBlock(50).Header.GetType());
Magic Number,NBitcoin.Tests,AltcoinTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AltcoinTests.cs,CanSyncWithoutPoW,The following statement contains a magic number: var b2 = nodeClient.GetBlocks(new Protocol.SynchronizeChainOptions() { SkipPoWCheck = true }).ToArray()[50];
Magic Number,NBitcoin.Tests,AltcoinTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AltcoinTests.cs,CanSyncWithoutPoW,The following statement contains a magic number: Assert.Equal(b2.Header.GetType()' chain.GetBlock(50).Header.GetType());
Magic Number,NBitcoin.Tests,AssetMoneyTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AssetMoneyTests.cs,AssetMoneyMultiply,The following statement contains a magic number: OpenAsset.AssetMoney assetMoney = new OpenAsset.AssetMoney(assetId' 2);
Magic Number,NBitcoin.Tests,AssetMoneyTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AssetMoneyTests.cs,AssetMoneyMultiply,The following statement contains a magic number: OpenAsset.AssetMoney actual = assetMoney * 2;
Magic Number,NBitcoin.Tests,AssetMoneyTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AssetMoneyTests.cs,AssetMoneyMultiply,The following statement contains a magic number: Assert.Equal(4' actual.Quantity);
Magic Number,NBitcoin.Tests,AssetMoneyTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AssetMoneyTests.cs,AssetMoneyMultiply,The following statement contains a magic number: actual = 2 * assetMoney;
Magic Number,NBitcoin.Tests,AssetMoneyTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AssetMoneyTests.cs,AssetMoneyMultiply,The following statement contains a magic number: Assert.Equal(4' actual.Quantity);
Magic Number,NBitcoin.Tests,AssetMoneyTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AssetMoneyTests.cs,AssetMoneyGreaterThan,The following statement contains a magic number: OpenAsset.AssetMoney smallAssetMoney = new OpenAsset.AssetMoney(assetId' 2);
Magic Number,NBitcoin.Tests,AssetMoneyTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AssetMoneyTests.cs,AssetMoneyGreaterThan,The following statement contains a magic number: OpenAsset.AssetMoney largeAssetMoney = new OpenAsset.AssetMoney(assetId' 5);
Magic Number,NBitcoin.Tests,AssetMoneyTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AssetMoneyTests.cs,AssetMoneyLessThan,The following statement contains a magic number: OpenAsset.AssetMoney smallAssetMoney = new OpenAsset.AssetMoney(assetId' 2);
Magic Number,NBitcoin.Tests,AssetMoneyTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\AssetMoneyTests.cs,AssetMoneyLessThan,The following statement contains a magic number: OpenAsset.AssetMoney largeAssetMoney = new OpenAsset.AssetMoney(assetId' 5);
Magic Number,NBitcoin.Tests,base58_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\base58_tests.cs,base58_keys_valid_parse,The following statement contains a magic number: test.Count < 3
Magic Number,NBitcoin.Tests,base58_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\base58_tests.cs,base58_keys_valid_parse,The following statement contains a magic number: bool isPrivkey = (bool)test.GetDynamic(2).isPrivkey;
Magic Number,NBitcoin.Tests,base58_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\base58_tests.cs,base58_keys_valid_parse,The following statement contains a magic number: bool isTestnet = (bool)test.GetDynamic(2).isTestnet;
Magic Number,NBitcoin.Tests,base58_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\base58_tests.cs,base58_keys_valid_parse,The following statement contains a magic number: bool isCompressed = (bool)test.GetDynamic(2).isCompressed;
Magic Number,NBitcoin.Tests,base58_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\base58_tests.cs,base58_keys_valid_gen,The following statement contains a magic number: test.Count < 3
Magic Number,NBitcoin.Tests,base58_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\base58_tests.cs,base58_keys_valid_gen,The following statement contains a magic number: dynamic metadata = test.GetDynamic(2);
Magic Number,NBitcoin.Tests,Bech32Test,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bech32Test.cs,CanDetectError,The following statement contains a magic number: Assert.Equal(8' ex.ErrorIndexes[0]);
Magic Number,NBitcoin.Tests,Bech32Test,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bech32Test.cs,CanDetectError,The following statement contains a magic number: Assert.Equal(2' ex.ErrorIndexes.Length);
Magic Number,NBitcoin.Tests,Bech32Test,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bech32Test.cs,CanDetectError,The following statement contains a magic number: Assert.Equal(8' ex.ErrorIndexes[0]);
Magic Number,NBitcoin.Tests,Bech32Test,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bech32Test.cs,CanDetectError,The following statement contains a magic number: Assert.Equal(12' ex.ErrorIndexes[1]);
Magic Number,NBitcoin.Tests,Bech32Test,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bech32Test.cs,ValidateValidChecksum,The following statement contains a magic number: var test2 = test.Substring(0' pos + 1) + ((test[pos + 1]) ^ 1) + test.Substring(pos + 2);
Magic Number,NBitcoin.Tests,Bech32Test,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bech32Test.cs,DetectInvalidChecksum,The following statement contains a magic number: var test2 = test.Substring(0' pos + 1) + ((test[pos + 1]) ^ 1) + test.Substring(pos + 2);
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,EmptyFilterMatchFalseTest,The following statement contains a magic number: var randomEntries = new [] { RandomUtils.GetBytes(20) };
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,EmptyFilterMatchFalseTest,The following statement contains a magic number: var fakeFilterKey = RandomUtils.GetBytes(16);
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleDuplicatedValuesTest,The following statement contains a magic number: var byteArray0 = new byte[] { 1' 2' 3' 4 };
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleDuplicatedValuesTest,The following statement contains a magic number: var byteArray0 = new byte[] { 1' 2' 3' 4 };
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleDuplicatedValuesTest,The following statement contains a magic number: var byteArray0 = new byte[] { 1' 2' 3' 4 };
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleDuplicatedValuesTest,The following statement contains a magic number: var byteArray1 = new byte[] { 1' 2' 3' 4 };
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleDuplicatedValuesTest,The following statement contains a magic number: var byteArray1 = new byte[] { 1' 2' 3' 4 };
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleDuplicatedValuesTest,The following statement contains a magic number: var byteArray1 = new byte[] { 1' 2' 3' 4 };
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleDuplicatedValuesTest,The following statement contains a magic number: var byteArray2 = new byte[] { 1' 2' 3' 4 };
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleDuplicatedValuesTest,The following statement contains a magic number: var byteArray2 = new byte[] { 1' 2' 3' 4 };
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleDuplicatedValuesTest,The following statement contains a magic number: var byteArray2 = new byte[] { 1' 2' 3' 4 };
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleDuplicatedValuesTest,The following statement contains a magic number: var filter = new GolombRiceFilterBuilder() 				.SetKey(Hashes.Hash256(new byte[] { 99' 99' 99' 99 })) 				.AddEntries(new[] { byteArray0' byteArray1' byteArray2 }) 				.AddScriptPubkey(Script.FromBytesUnsafe(byteArray0)) 				.AddScriptPubkey(Script.FromBytesUnsafe(byteArray1)) 				.AddScriptPubkey(Script.FromBytesUnsafe(byteArray2)) 				.Build();
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleDuplicatedValuesTest,The following statement contains a magic number: var filter = new GolombRiceFilterBuilder() 				.SetKey(Hashes.Hash256(new byte[] { 99' 99' 99' 99 })) 				.AddEntries(new[] { byteArray0' byteArray1' byteArray2 }) 				.AddScriptPubkey(Script.FromBytesUnsafe(byteArray0)) 				.AddScriptPubkey(Script.FromBytesUnsafe(byteArray1)) 				.AddScriptPubkey(Script.FromBytesUnsafe(byteArray2)) 				.Build();
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleDuplicatedValuesTest,The following statement contains a magic number: var filter = new GolombRiceFilterBuilder() 				.SetKey(Hashes.Hash256(new byte[] { 99' 99' 99' 99 })) 				.AddEntries(new[] { byteArray0' byteArray1' byteArray2 }) 				.AddScriptPubkey(Script.FromBytesUnsafe(byteArray0)) 				.AddScriptPubkey(Script.FromBytesUnsafe(byteArray1)) 				.AddScriptPubkey(Script.FromBytesUnsafe(byteArray2)) 				.Build();
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleDuplicatedValuesTest,The following statement contains a magic number: var filter = new GolombRiceFilterBuilder() 				.SetKey(Hashes.Hash256(new byte[] { 99' 99' 99' 99 })) 				.AddEntries(new[] { byteArray0' byteArray1' byteArray2 }) 				.AddScriptPubkey(Script.FromBytesUnsafe(byteArray0)) 				.AddScriptPubkey(Script.FromBytesUnsafe(byteArray1)) 				.AddScriptPubkey(Script.FromBytesUnsafe(byteArray2)) 				.Build();
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,BuildFilterAndMatchValues,The following statement contains a magic number: var key = Hashes.Hash256(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15 });
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,BuildFilterAndMatchValues,The following statement contains a magic number: var key = Hashes.Hash256(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15 });
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,BuildFilterAndMatchValues,The following statement contains a magic number: var key = Hashes.Hash256(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15 });
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,BuildFilterAndMatchValues,The following statement contains a magic number: var key = Hashes.Hash256(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15 });
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,BuildFilterAndMatchValues,The following statement contains a magic number: var key = Hashes.Hash256(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15 });
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,BuildFilterAndMatchValues,The following statement contains a magic number: var key = Hashes.Hash256(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15 });
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,BuildFilterAndMatchValues,The following statement contains a magic number: var key = Hashes.Hash256(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15 });
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,BuildFilterAndMatchValues,The following statement contains a magic number: var key = Hashes.Hash256(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15 });
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,BuildFilterAndMatchValues,The following statement contains a magic number: var key = Hashes.Hash256(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15 });
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,BuildFilterAndMatchValues,The following statement contains a magic number: var key = Hashes.Hash256(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15 });
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,BuildFilterAndMatchValues,The following statement contains a magic number: var key = Hashes.Hash256(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15 });
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,BuildFilterAndMatchValues,The following statement contains a magic number: var key = Hashes.Hash256(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15 });
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,BuildFilterAndMatchValues,The following statement contains a magic number: var key = Hashes.Hash256(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15 });
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,BuildFilterAndMatchValues,The following statement contains a magic number: var key = Hashes.Hash256(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15 });
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,BuildFilterAndMatchValues,The following statement contains a magic number: var testKey = key.ToBytes().SafeSubarray(0' 16);
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,FalsePositivesTest,The following statement contains a magic number: const byte P = 20;
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,FalsePositivesTest,The following statement contains a magic number: const int blockCount = 100;
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,FalsePositivesTest,The following statement contains a magic number: const int avgTxSize = 250;
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,FalsePositivesTest,The following statement contains a magic number: const int avgTxoutPushDataSize = 20;
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,FalsePositivesTest,The following statement contains a magic number: var key = Hashes.Hash256(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15 });
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,FalsePositivesTest,The following statement contains a magic number: var key = Hashes.Hash256(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15 });
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,FalsePositivesTest,The following statement contains a magic number: var key = Hashes.Hash256(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15 });
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,FalsePositivesTest,The following statement contains a magic number: var key = Hashes.Hash256(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15 });
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,FalsePositivesTest,The following statement contains a magic number: var key = Hashes.Hash256(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15 });
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,FalsePositivesTest,The following statement contains a magic number: var key = Hashes.Hash256(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15 });
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,FalsePositivesTest,The following statement contains a magic number: var key = Hashes.Hash256(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15 });
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,FalsePositivesTest,The following statement contains a magic number: var key = Hashes.Hash256(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15 });
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,FalsePositivesTest,The following statement contains a magic number: var key = Hashes.Hash256(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15 });
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,FalsePositivesTest,The following statement contains a magic number: var key = Hashes.Hash256(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15 });
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,FalsePositivesTest,The following statement contains a magic number: var key = Hashes.Hash256(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15 });
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,FalsePositivesTest,The following statement contains a magic number: var key = Hashes.Hash256(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15 });
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,FalsePositivesTest,The following statement contains a magic number: var key = Hashes.Hash256(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15 });
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,FalsePositivesTest,The following statement contains a magic number: var key = Hashes.Hash256(new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15 });
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,FalsePositivesTest,The following statement contains a magic number: var testKey = key.ToBytes().SafeSubarray(0' 16);
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,FalsePositivesTest,The following statement contains a magic number: Assert.True(falsePositiveCount <= 2);
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: var byteArray0 = new byte[] { 1' 2' 3' 4 };
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: var byteArray0 = new byte[] { 1' 2' 3' 4 };
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: var byteArray0 = new byte[] { 1' 2' 3' 4 };
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: var byteArray1 = new byte[] { 2' 3' 4 };
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: var byteArray1 = new byte[] { 2' 3' 4 };
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: var byteArray1 = new byte[] { 2' 3' 4 };
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: var byteArray2 = new byte[] { 3' 4 };
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: var byteArray2 = new byte[] { 3' 4 };
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: var key = Hashes.Hash256(new byte[] { 99' 99' 99' 99 });
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: var key = Hashes.Hash256(new byte[] { 99' 99' 99' 99 });
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: var key = Hashes.Hash256(new byte[] { 99' 99' 99' 99 });
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: var key = Hashes.Hash256(new byte[] { 99' 99' 99' 99 });
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: var testKey = key.ToBytes().SafeSubarray(0' 16);
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: var filter = new GolombRiceFilterBuilder() 				.SetKey(key) 				.SetP(10) 				.SetM(1U << 10) 				.AddEntries(new[] { byteArray0' byteArray1' byteArray2 }) 				.AddScriptPubkey(Script.FromBytesUnsafe(byteArray0)) 				.AddScriptPubkey(Script.FromBytesUnsafe(byteArray1)) 				.AddScriptPubkey(Script.FromBytesUnsafe(byteArray2)) 				.Build();
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: var filter = new GolombRiceFilterBuilder() 				.SetKey(key) 				.SetP(10) 				.SetM(1U << 10) 				.AddEntries(new[] { byteArray0' byteArray1' byteArray2 }) 				.AddScriptPubkey(Script.FromBytesUnsafe(byteArray0)) 				.AddScriptPubkey(Script.FromBytesUnsafe(byteArray1)) 				.AddScriptPubkey(Script.FromBytesUnsafe(byteArray2)) 				.Build();
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: Assert.Equal(3' filter.N);
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: Assert.Equal(10' filter.P);
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: Assert.Equal(1U << 10' filter.M);
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: Assert.False(filter.Match(new byte[] { 6' 7' 8 }' testKey));
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: Assert.False(filter.Match(new byte[] { 6' 7' 8 }' testKey));
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: Assert.False(filter.Match(new byte[] { 6' 7' 8 }' testKey));
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: filter = new GolombRiceFilterBuilder() 				.SetKey(key) 				.SetP(10) 				.SetM(1U << 4) 				.AddEntries(new[] { byteArray0' byteArray1' byteArray2 }) 				.AddScriptPubkey(Script.FromBytesUnsafe(byteArray0)) 				.AddScriptPubkey(Script.FromBytesUnsafe(byteArray1)) 				.AddScriptPubkey(Script.FromBytesUnsafe(byteArray2)) 				.Build();
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: filter = new GolombRiceFilterBuilder() 				.SetKey(key) 				.SetP(10) 				.SetM(1U << 4) 				.AddEntries(new[] { byteArray0' byteArray1' byteArray2 }) 				.AddScriptPubkey(Script.FromBytesUnsafe(byteArray0)) 				.AddScriptPubkey(Script.FromBytesUnsafe(byteArray1)) 				.AddScriptPubkey(Script.FromBytesUnsafe(byteArray2)) 				.Build();
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: Assert.Equal(3' filter.N);
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: Assert.Equal(10' filter.P);
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: Assert.Equal(1U << 4' filter.M);
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: Assert.False(filter.Match(new byte[] { 6' 7' 8 }' testKey));
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: Assert.False(filter.Match(new byte[] { 6' 7' 8 }' testKey));
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: Assert.False(filter.Match(new byte[] { 6' 7' 8 }' testKey));
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: filter = new GolombRiceFilterBuilder() 				.SetKey(key) 				.SetP(8) 				.SetM(1U << 4) 				.AddEntries(new[] { byteArray0' byteArray1' byteArray2 }) 				.AddScriptPubkey(Script.FromBytesUnsafe(byteArray0)) 				.AddScriptPubkey(Script.FromBytesUnsafe(byteArray1)) 				.AddScriptPubkey(Script.FromBytesUnsafe(byteArray2)) 				.Build();
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: filter = new GolombRiceFilterBuilder() 				.SetKey(key) 				.SetP(8) 				.SetM(1U << 4) 				.AddEntries(new[] { byteArray0' byteArray1' byteArray2 }) 				.AddScriptPubkey(Script.FromBytesUnsafe(byteArray0)) 				.AddScriptPubkey(Script.FromBytesUnsafe(byteArray1)) 				.AddScriptPubkey(Script.FromBytesUnsafe(byteArray2)) 				.Build();
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: Assert.Equal(3' filter.N);
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: Assert.Equal(8' filter.P);
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: Assert.Equal(1U << 4' filter.M);
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: Assert.False(filter.Match(new byte[] { 6' 7' 8 }' testKey));
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: Assert.False(filter.Match(new byte[] { 6' 7' 8 }' testKey));
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanHandleCustomPandMValuesTest,The following statement contains a magic number: Assert.False(filter.Match(new byte[] { 6' 7' 8 }' testKey));
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanSupportCustomeFiltersTest,The following statement contains a magic number: var testkey = key.ToBytes().SafeSubarray(0' 16);
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanSupportCustomeFiltersTest,The following statement contains a magic number: var filter = new GolombRiceFilterBuilder() 				.SetP(20) 				.SetM(1U << 20) 				.SetKey(key) 				.AddEntries(scripts.Select(x => x.ToCompressedBytes())) 				.Build();
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,CanSupportCustomeFiltersTest,The following statement contains a magic number: var filter = new GolombRiceFilterBuilder() 				.SetP(20) 				.SetM(1U << 20) 				.SetKey(key) 				.AddEntries(scripts.Select(x => x.ToCompressedBytes())) 				.Build();
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,WriteAndReadBitStreamTest,The following statement contains a magic number: bs.TryReadBits(17' out var bits);
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,WriteAndReadBitStreamTest,The following statement contains a magic number: Assert.Equal(46539U' bits);
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,WriteAndReadBitStreamTest,The following statement contains a magic number: Assert.Equal(90' b);
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,WriteAndReadBitStreamTest,The following statement contains a magic number: Assert.Equal(229' b);
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,WriteAndReadBitStreamTest,The following statement contains a magic number: Assert.Equal(181' b);
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,WriteAndReadBitStreamTest,The following statement contains a magic number: Assert.Equal(203' b);
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,WriteAndReadBitStreamTest,The following statement contains a magic number: bs.TryReadBits(14' out bits);
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,WriteAndReadBitStreamTest,The following statement contains a magic number: Assert.Equal(13771U' bits);
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,ReadBitStreamLimitsTest,The following statement contains a magic number: i < 8
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,RealScriptPubKeyFilterTest,The following statement contains a magic number: var keyMatch = key.ToBytes().SafeSubarray(0' 16);
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,EdgeCaseSipHashEqualZero,The following statement contains a magic number: var filter = new GolombRiceFilterBuilder() 				.SetKey(new uint256(blockHash)) 				.SetP(20) 				.SetM(1 << 20) 				.AddEntries(new[]{ dummyScriptPubKey }) 				.Build();
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,EdgeCaseSipHashEqualZero,The following statement contains a magic number: var filter = new GolombRiceFilterBuilder() 				.SetKey(new uint256(blockHash)) 				.SetP(20) 				.SetM(1 << 20) 				.AddEntries(new[]{ dummyScriptPubKey }) 				.Build();
Magic Number,NBitcoin.Tests,GolombRiceFilterTest,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Bip158_tests.cs,EdgeCaseSipHashEqualZero,The following statement contains a magic number: var key = blockHash.SafeSubarray(0' 16);
Magic Number,NBitcoin.Tests,bip32_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip32_tests.cs,CanRecoverExtKeyFromExtPubKeyAndOneChildExtKey2,The following statement contains a magic number: i < 255
Magic Number,NBitcoin.Tests,bip32_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip32_tests.cs,CanUseKeyPath,The following statement contains a magic number: Assert.Equal(key  							.Derive(0)  							.Derive(1)  							.Derive(2)  							.Derive(3)  							.ToString(Network.Main)' key.Derive(keyPath).ToString(Network.Main));
Magic Number,NBitcoin.Tests,bip32_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip32_tests.cs,CanUseKeyPath,The following statement contains a magic number: Assert.Equal(key  							.Derive(0)  							.Derive(1)  							.Derive(2)  							.Derive(3)  							.ToString(Network.Main)' key.Derive(keyPath).ToString(Network.Main));
Magic Number,NBitcoin.Tests,bip32_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip32_tests.cs,CanUseKeyPath,The following statement contains a magic number: Assert.Equal(neuter  							.Derive(0)  							.Derive(1)  							.Derive(2)  							.Derive(3)  							.ToString(Network.Main)' neuter.Derive(keyPath).ToString(Network.Main));
Magic Number,NBitcoin.Tests,bip32_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip32_tests.cs,CanUseKeyPath,The following statement contains a magic number: Assert.Equal(neuter  							.Derive(0)  							.Derive(1)  							.Derive(2)  							.Derive(3)  							.ToString(Network.Main)' neuter.Derive(keyPath).ToString(Network.Main));
Magic Number,NBitcoin.Tests,bip32_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip32_tests.cs,CanUseKeyPath,The following statement contains a magic number: Assert.Equal(key.Derive(keyPath).ToString(Network.Main)' key.Derive(44' true).Derive(1' false).ToString(Network.Main));
Magic Number,NBitcoin.Tests,bip32_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip32_tests.cs,CanUseKeyPath,The following statement contains a magic number: keyPath = keyPath.Derive(44' true).Derive(1' false);
Magic Number,NBitcoin.Tests,bip32_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip32_tests.cs,CanUseKeyPath,The following statement contains a magic number: Assert.Equal(key.Derive(keyPath).ToString(Network.Main)' key.Derive(44' true).Derive(1' false).ToString(Network.Main));
Magic Number,NBitcoin.Tests,bip32_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip32_tests.cs,CanUseKeyPath,The following statement contains a magic number: Assert.True(key.Derive(44' true).IsHardened);
Magic Number,NBitcoin.Tests,bip32_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip32_tests.cs,CanUseKeyPath,The following statement contains a magic number: Assert.False(key.Derive(44' false).IsHardened);
Magic Number,NBitcoin.Tests,bip32_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip32_tests.cs,CanUseKeyPath,The following statement contains a magic number: neuter = key.Derive(44' true).Neuter();
Magic Number,NBitcoin.Tests,bip32_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip32_tests.cs,CanUseKeyPath,The following statement contains a magic number: neuter = key.Derive(44' false).Neuter();
Magic Number,NBitcoin.Tests,bip32_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip32_tests.cs,RunTest,The following statement contains a magic number: Assert.Equal(74' data.Length);
Magic Number,NBitcoin.Tests,bip32_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip32_tests.cs,RunTest,The following statement contains a magic number: Assert.Equal(74' data.Length);
Magic Number,NBitcoin.Tests,BIP38Tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\BIP38Tests.cs,EncryptedSecretECmultiplyLotSequence,The following statement contains a magic number: var tests = new[]  			{  				new {  				Passphrase= "ΜΟΛΩΝ ΛΑΒΕ"'  				PassphraseCode= "passphrased3z9rQJHSyBkNBwTRPkUGNVEVrUAcfAXDyRU1V28ie6hNFbqDwbFBvsTK7yWVK"'  				Encrypted = "6PgGWtx25kUg8QWvwuJAgorN6k9FbE25rv5dMRwu5SKMnfpfVe5mar2ngH"'  				Address = "1Lurmih3KruL4xDB5FmHof38yawNtP9oGf"'  				Unencrypted = "5KMKKuUmAkiNbA3DazMQiLfDq47qs8MAEThm4yL8R2PhV1ov33D"'  				ConfirmationCode = "cfrm38V8G4qq2ywYEFfWLD5Cc6msj9UwsG2Mj4Z6QdGJAFQpdatZLavkgRd1i4iBMdRngDqDs51"'  				LotSequence = new LotSequence(806938'1)'  				Compressed = false  				}  				'new {  				Passphrase= "MOLON LABE"'  				PassphraseCode= "passphraseaB8feaLQDENqCgr4gKZpmf4VoaT6qdjJNJiv7fsKvjqavcJxvuR1hy25aTu5sX"'  				Encrypted = "6PgNBNNzDkKdhkT6uJntUXwwzQV8Rr2tZcbkDcuC9DZRsS6AtHts4Ypo1j"'  				Address = "1Jscj8ALrYu2y9TD8NrpvDBugPedmbj4Yh"'  				Unencrypted = "5JLdxTtcTHcfYcmJsNVy1v2PMDx432JPoYcBTVVRHpPaxUrdtf8"'  				ConfirmationCode = "cfrm38V8aXBn7JWA1ESmFMUn6erxeBGZGAxJPY4e36S9QWkzZKtaVqLNMgnifETYw7BPwWC9aPD"'  				LotSequence = new LotSequence(263183'1)'  				Compressed = false  				}  			};
Magic Number,NBitcoin.Tests,BIP38Tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\BIP38Tests.cs,EncryptedSecretECmultiplyLotSequence,The following statement contains a magic number: var tests = new[]  			{  				new {  				Passphrase= "ΜΟΛΩΝ ΛΑΒΕ"'  				PassphraseCode= "passphrased3z9rQJHSyBkNBwTRPkUGNVEVrUAcfAXDyRU1V28ie6hNFbqDwbFBvsTK7yWVK"'  				Encrypted = "6PgGWtx25kUg8QWvwuJAgorN6k9FbE25rv5dMRwu5SKMnfpfVe5mar2ngH"'  				Address = "1Lurmih3KruL4xDB5FmHof38yawNtP9oGf"'  				Unencrypted = "5KMKKuUmAkiNbA3DazMQiLfDq47qs8MAEThm4yL8R2PhV1ov33D"'  				ConfirmationCode = "cfrm38V8G4qq2ywYEFfWLD5Cc6msj9UwsG2Mj4Z6QdGJAFQpdatZLavkgRd1i4iBMdRngDqDs51"'  				LotSequence = new LotSequence(806938'1)'  				Compressed = false  				}  				'new {  				Passphrase= "MOLON LABE"'  				PassphraseCode= "passphraseaB8feaLQDENqCgr4gKZpmf4VoaT6qdjJNJiv7fsKvjqavcJxvuR1hy25aTu5sX"'  				Encrypted = "6PgNBNNzDkKdhkT6uJntUXwwzQV8Rr2tZcbkDcuC9DZRsS6AtHts4Ypo1j"'  				Address = "1Jscj8ALrYu2y9TD8NrpvDBugPedmbj4Yh"'  				Unencrypted = "5JLdxTtcTHcfYcmJsNVy1v2PMDx432JPoYcBTVVRHpPaxUrdtf8"'  				ConfirmationCode = "cfrm38V8aXBn7JWA1ESmFMUn6erxeBGZGAxJPY4e36S9QWkzZKtaVqLNMgnifETYw7BPwWC9aPD"'  				LotSequence = new LotSequence(263183'1)'  				Compressed = false  				}  			};
Magic Number,NBitcoin.Tests,BIP38Tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\BIP38Tests.cs,CanParseLotSequence,The following statement contains a magic number: var sequence = new LotSequence(1048575' 1024);
Magic Number,NBitcoin.Tests,BIP38Tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\BIP38Tests.cs,CanParseLotSequence,The following statement contains a magic number: var sequence = new LotSequence(1048575' 1024);
Magic Number,NBitcoin.Tests,BIP38Tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\BIP38Tests.cs,CanRoundTripSeedEncryption,The following statement contains a magic number: var seed = new byte[24];
Magic Number,NBitcoin.Tests,BIP38Tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\BIP38Tests.cs,CanRoundTripSeedEncryption,The following statement contains a magic number: var derived = new byte[64];
Magic Number,NBitcoin.Tests,BIP38Tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\BIP38Tests.cs,CanRoundTripSeedEncryption,The following statement contains a magic number: seed = RandomUtils.GetBytes(24);
Magic Number,NBitcoin.Tests,BIP38Tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\BIP38Tests.cs,CanRoundTripSeedEncryption,The following statement contains a magic number: derived = RandomUtils.GetBytes(64);
Magic Number,NBitcoin.Tests,BIP38Tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\BIP38Tests.cs,CanRoundTripSeedEncryption,The following statement contains a magic number: u < 16
Magic Number,NBitcoin.Tests,BIP38Tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\BIP38Tests.cs,CanRoundTripSeedEncryption,The following statement contains a magic number: i < 5
Magic Number,NBitcoin.Tests,BIP38Tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\BIP38Tests.cs,CanRoundTripKeyEncryption,The following statement contains a magic number: var key = new byte[32];
Magic Number,NBitcoin.Tests,BIP38Tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\BIP38Tests.cs,CanRoundTripKeyEncryption,The following statement contains a magic number: var derived = new byte[64];
Magic Number,NBitcoin.Tests,BIP38Tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\BIP38Tests.cs,CanRoundTripKeyEncryption,The following statement contains a magic number: key = RandomUtils.GetBytes(32);
Magic Number,NBitcoin.Tests,BIP38Tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\BIP38Tests.cs,CanRoundTripKeyEncryption,The following statement contains a magic number: derived = RandomUtils.GetBytes(64);
Magic Number,NBitcoin.Tests,BIP38Tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\BIP38Tests.cs,CanRoundTripKeyEncryption,The following statement contains a magic number: i < 5
Magic Number,NBitcoin.Tests,bip39_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip39_tests.cs,EngTest,The following statement contains a magic number: string seed = langTest[2].ToString();
Magic Number,NBitcoin.Tests,bip39_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip39_tests.cs,EngTest,The following statement contains a magic number: ((JArray)language.Value).OfType<JArray>().Take(2)
Magic Number,NBitcoin.Tests,bip39_Codegen,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bip39_tests.cs,GenerateHardcodedNormalization,The following statement contains a magic number: ranges.Add(CharRange(0' 1000));
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_create_insert_serialize,The following statement contains a magic number: BloomFilter filter = new BloomFilter(3' 0.01' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_create_insert_serialize,The following statement contains a magic number: BloomFilter filter = new BloomFilter(3' 0.01' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_create_insert_serialize_with_tweak,The following statement contains a magic number: BloomFilter filter = new BloomFilter(3' 0.01' 2147483649' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_create_insert_serialize_with_tweak,The following statement contains a magic number: BloomFilter filter = new BloomFilter(3' 0.01' 2147483649' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_create_insert_serialize_with_tweak,The following statement contains a magic number: BloomFilter filter = new BloomFilter(3' 0.01' 2147483649' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_create_insert_key,The following statement contains a magic number: BloomFilter filter = new BloomFilter(2' 0.001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_create_insert_key,The following statement contains a magic number: BloomFilter filter = new BloomFilter(2' 0.001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_match,The following statement contains a magic number: BloomFilter filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_match,The following statement contains a magic number: BloomFilter filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_match,The following statement contains a magic number: filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_match,The following statement contains a magic number: filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_match,The following statement contains a magic number: filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_match,The following statement contains a magic number: filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_match,The following statement contains a magic number: filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_match,The following statement contains a magic number: filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_match,The following statement contains a magic number: filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_match,The following statement contains a magic number: filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_match,The following statement contains a magic number: filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_match,The following statement contains a magic number: filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_match,The following statement contains a magic number: filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_match,The following statement contains a magic number: filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_match,The following statement contains a magic number: filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_match,The following statement contains a magic number: filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_match,The following statement contains a magic number: filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_match,The following statement contains a magic number: filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_match,The following statement contains a magic number: filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_match,The following statement contains a magic number: filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_match,The following statement contains a magic number: filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_match,The following statement contains a magic number: filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_match,The following statement contains a magic number: filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,bloom_match,The following statement contains a magic number: filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_1,The following statement contains a magic number: BloomFilter filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_1,The following statement contains a magic number: BloomFilter filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_1,The following statement contains a magic number: AssertMatch(block' vMatchedTxn' "0x74d681e0e03bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20"' 0' 8);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_1,The following statement contains a magic number: Assert.True(vMatchedTxn.Count == 2);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_1,The following statement contains a magic number: AssertMatch(block' vMatchedTxn' "0x74d681e0e03bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20"' 1' 8);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_1,The following statement contains a magic number: AssertMatch(block' vMatchedTxn' "0xdd1fd2a6fc16404faf339881a90adbde7f4f728691ac62e8f168809cdfae1053"' 0' 7);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_2,The following statement contains a magic number: BloomFilter filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_2,The following statement contains a magic number: BloomFilter filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_2,The following statement contains a magic number: Assert.True(vMatchedTxn.Count == 4);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_2,The following statement contains a magic number: AssertMatch(block' vMatchedTxn' "0x6b0f8a73a56c04b519f1883e8aafda643ba61a30bd1439969df21bea5f4e27e2"' 2' 2);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_2,The following statement contains a magic number: AssertMatch(block' vMatchedTxn' "0x6b0f8a73a56c04b519f1883e8aafda643ba61a30bd1439969df21bea5f4e27e2"' 2' 2);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_2,The following statement contains a magic number: AssertMatch(block' vMatchedTxn' "0x3c1d7e82342158e4109df2e0b6348b6e84e403d8b4046d7007663ace63cddb23"' 3' 3);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_2,The following statement contains a magic number: AssertMatch(block' vMatchedTxn' "0x3c1d7e82342158e4109df2e0b6348b6e84e403d8b4046d7007663ace63cddb23"' 3' 3);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_2_with_update_none,The following statement contains a magic number: BloomFilter filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_NONE);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_2_with_update_none,The following statement contains a magic number: BloomFilter filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_NONE);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_2_with_update_none,The following statement contains a magic number: Assert.True(vMatchedTxn.Count == 3);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_2_with_update_none,The following statement contains a magic number: AssertMatch(block' vMatchedTxn' "0x3c1d7e82342158e4109df2e0b6348b6e84e403d8b4046d7007663ace63cddb23"' 2' 3);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_2_with_update_none,The following statement contains a magic number: AssertMatch(block' vMatchedTxn' "0x3c1d7e82342158e4109df2e0b6348b6e84e403d8b4046d7007663ace63cddb23"' 2' 3);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_3_and_serialize,The following statement contains a magic number: BloomFilter filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_3_and_serialize,The following statement contains a magic number: BloomFilter filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_4,The following statement contains a magic number: BloomFilter filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_4,The following statement contains a magic number: BloomFilter filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_ALL);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_4,The following statement contains a magic number: AssertMatch(block' vMatchedTxn' "0x0a2a92f0bda4727d0a13eaddf4dd9ac6b5c61a1429e6b2b818f19b15df0ac154"' 0' 6);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_4,The following statement contains a magic number: Assert.True(vMatchedTxn.Count == 2);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_4,The following statement contains a magic number: AssertMatch(block' vMatchedTxn' "0x0a2a92f0bda4727d0a13eaddf4dd9ac6b5c61a1429e6b2b818f19b15df0ac154"' 1' 6);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_4,The following statement contains a magic number: AssertMatch(block' vMatchedTxn' "0x02981fa052f0481dbc5868f4fc2166035a10f27a03cfd2de67326471df5bc041"' 0' 3);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_4_test_p2pubkey_only,The following statement contains a magic number: BloomFilter filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_P2PUBKEY_ONLY);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_4_test_p2pubkey_only,The following statement contains a magic number: BloomFilter filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_P2PUBKEY_ONLY);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_4_test_update_none,The following statement contains a magic number: BloomFilter filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_NONE);
Magic Number,NBitcoin.Tests,bloom_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\bloom_tests.cs,merkle_block_4_test_update_none,The following statement contains a magic number: BloomFilter filter = new BloomFilter(10' 0.000001' 0' BloomFlags.UPDATE_NONE);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanBuildSlimChain,The following statement contains a magic number: Assert.Equal(2' chain.Height);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanBuildSlimChain,The following statement contains a magic number: Assert.Equal(2' block.Height);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanBuildSlimChain,The following statement contains a magic number: block = chain.GetBlock(2);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanBuildSlimChain,The following statement contains a magic number: Assert.Equal(2' block.Height);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanBuildSlimChain,The following statement contains a magic number: Assert.Null(chain.GetBlock(3));
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanBuildSlimChain,The following statement contains a magic number: Assert.Equal(2' chain2.Height);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanParseRandomScripts,The following statement contains a magic number: var bytes = RandomUtils.GetBytes(120);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanParseRandomScripts,The following statement contains a magic number: i < 600
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanBuildConcurrentChain,The following statement contains a magic number: Assert.Equal(cchain.GetBlock(5)' chain.Tip);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanBuildConcurrentChain,The following statement contains a magic number: Assert.Equal(cchain.GetBlock(6)' b6b);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanBuildConcurrentChain,The following statement contains a magic number: Assert.Equal(cchain.GetBlock(5)' b5b);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanBuildChain,The following statement contains a magic number: Assert.Equal(4' chain.Height);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanBuildChain,The following statement contains a magic number: Assert.Equal(4' b.Height);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanCalculateDifficulty,The following statement contains a magic number: var expectedTarget = new Target(new BouncyCastle.Math.BigInteger(history.Split(''')[1]' 10));
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanBuildChain2,The following statement contains a magic number: ConcurrentChain chain = CreateChain(10);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanBuildChain2,The following statement contains a magic number: Assert.Equal(14' chain.Height);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanBuildChain2,The following statement contains a magic number: Assert.Equal(14' b.Height);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanForkBackward,The following statement contains a magic number: Assert.Equal(4' chain.Height);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanForkBackward,The following statement contains a magic number: Assert.Equal(4' last.Height);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanForkBackward,The following statement contains a magic number: Assert.Equal(3' chain.Height);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanForkBackward,The following statement contains a magic number: Assert.Equal(3' fork.Height);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanForkBackward,The following statement contains a magic number: Assert.Equal(6' chain.Height);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanForkBackward,The following statement contains a magic number: Assert.Equal(6' last.Height);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanForkBackward,The following statement contains a magic number: Assert.Equal(3' chain.Height);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanForkBackward,The following statement contains a magic number: Assert.Equal(3' fork.Height);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanForkBackward,The following statement contains a magic number: Assert.Equal(6' chain.Height);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanForkBackward,The following statement contains a magic number: Assert.Equal(6' last.Height);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanForkBackwardPartialChain,The following statement contains a magic number: ConcurrentChain chain = CreateChain(10);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanForkBackwardPartialChain,The following statement contains a magic number: Assert.Equal(14' chain.Height);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanForkBackwardPartialChain,The following statement contains a magic number: Assert.Equal(14' last.Height);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanForkBackwardPartialChain,The following statement contains a magic number: Assert.Equal(13' chain.Height);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanForkBackwardPartialChain,The following statement contains a magic number: Assert.Equal(13' fork.Height);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanForkBackwardPartialChain,The following statement contains a magic number: Assert.Equal(16' chain.Height);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanForkBackwardPartialChain,The following statement contains a magic number: Assert.Equal(16' last.Height);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanForkBackwardPartialChain,The following statement contains a magic number: Assert.Equal(13' chain.Height);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanForkBackwardPartialChain,The following statement contains a magic number: Assert.Equal(13' fork.Height);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanForkBackwardPartialChain,The following statement contains a magic number: Assert.Equal(16' chain.Height);
Magic Number,NBitcoin.Tests,ChainTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ChainTests.cs,CanForkBackwardPartialChain,The following statement contains a magic number: Assert.Equal(16' last.Height);
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: colored.Marker = new ColorMarker(new ulong[] { 0' 10' 6' 0' 7' 3 });
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: colored.Marker = new ColorMarker(new ulong[] { 0' 10' 6' 0' 7' 3 });
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: colored.Marker = new ColorMarker(new ulong[] { 0' 10' 6' 0' 7' 3 });
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: colored.Marker = new ColorMarker(new ulong[] { 0' 10' 6' 0' 7' 3 });
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: colored.Inputs.Add(new ColoredEntry(0' new AssetMoney(a1.Id' 3UL)));
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: colored.Inputs.Add(new ColoredEntry(1' new AssetMoney(a1.Id' 2UL)));
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: colored.Inputs.Add(new ColoredEntry(3' new AssetMoney(a1.Id' 5UL)));
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: colored.Inputs.Add(new ColoredEntry(3' new AssetMoney(a1.Id' 5UL)));
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: colored.Inputs.Add(new ColoredEntry(4' new AssetMoney(a1.Id' 3UL)));
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: colored.Inputs.Add(new ColoredEntry(4' new AssetMoney(a1.Id' 3UL)));
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: colored.Inputs.Add(new ColoredEntry(5' new AssetMoney(a2.Id' 9UL)));
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: colored.Inputs.Add(new ColoredEntry(5' new AssetMoney(a2.Id' 9UL)));
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: colored.Issuances.Add(new ColoredEntry(1' new AssetMoney(h.Id' 10UL)));
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: colored.Transfers.Add(new ColoredEntry(3' new AssetMoney(a1.Id' 6UL)));
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: colored.Transfers.Add(new ColoredEntry(3' new AssetMoney(a1.Id' 6UL)));
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: colored.Transfers.Add(new ColoredEntry(5' new AssetMoney(a1.Id' 7UL)));
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: colored.Transfers.Add(new ColoredEntry(5' new AssetMoney(a1.Id' 7UL)));
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: colored.Transfers.Add(new ColoredEntry(6' new AssetMoney(a2.Id' 3UL)));
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: colored.Transfers.Add(new ColoredEntry(6' new AssetMoney(a2.Id' 3UL)));
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: Assert.True(destroyed[0].Quantity == 6);
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: Assert.True(destroyed[0].Quantity == 6);
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: issuanceA1.Outputs.Add(new TxOut(dust' new ColorMarker(new ulong[] { 3' 2' 5' 3 }).GetScript()));
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: issuanceA1.Outputs.Add(new TxOut(dust' new ColorMarker(new ulong[] { 3' 2' 5' 3 }).GetScript()));
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: issuanceA1.Outputs.Add(new TxOut(dust' new ColorMarker(new ulong[] { 3' 2' 5' 3 }).GetScript()));
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: issuanceA1.Outputs.Add(new TxOut(dust' new ColorMarker(new ulong[] { 3' 2' 5' 3 }).GetScript()));
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: issuanceA2.Outputs.Add(new TxOut(dust' new ColorMarker(new ulong[] { 9 }).GetScript()));
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: testedBadTx.Outputs[2] = new TxOut(dust' new ColorMarker(new ulong[] { 0' 10' 6' 0' 6' 4 }).GetScript());
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: testedBadTx.Outputs[2] = new TxOut(dust' new ColorMarker(new ulong[] { 0' 10' 6' 0' 6' 4 }).GetScript());
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: testedBadTx.Outputs[2] = new TxOut(dust' new ColorMarker(new ulong[] { 0' 10' 6' 0' 6' 4 }).GetScript());
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: testedBadTx.Outputs[2] = new TxOut(dust' new ColorMarker(new ulong[] { 0' 10' 6' 0' 6' 4 }).GetScript());
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: testedBadTx.Outputs[2] = new TxOut(dust' new ColorMarker(new ulong[] { 0' 10' 6' 0' 6' 4 }).GetScript());
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: Assert.True(destroyed.Length == 2);
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: Assert.True(destroyed[0].Quantity == 13);
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: Assert.True(destroyed[1].Quantity == 9);
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: testedBadTx.Outputs[2] = new TxOut(dust' new ColorMarker(new ulong[] { 0' 10' 6' 0' 7' 4' 10' 10 }).GetScript());
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: testedBadTx.Outputs[2] = new TxOut(dust' new ColorMarker(new ulong[] { 0' 10' 6' 0' 7' 4' 10' 10 }).GetScript());
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: testedBadTx.Outputs[2] = new TxOut(dust' new ColorMarker(new ulong[] { 0' 10' 6' 0' 7' 4' 10' 10 }).GetScript());
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: testedBadTx.Outputs[2] = new TxOut(dust' new ColorMarker(new ulong[] { 0' 10' 6' 0' 7' 4' 10' 10 }).GetScript());
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: testedBadTx.Outputs[2] = new TxOut(dust' new ColorMarker(new ulong[] { 0' 10' 6' 0' 7' 4' 10' 10 }).GetScript());
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: testedBadTx.Outputs[2] = new TxOut(dust' new ColorMarker(new ulong[] { 0' 10' 6' 0' 7' 4' 10' 10 }).GetScript());
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: testedBadTx.Outputs[2] = new TxOut(dust' new ColorMarker(new ulong[] { 0' 10' 6' 0' 7' 4' 10' 10 }).GetScript());
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: Assert.True(destroyed.Length == 2);
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: Assert.True(destroyed[0].Quantity == 13);
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeSpecScenario,The following statement contains a magic number: Assert.True(destroyed[1].Quantity == 9);
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CreateSpecTransaction,The following statement contains a magic number: testedTx.Inputs.Add(new TxIn(new OutPoint(issuanceA1.GetHash()' 2)));
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CreateSpecTransaction,The following statement contains a magic number: testedTx.Inputs.Add(new TxIn(new OutPoint(issuanceA1.GetHash()' 3)));
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CreateSpecTransaction,The following statement contains a magic number: testedTx.Outputs.Add(new TxOut(dust' new ColorMarker(new ulong[] { 0' 10' 6' 0' 7' 3 }).GetScript()));
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CreateSpecTransaction,The following statement contains a magic number: testedTx.Outputs.Add(new TxOut(dust' new ColorMarker(new ulong[] { 0' 10' 6' 0' 7' 3 }).GetScript()));
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CreateSpecTransaction,The following statement contains a magic number: testedTx.Outputs.Add(new TxOut(dust' new ColorMarker(new ulong[] { 0' 10' 6' 0' 7' 3 }).GetScript()));
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CreateSpecTransaction,The following statement contains a magic number: testedTx.Outputs.Add(new TxOut(dust' new ColorMarker(new ulong[] { 0' 10' 6' 0' 7' 3 }).GetScript()));
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeOutputs,The following statement contains a magic number: Assert.True(colored2.Transfers.Count == 2);
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeOutputs,The following statement contains a magic number: Assert.True(colored2.Transfers.Count == 2);
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeOutputs,The following statement contains a magic number: payload.Quantities = payload.Quantities.Concat(new ulong[] { 1' 2 }).ToArray();
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeOutputs,The following statement contains a magic number: payload.Quantities[0] = 1001;
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeOutputs,The following statement contains a magic number: payload.Quantities[0] = 999;
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanColorizeOutputs,The following statement contains a magic number: Assert.True(colored2.Transfers.Count == 2);
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanParseColorMarker,The following statement contains a magic number: Assert.Equal(3' marker.Quantities.Length);
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanParseColorMarker,The following statement contains a magic number: Assert.True(marker.Quantities.SequenceEqual(new ulong[] { 300' 0' 624485 }));
Magic Number,NBitcoin.Tests,ColoredCoinsTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ColoredCoinsTests.cs,CanParseColorMarker,The following statement contains a magic number: Assert.True(marker.Quantities.SequenceEqual(new ulong[] { 300' 0' 624485 }));
Magic Number,NBitcoin.Tests,ConverterTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ConverterTests.cs,CanConvertText,The following statement contains a magic number: var encoded1 = Encoders.Base58Check.EncodeData(input1' 3' input1.Length - 6);
Magic Number,NBitcoin.Tests,ConverterTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ConverterTests.cs,CanConvertText,The following statement contains a magic number: var encoded1 = Encoders.Base58Check.EncodeData(input1' 3' input1.Length - 6);
Magic Number,NBitcoin.Tests,ConverterTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ConverterTests.cs,CanConvertText,The following statement contains a magic number: byte[] arr = new byte[input1.Length - 6];
Magic Number,NBitcoin.Tests,ConverterTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ConverterTests.cs,CanConvertText,The following statement contains a magic number: Array.Copy(input1' 3' arr' 0' arr.Length);
Magic Number,NBitcoin.Tests,ConverterTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ConverterTests.cs,CanConvertText,The following statement contains a magic number: AssertEx.CollectionEquals(input1.SafeSubarray(3' input1.Length - 6)' decoded1);
Magic Number,NBitcoin.Tests,ConverterTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ConverterTests.cs,CanConvertText,The following statement contains a magic number: AssertEx.CollectionEquals(input1.SafeSubarray(3' input1.Length - 6)' decoded1);
Magic Number,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CanReadProviderRegistrationTransaction,The following statement contains a magic number: Assert.Equal((uint)16' proRegTx.CollateralIndex);
Magic Number,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CanReadProviderRegistrationTransaction,The following statement contains a magic number: Assert.Equal(35015' proRegTx.Port);
Magic Number,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CanReadProviderRegistrationTransaction,The following statement contains a magic number: Assert.Equal(201' proRegTx.OperatorReward);
Magic Number,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CanReadExampleProviderRegistrationTransaction,The following statement contains a magic number: Assert.Equal(19999' proRegTx.Port);
Magic Number,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CanReadProviderUpdateServiceTransaction,The following statement contains a magic number: Assert.Equal(19999' proUpServTx.Port);
Magic Number,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CanReadCoinbaseSpecialTransaction,The following statement contains a magic number: Assert.Equal(10' cbTx.Version);
Magic Number,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CanReadCoinbaseSpecialTransaction,The following statement contains a magic number: Assert.Equal((uint)20' cbTx.Height);
Magic Number,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CanReadQuorumCommitmentTransaction,The following statement contains a magic number: Assert.Equal((uint)279326' qcTx.Height);
Magic Number,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CanReadQuorumCommitmentTransaction,The following statement contains a magic number: Assert.Equal((uint)50' qcTx.Commitment.SignersSize);
Magic Number,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CanReadQuorumCommitmentTransaction,The following statement contains a magic number: Assert.Equal((uint)50' qcTx.Commitment.ValidMembersSize);
Magic Number,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CheckDashBlock7000FirstTransaction,The following statement contains a magic number: Assert.Equal((uint)3' tx.DashVersion);
Magic Number,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CheckDashBlock7000FirstTransaction,The following statement contains a magic number: Assert.Equal(4294967295' tx.Inputs[0].Sequence.Value);
Magic Number,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CheckDashBlock7000FirstTransaction,The following statement contains a magic number: Assert.Equal(4' tx.Outputs.Count);
Magic Number,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CheckDashBlock7000FirstTransaction,The following statement contains a magic number: Assert.Equal(6817518157' tx.Outputs[0].Value.Satoshi);
Magic Number,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CheckDashBlock7000FirstTransaction,The following statement contains a magic number: Assert.Equal(38' tx.ExtraPayload.Length);
Magic Number,NBitcoin.Tests,DashTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DashTests.cs,CheckDashBlock7000FirstTransaction,The following statement contains a magic number: Assert.Equal((uint)7000' tx.CbTx.Height);
Magic Number,NBitcoin.Tests,DeterministicSignatureTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DeterministicSignatureTests.cs,ParseTestsDump,The following statement contains a magic number: tests.Length != 2
Magic Number,NBitcoin.Tests,DeterministicSignatureTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DeterministicSignatureTests.cs,ParseTest,The following statement contains a magic number: return new DeterministicSigTest()  			{  				Message = match.Groups[2].Value'  				Hash = match.Groups[1].Value'  				K = new BigInteger(values["k"]' 16)'  				R = new BigInteger(values["r"]' 16)'  				S = new BigInteger(values["s"]' 16)'  			};
Magic Number,NBitcoin.Tests,DeterministicSignatureTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DeterministicSignatureTests.cs,ParseTest,The following statement contains a magic number: return new DeterministicSigTest()  			{  				Message = match.Groups[2].Value'  				Hash = match.Groups[1].Value'  				K = new BigInteger(values["k"]' 16)'  				R = new BigInteger(values["r"]' 16)'  				S = new BigInteger(values["s"]' 16)'  			};
Magic Number,NBitcoin.Tests,DeterministicSignatureTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DeterministicSignatureTests.cs,ParseTest,The following statement contains a magic number: return new DeterministicSigTest()  			{  				Message = match.Groups[2].Value'  				Hash = match.Groups[1].Value'  				K = new BigInteger(values["k"]' 16)'  				R = new BigInteger(values["r"]' 16)'  				S = new BigInteger(values["s"]' 16)'  			};
Magic Number,NBitcoin.Tests,DeterministicSignatureTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DeterministicSignatureTests.cs,ParseTest,The following statement contains a magic number: return new DeterministicSigTest()  			{  				Message = match.Groups[2].Value'  				Hash = match.Groups[1].Value'  				K = new BigInteger(values["k"]' 16)'  				R = new BigInteger(values["r"]' 16)'  				S = new BigInteger(values["s"]' 16)'  			};
Magic Number,NBitcoin.Tests,DeterministicSignatureTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DeterministicSignatureTests.cs,ToDictionnary,The following statement contains a magic number: kv.Length != 2
Magic Number,NBitcoin.Tests,DeterministicSignatureTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DeterministicSignatureTests.cs,ParseKey,The following statement contains a magic number: var domain = new ECDomainParameters(curve.Curve' curve.G' new BigInteger(values["q"]' 16)' curve.H);
Magic Number,NBitcoin.Tests,DeterministicSignatureTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DeterministicSignatureTests.cs,ParseKey,The following statement contains a magic number: var key = new ECPrivateKeyParameters(new BigInteger(values["x"]' 16)' domain);
Magic Number,NBitcoin.Tests,DeterministicSignatureTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DeterministicSignatureTests.cs,ParseKey,The following statement contains a magic number: Assert.Equal(pub.Normalize().XCoord.ToBigInteger()' new BigInteger(values["Ux"]' 16));
Magic Number,NBitcoin.Tests,DeterministicSignatureTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DeterministicSignatureTests.cs,ParseKey,The following statement contains a magic number: Assert.Equal(pub.Normalize().YCoord.ToBigInteger()' new BigInteger(values["Uy"]' 16));
Magic Number,NBitcoin.Tests,DeterministicSignatureTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DeterministicSignatureTests.cs,Signatures_use_low_R,The following statement contains a magic number: var msgLen = rnd.Next(10' 1000);
Magic Number,NBitcoin.Tests,DeterministicSignatureTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DeterministicSignatureTests.cs,Signatures_use_low_R,The following statement contains a magic number: var msgLen = rnd.Next(10' 1000);
Magic Number,NBitcoin.Tests,DeterministicSignatureTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DeterministicSignatureTests.cs,Signatures_use_low_R,The following statement contains a magic number: Assert.True(sig.IsLowR && sig.ToDER().Length <= 70);
Magic Number,NBitcoin.Tests,DeterministicSignatureTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\DeterministicSignatureTests.cs,Signatures_use_low_R,The following statement contains a magic number: i < 100
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: byte[] t1 = new byte[] { 1' 2' 3' 4' 5' 6' 7 };
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: byte[] t1 = new byte[] { 1' 2' 3' 4' 5' 6' 7 };
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: byte[] t1 = new byte[] { 1' 2' 3' 4' 5' 6' 7 };
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: byte[] t1 = new byte[] { 1' 2' 3' 4' 5' 6' 7 };
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: byte[] t1 = new byte[] { 1' 2' 3' 4' 5' 6' 7 };
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: byte[] t1 = new byte[] { 1' 2' 3' 4' 5' 6' 7 };
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: byte[] t2 = new byte[] { 16' 17 };
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: byte[] t2 = new byte[] { 16' 17 };
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: byte[] t3 = new byte[] { 18' 19' 20' 21' 22' 23' 24' 25' 26 };
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: byte[] t3 = new byte[] { 18' 19' 20' 21' 22' 23' 24' 25' 26 };
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: byte[] t3 = new byte[] { 18' 19' 20' 21' 22' 23' 24' 25' 26 };
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: byte[] t3 = new byte[] { 18' 19' 20' 21' 22' 23' 24' 25' 26 };
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: byte[] t3 = new byte[] { 18' 19' 20' 21' 22' 23' 24' 25' 26 };
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: byte[] t3 = new byte[] { 18' 19' 20' 21' 22' 23' 24' 25' 26 };
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: byte[] t3 = new byte[] { 18' 19' 20' 21' 22' 23' 24' 25' 26 };
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: byte[] t3 = new byte[] { 18' 19' 20' 21' 22' 23' 24' 25' 26 };
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: byte[] t3 = new byte[] { 18' 19' 20' 21' 22' 23' 24' 25' 26 };
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: byte[] t4 = new byte[] { 27' 28' 29' 30' 31 };
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: byte[] t4 = new byte[] { 27' 28' 29' 30' 31 };
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: byte[] t4 = new byte[] { 27' 28' 29' 30' 31 };
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: byte[] t4 = new byte[] { 27' 28' 29' 30' 31 };
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: byte[] t4 = new byte[] { 27' 28' 29' 30' 31 };
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: hasher3.Write(uint64_t(x) | (uint64_t(x + 1) << 8) | (uint64_t(x + 2) << 16) | (uint64_t(x + 3) << 24) |  							 (uint64_t(x + 4) << 32) | (uint64_t(x + 5) << 40) | (uint64_t(x + 6) << 48) | (uint64_t(x + 7) << 56));
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: hasher3.Write(uint64_t(x) | (uint64_t(x + 1) << 8) | (uint64_t(x + 2) << 16) | (uint64_t(x + 3) << 24) |  							 (uint64_t(x + 4) << 32) | (uint64_t(x + 5) << 40) | (uint64_t(x + 6) << 48) | (uint64_t(x + 7) << 56));
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: hasher3.Write(uint64_t(x) | (uint64_t(x + 1) << 8) | (uint64_t(x + 2) << 16) | (uint64_t(x + 3) << 24) |  							 (uint64_t(x + 4) << 32) | (uint64_t(x + 5) << 40) | (uint64_t(x + 6) << 48) | (uint64_t(x + 7) << 56));
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: hasher3.Write(uint64_t(x) | (uint64_t(x + 1) << 8) | (uint64_t(x + 2) << 16) | (uint64_t(x + 3) << 24) |  							 (uint64_t(x + 4) << 32) | (uint64_t(x + 5) << 40) | (uint64_t(x + 6) << 48) | (uint64_t(x + 7) << 56));
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: hasher3.Write(uint64_t(x) | (uint64_t(x + 1) << 8) | (uint64_t(x + 2) << 16) | (uint64_t(x + 3) << 24) |  							 (uint64_t(x + 4) << 32) | (uint64_t(x + 5) << 40) | (uint64_t(x + 6) << 48) | (uint64_t(x + 7) << 56));
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: hasher3.Write(uint64_t(x) | (uint64_t(x + 1) << 8) | (uint64_t(x + 2) << 16) | (uint64_t(x + 3) << 24) |  							 (uint64_t(x + 4) << 32) | (uint64_t(x + 5) << 40) | (uint64_t(x + 6) << 48) | (uint64_t(x + 7) << 56));
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: hasher3.Write(uint64_t(x) | (uint64_t(x + 1) << 8) | (uint64_t(x + 2) << 16) | (uint64_t(x + 3) << 24) |  							 (uint64_t(x + 4) << 32) | (uint64_t(x + 5) << 40) | (uint64_t(x + 6) << 48) | (uint64_t(x + 7) << 56));
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: hasher3.Write(uint64_t(x) | (uint64_t(x + 1) << 8) | (uint64_t(x + 2) << 16) | (uint64_t(x + 3) << 24) |  							 (uint64_t(x + 4) << 32) | (uint64_t(x + 5) << 40) | (uint64_t(x + 6) << 48) | (uint64_t(x + 7) << 56));
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: hasher3.Write(uint64_t(x) | (uint64_t(x + 1) << 8) | (uint64_t(x + 2) << 16) | (uint64_t(x + 3) << 24) |  							 (uint64_t(x + 4) << 32) | (uint64_t(x + 5) << 40) | (uint64_t(x + 6) << 48) | (uint64_t(x + 7) << 56));
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: hasher3.Write(uint64_t(x) | (uint64_t(x + 1) << 8) | (uint64_t(x + 2) << 16) | (uint64_t(x + 3) << 24) |  							 (uint64_t(x + 4) << 32) | (uint64_t(x + 5) << 40) | (uint64_t(x + 6) << 48) | (uint64_t(x + 7) << 56));
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: hasher3.Write(uint64_t(x) | (uint64_t(x + 1) << 8) | (uint64_t(x + 2) << 16) | (uint64_t(x + 3) << 24) |  							 (uint64_t(x + 4) << 32) | (uint64_t(x + 5) << 40) | (uint64_t(x + 6) << 48) | (uint64_t(x + 7) << 56));
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: hasher3.Write(uint64_t(x) | (uint64_t(x + 1) << 8) | (uint64_t(x + 2) << 16) | (uint64_t(x + 3) << 24) |  							 (uint64_t(x + 4) << 32) | (uint64_t(x + 5) << 40) | (uint64_t(x + 6) << 48) | (uint64_t(x + 7) << 56));
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,siphash,The following statement contains a magic number: hasher3.Write(uint64_t(x) | (uint64_t(x + 1) << 8) | (uint64_t(x + 2) << 16) | (uint64_t(x + 3) << 24) |  							 (uint64_t(x + 4) << 32) | (uint64_t(x + 5) << 40) | (uint64_t(x + 6) << 48) | (uint64_t(x + 7) << 56));
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,hash160,The following statement contains a magic number: var data = new byte[] { 1' 2' 3' 4 };
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,hash160,The following statement contains a magic number: var data = new byte[] { 1' 2' 3' 4 };
Magic Number,NBitcoin.Tests,hash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\hash_tests.cs,hash160,The following statement contains a magic number: var data = new byte[] { 1' 2' 3' 4 };
Magic Number,NBitcoin.Tests,JsonConverterTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\JsonConverterTests.cs,CanSerializeInJson,The following statement contains a magic number: CanSerializeInJsonCore(new byte[] { 1' 2' 3 });
Magic Number,NBitcoin.Tests,JsonConverterTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\JsonConverterTests.cs,CanSerializeInJson,The following statement contains a magic number: CanSerializeInJsonCore(new byte[] { 1' 2' 3 });
Magic Number,NBitcoin.Tests,JsonConverterTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\JsonConverterTests.cs,CanSerializeInJson,The following statement contains a magic number: CanSerializeInJsonCore(Money.Coins(5.0m));
Magic Number,NBitcoin.Tests,JsonConverterTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\JsonConverterTests.cs,CanSerializeInJson,The following statement contains a magic number: CanSerializeInJsonCore(new uint256(RandomUtils.GetBytes(32)));
Magic Number,NBitcoin.Tests,JsonConverterTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\JsonConverterTests.cs,CanSerializeInJson,The following statement contains a magic number: CanSerializeInJsonCore(new uint160(RandomUtils.GetBytes(20)));
Magic Number,NBitcoin.Tests,JsonConverterTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\JsonConverterTests.cs,CanSerializeInJson,The following statement contains a magic number: var sig = k.Sign(new uint256(RandomUtils.GetBytes(32)));
Magic Number,NBitcoin.Tests,JsonConverterTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\JsonConverterTests.cs,CanSerializeInJson,The following statement contains a magic number: CanSerializeInJsonCore(new LockTime(130)' out var str);
Magic Number,NBitcoin.Tests,JsonConverterTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\JsonConverterTests.cs,CanSerializeInJson,The following statement contains a magic number: CanSerializeInJsonCore(new FeeRate(Money.Satoshis(1)' 1000));
Magic Number,NBitcoin.Tests,JsonConverterTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\JsonConverterTests.cs,CanSerializeInJson,The following statement contains a magic number: CanSerializeInJsonCore(new FeeRate(Money.Satoshis(1000)' 1000));
Magic Number,NBitcoin.Tests,JsonConverterTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\JsonConverterTests.cs,CanSerializeInJson,The following statement contains a magic number: CanSerializeInJsonCore(new FeeRate(Money.Satoshis(1000)' 1000));
Magic Number,NBitcoin.Tests,JsonConverterTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\JsonConverterTests.cs,CanSerializeInJson,The following statement contains a magic number: CanSerializeInJsonCore(new FeeRate(0.5m));
Magic Number,NBitcoin.Tests,key_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\key_tests.cs,key_test1,The following statement contains a magic number: strMsg = String.Join("'"' Enumerable.Range(0' 2000).Select(i => i.ToString()).ToArray());
Magic Number,NBitcoin.Tests,key_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\key_tests.cs,key_test1,The following statement contains a magic number: n == 10
Magic Number,NBitcoin.Tests,key_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\key_tests.cs,key_test1,The following statement contains a magic number: Assert.True(sign1.IsLowR && sign1.ToDER().Length <= 70);
Magic Number,NBitcoin.Tests,key_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\key_tests.cs,key_test1,The following statement contains a magic number: Assert.True(sign2.IsLowR && sign2.ToDER().Length <= 70);
Magic Number,NBitcoin.Tests,key_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\key_tests.cs,key_test1,The following statement contains a magic number: Assert.True(sign1C.IsLowR && sign1C.ToDER().Length <= 70);
Magic Number,NBitcoin.Tests,key_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\key_tests.cs,key_test1,The following statement contains a magic number: Assert.True(sign2C.IsLowR && sign2C.ToDER().Length <= 70);
Magic Number,NBitcoin.Tests,key_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\key_tests.cs,key_test1,The following statement contains a magic number: n < 16
Magic Number,NBitcoin.Tests,key_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\key_tests.cs,key_test_from_bytes,The following statement contains a magic number: Byte[] privateKey = new Byte[32] { 0xE9' 0x87' 0x3D' 0x79' 0xC6' 0xD8' 0x7D' 0xC0' 0xFB' 0x6A' 0x57' 0x78' 0x63' 0x33' 0x89' 0xF4' 0x45' 0x32' 0x13' 0x30' 0x3D' 0xA6' 0x1F' 0x20' 0xBD' 0x67' 0xFC' 0x23' 0x3A' 0xA3' 0x32' 0x62 };
Magic Number,NBitcoin.Tests,pow_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\pow_tests.cs,EnsureDownloaded,The following statement contains a magic number: client.Timeout = TimeSpan.FromMinutes(5);
Magic Number,NBitcoin.Tests,NodeServerTester,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,NodeServerTester,The following statement contains a magic number: var a = _Rand.Next(4000' 60000);
Magic Number,NBitcoin.Tests,NodeServerTester,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,NodeServerTester,The following statement contains a magic number: var a = _Rand.Next(4000' 60000);
Magic Number,NBitcoin.Tests,NodeServerTester,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,NodeServerTester,The following statement contains a magic number: var b = _Rand.Next(4000' 60000);
Magic Number,NBitcoin.Tests,NodeServerTester,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,NodeServerTester,The following statement contains a magic number: var b = _Rand.Next(4000' 60000);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanParseMessages,The following statement contains a magic number: var tests = new[]  				{  					new  					{  						Version = 209U'  						Message = "f9beb4d976657273696f6e0000000000550000009c7c00000100000000000000e615104d00000000010000000000000000000000000000000000ffff0a000001208d010000000000000000000000000000000000ffff0a000002208ddd9d202c3ab457130055810100"'  						Test = new Action<object>(o=>  						{  							var version = (VersionPayload)o;  							Assert.Equal((ulong)0x1357B43A2C209DDD' version.Nonce);  							Assert.Equal(""' version.UserAgent);  							Assert.Equal("::ffff:10.0.0.2"' version.AddressFrom.Address.ToString());  							Assert.Equal(8333' version.AddressFrom.Port);  							Assert.Equal(0x00018155' version.StartHeight);  							Assert.Equal<uint>(31900' version.Version);  						})  					}'  					new  					{  						Version = 60002U'  						Message = "f9beb4d976657273696f6e000000000064000000358d493262ea0000010000000000000011b2d05000000000010000000000000000000000000000000000ffff000000000000000000000000000000000000000000000000ffff0000000000003b2eb35d8ce617650f2f5361746f7368693a302e372e322fc03e0300"'  						Test = new Action<object>(o=>  						{  							var version = (VersionPayload)o;  							Assert.Equal("/Satoshi:0.7.2/"' version.UserAgent);  							Assert.Equal(0x00033EC0' version.StartHeight);  						})  					}'  					new  					{  						Version = 70012U'  						Message = "f9beb4d976657261636b000000000000000000005df6e0e2"'  						Test = new Action<object>(o=>  							{  								var verack = (VerAckPayload)o;  							})  					}'  					new  					{  						Version = 60002U'  						Message = "f9beb4d96164647200000000000000001f000000ed52399b01e215104d010000000000000000000000000000000000ffff0a000001208d"'  						Test = new Action<object>(o=>  							{  								var addr = (AddrPayload)o;  								Assert.Single(addr.Addresses);  								//"Mon Dec 20 21:50:10 EST 2010"  								var date = TimeZoneInfo.ConvertTime(addr.Addresses[0].Time'EST);  								Assert.Equal(20'date.Day);  								Assert.Equal(12' date.Month);  								Assert.Equal(2010' date.Year);  								Assert.Equal(21' date.Hour);  							})  					}'    				};
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanParseMessages,The following statement contains a magic number: var tests = new[]  				{  					new  					{  						Version = 209U'  						Message = "f9beb4d976657273696f6e0000000000550000009c7c00000100000000000000e615104d00000000010000000000000000000000000000000000ffff0a000001208d010000000000000000000000000000000000ffff0a000002208ddd9d202c3ab457130055810100"'  						Test = new Action<object>(o=>  						{  							var version = (VersionPayload)o;  							Assert.Equal((ulong)0x1357B43A2C209DDD' version.Nonce);  							Assert.Equal(""' version.UserAgent);  							Assert.Equal("::ffff:10.0.0.2"' version.AddressFrom.Address.ToString());  							Assert.Equal(8333' version.AddressFrom.Port);  							Assert.Equal(0x00018155' version.StartHeight);  							Assert.Equal<uint>(31900' version.Version);  						})  					}'  					new  					{  						Version = 60002U'  						Message = "f9beb4d976657273696f6e000000000064000000358d493262ea0000010000000000000011b2d05000000000010000000000000000000000000000000000ffff000000000000000000000000000000000000000000000000ffff0000000000003b2eb35d8ce617650f2f5361746f7368693a302e372e322fc03e0300"'  						Test = new Action<object>(o=>  						{  							var version = (VersionPayload)o;  							Assert.Equal("/Satoshi:0.7.2/"' version.UserAgent);  							Assert.Equal(0x00033EC0' version.StartHeight);  						})  					}'  					new  					{  						Version = 70012U'  						Message = "f9beb4d976657261636b000000000000000000005df6e0e2"'  						Test = new Action<object>(o=>  							{  								var verack = (VerAckPayload)o;  							})  					}'  					new  					{  						Version = 60002U'  						Message = "f9beb4d96164647200000000000000001f000000ed52399b01e215104d010000000000000000000000000000000000ffff0a000001208d"'  						Test = new Action<object>(o=>  							{  								var addr = (AddrPayload)o;  								Assert.Single(addr.Addresses);  								//"Mon Dec 20 21:50:10 EST 2010"  								var date = TimeZoneInfo.ConvertTime(addr.Addresses[0].Time'EST);  								Assert.Equal(20'date.Day);  								Assert.Equal(12' date.Month);  								Assert.Equal(2010' date.Year);  								Assert.Equal(21' date.Hour);  							})  					}'    				};
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanParseMessages,The following statement contains a magic number: var tests = new[]  				{  					new  					{  						Version = 209U'  						Message = "f9beb4d976657273696f6e0000000000550000009c7c00000100000000000000e615104d00000000010000000000000000000000000000000000ffff0a000001208d010000000000000000000000000000000000ffff0a000002208ddd9d202c3ab457130055810100"'  						Test = new Action<object>(o=>  						{  							var version = (VersionPayload)o;  							Assert.Equal((ulong)0x1357B43A2C209DDD' version.Nonce);  							Assert.Equal(""' version.UserAgent);  							Assert.Equal("::ffff:10.0.0.2"' version.AddressFrom.Address.ToString());  							Assert.Equal(8333' version.AddressFrom.Port);  							Assert.Equal(0x00018155' version.StartHeight);  							Assert.Equal<uint>(31900' version.Version);  						})  					}'  					new  					{  						Version = 60002U'  						Message = "f9beb4d976657273696f6e000000000064000000358d493262ea0000010000000000000011b2d05000000000010000000000000000000000000000000000ffff000000000000000000000000000000000000000000000000ffff0000000000003b2eb35d8ce617650f2f5361746f7368693a302e372e322fc03e0300"'  						Test = new Action<object>(o=>  						{  							var version = (VersionPayload)o;  							Assert.Equal("/Satoshi:0.7.2/"' version.UserAgent);  							Assert.Equal(0x00033EC0' version.StartHeight);  						})  					}'  					new  					{  						Version = 70012U'  						Message = "f9beb4d976657261636b000000000000000000005df6e0e2"'  						Test = new Action<object>(o=>  							{  								var verack = (VerAckPayload)o;  							})  					}'  					new  					{  						Version = 60002U'  						Message = "f9beb4d96164647200000000000000001f000000ed52399b01e215104d010000000000000000000000000000000000ffff0a000001208d"'  						Test = new Action<object>(o=>  							{  								var addr = (AddrPayload)o;  								Assert.Single(addr.Addresses);  								//"Mon Dec 20 21:50:10 EST 2010"  								var date = TimeZoneInfo.ConvertTime(addr.Addresses[0].Time'EST);  								Assert.Equal(20'date.Day);  								Assert.Equal(12' date.Month);  								Assert.Equal(2010' date.Year);  								Assert.Equal(21' date.Hour);  							})  					}'    				};
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanParseMessages,The following statement contains a magic number: var tests = new[]  				{  					new  					{  						Version = 209U'  						Message = "f9beb4d976657273696f6e0000000000550000009c7c00000100000000000000e615104d00000000010000000000000000000000000000000000ffff0a000001208d010000000000000000000000000000000000ffff0a000002208ddd9d202c3ab457130055810100"'  						Test = new Action<object>(o=>  						{  							var version = (VersionPayload)o;  							Assert.Equal((ulong)0x1357B43A2C209DDD' version.Nonce);  							Assert.Equal(""' version.UserAgent);  							Assert.Equal("::ffff:10.0.0.2"' version.AddressFrom.Address.ToString());  							Assert.Equal(8333' version.AddressFrom.Port);  							Assert.Equal(0x00018155' version.StartHeight);  							Assert.Equal<uint>(31900' version.Version);  						})  					}'  					new  					{  						Version = 60002U'  						Message = "f9beb4d976657273696f6e000000000064000000358d493262ea0000010000000000000011b2d05000000000010000000000000000000000000000000000ffff000000000000000000000000000000000000000000000000ffff0000000000003b2eb35d8ce617650f2f5361746f7368693a302e372e322fc03e0300"'  						Test = new Action<object>(o=>  						{  							var version = (VersionPayload)o;  							Assert.Equal("/Satoshi:0.7.2/"' version.UserAgent);  							Assert.Equal(0x00033EC0' version.StartHeight);  						})  					}'  					new  					{  						Version = 70012U'  						Message = "f9beb4d976657261636b000000000000000000005df6e0e2"'  						Test = new Action<object>(o=>  							{  								var verack = (VerAckPayload)o;  							})  					}'  					new  					{  						Version = 60002U'  						Message = "f9beb4d96164647200000000000000001f000000ed52399b01e215104d010000000000000000000000000000000000ffff0a000001208d"'  						Test = new Action<object>(o=>  							{  								var addr = (AddrPayload)o;  								Assert.Single(addr.Addresses);  								//"Mon Dec 20 21:50:10 EST 2010"  								var date = TimeZoneInfo.ConvertTime(addr.Addresses[0].Time'EST);  								Assert.Equal(20'date.Day);  								Assert.Equal(12' date.Month);  								Assert.Equal(2010' date.Year);  								Assert.Equal(21' date.Hour);  							})  					}'    				};
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanParseMessages,The following statement contains a magic number: var tests = new[]  				{  					new  					{  						Version = 209U'  						Message = "f9beb4d976657273696f6e0000000000550000009c7c00000100000000000000e615104d00000000010000000000000000000000000000000000ffff0a000001208d010000000000000000000000000000000000ffff0a000002208ddd9d202c3ab457130055810100"'  						Test = new Action<object>(o=>  						{  							var version = (VersionPayload)o;  							Assert.Equal((ulong)0x1357B43A2C209DDD' version.Nonce);  							Assert.Equal(""' version.UserAgent);  							Assert.Equal("::ffff:10.0.0.2"' version.AddressFrom.Address.ToString());  							Assert.Equal(8333' version.AddressFrom.Port);  							Assert.Equal(0x00018155' version.StartHeight);  							Assert.Equal<uint>(31900' version.Version);  						})  					}'  					new  					{  						Version = 60002U'  						Message = "f9beb4d976657273696f6e000000000064000000358d493262ea0000010000000000000011b2d05000000000010000000000000000000000000000000000ffff000000000000000000000000000000000000000000000000ffff0000000000003b2eb35d8ce617650f2f5361746f7368693a302e372e322fc03e0300"'  						Test = new Action<object>(o=>  						{  							var version = (VersionPayload)o;  							Assert.Equal("/Satoshi:0.7.2/"' version.UserAgent);  							Assert.Equal(0x00033EC0' version.StartHeight);  						})  					}'  					new  					{  						Version = 70012U'  						Message = "f9beb4d976657261636b000000000000000000005df6e0e2"'  						Test = new Action<object>(o=>  							{  								var verack = (VerAckPayload)o;  							})  					}'  					new  					{  						Version = 60002U'  						Message = "f9beb4d96164647200000000000000001f000000ed52399b01e215104d010000000000000000000000000000000000ffff0a000001208d"'  						Test = new Action<object>(o=>  							{  								var addr = (AddrPayload)o;  								Assert.Single(addr.Addresses);  								//"Mon Dec 20 21:50:10 EST 2010"  								var date = TimeZoneInfo.ConvertTime(addr.Addresses[0].Time'EST);  								Assert.Equal(20'date.Day);  								Assert.Equal(12' date.Month);  								Assert.Equal(2010' date.Year);  								Assert.Equal(21' date.Hour);  							})  					}'    				};
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanParseMessages,The following statement contains a magic number: var tests = new[]  				{  					new  					{  						Version = 209U'  						Message = "f9beb4d976657273696f6e0000000000550000009c7c00000100000000000000e615104d00000000010000000000000000000000000000000000ffff0a000001208d010000000000000000000000000000000000ffff0a000002208ddd9d202c3ab457130055810100"'  						Test = new Action<object>(o=>  						{  							var version = (VersionPayload)o;  							Assert.Equal((ulong)0x1357B43A2C209DDD' version.Nonce);  							Assert.Equal(""' version.UserAgent);  							Assert.Equal("::ffff:10.0.0.2"' version.AddressFrom.Address.ToString());  							Assert.Equal(8333' version.AddressFrom.Port);  							Assert.Equal(0x00018155' version.StartHeight);  							Assert.Equal<uint>(31900' version.Version);  						})  					}'  					new  					{  						Version = 60002U'  						Message = "f9beb4d976657273696f6e000000000064000000358d493262ea0000010000000000000011b2d05000000000010000000000000000000000000000000000ffff000000000000000000000000000000000000000000000000ffff0000000000003b2eb35d8ce617650f2f5361746f7368693a302e372e322fc03e0300"'  						Test = new Action<object>(o=>  						{  							var version = (VersionPayload)o;  							Assert.Equal("/Satoshi:0.7.2/"' version.UserAgent);  							Assert.Equal(0x00033EC0' version.StartHeight);  						})  					}'  					new  					{  						Version = 70012U'  						Message = "f9beb4d976657261636b000000000000000000005df6e0e2"'  						Test = new Action<object>(o=>  							{  								var verack = (VerAckPayload)o;  							})  					}'  					new  					{  						Version = 60002U'  						Message = "f9beb4d96164647200000000000000001f000000ed52399b01e215104d010000000000000000000000000000000000ffff0a000001208d"'  						Test = new Action<object>(o=>  							{  								var addr = (AddrPayload)o;  								Assert.Single(addr.Addresses);  								//"Mon Dec 20 21:50:10 EST 2010"  								var date = TimeZoneInfo.ConvertTime(addr.Addresses[0].Time'EST);  								Assert.Equal(20'date.Day);  								Assert.Equal(12' date.Month);  								Assert.Equal(2010' date.Year);  								Assert.Equal(21' date.Hour);  							})  					}'    				};
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanParseMessages,The following statement contains a magic number: var tests = new[]  				{  					new  					{  						Version = 209U'  						Message = "f9beb4d976657273696f6e0000000000550000009c7c00000100000000000000e615104d00000000010000000000000000000000000000000000ffff0a000001208d010000000000000000000000000000000000ffff0a000002208ddd9d202c3ab457130055810100"'  						Test = new Action<object>(o=>  						{  							var version = (VersionPayload)o;  							Assert.Equal((ulong)0x1357B43A2C209DDD' version.Nonce);  							Assert.Equal(""' version.UserAgent);  							Assert.Equal("::ffff:10.0.0.2"' version.AddressFrom.Address.ToString());  							Assert.Equal(8333' version.AddressFrom.Port);  							Assert.Equal(0x00018155' version.StartHeight);  							Assert.Equal<uint>(31900' version.Version);  						})  					}'  					new  					{  						Version = 60002U'  						Message = "f9beb4d976657273696f6e000000000064000000358d493262ea0000010000000000000011b2d05000000000010000000000000000000000000000000000ffff000000000000000000000000000000000000000000000000ffff0000000000003b2eb35d8ce617650f2f5361746f7368693a302e372e322fc03e0300"'  						Test = new Action<object>(o=>  						{  							var version = (VersionPayload)o;  							Assert.Equal("/Satoshi:0.7.2/"' version.UserAgent);  							Assert.Equal(0x00033EC0' version.StartHeight);  						})  					}'  					new  					{  						Version = 70012U'  						Message = "f9beb4d976657261636b000000000000000000005df6e0e2"'  						Test = new Action<object>(o=>  							{  								var verack = (VerAckPayload)o;  							})  					}'  					new  					{  						Version = 60002U'  						Message = "f9beb4d96164647200000000000000001f000000ed52399b01e215104d010000000000000000000000000000000000ffff0a000001208d"'  						Test = new Action<object>(o=>  							{  								var addr = (AddrPayload)o;  								Assert.Single(addr.Addresses);  								//"Mon Dec 20 21:50:10 EST 2010"  								var date = TimeZoneInfo.ConvertTime(addr.Addresses[0].Time'EST);  								Assert.Equal(20'date.Day);  								Assert.Equal(12' date.Month);  								Assert.Equal(2010' date.Year);  								Assert.Equal(21' date.Hour);  							})  					}'    				};
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanParseMessages,The following statement contains a magic number: var tests = new[]  				{  					new  					{  						Version = 209U'  						Message = "f9beb4d976657273696f6e0000000000550000009c7c00000100000000000000e615104d00000000010000000000000000000000000000000000ffff0a000001208d010000000000000000000000000000000000ffff0a000002208ddd9d202c3ab457130055810100"'  						Test = new Action<object>(o=>  						{  							var version = (VersionPayload)o;  							Assert.Equal((ulong)0x1357B43A2C209DDD' version.Nonce);  							Assert.Equal(""' version.UserAgent);  							Assert.Equal("::ffff:10.0.0.2"' version.AddressFrom.Address.ToString());  							Assert.Equal(8333' version.AddressFrom.Port);  							Assert.Equal(0x00018155' version.StartHeight);  							Assert.Equal<uint>(31900' version.Version);  						})  					}'  					new  					{  						Version = 60002U'  						Message = "f9beb4d976657273696f6e000000000064000000358d493262ea0000010000000000000011b2d05000000000010000000000000000000000000000000000ffff000000000000000000000000000000000000000000000000ffff0000000000003b2eb35d8ce617650f2f5361746f7368693a302e372e322fc03e0300"'  						Test = new Action<object>(o=>  						{  							var version = (VersionPayload)o;  							Assert.Equal("/Satoshi:0.7.2/"' version.UserAgent);  							Assert.Equal(0x00033EC0' version.StartHeight);  						})  					}'  					new  					{  						Version = 70012U'  						Message = "f9beb4d976657261636b000000000000000000005df6e0e2"'  						Test = new Action<object>(o=>  							{  								var verack = (VerAckPayload)o;  							})  					}'  					new  					{  						Version = 60002U'  						Message = "f9beb4d96164647200000000000000001f000000ed52399b01e215104d010000000000000000000000000000000000ffff0a000001208d"'  						Test = new Action<object>(o=>  							{  								var addr = (AddrPayload)o;  								Assert.Single(addr.Addresses);  								//"Mon Dec 20 21:50:10 EST 2010"  								var date = TimeZoneInfo.ConvertTime(addr.Addresses[0].Time'EST);  								Assert.Equal(20'date.Day);  								Assert.Equal(12' date.Month);  								Assert.Equal(2010' date.Year);  								Assert.Equal(21' date.Hour);  							})  					}'    				};
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanParseMessages,The following statement contains a magic number: var tests = new[]  				{  					new  					{  						Version = 209U'  						Message = "f9beb4d976657273696f6e0000000000550000009c7c00000100000000000000e615104d00000000010000000000000000000000000000000000ffff0a000001208d010000000000000000000000000000000000ffff0a000002208ddd9d202c3ab457130055810100"'  						Test = new Action<object>(o=>  						{  							var version = (VersionPayload)o;  							Assert.Equal((ulong)0x1357B43A2C209DDD' version.Nonce);  							Assert.Equal(""' version.UserAgent);  							Assert.Equal("::ffff:10.0.0.2"' version.AddressFrom.Address.ToString());  							Assert.Equal(8333' version.AddressFrom.Port);  							Assert.Equal(0x00018155' version.StartHeight);  							Assert.Equal<uint>(31900' version.Version);  						})  					}'  					new  					{  						Version = 60002U'  						Message = "f9beb4d976657273696f6e000000000064000000358d493262ea0000010000000000000011b2d05000000000010000000000000000000000000000000000ffff000000000000000000000000000000000000000000000000ffff0000000000003b2eb35d8ce617650f2f5361746f7368693a302e372e322fc03e0300"'  						Test = new Action<object>(o=>  						{  							var version = (VersionPayload)o;  							Assert.Equal("/Satoshi:0.7.2/"' version.UserAgent);  							Assert.Equal(0x00033EC0' version.StartHeight);  						})  					}'  					new  					{  						Version = 70012U'  						Message = "f9beb4d976657261636b000000000000000000005df6e0e2"'  						Test = new Action<object>(o=>  							{  								var verack = (VerAckPayload)o;  							})  					}'  					new  					{  						Version = 60002U'  						Message = "f9beb4d96164647200000000000000001f000000ed52399b01e215104d010000000000000000000000000000000000ffff0a000001208d"'  						Test = new Action<object>(o=>  							{  								var addr = (AddrPayload)o;  								Assert.Single(addr.Addresses);  								//"Mon Dec 20 21:50:10 EST 2010"  								var date = TimeZoneInfo.ConvertTime(addr.Addresses[0].Time'EST);  								Assert.Equal(20'date.Day);  								Assert.Equal(12' date.Month);  								Assert.Equal(2010' date.Year);  								Assert.Equal(21' date.Hour);  							})  					}'    				};
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanParseMessages,The following statement contains a magic number: var tests = new[]  				{  					new  					{  						Version = 209U'  						Message = "f9beb4d976657273696f6e0000000000550000009c7c00000100000000000000e615104d00000000010000000000000000000000000000000000ffff0a000001208d010000000000000000000000000000000000ffff0a000002208ddd9d202c3ab457130055810100"'  						Test = new Action<object>(o=>  						{  							var version = (VersionPayload)o;  							Assert.Equal((ulong)0x1357B43A2C209DDD' version.Nonce);  							Assert.Equal(""' version.UserAgent);  							Assert.Equal("::ffff:10.0.0.2"' version.AddressFrom.Address.ToString());  							Assert.Equal(8333' version.AddressFrom.Port);  							Assert.Equal(0x00018155' version.StartHeight);  							Assert.Equal<uint>(31900' version.Version);  						})  					}'  					new  					{  						Version = 60002U'  						Message = "f9beb4d976657273696f6e000000000064000000358d493262ea0000010000000000000011b2d05000000000010000000000000000000000000000000000ffff000000000000000000000000000000000000000000000000ffff0000000000003b2eb35d8ce617650f2f5361746f7368693a302e372e322fc03e0300"'  						Test = new Action<object>(o=>  						{  							var version = (VersionPayload)o;  							Assert.Equal("/Satoshi:0.7.2/"' version.UserAgent);  							Assert.Equal(0x00033EC0' version.StartHeight);  						})  					}'  					new  					{  						Version = 70012U'  						Message = "f9beb4d976657261636b000000000000000000005df6e0e2"'  						Test = new Action<object>(o=>  							{  								var verack = (VerAckPayload)o;  							})  					}'  					new  					{  						Version = 60002U'  						Message = "f9beb4d96164647200000000000000001f000000ed52399b01e215104d010000000000000000000000000000000000ffff0a000001208d"'  						Test = new Action<object>(o=>  							{  								var addr = (AddrPayload)o;  								Assert.Single(addr.Addresses);  								//"Mon Dec 20 21:50:10 EST 2010"  								var date = TimeZoneInfo.ConvertTime(addr.Addresses[0].Time'EST);  								Assert.Equal(20'date.Day);  								Assert.Equal(12' date.Month);  								Assert.Equal(2010' date.Year);  								Assert.Equal(21' date.Hour);  							})  					}'    				};
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanHandshakeWithSeveralTemplateBehaviors,The following statement contains a magic number: node.Generate(101);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanHandshakeWithSeveralTemplateBehaviors,The following statement contains a magic number: Eventually(() =>  					{  						Assert.Equal(101' chain.Height);  					});
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanHandshakeWithSeveralTemplateBehaviors,The following statement contains a magic number: Assert.Equal(101' chain2.Height);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,WaitConnected,The following statement contains a magic number: CancellationTokenSource cts = new CancellationTokenSource(5000);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanGetMerkleRoot,The following statement contains a magic number: rpc.Generate(101);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanGetMerkleRoot,The following statement contains a magic number: batch.SendToAddressAsync(address' Money.Coins(0.5m));
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanGetMerkleRoot,The following statement contains a magic number: i < 20
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanGetMerkleRoot,The following statement contains a magic number: knownAddresses = knownAddresses.Take(10).ToList();
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanGetMerkleRoot,The following statement contains a magic number: Assert.Equal(21' block.Transactions.Count);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanGetMerkleRoot,The following statement contains a magic number: BloomFilter filter = new BloomFilter(1' 0.0001' 50' BloomFlags.UPDATE_NONE);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanGetMerkleRoot,The following statement contains a magic number: BloomFilter filter = new BloomFilter(1' 0.0001' 50' BloomFlags.UPDATE_NONE);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanGetMerkleRoot,The following statement contains a magic number: Assert.True(tree.GetMatchedTransactions().Count() >= 10);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanGetMerkleRoot,The following statement contains a magic number: Assert.True(matched.Count >= 10);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,MaxConnectionLimit,The following statement contains a magic number: tester.Server1.MaxConnections = 4;
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,MaxConnectionLimit,The following statement contains a magic number: TestUtils.Eventually(() => tester.Server1.ConnectedNodes.Count == 4);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,MaxConnectionLimit,The following statement contains a magic number: TestUtils.Eventually(() => tester.Server1.ConnectedNodes.Count == 4);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanMaintainChainWithChainBehavior,The following statement contains a magic number: builder.Nodes[0].Generate(600);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanMaintainChainWithChainBehavior,The following statement contains a magic number: var chain = node.GetChain(rpc.GetBlockHash(500));
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanMaintainChainWithChainBehavior,The following statement contains a magic number: Assert.True(chain.Height == 500);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanMaintainChainWithChainBehavior,The following statement contains a magic number: Assert.True(n1.MyVersion.StartHeight == 500);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanMaintainChainWithChainBehavior,The following statement contains a magic number: Assert.True(n2.PeerVersion.StartHeight == 500);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanMaintainChainWithChainBehavior,The following statement contains a magic number: TestUtils.Eventually(() => behavior.Chain.Height == 500);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanMaintainChainWithChainBehavior,The following statement contains a magic number: var chain2 = n2.GetChain(rpc.GetBlockHash(500));
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanMaintainChainWithChainBehavior,The following statement contains a magic number: Assert.True(chain2.Height == 500);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanMaintainChainWithChainBehavior,The following statement contains a magic number: var chain1 = n1.GetChain(rpc.GetBlockHash(500));
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanMaintainChainWithChainBehavior,The following statement contains a magic number: Assert.True(chain1.Height == 500);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanMaintainChainWithChainBehavior,The following statement contains a magic number: chain1 = n1.GetChain(rpc.GetBlockHash(499));
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanMaintainChainWithChainBehavior,The following statement contains a magic number: Assert.True(chain1.Height == 499);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanMaintainChainWithChainBehavior,The following statement contains a magic number: n1.Behaviors.Find<ChainBehavior>().SharedState.HighestValidatedPoW = chain1.GetBlock(300);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanMaintainChainWithChainBehavior,The following statement contains a magic number: chain1 = n2.GetChain(rpc.GetBlockHash(499));
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanMaintainChainWithChainBehavior,The following statement contains a magic number: Assert.True(chain1.Height == 300);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanMaintainChainWithSlimChainBehavior,The following statement contains a magic number: builder.Nodes[0].Generate(300);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanMaintainChainWithSlimChainBehavior,The following statement contains a magic number: builder.Nodes[1].Generate(600);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanMaintainChainWithSlimChainBehavior,The following statement contains a magic number: var slimChain = nodeClients[0].GetSlimChain(rpcs[0].GetBlockHash(200));
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanMaintainChainWithSlimChainBehavior,The following statement contains a magic number: Assert.True(slimChain.Height == 200);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,Eventually,The following statement contains a magic number: CancellationTokenSource cts = new CancellationTokenSource(30000);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanGetTransactionsFromMemPool,The following statement contains a magic number: rpc.Generate(101);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanConnectToRandomNode,The following statement contains a magic number: parameters.TemplateBehaviors.Add(new AddressManagerBehavior(addrman)  			{  				PeersToDiscover = 50  			});
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanGetBlocksWithProtocol,The following statement contains a magic number: rpc.Generate(50);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanGetBlocksWithProtocol,The following statement contains a magic number: var blocks = client.GetBlocks(chain.GetBlock(20).HashBlock).ToArray();
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanGetBlocksWithProtocol,The following statement contains a magic number: Assert.Equal(20' blocks.Length);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanGetBlocksWithProtocol,The following statement contains a magic number: Assert.Equal(chain.GetBlock(20).HashBlock' blocks.Last().Header.GetHash());
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanGetBlocksWithProtocol,The following statement contains a magic number: blocks = client.GetBlocksFromFork(chain.GetBlock(45)).ToArray();
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanGetBlocksWithProtocol,The following statement contains a magic number: Assert.Equal(5' blocks.Length);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanGetBlocksWithProtocol,The following statement contains a magic number: Assert.Equal(chain.GetBlock(50).HashBlock' blocks.Last().Header.GetHash());
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanGetBlocksWithProtocol,The following statement contains a magic number: Assert.Equal(chain.GetBlock(46).HashBlock' blocks.First().Header.GetHash());
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanGetMemPool,The following statement contains a magic number: rpc.Generate(102);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanGetMemPool,The following statement contains a magic number: i < 2
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanGetMemPool,The following statement contains a magic number: Assert.True(txIds.Length == 2);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,SynchronizeChainSurviveReorg,The following statement contains a magic number: node1.Generate(10);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,SynchronizeChainSurviveReorg,The following statement contains a magic number: Assert.Equal(10' chain.Height);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,SynchronizeChainSurviveReorg,The following statement contains a magic number: node2.Generate(12);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,SynchronizeChainSurviveReorg,The following statement contains a magic number: node2c.PollHeaderDelay = TimeSpan.FromSeconds(2);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,SynchronizeChainSurviveReorg,The following statement contains a magic number: Assert.Equal(12' chain.Height);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanGetChainsConcurrenty,The following statement contains a magic number: Task.Run(() =>  				{  					rpc.Generate(600);  					generating = false;  				});
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanGetChainsConcurrenty,The following statement contains a magic number: nodeClient.PollHeaderDelay = TimeSpan.FromSeconds(2);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanGetChainsConcurrenty,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanGetChainsConcurrenty,The following statement contains a magic number: var chains =  					Enumerable.Range(0' 5)  					.Select(_ => Task.Factory.StartNew(() =>  					{  						Thread.Sleep(rand.Next(0' 1000));  						return nodeClient.GetChain();  					}))  					.Select(t => t.Result)  					.ToArray();
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanGetChainsConcurrenty,The following statement contains a magic number: var chains =  					Enumerable.Range(0' 5)  					.Select(_ => Task.Factory.StartNew(() =>  					{  						Thread.Sleep(rand.Next(0' 1000));  						return nodeClient.GetChain();  					}))  					.Select(t => t.Result)  					.ToArray();
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanGetChainsConcurrenty,The following statement contains a magic number: Assert.Equal(600' c.Height);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,SyncAll,The following statement contains a magic number: Task.WaitAll(Enumerable.Range(0' 5)  								.Select(_ => Task.Factory.StartNew(() =>  								{  									Thread.Sleep(rand.Next(0' 1000));  									node.SynchronizeChain(chains[_]);  								})).ToArray());
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,SyncAll,The following statement contains a magic number: Task.WaitAll(Enumerable.Range(0' 5)  								.Select(_ => Task.Factory.StartNew(() =>  								{  									Thread.Sleep(rand.Next(0' 1000));  									node.SynchronizeChain(chains[_]);  								})).ToArray());
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,ServerDisconnectCorrectlyFromDroppingClient,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,ServerDisconnectCorrectlyFromDroppingClient,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,ServerDisconnectCorrectlyFromDroppingClient,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanReceiveHandshake,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanRespondToPong,The following statement contains a magic number: cancel.CancelAfter(10000);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,TestDifferentConnectionMethods,The following statement contains a magic number: var hosts = new[]  				{  				// Should works with IPv6  				"[2406:da18:f7c:4351:94e0:5b27:78c2:5111]:8333"'    				// Should works for onion  				"7xnmrhmkvptbcvpl.onion:8333"'    				// Should works for onioncat  				Utils.ParseEndpoint("7xnmrhmkvptbcvpl.onion:8333"' 8333).AsOnionCatIPEndpoint().ToEndpointString()'    				// Should works for ipv4  				"38.140.62.62"'    				// Should works for ipv4 mapped  				"[::ffff:38.140.62.62]"'    				// Should works for DNS names  				"ec2-52-14-64-82.us-east-2.compute.amazonaws.com"  				};
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,TestDifferentConnectionMethods,The following statement contains a magic number: var node = await Node.ConnectAsync(Network.Main' endpoint' new NodeConnectionParameters()  						{  							TemplateBehaviors =  							{  								new SocksSettingsBehavior(Utils.ParseEndpoint("localhost"' 9150)' onlyForOnionHosts' null' changeIpIdentities)  							}'  							ConnectCancellation = cancellationToken.Token  						});
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanExchangeFastPingPong,The following statement contains a magic number: n1.Behaviors.Add(new PingPongBehavior()  				{  					PingInterval = TimeSpan.FromSeconds(0.1)'  					TimeoutInterval = TimeSpan.FromSeconds(0.8)  				});
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanExchangeFastPingPong,The following statement contains a magic number: n1.Behaviors.Add(new PingPongBehavior()  				{  					PingInterval = TimeSpan.FromSeconds(0.1)'  					TimeoutInterval = TimeSpan.FromSeconds(0.8)  				});
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanExchangeFastPingPong,The following statement contains a magic number: n2.Behaviors.Add(new PingPongBehavior()  				{  					PingInterval = TimeSpan.FromSeconds(0.1)'  					TimeoutInterval = TimeSpan.FromSeconds(0.5)  				});
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanExchangeFastPingPong,The following statement contains a magic number: n2.Behaviors.Add(new PingPongBehavior()  				{  					PingInterval = TimeSpan.FromSeconds(0.1)'  					TimeoutInterval = TimeSpan.FromSeconds(0.5)  				});
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanExchangeFastPingPong,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanExchangeFastPingPong,The following statement contains a magic number: Thread.Sleep(1200);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanConnectMultipleTimeToServer,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanConnectMultipleTimeToServer,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanConnectMultipleTimeToServer,The following statement contains a magic number: Assert.Equal(2' nodeCount);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanConnectMultipleTimeToServer,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanConnectMultipleTimeToServer,The following statement contains a magic number: Assert.Equal(2' nodeCount);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanConnectMultipleTimeToServer,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanDownloadHeaders,The following statement contains a magic number: builder.Nodes[0].Generate(50);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanDownloadHeaders,The following statement contains a magic number: var subChain = node.GetChain(result.GetBlock(10).HashBlock);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanDownloadHeaders,The following statement contains a magic number: Assert.Equal(10' subChain.Height);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanDownloadBlocks,The following statement contains a magic number: builder.Nodes[0].Generate(50);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanDownloadBlocks,The following statement contains a magic number: chain.SetTip(chain.GetBlock(9));
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanDownloadBlocks,The following statement contains a magic number: Assert.Equal(10' blocks.Count);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanDownloadLastBlocks,The following statement contains a magic number: builder.Nodes[0].Generate(150);
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanDownloadLastBlocks,The following statement contains a magic number: var subChain = chain.ToEnumerable(true).Take(100).Select(s => s.HashBlock).ToArray();
Magic Number,NBitcoin.Tests,ProtocolTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\ProtocolTests.cs,CanDownloadLastBlocks,The following statement contains a magic number: Assert.True(blocks.Count == 100);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldCalculateBalanceOfHDKey,The following statement contains a magic number: funding.Outputs.Add(Money.Coins(1.5m)' bob);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldCalculateBalanceOfHDKey,The following statement contains a magic number: builder.Send(new Key()' Money.Coins(0.2m));
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldCalculateBalanceOfHDKey,The following statement contains a magic number: builder.Send(new Key()' Money.Coins(0.1m));
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldCalculateBalanceOfHDKey,The following statement contains a magic number: builder.Send(bob' Money.Coins(0.123m));
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldCalculateBalanceOfHDKey,The following statement contains a magic number: builder.Send(new Key()' Money.Coins(0.25m));
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldCalculateBalanceOfHDKey,The following statement contains a magic number: builder.Send(new Key()' Money.Coins(0.01m));
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldCalculateBalanceOfHDKey,The following statement contains a magic number: builder.SendFees(Money.Coins(0.001m));
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldCalculateBalanceOfHDKey,The following statement contains a magic number: var expectedChange = aliceCoin.Amount - (Money.Coins(0.2m) + Money.Coins(0.1m) + Money.Coins(0.123m));
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldCalculateBalanceOfHDKey,The following statement contains a magic number: var expectedChange = aliceCoin.Amount - (Money.Coins(0.2m) + Money.Coins(0.1m) + Money.Coins(0.123m));
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldCalculateBalanceOfHDKey,The following statement contains a magic number: var expectedChange = aliceCoin.Amount - (Money.Coins(0.2m) + Money.Coins(0.1m) + Money.Coins(0.123m));
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldCalculateBalanceOfHDKey,The following statement contains a magic number: expectedChange = bobCoin.Amount - (Money.Coins(0.25m) + Money.Coins(0.01m) + Money.Coins(0.001m)) + Money.Coins(0.123m);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldCalculateBalanceOfHDKey,The following statement contains a magic number: expectedChange = bobCoin.Amount - (Money.Coins(0.25m) + Money.Coins(0.01m) + Money.Coins(0.001m)) + Money.Coins(0.123m);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldCalculateBalanceOfHDKey,The following statement contains a magic number: expectedChange = bobCoin.Amount - (Money.Coins(0.25m) + Money.Coins(0.01m) + Money.Coins(0.001m)) + Money.Coins(0.123m);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldCalculateBalanceOfHDKey,The following statement contains a magic number: expectedChange = bobCoin.Amount - (Money.Coins(0.25m) + Money.Coins(0.01m) + Money.Coins(0.001m)) + Money.Coins(0.123m);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldCalculateBalanceOfHDKey,The following statement contains a magic number: Assert.Equal(Money.Coins(0.001m)' fee);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldPreserveOriginalTxPropertyAsPossible,The following statement contains a magic number: var redeem = PayToMultiSigTemplate.Instance.GenerateScriptPubKey(3' keys.Select(k => k.PubKey).ToArray());
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldPreserveOriginalTxPropertyAsPossible,The following statement contains a magic number: Assert.NotNull(psbt.Inputs[2].RedeemScript);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldPreserveOriginalTxPropertyAsPossible,The following statement contains a magic number: Assert.NotNull(psbt.Inputs[3].WitnessScript);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldPreserveOriginalTxPropertyAsPossible,The following statement contains a magic number: Assert.NotNull(psbt.Inputs[5].WitnessScript);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldPreserveOriginalTxPropertyAsPossible,The following statement contains a magic number: Assert.NotNull(psbt.Inputs[5].RedeemScript);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldPreserveOriginalTxPropertyAsPossible,The following statement contains a magic number: Assert.Null(psbt.Inputs[2].RedeemScript);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldPreserveOriginalTxPropertyAsPossible,The following statement contains a magic number: Assert.Null(psbt.Inputs[3].WitnessScript);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldPreserveOriginalTxPropertyAsPossible,The following statement contains a magic number: Assert.NotNull(psbt.Inputs[4].FinalScriptSig);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldPreserveOriginalTxPropertyAsPossible,The following statement contains a magic number: Assert.NotNull(psbt.Inputs[4].FinalScriptWitness);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldPreserveOriginalTxPropertyAsPossible,The following statement contains a magic number: Assert.Null(psbt.Inputs[5].WitnessScript);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldPreserveOriginalTxPropertyAsPossible,The following statement contains a magic number: Assert.Null(psbt.Inputs[5].RedeemScript);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldPreserveOriginalTxPropertyAsPossible,The following statement contains a magic number: Assert.Empty(psbt.Inputs[2].PartialSigs);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldPreserveOriginalTxPropertyAsPossible,The following statement contains a magic number: Assert.Empty(psbt.Inputs[3].PartialSigs);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldPreserveOriginalTxPropertyAsPossible,The following statement contains a magic number: Assert.Empty(psbt.Inputs[5].PartialSigs);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: var redeem = PayToMultiSigTemplate.Instance.GenerateScriptPubKey(3' keys.Select(k => k.PubKey).ToArray());
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: Assert.Null(psbtWithCoins.Inputs[2].WitnessUtxo);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: Assert.NotNull(psbtWithCoins.Inputs[3].WitnessUtxo);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: Assert.NotNull(psbtWithCoins.Inputs[4].WitnessUtxo);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: Assert.NotNull(psbtWithCoins.Inputs[5].WitnessUtxo);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: Assert.NotNull(psbtWithCoins.Inputs[2].RedeemScript);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: Assert.NotNull(psbtWithCoins.Inputs[4].RedeemScript);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: Assert.NotNull(psbtWithCoins.Inputs[5].RedeemScript);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: Assert.NotNull(psbtWithCoins.Inputs[3].WitnessScript);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: Assert.NotNull(psbtWithCoins.Inputs[5].WitnessScript);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: Assert.Empty(signedPSBTWithCoins.Inputs[2].PartialSigs);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: Assert.Single(signedPSBTWithCoins.Inputs[3].PartialSigs);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: Assert.Single(signedPSBTWithCoins.Inputs[4].PartialSigs);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: Assert.Single(signedPSBTWithCoins.Inputs[5].PartialSigs);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: Assert.Equal(4' ex.Errors.GroupBy(e => e.InputIndex).Count());
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: Assert.Null(psbtWithTXs.Inputs[2].WitnessUtxo);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: Assert.NotNull(psbtWithTXs.Inputs[2].NonWitnessUtxo);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: Assert.NotNull(psbtWithTXs.Inputs[3].WitnessUtxo);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: Assert.NotNull(psbtWithTXs.Inputs[4].WitnessUtxo);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: Assert.NotNull(psbtWithTXs.Inputs[5].WitnessUtxo);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: psbtWithTXs.SignWithKeys(keys[1]' keys[2]);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: Assert.Single(whollySignedPSBT.Inputs[4].PartialSigs);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: Assert.Equal(3' whollySignedPSBT.Inputs[2].PartialSigs.Count);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: Assert.Equal(3' whollySignedPSBT.Inputs[2].PartialSigs.Count);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: Assert.Equal(3' whollySignedPSBT.Inputs[2].PartialSigs.Values.Distinct().Count());
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: Assert.Equal(3' whollySignedPSBT.Inputs[2].PartialSigs.Values.Distinct().Count());
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: Assert.Equal(3' whollySignedPSBT.Inputs[3].PartialSigs.Count);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: Assert.Equal(3' whollySignedPSBT.Inputs[3].PartialSigs.Count);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: Assert.Equal(3' whollySignedPSBT.Inputs[3].PartialSigs.Values.Distinct().Count());
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: Assert.Equal(3' whollySignedPSBT.Inputs[3].PartialSigs.Values.Distinct().Count());
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: Assert.Equal(3' whollySignedPSBT.Inputs[5].PartialSigs.Count);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: Assert.Equal(3' whollySignedPSBT.Inputs[5].PartialSigs.Count);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: Assert.Equal(3' whollySignedPSBT.Inputs[5].PartialSigs.Values.Distinct().Count());
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanUpdate,The following statement contains a magic number: Assert.Equal(3' whollySignedPSBT.Inputs[5].PartialSigs.Values.Distinct().Count());
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldCaptureExceptionInFinalization,The following statement contains a magic number: var redeem = PayToMultiSigTemplate.Instance.GenerateScriptPubKey(3' keys.Select(k => k.PubKey).ToArray());
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldCaptureExceptionInFinalization,The following statement contains a magic number: Assert.Equal(6' ex.Errors.GroupBy(e => e.InputIndex).Count());
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,AddingScriptCoinShouldResultMoreInfoThanAddingSeparatelyInCaseOfP2SH,The following statement contains a magic number: var redeem = PayToMultiSigTemplate.Instance.GenerateScriptPubKey(3' keys.Select(k => k.PubKey).ToArray());
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,AddingScriptCoinShouldResultMoreInfoThanAddingSeparatelyInCaseOfP2SH,The following statement contains a magic number: i == 4
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,AddingScriptCoinShouldResultMoreInfoThanAddingSeparatelyInCaseOfP2SH,The following statement contains a magic number: i < 6
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,AddingScriptCoinShouldResultMoreInfoThanAddingSeparatelyInCaseOfP2SH,The following statement contains a magic number: i == 5
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,AddingScriptCoinShouldResultMoreInfoThanAddingSeparatelyInCaseOfP2SH,The following statement contains a magic number: i == 2 || i == 5
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,AddingScriptCoinShouldResultMoreInfoThanAddingSeparatelyInCaseOfP2SH,The following statement contains a magic number: i == 2 || i == 5
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,AddingScriptCoinShouldResultMoreInfoThanAddingSeparatelyInCaseOfP2SH,The following statement contains a magic number: i < 6
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldPassTheLongestTestInBIP174,The following statement contains a magic number: tx.Version = 2;
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldPassTheLongestTestInBIP174,The following statement contains a magic number: i < 6
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldPassTheLongestTestInBIP174,The following statement contains a magic number: Assert.Equal(Money.Coins(0.00010000m)' fee);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldPassTheLongestTestInBIP174,The following statement contains a magic number: Assert.Equal(new FeeRate(21.6m).SatoshiPerByte' feeRate.SatoshiPerByte' 1);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldPassTheLongestTestInBIP174,The following statement contains a magic number: Assert.Equal(Money.Coins(0.00010000m)' fee);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldPassTheLongestTestInBIP174,The following statement contains a magic number: Assert.Equal(new FeeRate(21.6m).SatoshiPerByte' feeRate.SatoshiPerByte' 2);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,ShouldPassTheLongestTestInBIP174,The following statement contains a magic number: Assert.Equal(new FeeRate(21.6m).SatoshiPerByte' feeRate.SatoshiPerByte' 2);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanRebaseKeypathInPSBT,The following statement contains a magic number: funding.Outputs.Add(Money.Coins(2.0m)' accountExtKey.Derive(0 | hardenedFlag).ScriptPubKey);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanRebaseKeypathInPSBT,The following statement contains a magic number: funding.Outputs.Add(Money.Coins(2.0m)' accountExtKey.Derive(1 | hardenedFlag).ScriptPubKey);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanRebaseKeypathInPSBT,The following statement contains a magic number: tx.Version = 2;
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanRebaseKeypathInPSBT,The following statement contains a magic number: tx.Outputs.Add(Money.Coins(1.49990000m)' new Script(Encoders.Hex.DecodeData("0014d85c2b71d0060b09c9886aeb815e50991dda124d")));
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanFollowBIPExample,The following statement contains a magic number: tx.Version = 2;
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CanFollowBIPExample,The following statement contains a magic number: tx.Outputs.Add(Money.Coins(1.49990000m)' new Script(Encoders.Hex.DecodeData("0014d85c2b71d0060b09c9886aeb815e50991dda124d")));
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,DummyFundsToCoins,The following statement contains a magic number: coins[2] = redeem != null ? new ScriptCoin(barecoins[2]' redeem) : barecoins[2];
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,DummyFundsToCoins,The following statement contains a magic number: coins[2] = redeem != null ? new ScriptCoin(barecoins[2]' redeem) : barecoins[2];
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,DummyFundsToCoins,The following statement contains a magic number: coins[2] = redeem != null ? new ScriptCoin(barecoins[2]' redeem) : barecoins[2];
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,DummyFundsToCoins,The following statement contains a magic number: coins[3] = redeem != null ? new ScriptCoin(barecoins[3]' redeem) : barecoins[3];
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,DummyFundsToCoins,The following statement contains a magic number: coins[3] = redeem != null ? new ScriptCoin(barecoins[3]' redeem) : barecoins[3];
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,DummyFundsToCoins,The following statement contains a magic number: coins[3] = redeem != null ? new ScriptCoin(barecoins[3]' redeem) : barecoins[3];
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,DummyFundsToCoins,The following statement contains a magic number: coins[4] = key != null ? new ScriptCoin(barecoins[4]' key.PubKey.WitHash.ScriptPubKey) : barecoins[4];
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,DummyFundsToCoins,The following statement contains a magic number: coins[4] = key != null ? new ScriptCoin(barecoins[4]' key.PubKey.WitHash.ScriptPubKey) : barecoins[4];
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,DummyFundsToCoins,The following statement contains a magic number: coins[4] = key != null ? new ScriptCoin(barecoins[4]' key.PubKey.WitHash.ScriptPubKey) : barecoins[4];
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,DummyFundsToCoins,The following statement contains a magic number: coins[5] = redeem != null ? new ScriptCoin(barecoins[5]' redeem) : barecoins[5];
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,DummyFundsToCoins,The following statement contains a magic number: coins[5] = redeem != null ? new ScriptCoin(barecoins[5]' redeem) : barecoins[5];
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,DummyFundsToCoins,The following statement contains a magic number: coins[5] = redeem != null ? new ScriptCoin(barecoins[5]' redeem) : barecoins[5];
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CreateTxToSpendFunds,The following statement contains a magic number: tx.Inputs.Add(new OutPoint(funds[2].GetHash()' 0));
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CreateTxToSpendFunds,The following statement contains a magic number: tx.Inputs.Add(new OutPoint(funds[3].GetHash()' 0));
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CreateTxToSpendFunds,The following statement contains a magic number: tx.Inputs.Add(new OutPoint(funds[4].GetHash()' 0));
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CreateTxToSpendFunds,The following statement contains a magic number: var dummyOut = new TxOut(Money.Coins(0.599m)' keys[0]);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CreateTxToSpendFunds,The following statement contains a magic number: tx.Inputs[2].ScriptSig = emptySigPush + Op.GetPushOp(redeem.ToBytes());
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CreateTxToSpendFunds,The following statement contains a magic number: tx.Inputs[3].WitScript = PayToWitScriptHashTemplate.Instance.GenerateWitScript(emptySigPush' redeem);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CreateTxToSpendFunds,The following statement contains a magic number: tx.Inputs[4].ScriptSig = new Script(Op.GetPushOp(keys[0].PubKey.WitHash.ScriptPubKey.ToBytes()));
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CreateTxToSpendFunds,The following statement contains a magic number: tx.Inputs[4].WitScript = PayToWitPubKeyHashTemplate.Instance.GenerateWitScript(null' keys[0].PubKey);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CreateTxToSpendFunds,The following statement contains a magic number: tx.Inputs[5].ScriptSig = new Script(Op.GetPushOp(redeem.WitHash.ScriptPubKey.ToBytes()));
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CreateTxToSpendFunds,The following statement contains a magic number: tx.Inputs[5].WitScript = PayToWitScriptHashTemplate.Instance.GenerateWitScript(emptySigPush' redeem);
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CreateDummyFunds,The following statement contains a magic number: tx1.Inputs.Add(TxIn.CreateCoinbase(200));
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CreateDummyFunds,The following statement contains a magic number: tx1.Outputs.Add(new TxOut(Money.Coins(0.1m)' keyForOutput[0].PubKey.Hash));
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CreateDummyFunds,The following statement contains a magic number: tx1.Outputs.Add(new TxOut(Money.Coins(0.1m)' keyForOutput[0].PubKey.WitHash));
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CreateDummyFunds,The following statement contains a magic number: tx2.Inputs.Add(TxIn.CreateCoinbase(200));
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CreateDummyFunds,The following statement contains a magic number: tx2.Outputs.Add(new TxOut(Money.Coins(0.1m)' redeem.Hash));
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CreateDummyFunds,The following statement contains a magic number: tx3.Inputs.Add(TxIn.CreateCoinbase(200));
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CreateDummyFunds,The following statement contains a magic number: tx3.Outputs.Add(new TxOut(Money.Coins(0.1m)' redeem.WitHash));
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CreateDummyFunds,The following statement contains a magic number: tx4.Inputs.Add(TxIn.CreateCoinbase(200));
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CreateDummyFunds,The following statement contains a magic number: tx4.Outputs.Add(new TxOut(Money.Coins(0.1m)' keyForOutput[0].PubKey.WitHash.ScriptPubKey.Hash));
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CreateDummyFunds,The following statement contains a magic number: tx5.Inputs.Add(TxIn.CreateCoinbase(200));
Magic Number,NBitcoin.Tests,PSBTTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\PSBTTests.cs,CreateDummyFunds,The following statement contains a magic number: tx5.Outputs.Add(new TxOut(Money.Coins(0.1m)' redeem.WitHash.ScriptPubKey.Hash.ScriptPubKey));
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,RandomCoin,The following statement contains a magic number: return new Coin(new uint256(RandomUtils.GetBytes(32))' 0' amount' bob.PubKey.Hash.ScriptPubKey);
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,RandomCoin,The following statement contains a magic number: return new Coin(new uint256(RandomUtils.GetBytes(32))' 0' amount' bob.PubKey.WitHash.ScriptPubKey);
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,RandomCoin,The following statement contains a magic number: return new Coin(new uint256(RandomUtils.GetBytes(32))' 0' amount' bob.PubKey.ScriptPubKey.Hash.ScriptPubKey).ToScriptCoin(bob.PubKey.ScriptPubKey);
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,RandomCoin,The following statement contains a magic number: return new Coin(new uint256(RandomUtils.GetBytes(32))' 0' amount' bob.PubKey.ScriptPubKey.WitHash.ScriptPubKey.Hash.ScriptPubKey).ToScriptCoin(bob.PubKey.ScriptPubKey);
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,RandomCoin,The following statement contains a magic number: return new Coin(new uint256(RandomUtils.GetBytes(32))' 0' amount' bob.PubKey.ScriptPubKey.WitHash.ScriptPubKey).ToScriptCoin(bob.PubKey.ScriptPubKey);
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,RandomCoin,The following statement contains a magic number: return new Coin(new uint256(RandomUtils.GetBytes(32))' 0' amount' p2pkh ? bob.PubKey.Hash.ScriptPubKey : bob.PubKey.WitHash.ScriptPubKey);
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,RandomCoin2,The following statement contains a magic number: return new Coin(new uint256(RandomUtils.GetBytes(32))' 0' amount' p2pkh ? bob.PubKey.Hash.ScriptPubKey : bob.PubKey.WitHash.ScriptPubKey);
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,CanBuildTransactionWithSubstractFeeAndSendEstimatedFees,The following statement contains a magic number: builder.SendEstimatedFees(new FeeRate(Money.Satoshis(100)' 1));
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,CanBuildTransactionWithSubstractFeeAndSendEstimatedFees,The following statement contains a magic number: var v = VerifyFees(builder' new FeeRate(Money.Satoshis(100)' 1));
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,CanBuildTransactionWithSubstractFeeAndSendEstimatedFees,The following statement contains a magic number: Assert.True(v.witSize - v.expectedWitsize < 4);
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,CanBuildTransactionWithSubstractFeeAndSendEstimatedFees,The following statement contains a magic number: var signersCount = 1 + (int)(RandomUtils.GetUInt32() % 6);
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,CanBuildTransactionWithSubstractFeeAndSendEstimatedFees,The following statement contains a magic number: builder.AddCoins(RandomCoin(signers' Money.Coins(1)' (CoinType)(RandomUtils.GetUInt32() % 5)));
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,CanBuildTransactionWithSubstractFeeAndSendEstimatedFees,The following statement contains a magic number: builder.Send(new Key().ScriptPubKey' Money.Coins(0.9m));
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,CanBuildTransactionWithSubstractFeeAndSendEstimatedFees,The following statement contains a magic number: ii < 1 + RandomUtils.GetUInt32() % 10
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,CanBuildTransactionWithSubstractFeeAndSendEstimatedFees,The following statement contains a magic number: i < 100
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,VerifyFees,The following statement contains a magic number: Assert.True(feeRate.FeePerK.Almost(result.GetFeeRate(builder.FindSpentCoins(result)).FeePerK' 0.02m));
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,TwoGroupsCanSendToSameDestination,The following statement contains a magic number: Transaction tx = builder  				.AddCoins(RandomCoin2(alice' Money.Coins(1.0m)))  				.AddKeys(alice)  				.Send(bob' Money.Coins(0.3m))  				.SetChange(alice)  				.Then()  				.AddCoins(RandomCoin2(carol' Money.Coins(1.1m)))  				.AddKeys(carol)  				.Send(bob' Money.Coins(0.1m))  				.SetChange(carol)  				.BuildTransaction(sign: true);
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,TwoGroupsCanSendToSameDestination,The following statement contains a magic number: Transaction tx = builder  				.AddCoins(RandomCoin2(alice' Money.Coins(1.0m)))  				.AddKeys(alice)  				.Send(bob' Money.Coins(0.3m))  				.SetChange(alice)  				.Then()  				.AddCoins(RandomCoin2(carol' Money.Coins(1.1m)))  				.AddKeys(carol)  				.Send(bob' Money.Coins(0.1m))  				.SetChange(carol)  				.BuildTransaction(sign: true);
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,TwoGroupsCanSendToSameDestination,The following statement contains a magic number: Transaction tx = builder  				.AddCoins(RandomCoin2(alice' Money.Coins(1.0m)))  				.AddKeys(alice)  				.Send(bob' Money.Coins(0.3m))  				.SetChange(alice)  				.Then()  				.AddCoins(RandomCoin2(carol' Money.Coins(1.1m)))  				.AddKeys(carol)  				.Send(bob' Money.Coins(0.1m))  				.SetChange(carol)  				.BuildTransaction(sign: true);
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,TwoGroupsCanSendToSameDestination,The following statement contains a magic number: Assert.Equal(2' tx.Inputs.Count);
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,TwoGroupsCanSendToSameDestination,The following statement contains a magic number: Assert.Equal(3' tx.Outputs.Count);
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,TwoGroupsCanSendToSameDestination,The following statement contains a magic number: Assert.Single(tx.Outputs  								.Where(o => o.ScriptPubKey == bob.ScriptPubKey)  								.Where(o => o.Value == Money.Coins(0.3m) + Money.Coins(0.1m))  );
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,TwoGroupsCanSendToSameDestination,The following statement contains a magic number: Assert.Single(tx.Outputs  								.Where(o => o.ScriptPubKey == bob.ScriptPubKey)  								.Where(o => o.Value == Money.Coins(0.3m) + Money.Coins(0.1m))  );
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,TwoGroupsCanSendToSameDestination,The following statement contains a magic number: Assert.Single(tx.Outputs  							  .Where(o => o.ScriptPubKey == alice.ScriptPubKey)  							  .Where(o => o.Value == Money.Coins(0.7m))  );
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,CanCacheNoSqlRepository,The following statement contains a magic number: byte[] data1 = new byte[] { 1' 2' 3' 4' 5' 6 };
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,CanCacheNoSqlRepository,The following statement contains a magic number: byte[] data1 = new byte[] { 1' 2' 3' 4' 5' 6 };
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,CanCacheNoSqlRepository,The following statement contains a magic number: byte[] data1 = new byte[] { 1' 2' 3' 4' 5' 6 };
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,CanCacheNoSqlRepository,The following statement contains a magic number: byte[] data1 = new byte[] { 1' 2' 3' 4' 5' 6 };
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,CanCacheNoSqlRepository,The following statement contains a magic number: byte[] data1 = new byte[] { 1' 2' 3' 4' 5' 6 };
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,CanCacheNoSqlRepository,The following statement contains a magic number: byte[] data2 = new byte[] { 11' 22' 33' 4' 5' 66 };
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,CanCacheNoSqlRepository,The following statement contains a magic number: byte[] data2 = new byte[] { 11' 22' 33' 4' 5' 66 };
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,CanCacheNoSqlRepository,The following statement contains a magic number: byte[] data2 = new byte[] { 11' 22' 33' 4' 5' 66 };
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,CanCacheNoSqlRepository,The following statement contains a magic number: byte[] data2 = new byte[] { 11' 22' 33' 4' 5' 66 };
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,CanCacheNoSqlRepository,The following statement contains a magic number: byte[] data2 = new byte[] { 11' 22' 33' 4' 5' 66 };
Magic Number,NBitcoin.Tests,RepositoryTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RepositoryTests.cs,CanCacheNoSqlRepository,The following statement contains a magic number: byte[] data2 = new byte[] { 11' 22' 33' 4' 5' 66 };
Magic Number,NBitcoin.Tests,RestClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RestClientTests.cs,CanCalculateChainWork,The following statement contains a magic number: rpc.Generate(10);
Magic Number,NBitcoin.Tests,RestClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RestClientTests.cs,CanGetBlockHeader,The following statement contains a magic number: rpc.Generate(2);
Magic Number,NBitcoin.Tests,RestClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RestClientTests.cs,CanGetBlockHeader,The following statement contains a magic number: var result = client.GetBlockHeadersAsync(RegNetGenesisBlock.GetHash()' 3).Result;
Magic Number,NBitcoin.Tests,RestClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RestClientTests.cs,CanGetBlockHeader,The following statement contains a magic number: Assert.Equal(3' headers.Length);
Magic Number,NBitcoin.Tests,RestClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RestClientTests.cs,CanGetTransaction,The following statement contains a magic number: Assert.Equal(Money.Coins(50)' tx.TotalOut);
Magic Number,NBitcoin.Tests,RestClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RestClientTests.cs,CanGetUTXOsMempool,The following statement contains a magic number: rpc.Generate(102);
Magic Number,NBitcoin.Tests,RestClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RestClientTests.cs,CanGetUTXOsMempool,The following statement contains a magic number: rpc.SendToAddress(k.GetAddress(ScriptPubKeyType.Legacy)' Money.Coins(50m));
Magic Number,NBitcoin.Tests,RestClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RestClientTests.cs,CanGetUTXOsMempool,The following statement contains a magic number: c = rpc.ListUnspent(0' 999999' k.GetAddress(ScriptPubKeyType.Legacy)).First();
Magic Number,NBitcoin.Tests,RestClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RestClientTests.cs,CanGetUTXOsMempool,The following statement contains a magic number: Assert.Equal(Money.Coins(50m)' utxos.Outputs[0].Output.Value);
Magic Number,NBitcoin.Tests,RestClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RestClientTests.cs,ThrowsRestApiClientException,The following statement contains a magic number: var result = client.GetBlockHeaders(unexistingBlockId' 3);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanGetRawMemPool,The following statement contains a magic number: node.Generate(101);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanGetMemPool,The following statement contains a magic number: node.Generate(101);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanUseAsyncRPC,The following statement contains a magic number: node.Generate(10);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanUseAsyncRPC,The following statement contains a magic number: Assert.Equal(10' blkCount);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanSignWithKey,The following statement contains a magic number: node.Generate(101);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanScanTxoutSet,The following statement contains a magic number: node.Generate(101);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanScanTxoutSet,The following statement contains a magic number: Assert.Equal(101' result.SearchedItems);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanScanTxoutSet,The following statement contains a magic number: Assert.True(result.SearchedItems > 100);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanScanTxoutSet,The following statement contains a magic number: Assert.Equal(102' result.Outputs[0].Height);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanSignWithWallet,The following statement contains a magic number: node.Generate(101);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanRBFTransaction,The following statement contains a magic number: node.Generate(101);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanRBFTransaction,The following statement contains a magic number: var txid = rpc.SendToAddress(address' Money.Coins(2)' null' null' false' true);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanGetTransactionInfo,The following statement contains a magic number: var blocks = node.Generate(101);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanGetTransactionInfo,The following statement contains a magic number: Assert.Equal(101U' txInfo.Confirmations);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanGetTxoutSetInfoAsync,The following statement contains a magic number: const int BLOCKS_TO_GENERATE = 10;
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanGetTxoutSetInfoAsync,The following statement contains a magic number: Assert.Equal(BLOCKS_TO_GENERATE * 50M' response.TotalAmount.ToDecimal(MoneyUnit.BTC));
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanGetTxOutFromRPCAsync,The following statement contains a magic number: var blocksToGenerate = 101;
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanGetTxOutFromRPCAsync,The following statement contains a magic number: Assert.Equal(Money.Coins(50)' getTxOutResponse.TxOut.Value);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanGetTxOutFromRPCAsync,The following statement contains a magic number: Assert.Equal(Money.Coins(49)' getTxOutResponse.TxOut.Value);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,EstimateSmartFee,The following statement contains a magic number: node.Generate(101);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,EstimateSmartFee,The following statement contains a magic number: Assert.Equal(Money.Coins(50m)' rpc.GetBalance(1' false));
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,EstimateSmartFee,The following statement contains a magic number: Assert.Equal(Money.Coins(50m)' rpc.GetBalance());
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,TryEstimateSmartFee,The following statement contains a magic number: node.Generate(101);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,TestFundRawTransaction,The following statement contains a magic number: rpc.Generate(101);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,TestFundRawTransaction,The following statement contains a magic number: result = rpc.FundRawTransaction(tx' new FundRawTransactionOptions()  				{  					FeeRate = new FeeRate(Money.Satoshis(50)' 1)'  					IncludeWatching = true'  					ChangeAddress = change'  				});
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,TestFundRawTransactionResult,The following statement contains a magic number: Assert.Equal(Money.Coins(50m) - result.Transaction.Outputs.Select(txout => txout.Value).Sum()' result.Fee);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,InvalidateBlockToRPC,The following statement contains a magic number: var generatedBlockHashes = rpc.Generate(2);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanUseBatchedRequests,The following statement contains a magic number: var blocks = rpc.Generate(10);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanUseBatchedRequests,The following statement contains a magic number: i < 11
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanUseBatchedRequests,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanUseBatchedRequests,The following statement contains a magic number: requests.Add(rpc.GetBlockHashAsync(10));
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanUseBatchedRequests,The following statement contains a magic number: requests.Add(rpc.GetBlockHashAsync(11));
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanUseBatchedRequests,The following statement contains a magic number: requests.Add(rpc.GetBlockHashAsync(9));
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanUseBatchedRequests,The following statement contains a magic number: requests.Add(rpc.GetBlockHashAsync(8));
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanUseBatchedRequests,The following statement contains a magic number: Assert.Equal(TaskStatus.RanToCompletion' requests[2].Status);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanUseBatchedRequests,The following statement contains a magic number: Assert.Equal(TaskStatus.RanToCompletion' requests[3].Status);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanUseBatchedRequests,The following statement contains a magic number: requests.Add(rpc.GetBlockHashAsync(10));
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanUseBatchedRequests,The following statement contains a magic number: requests.Add(rpc.GetBlockHashAsync(11));
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanUseBatchedRequests,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanGetMemPoolEntry,The following statement contains a magic number: node.Generate(101);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanGetMemPoolEntry,The following statement contains a magic number: var amount = Money.Coins(40.0m);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanGetMemPoolEntry,The following statement contains a magic number: var fee = Money.Coins(0.0001m);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanGetMemPoolEntry,The following statement contains a magic number: amount = amount / 2 - fee;
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanGetMemPoolEntry,The following statement contains a magic number: i < 10
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanGetMemPoolEntry,The following statement contains a magic number: var mempoolEntry = rpc.GetMempoolEntry(txs[3]);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanGetMemPoolEntry,The following statement contains a magic number: Assert.Equal(4' mempoolEntry.AncestorCount);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanGetMemPoolEntry,The following statement contains a magic number: Assert.Equal(7' mempoolEntry.DescendantCount);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanGetMemPoolEntry,The following statement contains a magic number: var funding_spent = rpc.GetRawTransaction(txs[2]);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanGetMemPoolEntry,The following statement contains a magic number: Assert.Equal(2' mempoolEntry.AncestorCount);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanGetMemPoolEntry,The following statement contains a magic number: Assert.Equal(10' mempoolEntry.DescendantCount);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanGetMemPoolEntry,The following statement contains a magic number: Assert.Equal(2' (int)mempoolEntry.SpentBy.Length);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanGetMemPoolEntry,The following statement contains a magic number: Assert.Equal(3' mempoolEntry.AncestorCount);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanGetMemPoolEntry,The following statement contains a magic number: mempoolEntry = rpc.GetMempoolEntry(txs[3]);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanGetMemPoolEntry,The following statement contains a magic number: Assert.Equal(4' mempoolEntry.AncestorCount);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanGetMemPoolEntry,The following statement contains a magic number: Assert.Equal(7' mempoolEntry.DescendantCount);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,GetFilter,The following statement contains a magic number: node.Generate(101);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,GetFilter,The following statement contains a magic number: byte[] FilterKey(uint256 hash) => hash.ToBytes().SafeSubarray(0' 16);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,GetFilter,The following statement contains a magic number: Assert.False(blockFilter.Filter.MatchAny(new[] { RandomUtils.GetBytes(20) }' FilterKey(blockHash) ));
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,GetFilter,The following statement contains a magic number: height < 101
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanTestMempoolAccept,The following statement contains a magic number: node.Generate(101);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanTestMempoolAccept,The following statement contains a magic number: var fee = Money.Coins(0.0001m);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,onioncat_test,The following statement contains a magic number: var ip1 = Utils.ParseEndpoint("FD87:D87E:EB43:edb1:8e4:3588:e546:35ca"' 10);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,onioncat_test,The following statement contains a magic number: var ip2 = Utils.ParseEndpoint("5wyqrzbvrdsumnok.onion"' 10);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,onioncat_test,The following statement contains a magic number: var torv3 = Utils.ParseEndpoint("explorerzydxu5ecjrkwceayqybizmpjjznk5izmitf2modhcusuqlid.onion"' 10);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,onioncat_test,The following statement contains a magic number: ip2 = Utils.ParseEndpoint("5wyqrzbvrdsumnok.onion"' 10);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanParseEndpoint,The following statement contains a magic number: var endpoint = Utils.ParseEndpoint("google.com:94"' 90);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanParseEndpoint,The following statement contains a magic number: Assert.Equal(94' Assert.IsType<DnsEndPoint>(endpoint).Port);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanParseEndpoint,The following statement contains a magic number: endpoint = Utils.ParseEndpoint("google.com"' 90);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanParseEndpoint,The following statement contains a magic number: Assert.Equal(90' Assert.IsType<DnsEndPoint>(endpoint).Port);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanParseEndpoint,The following statement contains a magic number: endpoint = Utils.ParseEndpoint("10.10.1.3"' 90);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanParseEndpoint,The following statement contains a magic number: Assert.Equal(90' Assert.IsType<IPEndPoint>(endpoint).Port);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanParseEndpoint,The following statement contains a magic number: endpoint = Utils.ParseEndpoint("10.10.1.3:94"' 90);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanParseEndpoint,The following statement contains a magic number: Assert.Equal(94' Assert.IsType<IPEndPoint>(endpoint).Port);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanParseEndpoint,The following statement contains a magic number: endpoint = Utils.ParseEndpoint("::1"' 90);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanParseEndpoint,The following statement contains a magic number: Assert.Equal(90' Assert.IsType<IPEndPoint>(endpoint).Port);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanParseEndpoint,The following statement contains a magic number: endpoint = Utils.ParseEndpoint("[2001:db8:1f70::999:de8:7648:6e8]:100"' 90);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanParseEndpoint,The following statement contains a magic number: Assert.Equal(100' Assert.IsType<IPEndPoint>(endpoint).Port);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanParseEndpoint,The following statement contains a magic number: endpoint = Utils.ParseEndpoint("2001:db8:1f70::999:de8:7648:6e8"' 90);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanParseEndpoint,The following statement contains a magic number: Assert.Equal(90' Assert.IsType<IPEndPoint>(endpoint).Port);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanParseEndpoint,The following statement contains a magic number: endpoint = Utils.ParseEndpoint("[2001:db8:1f70::999:de8:7648:6e8]:94"' 90);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanParseEndpoint,The following statement contains a magic number: Assert.Equal(94' Assert.IsType<IPEndPoint>(endpoint).Port);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanParseEndpoint,The following statement contains a magic number: Assert.Throws<FormatException>(() => Utils.ParseEndpoint("inv LiewoN(#)9 hostname:94"' 90));
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanParseEndpoint,The following statement contains a magic number: Assert.Throws<FormatException>(() => Utils.ParseEndpoint("inv LiewoN(#)9 hostname"' 90));
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanParseEndpoint,The following statement contains a magic number: Assert.Throws<FormatException>(() => Utils.ParseEndpoint(""' 90));
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,WaitAssert,The following statement contains a magic number: int totalTry = 30;
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanQueryUptimeAsync,The following statement contains a magic number: Assert.Equal(uptime1.TotalSeconds' uptime2.TotalSeconds' 3);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,CanGenerateBlocks,The following statement contains a magic number: Assert.Equal(3' heigh);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,ShouldCreatePSBTAcceptableByRPCAsExpected,The following statement contains a magic number: var redeem = PayToMultiSigTemplate.Instance.GenerateScriptPubKey(3' keys.Select(ki => ki.PubKey).ToArray());
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,ShouldWalletProcessPSBTAndExtractMempoolAcceptableTX,The following statement contains a magic number: client.GenerateToAddress(101' addr);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,ShouldWalletProcessPSBTAndExtractMempoolAcceptableTX,The following statement contains a magic number: client.SendToAddress(addr' Money.Coins(15));
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,ShouldWalletProcessPSBTAndExtractMempoolAcceptableTX,The following statement contains a magic number: client.SendToAddress(addr' Money.Coins(15));
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,ShouldWalletProcessPSBTAndExtractMempoolAcceptableTX,The following statement contains a magic number: var redeem = PayToMultiSigTemplate.Instance.GenerateScriptPubKey(3' keys.Select(ki => ki.PubKey).ToArray());
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,ShouldWalletProcessPSBTAndExtractMempoolAcceptableTX,The following statement contains a magic number: tx.Outputs.Add(new TxOut(Money.Coins(45)' kOut));
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,ShouldWalletProcessPSBTAndExtractMempoolAcceptableTX,The following statement contains a magic number: Assert.Equal(3' fundTxResult.Transaction.Inputs.Count);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,ShouldWalletProcessPSBTAndExtractMempoolAcceptableTX,The following statement contains a magic number: tx.Outputs.Add(new TxOut(Money.Coins(45)' kOut));
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,ShouldPerformMultisigProcessingWithCore,The following statement contains a magic number: var script = PayToMultiSigTemplate.Instance.GenerateScriptPubKey(4' pubkeys.ToArray());
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,ShouldPerformMultisigProcessingWithCore,The following statement contains a magic number: nodeFunder.Generate(103);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,ShouldPerformMultisigProcessingWithCore,The following statement contains a magic number: funderClient.SendToAddress(aMultiP2SH' Money.Coins(40));
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,ShouldPerformMultisigProcessingWithCore,The following statement contains a magic number: var carol = clients[2];
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,ShouldPerformMultisigProcessingWithCore,The following statement contains a magic number: Assert.Equal((ulong)104' info.Blocks);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,ShouldPerformMultisigProcessingWithCore,The following statement contains a magic number: Assert.Equal(Money.Coins(40)' balance);
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,ShouldPerformMultisigProcessingWithCore,The following statement contains a magic number: outputs.Add(aSend' Money.Coins(10));
Magic Number,NBitcoin.Tests,RPCClientTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\RPCClientTests.cs,ShouldGetAddressInfo,The following statement contains a magic number: var redeem = PayToMultiSigTemplate.Instance.GenerateScriptPubKey(2' pubkeys);
Magic Number,NBitcoin.Tests,sample_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\sample_tests.cs,CanBuildSegwitP2SHMultisigTransactions,The following statement contains a magic number: rpc.Generate(102);
Magic Number,NBitcoin.Tests,sample_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\sample_tests.cs,CanBuildSegwitP2SHMultisigTransactions,The following statement contains a magic number: var masterKeys = Enumerable.Range(0' 3).Select(_ => new ExtKey()).ToArray();
Magic Number,NBitcoin.Tests,sample_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\sample_tests.cs,CanBuildSegwitP2SHMultisigTransactions,The following statement contains a magic number: var keyRedeemAddresses = Enumerable.Range(0' 4) 									  .Select(i => masterKeys.Select(m => m.Derive(i' false)).ToArray()) 									  .Select(keys => 									  ( 										Keys: keys.Select(k => k.PrivateKey).ToArray()' 										Redeem: PayToMultiSigTemplate.Instance.GenerateScriptPubKey(keys.Length' keys.Select(k => k.PrivateKey.PubKey).ToArray())) 									  ).Select(_ => 									  ( 										Keys: _.Keys' 										Redeem: _.Redeem' 										Address: _.Redeem.WitHash.ScriptPubKey.Hash.ScriptPubKey.GetDestinationAddress(nodeBuilder.Network) 									  ));
Magic Number,NBitcoin.Tests,sample_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\sample_tests.cs,CanBuildSegwitP2SHMultisigTransactionsWithPSBT,The following statement contains a magic number: rpc.Generate(102);
Magic Number,NBitcoin.Tests,sample_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\sample_tests.cs,CanBuildSegwitP2SHMultisigTransactionsWithPSBT,The following statement contains a magic number: var masterKeys = Enumerable.Range(0' 3).Select(_ => new ExtKey()).ToArray();
Magic Number,NBitcoin.Tests,sample_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\sample_tests.cs,CanBuildSegwitP2SHMultisigTransactionsWithPSBT,The following statement contains a magic number: Network.Main.CreateTransactionBuilder() 						  .AddKeys(keys[1]' keys[2]) 						  .SignPSBT(partiallySignedTx);
Magic Number,NBitcoin.Tests,sample_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\sample_tests.cs,CanBuildSegwitP2SHMultisigTransactionsWithPSBT,The following statement contains a magic number: Assert.True(partiallySignedTx.Inputs.All(i => i.PartialSigs.Count == 3));
Magic Number,NBitcoin.Tests,sample_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\sample_tests.cs,CanSignPSBTWithRootAndAccountKey,The following statement contains a magic number: rpc.Generate(102);
Magic Number,NBitcoin.Tests,sample_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\sample_tests.cs,CanSignPSBTWithRootAndAccountKey,The following statement contains a magic number: var addresses = Enumerable.Range(0' 5) 									  .Select(i => 									  { 										  var addressPath = new KeyPath(new uint[] { 0U | hardenedFlag' (uint)i | hardenedFlag }); 										  var fullAddressPath = accountKeyPath.Derive(addressPath); 										  var address = accountKey.Derive(addressPath).GetPublicKey().WitHash.GetAddress(nodeBuilder.Network); 										  return new 										  { 											  FullAddressPath = fullAddressPath' 											  AddressPath = addressPath' 											  Address = address 										  }; 									  }).ToList();
Magic Number,NBitcoin.Tests,SchnorrSignerTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\SchnorrSignerTests.cs,SingningTest,The following statement contains a magic number: var publicKey = new PubKey(Encoders.Hex.DecodeData(vector[2]));
Magic Number,NBitcoin.Tests,SchnorrSignerTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\SchnorrSignerTests.cs,SingningTest,The following statement contains a magic number: var message = uint256.Parse(vector[3]);
Magic Number,NBitcoin.Tests,SchnorrSignerTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\SchnorrSignerTests.cs,SingningTest,The following statement contains a magic number: var expectedSignature = SchnorrSignature.Parse(vector[4]);
Magic Number,NBitcoin.Tests,SchnorrSignerTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\SchnorrSignerTests.cs,ShouldFailVerifycation,The following statement contains a magic number: var message = uint256.Parse(vector[2]);
Magic Number,NBitcoin.Tests,SchnorrSignerTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\SchnorrSignerTests.cs,ShouldFailVerifycation,The following statement contains a magic number: var signature = SchnorrSignature.Parse(vector[3]);
Magic Number,NBitcoin.Tests,SchnorrSignerTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\SchnorrSignerTests.cs,ShouldFailVerifycation,The following statement contains a magic number: var reason = vector[4];
Magic Number,NBitcoin.Tests,SchnorrSignerTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\SchnorrSignerTests.cs,ShouldPassBatchVerifycation,The following statement contains a magic number: var signatures = vectors.Select(v => SchnorrSignature.Parse(v[2])).ToArray();
Magic Number,NBitcoin.Tests,SchnorrSignerTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\SchnorrSignerTests.cs,ShouldPassBatchVerifycation,The following statement contains a magic number: var randoms = Enumerable.Range(0' 2).Select(x => BigInteger.Arbitrary(256)).ToArray();
Magic Number,NBitcoin.Tests,SchnorrSignerTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\SchnorrSignerTests.cs,ShouldPassBatchVerifycation,The following statement contains a magic number: var randoms = Enumerable.Range(0' 2).Select(x => BigInteger.Arbitrary(256)).ToArray();
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,ParseScript,The following statement contains a magic number: var name = kv.Key.Substring(3' kv.Key.Length - 3);
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,ParseScript,The following statement contains a magic number: var name = kv.Key.Substring(3' kv.Key.Length - 3);
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,BIP65_tests,The following statement contains a magic number: BIP65_testsCore(  				Utils.UnixTimeToDateTime(510000000)'  				Utils.UnixTimeToDateTime(509999999)'  				false);
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,BIP65_tests,The following statement contains a magic number: BIP65_testsCore(  				Utils.UnixTimeToDateTime(510000000)'  				Utils.UnixTimeToDateTime(509999999)'  				false);
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,BIP65_tests,The following statement contains a magic number: BIP65_testsCore(  				Utils.UnixTimeToDateTime(510000000)'  				Utils.UnixTimeToDateTime(510000000)'  				true);
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,BIP65_tests,The following statement contains a magic number: BIP65_testsCore(  				Utils.UnixTimeToDateTime(510000000)'  				Utils.UnixTimeToDateTime(510000000)'  				true);
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,BIP65_tests,The following statement contains a magic number: BIP65_testsCore(  				Utils.UnixTimeToDateTime(510000000)'  				Utils.UnixTimeToDateTime(510000001)'  				true);
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,BIP65_tests,The following statement contains a magic number: BIP65_testsCore(  				Utils.UnixTimeToDateTime(510000000)'  				Utils.UnixTimeToDateTime(510000001)'  				true);
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,BIP65_tests,The following statement contains a magic number: BIP65_testsCore(  				1000'  				999'  				false);
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,BIP65_tests,The following statement contains a magic number: BIP65_testsCore(  				1000'  				999'  				false);
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,BIP65_tests,The following statement contains a magic number: BIP65_testsCore(  				1000'  				1000'  				true);
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,BIP65_tests,The following statement contains a magic number: BIP65_testsCore(  				1000'  				1000'  				true);
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,BIP65_tests,The following statement contains a magic number: BIP65_testsCore(  				1000'  				1001'  				true);
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,BIP65_tests,The following statement contains a magic number: BIP65_testsCore(  				1000'  				1001'  				true);
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,BIP65_tests,The following statement contains a magic number: BIP65_testsCore(  				1000'  				Utils.UnixTimeToDateTime(510000001)'  				false);
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,BIP65_tests,The following statement contains a magic number: BIP65_testsCore(  				1000'  				Utils.UnixTimeToDateTime(510000001)'  				false);
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,BIP65_tests,The following statement contains a magic number: BIP65_testsCore(  				Utils.UnixTimeToDateTime(510000001)'  				1000'  				false);
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,BIP65_tests,The following statement contains a magic number: BIP65_testsCore(  				Utils.UnixTimeToDateTime(510000001)'  				1000'  				false);
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanUseCompactVarInt,The following statement contains a magic number: var tests = new[]{  				new object[]{0UL' new byte[]{0}}'  				new object[]{1UL' new byte[]{1}}'  				new object[]{127UL' new byte[]{0x7F}}'  				new object[]{128UL' new byte[]{0x80' 0x00}}'  				new object[]{255UL' new byte[]{0x80' 0x7F}}'  				new object[]{256UL' new byte[]{0x81' 0x00}}'  				new object[]{16383UL' new byte[]{0xFE' 0x7F}}'  				//new object[]{16384UL' new byte[]{0xFF' 0x00}}'  				//new object[]{16511UL' new byte[]{0x80' 0xFF' 0x7F}}'  				//new object[]{65535UL' new byte[]{0x82' 0xFD' 0x7F}}'  				new object[]{(ulong)1 << 32' new byte[]{0x8E' 0xFE' 0xFE' 0xFF' 0x00}}'  			};
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanUseCompactVarInt,The following statement contains a magic number: var tests = new[]{  				new object[]{0UL' new byte[]{0}}'  				new object[]{1UL' new byte[]{1}}'  				new object[]{127UL' new byte[]{0x7F}}'  				new object[]{128UL' new byte[]{0x80' 0x00}}'  				new object[]{255UL' new byte[]{0x80' 0x7F}}'  				new object[]{256UL' new byte[]{0x81' 0x00}}'  				new object[]{16383UL' new byte[]{0xFE' 0x7F}}'  				//new object[]{16384UL' new byte[]{0xFF' 0x00}}'  				//new object[]{16511UL' new byte[]{0x80' 0xFF' 0x7F}}'  				//new object[]{65535UL' new byte[]{0x82' 0xFD' 0x7F}}'  				new object[]{(ulong)1 << 32' new byte[]{0x8E' 0xFE' 0xFE' 0xFF' 0x00}}'  			};
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanUseCompactVarInt,The following statement contains a magic number: var tests = new[]{  				new object[]{0UL' new byte[]{0}}'  				new object[]{1UL' new byte[]{1}}'  				new object[]{127UL' new byte[]{0x7F}}'  				new object[]{128UL' new byte[]{0x80' 0x00}}'  				new object[]{255UL' new byte[]{0x80' 0x7F}}'  				new object[]{256UL' new byte[]{0x81' 0x00}}'  				new object[]{16383UL' new byte[]{0xFE' 0x7F}}'  				//new object[]{16384UL' new byte[]{0xFF' 0x00}}'  				//new object[]{16511UL' new byte[]{0x80' 0xFF' 0x7F}}'  				//new object[]{65535UL' new byte[]{0x82' 0xFD' 0x7F}}'  				new object[]{(ulong)1 << 32' new byte[]{0x8E' 0xFE' 0xFE' 0xFF' 0x00}}'  			};
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanUseCompactVarInt,The following statement contains a magic number: var tests = new[]{  				new object[]{0UL' new byte[]{0}}'  				new object[]{1UL' new byte[]{1}}'  				new object[]{127UL' new byte[]{0x7F}}'  				new object[]{128UL' new byte[]{0x80' 0x00}}'  				new object[]{255UL' new byte[]{0x80' 0x7F}}'  				new object[]{256UL' new byte[]{0x81' 0x00}}'  				new object[]{16383UL' new byte[]{0xFE' 0x7F}}'  				//new object[]{16384UL' new byte[]{0xFF' 0x00}}'  				//new object[]{16511UL' new byte[]{0x80' 0xFF' 0x7F}}'  				//new object[]{65535UL' new byte[]{0x82' 0xFD' 0x7F}}'  				new object[]{(ulong)1 << 32' new byte[]{0x8E' 0xFE' 0xFE' 0xFF' 0x00}}'  			};
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanUseCompactVarInt,The following statement contains a magic number: var tests = new[]{  				new object[]{0UL' new byte[]{0}}'  				new object[]{1UL' new byte[]{1}}'  				new object[]{127UL' new byte[]{0x7F}}'  				new object[]{128UL' new byte[]{0x80' 0x00}}'  				new object[]{255UL' new byte[]{0x80' 0x7F}}'  				new object[]{256UL' new byte[]{0x81' 0x00}}'  				new object[]{16383UL' new byte[]{0xFE' 0x7F}}'  				//new object[]{16384UL' new byte[]{0xFF' 0x00}}'  				//new object[]{16511UL' new byte[]{0x80' 0xFF' 0x7F}}'  				//new object[]{65535UL' new byte[]{0x82' 0xFD' 0x7F}}'  				new object[]{(ulong)1 << 32' new byte[]{0x8E' 0xFE' 0xFE' 0xFF' 0x00}}'  			};
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanUseCompactVarInt,The following statement contains a magic number: var tests = new[]{  				new object[]{0UL' new byte[]{0}}'  				new object[]{1UL' new byte[]{1}}'  				new object[]{127UL' new byte[]{0x7F}}'  				new object[]{128UL' new byte[]{0x80' 0x00}}'  				new object[]{255UL' new byte[]{0x80' 0x7F}}'  				new object[]{256UL' new byte[]{0x81' 0x00}}'  				new object[]{16383UL' new byte[]{0xFE' 0x7F}}'  				//new object[]{16384UL' new byte[]{0xFF' 0x00}}'  				//new object[]{16511UL' new byte[]{0x80' 0xFF' 0x7F}}'  				//new object[]{65535UL' new byte[]{0x82' 0xFD' 0x7F}}'  				new object[]{(ulong)1 << 32' new byte[]{0x8E' 0xFE' 0xFE' 0xFF' 0x00}}'  			};
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanUseCompactVarInt,The following statement contains a magic number: Enumerable.Range(0' 65535 * 4)
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanUseCompactVarInt,The following statement contains a magic number: Enumerable.Range(0' 65535 * 4)
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanExtractScriptCode,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => script.ExtractScriptCode(-2));
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanCompressScript2,The following statement contains a magic number: Assert.Equal(21' compressed.Length);
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,PayToMultiSigTemplateShouldAcceptNonKeyParameters,The following statement contains a magic number: Assert.Equal(2' result.PubKeys.Length);
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,PayToMultiSigTemplateShouldAcceptNonKeyParameters,The following statement contains a magic number: Assert.Equal(2' result.SignatureCount);
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanCompressScript,The following statement contains a magic number: AssertCompressed(script' 21);
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanCompressScript,The following statement contains a magic number: AssertCompressed(script' 21);
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanCompressScript,The following statement contains a magic number: AssertCompressed(script' 21);
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanCompressScript,The following statement contains a magic number: script = AssertCompressed(script' 33);
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanCompressScript,The following statement contains a magic number: script = AssertCompressed(script' 33);
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanCompressScript,The following statement contains a magic number: script = new Script(Enumerable.Range(0' 60).Select(_ => (Op)OpcodeType.OP_RETURN).ToArray());
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanCompressScript,The following statement contains a magic number: AssertCompressed(script' 61);
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanCompressScript,The following statement contains a magic number: script = new Script(Enumerable.Range(0' 120).Select(_ => (Op)OpcodeType.OP_RETURN).ToArray());
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanCompressScript,The following statement contains a magic number: AssertCompressed(script' 121);
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanCompressScript,The following statement contains a magic number: script = new Script(Enumerable.Range(0' 122).Select(_ => (Op)OpcodeType.OP_RETURN).ToArray());
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanCompressScript,The following statement contains a magic number: AssertCompressed(script' 124);
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,script_standard_push,The following statement contains a magic number: i < 1000
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,script_standard_push,The following statement contains a magic number: i < 1000
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,script_CHECKMULTISIG12,The following statement contains a magic number: txTo12.Outputs[0].Value = 2UL;
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,script_single_hashtype,The following statement contains a magic number: Assert.True(tx.Inputs.AsIndexedInputs().ToArray()[2].VerifyScript(txout' out ScriptError error));
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,script_combineSigs,The following statement contains a magic number: scriptPubKey = PayToMultiSigTemplate.Instance.GenerateScriptPubKey(2' keys.Select(k => k.PubKey).ToArray());
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,script_combineSigs,The following statement contains a magic number: var sig3 = new TransactionSignature(keys[2].Sign(hash3)' SigHash.Single);
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,CanExtractAddressesFromScript,The following statement contains a magic number: Assert.Equal(2' destinations.Length);
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,MultisigScriptCanFollowBIP67,The following statement contains a magic number: var script = PayToMultiSigTemplate.Instance.GenerateScriptPubKey(2' true' new PubKey[] { pk1_1' pk1_2 });
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,MultisigScriptCanFollowBIP67,The following statement contains a magic number: var pksInScript = script.ToOps().Skip(1).Take(2).ToArray();
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,MultisigScriptCanFollowBIP67,The following statement contains a magic number: script = PayToMultiSigTemplate.Instance.GenerateScriptPubKey(2' true' new PubKey[] { pk2_1' pk2_2' pk2_3 });
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,MultisigScriptCanFollowBIP67,The following statement contains a magic number: var scriptWithoutSort = PayToMultiSigTemplate.Instance.GenerateScriptPubKey(2' false' new PubKey[] { pk2_1' pk2_2' pk2_3 });
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,MultisigScriptCanFollowBIP67,The following statement contains a magic number: scriptWithoutSort = PayToMultiSigTemplate.Instance.GenerateScriptPubKey(2' new PubKey[] { pk2_1' pk2_2' pk2_3 });
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,MultisigScriptCanFollowBIP67,The following statement contains a magic number: script = PayToMultiSigTemplate.Instance.GenerateScriptPubKey(2' true' new PubKey[] { pk3_1' pk3_2' pk3_3' pk3_4 });
Magic Number,NBitcoin.Tests,script_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\script_tests.cs,MultisigScriptCanFollowBIP67,The following statement contains a magic number: script = PayToMultiSigTemplate.Instance.GenerateScriptPubKey(2' true' new PubKey[] { pk4_1' pk4_2' pk4_3 });
Magic Number,NBitcoin.Tests,sighash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\sighash_tests.cs,RandomScript,The following statement contains a magic number: int ops = (rand.Next() % 10);
Magic Number,NBitcoin.Tests,sighash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\sighash_tests.cs,sighash_from_data,The following statement contains a magic number: nIn = (int)(long)test[2];
Magic Number,NBitcoin.Tests,sighash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\sighash_tests.cs,sighash_from_data,The following statement contains a magic number: nHashType = (int)(long)test[3];
Magic Number,NBitcoin.Tests,sighash_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\sighash_tests.cs,sighash_from_data,The following statement contains a magic number: sigHashHex = (string)test[4];
Magic Number,NBitcoin.Tests,sigopcount_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\sigopcount_tests.cs,GetSigOpCount,The following statement contains a magic number: Assert.Equal(2U' s1.GetSigOpCount(true));
Magic Number,NBitcoin.Tests,sigopcount_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\sigopcount_tests.cs,GetSigOpCount,The following statement contains a magic number: Assert.Equal(3U' s1.GetSigOpCount(true));
Magic Number,NBitcoin.Tests,sigopcount_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\sigopcount_tests.cs,GetSigOpCount,The following statement contains a magic number: Assert.Equal(21U' s1.GetSigOpCount(false));
Magic Number,NBitcoin.Tests,sigopcount_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\sigopcount_tests.cs,GetSigOpCount,The following statement contains a magic number: Assert.Equal(3U' p2sh.GetSigOpCount(scriptSig));
Magic Number,NBitcoin.Tests,sigopcount_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\sigopcount_tests.cs,GetSigOpCount,The following statement contains a magic number: PubKey[] keys = Enumerable.Range(0' 3).Select(_ => new Key(true).PubKey).ToArray();
Magic Number,NBitcoin.Tests,sigopcount_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\sigopcount_tests.cs,GetSigOpCount,The following statement contains a magic number: Assert.Equal(3U' s2.GetSigOpCount(true));
Magic Number,NBitcoin.Tests,sigopcount_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\sigopcount_tests.cs,GetSigOpCount,The following statement contains a magic number: Assert.Equal(20U' s2.GetSigOpCount(false));
Magic Number,NBitcoin.Tests,sigopcount_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\sigopcount_tests.cs,GetSigOpCount,The following statement contains a magic number: Assert.Equal(3U' p2sh.GetSigOpCount(scriptSig2));
Magic Number,NBitcoin.Tests,StealthAddressTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\StealthAddressTests.cs,BitFieldCorrectlyInterpreted,The following statement contains a magic number: var tests = new[]  			{  				new  				{  					Encoded = (uint)1763505291'  					BitCount = 32'  					Raw = "8bf41c69"  				}'  				new  				{  					Encoded = (uint)1'  					BitCount = 8'  					Raw = "0100"  				}'  				new  				{  					Encoded = (uint)1'  					BitCount = 7'  					Raw = "01"  				}  			};
Magic Number,NBitcoin.Tests,StealthAddressTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\StealthAddressTests.cs,BitFieldCorrectlyInterpreted,The following statement contains a magic number: var tests = new[]  			{  				new  				{  					Encoded = (uint)1763505291'  					BitCount = 32'  					Raw = "8bf41c69"  				}'  				new  				{  					Encoded = (uint)1'  					BitCount = 8'  					Raw = "0100"  				}'  				new  				{  					Encoded = (uint)1'  					BitCount = 7'  					Raw = "01"  				}  			};
Magic Number,NBitcoin.Tests,StealthAddressTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\StealthAddressTests.cs,BitFieldCorrectlyInterpreted,The following statement contains a magic number: var tests = new[]  			{  				new  				{  					Encoded = (uint)1763505291'  					BitCount = 32'  					Raw = "8bf41c69"  				}'  				new  				{  					Encoded = (uint)1'  					BitCount = 8'  					Raw = "0100"  				}'  				new  				{  					Encoded = (uint)1'  					BitCount = 7'  					Raw = "01"  				}  			};
Magic Number,NBitcoin.Tests,StealthAddressTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\StealthAddressTests.cs,BitFieldCorrectlyInterpreted,The following statement contains a magic number: var tests = new[]  			{  				new  				{  					Encoded = (uint)1763505291'  					BitCount = 32'  					Raw = "8bf41c69"  				}'  				new  				{  					Encoded = (uint)1'  					BitCount = 8'  					Raw = "0100"  				}'  				new  				{  					Encoded = (uint)1'  					BitCount = 7'  					Raw = "01"  				}  			};
Magic Number,NBitcoin.Tests,StealthAddressTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\StealthAddressTests.cs,BitFieldCorrectlyMatchData,The following statement contains a magic number: var bit = (uint)1358086238;
Magic Number,NBitcoin.Tests,StealthAddressTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\StealthAddressTests.cs,BitFieldCorrectlyMatchData,The following statement contains a magic number: var o = new BitField(bit' 32);
Magic Number,NBitcoin.Tests,StealthAddressTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\StealthAddressTests.cs,BitFieldCorrectlyMatchData,The following statement contains a magic number: var tests = new[]  			{  				new  				{  					Encoded = (uint)0x691cf48b'  					BitCount = 27'  					Data = "8bf42c79"'  					Match = false  				}'  				new  				{  					Encoded = (uint)0x691cf48b'  					BitCount = 27'  					//Data miss match (1 instead of 2)  					Data = "8bf41c79"'  					Match = true  				}  			};
Magic Number,NBitcoin.Tests,StealthAddressTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\StealthAddressTests.cs,BitFieldCorrectlyMatchData,The following statement contains a magic number: var tests = new[]  			{  				new  				{  					Encoded = (uint)0x691cf48b'  					BitCount = 27'  					Data = "8bf42c79"'  					Match = false  				}'  				new  				{  					Encoded = (uint)0x691cf48b'  					BitCount = 27'  					//Data miss match (1 instead of 2)  					Data = "8bf41c79"'  					Match = true  				}  			};
Magic Number,NBitcoin.Tests,StealthAddressTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\StealthAddressTests.cs,BitFieldCanFetchTransaction,The following statement contains a magic number: var tests = new[]  			{  				new  				{  					Encoded = "deadbeef"'  					BitCount = 5'  					Transaction = "0100000001bd365d65c6eeee2d3ae29c6e1b0fb22f70f0135220eac1273c92a13b6039ecdf000000006b48304502202551626a52a088ea585f2aaa8afe1c1b7bc52ea8e577e149f20f0f5f2fc54485022100913643c6a1e54b5284d1c108519d9243213373256ff95ab6c7e3d162175c9e28012102881c1427e826f230246197f7f693f1c923ad2afea1dad901d1c870f7e310c895ffffffff020000000000000000286a2606ab3099ae0359222b4a2dd9a21ebd70331794fb05b0bd605bd9660fdf895906b1a227edcbec306c3402000000001976a9142f62432f367dc3cf67e68f814cc2a3ed5b2e8cec88ac00000000"'  				}  				'new  				{  					Encoded = "deadbeef"'  					BitCount = 5'  					Transaction = "01000000028d8d968818e464db9dc876eb4edd59e62913d849603ba10afe033159b55652dc010000006b483045022100992e7ce4516cdabffae823557f5854c6ca7a424cc2fe7a9b94f439ecca839f84022025b871cf499f7b0eebcf751a83e7ffe9473b6c5227f95d9989ef8e98937112760121038795ff1d07ef7092e03d612f187d1281705b36d0c11ecf4b11167beb7efc3437ffffffff723372d920d8eaa6bd1fe6ec5adaf913b6d8a48655acded49a3f09191cdf9f3a010000006a47304402206f6ca054242fe5b410d743ae238049799eccdd88637d555ad48d8da1a854bd0802201b13217d0a6a7cf3467074aa8964f3f365541304142503d91813baa0117d1a8101210258cedc6e590493838c612a394d53ffbb283638f9d1d49e1c571b15a885f405d9ffffffff05f0874b00000000001976a914cd08dcd94ba88488b4c02c82fc11fc63fee4e30c88acc0e1e400000000001976a9148784cbfe99e86135d40d276c58fcbbf37af1b48e88ac0000000000000000286a260689d0267d021cc402cf764f2c88138028b6d5c0f06d5caa34edffc1d2286048f0162756ebf1f0874b00000000001976a914923d77bbdd3d29dd4844a51629514bac9e8a2c4d88aca30c0000000000001976a9143aaa9db7a3fbc5dcc9d121a157bf63aaaee9d8f588ac00000000"'  				}'  				new  				{  					Encoded = "deadbeef"'  					BitCount = 5'  					Transaction = "010000000288b6952f8357b5a8271f6c0608ea779549bf0a9ae72213ce433f7a9c90190be6000000006b4830450221008b1b7369d7bf8a1dd99e6a260ef969840d633ba81fc379bf4f5469afd3b288e2022077e21dd12c1d8b2a4ab2e58fb0113b9e3bb77db4439483f7a8311cac3ad6ce9a012102b0c2eb0cc505a4c9fb62df8a7fcdcc00ddab43ff5752ebc51a0dae11fbfb0648ffffffff4ca2f8960e17b56e690739158994ed23427ffc08445ba3223edacb322db12d4b000000006b483045022100f94d50d846d85a545693574f9e1a680a858f085257c827cd8b211df8d27c558202201bca0407ad67960937999a88c95e52417442703a16036bbe55f071cdff804f69012102884d0c845bff3158e88033bce236cdbfeadba0a7e7381258379612f355681d6dffffffff052f750000000000001976a914a34a179dc97cbb84992d2960ee240b56f1b2ae3088acbca15400000000001976a914139e314f94a8e4fc2864ef2544e7640ba033725b88ac0000000000000000286a26061d6b629c024c7daf682da4afd61aadf401fae316a265c3244d912b375a75b55551d52a583f2f750000000000001976a9142888cb9f0b0f489106bc13f56fdd2ceec1b6883788ac51c30000000000001976a91404316e7db781481d1419feda2c8d7fa9f7b68a6e88ac00000000"'  				}'    			};
Magic Number,NBitcoin.Tests,StealthAddressTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\StealthAddressTests.cs,BitFieldCanFetchTransaction,The following statement contains a magic number: var tests = new[]  			{  				new  				{  					Encoded = "deadbeef"'  					BitCount = 5'  					Transaction = "0100000001bd365d65c6eeee2d3ae29c6e1b0fb22f70f0135220eac1273c92a13b6039ecdf000000006b48304502202551626a52a088ea585f2aaa8afe1c1b7bc52ea8e577e149f20f0f5f2fc54485022100913643c6a1e54b5284d1c108519d9243213373256ff95ab6c7e3d162175c9e28012102881c1427e826f230246197f7f693f1c923ad2afea1dad901d1c870f7e310c895ffffffff020000000000000000286a2606ab3099ae0359222b4a2dd9a21ebd70331794fb05b0bd605bd9660fdf895906b1a227edcbec306c3402000000001976a9142f62432f367dc3cf67e68f814cc2a3ed5b2e8cec88ac00000000"'  				}  				'new  				{  					Encoded = "deadbeef"'  					BitCount = 5'  					Transaction = "01000000028d8d968818e464db9dc876eb4edd59e62913d849603ba10afe033159b55652dc010000006b483045022100992e7ce4516cdabffae823557f5854c6ca7a424cc2fe7a9b94f439ecca839f84022025b871cf499f7b0eebcf751a83e7ffe9473b6c5227f95d9989ef8e98937112760121038795ff1d07ef7092e03d612f187d1281705b36d0c11ecf4b11167beb7efc3437ffffffff723372d920d8eaa6bd1fe6ec5adaf913b6d8a48655acded49a3f09191cdf9f3a010000006a47304402206f6ca054242fe5b410d743ae238049799eccdd88637d555ad48d8da1a854bd0802201b13217d0a6a7cf3467074aa8964f3f365541304142503d91813baa0117d1a8101210258cedc6e590493838c612a394d53ffbb283638f9d1d49e1c571b15a885f405d9ffffffff05f0874b00000000001976a914cd08dcd94ba88488b4c02c82fc11fc63fee4e30c88acc0e1e400000000001976a9148784cbfe99e86135d40d276c58fcbbf37af1b48e88ac0000000000000000286a260689d0267d021cc402cf764f2c88138028b6d5c0f06d5caa34edffc1d2286048f0162756ebf1f0874b00000000001976a914923d77bbdd3d29dd4844a51629514bac9e8a2c4d88aca30c0000000000001976a9143aaa9db7a3fbc5dcc9d121a157bf63aaaee9d8f588ac00000000"'  				}'  				new  				{  					Encoded = "deadbeef"'  					BitCount = 5'  					Transaction = "010000000288b6952f8357b5a8271f6c0608ea779549bf0a9ae72213ce433f7a9c90190be6000000006b4830450221008b1b7369d7bf8a1dd99e6a260ef969840d633ba81fc379bf4f5469afd3b288e2022077e21dd12c1d8b2a4ab2e58fb0113b9e3bb77db4439483f7a8311cac3ad6ce9a012102b0c2eb0cc505a4c9fb62df8a7fcdcc00ddab43ff5752ebc51a0dae11fbfb0648ffffffff4ca2f8960e17b56e690739158994ed23427ffc08445ba3223edacb322db12d4b000000006b483045022100f94d50d846d85a545693574f9e1a680a858f085257c827cd8b211df8d27c558202201bca0407ad67960937999a88c95e52417442703a16036bbe55f071cdff804f69012102884d0c845bff3158e88033bce236cdbfeadba0a7e7381258379612f355681d6dffffffff052f750000000000001976a914a34a179dc97cbb84992d2960ee240b56f1b2ae3088acbca15400000000001976a914139e314f94a8e4fc2864ef2544e7640ba033725b88ac0000000000000000286a26061d6b629c024c7daf682da4afd61aadf401fae316a265c3244d912b375a75b55551d52a583f2f750000000000001976a9142888cb9f0b0f489106bc13f56fdd2ceec1b6883788ac51c30000000000001976a91404316e7db781481d1419feda2c8d7fa9f7b68a6e88ac00000000"'  				}'    			};
Magic Number,NBitcoin.Tests,StealthAddressTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\StealthAddressTests.cs,BitFieldCanFetchTransaction,The following statement contains a magic number: var tests = new[]  			{  				new  				{  					Encoded = "deadbeef"'  					BitCount = 5'  					Transaction = "0100000001bd365d65c6eeee2d3ae29c6e1b0fb22f70f0135220eac1273c92a13b6039ecdf000000006b48304502202551626a52a088ea585f2aaa8afe1c1b7bc52ea8e577e149f20f0f5f2fc54485022100913643c6a1e54b5284d1c108519d9243213373256ff95ab6c7e3d162175c9e28012102881c1427e826f230246197f7f693f1c923ad2afea1dad901d1c870f7e310c895ffffffff020000000000000000286a2606ab3099ae0359222b4a2dd9a21ebd70331794fb05b0bd605bd9660fdf895906b1a227edcbec306c3402000000001976a9142f62432f367dc3cf67e68f814cc2a3ed5b2e8cec88ac00000000"'  				}  				'new  				{  					Encoded = "deadbeef"'  					BitCount = 5'  					Transaction = "01000000028d8d968818e464db9dc876eb4edd59e62913d849603ba10afe033159b55652dc010000006b483045022100992e7ce4516cdabffae823557f5854c6ca7a424cc2fe7a9b94f439ecca839f84022025b871cf499f7b0eebcf751a83e7ffe9473b6c5227f95d9989ef8e98937112760121038795ff1d07ef7092e03d612f187d1281705b36d0c11ecf4b11167beb7efc3437ffffffff723372d920d8eaa6bd1fe6ec5adaf913b6d8a48655acded49a3f09191cdf9f3a010000006a47304402206f6ca054242fe5b410d743ae238049799eccdd88637d555ad48d8da1a854bd0802201b13217d0a6a7cf3467074aa8964f3f365541304142503d91813baa0117d1a8101210258cedc6e590493838c612a394d53ffbb283638f9d1d49e1c571b15a885f405d9ffffffff05f0874b00000000001976a914cd08dcd94ba88488b4c02c82fc11fc63fee4e30c88acc0e1e400000000001976a9148784cbfe99e86135d40d276c58fcbbf37af1b48e88ac0000000000000000286a260689d0267d021cc402cf764f2c88138028b6d5c0f06d5caa34edffc1d2286048f0162756ebf1f0874b00000000001976a914923d77bbdd3d29dd4844a51629514bac9e8a2c4d88aca30c0000000000001976a9143aaa9db7a3fbc5dcc9d121a157bf63aaaee9d8f588ac00000000"'  				}'  				new  				{  					Encoded = "deadbeef"'  					BitCount = 5'  					Transaction = "010000000288b6952f8357b5a8271f6c0608ea779549bf0a9ae72213ce433f7a9c90190be6000000006b4830450221008b1b7369d7bf8a1dd99e6a260ef969840d633ba81fc379bf4f5469afd3b288e2022077e21dd12c1d8b2a4ab2e58fb0113b9e3bb77db4439483f7a8311cac3ad6ce9a012102b0c2eb0cc505a4c9fb62df8a7fcdcc00ddab43ff5752ebc51a0dae11fbfb0648ffffffff4ca2f8960e17b56e690739158994ed23427ffc08445ba3223edacb322db12d4b000000006b483045022100f94d50d846d85a545693574f9e1a680a858f085257c827cd8b211df8d27c558202201bca0407ad67960937999a88c95e52417442703a16036bbe55f071cdff804f69012102884d0c845bff3158e88033bce236cdbfeadba0a7e7381258379612f355681d6dffffffff052f750000000000001976a914a34a179dc97cbb84992d2960ee240b56f1b2ae3088acbca15400000000001976a914139e314f94a8e4fc2864ef2544e7640ba033725b88ac0000000000000000286a26061d6b629c024c7daf682da4afd61aadf401fae316a265c3244d912b375a75b55551d52a583f2f750000000000001976a9142888cb9f0b0f489106bc13f56fdd2ceec1b6883788ac51c30000000000001976a91404316e7db781481d1419feda2c8d7fa9f7b68a6e88ac00000000"'  				}'    			};
Magic Number,NBitcoin.Tests,StealthAddressTests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\StealthAddressTests.cs,CanCreatePayment,The following statement contains a magic number: payment.AddToTransaction(transaction' 100UL);
Magic Number,NBitcoin.Tests,TestUtils,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\TestUtils.cs,Eventually,The following statement contains a magic number: var cancel = new CancellationTokenSource(20000);
Magic Number,NBitcoin.Tests,TestUtils,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\TestUtils.cs,Eventually,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,NBitcoin.Tests,TestUtils,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\TestUtils.cs,CreateFakeBlock,The following statement contains a magic number: block.Header.HashPrevBlock = new uint256(RandomUtils.GetBytes(32));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanGetMedianBlock,The following statement contains a magic number: chain.SetTip(CreateBlock(now' 2' chain));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanGetMedianBlock,The following statement contains a magic number: chain.SetTip(CreateBlock(now' 3' chain));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanGetMedianBlock,The following statement contains a magic number: chain.SetTip(CreateBlock(now' 4' chain));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanGetMedianBlock,The following statement contains a magic number: chain.SetTip(CreateBlock(now' 5' chain));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanGetMedianBlock,The following statement contains a magic number: chain.SetTip(CreateBlock(now' 6' chain));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanGetMedianBlock,The following statement contains a magic number: chain.SetTip(CreateBlock(now' 7' chain));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanGetMedianBlock,The following statement contains a magic number: chain.SetTip(CreateBlock(now' 8' chain));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanGetMedianBlock,The following statement contains a magic number: Assert.Equal(CreateBlock(now' 3).Header.BlockTime' chain.Tip.GetMedianTimePast());
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanGetMedianBlock,The following statement contains a magic number: chain.SetTip(CreateBlock(now' 9' chain));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanGetMedianBlock,The following statement contains a magic number: Assert.Equal(CreateBlock(now' 4).Header.BlockTime' chain.Tip.GetMedianTimePast());
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanGetMedianBlock,The following statement contains a magic number: chain.SetTip(CreateBlock(now' 10' chain));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanGetMedianBlock,The following statement contains a magic number: Assert.Equal(CreateBlock(now' 5).Header.BlockTime' chain.Tip.GetMedianTimePast());
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanDetectFinalTransaction,The following statement contains a magic number: tx.LockTime = new LockTime(new DateTimeOffset(2012' 8' 18' 0' 0' 0' TimeSpan.Zero));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanDetectFinalTransaction,The following statement contains a magic number: tx.LockTime = new LockTime(new DateTimeOffset(2012' 8' 18' 0' 0' 0' TimeSpan.Zero));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanDetectFinalTransaction,The following statement contains a magic number: tx.LockTime = new LockTime(new DateTimeOffset(2012' 8' 18' 0' 0' 0' TimeSpan.Zero));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanDetectFinalTransaction,The following statement contains a magic number: tx.LockTime = new LockTime(400);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanDetectFinalTransaction,The following statement contains a magic number: Assert.False(tx.IsFinal(zero' 400));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanDetectFinalTransaction,The following statement contains a magic number: Assert.True(tx.IsFinal(zero' 401));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanDetectFinalTransaction,The following statement contains a magic number: Assert.False(tx.IsFinal(zero' 399));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanExtractTxOutDestinationEasily,The following statement contains a magic number: var p2pkh = tx.Outputs.Add(new Money((UInt64)45000000)' secret.GetAddress(ScriptPubKeyType.Legacy));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanExtractTxOutDestinationEasily,The following statement contains a magic number: var p2pk = tx.Outputs.Add(new Money((UInt64)80000000)' secret.PrivateKey.PubKey);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CreateFakeCoins,The following statement contains a magic number: var coins = inputs.Select(i => new Coin(i.PrevOut' inputs.Transaction.Outputs.CreateNewTxOut(Money.Coins(0.1m)' p2sh ?  				scriptPubKey.Hash.ScriptPubKey :  				scriptPubKey))).ToArray();
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanSelectCoin,The following statement contains a magic number: Assert.Equal(2' selected.Length);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Func<Wallet.WalletCoin' bool> filter_standard = w => w.Age >= 6 || (w.IsFromMe && w.Age >= 1);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Func<Wallet.WalletCoin' bool> filter_standard_extra = w => w.Age >= 6;
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(Money.Cents(1)' 4);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(Money.Cents(2));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.Null(wallet.SelectCoinsMinConf(Money.Cents(3)' filter_standard' out setCoinsRet' out nValueRet));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.NotNull(wallet.SelectCoinsMinConf(Money.Cents(3)' filter_confirmed' out setCoinsRet' out nValueRet));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.Equal(nValueRet' Money.Cents(3));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(Money.Cents(5));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(Money.Cents(10)' 3' true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(Money.Cents(10)' 3' true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(Money.Cents(20));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.Null(wallet.SelectCoinsMinConf(Money.Cents(38)' filter_standard' out setCoinsRet' out nValueRet));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.Null(wallet.SelectCoinsMinConf(Money.Cents(38)' filter_standard_extra' out setCoinsRet' out nValueRet));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.NotNull(wallet.SelectCoinsMinConf(Money.Cents(37)' filter_standard' out setCoinsRet' out nValueRet));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.Equal(nValueRet' Money.Cents(37));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.NotNull(wallet.SelectCoinsMinConf(Money.Cents(38)' filter_confirmed' out setCoinsRet' out nValueRet));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.Equal(nValueRet' Money.Cents(38));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.NotNull(wallet.SelectCoinsMinConf(Money.Cents(34)' filter_confirmed' out setCoinsRet' out nValueRet));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.Equal(nValueRet' Money.Cents(35));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.Equal(3' setCoinsRet.Count);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.NotNull(wallet.SelectCoinsMinConf(Money.Cents(7)' filter_confirmed' out setCoinsRet' out nValueRet));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.Equal(nValueRet' Money.Cents(7));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.Equal(2' setCoinsRet.Count);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.NotNull(wallet.SelectCoinsMinConf(Money.Cents(8)' filter_confirmed' out setCoinsRet' out nValueRet));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.Equal(Money.Cents(8)' nValueRet);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.Equal(3' setCoinsRet.Count);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.NotNull(wallet.SelectCoinsMinConf(Money.Cents(9)' filter_confirmed' out setCoinsRet' out nValueRet));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.Equal(nValueRet' Money.Cents(10));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(Money.Cents(6));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(Money.Cents(7));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(Money.Cents(8));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(Money.Cents(20));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(Money.Cents(30));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.NotNull(wallet.SelectCoinsMinConf(Money.Cents(71)' filter_confirmed' out setCoinsRet' out nValueRet));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.Null(wallet.SelectCoinsMinConf(Money.Cents(72)' filter_confirmed' out setCoinsRet' out nValueRet));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.NotNull(wallet.SelectCoinsMinConf(Money.Cents(16)' filter_confirmed' out setCoinsRet' out nValueRet));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.Equal(nValueRet' Money.Cents(20));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(Money.Cents(5));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.NotNull(wallet.SelectCoinsMinConf(Money.Cents(16)' filter_confirmed' out setCoinsRet' out nValueRet));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.Equal(nValueRet' Money.Cents(18));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.Equal(3' setCoinsRet.Count);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(Money.Cents(18));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.NotNull(wallet.SelectCoinsMinConf(Money.Cents(16)' filter_confirmed' out setCoinsRet' out nValueRet));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.Equal(nValueRet' Money.Cents(18));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.NotNull(wallet.SelectCoinsMinConf(Money.Cents(11)' filter_confirmed' out setCoinsRet' out nValueRet));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.Equal(nValueRet' Money.Cents(11));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.Equal(2' setCoinsRet.Count);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(Money.Coins(2));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(Money.Coins(3));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(Money.Coins(4));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.NotNull(wallet.SelectCoinsMinConf(Money.Cents(95)' filter_confirmed' out setCoinsRet' out nValueRet));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.NotNull(wallet.SelectCoinsMinConf(Money.Cents(195)' filter_confirmed' out setCoinsRet' out nValueRet));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.Equal(nValueRet' Money.Coins(2));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(MIN_CHANGE * 1 / 10);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(MIN_CHANGE * 2 / 10);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(MIN_CHANGE * 2 / 10);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(MIN_CHANGE * 3 / 10);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(MIN_CHANGE * 3 / 10);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(MIN_CHANGE * 4 / 10);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(MIN_CHANGE * 4 / 10);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(MIN_CHANGE * 5 / 10);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(MIN_CHANGE * 5 / 10);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(1111 * MIN_CHANGE);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(MIN_CHANGE * 6 / 10);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(MIN_CHANGE * 6 / 10);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(MIN_CHANGE * 7 / 10);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(MIN_CHANGE * 7 / 10);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(Money.Coins(50000));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: j < 20
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.NotNull(wallet.SelectCoinsMinConf(Money.Coins(500000)' filter_confirmed' out setCoinsRet' out nValueRet));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.Equal(nValueRet' Money.Coins(500000));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.Equal(10' setCoinsRet.Count);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(MIN_CHANGE * 5 / 10);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(MIN_CHANGE * 5 / 10);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(MIN_CHANGE * 6 / 10);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(MIN_CHANGE * 6 / 10);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(MIN_CHANGE * 7 / 10);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(MIN_CHANGE * 7 / 10);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(1111 * MIN_CHANGE);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.Equal(nValueRet' 1111 * MIN_CHANGE);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(MIN_CHANGE * 4 / 10);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(MIN_CHANGE * 4 / 10);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(MIN_CHANGE * 6 / 10);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(MIN_CHANGE * 6 / 10);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(MIN_CHANGE * 8 / 10);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(MIN_CHANGE * 8 / 10);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(1111 * MIN_CHANGE);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.Equal(2' setCoinsRet.Count);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(MIN_CHANGE * 5 / 100);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(MIN_CHANGE * 5 / 100);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(MIN_CHANGE * 100);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.NotNull(wallet.SelectCoinsMinConf(MIN_CHANGE * 10001 / 100' filter_confirmed' out setCoinsRet' out nValueRet));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.NotNull(wallet.SelectCoinsMinConf(MIN_CHANGE * 10001 / 100' filter_confirmed' out setCoinsRet' out nValueRet));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.Equal(nValueRet' MIN_CHANGE * 10105 / 100);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.Equal(nValueRet' MIN_CHANGE * 10105 / 100);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.Equal(3' setCoinsRet.Count);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.NotNull(wallet.SelectCoinsMinConf(MIN_CHANGE * 9990 / 100' filter_confirmed' out setCoinsRet' out nValueRet));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.NotNull(wallet.SelectCoinsMinConf(MIN_CHANGE * 9990 / 100' filter_confirmed' out setCoinsRet' out nValueRet));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.Equal(nValueRet' 101 * MIN_CHANGE);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.Equal(2' setCoinsRet.Count);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: j < 676
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.NotNull(wallet.SelectCoinsMinConf(Money.Satoshis(2000)' filter_confirmed' out setCoinsRet' out nValueRet));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: int returnSize = (int)Math.Ceiling((2000.0 + MIN_CHANGE.Satoshi) / amt.Satoshi);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: amt - Money.Satoshis(2000) < MIN_CHANGE
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.NotNull(wallet.SelectCoinsMinConf(Money.Coins(50)' filter_standard' out setCoinsRet' out nValueRet));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.NotNull(wallet.SelectCoinsMinConf(Money.Coins(50)' filter_standard' out setCoinsRet2' out nValueRet));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(Money.Cents(5));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(Money.Cents(10));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(Money.Cents(15));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(Money.Cents(20));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: wallet.AddCoin(Money.Cents(25));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.NotNull(wallet.SelectCoinsMinConf(Money.Cents(90)' filter_standard' out setCoinsRet' out nValueRet));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,KnapsackSolverTest,The following statement contains a magic number: Assert.NotNull(wallet.SelectCoinsMinConf(Money.Cents(90)' filter_standard' out setCoinsRet2' out nValueRet));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildIssueColoredCoinWithMultiSigP2SH,The following statement contains a magic number: var goldRedeem = PayToMultiSigTemplate.Instance  									.GenerateScriptPubKey(2' new[] { satoshi.PubKey' bob.PubKey' alice.PubKey });
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildIssueColoredCoinWithMultiSigP2SH,The following statement contains a magic number: var issuanceCoin = new IssuanceCoin(  				new ScriptCoin(RandOutpoint()' new TxOut(Money.Satoshis(576)' goldScriptPubKey)' goldRedeem));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildIssueColoredCoinWithMultiSigP2SH,The following statement contains a magic number: var bobSigned =  				Network.CreateTransactionBuilder()  				.AddCoins(issuanceCoin)  				.AddKeys(bob)  				.IssueAsset(nico.PubKey' new AssetMoney(goldAssetId' 1000))  				.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildIssueColoredCoinWithMultiSigP2SH,The following statement contains a magic number: var tx =  				builder  				.AddCoins(issuanceCoin)  				.AddKeys(alice' satoshi)  				.IssueAsset(nico.PubKey' new AssetMoney(goldAssetId' 1000))  				.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanGuessRedeemScriptWithInputKeys,The following statement contains a magic number: builder.SendFees(Money.Coins(0.001m));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanOptInRBF,The following statement contains a magic number: var coins = new[] { RandomCoin(Money.Coins(10)' k.ScriptPubKey' false) };
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanOptInRBF,The following statement contains a magic number: builder.SendFees(Money.Coins(0.001m));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanOptInRBF,The following statement contains a magic number: builder.SendFees(Money.Coins(0.001m));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanOptInRBF,The following statement contains a magic number: builder.SetLockTime(1230944461);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,GetCoins,The following statement contains a magic number: return new Coin[] { new Coin(new uint256(Enumerable.Range(0' 32).Select(i => (byte)0xaa).ToArray())' 0' Money.Coins(2.0m)' p2sh.ScriptPubKey) };
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,GetCoins,The following statement contains a magic number: return new Coin[] { new Coin(new uint256(Enumerable.Range(0' 32).Select(i => (byte)0xaa).ToArray())' 0' Money.Coins(2.0m)' p2sh.ScriptPubKey) };
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,DoNotGenerateTransactionWithNegativeFees,The following statement contains a magic number: var scriptCoin = RandomCoin(Money.Coins(0.0001m)' k.PubKey.ScriptPubKey' true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,DoNotGenerateTransactionWithNegativeFees,The following statement contains a magic number: Assert.Throws<NotEnoughFundsException>(() => builder  			.AddCoins(scriptCoin)  			.Send(new Key()' scriptCoin.Amount)  			.SubtractFees()  			.SetChange(new Key())  			.SendFees(Money.Coins(0.0002m))  			.BuildTransaction(false));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,DoNotGenerateTransactionWithNegativeFees,The following statement contains a magic number: var scriptCoin1 = RandomCoin(Money.Coins(0.0001m)' k.PubKey.ScriptPubKey' true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,DoNotGenerateTransactionWithNegativeFees,The following statement contains a magic number: var scriptCoin2 = RandomCoin(Money.Coins(0.0001m)' k.PubKey.ScriptPubKey' true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,DoNotGenerateTransactionWithNegativeFees,The following statement contains a magic number: Assert.Equal(dustPrevention ? 1 : 2' tx.Outputs.Count);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildAnyoneCanPayTransaction,The following statement contains a magic number: var aliceBobRedeemScript = PayToMultiSigTemplate.Instance.GenerateScriptPubKey(2' new PubKey[] { aliceKey.PubKey' bobKey.PubKey });
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildAnyoneCanPayTransaction,The following statement contains a magic number: var funding = txBuilder  				.AddCoins(GetCoinSource(aliceKey))  				.AddKeys(aliceKey)  				.Send(aliceBobRedeemScript.Hash' "0.5")  				.SetChange(aliceKey.PubKey.Hash)  				.SendFees(Money.Satoshis(5000))  				.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildAnyoneCanPayTransaction,The following statement contains a magic number: Assert.True(unsigned.Outputs.Count == 3);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildAnyoneCanPayTransaction,The following statement contains a magic number: Assert.True(unsigned.Outputs[2].IsTo(aliceKey.PubKey.Hash));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildAnyoneCanPayTransaction,The following statement contains a magic number: Assert.True(unsigned.Outputs[2].Value == Money.Parse("0.02"));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanPrecomputeHashes,The following statement contains a magic number: tx.Inputs[0].WitScript = new WitScript(Op.GetPushOp(3));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanPrecomputeHashes,The following statement contains a magic number: tx.Outputs[0].Value = Money.Coins(1.1m);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanPrecomputeHashes,The following statement contains a magic number: tx.Outputs[0].Value = Money.Coins(1.1m);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanPrecomputeHashes,The following statement contains a magic number: tx.Outputs[0].Value = Money.Coins(1.1m);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanPrecomputeHashes,The following statement contains a magic number: tx.Outputs[0].Value = Money.Coins(1.1m);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildShuffleColoredTransaction,The following statement contains a magic number: var issuanceCoins =  				init  				.Outputs  				.Take(2)  				.Select((o' i) => new IssuanceCoin(new OutPoint(init.GetHash()' i)' init.Outputs[i]))  				.OfType<ICoin>().ToArray();
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildShuffleColoredTransaction,The following statement contains a magic number: var satoshiBTC = new Coin(new OutPoint(init.GetHash()' 2)' init.Outputs[2]);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildShuffleColoredTransaction,The following statement contains a magic number: var satoshiBTC = new Coin(new OutPoint(init.GetHash()' 2)' init.Outputs[2]);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildShuffleColoredTransaction,The following statement contains a magic number: var tx = txBuilder  				.AddCoins(coins.ToArray())  				.AddKeys(gold)  				.IssueAsset(satoshi.PubKey' new AssetMoney(goldId' 1000))  				.IssueAsset(bob.PubKey' new AssetMoney(goldId' 500))  				.SendFees("0.1")  				.SetChange(gold.PubKey)  				.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildShuffleColoredTransaction,The following statement contains a magic number: var tx = txBuilder  				.AddCoins(coins.ToArray())  				.AddKeys(gold)  				.IssueAsset(satoshi.PubKey' new AssetMoney(goldId' 1000))  				.IssueAsset(bob.PubKey' new AssetMoney(goldId' 500))  				.SendFees("0.1")  				.SetChange(gold.PubKey)  				.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildShuffleColoredTransaction,The following statement contains a magic number: Assert.Equal(Money.Parse("0.89994240")' tx.Outputs[2].Value);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildShuffleColoredTransaction,The following statement contains a magic number: Assert.Equal(gold.PubKey.ScriptPubKey' tx.Outputs[2].ScriptPubKey);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildShuffleColoredTransaction,The following statement contains a magic number: tx = txBuilder  					.AddCoins(satoshiBTC)  					.AddCoins(cc)  					.AddKeys(satoshi)  					.SendAsset(gold' new AssetMoney(goldId' 10))  					.SetChange(satoshi)  					.Then()  					.AddKeys(gold)  					.AddCoins(issuanceCoins)  					.IssueAsset(bob' new AssetMoney(goldId' 1))  					.SetChange(gold)  					.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildShuffleColoredTransaction,The following statement contains a magic number: Assert.Equal(2' ctx.Transfers.Count);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildShuffleColoredTransaction,The following statement contains a magic number: i < 20
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: var issuanceCoins =  				init  				.Outputs  				.AsCoins()  				.Take(2)  				.Select((c' i) => new IssuanceCoin(c))  				.OfType<ICoin>().ToArray();
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: var tx = txBuilder  				.AddCoins(coins.ToArray())  				.AddKeys(gold)  				.IssueAsset(satoshi.PubKey' new AssetMoney(goldId' 1000))  				.IssueAsset(bob.PubKey' new AssetMoney(goldId' 500))  				.SendFees("0.1")  				.SetChange(gold.PubKey)  				.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: var tx = txBuilder  				.AddCoins(coins.ToArray())  				.AddKeys(gold)  				.IssueAsset(satoshi.PubKey' new AssetMoney(goldId' 1000))  				.IssueAsset(bob.PubKey' new AssetMoney(goldId' 500))  				.SendFees("0.1")  				.SetChange(gold.PubKey)  				.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: Assert.Equal(Money.Parse("0.89994240")' tx.Outputs[2].Value);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: Assert.Equal(gold.PubKey.ScriptPubKey' tx.Outputs[2].ScriptPubKey);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: Assert.Equal(2' colored.Issuances.Count);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: AssertHasAsset(tx' colored' colored.Issuances[0]' goldId' 500' bob.PubKey);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: AssertHasAsset(tx' colored' colored.Issuances[1]' goldId' 1000' satoshi.PubKey);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: Assert.Equal(2' coloredCoins.Length);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: tx = txBuilder  				.AddCoins(coins.ToArray())  				.AddKeys(silver' bob)  				.SetChange(bob.PubKey)  				.IssueAsset(bob.PubKey' new AssetMoney(silverId' 10))  				.SendAsset(satoshi.PubKey' new AssetMoney(goldId' 30))  				.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: tx = txBuilder  				.AddCoins(coins.ToArray())  				.AddKeys(silver' bob)  				.SetChange(bob.PubKey)  				.IssueAsset(bob.PubKey' new AssetMoney(silverId' 10))  				.SendAsset(satoshi.PubKey' new AssetMoney(goldId' 30))  				.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: Assert.Equal(500' colored.Inputs[0].Asset.Quantity);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: Assert.Equal(2' colored.Transfers.Count);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: AssertHasAsset(tx' colored' colored.Transfers[0]' goldId' 470' bob.PubKey);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: AssertHasAsset(tx' colored' colored.Transfers[1]' goldId' 30' satoshi.PubKey);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: tx = txBuilder  					.AddKeys(gold)  					.AddCoins(issuanceCoins)  					.IssueAsset(satoshi.PubKey' new AssetMoney(goldId' 1000UL))  					.SetChange(gold.PubKey)  					.SendFees(Money.Coins(0.0004m))  					.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: tx = txBuilder  					.AddKeys(gold)  					.AddCoins(issuanceCoins)  					.IssueAsset(satoshi.PubKey' new AssetMoney(goldId' 1000UL))  					.SetChange(gold.PubKey)  					.SendFees(Money.Coins(0.0004m))  					.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: tx = txBuilder  					.AddKeys(silver' gold)  					.AddCoins(issuanceCoins)  					.AddCoins(new Coin(new OutPoint(tx.GetHash()' 0)' new TxOut("2.5"' gold.PubKey.ScriptPubKey)))  					.IssueAsset(bob.PubKey' new AssetMoney(silverId' 300UL))  					.Send(bob.PubKey' "2.00")  					.SendFees(Money.Coins(0.0004m))  					.SetChange(gold.PubKey)  					.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: tx = txBuilder  					.AddKeys(silver' gold)  					.AddCoins(issuanceCoins)  					.AddCoins(new Coin(new OutPoint(tx.GetHash()' 0)' new TxOut("2.5"' gold.PubKey.ScriptPubKey)))  					.IssueAsset(bob.PubKey' new AssetMoney(silverId' 300UL))  					.Send(bob.PubKey' "2.00")  					.SendFees(Money.Coins(0.0004m))  					.SetChange(gold.PubKey)  					.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: var bobBitcoin = new Coin(new OutPoint(tx.GetHash()' 2)' tx.Outputs[2]);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: var bobBitcoin = new Coin(new OutPoint(tx.GetHash()' 2)' tx.Outputs[2]);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: tx = txBuilder  					.AddKeys(gold)  					.AddCoins(issuanceCoins)  					.IssueAsset(bob.PubKey' new AssetMoney(goldId' 50UL))  					.SetChange(gold.PubKey)  					.SendFees(Money.Coins(0.0004m))  					.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: tx = txBuilder  					.AddKeys(gold)  					.AddCoins(issuanceCoins)  					.IssueAsset(bob.PubKey' new AssetMoney(goldId' 50UL))  					.SetChange(gold.PubKey)  					.SendFees(Money.Coins(0.0004m))  					.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: tx = txBuilder  				.AddCoins(satoshiCoin)  				.AddCoins(satoshiBTC)  				.SendAsset(bob.PubKey' new AssetMoney(goldId' 100))  				.SendFees(Money.Coins(0.0004m))  				.SetChange(satoshi.PubKey)  				.Then()  				.AddCoins(bobSilverCoin' bobGoldCoin' bobBitcoin)  				.SendAsset(satoshi.PubKey' new AssetMoney(silverId' 200))  				.Send(satoshi.PubKey' "0.9")  				.SendAsset(satoshi.PubKey' new AssetMoney(goldId' 5))  				.SetChange(bob.PubKey)  				.BuildTransaction(false);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: tx = txBuilder  				.AddCoins(satoshiCoin)  				.AddCoins(satoshiBTC)  				.SendAsset(bob.PubKey' new AssetMoney(goldId' 100))  				.SendFees(Money.Coins(0.0004m))  				.SetChange(satoshi.PubKey)  				.Then()  				.AddCoins(bobSilverCoin' bobGoldCoin' bobBitcoin)  				.SendAsset(satoshi.PubKey' new AssetMoney(silverId' 200))  				.Send(satoshi.PubKey' "0.9")  				.SendAsset(satoshi.PubKey' new AssetMoney(goldId' 5))  				.SetChange(bob.PubKey)  				.BuildTransaction(false);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: tx = txBuilder  				.AddCoins(satoshiCoin)  				.AddCoins(satoshiBTC)  				.SendAsset(bob.PubKey' new AssetMoney(goldId' 100))  				.SendFees(Money.Coins(0.0004m))  				.SetChange(satoshi.PubKey)  				.Then()  				.AddCoins(bobSilverCoin' bobGoldCoin' bobBitcoin)  				.SendAsset(satoshi.PubKey' new AssetMoney(silverId' 200))  				.Send(satoshi.PubKey' "0.9")  				.SendAsset(satoshi.PubKey' new AssetMoney(goldId' 5))  				.SetChange(bob.PubKey)  				.BuildTransaction(false);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: tx = txBuilder  				.AddCoins(satoshiCoin)  				.AddCoins(satoshiBTC)  				.SendAsset(bob.PubKey' new AssetMoney(goldId' 100))  				.SendFees(Money.Coins(0.0004m))  				.SetChange(satoshi.PubKey)  				.Then()  				.AddCoins(bobSilverCoin' bobGoldCoin' bobBitcoin)  				.SendAsset(satoshi.PubKey' new AssetMoney(silverId' 200))  				.Send(satoshi.PubKey' "0.9")  				.SendAsset(satoshi.PubKey' new AssetMoney(goldId' 5))  				.SetChange(bob.PubKey)  				.BuildTransaction(false);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: AssertHasAsset(tx' colored' colored.Inputs[0]' goldId' 1000' null);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: AssertHasAsset(tx' colored' colored.Inputs[1]' silverId' 300' null);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: AssertHasAsset(tx' colored' colored.Transfers[0]' goldId' 900' satoshi.PubKey);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: AssertHasAsset(tx' colored' colored.Transfers[1]' goldId' 100' bob.PubKey);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: AssertHasAsset(tx' colored' colored.Transfers[2]' silverId' 100' bob.PubKey);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: AssertHasAsset(tx' colored' colored.Transfers[2]' silverId' 100' bob.PubKey);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: AssertHasAsset(tx' colored' colored.Transfers[3]' silverId' 200' satoshi.PubKey);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: AssertHasAsset(tx' colored' colored.Transfers[3]' silverId' 200' satoshi.PubKey);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: AssertHasAsset(tx' colored' colored.Transfers[4]' goldId' 45' bob.PubKey);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: AssertHasAsset(tx' colored' colored.Transfers[4]' goldId' 45' bob.PubKey);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: AssertHasAsset(tx' colored' colored.Transfers[5]' goldId' 5' satoshi.PubKey);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: AssertHasAsset(tx' colored' colored.Transfers[5]' goldId' 5' satoshi.PubKey);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: Assert.True(tx.Outputs[8].Value == Money.Parse("1.0999424"));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: Assert.True(tx.Outputs[8].ScriptPubKey == bob.PubKey.ScriptPubKey);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: Assert.True(tx.Outputs[9].Value == Money.Parse("0.9"));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: Assert.True(tx.Outputs[9].ScriptPubKey == satoshi.PubKey.ScriptPubKey);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: var funding =  				builder.AddCoins(issuanceCoins)  				.AddKeys(gold)  				.IssueAsset(bob.PubKey.Hash' new AssetMoney(goldId' 100UL))  				.SetChange(gold.PubKey.Hash)  				.SendFees(Money.Coins(0.0004m))  				.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: var funding =  				builder.AddCoins(issuanceCoins)  				.AddKeys(gold)  				.IssueAsset(bob.PubKey.Hash' new AssetMoney(goldId' 100UL))  				.SetChange(gold.PubKey.Hash)  				.SendFees(Money.Coins(0.0004m))  				.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildColoredTransaction,The following statement contains a magic number: transfer =  					builder  					.AddCoins(bobGold)  					.SendAsset(alice.PubKey.Hash' new AssetMoney(goldId' 40UL))  					.SetChange(bob.PubKey.Hash)  					.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildStealthTransaction,The following statement contains a magic number: var stealthKeys = Enumerable.Range(0' 3).Select(_ => new Key()).ToArray();
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildStealthTransaction,The following statement contains a magic number: var darkSatoshi = new BitcoinStealthAddress(scanKey.PubKey' stealthKeys.Select(k => k.PubKey).ToArray()' 2' new BitField(3' 5)' Network.Main);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildStealthTransaction,The following statement contains a magic number: var darkSatoshi = new BitcoinStealthAddress(scanKey.PubKey' stealthKeys.Select(k => k.PubKey).ToArray()' 2' new BitField(3' 5)' Network.Main);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildStealthTransaction,The following statement contains a magic number: var darkSatoshi = new BitcoinStealthAddress(scanKey.PubKey' stealthKeys.Select(k => k.PubKey).ToArray()' 2' new BitField(3' 5)' Network.Main);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildStealthTransaction,The following statement contains a magic number: tx =  				builder  					.AddCoins(stealthCoin)  					.AddKeys(stealthKeys.Skip(2).ToArray()) //Only one Stealth Key  					.AddKeys(scanKey)  					.Send(bob.PubKey.Hash' "1.00")  					.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanSwitchGroup,The following statement contains a magic number: FeeRate rate = new FeeRate(Money.Coins(0.0004m));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanSwitchGroup,The following statement contains a magic number: var tx1 = builder  				.AddCoins(aliceCoins)  				.AddKeys(alice)  				.Send(satoshi' Money.Coins(0.1m))  				.SetChange(alice)  				.Then()  				.AddCoins(bobCoins)  				.AddKeys(bob)  				.Send(satoshi' Money.Coins(0.01m))  				.SetChange(bob)  				.SendEstimatedFeesSplit(rate)  				.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanSwitchGroup,The following statement contains a magic number: var tx1 = builder  				.AddCoins(aliceCoins)  				.AddKeys(alice)  				.Send(satoshi' Money.Coins(0.1m))  				.SetChange(alice)  				.Then()  				.AddCoins(bobCoins)  				.AddKeys(bob)  				.Send(satoshi' Money.Coins(0.01m))  				.SetChange(bob)  				.SendEstimatedFeesSplit(rate)  				.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanSwitchGroup,The following statement contains a magic number: var tx2 = builder  				.Then("Alice")  				.AddCoins(aliceCoins)  				.AddKeys(alice)  				.Send(satoshi' Money.Coins(0.1m))  				.Then("Bob")  				.AddCoins(bobCoins)  				.AddKeys(bob)  				.Send(satoshi' Money.Coins(0.01m))  				.SetChange(bob)  				.Then("Alice")  				.SetChange(alice)  				.SendEstimatedFeesSplit(rate)  				.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanSwitchGroup,The following statement contains a magic number: var tx2 = builder  				.Then("Alice")  				.AddCoins(aliceCoins)  				.AddKeys(alice)  				.Send(satoshi' Money.Coins(0.1m))  				.Then("Bob")  				.AddCoins(bobCoins)  				.AddKeys(bob)  				.Send(satoshi' Money.Coins(0.01m))  				.SetChange(bob)  				.Then("Alice")  				.SetChange(alice)  				.SendEstimatedFeesSplit(rate)  				.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanSplitFees,The following statement contains a magic number: FeeRate rate = new FeeRate(Money.Coins(0.0004m));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanSplitFees,The following statement contains a magic number: var tx = builder  				.AddCoins(aliceCoins)  				.AddKeys(alice)  				.Send(satoshi' Money.Coins(0.1m))  				.SetChange(alice)  				.Then()  				.AddCoins(bobCoins)  				.AddKeys(bob)  				.Send(satoshi' Money.Coins(0.01m))  				.SetChange(bob)  				.SendEstimatedFeesSplit(rate)  				.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanSplitFees,The following statement contains a magic number: var tx = builder  				.AddCoins(aliceCoins)  				.AddKeys(alice)  				.Send(satoshi' Money.Coins(0.1m))  				.SetChange(alice)  				.Then()  				.AddCoins(bobCoins)  				.AddKeys(bob)  				.Send(satoshi' Money.Coins(0.01m))  				.SetChange(bob)  				.SendEstimatedFeesSplit(rate)  				.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanSplitFees,The following statement contains a magic number: tx = builder  				.AddCoins(aliceCoins)  				.AddKeys(alice)  				.SetFeeWeight(2.0m)  				.Send(satoshi' Money.Coins(0.1m))  				.SetChange(alice)  				.Then()  				.AddCoins(bobCoins)  				.AddKeys(bob)  				.Send(satoshi' Money.Coins(0.01m))  				.SetChange(bob)  				.SendFeesSplit(Money.Coins(0.6m))  				.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanSplitFees,The following statement contains a magic number: tx = builder  				.AddCoins(aliceCoins)  				.AddKeys(alice)  				.SetFeeWeight(2.0m)  				.Send(satoshi' Money.Coins(0.1m))  				.SetChange(alice)  				.Then()  				.AddCoins(bobCoins)  				.AddKeys(bob)  				.Send(satoshi' Money.Coins(0.01m))  				.SetChange(bob)  				.SendFeesSplit(Money.Coins(0.6m))  				.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanSplitFees,The following statement contains a magic number: tx = builder  				.AddCoins(aliceCoins)  				.AddKeys(alice)  				.SetFeeWeight(2.0m)  				.Send(satoshi' Money.Coins(0.1m))  				.SetChange(alice)  				.Then()  				.AddCoins(bobCoins)  				.AddKeys(bob)  				.Send(satoshi' Money.Coins(0.01m))  				.SetChange(bob)  				.SendFeesSplit(Money.Coins(0.6m))  				.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanSplitFees,The following statement contains a magic number: tx = builder  				.AddCoins(aliceCoins)  				.AddKeys(alice)  				.SetFeeWeight(2.0m)  				.Send(satoshi' Money.Coins(0.1m))  				.SetChange(alice)  				.Then()  				.AddCoins(bobCoins)  				.AddKeys(bob)  				.Send(satoshi' Money.Coins(0.01m))  				.SetChange(bob)  				.SendFeesSplit(Money.Coins(0.6m))  				.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanSplitFees,The following statement contains a magic number: Assert.Equal(Money.Coins(0.1m + 0.4m)' spentAlice - receivedAlice);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanSplitFees,The following statement contains a magic number: Assert.Equal(Money.Coins(0.1m + 0.4m)' spentAlice - receivedAlice);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanSplitFees,The following statement contains a magic number: Assert.Equal(Money.Coins(0.01m + 0.2m)' spentBob - receivedBob);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanSplitFees,The following statement contains a magic number: Assert.Equal(Money.Coins(0.01m + 0.2m)' spentBob - receivedBob);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanVerifySequenceLock,The following statement contains a magic number: var now = new DateTimeOffset(1988' 7' 18' 0' 0' 0' TimeSpan.Zero);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanVerifySequenceLock,The following statement contains a magic number: var now = new DateTimeOffset(1988' 7' 18' 0' 0' 0' TimeSpan.Zero);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanVerifySequenceLock,The following statement contains a magic number: var now = new DateTimeOffset(1988' 7' 18' 0' 0' 0' TimeSpan.Zero);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanVerifySequenceLock,The following statement contains a magic number: var step = TimeSpan.FromMinutes(10.0);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanVerifySequenceLock,The following statement contains a magic number: CanVerifySequenceLockCore(new[] { new Sequence(1) }' new[] { 1 }' 2' now' true' new SequenceLock(1' -1));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanVerifySequenceLock,The following statement contains a magic number: CanVerifySequenceLockCore(  				new[]  				{  					new Sequence(1)'  					new Sequence(5)'  					new Sequence(11)'  					new Sequence(8)  				}'  				new[] { 1' 5' 7' 9 }' 10' DateTimeOffset.UtcNow' false' new SequenceLock(17' -1));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanVerifySequenceLock,The following statement contains a magic number: CanVerifySequenceLockCore(  				new[]  				{  					new Sequence(1)'  					new Sequence(5)'  					new Sequence(11)'  					new Sequence(8)  				}'  				new[] { 1' 5' 7' 9 }' 10' DateTimeOffset.UtcNow' false' new SequenceLock(17' -1));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanVerifySequenceLock,The following statement contains a magic number: CanVerifySequenceLockCore(  				new[]  				{  					new Sequence(1)'  					new Sequence(5)'  					new Sequence(11)'  					new Sequence(8)  				}'  				new[] { 1' 5' 7' 9 }' 10' DateTimeOffset.UtcNow' false' new SequenceLock(17' -1));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanVerifySequenceLock,The following statement contains a magic number: CanVerifySequenceLockCore(  				new[]  				{  					new Sequence(1)'  					new Sequence(5)'  					new Sequence(11)'  					new Sequence(8)  				}'  				new[] { 1' 5' 7' 9 }' 10' DateTimeOffset.UtcNow' false' new SequenceLock(17' -1));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanVerifySequenceLock,The following statement contains a magic number: CanVerifySequenceLockCore(  				new[]  				{  					new Sequence(1)'  					new Sequence(5)'  					new Sequence(11)'  					new Sequence(8)  				}'  				new[] { 1' 5' 7' 9 }' 10' DateTimeOffset.UtcNow' false' new SequenceLock(17' -1));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanVerifySequenceLock,The following statement contains a magic number: CanVerifySequenceLockCore(  				new[]  				{  					new Sequence(1)'  					new Sequence(5)'  					new Sequence(11)'  					new Sequence(8)  				}'  				new[] { 1' 5' 7' 9 }' 10' DateTimeOffset.UtcNow' false' new SequenceLock(17' -1));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanVerifySequenceLock,The following statement contains a magic number: CanVerifySequenceLockCore(  				new[]  				{  					new Sequence(1)'  					new Sequence(5)'  					new Sequence(11)'  					new Sequence(8)  				}'  				new[] { 1' 5' 7' 9 }' 10' DateTimeOffset.UtcNow' false' new SequenceLock(17' -1));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanVerifySequenceLock,The following statement contains a magic number: CanVerifySequenceLockCore(  				new[]  				{  					new Sequence(1)'  					new Sequence(5)'  					new Sequence(11)'  					new Sequence(8)  				}'  				new[] { 1' 5' 7' 9 }' 10' DateTimeOffset.UtcNow' false' new SequenceLock(17' -1));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanVerifySequenceLock,The following statement contains a magic number: CanVerifySequenceLockCore(  				new[]  				{  					new Sequence(smallStep)' //MTP(block[11] is +60min)  				}'  				new[] { 12 }' 13' now' true' new SequenceLock(-1' now + TimeSpan.FromMinutes(60.0) + smallStep - TimeSpan.FromSeconds(1)));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanVerifySequenceLock,The following statement contains a magic number: CanVerifySequenceLockCore(  				new[]  				{  					new Sequence(smallStep)' //MTP(block[11] is +60min)  				}'  				new[] { 12 }' 13' now' true' new SequenceLock(-1' now + TimeSpan.FromMinutes(60.0) + smallStep - TimeSpan.FromSeconds(1)));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanVerifySequenceLock,The following statement contains a magic number: CanVerifySequenceLockCore(  				new[]  				{  					new Sequence(smallStep)' //MTP(block[11] is +60min)  				}'  				new[] { 12 }' 13' now' true' new SequenceLock(-1' now + TimeSpan.FromMinutes(60.0) + smallStep - TimeSpan.FromSeconds(1)));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanVerifySequenceLock,The following statement contains a magic number: CanVerifySequenceLockCore(  				new[]  				{  					new Sequence(smallStep)' //MTP(block[11] is +60min)  				}'  				new[] { 12 }' 12' now' false' new SequenceLock(-1' now + TimeSpan.FromMinutes(60.0) + smallStep - TimeSpan.FromSeconds(1)));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanVerifySequenceLock,The following statement contains a magic number: CanVerifySequenceLockCore(  				new[]  				{  					new Sequence(smallStep)' //MTP(block[11] is +60min)  				}'  				new[] { 12 }' 12' now' false' new SequenceLock(-1' now + TimeSpan.FromMinutes(60.0) + smallStep - TimeSpan.FromSeconds(1)));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanVerifySequenceLock,The following statement contains a magic number: CanVerifySequenceLockCore(  				new[]  				{  					new Sequence(smallStep)' //MTP(block[11] is +60min)  				}'  				new[] { 12 }' 12' now' false' new SequenceLock(-1' now + TimeSpan.FromMinutes(60.0) + smallStep - TimeSpan.FromSeconds(1)));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanVerifySequenceLockCore,The following statement contains a magic number: first = first + TimeSpan.FromMinutes(10);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanVerifySequenceLockCore,The following statement contains a magic number: first = first + TimeSpan.FromMinutes(10);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanVerifySequenceLockCore,The following statement contains a magic number: tx.Version = 2;
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanEstimateFees,The following statement contains a magic number: var bobAlice = PayToMultiSigTemplate.Instance.GenerateScriptPubKey(2' alice.PubKey' bob.PubKey);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanEstimateFees,The following statement contains a magic number: Assert.True(Math.Abs(signed.ToBytes().Length - builder.EstimateSize(unsigned)) < 20);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanEstimateFees,The following statement contains a magic number: var rate = new FeeRate(Money.Coins(0.0004m));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BigUIntCoverage,The following statement contains a magic number: i < 20
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BigUIntCoverage,The following statement contains a magic number: i < 32
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BitcoinStreamCoverage,The following statement contains a magic number: BitcoinStreamCoverageCore(new ulong[] { 1' 2' 3' 4 }' (BitcoinStream bs' ref ulong[] items) =>  			{  				bs.ReadWrite(ref items);  			});
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BitcoinStreamCoverage,The following statement contains a magic number: BitcoinStreamCoverageCore(new ulong[] { 1' 2' 3' 4 }' (BitcoinStream bs' ref ulong[] items) =>  			{  				bs.ReadWrite(ref items);  			});
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BitcoinStreamCoverage,The following statement contains a magic number: BitcoinStreamCoverageCore(new ulong[] { 1' 2' 3' 4 }' (BitcoinStream bs' ref ulong[] items) =>  			{  				bs.ReadWrite(ref items);  			});
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BitcoinStreamCoverage,The following statement contains a magic number: BitcoinStreamCoverageCore(new ushort[] { 1' 2' 3' 4 }' (BitcoinStream bs' ref ushort[] items) =>  			{  				bs.ReadWrite(ref items);  			});
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BitcoinStreamCoverage,The following statement contains a magic number: BitcoinStreamCoverageCore(new ushort[] { 1' 2' 3' 4 }' (BitcoinStream bs' ref ushort[] items) =>  			{  				bs.ReadWrite(ref items);  			});
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BitcoinStreamCoverage,The following statement contains a magic number: BitcoinStreamCoverageCore(new ushort[] { 1' 2' 3' 4 }' (BitcoinStream bs' ref ushort[] items) =>  			{  				bs.ReadWrite(ref items);  			});
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BitcoinStreamCoverage,The following statement contains a magic number: BitcoinStreamCoverageCore(new uint[] { 1' 2' 3' 4 }' (BitcoinStream bs' ref uint[] items) =>  			{  				bs.ReadWrite(ref items);  			});
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BitcoinStreamCoverage,The following statement contains a magic number: BitcoinStreamCoverageCore(new uint[] { 1' 2' 3' 4 }' (BitcoinStream bs' ref uint[] items) =>  			{  				bs.ReadWrite(ref items);  			});
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BitcoinStreamCoverage,The following statement contains a magic number: BitcoinStreamCoverageCore(new uint[] { 1' 2' 3' 4 }' (BitcoinStream bs' ref uint[] items) =>  			{  				bs.ReadWrite(ref items);  			});
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BitcoinStreamCoverage,The following statement contains a magic number: BitcoinStreamCoverageCore(new short[] { -1' 1' 2' 3' 4 }' (BitcoinStream bs' ref short[] items) =>  			{  				bs.ReadWrite(ref items);  			});
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BitcoinStreamCoverage,The following statement contains a magic number: BitcoinStreamCoverageCore(new short[] { -1' 1' 2' 3' 4 }' (BitcoinStream bs' ref short[] items) =>  			{  				bs.ReadWrite(ref items);  			});
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BitcoinStreamCoverage,The following statement contains a magic number: BitcoinStreamCoverageCore(new short[] { -1' 1' 2' 3' 4 }' (BitcoinStream bs' ref short[] items) =>  			{  				bs.ReadWrite(ref items);  			});
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BitcoinStreamCoverage,The following statement contains a magic number: BitcoinStreamCoverageCore(new long[] { -1' 1' 2' 3' 4 }' (BitcoinStream bs' ref long[] items) =>  			 {  				 bs.ReadWrite(ref items);  			 });
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BitcoinStreamCoverage,The following statement contains a magic number: BitcoinStreamCoverageCore(new long[] { -1' 1' 2' 3' 4 }' (BitcoinStream bs' ref long[] items) =>  			 {  				 bs.ReadWrite(ref items);  			 });
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BitcoinStreamCoverage,The following statement contains a magic number: BitcoinStreamCoverageCore(new long[] { -1' 1' 2' 3' 4 }' (BitcoinStream bs' ref long[] items) =>  			 {  				 bs.ReadWrite(ref items);  			 });
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BitcoinStreamCoverage,The following statement contains a magic number: BitcoinStreamCoverageCore(new byte[] { 1' 2' 3' 4 }' (BitcoinStream bs' ref byte[] items) =>  			{  				bs.ReadWrite(ref items);  			});
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BitcoinStreamCoverage,The following statement contains a magic number: BitcoinStreamCoverageCore(new byte[] { 1' 2' 3' 4 }' (BitcoinStream bs' ref byte[] items) =>  			{  				bs.ReadWrite(ref items);  			});
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BitcoinStreamCoverage,The following statement contains a magic number: BitcoinStreamCoverageCore(new byte[] { 1' 2' 3' 4 }' (BitcoinStream bs' ref byte[] items) =>  			{  				bs.ReadWrite(ref items);  			});
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BitcoinStreamCoverage,The following statement contains a magic number: BitcoinStreamCoverageCore(new uint160[] { new uint160(1)' new uint160(2)' new uint160(3)' new uint160(4) }' (BitcoinStream bs' ref uint160[] items) =>  			{  				var l = items.ToList();  				bs.ReadWrite(ref l);  				items = l.ToArray();  			});
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BitcoinStreamCoverage,The following statement contains a magic number: BitcoinStreamCoverageCore(new uint160[] { new uint160(1)' new uint160(2)' new uint160(3)' new uint160(4) }' (BitcoinStream bs' ref uint160[] items) =>  			{  				var l = items.ToList();  				bs.ReadWrite(ref l);  				items = l.ToArray();  			});
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,BitcoinStreamCoverage,The following statement contains a magic number: BitcoinStreamCoverageCore(new uint160[] { new uint160(1)' new uint160(2)' new uint160(3)' new uint160(4) }' (BitcoinStream bs' ref uint160[] items) =>  			{  				var l = items.ToList();  				bs.ReadWrite(ref l);  				items = l.ToArray();  			});
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildWitTransaction,The following statement contains a magic number: Action<Transaction' TransactionBuilder> AssertEstimatedSize = (tx' b) =>  			{  				var expectedVSize = tx.GetVirtualSize();  				var actualVSize = b.EstimateSize(tx' true);  				var expectedSize = tx.GetSerializedSize();  				var actualSize = b.EstimateSize(tx' false);  				Assert.True(Math.Abs(expectedVSize - actualVSize) < Math.Abs(expectedVSize - actualSize));  				Assert.True(Math.Abs(expectedSize - actualSize) < Math.Abs(expectedSize - actualVSize));  				Assert.True(Math.Abs(expectedVSize - actualVSize) < Math.Abs(expectedSize - actualVSize));  				Assert.True(Math.Abs(expectedSize - actualSize) < Math.Abs(expectedVSize - actualSize));    				var error = (decimal)Math.Abs(expectedVSize - actualVSize) / Math.Min(expectedVSize' actualSize);  				Assert.True(error < 0.01m);  			};
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildWitTransaction,The following statement contains a magic number: builder.Send(bob' Money.Coins(0.4m));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildWitTransaction,The following statement contains a magic number: builder.SendFees(Money.Satoshis(30000));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildWitTransaction,The following statement contains a magic number: builder.Send(bob' Money.Coins(0.4m));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildWitTransaction,The following statement contains a magic number: builder.SendFees(Money.Satoshis(30000));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildWitTransaction,The following statement contains a magic number: builder.Send(bob' Money.Coins(0.4m));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildWitTransaction,The following statement contains a magic number: builder.SendFees(Money.Satoshis(30000));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildWitTransaction,The following statement contains a magic number: builder.Send(bob' Money.Coins(0.4m));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildWitTransaction,The following statement contains a magic number: builder.SendFees(Money.Satoshis(30000));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanFilterUneconomicalCoins,The following statement contains a magic number: builder.Send(bob' Money.Coins(0.4m));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanFilterUneconomicalCoins,The following statement contains a magic number: builder.SendFees(Money.Satoshis(30000));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanCheckSegwitPubkey,The following statement contains a magic number: a = new Script("1 " + String.Concat(Enumerable.Range(0' pushSize * 2).Select(_ => "0").ToArray()));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanCheckSegwitPubkey,The following statement contains a magic number: new[] { 2' 10' 20' 32 }
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanCheckSegwitPubkey,The following statement contains a magic number: new[] { 2' 10' 20' 32 }
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanCheckSegwitPubkey,The following statement contains a magic number: new[] { 2' 10' 20' 32 }
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanCheckSegwitPubkey,The following statement contains a magic number: new[] { 2' 10' 20' 32 }
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanCheckSegwitPubkey,The following statement contains a magic number: a = new Script("1 " + String.Concat(Enumerable.Range(0' 33 * 2).Select(_ => "0").ToArray()));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanCheckSegwitPubkey,The following statement contains a magic number: a = new Script("1 " + String.Concat(Enumerable.Range(0' 33 * 2).Select(_ => "0").ToArray()));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanEstimatedFeesCorrectlyIfFeesChangeTransactionSize,The following statement contains a magic number: var redeem = PayToMultiSigTemplate.Instance.GenerateScriptPubKey(2' new Key().PubKey' new Key().PubKey' new Key().PubKey);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanEstimatedFeesCorrectlyIfFeesChangeTransactionSize,The following statement contains a magic number: transactionBuilder.AddCoins(new Coin(new OutPoint(uint256.Parse("75425c904289f21feef0cffab2081ba22030b633623115adf0780edad443e6c7")' 2)' new TxOut("0.00091824"' PayToScriptHashTemplate.Instance.GenerateScriptPubKey(redeem).GetDestinationAddress(Network.Main))).ToScriptCoin(redeem));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanEstimatedFeesCorrectlyIfFeesChangeTransactionSize,The following statement contains a magic number: transactionBuilder.AddCoins(new Coin(new OutPoint(uint256.Parse("75425c904289f21feef0cffab2081ba22030b633623115adf0780edad443e6c7")' 3)' new TxOut("0.00100000"' PayToScriptHashTemplate.Instance.GenerateScriptPubKey(redeem).GetDestinationAddress(Network.Main))).ToScriptCoin(redeem));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanEstimatedFeesCorrectlyIfFeesChangeTransactionSize,The following statement contains a magic number: transactionBuilder.AddCoins(new Coin(new OutPoint(uint256.Parse("75425c904289f21feef0cffab2081ba22030b633623115adf0780edad443e6c7")' 4)' new TxOut("0.00100000"' PayToScriptHashTemplate.Instance.GenerateScriptPubKey(redeem).GetDestinationAddress(Network.Main))).ToScriptCoin(redeem));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanEstimatedFeesCorrectlyIfFeesChangeTransactionSize,The following statement contains a magic number: transactionBuilder.AddCoins(new Coin(new OutPoint(uint256.Parse("75425c904289f21feef0cffab2081ba22030b633623115adf0780edad443e6c7")' 5)' new TxOut("0.00246414"' PayToScriptHashTemplate.Instance.GenerateScriptPubKey(redeem).GetDestinationAddress(Network.Main))).ToScriptCoin(redeem));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanEstimatedFeesCorrectlyIfFeesChangeTransactionSize,The following statement contains a magic number: transactionBuilder.AddCoins(new Coin(new OutPoint(uint256.Parse("75425c904289f21feef0cffab2081ba22030b633623115adf0780edad443e6c7")' 6)' new TxOut("0.00250980"' PayToScriptHashTemplate.Instance.GenerateScriptPubKey(redeem).GetDestinationAddress(Network.Main))).ToScriptCoin(redeem));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanEstimatedFeesCorrectlyIfFeesChangeTransactionSize,The following statement contains a magic number: transactionBuilder.AddCoins(new Coin(new OutPoint(uint256.Parse("75425c904289f21feef0cffab2081ba22030b633623115adf0780edad443e6c7")' 7)' new TxOut("0.01000000"' PayToScriptHashTemplate.Instance.GenerateScriptPubKey(redeem).GetDestinationAddress(Network.Main))).ToScriptCoin(redeem));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanEstimatedFeesCorrectlyIfFeesChangeTransactionSize,The following statement contains a magic number: var feeRate = new FeeRate((long)32563);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanSubstractFees,The following statement contains a magic number: var tx =  				Network.CreateTransactionBuilder()  				.AddCoins(new Coin(new OutPoint(Rand()' 1)' new TxOut(Money.Coins(1.0m)' alice.ScriptPubKey)))  				.AddKeys(alice)  				.Send(bob' Money.Coins(0.6m))  				.SubtractFees()  				.SendFees(Money.Coins(0.01m))  				.SetChange(alice)  				.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanSubstractFees,The following statement contains a magic number: var tx =  				Network.CreateTransactionBuilder()  				.AddCoins(new Coin(new OutPoint(Rand()' 1)' new TxOut(Money.Coins(1.0m)' alice.ScriptPubKey)))  				.AddKeys(alice)  				.Send(bob' Money.Coins(0.6m))  				.SubtractFees()  				.SendFees(Money.Coins(0.01m))  				.SetChange(alice)  				.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanSubstractFees,The following statement contains a magic number: Assert.Contains(tx.Outputs' o => o.Value == Money.Coins(0.59m));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,AssertDogeHasAMinimumOf1DogeFee,The following statement contains a magic number: txBuilder.AddCoins(RandomCoin(Money.Coins(10m)' k.PubKey.Hash));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,AssertDogeHasAMinimumOf1DogeFee,The following statement contains a magic number: txBuilder.Send(new Key().ScriptPubKey' Money.Coins(4));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,AssertDogeHasAMinimumOf1DogeFee,The following statement contains a magic number: txBuilder.SendFees(Money.Coins(0.0001m));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransaction,The following statement contains a magic number: var keys = Enumerable.Range(0' 5).Select(i => new Key()).ToArray();
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransaction,The following statement contains a magic number: var multiSigPubKey = PayToMultiSigTemplate.Instance.GenerateScriptPubKey(2' keys.Select(k => k.PubKey).Take(3).ToArray());
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransaction,The following statement contains a magic number: var multiSigPubKey = PayToMultiSigTemplate.Instance.GenerateScriptPubKey(2' keys.Select(k => k.PubKey).Take(3).ToArray());
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransaction,The following statement contains a magic number: var pubKeyPubKey = PayToPubkeyTemplate.Instance.GenerateScriptPubKey(keys[4].PubKey);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransaction,The following statement contains a magic number: var pubKeyHashPubKey = PayToPubkeyHashTemplate.Instance.GenerateScriptPubKey(keys[4].PubKey.Hash);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransaction,The following statement contains a magic number: var tx = txBuilder  				.AddCoins(allCoins)  				.AddKeys(keys)  				.Send(destinations[0]' Money.Parse("6") * 2)  				.Send(destinations[2]' Money.Parse("5"))  				.Send(destinations[2]' Money.Parse("0.9999"))  				.SendFees(Money.Parse("0.0001"))  				.SetChange(destinations[3])  				.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransaction,The following statement contains a magic number: var tx = txBuilder  				.AddCoins(allCoins)  				.AddKeys(keys)  				.Send(destinations[0]' Money.Parse("6") * 2)  				.Send(destinations[2]' Money.Parse("5"))  				.Send(destinations[2]' Money.Parse("0.9999"))  				.SendFees(Money.Parse("0.0001"))  				.SetChange(destinations[3])  				.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransaction,The following statement contains a magic number: var tx = txBuilder  				.AddCoins(allCoins)  				.AddKeys(keys)  				.Send(destinations[0]' Money.Parse("6") * 2)  				.Send(destinations[2]' Money.Parse("5"))  				.Send(destinations[2]' Money.Parse("0.9999"))  				.SendFees(Money.Parse("0.0001"))  				.SetChange(destinations[3])  				.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransaction,The following statement contains a magic number: var tx = txBuilder  				.AddCoins(allCoins)  				.AddKeys(keys)  				.Send(destinations[0]' Money.Parse("6") * 2)  				.Send(destinations[2]' Money.Parse("5"))  				.Send(destinations[2]' Money.Parse("0.9999"))  				.SendFees(Money.Parse("0.0001"))  				.SetChange(destinations[3])  				.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransaction,The following statement contains a magic number: Assert.Equal(3' tx.Outputs.Count);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransaction,The following statement contains a magic number: tx = txBuilder  			   .AddCoins(allCoins)  			   .AddKeys(keys)  			   .SetGroupName("test")  			   .Send(destinations[0]' Money.Parse("6") * 2)  			   .Send(destinations[2]' Money.Parse("5"))  			   .Send(destinations[2]' Money.Parse("0.9998"))  			   .SendFees(Money.Parse("0.0001"))  			   .SetChange(destinations[3])  			   .BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransaction,The following statement contains a magic number: tx = txBuilder  			   .AddCoins(allCoins)  			   .AddKeys(keys)  			   .SetGroupName("test")  			   .Send(destinations[0]' Money.Parse("6") * 2)  			   .Send(destinations[2]' Money.Parse("5"))  			   .Send(destinations[2]' Money.Parse("0.9998"))  			   .SendFees(Money.Parse("0.0001"))  			   .SetChange(destinations[3])  			   .BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransaction,The following statement contains a magic number: tx = txBuilder  			   .AddCoins(allCoins)  			   .AddKeys(keys)  			   .SetGroupName("test")  			   .Send(destinations[0]' Money.Parse("6") * 2)  			   .Send(destinations[2]' Money.Parse("5"))  			   .Send(destinations[2]' Money.Parse("0.9998"))  			   .SendFees(Money.Parse("0.0001"))  			   .SetChange(destinations[3])  			   .BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransaction,The following statement contains a magic number: tx = txBuilder  			   .AddCoins(allCoins)  			   .AddKeys(keys)  			   .SetGroupName("test")  			   .Send(destinations[0]' Money.Parse("6") * 2)  			   .Send(destinations[2]' Money.Parse("5"))  			   .Send(destinations[2]' Money.Parse("0.9998"))  			   .SendFees(Money.Parse("0.0001"))  			   .SetChange(destinations[3])  			   .BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransaction,The following statement contains a magic number: Assert.Equal(4' tx.Outputs.Count);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransaction,The following statement contains a magic number: txBuilder.Send(destinations[4]' Money.Parse("1"));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransaction,The following statement contains a magic number: tx = txBuilder  					.AddCoins(allCoins)  					.AddKeys(keys.Skip(2).ToArray())  //One of the multi key missing  					.Send(destinations[0]' Money.Parse("6") * 2)  					.Send(destinations[2]' Money.Parse("5"))  					.Send(destinations[2]' Money.Parse("0.9998"))  					.SendFees(Money.Parse("0.0001"))  					.SetChange(destinations[3])  					.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransaction,The following statement contains a magic number: tx = txBuilder  					.AddCoins(allCoins)  					.AddKeys(keys.Skip(2).ToArray())  //One of the multi key missing  					.Send(destinations[0]' Money.Parse("6") * 2)  					.Send(destinations[2]' Money.Parse("5"))  					.Send(destinations[2]' Money.Parse("0.9998"))  					.SendFees(Money.Parse("0.0001"))  					.SetChange(destinations[3])  					.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransaction,The following statement contains a magic number: tx = txBuilder  					.AddCoins(allCoins)  					.AddKeys(keys.Skip(2).ToArray())  //One of the multi key missing  					.Send(destinations[0]' Money.Parse("6") * 2)  					.Send(destinations[2]' Money.Parse("5"))  					.Send(destinations[2]' Money.Parse("0.9998"))  					.SendFees(Money.Parse("0.0001"))  					.SetChange(destinations[3])  					.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransaction,The following statement contains a magic number: tx = txBuilder  					.AddCoins(allCoins)  					.AddKeys(keys.Skip(2).ToArray())  //One of the multi key missing  					.Send(destinations[0]' Money.Parse("6") * 2)  					.Send(destinations[2]' Money.Parse("5"))  					.Send(destinations[2]' Money.Parse("0.9998"))  					.SendFees(Money.Parse("0.0001"))  					.SetChange(destinations[3])  					.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransaction,The following statement contains a magic number: tx = txBuilder  					.AddCoins(allCoins)  					.AddKeys(keys.Skip(2).ToArray())  //One of the multi key missing  					.Send(destinations[0]' Money.Parse("6") * 2)  					.Send(destinations[2]' Money.Parse("5"))  					.Send(destinations[2]' Money.Parse("0.9998"))  					.SendFees(Money.Parse("0.0001"))  					.SetChange(destinations[3])  					.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransaction,The following statement contains a magic number: tx = txBuilder  					.AddCoins(allCoins)  					.AddKeys(keys.Skip(2).ToArray())  //One of the multi key missing  					.Send(destinations[0]' Money.Parse("6") * 2)  					.Send(destinations[2]' Money.Parse("5"))  					.Send(destinations[2]' Money.Parse("0.9998"))  					.SendFees(Money.Parse("0.0001"))  					.SetChange(destinations[3])  					.BuildTransaction(false);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransaction,The following statement contains a magic number: tx = txBuilder  					.AddCoins(allCoins)  					.AddKeys(keys.Skip(2).ToArray())  //One of the multi key missing  					.Send(destinations[0]' Money.Parse("6") * 2)  					.Send(destinations[2]' Money.Parse("5"))  					.Send(destinations[2]' Money.Parse("0.9998"))  					.SendFees(Money.Parse("0.0001"))  					.SetChange(destinations[3])  					.BuildTransaction(false);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransaction,The following statement contains a magic number: tx = txBuilder  					.AddCoins(allCoins)  					.AddKeys(keys.Skip(2).ToArray())  //One of the multi key missing  					.Send(destinations[0]' Money.Parse("6") * 2)  					.Send(destinations[2]' Money.Parse("5"))  					.Send(destinations[2]' Money.Parse("0.9998"))  					.SendFees(Money.Parse("0.0001"))  					.SetChange(destinations[3])  					.BuildTransaction(false);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransaction,The following statement contains a magic number: tx = txBuilder  					.AddCoins(allCoins)  					.AddKeys(keys.Skip(2).ToArray())  //One of the multi key missing  					.Send(destinations[0]' Money.Parse("6") * 2)  					.Send(destinations[2]' Money.Parse("5"))  					.Send(destinations[2]' Money.Parse("0.9998"))  					.SendFees(Money.Parse("0.0001"))  					.SetChange(destinations[3])  					.BuildTransaction(false);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransaction,The following statement contains a magic number: tx = txBuilder  					.AddCoins(allCoins)  					.AddKeys(keys.Skip(2).ToArray())  //One of the multi key missing  					.Send(destinations[0]' Money.Parse("6") * 2)  					.Send(destinations[2]' Money.Parse("5"))  					.Send(destinations[2]' Money.Parse("0.9998"))  					.SendFees(Money.Parse("0.0001"))  					.SetChange(destinations[3])  					.BuildTransaction(false);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransaction,The following statement contains a magic number: i < 3
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,Rand,The following statement contains a magic number: return new uint256(RandomUtils.GetBytes(32));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanParseElementsStuff,The following statement contains a magic number: Assert.Equal(Money.Coins(0.00004927m)' tx.Outputs[0].Value);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanParseElementsStuff,The following statement contains a magic number: tx.Outputs[0].Value = Money.Coins(0.00004926m);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanParseElementsStuff,The following statement contains a magic number: tx.Outputs[0].Value = Money.Coins(0.00004927m);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransactionWithDustPrevention,The following statement contains a magic number: builder.StandardTransactionPolicy.MinRelayTxFee = new FeeRate(new Money(1000L));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransactionWithDustPrevention,The following statement contains a magic number: Func<Transaction> create = () => builder  				.AddCoins(coins)  				.AddKeys(bob)  				.Send(alice' Money.Coins(0.99m))  				.Send(alice' Money.Satoshis(500))  				.Send(TxNullDataTemplate.Instance.GenerateScriptPubKey(new byte[] { 1' 2 })' Money.Zero)  				.SendFees(Money.Coins(0.0001m))  				.SetChange(bob)  				.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransactionWithDustPrevention,The following statement contains a magic number: Func<Transaction> create = () => builder  				.AddCoins(coins)  				.AddKeys(bob)  				.Send(alice' Money.Coins(0.99m))  				.Send(alice' Money.Satoshis(500))  				.Send(TxNullDataTemplate.Instance.GenerateScriptPubKey(new byte[] { 1' 2 })' Money.Zero)  				.SendFees(Money.Coins(0.0001m))  				.SetChange(bob)  				.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransactionWithDustPrevention,The following statement contains a magic number: Func<Transaction> create = () => builder  				.AddCoins(coins)  				.AddKeys(bob)  				.Send(alice' Money.Coins(0.99m))  				.Send(alice' Money.Satoshis(500))  				.Send(TxNullDataTemplate.Instance.GenerateScriptPubKey(new byte[] { 1' 2 })' Money.Zero)  				.SendFees(Money.Coins(0.0001m))  				.SetChange(bob)  				.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransactionWithDustPrevention,The following statement contains a magic number: Func<Transaction> create = () => builder  				.AddCoins(coins)  				.AddKeys(bob)  				.Send(alice' Money.Coins(0.99m))  				.Send(alice' Money.Satoshis(500))  				.Send(TxNullDataTemplate.Instance.GenerateScriptPubKey(new byte[] { 1' 2 })' Money.Zero)  				.SendFees(Money.Coins(0.0001m))  				.SetChange(bob)  				.BuildTransaction(true);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransactionWithDustPrevention,The following statement contains a magic number: Assert.True(signed.Outputs.Count == 3);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransactionWithDustPrevention,The following statement contains a magic number: Assert.True(builder.Verify(signed' Money.Coins(0.0001m)));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransactionWithDustPrevention,The following statement contains a magic number: Assert.False(builder.Verify(signed' Money.Coins(0.0001m)' out errors));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransactionWithDustPrevention,The following statement contains a magic number: builder.StandardTransactionPolicy.MinRelayTxFee = new FeeRate(new Money(1000L));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanBuildTransactionWithDustPrevention,The following statement contains a magic number: Assert.True(signed.Outputs.Count == 4);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanPartiallySignTransaction,The following statement contains a magic number: var redeem = PayToMultiSigTemplate.Instance.GenerateScriptPubKey(2' privKeys.Select(k => k.PubKey).ToArray());
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanPartiallySignTransaction,The following statement contains a magic number: partiallySigned.Sign(new[] { privKeys[2] }' coins);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanPartiallySignTransaction,The following statement contains a magic number: partiallySigned.Sign(new[] { privKeys[2] }' partiallySigned.Outputs.AsCoins().ToArray());
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanReadCoinbaseHeight,The following statement contains a magic number: Assert.Equal(828575' bip34Block.GetCoinbaseHeight());
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanUseLockTime,The following statement contains a magic number: tx.LockTime = new LockTime(4);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanUseLockTime,The following statement contains a magic number: Assert.Equal(3' (int)new LockTime(3));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanUseLockTime,The following statement contains a magic number: Assert.Equal(3' (int)new LockTime(3));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanUseLockTime,The following statement contains a magic number: Assert.Equal((uint)3' (uint)new LockTime(3));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanUseLockTime,The following statement contains a magic number: Assert.Equal((uint)3' (uint)new LockTime(3));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanUseLockTime,The following statement contains a magic number: Assert.Throws<InvalidOperationException>(() => (DateTimeOffset)new LockTime(3));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanGetTransactionErrors,The following statement contains a magic number: funding.Outputs.Add(new TxOut(Money.Coins(1.1m)' bob));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanGetTransactionErrors,The following statement contains a magic number: funding.Outputs.Add(new TxOut(Money.Coins(1.2m)' alice));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanGetTransactionErrors,The following statement contains a magic number: spending.Inputs.Add(new TxIn(new OutPoint(funding' 2)));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanGetTransactionErrors,The following statement contains a magic number: spending.Outputs.Add(new TxOut(Money.Coins(4.0m)' bob));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanGetTransactionErrors,The following statement contains a magic number: AssertEx.Equals(3' script.InputIndex);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanGetTransactionErrors,The following statement contains a magic number: Assert.Equal(fees.Missing' Money.Coins(0.7m));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanGetTransactionErrors,The following statement contains a magic number: spending.Inputs.Add(new TxIn(new OutPoint(funding' 3)));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanGetTransactionErrors,The following statement contains a magic number: Assert.Equal(4UL' coin.InputIndex);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanGetTransactionErrors,The following statement contains a magic number: Assert.Equal(3UL' coin.OutPoint.N);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TestOPNIP,The following statement contains a magic number: Script scriptSig = new Script(Op.GetPushOp(1)' Op.GetPushOp(2)' Op.GetPushOp(3));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TestOPNIP,The following statement contains a magic number: Script scriptSig = new Script(Op.GetPushOp(1)' Op.GetPushOp(2)' Op.GetPushOp(3));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TestOPNIP,The following statement contains a magic number: Assert.Equal(2' ctx.Stack.Count);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TestOPNIP,The following statement contains a magic number: var actual = new[] { ctx.Stack.Top(-2)' ctx.Stack.Top(-1) };
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TestOPNIP,The following statement contains a magic number: var expected = new[] { Op.GetPushOp(1).PushData' Op.GetPushOp(3).PushData };
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,OP_2ROT,The following statement contains a magic number: Script scriptSig = new Script(Op.GetPushOp(1)' Op.GetPushOp(2)' Op.GetPushOp(3)' Op.GetPushOp(4)' Op.GetPushOp(5)' Op.GetPushOp(6));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,OP_2ROT,The following statement contains a magic number: Script scriptSig = new Script(Op.GetPushOp(1)' Op.GetPushOp(2)' Op.GetPushOp(3)' Op.GetPushOp(4)' Op.GetPushOp(5)' Op.GetPushOp(6));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,OP_2ROT,The following statement contains a magic number: Script scriptSig = new Script(Op.GetPushOp(1)' Op.GetPushOp(2)' Op.GetPushOp(3)' Op.GetPushOp(4)' Op.GetPushOp(5)' Op.GetPushOp(6));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,OP_2ROT,The following statement contains a magic number: Script scriptSig = new Script(Op.GetPushOp(1)' Op.GetPushOp(2)' Op.GetPushOp(3)' Op.GetPushOp(4)' Op.GetPushOp(5)' Op.GetPushOp(6));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,OP_2ROT,The following statement contains a magic number: Script scriptSig = new Script(Op.GetPushOp(1)' Op.GetPushOp(2)' Op.GetPushOp(3)' Op.GetPushOp(4)' Op.GetPushOp(5)' Op.GetPushOp(6));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,OP_2ROT,The following statement contains a magic number: Assert.Equal(6' ctx.Stack.Count);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,OP_2ROT,The following statement contains a magic number: var actual = new[] {  				ctx.Stack.Top(-6)'  				ctx.Stack.Top(-5)'  				ctx.Stack.Top(-4)'  				ctx.Stack.Top(-3) '  				ctx.Stack.Top(-2)'  				ctx.Stack.Top(-1) };
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,OP_2ROT,The following statement contains a magic number: var actual = new[] {  				ctx.Stack.Top(-6)'  				ctx.Stack.Top(-5)'  				ctx.Stack.Top(-4)'  				ctx.Stack.Top(-3) '  				ctx.Stack.Top(-2)'  				ctx.Stack.Top(-1) };
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,OP_2ROT,The following statement contains a magic number: var actual = new[] {  				ctx.Stack.Top(-6)'  				ctx.Stack.Top(-5)'  				ctx.Stack.Top(-4)'  				ctx.Stack.Top(-3) '  				ctx.Stack.Top(-2)'  				ctx.Stack.Top(-1) };
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,OP_2ROT,The following statement contains a magic number: var actual = new[] {  				ctx.Stack.Top(-6)'  				ctx.Stack.Top(-5)'  				ctx.Stack.Top(-4)'  				ctx.Stack.Top(-3) '  				ctx.Stack.Top(-2)'  				ctx.Stack.Top(-1) };
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,OP_2ROT,The following statement contains a magic number: var actual = new[] {  				ctx.Stack.Top(-6)'  				ctx.Stack.Top(-5)'  				ctx.Stack.Top(-4)'  				ctx.Stack.Top(-3) '  				ctx.Stack.Top(-2)'  				ctx.Stack.Top(-1) };
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,OP_2ROT,The following statement contains a magic number: var expected = new[]  			{  				Op.GetPushOp(3).PushData'  				Op.GetPushOp(4).PushData'  				Op.GetPushOp(5).PushData'  				Op.GetPushOp(6).PushData'  				Op.GetPushOp(1).PushData'  				Op.GetPushOp(2).PushData'  			};
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,OP_2ROT,The following statement contains a magic number: var expected = new[]  			{  				Op.GetPushOp(3).PushData'  				Op.GetPushOp(4).PushData'  				Op.GetPushOp(5).PushData'  				Op.GetPushOp(6).PushData'  				Op.GetPushOp(1).PushData'  				Op.GetPushOp(2).PushData'  			};
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,OP_2ROT,The following statement contains a magic number: var expected = new[]  			{  				Op.GetPushOp(3).PushData'  				Op.GetPushOp(4).PushData'  				Op.GetPushOp(5).PushData'  				Op.GetPushOp(6).PushData'  				Op.GetPushOp(1).PushData'  				Op.GetPushOp(2).PushData'  			};
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,OP_2ROT,The following statement contains a magic number: var expected = new[]  			{  				Op.GetPushOp(3).PushData'  				Op.GetPushOp(4).PushData'  				Op.GetPushOp(5).PushData'  				Op.GetPushOp(6).PushData'  				Op.GetPushOp(1).PushData'  				Op.GetPushOp(2).PushData'  			};
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,OP_2ROT,The following statement contains a magic number: var expected = new[]  			{  				Op.GetPushOp(3).PushData'  				Op.GetPushOp(4).PushData'  				Op.GetPushOp(5).PushData'  				Op.GetPushOp(6).PushData'  				Op.GetPushOp(1).PushData'  				Op.GetPushOp(2).PushData'  			};
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TestOPTuck,The following statement contains a magic number: Script scriptSig = new Script(Op.GetPushOp(1)' Op.GetPushOp(2)' Op.GetPushOp(3));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TestOPTuck,The following statement contains a magic number: Script scriptSig = new Script(Op.GetPushOp(1)' Op.GetPushOp(2)' Op.GetPushOp(3));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TestOPTuck,The following statement contains a magic number: Assert.Equal(4' ctx.Stack.Count);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TestOPTuck,The following statement contains a magic number: var actual = new[] { ctx.Stack.Top(-3)' ctx.Stack.Top(-2)' ctx.Stack.Top(-1) };
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TestOPTuck,The following statement contains a magic number: var actual = new[] { ctx.Stack.Top(-3)' ctx.Stack.Top(-2)' ctx.Stack.Top(-1) };
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TestOPTuck,The following statement contains a magic number: var expected = new[] { Op.GetPushOp(3).PushData' Op.GetPushOp(2).PushData' Op.GetPushOp(3).PushData };
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TestOPTuck,The following statement contains a magic number: var expected = new[] { Op.GetPushOp(3).PushData' Op.GetPushOp(2).PushData' Op.GetPushOp(3).PushData };
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TestOPTuck,The following statement contains a magic number: var expected = new[] { Op.GetPushOp(3).PushData' Op.GetPushOp(2).PushData' Op.GetPushOp(3).PushData };
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CreateDummy,The following statement contains a magic number: tx.Inputs.Add(TxIn.CreateCoinbase(200));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanCheckSegwitSig,The following statement contains a magic number: var txOut = tx.Outputs.CreateNewTxOut(Money.Satoshis(100000)' new Script("OP_HASH160 442afa4f034468652c571202da0bf277cb729def OP_EQUAL"));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,witnessHasPushSizeLimit,The following statement contains a magic number: spending.Inputs[0].WitScript = new WitScript(new[] { new byte[521] }.Concat(spending.Inputs[0].WitScript.Pushes).ToArray());
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TransactionBuilderDoesNotRunForever,The following statement contains a magic number: var amount = Money.Coins(0.01m);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TransactionBuilderDoesNotRunForever,The following statement contains a magic number: builder.Send(new Key().PubKey.GetSegwitAddress(network)' Money.Coins(0.015m));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TransactionBuilderDoesNotRunForever,The following statement contains a magic number: builder.SendEstimatedFees(new FeeRate(10m));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TransactionBuilderDoesNotRunForever,The following statement contains a magic number: Assert.Equal(3' tx.Inputs.Count);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TransactionBuilderDoesNotCreateInvalidTx,The following statement contains a magic number: var keys = Enumerable.Range(0' 4).Select(x => masterKey.Derive((uint)x)).ToArray();
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TransactionBuilderDoesNotCreateInvalidTx,The following statement contains a magic number: var inputs = new[]{  		(new Coin(RandOutpoint()' new TxOut(Money.Coins(0.02510227m)' keys[0].PrivateKey.PubKey.WitHash.ScriptPubKey)))'  		(new Coin(RandOutpoint()' new TxOut(Money.Coins(0.94979264m)' keys[1].PrivateKey.PubKey.WitHash.ScriptPubKey)))'  		(new Coin(RandOutpoint()' new TxOut(Money.Coins(0.32476287m)' keys[2].PrivateKey.PubKey.WitHash.ScriptPubKey)))'  		(new Coin(RandOutpoint()' new TxOut(Money.Coins(0.64993041m)' keys[3].PrivateKey.PubKey.WitHash.ScriptPubKey)))};
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TransactionBuilderDoesNotCreateInvalidTx,The following statement contains a magic number: var inputs = new[]{  		(new Coin(RandOutpoint()' new TxOut(Money.Coins(0.02510227m)' keys[0].PrivateKey.PubKey.WitHash.ScriptPubKey)))'  		(new Coin(RandOutpoint()' new TxOut(Money.Coins(0.94979264m)' keys[1].PrivateKey.PubKey.WitHash.ScriptPubKey)))'  		(new Coin(RandOutpoint()' new TxOut(Money.Coins(0.32476287m)' keys[2].PrivateKey.PubKey.WitHash.ScriptPubKey)))'  		(new Coin(RandOutpoint()' new TxOut(Money.Coins(0.64993041m)' keys[3].PrivateKey.PubKey.WitHash.ScriptPubKey)))};
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TransactionBuilderDoesNotCreateInvalidTx,The following statement contains a magic number: var inputs = new[]{  		(new Coin(RandOutpoint()' new TxOut(Money.Coins(0.02510227m)' keys[0].PrivateKey.PubKey.WitHash.ScriptPubKey)))'  		(new Coin(RandOutpoint()' new TxOut(Money.Coins(0.94979264m)' keys[1].PrivateKey.PubKey.WitHash.ScriptPubKey)))'  		(new Coin(RandOutpoint()' new TxOut(Money.Coins(0.32476287m)' keys[2].PrivateKey.PubKey.WitHash.ScriptPubKey)))'  		(new Coin(RandOutpoint()' new TxOut(Money.Coins(0.64993041m)' keys[3].PrivateKey.PubKey.WitHash.ScriptPubKey)))};
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TransactionBuilderDoesNotCreateInvalidTx,The following statement contains a magic number: var inputs = new[]{  		(new Coin(RandOutpoint()' new TxOut(Money.Coins(0.02510227m)' keys[0].PrivateKey.PubKey.WitHash.ScriptPubKey)))'  		(new Coin(RandOutpoint()' new TxOut(Money.Coins(0.94979264m)' keys[1].PrivateKey.PubKey.WitHash.ScriptPubKey)))'  		(new Coin(RandOutpoint()' new TxOut(Money.Coins(0.32476287m)' keys[2].PrivateKey.PubKey.WitHash.ScriptPubKey)))'  		(new Coin(RandOutpoint()' new TxOut(Money.Coins(0.64993041m)' keys[3].PrivateKey.PubKey.WitHash.ScriptPubKey)))};
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TransactionBuilderDoesNotCreateInvalidTx,The following statement contains a magic number: var inputs = new[]{  		(new Coin(RandOutpoint()' new TxOut(Money.Coins(0.02510227m)' keys[0].PrivateKey.PubKey.WitHash.ScriptPubKey)))'  		(new Coin(RandOutpoint()' new TxOut(Money.Coins(0.94979264m)' keys[1].PrivateKey.PubKey.WitHash.ScriptPubKey)))'  		(new Coin(RandOutpoint()' new TxOut(Money.Coins(0.32476287m)' keys[2].PrivateKey.PubKey.WitHash.ScriptPubKey)))'  		(new Coin(RandOutpoint()' new TxOut(Money.Coins(0.64993041m)' keys[3].PrivateKey.PubKey.WitHash.ScriptPubKey)))};
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TransactionBuilderDoesNotCreateInvalidTx,The following statement contains a magic number: var inputs = new[]{  		(new Coin(RandOutpoint()' new TxOut(Money.Coins(0.02510227m)' keys[0].PrivateKey.PubKey.WitHash.ScriptPubKey)))'  		(new Coin(RandOutpoint()' new TxOut(Money.Coins(0.94979264m)' keys[1].PrivateKey.PubKey.WitHash.ScriptPubKey)))'  		(new Coin(RandOutpoint()' new TxOut(Money.Coins(0.32476287m)' keys[2].PrivateKey.PubKey.WitHash.ScriptPubKey)))'  		(new Coin(RandOutpoint()' new TxOut(Money.Coins(0.64993041m)' keys[3].PrivateKey.PubKey.WitHash.ScriptPubKey)))};
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TransactionBuilderDoesNotCreateInvalidTx,The following statement contains a magic number: builder.SendEstimatedFees(new FeeRate(10m));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CalculateE,The following statement contains a magic number: int messageBitLength = message.Length * 8;
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanCacheHashes,The following statement contains a magic number: tx.Version = 4;
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CanCacheHashes,The following statement contains a magic number: tx.Version = 5;
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CheckWitnessSize,The following statement contains a magic number: ICoin coin1 = new Coin(  								new uint256("0000000000000000000000000000000000000000000000000000000000000100")' 0'  								Money.Satoshis(1000)' scriptPubKey.WitHash.ScriptPubKey);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CheckWitnessSize,The following statement contains a magic number: tx.Inputs[0].ScriptSig = tx.Inputs[0].ScriptSig + Op.GetPushOp(new byte[520]);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CheckWitnessSize,The following statement contains a magic number: tx.Inputs[0].ScriptSig = tx.Inputs[0].ScriptSig + Op.GetPushOp(new byte[521]);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TestSigHashes,The following statement contains a magic number: Coin coin1 = new Coin(  								new uint256("0000000000000000000000000000000000000000000000000000000000000100")' 0'  								Money.Satoshis(1000)' new Script(OpcodeType.OP_TRUE));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TestSigHashes,The following statement contains a magic number: var signedCoin = new Coin(  								new uint256("0000000000000000000000000000000000000000000000000000000000000100")' 1'  								Money.Satoshis(2000)' segwit ? key.PubKey.WitHash.ScriptPubKey : key.PubKey.Hash.ScriptPubKey);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TestSigHashes,The following statement contains a magic number: Coin coin2 = new Coin(  								new uint256("0000000000000000000000000000000000000000000000000000000000000100")' 2'  								Money.Satoshis(3000)' new Script(OpcodeType.OP_TRUE));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TestSigHashes,The following statement contains a magic number: Coin coin2 = new Coin(  								new uint256("0000000000000000000000000000000000000000000000000000000000000100")' 2'  								Money.Satoshis(3000)' new Script(OpcodeType.OP_TRUE));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TestSigHashes,The following statement contains a magic number: Coin coin4 = new Coin(  								new uint256("0000000000000000000000000000000000000000000000000000000000000100")' 3'  								Money.Satoshis(4000)' new Script(OpcodeType.OP_TRUE));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TestSigHashes,The following statement contains a magic number: Coin coin4 = new Coin(  								new uint256("0000000000000000000000000000000000000000000000000000000000000100")' 3'  								Money.Satoshis(4000)' new Script(OpcodeType.OP_TRUE));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TestSigHashes,The following statement contains a magic number: txx.Outputs[2].Value = coin2.Amount - Money.Satoshis(100);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TestSigHashes,The following statement contains a magic number: txx.Outputs[2].Value = coin2.Amount - Money.Satoshis(100);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TestSigHashes,The following statement contains a magic number: coin.Amount += Money.Satoshis(100);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TestSigHashes,The following statement contains a magic number: input.Sequence = 2;
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TestSigHashes,The following statement contains a magic number: signedClone.Sequence = 2;
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,TestSigHashes,The following statement contains a magic number: transactions.Count == 2 && modification != HashModification.Invalid
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,WriteTest,The following statement contains a magic number: scriptOutput.Append(word.Substring(3' word.Length - 3));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,WriteTest,The following statement contains a magic number: scriptOutput.Append(word.Substring(3' word.Length - 3));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,tx_valid,The following statement contains a magic number: test.Count != 3 || !(test[1] is string) || !(test[2] is string)
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,tx_valid,The following statement contains a magic number: test.Count != 3 || !(test[1] is string) || !(test[2] is string)
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,tx_valid,The following statement contains a magic number: mapprevOutScriptPubKeys[outpoint] = script_tests.ParseScript(vinput[2].ToString());
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,tx_valid,The following statement contains a magic number: mapprevOutScriptPubKeysAmount[outpoint] = Money.Satoshis(vinput[3].Value<long>());
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,tx_valid,The following statement contains a magic number: vinput.Count() >= 4
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,tx_valid,The following statement contains a magic number: var valid = Script.VerifyScript(  						tx'  						i'  						txOut'  						ParseFlags(test[2].ToString())  						' 0);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,SequenceStructParsedCorrectly,The following statement contains a magic number: var time = TimeSpan.FromSeconds(512 * 0xFF);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,SequenceStructParsedCorrectly,The following statement contains a magic number: Assert.True(new Sequence(time) == (uint)(0xFF | 1 << 22));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,SequenceStructParsedCorrectly,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => new Sequence(TimeSpan.FromSeconds(512 * (0xFFFF + 1))));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,SequenceStructParsedCorrectly,The following statement contains a magic number: new Sequence(TimeSpan.FromSeconds(512 * (0xFFFF)));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CannotBuildDoubleSpendingTransactions,The following statement contains a magic number: var tx = txBuilder  				.AddCoins(coin)  				.AddKeys(key)  				.Send(key.ScriptPubKey' Money.Coins(0.999m))  				.SendFees(Money.Coins(0.001m))  				.BuildTransaction(false);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,CannotBuildDoubleSpendingTransactions,The following statement contains a magic number: var tx = txBuilder  				.AddCoins(coin)  				.AddKeys(key)  				.Send(key.ScriptPubKey' Money.Coins(0.999m))  				.SendFees(Money.Coins(0.001m))  				.BuildTransaction(false);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,tx_invalid,The following statement contains a magic number: test.Count != 3 || !(test[1] is string) || !(test[2] is string)
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,tx_invalid,The following statement contains a magic number: test.Count != 3 || !(test[1] is string) || !(test[2] is string)
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,tx_invalid,The following statement contains a magic number: mapprevOutScriptPubKeys[new OutPoint(uint256.Parse(vinput[0].ToString())' int.Parse(vinput[1].ToString()))] = script_tests.ParseScript(vinput[2].ToString());
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,tx_invalid,The following statement contains a magic number: mapprevOutScriptPubKeysAmount[outpoint] = Money.Satoshis(vinput[3].Value<int>());
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,tx_invalid,The following statement contains a magic number: vinput.Count() >= 4
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,tx_invalid,The following statement contains a magic number: fValid = Script.VerifyScript(  					   tx'  					   i'  					   txOut'  					   ParseFlags(test[2].ToString())  					   ' 0);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,test_witness,The following statement contains a magic number: scriptMulti = PayToMultiSigTemplate.Instance.GenerateScriptPubKey(2' oneandthree.ToArray());
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,ShouldSendAll,The following statement contains a magic number: var rate = new FeeRate(Money.Coins(0.0004m));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,ShouldSendAll,The following statement contains a magic number: builder  				.AddCoins(RandomCoin(Money.Coins(0.5m)' k))  				.AddCoins(RandomCoin(Money.Coins(0.5m)' k))  				.AddKeys(k)  				.SendAll(dest);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,ShouldSendAll,The following statement contains a magic number: builder  				.AddCoins(RandomCoin(Money.Coins(0.5m)' k))  				.AddCoins(RandomCoin(Money.Coins(0.5m)' k))  				.AddKeys(k)  				.SendAll(dest);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,ShouldSendAll,The following statement contains a magic number: Assert.Equal(2' tx.Inputs.Count);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,ShouldSendAllRemaining,The following statement contains a magic number: var rate = new FeeRate(Money.Coins(0.0004m));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,ShouldSendAllRemaining,The following statement contains a magic number: builder  				.AddCoins(RandomCoin(Money.Coins(0.5m)' k1))  				.AddCoins(RandomCoin(Money.Coins(0.5m)' k2))  				.AddKeys(k1' k2)  				.Send(dest1' Money.Coins(0.1m))  				.SendAllRemaining(dest2);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,ShouldSendAllRemaining,The following statement contains a magic number: builder  				.AddCoins(RandomCoin(Money.Coins(0.5m)' k1))  				.AddCoins(RandomCoin(Money.Coins(0.5m)' k2))  				.AddKeys(k1' k2)  				.Send(dest1' Money.Coins(0.1m))  				.SendAllRemaining(dest2);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,ShouldSendAllRemaining,The following statement contains a magic number: builder  				.AddCoins(RandomCoin(Money.Coins(0.5m)' k1))  				.AddCoins(RandomCoin(Money.Coins(0.5m)' k2))  				.AddKeys(k1' k2)  				.Send(dest1' Money.Coins(0.1m))  				.SendAllRemaining(dest2);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,ShouldSendAllRemaining,The following statement contains a magic number: Assert.Equal(2' tx.Inputs.Count);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,ShouldSendAllRemaining,The following statement contains a magic number: Assert.Equal(2' tx.Outputs.Count);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,ShouldSendAllRemaining,The following statement contains a magic number: Assert.Equal(Money.Coins(0.1m)' tx.Outputs.First(o => o.ScriptPubKey == dest1.ScriptPubKey).Value);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,ShouldSendAllRemaining,The following statement contains a magic number: Assert.Equal(Money.Coins(1.0m) - fee - Money.Coins(0.1m)' tx.Outputs.First(o => o.ScriptPubKey == dest2.ScriptPubKey).Value);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,ShouldSendAllRemainingEvenWithoutOtherSend,The following statement contains a magic number: var rate = new FeeRate(Money.Coins(0.0004m));
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,ShouldSendAllRemainingEvenWithoutOtherSend,The following statement contains a magic number: builder  				.AddCoins(RandomCoin(Money.Coins(0.5m)' k1))  				.AddCoins(RandomCoin(Money.Coins(0.5m)' k2))  				.AddKeys(k1' k2)  				.SendAllRemaining(dest2);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,ShouldSendAllRemainingEvenWithoutOtherSend,The following statement contains a magic number: builder  				.AddCoins(RandomCoin(Money.Coins(0.5m)' k1))  				.AddCoins(RandomCoin(Money.Coins(0.5m)' k2))  				.AddKeys(k1' k2)  				.SendAllRemaining(dest2);
Magic Number,NBitcoin.Tests,transaction_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\transaction_tests.cs,ShouldSendAllRemainingEvenWithoutOtherSend,The following statement contains a magic number: Assert.Equal(2' tx.Inputs.Count);
Magic Number,NBitcoin.Tests,uint256_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\uint256_tests.cs,uintTests,The following statement contains a magic number: Assert.Equal(0x00' v.GetByte(31));
Magic Number,NBitcoin.Tests,uint256_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\uint256_tests.cs,uintTests,The following statement contains a magic number: Assert.Equal(0x39' new uint256("39000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffff").GetByte(31));
Magic Number,NBitcoin.Tests,uint256_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\uint256_tests.cs,uintTests,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => v.GetByte(32));
Magic Number,NBitcoin.Tests,uint256_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\uint256_tests.cs,spanUintSerializationTests,The following statement contains a magic number: var v = new uint256(RandomUtils.GetBytes(32));
Magic Number,NBitcoin.Tests,uint256_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\uint256_tests.cs,uitnSerializationTests,The following statement contains a magic number: Assert.True(vs.Count == 3);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanAddEntropyToRandom,The following statement contains a magic number: RandomUtils.AddEntropy(new byte[] { 1' 2' 3 });
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanAddEntropyToRandom,The following statement contains a magic number: RandomUtils.AddEntropy(new byte[] { 1' 2' 3 });
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanAddEntropyToRandom,The following statement contains a magic number: Assert.Equal(50' RandomUtils.GetBytes(50).Length);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanAddEntropyToRandom,The following statement contains a magic number: Assert.Equal(50' RandomUtils.GetBytes(50).Length);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanAddEntropyToRandom,The following statement contains a magic number: i < 100
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_HexStr,The following statement contains a magic number: AssertEx.Equal(  				new HexEncoder()  				{  					Space = true  				}.EncodeData(ParseHex_expected' 0' 5)'  				"04 67 8a fd b0");
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_HexStr,The following statement contains a magic number: var ParseHex_vec = ParseHex_expected.Take(5).ToArray();
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanParseKeyPath,The following statement contains a magic number: var maxKeypath = new KeyPath(new uint[255]);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanParseKeyPath,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new KeyPath(new uint[256]));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanParseRootedKeyPath,The following statement contains a magic number: Assert.Equal("7b09d780/0'/0'/2'/2"' result.Derive(2).ToString());
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanReadConvertTargetToDifficulty,The following statement contains a magic number: Assert.Equal(16307.420938523983D' packed.Difficulty' "420938523983".Length);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanReadConvertTargetToDifficulty,The following statement contains a magic number: Assert.Equal(16307.04943863739' packed.Difficulty' "420938523983".Length);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanReadConvertTargetToDifficulty,The following statement contains a magic number: packed = new Target(419470732);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanReadConvertTargetToDifficulty,The following statement contains a magic number: Assert.Equal(6978842649.592383' packed.Difficulty' "592383".Length);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanReadConvertTargetToDifficulty,The following statement contains a magic number: Assert.Equal((uint)packed' (uint)419470732);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanReadConvertTargetToDifficulty,The following statement contains a magic number: Assert.True(uint256.Parse("0x0000000000000000729a4a7e084c90f932d038c407a6535a51dfecdfba1c8906 ") < new Target(419470732).ToUInt256());
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_FormatMoney,The following statement contains a magic number: AssertEx.Equal(new Money((Money.COIN / 10000) * 123456789).ToString(false)' "12345.6789");
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_FormatMoney,The following statement contains a magic number: AssertEx.Equal(new Money((Money.COIN / 10000) * 123456789).ToString(false)' "12345.6789");
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_FormatMoney,The following statement contains a magic number: AssertEx.Equal(new Money(Money.COIN * 100000000).ToString(false)' "100000000.00");
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_FormatMoney,The following statement contains a magic number: AssertEx.Equal(new Money(Money.COIN * 10000000).ToString(false)' "10000000.00");
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_FormatMoney,The following statement contains a magic number: AssertEx.Equal(new Money(Money.COIN * 1000000).ToString(false)' "1000000.00");
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_FormatMoney,The following statement contains a magic number: AssertEx.Equal(new Money(Money.COIN * 100000).ToString(false)' "100000.00");
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_FormatMoney,The following statement contains a magic number: AssertEx.Equal(new Money(Money.COIN * 10000).ToString(false)' "10000.00");
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_FormatMoney,The following statement contains a magic number: AssertEx.Equal(new Money(Money.COIN * 1000).ToString(false)' "1000.00");
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_FormatMoney,The following statement contains a magic number: AssertEx.Equal(new Money(Money.COIN * 100).ToString(false)' "100.00");
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_FormatMoney,The following statement contains a magic number: AssertEx.Equal(new Money(Money.COIN * 10).ToString(false)' "10.00");
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_FormatMoney,The following statement contains a magic number: AssertEx.Equal(new Money(Money.COIN / 10).ToString(false)' "0.10");
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_FormatMoney,The following statement contains a magic number: AssertEx.Equal(new Money(Money.COIN / 100).ToString(false)' "0.01");
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_FormatMoney,The following statement contains a magic number: AssertEx.Equal(new Money(Money.COIN / 1000).ToString(false)' "0.001");
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_FormatMoney,The following statement contains a magic number: AssertEx.Equal(new Money(Money.COIN / 10000).ToString(false)' "0.0001");
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_FormatMoney,The following statement contains a magic number: AssertEx.Equal(new Money(Money.COIN / 100000).ToString(false)' "0.00001");
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_FormatMoney,The following statement contains a magic number: AssertEx.Equal(new Money(Money.COIN / 1000000).ToString(false)' "0.000001");
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_FormatMoney,The following statement contains a magic number: AssertEx.Equal(new Money(Money.COIN / 10000000).ToString(false)' "0.0000001");
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_FormatMoney,The following statement contains a magic number: AssertEx.Equal(new Money(Money.COIN / 100000000).ToString(false)' "0.00000001");
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyCoverage,The following statement contains a magic number: Money a = Money.Coins(2.0m);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyCoverage,The following statement contains a magic number: Money b = Money.Coins(4.0m);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyCoverage,The following statement contains a magic number: Assert.True(Money.Coins(1.0m).Almost(Money.Coins(0.95m)' 0.05m));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyCoverage,The following statement contains a magic number: Assert.True(Money.Coins(1.0m).Almost(Money.Coins(0.95m)' 0.05m));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyCoverage,The following statement contains a magic number: Assert.False(Money.Coins(1.0m).Almost(Money.Coins(0.949m)' 0.05m));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyCoverage,The following statement contains a magic number: Assert.False(Money.Coins(1.0m).Almost(Money.Coins(0.949m)' 0.05m));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyCoverage,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => Money.Coins(1.0m).Almost(Money.Coins(0.949m)' -0.05m));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyCoverage,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => Money.Coins(1.0m).Almost(Money.Coins(0.949m)' -0.05m));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyCoverage,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => Money.Coins(1.0m).Almost(Money.Coins(0.949m)' -1.05m));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyCoverage,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => Money.Coins(1.0m).Almost(Money.Coins(0.949m)' -1.05m));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyCoverage,The following statement contains a magic number: long data = 5;
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyCoverage,The following statement contains a magic number: Assert.Equal(Money.Coins(5)' data * Money.Coins(1.0m));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyCoverage,The following statement contains a magic number: Assert.Equal(Money.Coins(5)' Money.Coins(1.0m) * data);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyCoverage,The following statement contains a magic number: Assert.Equal(500000000L' (long)Money.Coins(5).Satoshi);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyCoverage,The following statement contains a magic number: Assert.Equal(500000000L' (long)Money.Coins(5).Satoshi);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyCoverage,The following statement contains a magic number: Assert.Equal(500000000U' (uint)Money.Coins(5).Satoshi);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyCoverage,The following statement contains a magic number: Assert.Equal(500000000U' (uint)Money.Coins(5).Satoshi);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyCoverage,The following statement contains a magic number: Assert.Equal("5.00000000"' Money.Coins(5).ToString());
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanCalculateBlockTimeCorrectly,The following statement contains a magic number: Assert.Equal(1.5' Network.Main.Consensus.GetExpectedBlocksFor(TimeSpan.FromMinutes(15)));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanCalculateBlockTimeCorrectly,The following statement contains a magic number: Assert.Equal(1.5' Network.Main.Consensus.GetExpectedBlocksFor(TimeSpan.FromMinutes(15)));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanCalculateBlockTimeCorrectly,The following statement contains a magic number: Assert.Equal(TimeSpan.FromMinutes(15)' Network.Main.Consensus.GetExpectedTimeFor(1.5));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanCalculateBlockTimeCorrectly,The following statement contains a magic number: Assert.Equal(TimeSpan.FromMinutes(15)' Network.Main.Consensus.GetExpectedTimeFor(1.5));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanConvertMoney,The following statement contains a magic number: var tests = new[]  			{  				new object[]{ 1.23456789m' MoneyUnit.BTC' 123456789m' MoneyUnit.Satoshi  }'  				new object[]{ 1.23456789m' MoneyUnit.BTC' 1234.56789m' MoneyUnit.MilliBTC  }'  				new object[]{ 1.23456789m' MoneyUnit.BTC' 1234567.89m' MoneyUnit.Bit  }'  				new object[]{ 1.23456789m' MoneyUnit.BTC' 1.23456789m' MoneyUnit.BTC  }'  			};
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanConvertMoney,The following statement contains a magic number: var tests = new[]  			{  				new object[]{ 1.23456789m' MoneyUnit.BTC' 123456789m' MoneyUnit.Satoshi  }'  				new object[]{ 1.23456789m' MoneyUnit.BTC' 1234.56789m' MoneyUnit.MilliBTC  }'  				new object[]{ 1.23456789m' MoneyUnit.BTC' 1234567.89m' MoneyUnit.Bit  }'  				new object[]{ 1.23456789m' MoneyUnit.BTC' 1.23456789m' MoneyUnit.BTC  }'  			};
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanConvertMoney,The following statement contains a magic number: var tests = new[]  			{  				new object[]{ 1.23456789m' MoneyUnit.BTC' 123456789m' MoneyUnit.Satoshi  }'  				new object[]{ 1.23456789m' MoneyUnit.BTC' 1234.56789m' MoneyUnit.MilliBTC  }'  				new object[]{ 1.23456789m' MoneyUnit.BTC' 1234567.89m' MoneyUnit.Bit  }'  				new object[]{ 1.23456789m' MoneyUnit.BTC' 1.23456789m' MoneyUnit.BTC  }'  			};
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanConvertMoney,The following statement contains a magic number: var tests = new[]  			{  				new object[]{ 1.23456789m' MoneyUnit.BTC' 123456789m' MoneyUnit.Satoshi  }'  				new object[]{ 1.23456789m' MoneyUnit.BTC' 1234.56789m' MoneyUnit.MilliBTC  }'  				new object[]{ 1.23456789m' MoneyUnit.BTC' 1234567.89m' MoneyUnit.Bit  }'  				new object[]{ 1.23456789m' MoneyUnit.BTC' 1.23456789m' MoneyUnit.BTC  }'  			};
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanConvertMoney,The following statement contains a magic number: var tests = new[]  			{  				new object[]{ 1.23456789m' MoneyUnit.BTC' 123456789m' MoneyUnit.Satoshi  }'  				new object[]{ 1.23456789m' MoneyUnit.BTC' 1234.56789m' MoneyUnit.MilliBTC  }'  				new object[]{ 1.23456789m' MoneyUnit.BTC' 1234567.89m' MoneyUnit.Bit  }'  				new object[]{ 1.23456789m' MoneyUnit.BTC' 1.23456789m' MoneyUnit.BTC  }'  			};
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanConvertMoney,The following statement contains a magic number: var tests = new[]  			{  				new object[]{ 1.23456789m' MoneyUnit.BTC' 123456789m' MoneyUnit.Satoshi  }'  				new object[]{ 1.23456789m' MoneyUnit.BTC' 1234.56789m' MoneyUnit.MilliBTC  }'  				new object[]{ 1.23456789m' MoneyUnit.BTC' 1234567.89m' MoneyUnit.Bit  }'  				new object[]{ 1.23456789m' MoneyUnit.BTC' 1.23456789m' MoneyUnit.BTC  }'  			};
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanConvertMoney,The following statement contains a magic number: var tests = new[]  			{  				new object[]{ 1.23456789m' MoneyUnit.BTC' 123456789m' MoneyUnit.Satoshi  }'  				new object[]{ 1.23456789m' MoneyUnit.BTC' 1234.56789m' MoneyUnit.MilliBTC  }'  				new object[]{ 1.23456789m' MoneyUnit.BTC' 1234567.89m' MoneyUnit.Bit  }'  				new object[]{ 1.23456789m' MoneyUnit.BTC' 1.23456789m' MoneyUnit.BTC  }'  			};
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanConvertMoney,The following statement contains a magic number: var tests = new[]  			{  				new object[]{ 1.23456789m' MoneyUnit.BTC' 123456789m' MoneyUnit.Satoshi  }'  				new object[]{ 1.23456789m' MoneyUnit.BTC' 1234.56789m' MoneyUnit.MilliBTC  }'  				new object[]{ 1.23456789m' MoneyUnit.BTC' 1234567.89m' MoneyUnit.Bit  }'  				new object[]{ 1.23456789m' MoneyUnit.BTC' 1.23456789m' MoneyUnit.BTC  }'  			};
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanConvertMoney,The following statement contains a magic number: var outputAmount = (decimal)test[2];
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanConvertMoney,The following statement contains a magic number: var outputUnit = (MoneyUnit)test[3];
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_ParseMoney,The following statement contains a magic number: AssertEx.Equal(ret' multiplier * new Money((Money.COIN / 10000) * 123456789));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_ParseMoney,The following statement contains a magic number: AssertEx.Equal(ret' multiplier * new Money((Money.COIN / 10000) * 123456789));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_ParseMoney,The following statement contains a magic number: AssertEx.Equal(ret' multiplier * new Money(Money.COIN * 100000000));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_ParseMoney,The following statement contains a magic number: AssertEx.Equal(ret' multiplier * new Money(Money.COIN * 10000000));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_ParseMoney,The following statement contains a magic number: AssertEx.Equal(ret' multiplier * new Money(Money.COIN * 1000000));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_ParseMoney,The following statement contains a magic number: AssertEx.Equal(ret' multiplier * new Money(Money.COIN * 100000));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_ParseMoney,The following statement contains a magic number: AssertEx.Equal(ret' multiplier * new Money(Money.COIN * 10000));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_ParseMoney,The following statement contains a magic number: AssertEx.Equal(ret' multiplier * new Money(Money.COIN * 1000));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_ParseMoney,The following statement contains a magic number: AssertEx.Equal(ret' multiplier * new Money(Money.COIN * 100));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_ParseMoney,The following statement contains a magic number: AssertEx.Equal(ret' multiplier * new Money(Money.COIN * 10));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_ParseMoney,The following statement contains a magic number: AssertEx.Equal(ret' multiplier * new Money(Money.COIN / 10));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_ParseMoney,The following statement contains a magic number: AssertEx.Equal(ret' multiplier * new Money(Money.COIN / 100));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_ParseMoney,The following statement contains a magic number: AssertEx.Equal(ret' multiplier * new Money(Money.COIN / 1000));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_ParseMoney,The following statement contains a magic number: AssertEx.Equal(ret' multiplier * new Money(Money.COIN / 10000));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_ParseMoney,The following statement contains a magic number: AssertEx.Equal(ret' multiplier * new Money(Money.COIN / 100000));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_ParseMoney,The following statement contains a magic number: AssertEx.Equal(ret' multiplier * new Money(Money.COIN / 1000000));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_ParseMoney,The following statement contains a magic number: AssertEx.Equal(ret' multiplier * new Money(Money.COIN / 10000000));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,util_ParseMoney,The following statement contains a magic number: AssertEx.Equal(ret' multiplier * new Money(Money.COIN / 100000000));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitMoney,The following statement contains a magic number: CanSplitMoneyCore(Money.Satoshis(1234)' 3);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitMoney,The following statement contains a magic number: CanSplitMoneyCore(Money.Satoshis(1234)' 3);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitMoney,The following statement contains a magic number: CanSplitMoneyCore(Money.Satoshis(1234)' 2);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitMoney,The following statement contains a magic number: CanSplitMoneyCore(Money.Satoshis(1234)' 2);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitMoney,The following statement contains a magic number: CanSplitMoneyCore(Money.Satoshis(1234)' 10);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitMoney,The following statement contains a magic number: CanSplitMoneyCore(Money.Satoshis(1234)' 10);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitMoney,The following statement contains a magic number: CanSplitMoneyCore(Money.Satoshis(1)' 3);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitMoney,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => CanSplitMoneyCore(Money.Satoshis(1000)' 0));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitMoney,The following statement contains a magic number: CanSplitMoneyCore(Money.Satoshis(0)' 10);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitMoney,The following statement contains a magic number: var result = Money.Satoshis(20).Split(3).ToArray();
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitMoney,The following statement contains a magic number: var result = Money.Satoshis(20).Split(3).ToArray();
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitMoney,The following statement contains a magic number: Assert.True(result[0].Satoshi == 7);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitMoney,The following statement contains a magic number: Assert.True(result[1].Satoshi == 7);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitMoney,The following statement contains a magic number: Assert.True(result[2].Satoshi == 6);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitMoney,The following statement contains a magic number: Assert.True(result[2].Satoshi == 6);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitMoneyCore,The following statement contains a magic number: Assert.True(differentValues == 1 || differentValues == 2);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitMoneyBag,The following statement contains a magic number: bag += Money.Coins(12);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitMoneyBag,The following statement contains a magic number: bag += new AssetMoney(gold' 10);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitMoneyBag,The following statement contains a magic number: var splitted = bag.Split(12).ToArray();
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitMoneyBag,The following statement contains a magic number: Assert.Equal(new AssetMoney(gold' 0)' splitted[11].GetAmount(gold));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitAssetMoney,The following statement contains a magic number: CanSplitAssetMoneyCore(gold' 1234' 3);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitAssetMoney,The following statement contains a magic number: CanSplitAssetMoneyCore(gold' 1234' 3);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitAssetMoney,The following statement contains a magic number: CanSplitAssetMoneyCore(gold' 1234' 2);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitAssetMoney,The following statement contains a magic number: CanSplitAssetMoneyCore(gold' 1234' 2);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitAssetMoney,The following statement contains a magic number: CanSplitAssetMoneyCore(gold' 1234' 10);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitAssetMoney,The following statement contains a magic number: CanSplitAssetMoneyCore(gold' 1234' 10);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitAssetMoney,The following statement contains a magic number: CanSplitAssetMoneyCore(gold' 1' 3);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitAssetMoney,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => CanSplitAssetMoneyCore(gold' 1000' 0));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitAssetMoney,The following statement contains a magic number: CanSplitAssetMoneyCore(gold' 0' 10);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitAssetMoney,The following statement contains a magic number: var result = new AssetMoney(gold' 20).Split(3).ToArray();
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitAssetMoney,The following statement contains a magic number: var result = new AssetMoney(gold' 20).Split(3).ToArray();
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitAssetMoney,The following statement contains a magic number: Assert.True(result[0].Quantity == 7);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitAssetMoney,The following statement contains a magic number: Assert.True(result[1].Quantity == 7);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitAssetMoney,The following statement contains a magic number: Assert.True(result[2].Quantity == 6);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitAssetMoney,The following statement contains a magic number: Assert.True(result[2].Quantity == 6);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanSplitAssetMoneyCore,The following statement contains a magic number: Assert.True(differentValues == 1 || differentValues == 2);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyUnitSanityCheck,The following statement contains a magic number: Money.FromUnit(10m' MoneyUnit.BTC);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyUnitSanityCheck,The following statement contains a magic number: Money.FromUnit(10m' MoneyUnit.MilliBTC);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyUnitSanityCheck,The following statement contains a magic number: Money.FromUnit(10m' MoneyUnit.Bit);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyUnitSanityCheck,The following statement contains a magic number: Money.FromUnit(10m' MoneyUnit.Satoshi);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyUnitSanityCheck,The following statement contains a magic number: Money.FromUnit(10m' (MoneyUnit)100000000);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyUnitSanityCheck,The following statement contains a magic number: Money.FromUnit(10m' (MoneyUnit)100000000);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyUnitSanityCheck,The following statement contains a magic number: Money.FromUnit(10m' (MoneyUnit)100000);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyUnitSanityCheck,The following statement contains a magic number: Money.FromUnit(10m' (MoneyUnit)100000);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyUnitSanityCheck,The following statement contains a magic number: Money.FromUnit(10m' (MoneyUnit)100);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyUnitSanityCheck,The following statement contains a magic number: Money.FromUnit(10m' (MoneyUnit)100);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyUnitSanityCheck,The following statement contains a magic number: Money.FromUnit(10m' (MoneyUnit)1);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyUnitSanityCheck,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => Money.FromUnit(10' (MoneyUnit)14));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyUnitSanityCheck,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => Money.FromUnit(10' (MoneyUnit)14));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyUnitSanityCheck,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => Money.FromUnit(10' (MoneyUnit)(-41)));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyUnitSanityCheck,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => Money.FromUnit(10' (MoneyUnit)(-41)));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,FeeRateFormatting,The following statement contains a magic number: var fee = new FeeRate(0.5m);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,FeeRateFormatting,The following statement contains a magic number: fee = new FeeRate(0.521748274m);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanConvertEndpointToIPEndpoint,The following statement contains a magic number: var endpoint = Utils.ParseEndpoint(test.Input' 10);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,FeeRateComparison,The following statement contains a magic number: var a = new FeeRate(Money.Coins(2.0m));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,FeeRateComparison,The following statement contains a magic number: var b = new FeeRate(Money.Coins(4.0m));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,FeeRateComparison,The following statement contains a magic number: var aa = new FeeRate(Money.Coins(2.0m));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,FeeRateComparison,The following statement contains a magic number: var bb = new FeeRate(Money.Coins(4.0m));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanRoundTripBigIntegerToBytes,The following statement contains a magic number: Enumerable.Range(-100' 100)
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanRoundTripBigIntegerToBytes,The following statement contains a magic number: Enumerable.Range(-100' 100)
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanDivideMoney,The following statement contains a magic number: var bobInput = Money.Coins(1.1M);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanDivideMoney,The following statement contains a magic number: var aliceInput = Money.Coins(0.275M);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanDivideMoney,The following statement contains a magic number: var actual = (bobInput + aliceInput) / 2;
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanDivideMoney,The following statement contains a magic number: Money expected = Money.Satoshis((bobInput.Satoshi + aliceInput.Satoshi) / 2);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanUseHDCache,The following statement contains a magic number: var keypaths = Enumerable.Range(0' 20).Select(i => baseKeyPath.Derive((uint)i)).ToArray();
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanUseHDCache,The following statement contains a magic number: Assert.Equal(k.Derive(baseKeyPath.Derive(19U)).GetPublicKey()' result[19].GetPublicKey());
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanUseHDCache,The following statement contains a magic number: Assert.Equal(k.Derive(baseKeyPath.Derive(19U)).GetPublicKey()' result[19].GetPublicKey());
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanUseHDCache,The following statement contains a magic number: Assert.Equal(8 + 20' cache.Cached);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanUseHDCache,The following statement contains a magic number: Assert.Equal(8 + 20' cache.Cached);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanConvertBigIntegerToBytes,The following statement contains a magic number: CanConvertBigIntegerToBytesCore(BigInteger.ValueOf(-128)' new byte[] { 0x80' 0x80 });
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanConvertBigIntegerToBytes,The following statement contains a magic number: CanConvertBigIntegerToBytesCore(BigInteger.ValueOf(-129)' new byte[] { 0x81' 0x80 });
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanConvertBigIntegerToBytes,The following statement contains a magic number: CanConvertBigIntegerToBytesCore(BigInteger.ValueOf(-256)' new byte[] { 0x00' 0x81 });
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanEncryptAndDecryptMessages,The following statement contains a magic number: var msgs = new byte[][]{  				new byte[555]'  				Encoders.ASCII.DecodeData("Chancellor on the brink of second bailout for banks")  			};
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,GetKeyFromPassword,The following statement contains a magic number: var secret = Pbkdf2.ComputeDerivedKey(new HMACSHA512(bytes)' new byte[0]' 1024' 32);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,GetKeyFromPassword,The following statement contains a magic number: var secret = Pbkdf2.ComputeDerivedKey(new HMACSHA512(bytes)' new byte[0]' 1024' 32);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanConvertToUnixTime,The following statement contains a magic number: var date = Utils.UnixTimeToDateTime(1368576000);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanConvertToUnixTime,The following statement contains a magic number: Assert.Equal(new DateTimeOffset(2013' 5' 15' 0' 0' 0' TimeSpan.Zero)' date);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanConvertToUnixTime,The following statement contains a magic number: Assert.Equal(new DateTimeOffset(2013' 5' 15' 0' 0' 0' TimeSpan.Zero)' date);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanConvertToUnixTime,The following statement contains a magic number: Assert.Equal(new DateTimeOffset(2013' 5' 15' 0' 0' 0' TimeSpan.Zero)' date);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,CanConvertToUnixTime,The following statement contains a magic number: Assert.Equal((uint)1368576000' Utils.DateTimeToUnixTime(date));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyBagOperations,The following statement contains a magic number: var mb = new MoneyBag(new AssetMoney(msft' 10)' new AssetMoney(goog' 3));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyBagOperations,The following statement contains a magic number: var mb = new MoneyBag(new AssetMoney(msft' 10)' new AssetMoney(goog' 3));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyBagOperations,The following statement contains a magic number: Assert.Equal(  				new MoneyBag(new AssetMoney(msft' 10)' new AssetMoney(goog' 3)' new Money(1000L))'  				mb + Money.Satoshis(1000));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyBagOperations,The following statement contains a magic number: Assert.Equal(  				new MoneyBag(new AssetMoney(msft' 10)' new AssetMoney(goog' 3)' new Money(1000L))'  				mb + Money.Satoshis(1000));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyBagOperations,The following statement contains a magic number: Assert.Equal(  				new MoneyBag(new AssetMoney(msft' 10)' new AssetMoney(goog' 3)' new Money(1000L))'  				mb + Money.Satoshis(1000));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyBagOperations,The following statement contains a magic number: Assert.Equal(  				new MoneyBag(new AssetMoney(msft' 10)' new AssetMoney(goog' 3)' new Money(1000L))'  				mb + Money.Satoshis(1000));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyBagOperations,The following statement contains a magic number: Assert.Equal(  				new MoneyBag(new AssetMoney(msft' 10)' new AssetMoney(goog' 33))'  				mb + new AssetMoney(goog' 30));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyBagOperations,The following statement contains a magic number: Assert.Equal(  				new MoneyBag(new AssetMoney(msft' 10)' new AssetMoney(goog' 33))'  				mb + new AssetMoney(goog' 30));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyBagOperations,The following statement contains a magic number: Assert.Equal(  				new MoneyBag(new AssetMoney(msft' 10)' new AssetMoney(goog' 33))'  				mb + new AssetMoney(goog' 30));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyBagOperations,The following statement contains a magic number: Assert.Equal(  				new MoneyBag(new AssetMoney(msft' 20)' new AssetMoney(goog' 6))'  				mb + mb);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyBagOperations,The following statement contains a magic number: Assert.Equal(  				new MoneyBag(new AssetMoney(msft' 20)' new AssetMoney(goog' 6))'  				mb + mb);
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyBagOperations,The following statement contains a magic number: Assert.Equal(  				new MoneyBag(new AssetMoney(msft' 10)' new AssetMoney(goog' 3)' new Money(-1000L))'  				mb - (Money.Satoshis(1000)));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyBagOperations,The following statement contains a magic number: Assert.Equal(  				new MoneyBag(new AssetMoney(msft' 10)' new AssetMoney(goog' 3)' new Money(-1000L))'  				mb - (Money.Satoshis(1000)));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyBagOperations,The following statement contains a magic number: Assert.Equal(  				new MoneyBag(new AssetMoney(msft' 10)' new AssetMoney(goog' 3)' new Money(-1000L))'  				mb - (Money.Satoshis(1000)));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyBagOperations,The following statement contains a magic number: Assert.Equal(  				new MoneyBag(new AssetMoney(msft' 10)' new AssetMoney(goog' 3)' new Money(-1000L))'  				mb - (Money.Satoshis(1000)));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyBagOperations,The following statement contains a magic number: Assert.Equal(  				new MoneyBag(new AssetMoney(msft' 10)' new AssetMoney(goog' -27))'  				mb - (new AssetMoney(goog' 30)));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyBagOperations,The following statement contains a magic number: Assert.Equal(  				new MoneyBag(new AssetMoney(msft' 10)' new AssetMoney(goog' -27))'  				mb - (new AssetMoney(goog' 30)));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyBagOperations,The following statement contains a magic number: Assert.Equal(  				new MoneyBag(new AssetMoney(msft' 10)' new AssetMoney(goog' -27))'  				mb - (new AssetMoney(goog' 30)));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyBagOperations,The following statement contains a magic number: var b1 = new MoneyBag(new AssetMoney(msft' 10)' new AssetMoney(goog' 3));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyBagOperations,The following statement contains a magic number: var b1 = new MoneyBag(new AssetMoney(msft' 10)' new AssetMoney(goog' 3));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyBagOperations,The following statement contains a magic number: var b2 = new MoneyBag(new AssetMoney(msft' 1)' new AssetMoney(goog' -5));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyBagOperations,The following statement contains a magic number: var b1_2 = b1 - (b2) + (new Money(10000L));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyBagOperations,The following statement contains a magic number: Assert.True(  				b1_2.SequenceEqual(new IMoney[] { new AssetMoney(msft' 9)' new AssetMoney(goog' 8)' new Money(10000L) }));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyBagOperations,The following statement contains a magic number: Assert.True(  				b1_2.SequenceEqual(new IMoney[] { new AssetMoney(msft' 9)' new AssetMoney(goog' 8)' new Money(10000L) }));
Magic Number,NBitcoin.Tests,util_tests,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\util_tests.cs,MoneyBagOperations,The following statement contains a magic number: Assert.True(  				b1_2.SequenceEqual(new IMoney[] { new AssetMoney(msft' 9)' new AssetMoney(goog' 8)' new Money(10000L) }));
Magic Number,NBitcoin.Tests.Generators,StringGenerator,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Generators\StringGenerator.cs,HexString,The following statement contains a magic number: var res = from i in Gen.Choose(0' length) 					  where (i % 2 == 0) 					  from cl in Gen.ListOf(i' HexChar()) 					  select String.Join(""' cl.ToList());
Magic Number,NBitcoin.Tests.Generators,StringGenerator,C:\research\architectureSmells\repos\NicolasDorier_NBitcoin\NBitcoin.Tests\Generators\StringGenerator.cs,HexString,The following statement contains a magic number: return Gen.Choose(0' 100).SelectMany(n => HexString(n));
