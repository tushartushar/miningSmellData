Implementation smell,Namespace,Class,File,Method,Description
Long Method,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The method has 106 lines of code.
Long Method,FoundationDB.Layers.Messaging,FdbWorkerPool,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\FdbWorkerPool.cs,RunWorkerAsync,The method has 117 lines of code.
Complex Method,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,ComputeBounds,Cyclomatic complexity of the method is 13
Complex Method,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,Set,Cyclomatic complexity of the method is 12
Complex Method,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,Clear,Cyclomatic complexity of the method is 10
Complex Method,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,ToBooleanArray,Cyclomatic complexity of the method is 8
Complex Method,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBitView,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBitView.cs,GetEnumerator,Cyclomatic complexity of the method is 8
Complex Method,FoundationDB.Layers.Experimental.Indexing,WordAlignHybridEncoder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,CompressedBinaryExpression,Cyclomatic complexity of the method is 32
Long Parameter List,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,GetStatistics,The method has 5 parameters.
Long Parameter List,FoundationDB.Layers.Experimental.Indexing,FdbCompressedBitmapIndex,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\FdbCompressedBitmapIndex.cs,FdbCompressedBitmapIndex,The method has 5 parameters.
Long Parameter List,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The method has 7 parameters.
Long Statement,FoundationDB.Layers.Blobs,FdbHashSetCollection,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Documents\FdbHashSetCollection.cs,GetKeys,The length of the statement  "	//note: As of Beta2' FDB does not have a fdb_get_range that only return the keys. That means that we will have to also read the values from the db' in order to just get the names of the fields :( " is 195.
Long Statement,FoundationDB.Layers.Blobs,FdbHashSetCollection,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Documents\FdbHashSetCollection.cs,GetKeys,The length of the statement  "	return trans.GetRange (FdbKeyRange.StartsWith (prefix)).Select (kvp => ParseFieldKey (FdbTuple.Unpack (kvp.Key))).ToListAsync (cancellationToken); " is 146.
Long Statement,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,SplitFiller,The length of the statement  "	//Console.WriteLine("> Splitting 1-filler with repeat count {1} at {0}' with {2} before and {3} after"' offset' count' head' tail); " is 131.
Long Statement,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,SplitFiller,The length of the statement  "			//Console.WriteLine("> INSERT [...] ({0}:{1}) [{2}:0x{3:X8}] ({4}:{5}) [...]"' offset' head' offset + 1' mask' offset + 2' tail); " is 129.
Long Statement,FoundationDB.Layers.Experimental.Indexing,CompressedWord,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedWord.cs,ToString,The length of the statement  "	return IsLiteral ? String.Format (CultureInfo.InvariantCulture' "[31' 0x{0:X}]"' this.Literal) : String.Format (CultureInfo.InvariantCulture' "[{0}' {1})]"' this.FillCount * 31L' this.FillBit == 1 ? "set" : "clear"); " is 216.
Long Statement,FoundationDB.Layers.Experimental.Indexing,CompressedWord,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedWord.cs,MakeFiller,The length of the statement  "	return WordAlignHybridEncoder.BIT_TYPE_FILL | (set ? WordAlignHybridEncoder.BIT_FILL_ONE : WordAlignHybridEncoder.BIT_FILL_ZERO) | ((uint)(length - 1) & WordAlignHybridEncoder.LENGTH_MASK); " is 189.
Long Statement,FoundationDB.Layers.Experimental.Indexing,CompressedWord,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedWord.cs,MakeZeroes,The length of the statement  "	return WordAlignHybridEncoder.BIT_TYPE_FILL | WordAlignHybridEncoder.BIT_FILL_ZERO | ((uint)(length - 1) & WordAlignHybridEncoder.LENGTH_MASK); " is 143.
Long Statement,FoundationDB.Layers.Experimental.Indexing,CompressedWord,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedWord.cs,MakeOnes,The length of the statement  "	return WordAlignHybridEncoder.BIT_TYPE_FILL | WordAlignHybridEncoder.BIT_FILL_ONE | ((uint)(length - 1) & WordAlignHybridEncoder.LENGTH_MASK); " is 142.
Long Statement,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapWriter,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapWriter.cs,Flush,The length of the statement  "	Contract.Requires (m_counter == 0 ? (m_current == NO_VALUE) : (m_current == CompressedWord.ALL_ZEROES || m_current == CompressedWord.ALL_ONES)); " is 144.
Long Statement,FoundationDB.Layers.Experimental.Indexing,WordAlignHybridEncoder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,CompressToUnsafe,The length of the statement  "	// 5) output a repeat word' with MSB set to 1' followed by FILL_BIT' and then LENGTH-1 (30 bit)' and jump back to step 1) " is 121.
Long Statement,FoundationDB.Layers.Experimental.Indexing,WordAlignHybridEncoder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,CompressedBinaryExpression,The length of the statement  "	Contract.Requires (left != null && right != null && op != LogicalOperation.And && Enum.IsDefined (typeof(LogicalOperation)' op)); " is 129.
Long Statement,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The length of the statement  "			Console.WriteLine ("@@@ T=" + now.Subtract (start) + "' sent: " + msgSent.ToString ("N0") + "' recv: " + msgReceived.ToString ("N0")); " is 134.
Long Statement,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The length of the statement  "			Console.WriteLine ("### Workers: " + workerPool.IdleWorkers + " / " + workerPool.ActiveWorkers + " (" + new string ('#'' workerPool.IdleWorkers) + new string ('.'' workerPool.ActiveWorkers - workerPool.IdleWorkers) + ")' sent: " + workerPool.MessageScheduled.ToString ("N0") + "' recv: " + workerPool.MessageReceived.ToString ("N0") + "' delta: " + (workerPool.MessageScheduled - workerPool.MessageReceived).ToString ("N0") + "' busy: " + workerPool.WorkerBusyTime + " (avg " + workerPool.WorkerAverageBusyDuration.TotalMilliseconds.ToString ("N3") + " ms)"); " is 559.
Long Statement,FoundationDB.Layers.Messaging,FdbWorkerPool,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\FdbWorkerPool.cs,FindRandomItem,The length of the statement  "	// We want to find the next item in the clockwise direction. If we reach the end of the ring' we "wrap around" by starting again from the start " is 143.
Long Statement,FoundationDB.Layers.Messaging,FdbWorkerPool,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\FdbWorkerPool.cs,FindRandomItem,The length of the statement  "	// When the ring only contains a few items (or is empty)' there is more than 50% change that we wont find anything in the first read. " is 133.
Long Statement,FoundationDB.Layers.Messaging,FdbWorkerPool,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\FdbWorkerPool.cs,FindRandomItem,The length of the statement  "	// To reduce the latency for this case' we will issue both range reads at the same time' and discard the second one if the first returned something. " is 148.
Long Statement,FoundationDB.Layers.Messaging,FdbWorkerPool,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\FdbWorkerPool.cs,RunWorkerAsync,The length of the statement  "					tr.Annotate ("Will start watching on key {0} with id {1}"' watchKey.ToAsciiOrHexaString ()' myId.ToAsciiOrHexaString ()); " is 121.
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,CompressedBitmap,The following statement contains a magic number: if (data.Count > 0 && data.Count < 8)  	throw new ArgumentException ("A compressed bitmap must either be empty' or at least 8 bytes long"' "data");  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,CompressedBitmap,The following statement contains a magic number: if ((data.Count & 3) != 0)  	throw new ArgumentException ("A compressed bitmap size must be a multiple of 4 bytes"' "data");  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,CompressedBitmap,The following statement contains a magic number: if (data.Count == 0) {  	m_data = Slice.Empty;  	m_bounds = BitRange.Empty;  } else {  	if ((data.Count & 3) != 0)  		throw new ArgumentException ("A compressed bitmap size must be a multiple of 4 bytes"' "data");  	if (data.Count < 4)  		throw new ArgumentException ("A compressed bitmap must be at least 4 bytes long"' "data");  	m_data = data;  	m_bounds = bounds;  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,CompressedBitmap,The following statement contains a magic number: if (data.Count == 0) {  	m_data = Slice.Empty;  	m_bounds = BitRange.Empty;  } else {  	if ((data.Count & 3) != 0)  		throw new ArgumentException ("A compressed bitmap size must be a multiple of 4 bytes"' "data");  	if (data.Count < 4)  		throw new ArgumentException ("A compressed bitmap must be at least 4 bytes long"' "data");  	m_data = data;  	m_bounds = bounds;  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,CompressedBitmap,The following statement contains a magic number: if ((data.Count & 3) != 0)  	throw new ArgumentException ("A compressed bitmap size must be a multiple of 4 bytes"' "data");  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,CompressedBitmap,The following statement contains a magic number: if (data.Count < 4)  	throw new ArgumentException ("A compressed bitmap must be at least 4 bytes long"' "data");  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,Test,The following statement contains a magic number: foreach (var word in this) {  	int n = p + word.FillCount * 31;  	if (n > bitOffset) {  		if (word.IsLiteral) {  			return (word.Literal & (1 << (bitOffset - p))) != 0;  		} else {  			return word.FillBit == 1;  		}  	}  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,ComputeBounds,The following statement contains a magic number: if (count > 0 && count < 8)  	throw new ArgumentException ("Bitmap buffer size is too small"' "data");  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,ComputeBounds,The following statement contains a magic number: if ((count & 3) != 0)  	throw new ArgumentException ("Bitmap buffer size must be a multiple of 4 bytes"' "data");  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,ComputeBounds,The following statement contains a magic number: if (words < 0) {  	// the bitmap is complete so we can read the header  	highest = (int)data.ReadUInt32 (0' 4);  	if (highest < 0 && highest != -1)  		throw new InvalidOperationException ("Corrupted bitmap buffer (highest bit underflow)" + highest);  } else {  	// the bitmap is not finished' we need to find it ourselves  	highest = (words * 31) - 1;  	// check the last word if it is a literal  	int last = new CompressedWord (data.ReadUInt32 (data.Count - 4' 4)).GetHighestBit ();  	if (last >= 0)  		highest += last - 30;  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,ComputeBounds,The following statement contains a magic number: if (words < 0) {  	// the bitmap is complete so we can read the header  	highest = (int)data.ReadUInt32 (0' 4);  	if (highest < 0 && highest != -1)  		throw new InvalidOperationException ("Corrupted bitmap buffer (highest bit underflow)" + highest);  } else {  	// the bitmap is not finished' we need to find it ourselves  	highest = (words * 31) - 1;  	// check the last word if it is a literal  	int last = new CompressedWord (data.ReadUInt32 (data.Count - 4' 4)).GetHighestBit ();  	if (last >= 0)  		highest += last - 30;  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,ComputeBounds,The following statement contains a magic number: if (words < 0) {  	// the bitmap is complete so we can read the header  	highest = (int)data.ReadUInt32 (0' 4);  	if (highest < 0 && highest != -1)  		throw new InvalidOperationException ("Corrupted bitmap buffer (highest bit underflow)" + highest);  } else {  	// the bitmap is not finished' we need to find it ourselves  	highest = (words * 31) - 1;  	// check the last word if it is a literal  	int last = new CompressedWord (data.ReadUInt32 (data.Count - 4' 4)).GetHighestBit ();  	if (last >= 0)  		highest += last - 30;  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,ComputeBounds,The following statement contains a magic number: if (words < 0) {  	// the bitmap is complete so we can read the header  	highest = (int)data.ReadUInt32 (0' 4);  	if (highest < 0 && highest != -1)  		throw new InvalidOperationException ("Corrupted bitmap buffer (highest bit underflow)" + highest);  } else {  	// the bitmap is not finished' we need to find it ourselves  	highest = (words * 31) - 1;  	// check the last word if it is a literal  	int last = new CompressedWord (data.ReadUInt32 (data.Count - 4' 4)).GetHighestBit ();  	if (last >= 0)  		highest += last - 30;  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,ComputeBounds,The following statement contains a magic number: if (words < 0) {  	// the bitmap is complete so we can read the header  	highest = (int)data.ReadUInt32 (0' 4);  	if (highest < 0 && highest != -1)  		throw new InvalidOperationException ("Corrupted bitmap buffer (highest bit underflow)" + highest);  } else {  	// the bitmap is not finished' we need to find it ourselves  	highest = (words * 31) - 1;  	// check the last word if it is a literal  	int last = new CompressedWord (data.ReadUInt32 (data.Count - 4' 4)).GetHighestBit ();  	if (last >= 0)  		highest += last - 30;  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,ComputeBounds,The following statement contains a magic number: highest = (int)data.ReadUInt32 (0' 4);  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,ComputeBounds,The following statement contains a magic number: highest = (words * 31) - 1;  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,ComputeBounds,The following statement contains a magic number: if (last >= 0)  	highest += last - 30;  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,ComputeBounds,The following statement contains a magic number: highest += last - 30;  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,ComputeBounds,The following statement contains a magic number: using (var iter = new CompressedBitmapWordIterator (data)) {  	while (iter.MoveNext () && lowest >= 0) {  		var word = iter.Current;  		if (word.IsLiteral) {  			// count the lower bits that are 0 for the final tally  			int first = word.GetLowestBit ();  			if (first < 0) {  				// all zeroes (not regular)  				lowest += 31;  				continue;  			}  			lowest += first;  			break;  		}  		if (word.FillBit == 1) {  			// this is all 1s  			break;  		}  		// this is 0-bit FILLER  		lowest += 31 * word.FillCount;  	}  	if (lowest < 0)  		throw new InvalidOperationException ("Corrupted bitmap buffer (lowest bit overflow)" + lowest);  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,ComputeBounds,The following statement contains a magic number: using (var iter = new CompressedBitmapWordIterator (data)) {  	while (iter.MoveNext () && lowest >= 0) {  		var word = iter.Current;  		if (word.IsLiteral) {  			// count the lower bits that are 0 for the final tally  			int first = word.GetLowestBit ();  			if (first < 0) {  				// all zeroes (not regular)  				lowest += 31;  				continue;  			}  			lowest += first;  			break;  		}  		if (word.FillBit == 1) {  			// this is all 1s  			break;  		}  		// this is 0-bit FILLER  		lowest += 31 * word.FillCount;  	}  	if (lowest < 0)  		throw new InvalidOperationException ("Corrupted bitmap buffer (lowest bit overflow)" + lowest);  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,ComputeBounds,The following statement contains a magic number: while (iter.MoveNext () && lowest >= 0) {  	var word = iter.Current;  	if (word.IsLiteral) {  		// count the lower bits that are 0 for the final tally  		int first = word.GetLowestBit ();  		if (first < 0) {  			// all zeroes (not regular)  			lowest += 31;  			continue;  		}  		lowest += first;  		break;  	}  	if (word.FillBit == 1) {  		// this is all 1s  		break;  	}  	// this is 0-bit FILLER  	lowest += 31 * word.FillCount;  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,ComputeBounds,The following statement contains a magic number: while (iter.MoveNext () && lowest >= 0) {  	var word = iter.Current;  	if (word.IsLiteral) {  		// count the lower bits that are 0 for the final tally  		int first = word.GetLowestBit ();  		if (first < 0) {  			// all zeroes (not regular)  			lowest += 31;  			continue;  		}  		lowest += first;  		break;  	}  	if (word.FillBit == 1) {  		// this is all 1s  		break;  	}  	// this is 0-bit FILLER  	lowest += 31 * word.FillCount;  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,ComputeBounds,The following statement contains a magic number: if (word.IsLiteral) {  	// count the lower bits that are 0 for the final tally  	int first = word.GetLowestBit ();  	if (first < 0) {  		// all zeroes (not regular)  		lowest += 31;  		continue;  	}  	lowest += first;  	break;  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,ComputeBounds,The following statement contains a magic number: if (first < 0) {  	// all zeroes (not regular)  	lowest += 31;  	continue;  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,ComputeBounds,The following statement contains a magic number: lowest += 31;  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,ComputeBounds,The following statement contains a magic number: lowest += 31 * word.FillCount;  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,GetStatistics,The following statement contains a magic number: ratio = (32.0 * words) / m_bounds.Highest;  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,CompressedBitmapBuilder,The following statement contains a magic number: if ((bitmap.Data.Count & 3) != 0)  	throw new ArgumentException ("Bitmap's underlying buffer size should be a multiple of 4 bytes"' "bitmap");  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,DecodeWords,The following statement contains a magic number: Contract.Requires (size >= 0 && data.Count >= 4 && (data.Count & 3) == 0);  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,DecodeWords,The following statement contains a magic number: Contract.Requires (size >= 0 && data.Count >= 4 && (data.Count & 3) == 0);  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,DecodeWords,The following statement contains a magic number: for (int i = 0' p = data.Offset + 4; p < end; i++' p += 4) {  	words [i] = new CompressedWord (data.ReadUInt32 (p' 4));  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,DecodeWords,The following statement contains a magic number: for (int i = 0' p = data.Offset + 4; p < end; i++' p += 4) {  	words [i] = new CompressedWord (data.ReadUInt32 (p' 4));  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,DecodeWords,The following statement contains a magic number: for (int i = 0' p = data.Offset + 4; p < end; i++' p += 4) {  	words [i] = new CompressedWord (data.ReadUInt32 (p' 4));  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,DecodeWords,The following statement contains a magic number: p += 4
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,DecodeWords,The following statement contains a magic number: words [i] = new CompressedWord (data.ReadUInt32 (p' 4));  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,GetWordIndex,The following statement contains a magic number: mask = 1U << (offset % 31);  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,GetWordIndex,The following statement contains a magic number: return offset / 31;  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,EnsureCapacity,The following statement contains a magic number: if (minSize > m_size) {  	int newSize = SliceHelpers.NextPowerOfTwo (minSize);  	if (newSize < 0)  		newSize = minSize;  	if (newSize < 8)  		newSize = 8;  	//Console.WriteLine("> resize buffer to {0} words"' newSize);  	Array.Resize (ref m_words' newSize);  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,EnsureCapacity,The following statement contains a magic number: if (minSize > m_size) {  	int newSize = SliceHelpers.NextPowerOfTwo (minSize);  	if (newSize < 0)  		newSize = minSize;  	if (newSize < 8)  		newSize = 8;  	//Console.WriteLine("> resize buffer to {0} words"' newSize);  	Array.Resize (ref m_words' newSize);  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,EnsureCapacity,The following statement contains a magic number: if (newSize < 8)  	newSize = 8;  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,EnsureCapacity,The following statement contains a magic number: if (newSize < 8)  	newSize = 8;  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,EnsureCapacity,The following statement contains a magic number: newSize = 8;  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,Set,The following statement contains a magic number: if (!GetCompressedWordIndex (wordIndex' out offset' out position)) {  	// falls outside the bitmap' need to add new words  	count = wordIndex - position;  	if (count > 0) {  		//Console.WriteLine("> outside by {0}' need filler"' count);  		EnsureCapacity (m_size + 2);  		m_words [m_size++] = CompressedWord.MakeZeroes (count);  	} else {  		//Console.WriteLine("> outside' right next to it");  		EnsureCapacity (m_size + 1);  	}  	m_words [m_size++] = CompressedWord.MakeLiteral (mask);  	return true;  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,Set,The following statement contains a magic number: if (count > 0) {  	//Console.WriteLine("> outside by {0}' need filler"' count);  	EnsureCapacity (m_size + 2);  	m_words [m_size++] = CompressedWord.MakeZeroes (count);  } else {  	//Console.WriteLine("> outside' right next to it");  	EnsureCapacity (m_size + 1);  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,Set,The following statement contains a magic number: EnsureCapacity (m_size + 2);  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,SplitFiller,The following statement contains a magic number: if (head > 0) {  	// keep the current filler' need to insert one or two words after it  	// update the current filler  	m_words [offset] = CompressedWord.MakeFiller (set' head);  	if (tail > 0) {  		// insert a literal and a filler  		//Console.WriteLine("> INSERT [...] ({0}:{1}) [{2}:0x{3:X8}] ({4}:{5}) [...]"' offset' head' offset + 1' mask' offset + 2' tail);  		Shift (offset + 1' 2);  		m_words [offset + 1] = CompressedWord.MakeLiteral (value);  		m_words [offset + 2] = CompressedWord.MakeFiller (set' tail);  	} else {  		// only a literal  		//Console.WriteLine("> INSERT [...] ({0}:{1}) [0x{2:X8}] [...]"' offset' head' mask);  		Shift (offset + 1' 1);  		m_words [offset + 1] = CompressedWord.MakeLiteral (value);  	}  } else {  	if (tail > 0) {  		// replace current with a literal and add a filler  		//Console.WriteLine("> INSERT [....] [{0}:0x{1:X8}] ({2}:{3}) [...]"' offset' mask' offset + 1' tail);  		Shift (offset + 1' 1);  		m_words [offset + 1] = CompressedWord.MakeFiller (set' tail);  	} else {  		// patch in place  		//Console.WriteLine("> PATCH [...] [{0}:0x{0:X8}] [...]"' offset' mask);  	}  	m_words [offset] = CompressedWord.MakeLiteral (value);  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,SplitFiller,The following statement contains a magic number: if (head > 0) {  	// keep the current filler' need to insert one or two words after it  	// update the current filler  	m_words [offset] = CompressedWord.MakeFiller (set' head);  	if (tail > 0) {  		// insert a literal and a filler  		//Console.WriteLine("> INSERT [...] ({0}:{1}) [{2}:0x{3:X8}] ({4}:{5}) [...]"' offset' head' offset + 1' mask' offset + 2' tail);  		Shift (offset + 1' 2);  		m_words [offset + 1] = CompressedWord.MakeLiteral (value);  		m_words [offset + 2] = CompressedWord.MakeFiller (set' tail);  	} else {  		// only a literal  		//Console.WriteLine("> INSERT [...] ({0}:{1}) [0x{2:X8}] [...]"' offset' head' mask);  		Shift (offset + 1' 1);  		m_words [offset + 1] = CompressedWord.MakeLiteral (value);  	}  } else {  	if (tail > 0) {  		// replace current with a literal and add a filler  		//Console.WriteLine("> INSERT [....] [{0}:0x{1:X8}] ({2}:{3}) [...]"' offset' mask' offset + 1' tail);  		Shift (offset + 1' 1);  		m_words [offset + 1] = CompressedWord.MakeFiller (set' tail);  	} else {  		// patch in place  		//Console.WriteLine("> PATCH [...] [{0}:0x{0:X8}] [...]"' offset' mask);  	}  	m_words [offset] = CompressedWord.MakeLiteral (value);  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,SplitFiller,The following statement contains a magic number: if (tail > 0) {  	// insert a literal and a filler  	//Console.WriteLine("> INSERT [...] ({0}:{1}) [{2}:0x{3:X8}] ({4}:{5}) [...]"' offset' head' offset + 1' mask' offset + 2' tail);  	Shift (offset + 1' 2);  	m_words [offset + 1] = CompressedWord.MakeLiteral (value);  	m_words [offset + 2] = CompressedWord.MakeFiller (set' tail);  } else {  	// only a literal  	//Console.WriteLine("> INSERT [...] ({0}:{1}) [0x{2:X8}] [...]"' offset' head' mask);  	Shift (offset + 1' 1);  	m_words [offset + 1] = CompressedWord.MakeLiteral (value);  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,SplitFiller,The following statement contains a magic number: if (tail > 0) {  	// insert a literal and a filler  	//Console.WriteLine("> INSERT [...] ({0}:{1}) [{2}:0x{3:X8}] ({4}:{5}) [...]"' offset' head' offset + 1' mask' offset + 2' tail);  	Shift (offset + 1' 2);  	m_words [offset + 1] = CompressedWord.MakeLiteral (value);  	m_words [offset + 2] = CompressedWord.MakeFiller (set' tail);  } else {  	// only a literal  	//Console.WriteLine("> INSERT [...] ({0}:{1}) [0x{2:X8}] [...]"' offset' head' mask);  	Shift (offset + 1' 1);  	m_words [offset + 1] = CompressedWord.MakeLiteral (value);  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,SplitFiller,The following statement contains a magic number: Shift (offset + 1' 2);  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,SplitFiller,The following statement contains a magic number: m_words [offset + 2] = CompressedWord.MakeFiller (set' tail);  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,ToBooleanArray,The following statement contains a magic number: for (int i = 0; i < m_size; i++) {  	var word = m_words [i];  	if (word.IsLiteral) {  		int w = word.Literal;  		int j = 31;  		while (j-- > 0) {  			res.Add ((w & 1) == 1);  			w >>= 1;  		}  	} else if (word.FillBit == 1) {  		int j = word.FillCount * 31;  		while (j-- > 0) {  			res.Add (true);  		}  	} else {  		int j = word.FillCount * 31;  		while (j-- > 0) {  			res.Add (false);  		}  	}  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,ToBooleanArray,The following statement contains a magic number: for (int i = 0; i < m_size; i++) {  	var word = m_words [i];  	if (word.IsLiteral) {  		int w = word.Literal;  		int j = 31;  		while (j-- > 0) {  			res.Add ((w & 1) == 1);  			w >>= 1;  		}  	} else if (word.FillBit == 1) {  		int j = word.FillCount * 31;  		while (j-- > 0) {  			res.Add (true);  		}  	} else {  		int j = word.FillCount * 31;  		while (j-- > 0) {  			res.Add (false);  		}  	}  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,ToBooleanArray,The following statement contains a magic number: for (int i = 0; i < m_size; i++) {  	var word = m_words [i];  	if (word.IsLiteral) {  		int w = word.Literal;  		int j = 31;  		while (j-- > 0) {  			res.Add ((w & 1) == 1);  			w >>= 1;  		}  	} else if (word.FillBit == 1) {  		int j = word.FillCount * 31;  		while (j-- > 0) {  			res.Add (true);  		}  	} else {  		int j = word.FillCount * 31;  		while (j-- > 0) {  			res.Add (false);  		}  	}  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,ToBooleanArray,The following statement contains a magic number: if (word.IsLiteral) {  	int w = word.Literal;  	int j = 31;  	while (j-- > 0) {  		res.Add ((w & 1) == 1);  		w >>= 1;  	}  } else if (word.FillBit == 1) {  	int j = word.FillCount * 31;  	while (j-- > 0) {  		res.Add (true);  	}  } else {  	int j = word.FillCount * 31;  	while (j-- > 0) {  		res.Add (false);  	}  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,ToBooleanArray,The following statement contains a magic number: if (word.IsLiteral) {  	int w = word.Literal;  	int j = 31;  	while (j-- > 0) {  		res.Add ((w & 1) == 1);  		w >>= 1;  	}  } else if (word.FillBit == 1) {  	int j = word.FillCount * 31;  	while (j-- > 0) {  		res.Add (true);  	}  } else {  	int j = word.FillCount * 31;  	while (j-- > 0) {  		res.Add (false);  	}  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,ToBooleanArray,The following statement contains a magic number: if (word.IsLiteral) {  	int w = word.Literal;  	int j = 31;  	while (j-- > 0) {  		res.Add ((w & 1) == 1);  		w >>= 1;  	}  } else if (word.FillBit == 1) {  	int j = word.FillCount * 31;  	while (j-- > 0) {  		res.Add (true);  	}  } else {  	int j = word.FillCount * 31;  	while (j-- > 0) {  		res.Add (false);  	}  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,ToBooleanArray,The following statement contains a magic number: if (word.FillBit == 1) {  	int j = word.FillCount * 31;  	while (j-- > 0) {  		res.Add (true);  	}  } else {  	int j = word.FillCount * 31;  	while (j-- > 0) {  		res.Add (false);  	}  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,ToBooleanArray,The following statement contains a magic number: if (word.FillBit == 1) {  	int j = word.FillCount * 31;  	while (j-- > 0) {  		res.Add (true);  	}  } else {  	int j = word.FillCount * 31;  	while (j-- > 0) {  		res.Add (false);  	}  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedWord,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedWord.cs,GetLowestBit,The following statement contains a magic number: if (w != ALL_ZEROES) {  	//TODO: use a fast bit tricks algorithm here  	for (int i = 0; i <= 30; i--) {  		if ((w & (1 << i)) != 0)  			return i;  	}  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedWord,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedWord.cs,GetLowestBit,The following statement contains a magic number: for (int i = 0; i <= 30; i--) {  	if ((w & (1 << i)) != 0)  		return i;  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedWord,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedWord.cs,GetHighestBit,The following statement contains a magic number: if (w != ALL_ZEROES) {  	//TODO: use a fast bit tricks algorithm here  	for (int i = 30; i >= 0; i--) {  		if ((w & (1 << i)) != 0)  			return i;  	}  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedWord,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedWord.cs,GetHighestBit,The following statement contains a magic number: for (int i = 30; i >= 0; i--) {  	if ((w & (1 << i)) != 0)  		return i;  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedWord,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedWord.cs,CountBits,The following statement contains a magic number: return IsLiteralWord (r) ? BitCount (this.Literal) : (31 * GetFillBit (r) * GetFillCount (r));  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedWord,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedWord.cs,BitCount,The following statement contains a magic number: value = (value & 0x33333333) + ((value >> 2) & 0x33333333);  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedWord,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedWord.cs,BitCount,The following statement contains a magic number: value = ((value + (value >> 4) & 0xF0F0F0F) * 0x1010101) >> (32 - 8);  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedWord,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedWord.cs,BitCount,The following statement contains a magic number: value = ((value + (value >> 4) & 0xF0F0F0F) * 0x1010101) >> (32 - 8);  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedWord,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedWord.cs,BitCount,The following statement contains a magic number: value = ((value + (value >> 4) & 0xF0F0F0F) * 0x1010101) >> (32 - 8);  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapWordIterator,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapWordIterator.cs,CompressedBitmapWordIterator,The following statement contains a magic number: Contract.Requires ((buffer.Count & 3) == 0 && (buffer.Count == 0 || buffer.Count >= 8));  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapWordIterator,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapWordIterator.cs,CompressedBitmapWordIterator,The following statement contains a magic number: Contract.Requires ((buffer.Count & 3) == 0 && (buffer.Count == 0 || buffer.Count >= 8));  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapWordIterator,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapWordIterator.cs,CompressedBitmapWordIterator,The following statement contains a magic number: if (buffer.Count == 0) {  	m_reader = new SliceReader ();  } else {  	// skip the header  	m_reader = new SliceReader (buffer.Substring (4));  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapWordIterator,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapWordIterator.cs,CompressedBitmapWordIterator,The following statement contains a magic number: m_reader = new SliceReader (buffer.Substring (4));  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapWordIterator,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapWordIterator.cs,MoveNext,The following statement contains a magic number: if (m_reader.Remaining < 4) {  	m_current = 0;  	return false;  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBitView,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBitView.cs,GetEnumerator,The following statement contains a magic number: foreach (var word in m_bitmap) {  	if (word.IsLiteral) {  		int value = word.Literal;  		if (value > 0) {  			for (int i = 0; i < 31; i++) {  				if ((value & (1 << i)) != 0)  					yield return offset + i;  			}  		}  		offset += 31;  	} else if (word.FillBit == 0) {  		// skip it  		offset += word.FillCount * 31;  	} else {  		// all ones  		int n = word.FillCount * 31;  		for (int i = 0; i < n; i++) {  			yield return offset + i;  		}  		offset += n;  	}  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBitView,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBitView.cs,GetEnumerator,The following statement contains a magic number: foreach (var word in m_bitmap) {  	if (word.IsLiteral) {  		int value = word.Literal;  		if (value > 0) {  			for (int i = 0; i < 31; i++) {  				if ((value & (1 << i)) != 0)  					yield return offset + i;  			}  		}  		offset += 31;  	} else if (word.FillBit == 0) {  		// skip it  		offset += word.FillCount * 31;  	} else {  		// all ones  		int n = word.FillCount * 31;  		for (int i = 0; i < n; i++) {  			yield return offset + i;  		}  		offset += n;  	}  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBitView,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBitView.cs,GetEnumerator,The following statement contains a magic number: foreach (var word in m_bitmap) {  	if (word.IsLiteral) {  		int value = word.Literal;  		if (value > 0) {  			for (int i = 0; i < 31; i++) {  				if ((value & (1 << i)) != 0)  					yield return offset + i;  			}  		}  		offset += 31;  	} else if (word.FillBit == 0) {  		// skip it  		offset += word.FillCount * 31;  	} else {  		// all ones  		int n = word.FillCount * 31;  		for (int i = 0; i < n; i++) {  			yield return offset + i;  		}  		offset += n;  	}  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBitView,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBitView.cs,GetEnumerator,The following statement contains a magic number: foreach (var word in m_bitmap) {  	if (word.IsLiteral) {  		int value = word.Literal;  		if (value > 0) {  			for (int i = 0; i < 31; i++) {  				if ((value & (1 << i)) != 0)  					yield return offset + i;  			}  		}  		offset += 31;  	} else if (word.FillBit == 0) {  		// skip it  		offset += word.FillCount * 31;  	} else {  		// all ones  		int n = word.FillCount * 31;  		for (int i = 0; i < n; i++) {  			yield return offset + i;  		}  		offset += n;  	}  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBitView,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBitView.cs,GetEnumerator,The following statement contains a magic number: if (word.IsLiteral) {  	int value = word.Literal;  	if (value > 0) {  		for (int i = 0; i < 31; i++) {  			if ((value & (1 << i)) != 0)  				yield return offset + i;  		}  	}  	offset += 31;  } else if (word.FillBit == 0) {  	// skip it  	offset += word.FillCount * 31;  } else {  	// all ones  	int n = word.FillCount * 31;  	for (int i = 0; i < n; i++) {  		yield return offset + i;  	}  	offset += n;  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBitView,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBitView.cs,GetEnumerator,The following statement contains a magic number: if (word.IsLiteral) {  	int value = word.Literal;  	if (value > 0) {  		for (int i = 0; i < 31; i++) {  			if ((value & (1 << i)) != 0)  				yield return offset + i;  		}  	}  	offset += 31;  } else if (word.FillBit == 0) {  	// skip it  	offset += word.FillCount * 31;  } else {  	// all ones  	int n = word.FillCount * 31;  	for (int i = 0; i < n; i++) {  		yield return offset + i;  	}  	offset += n;  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBitView,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBitView.cs,GetEnumerator,The following statement contains a magic number: if (word.IsLiteral) {  	int value = word.Literal;  	if (value > 0) {  		for (int i = 0; i < 31; i++) {  			if ((value & (1 << i)) != 0)  				yield return offset + i;  		}  	}  	offset += 31;  } else if (word.FillBit == 0) {  	// skip it  	offset += word.FillCount * 31;  } else {  	// all ones  	int n = word.FillCount * 31;  	for (int i = 0; i < n; i++) {  		yield return offset + i;  	}  	offset += n;  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBitView,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBitView.cs,GetEnumerator,The following statement contains a magic number: if (word.IsLiteral) {  	int value = word.Literal;  	if (value > 0) {  		for (int i = 0; i < 31; i++) {  			if ((value & (1 << i)) != 0)  				yield return offset + i;  		}  	}  	offset += 31;  } else if (word.FillBit == 0) {  	// skip it  	offset += word.FillCount * 31;  } else {  	// all ones  	int n = word.FillCount * 31;  	for (int i = 0; i < n; i++) {  		yield return offset + i;  	}  	offset += n;  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBitView,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBitView.cs,GetEnumerator,The following statement contains a magic number: if (value > 0) {  	for (int i = 0; i < 31; i++) {  		if ((value & (1 << i)) != 0)  			yield return offset + i;  	}  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBitView,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBitView.cs,GetEnumerator,The following statement contains a magic number: for (int i = 0; i < 31; i++) {  	if ((value & (1 << i)) != 0)  		yield return offset + i;  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBitView,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBitView.cs,GetEnumerator,The following statement contains a magic number: offset += 31;  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBitView,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBitView.cs,GetEnumerator,The following statement contains a magic number: if (word.FillBit == 0) {  	// skip it  	offset += word.FillCount * 31;  } else {  	// all ones  	int n = word.FillCount * 31;  	for (int i = 0; i < n; i++) {  		yield return offset + i;  	}  	offset += n;  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBitView,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBitView.cs,GetEnumerator,The following statement contains a magic number: if (word.FillBit == 0) {  	// skip it  	offset += word.FillCount * 31;  } else {  	// all ones  	int n = word.FillCount * 31;  	for (int i = 0; i < n; i++) {  		yield return offset + i;  	}  	offset += n;  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBitView,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBitView.cs,GetEnumerator,The following statement contains a magic number: offset += word.FillCount * 31;  
Magic Number,FoundationDB.Layers.Experimental.Indexing,BitRange,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\BitRange.cs,GetHashCode,The following statement contains a magic number: return unchecked(this.Lowest * 31) ^ this.Highest;  
Magic Number,FoundationDB.Layers.Experimental.Indexing,WordAlignHybridEncoder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,DumpCompressed,The following statement contains a magic number: output.Append (String.Format (" {0} words"' (compressed.Count >> 2) - 1));  
Magic Number,FoundationDB.Layers.Experimental.Indexing,WordAlignHybridEncoder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,DumpCompressed,The following statement contains a magic number: while (reader.Remaining >= 4) {  	uint word = reader.ReadFixed32 ();  	if ((word & TYPE_MASK) == BIT_TYPE_LITERAL) {  		output.AppendFormat ("' ({0}:{1}) 0x{2:X8}"' i' p' word);  		p += 31;  	} else {  		uint len = (word & LENGTH_MASK) + 1;  		output.AppendFormat ("' ({0}:{1}) {2} x {3}"' i' p' ((word & FILL_MASK) >> FILL_SHIFT) == 0 ? "zero" : "one"' len);  		p += len * 31;  	}  	i++;  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,WordAlignHybridEncoder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,DumpCompressed,The following statement contains a magic number: while (reader.Remaining >= 4) {  	uint word = reader.ReadFixed32 ();  	if ((word & TYPE_MASK) == BIT_TYPE_LITERAL) {  		output.AppendFormat ("' ({0}:{1}) 0x{2:X8}"' i' p' word);  		p += 31;  	} else {  		uint len = (word & LENGTH_MASK) + 1;  		output.AppendFormat ("' ({0}:{1}) {2} x {3}"' i' p' ((word & FILL_MASK) >> FILL_SHIFT) == 0 ? "zero" : "one"' len);  		p += len * 31;  	}  	i++;  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,WordAlignHybridEncoder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,DumpCompressed,The following statement contains a magic number: while (reader.Remaining >= 4) {  	uint word = reader.ReadFixed32 ();  	if ((word & TYPE_MASK) == BIT_TYPE_LITERAL) {  		output.AppendFormat ("' ({0}:{1}) 0x{2:X8}"' i' p' word);  		p += 31;  	} else {  		uint len = (word & LENGTH_MASK) + 1;  		output.AppendFormat ("' ({0}:{1}) {2} x {3}"' i' p' ((word & FILL_MASK) >> FILL_SHIFT) == 0 ? "zero" : "one"' len);  		p += len * 31;  	}  	i++;  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,WordAlignHybridEncoder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,DumpCompressed,The following statement contains a magic number: if ((word & TYPE_MASK) == BIT_TYPE_LITERAL) {  	output.AppendFormat ("' ({0}:{1}) 0x{2:X8}"' i' p' word);  	p += 31;  } else {  	uint len = (word & LENGTH_MASK) + 1;  	output.AppendFormat ("' ({0}:{1}) {2} x {3}"' i' p' ((word & FILL_MASK) >> FILL_SHIFT) == 0 ? "zero" : "one"' len);  	p += len * 31;  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,WordAlignHybridEncoder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,DumpCompressed,The following statement contains a magic number: if ((word & TYPE_MASK) == BIT_TYPE_LITERAL) {  	output.AppendFormat ("' ({0}:{1}) 0x{2:X8}"' i' p' word);  	p += 31;  } else {  	uint len = (word & LENGTH_MASK) + 1;  	output.AppendFormat ("' ({0}:{1}) {2} x {3}"' i' p' ((word & FILL_MASK) >> FILL_SHIFT) == 0 ? "zero" : "one"' len);  	p += len * 31;  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,WordAlignHybridEncoder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,DumpCompressed,The following statement contains a magic number: p += 31;  
Magic Number,FoundationDB.Layers.Experimental.Indexing,WordAlignHybridEncoder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,DumpCompressed,The following statement contains a magic number: p += len * 31;  
Magic Number,FoundationDB.Layers.Experimental.Indexing,WordAlignHybridEncoder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Not,The following statement contains a magic number: if (bitmap.Count > 0) {  	foreach (var word in bitmap) {  		if (word.IsLiteral) {  			writer.Write (CompressedWord.MakeLiteral ((uint)(~word.Literal)));  			n += 31;  		} else {  			int fc = word.FillCount;  			writer.Write (word.FillBit == 1 ? CompressedWord.ALL_ZEROES : CompressedWord.ALL_ONES' fc);  			n += 31 * fc;  		}  	}  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,WordAlignHybridEncoder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Not,The following statement contains a magic number: if (bitmap.Count > 0) {  	foreach (var word in bitmap) {  		if (word.IsLiteral) {  			writer.Write (CompressedWord.MakeLiteral ((uint)(~word.Literal)));  			n += 31;  		} else {  			int fc = word.FillCount;  			writer.Write (word.FillBit == 1 ? CompressedWord.ALL_ZEROES : CompressedWord.ALL_ONES' fc);  			n += 31 * fc;  		}  	}  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,WordAlignHybridEncoder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Not,The following statement contains a magic number: foreach (var word in bitmap) {  	if (word.IsLiteral) {  		writer.Write (CompressedWord.MakeLiteral ((uint)(~word.Literal)));  		n += 31;  	} else {  		int fc = word.FillCount;  		writer.Write (word.FillBit == 1 ? CompressedWord.ALL_ZEROES : CompressedWord.ALL_ONES' fc);  		n += 31 * fc;  	}  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,WordAlignHybridEncoder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Not,The following statement contains a magic number: foreach (var word in bitmap) {  	if (word.IsLiteral) {  		writer.Write (CompressedWord.MakeLiteral ((uint)(~word.Literal)));  		n += 31;  	} else {  		int fc = word.FillCount;  		writer.Write (word.FillBit == 1 ? CompressedWord.ALL_ZEROES : CompressedWord.ALL_ONES' fc);  		n += 31 * fc;  	}  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,WordAlignHybridEncoder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Not,The following statement contains a magic number: if (word.IsLiteral) {  	writer.Write (CompressedWord.MakeLiteral ((uint)(~word.Literal)));  	n += 31;  } else {  	int fc = word.FillCount;  	writer.Write (word.FillBit == 1 ? CompressedWord.ALL_ZEROES : CompressedWord.ALL_ONES' fc);  	n += 31 * fc;  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,WordAlignHybridEncoder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Not,The following statement contains a magic number: if (word.IsLiteral) {  	writer.Write (CompressedWord.MakeLiteral ((uint)(~word.Literal)));  	n += 31;  } else {  	int fc = word.FillCount;  	writer.Write (word.FillBit == 1 ? CompressedWord.ALL_ZEROES : CompressedWord.ALL_ONES' fc);  	n += 31 * fc;  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,WordAlignHybridEncoder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Not,The following statement contains a magic number: n += 31;  
Magic Number,FoundationDB.Layers.Experimental.Indexing,WordAlignHybridEncoder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Not,The following statement contains a magic number: n += 31 * fc;  
Magic Number,FoundationDB.Layers.Experimental.Indexing,WordAlignHybridEncoder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Not,The following statement contains a magic number: if (n < size) {  	writer.Write (CompressedWord.ALL_ONES' size / 31);  	int r = size % 31;  	if (r > 0)  		writer.Write ((1u << r) - 1);  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,WordAlignHybridEncoder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Not,The following statement contains a magic number: if (n < size) {  	writer.Write (CompressedWord.ALL_ONES' size / 31);  	int r = size % 31;  	if (r > 0)  		writer.Write ((1u << r) - 1);  }  
Magic Number,FoundationDB.Layers.Experimental.Indexing,WordAlignHybridEncoder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Not,The following statement contains a magic number: writer.Write (CompressedWord.ALL_ONES' size / 31);  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,Main,The following statement contains a magic number: try {  	string clusterFile = null;  	//string clusterFile = @"c:\temp\fdb\nuc.cluster";  	string dbName = "DB";  	using (var db = Fdb.OpenAsync (clusterFile' dbName).GetAwaiter ().GetResult ()) {  		var location = db.Directory.CreateOrOpenAsync (new[] {  			"T"'  			"WorkerPool"  		}' cts.Token).GetAwaiter ().GetResult ();  		db.ClearRangeAsync (location' cts.Token).GetAwaiter ().GetResult ();  		// failsafe: remove this when not debugging problems !  		cts.CancelAfter (TimeSpan.FromSeconds (60));  		const int N = 100;  		// msg/publiser  		const int K = 2;  		// publishers  		const int W = 2;  		// workers  		RunAsync (db' location' cts.Token' () => cts.Cancel ()' N' K' W).GetAwaiter ().GetResult ();  	}  } catch (TaskCanceledException) {  	Console.WriteLine ("CANCELED");  } catch (Exception e) {  	cts.Cancel ();  	Console.Error.WriteLine ("CRASH: " + e.ToString ());  	Console.Error.WriteLine ();  } finally {  	Fdb.Stop ();  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,Main,The following statement contains a magic number: try {  	string clusterFile = null;  	//string clusterFile = @"c:\temp\fdb\nuc.cluster";  	string dbName = "DB";  	using (var db = Fdb.OpenAsync (clusterFile' dbName).GetAwaiter ().GetResult ()) {  		var location = db.Directory.CreateOrOpenAsync (new[] {  			"T"'  			"WorkerPool"  		}' cts.Token).GetAwaiter ().GetResult ();  		db.ClearRangeAsync (location' cts.Token).GetAwaiter ().GetResult ();  		// failsafe: remove this when not debugging problems !  		cts.CancelAfter (TimeSpan.FromSeconds (60));  		const int N = 100;  		// msg/publiser  		const int K = 2;  		// publishers  		const int W = 2;  		// workers  		RunAsync (db' location' cts.Token' () => cts.Cancel ()' N' K' W).GetAwaiter ().GetResult ();  	}  } catch (TaskCanceledException) {  	Console.WriteLine ("CANCELED");  } catch (Exception e) {  	cts.Cancel ();  	Console.Error.WriteLine ("CRASH: " + e.ToString ());  	Console.Error.WriteLine ();  } finally {  	Fdb.Stop ();  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,Main,The following statement contains a magic number: try {  	string clusterFile = null;  	//string clusterFile = @"c:\temp\fdb\nuc.cluster";  	string dbName = "DB";  	using (var db = Fdb.OpenAsync (clusterFile' dbName).GetAwaiter ().GetResult ()) {  		var location = db.Directory.CreateOrOpenAsync (new[] {  			"T"'  			"WorkerPool"  		}' cts.Token).GetAwaiter ().GetResult ();  		db.ClearRangeAsync (location' cts.Token).GetAwaiter ().GetResult ();  		// failsafe: remove this when not debugging problems !  		cts.CancelAfter (TimeSpan.FromSeconds (60));  		const int N = 100;  		// msg/publiser  		const int K = 2;  		// publishers  		const int W = 2;  		// workers  		RunAsync (db' location' cts.Token' () => cts.Cancel ()' N' K' W).GetAwaiter ().GetResult ();  	}  } catch (TaskCanceledException) {  	Console.WriteLine ("CANCELED");  } catch (Exception e) {  	cts.Cancel ();  	Console.Error.WriteLine ("CRASH: " + e.ToString ());  	Console.Error.WriteLine ();  } finally {  	Fdb.Stop ();  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,Main,The following statement contains a magic number: try {  	string clusterFile = null;  	//string clusterFile = @"c:\temp\fdb\nuc.cluster";  	string dbName = "DB";  	using (var db = Fdb.OpenAsync (clusterFile' dbName).GetAwaiter ().GetResult ()) {  		var location = db.Directory.CreateOrOpenAsync (new[] {  			"T"'  			"WorkerPool"  		}' cts.Token).GetAwaiter ().GetResult ();  		db.ClearRangeAsync (location' cts.Token).GetAwaiter ().GetResult ();  		// failsafe: remove this when not debugging problems !  		cts.CancelAfter (TimeSpan.FromSeconds (60));  		const int N = 100;  		// msg/publiser  		const int K = 2;  		// publishers  		const int W = 2;  		// workers  		RunAsync (db' location' cts.Token' () => cts.Cancel ()' N' K' W).GetAwaiter ().GetResult ();  	}  } catch (TaskCanceledException) {  	Console.WriteLine ("CANCELED");  } catch (Exception e) {  	cts.Cancel ();  	Console.Error.WriteLine ("CRASH: " + e.ToString ());  	Console.Error.WriteLine ();  } finally {  	Fdb.Stop ();  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,Main,The following statement contains a magic number: using (var db = Fdb.OpenAsync (clusterFile' dbName).GetAwaiter ().GetResult ()) {  	var location = db.Directory.CreateOrOpenAsync (new[] {  		"T"'  		"WorkerPool"  	}' cts.Token).GetAwaiter ().GetResult ();  	db.ClearRangeAsync (location' cts.Token).GetAwaiter ().GetResult ();  	// failsafe: remove this when not debugging problems !  	cts.CancelAfter (TimeSpan.FromSeconds (60));  	const int N = 100;  	// msg/publiser  	const int K = 2;  	// publishers  	const int W = 2;  	// workers  	RunAsync (db' location' cts.Token' () => cts.Cancel ()' N' K' W).GetAwaiter ().GetResult ();  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,Main,The following statement contains a magic number: using (var db = Fdb.OpenAsync (clusterFile' dbName).GetAwaiter ().GetResult ()) {  	var location = db.Directory.CreateOrOpenAsync (new[] {  		"T"'  		"WorkerPool"  	}' cts.Token).GetAwaiter ().GetResult ();  	db.ClearRangeAsync (location' cts.Token).GetAwaiter ().GetResult ();  	// failsafe: remove this when not debugging problems !  	cts.CancelAfter (TimeSpan.FromSeconds (60));  	const int N = 100;  	// msg/publiser  	const int K = 2;  	// publishers  	const int W = 2;  	// workers  	RunAsync (db' location' cts.Token' () => cts.Cancel ()' N' K' W).GetAwaiter ().GetResult ();  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,Main,The following statement contains a magic number: using (var db = Fdb.OpenAsync (clusterFile' dbName).GetAwaiter ().GetResult ()) {  	var location = db.Directory.CreateOrOpenAsync (new[] {  		"T"'  		"WorkerPool"  	}' cts.Token).GetAwaiter ().GetResult ();  	db.ClearRangeAsync (location' cts.Token).GetAwaiter ().GetResult ();  	// failsafe: remove this when not debugging problems !  	cts.CancelAfter (TimeSpan.FromSeconds (60));  	const int N = 100;  	// msg/publiser  	const int K = 2;  	// publishers  	const int W = 2;  	// workers  	RunAsync (db' location' cts.Token' () => cts.Cancel ()' N' K' W).GetAwaiter ().GetResult ();  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,Main,The following statement contains a magic number: using (var db = Fdb.OpenAsync (clusterFile' dbName).GetAwaiter ().GetResult ()) {  	var location = db.Directory.CreateOrOpenAsync (new[] {  		"T"'  		"WorkerPool"  	}' cts.Token).GetAwaiter ().GetResult ();  	db.ClearRangeAsync (location' cts.Token).GetAwaiter ().GetResult ();  	// failsafe: remove this when not debugging problems !  	cts.CancelAfter (TimeSpan.FromSeconds (60));  	const int N = 100;  	// msg/publiser  	const int K = 2;  	// publishers  	const int W = 2;  	// workers  	RunAsync (db' location' cts.Token' () => cts.Cancel ()' N' K' W).GetAwaiter ().GetResult ();  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,Main,The following statement contains a magic number: cts.CancelAfter (TimeSpan.FromSeconds (60));  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: try {  	var workerPool = new FdbWorkerPool (location);  	Console.WriteLine ("workerPool at " + location.Key.ToAsciiOrHexaString ());  	var workerSignal = new AsyncCancelableMutex (ct);  	var clientSignal = new AsyncCancelableMutex (ct);  	int taskCounter = 0;  	int msgSent = 0;  	int msgReceived = 0;  	Func<FdbWorkerMessage' CancellationToken' Task> handler = async (msg' _ct) => {  		Interlocked.Increment (ref msgReceived);  		//await Task.Delay(10 + Math.Abs(msg.Id.GetHashCode()) % 50);  		await Task.Delay (10).ConfigureAwait (false);  	};  	Func<int' Task> worker = async id => {  		await workerSignal.Task.ConfigureAwait (false);  		Console.WriteLine ("Worker #" + id + " is starting");  		try {  			await workerPool.RunWorkerAsync (db' handler' ct).ConfigureAwait (false);  		} finally {  			Console.WriteLine ("Worker #" + id + " has stopped");  		}  	};  	Func<int' Task> client = async id => {  		await clientSignal.Task.ConfigureAwait (false);  		await Task.Delay (10).ConfigureAwait (false);  		var rnd = new Random (id * 111);  		for (int i = 0; i < N; i++) {  			var taskId = Slice.FromString ("T" + Interlocked.Increment (ref taskCounter));  			var taskBody = Slice.FromString ("Message " + (i + 1) + " of " + N + " from client #" + id);  			await workerPool.ScheduleTaskAsync (db' taskId' taskBody' ct).ConfigureAwait (false);  			Interlocked.Increment (ref msgSent);  			//if (i > 0 && i % 10 == 0) Console.WriteLine("@@@ Client#" + id + " pushed " + (i + 1) + " / " + N + " messages");  			switch (rnd.Next (5)) {  			case 0:  				await Task.Delay (10).ConfigureAwait (false);  				break;  			case 1:  				await Task.Delay (100).ConfigureAwait (false);  				break;  			case 2:  				await Task.Delay (500).ConfigureAwait (false);  				break;  			}  		}  		Console.WriteLine ("@@@ Client#" + id + " has finished!");  	};  	Func<string' Task> dump = async label => {  		Console.WriteLine ("<dump label='" + label + "' key='" + location.Key.ToAsciiOrHexaString () + "'>");  		using (var tr = db.BeginTransaction (ct)) {  			await tr.Snapshot.GetRange (FdbKeyRange.StartsWith (location.Key)).ForEachAsync (kvp => {  				Console.WriteLine (" - " + location.Keys.Unpack (kvp.Key) + " = " + kvp.Value.ToAsciiOrHexaString ());  			}).ConfigureAwait (false);  		}  		Console.WriteLine ("</dump>");  	};  	var workers = Enumerable.Range (0' W).Select (i => worker (i)).ToArray ();  	var clients = Enumerable.Range (0' K).Select (i => client (i)).ToArray ();  	DateTime start = DateTime.Now;  	DateTime last = start;  	int lastHandled = -1;  	using (var timer = new Timer (_ => {  		var now = DateTime.Now;  		Console.WriteLine ("@@@ T=" + now.Subtract (start) + "' sent: " + msgSent.ToString ("N0") + "' recv: " + msgReceived.ToString ("N0"));  		Console.WriteLine ("### Workers: " + workerPool.IdleWorkers + " / " + workerPool.ActiveWorkers + " (" + new string ('#'' workerPool.IdleWorkers) + new string ('.'' workerPool.ActiveWorkers - workerPool.IdleWorkers) + ")' sent: " + workerPool.MessageScheduled.ToString ("N0") + "' recv: " + workerPool.MessageReceived.ToString ("N0") + "' delta: " + (workerPool.MessageScheduled - workerPool.MessageReceived).ToString ("N0") + "' busy: " + workerPool.WorkerBusyTime + " (avg " + workerPool.WorkerAverageBusyDuration.TotalMilliseconds.ToString ("N3") + " ms)");  		if (now.Subtract (last).TotalSeconds >= 10) {  			//dump("timer").GetAwaiter().GetResult();  			last = now;  			if (lastHandled == msgReceived) {  				// STALL ?  				Console.WriteLine ("STALL! ");  				done ();  			}  			lastHandled = msgReceived;  		}  		if (msgReceived >= K * N) {  			dump ("complete").GetAwaiter ().GetResult ();  			done ();  		}  	}' null' 1000' 1000)) {  		var sw = Stopwatch.StartNew ();  		// start the workers  		workerSignal.Set (async: true);  		await Task.Delay (500);  		await dump ("workers started");  		// start the clients  		clientSignal.Set (async: true);  		await Task.WhenAll (clients);  		Console.WriteLine ("Clients completed after " + sw.Elapsed);  		await Task.WhenAll (workers);  		Console.WriteLine ("Workers completed after " + sw.Elapsed);  	}  } finally {  	Console.WriteLine ("---------------------------------------------------------------------------");  	Console.WriteLine ("Transaction logs:");  	Console.WriteLine ();  	Console.WriteLine (sb.ToString ());  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: try {  	var workerPool = new FdbWorkerPool (location);  	Console.WriteLine ("workerPool at " + location.Key.ToAsciiOrHexaString ());  	var workerSignal = new AsyncCancelableMutex (ct);  	var clientSignal = new AsyncCancelableMutex (ct);  	int taskCounter = 0;  	int msgSent = 0;  	int msgReceived = 0;  	Func<FdbWorkerMessage' CancellationToken' Task> handler = async (msg' _ct) => {  		Interlocked.Increment (ref msgReceived);  		//await Task.Delay(10 + Math.Abs(msg.Id.GetHashCode()) % 50);  		await Task.Delay (10).ConfigureAwait (false);  	};  	Func<int' Task> worker = async id => {  		await workerSignal.Task.ConfigureAwait (false);  		Console.WriteLine ("Worker #" + id + " is starting");  		try {  			await workerPool.RunWorkerAsync (db' handler' ct).ConfigureAwait (false);  		} finally {  			Console.WriteLine ("Worker #" + id + " has stopped");  		}  	};  	Func<int' Task> client = async id => {  		await clientSignal.Task.ConfigureAwait (false);  		await Task.Delay (10).ConfigureAwait (false);  		var rnd = new Random (id * 111);  		for (int i = 0; i < N; i++) {  			var taskId = Slice.FromString ("T" + Interlocked.Increment (ref taskCounter));  			var taskBody = Slice.FromString ("Message " + (i + 1) + " of " + N + " from client #" + id);  			await workerPool.ScheduleTaskAsync (db' taskId' taskBody' ct).ConfigureAwait (false);  			Interlocked.Increment (ref msgSent);  			//if (i > 0 && i % 10 == 0) Console.WriteLine("@@@ Client#" + id + " pushed " + (i + 1) + " / " + N + " messages");  			switch (rnd.Next (5)) {  			case 0:  				await Task.Delay (10).ConfigureAwait (false);  				break;  			case 1:  				await Task.Delay (100).ConfigureAwait (false);  				break;  			case 2:  				await Task.Delay (500).ConfigureAwait (false);  				break;  			}  		}  		Console.WriteLine ("@@@ Client#" + id + " has finished!");  	};  	Func<string' Task> dump = async label => {  		Console.WriteLine ("<dump label='" + label + "' key='" + location.Key.ToAsciiOrHexaString () + "'>");  		using (var tr = db.BeginTransaction (ct)) {  			await tr.Snapshot.GetRange (FdbKeyRange.StartsWith (location.Key)).ForEachAsync (kvp => {  				Console.WriteLine (" - " + location.Keys.Unpack (kvp.Key) + " = " + kvp.Value.ToAsciiOrHexaString ());  			}).ConfigureAwait (false);  		}  		Console.WriteLine ("</dump>");  	};  	var workers = Enumerable.Range (0' W).Select (i => worker (i)).ToArray ();  	var clients = Enumerable.Range (0' K).Select (i => client (i)).ToArray ();  	DateTime start = DateTime.Now;  	DateTime last = start;  	int lastHandled = -1;  	using (var timer = new Timer (_ => {  		var now = DateTime.Now;  		Console.WriteLine ("@@@ T=" + now.Subtract (start) + "' sent: " + msgSent.ToString ("N0") + "' recv: " + msgReceived.ToString ("N0"));  		Console.WriteLine ("### Workers: " + workerPool.IdleWorkers + " / " + workerPool.ActiveWorkers + " (" + new string ('#'' workerPool.IdleWorkers) + new string ('.'' workerPool.ActiveWorkers - workerPool.IdleWorkers) + ")' sent: " + workerPool.MessageScheduled.ToString ("N0") + "' recv: " + workerPool.MessageReceived.ToString ("N0") + "' delta: " + (workerPool.MessageScheduled - workerPool.MessageReceived).ToString ("N0") + "' busy: " + workerPool.WorkerBusyTime + " (avg " + workerPool.WorkerAverageBusyDuration.TotalMilliseconds.ToString ("N3") + " ms)");  		if (now.Subtract (last).TotalSeconds >= 10) {  			//dump("timer").GetAwaiter().GetResult();  			last = now;  			if (lastHandled == msgReceived) {  				// STALL ?  				Console.WriteLine ("STALL! ");  				done ();  			}  			lastHandled = msgReceived;  		}  		if (msgReceived >= K * N) {  			dump ("complete").GetAwaiter ().GetResult ();  			done ();  		}  	}' null' 1000' 1000)) {  		var sw = Stopwatch.StartNew ();  		// start the workers  		workerSignal.Set (async: true);  		await Task.Delay (500);  		await dump ("workers started");  		// start the clients  		clientSignal.Set (async: true);  		await Task.WhenAll (clients);  		Console.WriteLine ("Clients completed after " + sw.Elapsed);  		await Task.WhenAll (workers);  		Console.WriteLine ("Workers completed after " + sw.Elapsed);  	}  } finally {  	Console.WriteLine ("---------------------------------------------------------------------------");  	Console.WriteLine ("Transaction logs:");  	Console.WriteLine ();  	Console.WriteLine (sb.ToString ());  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: try {  	var workerPool = new FdbWorkerPool (location);  	Console.WriteLine ("workerPool at " + location.Key.ToAsciiOrHexaString ());  	var workerSignal = new AsyncCancelableMutex (ct);  	var clientSignal = new AsyncCancelableMutex (ct);  	int taskCounter = 0;  	int msgSent = 0;  	int msgReceived = 0;  	Func<FdbWorkerMessage' CancellationToken' Task> handler = async (msg' _ct) => {  		Interlocked.Increment (ref msgReceived);  		//await Task.Delay(10 + Math.Abs(msg.Id.GetHashCode()) % 50);  		await Task.Delay (10).ConfigureAwait (false);  	};  	Func<int' Task> worker = async id => {  		await workerSignal.Task.ConfigureAwait (false);  		Console.WriteLine ("Worker #" + id + " is starting");  		try {  			await workerPool.RunWorkerAsync (db' handler' ct).ConfigureAwait (false);  		} finally {  			Console.WriteLine ("Worker #" + id + " has stopped");  		}  	};  	Func<int' Task> client = async id => {  		await clientSignal.Task.ConfigureAwait (false);  		await Task.Delay (10).ConfigureAwait (false);  		var rnd = new Random (id * 111);  		for (int i = 0; i < N; i++) {  			var taskId = Slice.FromString ("T" + Interlocked.Increment (ref taskCounter));  			var taskBody = Slice.FromString ("Message " + (i + 1) + " of " + N + " from client #" + id);  			await workerPool.ScheduleTaskAsync (db' taskId' taskBody' ct).ConfigureAwait (false);  			Interlocked.Increment (ref msgSent);  			//if (i > 0 && i % 10 == 0) Console.WriteLine("@@@ Client#" + id + " pushed " + (i + 1) + " / " + N + " messages");  			switch (rnd.Next (5)) {  			case 0:  				await Task.Delay (10).ConfigureAwait (false);  				break;  			case 1:  				await Task.Delay (100).ConfigureAwait (false);  				break;  			case 2:  				await Task.Delay (500).ConfigureAwait (false);  				break;  			}  		}  		Console.WriteLine ("@@@ Client#" + id + " has finished!");  	};  	Func<string' Task> dump = async label => {  		Console.WriteLine ("<dump label='" + label + "' key='" + location.Key.ToAsciiOrHexaString () + "'>");  		using (var tr = db.BeginTransaction (ct)) {  			await tr.Snapshot.GetRange (FdbKeyRange.StartsWith (location.Key)).ForEachAsync (kvp => {  				Console.WriteLine (" - " + location.Keys.Unpack (kvp.Key) + " = " + kvp.Value.ToAsciiOrHexaString ());  			}).ConfigureAwait (false);  		}  		Console.WriteLine ("</dump>");  	};  	var workers = Enumerable.Range (0' W).Select (i => worker (i)).ToArray ();  	var clients = Enumerable.Range (0' K).Select (i => client (i)).ToArray ();  	DateTime start = DateTime.Now;  	DateTime last = start;  	int lastHandled = -1;  	using (var timer = new Timer (_ => {  		var now = DateTime.Now;  		Console.WriteLine ("@@@ T=" + now.Subtract (start) + "' sent: " + msgSent.ToString ("N0") + "' recv: " + msgReceived.ToString ("N0"));  		Console.WriteLine ("### Workers: " + workerPool.IdleWorkers + " / " + workerPool.ActiveWorkers + " (" + new string ('#'' workerPool.IdleWorkers) + new string ('.'' workerPool.ActiveWorkers - workerPool.IdleWorkers) + ")' sent: " + workerPool.MessageScheduled.ToString ("N0") + "' recv: " + workerPool.MessageReceived.ToString ("N0") + "' delta: " + (workerPool.MessageScheduled - workerPool.MessageReceived).ToString ("N0") + "' busy: " + workerPool.WorkerBusyTime + " (avg " + workerPool.WorkerAverageBusyDuration.TotalMilliseconds.ToString ("N3") + " ms)");  		if (now.Subtract (last).TotalSeconds >= 10) {  			//dump("timer").GetAwaiter().GetResult();  			last = now;  			if (lastHandled == msgReceived) {  				// STALL ?  				Console.WriteLine ("STALL! ");  				done ();  			}  			lastHandled = msgReceived;  		}  		if (msgReceived >= K * N) {  			dump ("complete").GetAwaiter ().GetResult ();  			done ();  		}  	}' null' 1000' 1000)) {  		var sw = Stopwatch.StartNew ();  		// start the workers  		workerSignal.Set (async: true);  		await Task.Delay (500);  		await dump ("workers started");  		// start the clients  		clientSignal.Set (async: true);  		await Task.WhenAll (clients);  		Console.WriteLine ("Clients completed after " + sw.Elapsed);  		await Task.WhenAll (workers);  		Console.WriteLine ("Workers completed after " + sw.Elapsed);  	}  } finally {  	Console.WriteLine ("---------------------------------------------------------------------------");  	Console.WriteLine ("Transaction logs:");  	Console.WriteLine ();  	Console.WriteLine (sb.ToString ());  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: try {  	var workerPool = new FdbWorkerPool (location);  	Console.WriteLine ("workerPool at " + location.Key.ToAsciiOrHexaString ());  	var workerSignal = new AsyncCancelableMutex (ct);  	var clientSignal = new AsyncCancelableMutex (ct);  	int taskCounter = 0;  	int msgSent = 0;  	int msgReceived = 0;  	Func<FdbWorkerMessage' CancellationToken' Task> handler = async (msg' _ct) => {  		Interlocked.Increment (ref msgReceived);  		//await Task.Delay(10 + Math.Abs(msg.Id.GetHashCode()) % 50);  		await Task.Delay (10).ConfigureAwait (false);  	};  	Func<int' Task> worker = async id => {  		await workerSignal.Task.ConfigureAwait (false);  		Console.WriteLine ("Worker #" + id + " is starting");  		try {  			await workerPool.RunWorkerAsync (db' handler' ct).ConfigureAwait (false);  		} finally {  			Console.WriteLine ("Worker #" + id + " has stopped");  		}  	};  	Func<int' Task> client = async id => {  		await clientSignal.Task.ConfigureAwait (false);  		await Task.Delay (10).ConfigureAwait (false);  		var rnd = new Random (id * 111);  		for (int i = 0; i < N; i++) {  			var taskId = Slice.FromString ("T" + Interlocked.Increment (ref taskCounter));  			var taskBody = Slice.FromString ("Message " + (i + 1) + " of " + N + " from client #" + id);  			await workerPool.ScheduleTaskAsync (db' taskId' taskBody' ct).ConfigureAwait (false);  			Interlocked.Increment (ref msgSent);  			//if (i > 0 && i % 10 == 0) Console.WriteLine("@@@ Client#" + id + " pushed " + (i + 1) + " / " + N + " messages");  			switch (rnd.Next (5)) {  			case 0:  				await Task.Delay (10).ConfigureAwait (false);  				break;  			case 1:  				await Task.Delay (100).ConfigureAwait (false);  				break;  			case 2:  				await Task.Delay (500).ConfigureAwait (false);  				break;  			}  		}  		Console.WriteLine ("@@@ Client#" + id + " has finished!");  	};  	Func<string' Task> dump = async label => {  		Console.WriteLine ("<dump label='" + label + "' key='" + location.Key.ToAsciiOrHexaString () + "'>");  		using (var tr = db.BeginTransaction (ct)) {  			await tr.Snapshot.GetRange (FdbKeyRange.StartsWith (location.Key)).ForEachAsync (kvp => {  				Console.WriteLine (" - " + location.Keys.Unpack (kvp.Key) + " = " + kvp.Value.ToAsciiOrHexaString ());  			}).ConfigureAwait (false);  		}  		Console.WriteLine ("</dump>");  	};  	var workers = Enumerable.Range (0' W).Select (i => worker (i)).ToArray ();  	var clients = Enumerable.Range (0' K).Select (i => client (i)).ToArray ();  	DateTime start = DateTime.Now;  	DateTime last = start;  	int lastHandled = -1;  	using (var timer = new Timer (_ => {  		var now = DateTime.Now;  		Console.WriteLine ("@@@ T=" + now.Subtract (start) + "' sent: " + msgSent.ToString ("N0") + "' recv: " + msgReceived.ToString ("N0"));  		Console.WriteLine ("### Workers: " + workerPool.IdleWorkers + " / " + workerPool.ActiveWorkers + " (" + new string ('#'' workerPool.IdleWorkers) + new string ('.'' workerPool.ActiveWorkers - workerPool.IdleWorkers) + ")' sent: " + workerPool.MessageScheduled.ToString ("N0") + "' recv: " + workerPool.MessageReceived.ToString ("N0") + "' delta: " + (workerPool.MessageScheduled - workerPool.MessageReceived).ToString ("N0") + "' busy: " + workerPool.WorkerBusyTime + " (avg " + workerPool.WorkerAverageBusyDuration.TotalMilliseconds.ToString ("N3") + " ms)");  		if (now.Subtract (last).TotalSeconds >= 10) {  			//dump("timer").GetAwaiter().GetResult();  			last = now;  			if (lastHandled == msgReceived) {  				// STALL ?  				Console.WriteLine ("STALL! ");  				done ();  			}  			lastHandled = msgReceived;  		}  		if (msgReceived >= K * N) {  			dump ("complete").GetAwaiter ().GetResult ();  			done ();  		}  	}' null' 1000' 1000)) {  		var sw = Stopwatch.StartNew ();  		// start the workers  		workerSignal.Set (async: true);  		await Task.Delay (500);  		await dump ("workers started");  		// start the clients  		clientSignal.Set (async: true);  		await Task.WhenAll (clients);  		Console.WriteLine ("Clients completed after " + sw.Elapsed);  		await Task.WhenAll (workers);  		Console.WriteLine ("Workers completed after " + sw.Elapsed);  	}  } finally {  	Console.WriteLine ("---------------------------------------------------------------------------");  	Console.WriteLine ("Transaction logs:");  	Console.WriteLine ();  	Console.WriteLine (sb.ToString ());  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: try {  	var workerPool = new FdbWorkerPool (location);  	Console.WriteLine ("workerPool at " + location.Key.ToAsciiOrHexaString ());  	var workerSignal = new AsyncCancelableMutex (ct);  	var clientSignal = new AsyncCancelableMutex (ct);  	int taskCounter = 0;  	int msgSent = 0;  	int msgReceived = 0;  	Func<FdbWorkerMessage' CancellationToken' Task> handler = async (msg' _ct) => {  		Interlocked.Increment (ref msgReceived);  		//await Task.Delay(10 + Math.Abs(msg.Id.GetHashCode()) % 50);  		await Task.Delay (10).ConfigureAwait (false);  	};  	Func<int' Task> worker = async id => {  		await workerSignal.Task.ConfigureAwait (false);  		Console.WriteLine ("Worker #" + id + " is starting");  		try {  			await workerPool.RunWorkerAsync (db' handler' ct).ConfigureAwait (false);  		} finally {  			Console.WriteLine ("Worker #" + id + " has stopped");  		}  	};  	Func<int' Task> client = async id => {  		await clientSignal.Task.ConfigureAwait (false);  		await Task.Delay (10).ConfigureAwait (false);  		var rnd = new Random (id * 111);  		for (int i = 0; i < N; i++) {  			var taskId = Slice.FromString ("T" + Interlocked.Increment (ref taskCounter));  			var taskBody = Slice.FromString ("Message " + (i + 1) + " of " + N + " from client #" + id);  			await workerPool.ScheduleTaskAsync (db' taskId' taskBody' ct).ConfigureAwait (false);  			Interlocked.Increment (ref msgSent);  			//if (i > 0 && i % 10 == 0) Console.WriteLine("@@@ Client#" + id + " pushed " + (i + 1) + " / " + N + " messages");  			switch (rnd.Next (5)) {  			case 0:  				await Task.Delay (10).ConfigureAwait (false);  				break;  			case 1:  				await Task.Delay (100).ConfigureAwait (false);  				break;  			case 2:  				await Task.Delay (500).ConfigureAwait (false);  				break;  			}  		}  		Console.WriteLine ("@@@ Client#" + id + " has finished!");  	};  	Func<string' Task> dump = async label => {  		Console.WriteLine ("<dump label='" + label + "' key='" + location.Key.ToAsciiOrHexaString () + "'>");  		using (var tr = db.BeginTransaction (ct)) {  			await tr.Snapshot.GetRange (FdbKeyRange.StartsWith (location.Key)).ForEachAsync (kvp => {  				Console.WriteLine (" - " + location.Keys.Unpack (kvp.Key) + " = " + kvp.Value.ToAsciiOrHexaString ());  			}).ConfigureAwait (false);  		}  		Console.WriteLine ("</dump>");  	};  	var workers = Enumerable.Range (0' W).Select (i => worker (i)).ToArray ();  	var clients = Enumerable.Range (0' K).Select (i => client (i)).ToArray ();  	DateTime start = DateTime.Now;  	DateTime last = start;  	int lastHandled = -1;  	using (var timer = new Timer (_ => {  		var now = DateTime.Now;  		Console.WriteLine ("@@@ T=" + now.Subtract (start) + "' sent: " + msgSent.ToString ("N0") + "' recv: " + msgReceived.ToString ("N0"));  		Console.WriteLine ("### Workers: " + workerPool.IdleWorkers + " / " + workerPool.ActiveWorkers + " (" + new string ('#'' workerPool.IdleWorkers) + new string ('.'' workerPool.ActiveWorkers - workerPool.IdleWorkers) + ")' sent: " + workerPool.MessageScheduled.ToString ("N0") + "' recv: " + workerPool.MessageReceived.ToString ("N0") + "' delta: " + (workerPool.MessageScheduled - workerPool.MessageReceived).ToString ("N0") + "' busy: " + workerPool.WorkerBusyTime + " (avg " + workerPool.WorkerAverageBusyDuration.TotalMilliseconds.ToString ("N3") + " ms)");  		if (now.Subtract (last).TotalSeconds >= 10) {  			//dump("timer").GetAwaiter().GetResult();  			last = now;  			if (lastHandled == msgReceived) {  				// STALL ?  				Console.WriteLine ("STALL! ");  				done ();  			}  			lastHandled = msgReceived;  		}  		if (msgReceived >= K * N) {  			dump ("complete").GetAwaiter ().GetResult ();  			done ();  		}  	}' null' 1000' 1000)) {  		var sw = Stopwatch.StartNew ();  		// start the workers  		workerSignal.Set (async: true);  		await Task.Delay (500);  		await dump ("workers started");  		// start the clients  		clientSignal.Set (async: true);  		await Task.WhenAll (clients);  		Console.WriteLine ("Clients completed after " + sw.Elapsed);  		await Task.WhenAll (workers);  		Console.WriteLine ("Workers completed after " + sw.Elapsed);  	}  } finally {  	Console.WriteLine ("---------------------------------------------------------------------------");  	Console.WriteLine ("Transaction logs:");  	Console.WriteLine ();  	Console.WriteLine (sb.ToString ());  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: try {  	var workerPool = new FdbWorkerPool (location);  	Console.WriteLine ("workerPool at " + location.Key.ToAsciiOrHexaString ());  	var workerSignal = new AsyncCancelableMutex (ct);  	var clientSignal = new AsyncCancelableMutex (ct);  	int taskCounter = 0;  	int msgSent = 0;  	int msgReceived = 0;  	Func<FdbWorkerMessage' CancellationToken' Task> handler = async (msg' _ct) => {  		Interlocked.Increment (ref msgReceived);  		//await Task.Delay(10 + Math.Abs(msg.Id.GetHashCode()) % 50);  		await Task.Delay (10).ConfigureAwait (false);  	};  	Func<int' Task> worker = async id => {  		await workerSignal.Task.ConfigureAwait (false);  		Console.WriteLine ("Worker #" + id + " is starting");  		try {  			await workerPool.RunWorkerAsync (db' handler' ct).ConfigureAwait (false);  		} finally {  			Console.WriteLine ("Worker #" + id + " has stopped");  		}  	};  	Func<int' Task> client = async id => {  		await clientSignal.Task.ConfigureAwait (false);  		await Task.Delay (10).ConfigureAwait (false);  		var rnd = new Random (id * 111);  		for (int i = 0; i < N; i++) {  			var taskId = Slice.FromString ("T" + Interlocked.Increment (ref taskCounter));  			var taskBody = Slice.FromString ("Message " + (i + 1) + " of " + N + " from client #" + id);  			await workerPool.ScheduleTaskAsync (db' taskId' taskBody' ct).ConfigureAwait (false);  			Interlocked.Increment (ref msgSent);  			//if (i > 0 && i % 10 == 0) Console.WriteLine("@@@ Client#" + id + " pushed " + (i + 1) + " / " + N + " messages");  			switch (rnd.Next (5)) {  			case 0:  				await Task.Delay (10).ConfigureAwait (false);  				break;  			case 1:  				await Task.Delay (100).ConfigureAwait (false);  				break;  			case 2:  				await Task.Delay (500).ConfigureAwait (false);  				break;  			}  		}  		Console.WriteLine ("@@@ Client#" + id + " has finished!");  	};  	Func<string' Task> dump = async label => {  		Console.WriteLine ("<dump label='" + label + "' key='" + location.Key.ToAsciiOrHexaString () + "'>");  		using (var tr = db.BeginTransaction (ct)) {  			await tr.Snapshot.GetRange (FdbKeyRange.StartsWith (location.Key)).ForEachAsync (kvp => {  				Console.WriteLine (" - " + location.Keys.Unpack (kvp.Key) + " = " + kvp.Value.ToAsciiOrHexaString ());  			}).ConfigureAwait (false);  		}  		Console.WriteLine ("</dump>");  	};  	var workers = Enumerable.Range (0' W).Select (i => worker (i)).ToArray ();  	var clients = Enumerable.Range (0' K).Select (i => client (i)).ToArray ();  	DateTime start = DateTime.Now;  	DateTime last = start;  	int lastHandled = -1;  	using (var timer = new Timer (_ => {  		var now = DateTime.Now;  		Console.WriteLine ("@@@ T=" + now.Subtract (start) + "' sent: " + msgSent.ToString ("N0") + "' recv: " + msgReceived.ToString ("N0"));  		Console.WriteLine ("### Workers: " + workerPool.IdleWorkers + " / " + workerPool.ActiveWorkers + " (" + new string ('#'' workerPool.IdleWorkers) + new string ('.'' workerPool.ActiveWorkers - workerPool.IdleWorkers) + ")' sent: " + workerPool.MessageScheduled.ToString ("N0") + "' recv: " + workerPool.MessageReceived.ToString ("N0") + "' delta: " + (workerPool.MessageScheduled - workerPool.MessageReceived).ToString ("N0") + "' busy: " + workerPool.WorkerBusyTime + " (avg " + workerPool.WorkerAverageBusyDuration.TotalMilliseconds.ToString ("N3") + " ms)");  		if (now.Subtract (last).TotalSeconds >= 10) {  			//dump("timer").GetAwaiter().GetResult();  			last = now;  			if (lastHandled == msgReceived) {  				// STALL ?  				Console.WriteLine ("STALL! ");  				done ();  			}  			lastHandled = msgReceived;  		}  		if (msgReceived >= K * N) {  			dump ("complete").GetAwaiter ().GetResult ();  			done ();  		}  	}' null' 1000' 1000)) {  		var sw = Stopwatch.StartNew ();  		// start the workers  		workerSignal.Set (async: true);  		await Task.Delay (500);  		await dump ("workers started");  		// start the clients  		clientSignal.Set (async: true);  		await Task.WhenAll (clients);  		Console.WriteLine ("Clients completed after " + sw.Elapsed);  		await Task.WhenAll (workers);  		Console.WriteLine ("Workers completed after " + sw.Elapsed);  	}  } finally {  	Console.WriteLine ("---------------------------------------------------------------------------");  	Console.WriteLine ("Transaction logs:");  	Console.WriteLine ();  	Console.WriteLine (sb.ToString ());  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: try {  	var workerPool = new FdbWorkerPool (location);  	Console.WriteLine ("workerPool at " + location.Key.ToAsciiOrHexaString ());  	var workerSignal = new AsyncCancelableMutex (ct);  	var clientSignal = new AsyncCancelableMutex (ct);  	int taskCounter = 0;  	int msgSent = 0;  	int msgReceived = 0;  	Func<FdbWorkerMessage' CancellationToken' Task> handler = async (msg' _ct) => {  		Interlocked.Increment (ref msgReceived);  		//await Task.Delay(10 + Math.Abs(msg.Id.GetHashCode()) % 50);  		await Task.Delay (10).ConfigureAwait (false);  	};  	Func<int' Task> worker = async id => {  		await workerSignal.Task.ConfigureAwait (false);  		Console.WriteLine ("Worker #" + id + " is starting");  		try {  			await workerPool.RunWorkerAsync (db' handler' ct).ConfigureAwait (false);  		} finally {  			Console.WriteLine ("Worker #" + id + " has stopped");  		}  	};  	Func<int' Task> client = async id => {  		await clientSignal.Task.ConfigureAwait (false);  		await Task.Delay (10).ConfigureAwait (false);  		var rnd = new Random (id * 111);  		for (int i = 0; i < N; i++) {  			var taskId = Slice.FromString ("T" + Interlocked.Increment (ref taskCounter));  			var taskBody = Slice.FromString ("Message " + (i + 1) + " of " + N + " from client #" + id);  			await workerPool.ScheduleTaskAsync (db' taskId' taskBody' ct).ConfigureAwait (false);  			Interlocked.Increment (ref msgSent);  			//if (i > 0 && i % 10 == 0) Console.WriteLine("@@@ Client#" + id + " pushed " + (i + 1) + " / " + N + " messages");  			switch (rnd.Next (5)) {  			case 0:  				await Task.Delay (10).ConfigureAwait (false);  				break;  			case 1:  				await Task.Delay (100).ConfigureAwait (false);  				break;  			case 2:  				await Task.Delay (500).ConfigureAwait (false);  				break;  			}  		}  		Console.WriteLine ("@@@ Client#" + id + " has finished!");  	};  	Func<string' Task> dump = async label => {  		Console.WriteLine ("<dump label='" + label + "' key='" + location.Key.ToAsciiOrHexaString () + "'>");  		using (var tr = db.BeginTransaction (ct)) {  			await tr.Snapshot.GetRange (FdbKeyRange.StartsWith (location.Key)).ForEachAsync (kvp => {  				Console.WriteLine (" - " + location.Keys.Unpack (kvp.Key) + " = " + kvp.Value.ToAsciiOrHexaString ());  			}).ConfigureAwait (false);  		}  		Console.WriteLine ("</dump>");  	};  	var workers = Enumerable.Range (0' W).Select (i => worker (i)).ToArray ();  	var clients = Enumerable.Range (0' K).Select (i => client (i)).ToArray ();  	DateTime start = DateTime.Now;  	DateTime last = start;  	int lastHandled = -1;  	using (var timer = new Timer (_ => {  		var now = DateTime.Now;  		Console.WriteLine ("@@@ T=" + now.Subtract (start) + "' sent: " + msgSent.ToString ("N0") + "' recv: " + msgReceived.ToString ("N0"));  		Console.WriteLine ("### Workers: " + workerPool.IdleWorkers + " / " + workerPool.ActiveWorkers + " (" + new string ('#'' workerPool.IdleWorkers) + new string ('.'' workerPool.ActiveWorkers - workerPool.IdleWorkers) + ")' sent: " + workerPool.MessageScheduled.ToString ("N0") + "' recv: " + workerPool.MessageReceived.ToString ("N0") + "' delta: " + (workerPool.MessageScheduled - workerPool.MessageReceived).ToString ("N0") + "' busy: " + workerPool.WorkerBusyTime + " (avg " + workerPool.WorkerAverageBusyDuration.TotalMilliseconds.ToString ("N3") + " ms)");  		if (now.Subtract (last).TotalSeconds >= 10) {  			//dump("timer").GetAwaiter().GetResult();  			last = now;  			if (lastHandled == msgReceived) {  				// STALL ?  				Console.WriteLine ("STALL! ");  				done ();  			}  			lastHandled = msgReceived;  		}  		if (msgReceived >= K * N) {  			dump ("complete").GetAwaiter ().GetResult ();  			done ();  		}  	}' null' 1000' 1000)) {  		var sw = Stopwatch.StartNew ();  		// start the workers  		workerSignal.Set (async: true);  		await Task.Delay (500);  		await dump ("workers started");  		// start the clients  		clientSignal.Set (async: true);  		await Task.WhenAll (clients);  		Console.WriteLine ("Clients completed after " + sw.Elapsed);  		await Task.WhenAll (workers);  		Console.WriteLine ("Workers completed after " + sw.Elapsed);  	}  } finally {  	Console.WriteLine ("---------------------------------------------------------------------------");  	Console.WriteLine ("Transaction logs:");  	Console.WriteLine ();  	Console.WriteLine (sb.ToString ());  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: try {  	var workerPool = new FdbWorkerPool (location);  	Console.WriteLine ("workerPool at " + location.Key.ToAsciiOrHexaString ());  	var workerSignal = new AsyncCancelableMutex (ct);  	var clientSignal = new AsyncCancelableMutex (ct);  	int taskCounter = 0;  	int msgSent = 0;  	int msgReceived = 0;  	Func<FdbWorkerMessage' CancellationToken' Task> handler = async (msg' _ct) => {  		Interlocked.Increment (ref msgReceived);  		//await Task.Delay(10 + Math.Abs(msg.Id.GetHashCode()) % 50);  		await Task.Delay (10).ConfigureAwait (false);  	};  	Func<int' Task> worker = async id => {  		await workerSignal.Task.ConfigureAwait (false);  		Console.WriteLine ("Worker #" + id + " is starting");  		try {  			await workerPool.RunWorkerAsync (db' handler' ct).ConfigureAwait (false);  		} finally {  			Console.WriteLine ("Worker #" + id + " has stopped");  		}  	};  	Func<int' Task> client = async id => {  		await clientSignal.Task.ConfigureAwait (false);  		await Task.Delay (10).ConfigureAwait (false);  		var rnd = new Random (id * 111);  		for (int i = 0; i < N; i++) {  			var taskId = Slice.FromString ("T" + Interlocked.Increment (ref taskCounter));  			var taskBody = Slice.FromString ("Message " + (i + 1) + " of " + N + " from client #" + id);  			await workerPool.ScheduleTaskAsync (db' taskId' taskBody' ct).ConfigureAwait (false);  			Interlocked.Increment (ref msgSent);  			//if (i > 0 && i % 10 == 0) Console.WriteLine("@@@ Client#" + id + " pushed " + (i + 1) + " / " + N + " messages");  			switch (rnd.Next (5)) {  			case 0:  				await Task.Delay (10).ConfigureAwait (false);  				break;  			case 1:  				await Task.Delay (100).ConfigureAwait (false);  				break;  			case 2:  				await Task.Delay (500).ConfigureAwait (false);  				break;  			}  		}  		Console.WriteLine ("@@@ Client#" + id + " has finished!");  	};  	Func<string' Task> dump = async label => {  		Console.WriteLine ("<dump label='" + label + "' key='" + location.Key.ToAsciiOrHexaString () + "'>");  		using (var tr = db.BeginTransaction (ct)) {  			await tr.Snapshot.GetRange (FdbKeyRange.StartsWith (location.Key)).ForEachAsync (kvp => {  				Console.WriteLine (" - " + location.Keys.Unpack (kvp.Key) + " = " + kvp.Value.ToAsciiOrHexaString ());  			}).ConfigureAwait (false);  		}  		Console.WriteLine ("</dump>");  	};  	var workers = Enumerable.Range (0' W).Select (i => worker (i)).ToArray ();  	var clients = Enumerable.Range (0' K).Select (i => client (i)).ToArray ();  	DateTime start = DateTime.Now;  	DateTime last = start;  	int lastHandled = -1;  	using (var timer = new Timer (_ => {  		var now = DateTime.Now;  		Console.WriteLine ("@@@ T=" + now.Subtract (start) + "' sent: " + msgSent.ToString ("N0") + "' recv: " + msgReceived.ToString ("N0"));  		Console.WriteLine ("### Workers: " + workerPool.IdleWorkers + " / " + workerPool.ActiveWorkers + " (" + new string ('#'' workerPool.IdleWorkers) + new string ('.'' workerPool.ActiveWorkers - workerPool.IdleWorkers) + ")' sent: " + workerPool.MessageScheduled.ToString ("N0") + "' recv: " + workerPool.MessageReceived.ToString ("N0") + "' delta: " + (workerPool.MessageScheduled - workerPool.MessageReceived).ToString ("N0") + "' busy: " + workerPool.WorkerBusyTime + " (avg " + workerPool.WorkerAverageBusyDuration.TotalMilliseconds.ToString ("N3") + " ms)");  		if (now.Subtract (last).TotalSeconds >= 10) {  			//dump("timer").GetAwaiter().GetResult();  			last = now;  			if (lastHandled == msgReceived) {  				// STALL ?  				Console.WriteLine ("STALL! ");  				done ();  			}  			lastHandled = msgReceived;  		}  		if (msgReceived >= K * N) {  			dump ("complete").GetAwaiter ().GetResult ();  			done ();  		}  	}' null' 1000' 1000)) {  		var sw = Stopwatch.StartNew ();  		// start the workers  		workerSignal.Set (async: true);  		await Task.Delay (500);  		await dump ("workers started");  		// start the clients  		clientSignal.Set (async: true);  		await Task.WhenAll (clients);  		Console.WriteLine ("Clients completed after " + sw.Elapsed);  		await Task.WhenAll (workers);  		Console.WriteLine ("Workers completed after " + sw.Elapsed);  	}  } finally {  	Console.WriteLine ("---------------------------------------------------------------------------");  	Console.WriteLine ("Transaction logs:");  	Console.WriteLine ();  	Console.WriteLine (sb.ToString ());  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: try {  	var workerPool = new FdbWorkerPool (location);  	Console.WriteLine ("workerPool at " + location.Key.ToAsciiOrHexaString ());  	var workerSignal = new AsyncCancelableMutex (ct);  	var clientSignal = new AsyncCancelableMutex (ct);  	int taskCounter = 0;  	int msgSent = 0;  	int msgReceived = 0;  	Func<FdbWorkerMessage' CancellationToken' Task> handler = async (msg' _ct) => {  		Interlocked.Increment (ref msgReceived);  		//await Task.Delay(10 + Math.Abs(msg.Id.GetHashCode()) % 50);  		await Task.Delay (10).ConfigureAwait (false);  	};  	Func<int' Task> worker = async id => {  		await workerSignal.Task.ConfigureAwait (false);  		Console.WriteLine ("Worker #" + id + " is starting");  		try {  			await workerPool.RunWorkerAsync (db' handler' ct).ConfigureAwait (false);  		} finally {  			Console.WriteLine ("Worker #" + id + " has stopped");  		}  	};  	Func<int' Task> client = async id => {  		await clientSignal.Task.ConfigureAwait (false);  		await Task.Delay (10).ConfigureAwait (false);  		var rnd = new Random (id * 111);  		for (int i = 0; i < N; i++) {  			var taskId = Slice.FromString ("T" + Interlocked.Increment (ref taskCounter));  			var taskBody = Slice.FromString ("Message " + (i + 1) + " of " + N + " from client #" + id);  			await workerPool.ScheduleTaskAsync (db' taskId' taskBody' ct).ConfigureAwait (false);  			Interlocked.Increment (ref msgSent);  			//if (i > 0 && i % 10 == 0) Console.WriteLine("@@@ Client#" + id + " pushed " + (i + 1) + " / " + N + " messages");  			switch (rnd.Next (5)) {  			case 0:  				await Task.Delay (10).ConfigureAwait (false);  				break;  			case 1:  				await Task.Delay (100).ConfigureAwait (false);  				break;  			case 2:  				await Task.Delay (500).ConfigureAwait (false);  				break;  			}  		}  		Console.WriteLine ("@@@ Client#" + id + " has finished!");  	};  	Func<string' Task> dump = async label => {  		Console.WriteLine ("<dump label='" + label + "' key='" + location.Key.ToAsciiOrHexaString () + "'>");  		using (var tr = db.BeginTransaction (ct)) {  			await tr.Snapshot.GetRange (FdbKeyRange.StartsWith (location.Key)).ForEachAsync (kvp => {  				Console.WriteLine (" - " + location.Keys.Unpack (kvp.Key) + " = " + kvp.Value.ToAsciiOrHexaString ());  			}).ConfigureAwait (false);  		}  		Console.WriteLine ("</dump>");  	};  	var workers = Enumerable.Range (0' W).Select (i => worker (i)).ToArray ();  	var clients = Enumerable.Range (0' K).Select (i => client (i)).ToArray ();  	DateTime start = DateTime.Now;  	DateTime last = start;  	int lastHandled = -1;  	using (var timer = new Timer (_ => {  		var now = DateTime.Now;  		Console.WriteLine ("@@@ T=" + now.Subtract (start) + "' sent: " + msgSent.ToString ("N0") + "' recv: " + msgReceived.ToString ("N0"));  		Console.WriteLine ("### Workers: " + workerPool.IdleWorkers + " / " + workerPool.ActiveWorkers + " (" + new string ('#'' workerPool.IdleWorkers) + new string ('.'' workerPool.ActiveWorkers - workerPool.IdleWorkers) + ")' sent: " + workerPool.MessageScheduled.ToString ("N0") + "' recv: " + workerPool.MessageReceived.ToString ("N0") + "' delta: " + (workerPool.MessageScheduled - workerPool.MessageReceived).ToString ("N0") + "' busy: " + workerPool.WorkerBusyTime + " (avg " + workerPool.WorkerAverageBusyDuration.TotalMilliseconds.ToString ("N3") + " ms)");  		if (now.Subtract (last).TotalSeconds >= 10) {  			//dump("timer").GetAwaiter().GetResult();  			last = now;  			if (lastHandled == msgReceived) {  				// STALL ?  				Console.WriteLine ("STALL! ");  				done ();  			}  			lastHandled = msgReceived;  		}  		if (msgReceived >= K * N) {  			dump ("complete").GetAwaiter ().GetResult ();  			done ();  		}  	}' null' 1000' 1000)) {  		var sw = Stopwatch.StartNew ();  		// start the workers  		workerSignal.Set (async: true);  		await Task.Delay (500);  		await dump ("workers started");  		// start the clients  		clientSignal.Set (async: true);  		await Task.WhenAll (clients);  		Console.WriteLine ("Clients completed after " + sw.Elapsed);  		await Task.WhenAll (workers);  		Console.WriteLine ("Workers completed after " + sw.Elapsed);  	}  } finally {  	Console.WriteLine ("---------------------------------------------------------------------------");  	Console.WriteLine ("Transaction logs:");  	Console.WriteLine ();  	Console.WriteLine (sb.ToString ());  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: try {  	var workerPool = new FdbWorkerPool (location);  	Console.WriteLine ("workerPool at " + location.Key.ToAsciiOrHexaString ());  	var workerSignal = new AsyncCancelableMutex (ct);  	var clientSignal = new AsyncCancelableMutex (ct);  	int taskCounter = 0;  	int msgSent = 0;  	int msgReceived = 0;  	Func<FdbWorkerMessage' CancellationToken' Task> handler = async (msg' _ct) => {  		Interlocked.Increment (ref msgReceived);  		//await Task.Delay(10 + Math.Abs(msg.Id.GetHashCode()) % 50);  		await Task.Delay (10).ConfigureAwait (false);  	};  	Func<int' Task> worker = async id => {  		await workerSignal.Task.ConfigureAwait (false);  		Console.WriteLine ("Worker #" + id + " is starting");  		try {  			await workerPool.RunWorkerAsync (db' handler' ct).ConfigureAwait (false);  		} finally {  			Console.WriteLine ("Worker #" + id + " has stopped");  		}  	};  	Func<int' Task> client = async id => {  		await clientSignal.Task.ConfigureAwait (false);  		await Task.Delay (10).ConfigureAwait (false);  		var rnd = new Random (id * 111);  		for (int i = 0; i < N; i++) {  			var taskId = Slice.FromString ("T" + Interlocked.Increment (ref taskCounter));  			var taskBody = Slice.FromString ("Message " + (i + 1) + " of " + N + " from client #" + id);  			await workerPool.ScheduleTaskAsync (db' taskId' taskBody' ct).ConfigureAwait (false);  			Interlocked.Increment (ref msgSent);  			//if (i > 0 && i % 10 == 0) Console.WriteLine("@@@ Client#" + id + " pushed " + (i + 1) + " / " + N + " messages");  			switch (rnd.Next (5)) {  			case 0:  				await Task.Delay (10).ConfigureAwait (false);  				break;  			case 1:  				await Task.Delay (100).ConfigureAwait (false);  				break;  			case 2:  				await Task.Delay (500).ConfigureAwait (false);  				break;  			}  		}  		Console.WriteLine ("@@@ Client#" + id + " has finished!");  	};  	Func<string' Task> dump = async label => {  		Console.WriteLine ("<dump label='" + label + "' key='" + location.Key.ToAsciiOrHexaString () + "'>");  		using (var tr = db.BeginTransaction (ct)) {  			await tr.Snapshot.GetRange (FdbKeyRange.StartsWith (location.Key)).ForEachAsync (kvp => {  				Console.WriteLine (" - " + location.Keys.Unpack (kvp.Key) + " = " + kvp.Value.ToAsciiOrHexaString ());  			}).ConfigureAwait (false);  		}  		Console.WriteLine ("</dump>");  	};  	var workers = Enumerable.Range (0' W).Select (i => worker (i)).ToArray ();  	var clients = Enumerable.Range (0' K).Select (i => client (i)).ToArray ();  	DateTime start = DateTime.Now;  	DateTime last = start;  	int lastHandled = -1;  	using (var timer = new Timer (_ => {  		var now = DateTime.Now;  		Console.WriteLine ("@@@ T=" + now.Subtract (start) + "' sent: " + msgSent.ToString ("N0") + "' recv: " + msgReceived.ToString ("N0"));  		Console.WriteLine ("### Workers: " + workerPool.IdleWorkers + " / " + workerPool.ActiveWorkers + " (" + new string ('#'' workerPool.IdleWorkers) + new string ('.'' workerPool.ActiveWorkers - workerPool.IdleWorkers) + ")' sent: " + workerPool.MessageScheduled.ToString ("N0") + "' recv: " + workerPool.MessageReceived.ToString ("N0") + "' delta: " + (workerPool.MessageScheduled - workerPool.MessageReceived).ToString ("N0") + "' busy: " + workerPool.WorkerBusyTime + " (avg " + workerPool.WorkerAverageBusyDuration.TotalMilliseconds.ToString ("N3") + " ms)");  		if (now.Subtract (last).TotalSeconds >= 10) {  			//dump("timer").GetAwaiter().GetResult();  			last = now;  			if (lastHandled == msgReceived) {  				// STALL ?  				Console.WriteLine ("STALL! ");  				done ();  			}  			lastHandled = msgReceived;  		}  		if (msgReceived >= K * N) {  			dump ("complete").GetAwaiter ().GetResult ();  			done ();  		}  	}' null' 1000' 1000)) {  		var sw = Stopwatch.StartNew ();  		// start the workers  		workerSignal.Set (async: true);  		await Task.Delay (500);  		await dump ("workers started");  		// start the clients  		clientSignal.Set (async: true);  		await Task.WhenAll (clients);  		Console.WriteLine ("Clients completed after " + sw.Elapsed);  		await Task.WhenAll (workers);  		Console.WriteLine ("Workers completed after " + sw.Elapsed);  	}  } finally {  	Console.WriteLine ("---------------------------------------------------------------------------");  	Console.WriteLine ("Transaction logs:");  	Console.WriteLine ();  	Console.WriteLine (sb.ToString ());  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: try {  	var workerPool = new FdbWorkerPool (location);  	Console.WriteLine ("workerPool at " + location.Key.ToAsciiOrHexaString ());  	var workerSignal = new AsyncCancelableMutex (ct);  	var clientSignal = new AsyncCancelableMutex (ct);  	int taskCounter = 0;  	int msgSent = 0;  	int msgReceived = 0;  	Func<FdbWorkerMessage' CancellationToken' Task> handler = async (msg' _ct) => {  		Interlocked.Increment (ref msgReceived);  		//await Task.Delay(10 + Math.Abs(msg.Id.GetHashCode()) % 50);  		await Task.Delay (10).ConfigureAwait (false);  	};  	Func<int' Task> worker = async id => {  		await workerSignal.Task.ConfigureAwait (false);  		Console.WriteLine ("Worker #" + id + " is starting");  		try {  			await workerPool.RunWorkerAsync (db' handler' ct).ConfigureAwait (false);  		} finally {  			Console.WriteLine ("Worker #" + id + " has stopped");  		}  	};  	Func<int' Task> client = async id => {  		await clientSignal.Task.ConfigureAwait (false);  		await Task.Delay (10).ConfigureAwait (false);  		var rnd = new Random (id * 111);  		for (int i = 0; i < N; i++) {  			var taskId = Slice.FromString ("T" + Interlocked.Increment (ref taskCounter));  			var taskBody = Slice.FromString ("Message " + (i + 1) + " of " + N + " from client #" + id);  			await workerPool.ScheduleTaskAsync (db' taskId' taskBody' ct).ConfigureAwait (false);  			Interlocked.Increment (ref msgSent);  			//if (i > 0 && i % 10 == 0) Console.WriteLine("@@@ Client#" + id + " pushed " + (i + 1) + " / " + N + " messages");  			switch (rnd.Next (5)) {  			case 0:  				await Task.Delay (10).ConfigureAwait (false);  				break;  			case 1:  				await Task.Delay (100).ConfigureAwait (false);  				break;  			case 2:  				await Task.Delay (500).ConfigureAwait (false);  				break;  			}  		}  		Console.WriteLine ("@@@ Client#" + id + " has finished!");  	};  	Func<string' Task> dump = async label => {  		Console.WriteLine ("<dump label='" + label + "' key='" + location.Key.ToAsciiOrHexaString () + "'>");  		using (var tr = db.BeginTransaction (ct)) {  			await tr.Snapshot.GetRange (FdbKeyRange.StartsWith (location.Key)).ForEachAsync (kvp => {  				Console.WriteLine (" - " + location.Keys.Unpack (kvp.Key) + " = " + kvp.Value.ToAsciiOrHexaString ());  			}).ConfigureAwait (false);  		}  		Console.WriteLine ("</dump>");  	};  	var workers = Enumerable.Range (0' W).Select (i => worker (i)).ToArray ();  	var clients = Enumerable.Range (0' K).Select (i => client (i)).ToArray ();  	DateTime start = DateTime.Now;  	DateTime last = start;  	int lastHandled = -1;  	using (var timer = new Timer (_ => {  		var now = DateTime.Now;  		Console.WriteLine ("@@@ T=" + now.Subtract (start) + "' sent: " + msgSent.ToString ("N0") + "' recv: " + msgReceived.ToString ("N0"));  		Console.WriteLine ("### Workers: " + workerPool.IdleWorkers + " / " + workerPool.ActiveWorkers + " (" + new string ('#'' workerPool.IdleWorkers) + new string ('.'' workerPool.ActiveWorkers - workerPool.IdleWorkers) + ")' sent: " + workerPool.MessageScheduled.ToString ("N0") + "' recv: " + workerPool.MessageReceived.ToString ("N0") + "' delta: " + (workerPool.MessageScheduled - workerPool.MessageReceived).ToString ("N0") + "' busy: " + workerPool.WorkerBusyTime + " (avg " + workerPool.WorkerAverageBusyDuration.TotalMilliseconds.ToString ("N3") + " ms)");  		if (now.Subtract (last).TotalSeconds >= 10) {  			//dump("timer").GetAwaiter().GetResult();  			last = now;  			if (lastHandled == msgReceived) {  				// STALL ?  				Console.WriteLine ("STALL! ");  				done ();  			}  			lastHandled = msgReceived;  		}  		if (msgReceived >= K * N) {  			dump ("complete").GetAwaiter ().GetResult ();  			done ();  		}  	}' null' 1000' 1000)) {  		var sw = Stopwatch.StartNew ();  		// start the workers  		workerSignal.Set (async: true);  		await Task.Delay (500);  		await dump ("workers started");  		// start the clients  		clientSignal.Set (async: true);  		await Task.WhenAll (clients);  		Console.WriteLine ("Clients completed after " + sw.Elapsed);  		await Task.WhenAll (workers);  		Console.WriteLine ("Workers completed after " + sw.Elapsed);  	}  } finally {  	Console.WriteLine ("---------------------------------------------------------------------------");  	Console.WriteLine ("Transaction logs:");  	Console.WriteLine ();  	Console.WriteLine (sb.ToString ());  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: try {  	var workerPool = new FdbWorkerPool (location);  	Console.WriteLine ("workerPool at " + location.Key.ToAsciiOrHexaString ());  	var workerSignal = new AsyncCancelableMutex (ct);  	var clientSignal = new AsyncCancelableMutex (ct);  	int taskCounter = 0;  	int msgSent = 0;  	int msgReceived = 0;  	Func<FdbWorkerMessage' CancellationToken' Task> handler = async (msg' _ct) => {  		Interlocked.Increment (ref msgReceived);  		//await Task.Delay(10 + Math.Abs(msg.Id.GetHashCode()) % 50);  		await Task.Delay (10).ConfigureAwait (false);  	};  	Func<int' Task> worker = async id => {  		await workerSignal.Task.ConfigureAwait (false);  		Console.WriteLine ("Worker #" + id + " is starting");  		try {  			await workerPool.RunWorkerAsync (db' handler' ct).ConfigureAwait (false);  		} finally {  			Console.WriteLine ("Worker #" + id + " has stopped");  		}  	};  	Func<int' Task> client = async id => {  		await clientSignal.Task.ConfigureAwait (false);  		await Task.Delay (10).ConfigureAwait (false);  		var rnd = new Random (id * 111);  		for (int i = 0; i < N; i++) {  			var taskId = Slice.FromString ("T" + Interlocked.Increment (ref taskCounter));  			var taskBody = Slice.FromString ("Message " + (i + 1) + " of " + N + " from client #" + id);  			await workerPool.ScheduleTaskAsync (db' taskId' taskBody' ct).ConfigureAwait (false);  			Interlocked.Increment (ref msgSent);  			//if (i > 0 && i % 10 == 0) Console.WriteLine("@@@ Client#" + id + " pushed " + (i + 1) + " / " + N + " messages");  			switch (rnd.Next (5)) {  			case 0:  				await Task.Delay (10).ConfigureAwait (false);  				break;  			case 1:  				await Task.Delay (100).ConfigureAwait (false);  				break;  			case 2:  				await Task.Delay (500).ConfigureAwait (false);  				break;  			}  		}  		Console.WriteLine ("@@@ Client#" + id + " has finished!");  	};  	Func<string' Task> dump = async label => {  		Console.WriteLine ("<dump label='" + label + "' key='" + location.Key.ToAsciiOrHexaString () + "'>");  		using (var tr = db.BeginTransaction (ct)) {  			await tr.Snapshot.GetRange (FdbKeyRange.StartsWith (location.Key)).ForEachAsync (kvp => {  				Console.WriteLine (" - " + location.Keys.Unpack (kvp.Key) + " = " + kvp.Value.ToAsciiOrHexaString ());  			}).ConfigureAwait (false);  		}  		Console.WriteLine ("</dump>");  	};  	var workers = Enumerable.Range (0' W).Select (i => worker (i)).ToArray ();  	var clients = Enumerable.Range (0' K).Select (i => client (i)).ToArray ();  	DateTime start = DateTime.Now;  	DateTime last = start;  	int lastHandled = -1;  	using (var timer = new Timer (_ => {  		var now = DateTime.Now;  		Console.WriteLine ("@@@ T=" + now.Subtract (start) + "' sent: " + msgSent.ToString ("N0") + "' recv: " + msgReceived.ToString ("N0"));  		Console.WriteLine ("### Workers: " + workerPool.IdleWorkers + " / " + workerPool.ActiveWorkers + " (" + new string ('#'' workerPool.IdleWorkers) + new string ('.'' workerPool.ActiveWorkers - workerPool.IdleWorkers) + ")' sent: " + workerPool.MessageScheduled.ToString ("N0") + "' recv: " + workerPool.MessageReceived.ToString ("N0") + "' delta: " + (workerPool.MessageScheduled - workerPool.MessageReceived).ToString ("N0") + "' busy: " + workerPool.WorkerBusyTime + " (avg " + workerPool.WorkerAverageBusyDuration.TotalMilliseconds.ToString ("N3") + " ms)");  		if (now.Subtract (last).TotalSeconds >= 10) {  			//dump("timer").GetAwaiter().GetResult();  			last = now;  			if (lastHandled == msgReceived) {  				// STALL ?  				Console.WriteLine ("STALL! ");  				done ();  			}  			lastHandled = msgReceived;  		}  		if (msgReceived >= K * N) {  			dump ("complete").GetAwaiter ().GetResult ();  			done ();  		}  	}' null' 1000' 1000)) {  		var sw = Stopwatch.StartNew ();  		// start the workers  		workerSignal.Set (async: true);  		await Task.Delay (500);  		await dump ("workers started");  		// start the clients  		clientSignal.Set (async: true);  		await Task.WhenAll (clients);  		Console.WriteLine ("Clients completed after " + sw.Elapsed);  		await Task.WhenAll (workers);  		Console.WriteLine ("Workers completed after " + sw.Elapsed);  	}  } finally {  	Console.WriteLine ("---------------------------------------------------------------------------");  	Console.WriteLine ("Transaction logs:");  	Console.WriteLine ();  	Console.WriteLine (sb.ToString ());  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: await Task.Delay (10).ConfigureAwait (false);  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: await Task.Delay (10).ConfigureAwait (false);  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: for (int i = 0; i < N; i++) {  	var taskId = Slice.FromString ("T" + Interlocked.Increment (ref taskCounter));  	var taskBody = Slice.FromString ("Message " + (i + 1) + " of " + N + " from client #" + id);  	await workerPool.ScheduleTaskAsync (db' taskId' taskBody' ct).ConfigureAwait (false);  	Interlocked.Increment (ref msgSent);  	//if (i > 0 && i % 10 == 0) Console.WriteLine("@@@ Client#" + id + " pushed " + (i + 1) + " / " + N + " messages");  	switch (rnd.Next (5)) {  	case 0:  		await Task.Delay (10).ConfigureAwait (false);  		break;  	case 1:  		await Task.Delay (100).ConfigureAwait (false);  		break;  	case 2:  		await Task.Delay (500).ConfigureAwait (false);  		break;  	}  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: for (int i = 0; i < N; i++) {  	var taskId = Slice.FromString ("T" + Interlocked.Increment (ref taskCounter));  	var taskBody = Slice.FromString ("Message " + (i + 1) + " of " + N + " from client #" + id);  	await workerPool.ScheduleTaskAsync (db' taskId' taskBody' ct).ConfigureAwait (false);  	Interlocked.Increment (ref msgSent);  	//if (i > 0 && i % 10 == 0) Console.WriteLine("@@@ Client#" + id + " pushed " + (i + 1) + " / " + N + " messages");  	switch (rnd.Next (5)) {  	case 0:  		await Task.Delay (10).ConfigureAwait (false);  		break;  	case 1:  		await Task.Delay (100).ConfigureAwait (false);  		break;  	case 2:  		await Task.Delay (500).ConfigureAwait (false);  		break;  	}  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: for (int i = 0; i < N; i++) {  	var taskId = Slice.FromString ("T" + Interlocked.Increment (ref taskCounter));  	var taskBody = Slice.FromString ("Message " + (i + 1) + " of " + N + " from client #" + id);  	await workerPool.ScheduleTaskAsync (db' taskId' taskBody' ct).ConfigureAwait (false);  	Interlocked.Increment (ref msgSent);  	//if (i > 0 && i % 10 == 0) Console.WriteLine("@@@ Client#" + id + " pushed " + (i + 1) + " / " + N + " messages");  	switch (rnd.Next (5)) {  	case 0:  		await Task.Delay (10).ConfigureAwait (false);  		break;  	case 1:  		await Task.Delay (100).ConfigureAwait (false);  		break;  	case 2:  		await Task.Delay (500).ConfigureAwait (false);  		break;  	}  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: for (int i = 0; i < N; i++) {  	var taskId = Slice.FromString ("T" + Interlocked.Increment (ref taskCounter));  	var taskBody = Slice.FromString ("Message " + (i + 1) + " of " + N + " from client #" + id);  	await workerPool.ScheduleTaskAsync (db' taskId' taskBody' ct).ConfigureAwait (false);  	Interlocked.Increment (ref msgSent);  	//if (i > 0 && i % 10 == 0) Console.WriteLine("@@@ Client#" + id + " pushed " + (i + 1) + " / " + N + " messages");  	switch (rnd.Next (5)) {  	case 0:  		await Task.Delay (10).ConfigureAwait (false);  		break;  	case 1:  		await Task.Delay (100).ConfigureAwait (false);  		break;  	case 2:  		await Task.Delay (500).ConfigureAwait (false);  		break;  	}  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: for (int i = 0; i < N; i++) {  	var taskId = Slice.FromString ("T" + Interlocked.Increment (ref taskCounter));  	var taskBody = Slice.FromString ("Message " + (i + 1) + " of " + N + " from client #" + id);  	await workerPool.ScheduleTaskAsync (db' taskId' taskBody' ct).ConfigureAwait (false);  	Interlocked.Increment (ref msgSent);  	//if (i > 0 && i % 10 == 0) Console.WriteLine("@@@ Client#" + id + " pushed " + (i + 1) + " / " + N + " messages");  	switch (rnd.Next (5)) {  	case 0:  		await Task.Delay (10).ConfigureAwait (false);  		break;  	case 1:  		await Task.Delay (100).ConfigureAwait (false);  		break;  	case 2:  		await Task.Delay (500).ConfigureAwait (false);  		break;  	}  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: switch (rnd.Next (5)) {  case 0:  	await Task.Delay (10).ConfigureAwait (false);  	break;  case 1:  	await Task.Delay (100).ConfigureAwait (false);  	break;  case 2:  	await Task.Delay (500).ConfigureAwait (false);  	break;  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: switch (rnd.Next (5)) {  case 0:  	await Task.Delay (10).ConfigureAwait (false);  	break;  case 1:  	await Task.Delay (100).ConfigureAwait (false);  	break;  case 2:  	await Task.Delay (500).ConfigureAwait (false);  	break;  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: switch (rnd.Next (5)) {  case 0:  	await Task.Delay (10).ConfigureAwait (false);  	break;  case 1:  	await Task.Delay (100).ConfigureAwait (false);  	break;  case 2:  	await Task.Delay (500).ConfigureAwait (false);  	break;  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: switch (rnd.Next (5)) {  case 0:  	await Task.Delay (10).ConfigureAwait (false);  	break;  case 1:  	await Task.Delay (100).ConfigureAwait (false);  	break;  case 2:  	await Task.Delay (500).ConfigureAwait (false);  	break;  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: switch (rnd.Next (5)) {  case 0:  	await Task.Delay (10).ConfigureAwait (false);  	break;  case 1:  	await Task.Delay (100).ConfigureAwait (false);  	break;  case 2:  	await Task.Delay (500).ConfigureAwait (false);  	break;  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: await Task.Delay (10).ConfigureAwait (false);  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: await Task.Delay (100).ConfigureAwait (false);  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: await Task.Delay (500).ConfigureAwait (false);  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: using (var timer = new Timer (_ => {  	var now = DateTime.Now;  	Console.WriteLine ("@@@ T=" + now.Subtract (start) + "' sent: " + msgSent.ToString ("N0") + "' recv: " + msgReceived.ToString ("N0"));  	Console.WriteLine ("### Workers: " + workerPool.IdleWorkers + " / " + workerPool.ActiveWorkers + " (" + new string ('#'' workerPool.IdleWorkers) + new string ('.'' workerPool.ActiveWorkers - workerPool.IdleWorkers) + ")' sent: " + workerPool.MessageScheduled.ToString ("N0") + "' recv: " + workerPool.MessageReceived.ToString ("N0") + "' delta: " + (workerPool.MessageScheduled - workerPool.MessageReceived).ToString ("N0") + "' busy: " + workerPool.WorkerBusyTime + " (avg " + workerPool.WorkerAverageBusyDuration.TotalMilliseconds.ToString ("N3") + " ms)");  	if (now.Subtract (last).TotalSeconds >= 10) {  		//dump("timer").GetAwaiter().GetResult();  		last = now;  		if (lastHandled == msgReceived) {  			// STALL ?  			Console.WriteLine ("STALL! ");  			done ();  		}  		lastHandled = msgReceived;  	}  	if (msgReceived >= K * N) {  		dump ("complete").GetAwaiter ().GetResult ();  		done ();  	}  }' null' 1000' 1000)) {  	var sw = Stopwatch.StartNew ();  	// start the workers  	workerSignal.Set (async: true);  	await Task.Delay (500);  	await dump ("workers started");  	// start the clients  	clientSignal.Set (async: true);  	await Task.WhenAll (clients);  	Console.WriteLine ("Clients completed after " + sw.Elapsed);  	await Task.WhenAll (workers);  	Console.WriteLine ("Workers completed after " + sw.Elapsed);  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: using (var timer = new Timer (_ => {  	var now = DateTime.Now;  	Console.WriteLine ("@@@ T=" + now.Subtract (start) + "' sent: " + msgSent.ToString ("N0") + "' recv: " + msgReceived.ToString ("N0"));  	Console.WriteLine ("### Workers: " + workerPool.IdleWorkers + " / " + workerPool.ActiveWorkers + " (" + new string ('#'' workerPool.IdleWorkers) + new string ('.'' workerPool.ActiveWorkers - workerPool.IdleWorkers) + ")' sent: " + workerPool.MessageScheduled.ToString ("N0") + "' recv: " + workerPool.MessageReceived.ToString ("N0") + "' delta: " + (workerPool.MessageScheduled - workerPool.MessageReceived).ToString ("N0") + "' busy: " + workerPool.WorkerBusyTime + " (avg " + workerPool.WorkerAverageBusyDuration.TotalMilliseconds.ToString ("N3") + " ms)");  	if (now.Subtract (last).TotalSeconds >= 10) {  		//dump("timer").GetAwaiter().GetResult();  		last = now;  		if (lastHandled == msgReceived) {  			// STALL ?  			Console.WriteLine ("STALL! ");  			done ();  		}  		lastHandled = msgReceived;  	}  	if (msgReceived >= K * N) {  		dump ("complete").GetAwaiter ().GetResult ();  		done ();  	}  }' null' 1000' 1000)) {  	var sw = Stopwatch.StartNew ();  	// start the workers  	workerSignal.Set (async: true);  	await Task.Delay (500);  	await dump ("workers started");  	// start the clients  	clientSignal.Set (async: true);  	await Task.WhenAll (clients);  	Console.WriteLine ("Clients completed after " + sw.Elapsed);  	await Task.WhenAll (workers);  	Console.WriteLine ("Workers completed after " + sw.Elapsed);  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: using (var timer = new Timer (_ => {  	var now = DateTime.Now;  	Console.WriteLine ("@@@ T=" + now.Subtract (start) + "' sent: " + msgSent.ToString ("N0") + "' recv: " + msgReceived.ToString ("N0"));  	Console.WriteLine ("### Workers: " + workerPool.IdleWorkers + " / " + workerPool.ActiveWorkers + " (" + new string ('#'' workerPool.IdleWorkers) + new string ('.'' workerPool.ActiveWorkers - workerPool.IdleWorkers) + ")' sent: " + workerPool.MessageScheduled.ToString ("N0") + "' recv: " + workerPool.MessageReceived.ToString ("N0") + "' delta: " + (workerPool.MessageScheduled - workerPool.MessageReceived).ToString ("N0") + "' busy: " + workerPool.WorkerBusyTime + " (avg " + workerPool.WorkerAverageBusyDuration.TotalMilliseconds.ToString ("N3") + " ms)");  	if (now.Subtract (last).TotalSeconds >= 10) {  		//dump("timer").GetAwaiter().GetResult();  		last = now;  		if (lastHandled == msgReceived) {  			// STALL ?  			Console.WriteLine ("STALL! ");  			done ();  		}  		lastHandled = msgReceived;  	}  	if (msgReceived >= K * N) {  		dump ("complete").GetAwaiter ().GetResult ();  		done ();  	}  }' null' 1000' 1000)) {  	var sw = Stopwatch.StartNew ();  	// start the workers  	workerSignal.Set (async: true);  	await Task.Delay (500);  	await dump ("workers started");  	// start the clients  	clientSignal.Set (async: true);  	await Task.WhenAll (clients);  	Console.WriteLine ("Clients completed after " + sw.Elapsed);  	await Task.WhenAll (workers);  	Console.WriteLine ("Workers completed after " + sw.Elapsed);  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: using (var timer = new Timer (_ => {  	var now = DateTime.Now;  	Console.WriteLine ("@@@ T=" + now.Subtract (start) + "' sent: " + msgSent.ToString ("N0") + "' recv: " + msgReceived.ToString ("N0"));  	Console.WriteLine ("### Workers: " + workerPool.IdleWorkers + " / " + workerPool.ActiveWorkers + " (" + new string ('#'' workerPool.IdleWorkers) + new string ('.'' workerPool.ActiveWorkers - workerPool.IdleWorkers) + ")' sent: " + workerPool.MessageScheduled.ToString ("N0") + "' recv: " + workerPool.MessageReceived.ToString ("N0") + "' delta: " + (workerPool.MessageScheduled - workerPool.MessageReceived).ToString ("N0") + "' busy: " + workerPool.WorkerBusyTime + " (avg " + workerPool.WorkerAverageBusyDuration.TotalMilliseconds.ToString ("N3") + " ms)");  	if (now.Subtract (last).TotalSeconds >= 10) {  		//dump("timer").GetAwaiter().GetResult();  		last = now;  		if (lastHandled == msgReceived) {  			// STALL ?  			Console.WriteLine ("STALL! ");  			done ();  		}  		lastHandled = msgReceived;  	}  	if (msgReceived >= K * N) {  		dump ("complete").GetAwaiter ().GetResult ();  		done ();  	}  }' null' 1000' 1000)) {  	var sw = Stopwatch.StartNew ();  	// start the workers  	workerSignal.Set (async: true);  	await Task.Delay (500);  	await dump ("workers started");  	// start the clients  	clientSignal.Set (async: true);  	await Task.WhenAll (clients);  	Console.WriteLine ("Clients completed after " + sw.Elapsed);  	await Task.WhenAll (workers);  	Console.WriteLine ("Workers completed after " + sw.Elapsed);  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: if (now.Subtract (last).TotalSeconds >= 10) {  	//dump("timer").GetAwaiter().GetResult();  	last = now;  	if (lastHandled == msgReceived) {  		// STALL ?  		Console.WriteLine ("STALL! ");  		done ();  	}  	lastHandled = msgReceived;  }  
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: await Task.Delay (500);  
Missing Default,FoundationDB.Layers.Messaging,WorkerPoolTest,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following switch statement is missing a default case: switch (rnd.Next (5)) {  case 0:  	await Task.Delay (10).ConfigureAwait (false);  	break;  case 1:  	await Task.Delay (100).ConfigureAwait (false);  	break;  case 2:  	await Task.Delay (500).ConfigureAwait (false);  	break;  }  
