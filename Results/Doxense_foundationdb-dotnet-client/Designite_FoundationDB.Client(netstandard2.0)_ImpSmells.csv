Implementation smell,Namespace,Class,File,Method,Description
Long Method,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RunBatchedInsertOperationAsync,The method has 119 lines of code.
Long Method,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RunBatchedReadOperationAsync,The method has 164 lines of code.
Long Method,FoundationDB.Client,System,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.System.cs,EstimateCountAsync,The method has 119 lines of code.
Long Method,FoundationDB.Client,FdbOperationContext,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbOperationContext.cs,ExecuteInternal,The method has 121 lines of code.
Long Method,FoundationDB.Filters.Logging,FdbTransactionLog,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetTimingsReport,The method has 135 lines of code.
Long Method,Doxense.Runtime.Converters,TypeConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\TypeConverters.cs,RegisterDefaultConverters,The method has 272 lines of code.
Long Method,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseNext,The method has 103 lines of code.
Long Method,Doxense.Collections.Tuples,Parser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,ParseExpression,The method has 101 lines of code.
Long Method,FoundationDB.Client.Utils,TinyJsonParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Utils\TinyJsonParser.cs,ReadToken,The method has 125 lines of code.
Complex Method,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,StopEventLoop,Cyclomatic complexity of the method is 11
Complex Method,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,OpenInternalAsync,Cyclomatic complexity of the method is 8
Complex Method,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,Start,Cyclomatic complexity of the method is 22
Complex Method,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RunInsertOperationAsync,Cyclomatic complexity of the method is 10
Complex Method,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RetryChunk,Cyclomatic complexity of the method is 8
Complex Method,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RunBatchedInsertOperationAsync,Cyclomatic complexity of the method is 12
Complex Method,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RunBatchedReadOperationAsync,Cyclomatic complexity of the method is 20
Complex Method,FoundationDB.Client,System,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.System.cs,EstimateCountAsync,Cyclomatic complexity of the method is 10
Complex Method,FoundationDB.Client,FdbDatabase,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbDatabase.cs,ValidateKey,Cyclomatic complexity of the method is 9
Complex Method,FoundationDB.Client,FdbKey,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbKey.cs,PrettyPrint,Cyclomatic complexity of the method is 8
Complex Method,FoundationDB.Client,FdbKey,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbKey.cs,PrettyPrint,Cyclomatic complexity of the method is 8
Complex Method,FoundationDB.Client,FdbOperationContext,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbOperationContext.cs,ExecuteInternal,Cyclomatic complexity of the method is 15
Complex Method,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,EnsureMutationTypeIsSupported,Cyclomatic complexity of the method is 16
Complex Method,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,Cancel,Cyclomatic complexity of the method is 8
Complex Method,FoundationDB.Filters.Logging,FdbTransactionLog,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetTimingsReport,Cyclomatic complexity of the method is 22
Complex Method,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,CreateOrOpenInternalAsync,Cyclomatic complexity of the method is 22
Complex Method,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,MoveInternalAsync,Cyclomatic complexity of the method is 13
Complex Method,FoundationDB.Layers.Directories,FdbDirectoryPath,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryPath.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,FoundationDB.Layers.Directories,FdbHighContentionAllocator,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbHighContentionAllocator.cs,AllocateAsync,Cyclomatic complexity of the method is 8
Complex Method,FoundationDB.Client.Native,FdbFutureArray<T>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbFutureArray.cs,HandleCompletion,Cyclomatic complexity of the method is 9
Complex Method,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,FutureGetKeyValueArray,Cyclomatic complexity of the method is 8
Complex Method,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,FutureGetKeyValueArrayKeysOnly,Cyclomatic complexity of the method is 8
Complex Method,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,FutureGetKeyValueArrayValuesOnly,Cyclomatic complexity of the method is 11
Complex Method,Doxense.Async,AsyncTaskBuffer<T>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Async\AsyncTaskBuffer.cs,ReceiveAsync,Cyclomatic complexity of the method is 10
Complex Method,Doxense.Runtime.Converters,ComparisonHelper,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\ComparisonHelper.cs,TryAdaptToDecimal,Cyclomatic complexity of the method is 9
Complex Method,Doxense.Runtime.Converters,ComparisonHelper,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\ComparisonHelper.cs,TryAdaptToInteger,Cyclomatic complexity of the method is 9
Complex Method,Doxense.Runtime.Converters,ComparisonHelper,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\ComparisonHelper.cs,CreateTypeComparator,Cyclomatic complexity of the method is 17
Complex Method,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ConcatRange,Cyclomatic complexity of the method is 8
Complex Method,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Join,Cyclomatic complexity of the method is 10
Complex Method,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,JoinBytes,Cyclomatic complexity of the method is 10
Complex Method,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Split,Cyclomatic complexity of the method is 9
Complex Method,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,EscapeString,Cyclomatic complexity of the method is 9
Complex Method,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,PrettyPrint,Cyclomatic complexity of the method is 12
Complex Method,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,TryParse,Cyclomatic complexity of the method is 9
Complex Method,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,ToString,Cyclomatic complexity of the method is 11
Complex Method,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,ToString,Cyclomatic complexity of the method is 8
Complex Method,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,ToString,Cyclomatic complexity of the method is 8
Complex Method,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Encode16,Cyclomatic complexity of the method is 8
Complex Method,Doxense.Linq.Async.Iterators,ExceptAsyncIterator<TSource;TKey;TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\ExceptAsyncIterator.cs,FindNext,Cyclomatic complexity of the method is 8
Complex Method,Doxense.Linq.Async.Iterators,IntersectAsyncIterator<TSource;TKey;TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\IntersectAsyncIterator.cs,FindNext,Cyclomatic complexity of the method is 12
Complex Method,Doxense.Linq.Async.Iterators,PrefetchingAsyncIterator<TInput>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\PrefetchingAsyncIterator.cs,PrefetchNextItemsAsync,Cyclomatic complexity of the method is 8
Complex Method,Doxense.Linq.Async.Iterators,SelectManyAsyncIterator<TSource;TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\SelectManyAsyncIterator.cs,OnNextAsync,Cyclomatic complexity of the method is 8
Complex Method,Doxense.Linq.Async.Iterators,SelectManyAsyncIterator<TSource;TCollection;TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\SelectManyAsyncIterator.cs,OnNextAsync,Cyclomatic complexity of the method is 8
Complex Method,Doxense.Linq.Async.Iterators,WhereAsyncIterator<TSource>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\WhereAsyncIterator.cs,ExecuteAsync,Cyclomatic complexity of the method is 8
Complex Method,Doxense.Linq.Async.Iterators,WhereSelectAsyncIterator<TSource;TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\WhereSelectAsyncIterator.cs,OnNextAsync,Cyclomatic complexity of the method is 12
Complex Method,Doxense.Linq.Async.Iterators,WhereSelectAsyncIterator<TSource;TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\WhereSelectAsyncIterator.cs,ExecuteAsync,Cyclomatic complexity of the method is 10
Complex Method,Doxense.Linq.Async.Iterators,WhereSelectAsyncIterator<TSource;TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\WhereSelectAsyncIterator.cs,ExecuteAsync,Cyclomatic complexity of the method is 10
Complex Method,Doxense.Memory,SliceListStream,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceListStream.cs,Seek,Cyclomatic complexity of the method is 9
Complex Method,Doxense.Memory,SliceListStream,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceListStream.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteBase10Slow,Cyclomatic complexity of the method is 8
Complex Method,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfVarIntSlow,Cyclomatic complexity of the method is 9
Complex Method,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint32Slow,Cyclomatic complexity of the method is 10
Complex Method,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Unsafe,Cyclomatic complexity of the method is 11
Complex Method,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Slow,Cyclomatic complexity of the method is 20
Complex Method,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,Cyclomatic complexity of the method is 8
Complex Method,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,IsAsciiString,Cyclomatic complexity of the method is 9
Complex Method,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,IsAsciiBytes,Cyclomatic complexity of the method is 12
Complex Method,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,ToBoolean,Cyclomatic complexity of the method is 9
Complex Method,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,ToBoolean,Cyclomatic complexity of the method is 9
Complex Method,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,FastTryGetInt,Cyclomatic complexity of the method is 11
Complex Method,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,FastTryGetLong,Cyclomatic complexity of the method is 11
Complex Method,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,Cyclomatic complexity of the method is 29
Complex Method,Doxense.Collections.Tuples.Encoding,TupleEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,DecodeKey,Cyclomatic complexity of the method is 8
Complex Method,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,GetSerializerFor,Cyclomatic complexity of the method is 11
Complex Method,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,DeserializeBoxed,Cyclomatic complexity of the method is 20
Complex Method,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,DeserializeSlice,Cyclomatic complexity of the method is 11
Complex Method,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,DeserializeBoolean,Cyclomatic complexity of the method is 9
Complex Method,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,DeserializeChar,Cyclomatic complexity of the method is 9
Complex Method,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,DeserializeString,Cyclomatic complexity of the method is 10
Complex Method,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseNext,Cyclomatic complexity of the method is 21
Complex Method,Doxense.Collections.Tuples.Encoding,TupleTypes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleTypes.cs,DecodeSegmentType,Cyclomatic complexity of the method is 15
Complex Method,Doxense.Collections.Tuples,JoinedTuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\JoinedTuple.cs,Equals,Cyclomatic complexity of the method is 9
Complex Method,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,FromArray,Cyclomatic complexity of the method is 8
Complex Method,Doxense.Collections.Tuples,Formatter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Stringify,Cyclomatic complexity of the method is 17
Complex Method,Doxense.Collections.Tuples,Formatter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,StringifyBoxed,Cyclomatic complexity of the method is 15
Complex Method,Doxense.Collections.Tuples,Parser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,ParseExpression,Cyclomatic complexity of the method is 20
Complex Method,Doxense.Collections.Tuples,Parser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,ReadNumberLiteral,Cyclomatic complexity of the method is 20
Complex Method,Doxense.Collections.Tuples,Parser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,ReadStringLiteral,Cyclomatic complexity of the method is 15
Complex Method,Doxense.Collections.Tuples,CompositeComparer<T1;T2;T3>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleComparisons.cs,Compare,Cyclomatic complexity of the method is 8
Complex Method,Doxense.Serialization.Encoders,BinaryEncoding,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\BinaryEncoding.cs,GetValueEncoder,Cyclomatic complexity of the method is 11
Complex Method,FoundationDB.Client.Utils,TinyJsonParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Utils\TinyJsonParser.cs,ReadToken,Cyclomatic complexity of the method is 29
Complex Method,FoundationDB.Client.Utils,TinyJsonParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Utils\TinyJsonParser.cs,ReadStringLiteral,Cyclomatic complexity of the method is 18
Long Parameter List,FoundationDB.Client.Core,IFdbTransactionHandler,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Core\IFdbTransactionHandler.cs,GetRangeAsync,The method has 6 parameters. Parameters: beginInclusive' endExclusive' options' iteration' snapshot' ct
Long Parameter List,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,InsertAsync,The method has 5 parameters. Parameters: db' source' handler' options' ct
Long Parameter List,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,InsertAsync,The method has 5 parameters. Parameters: db' source' handler' options' ct
Long Parameter List,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RunInsertOperationAsync,The method has 5 parameters. Parameters: db' source' body' options' ct
Long Parameter List,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RetryChunk,The method has 6 parameters. Parameters: trans' chunk' offset' count' bodyAsync' bodyBlocking
Long Parameter List,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,InsertBatchedAsync,The method has 5 parameters. Parameters: db' source' handler' options' ct
Long Parameter List,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,InsertBatchedAsync,The method has 5 parameters. Parameters: db' source' handler' options' ct
Long Parameter List,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RunBatchedInsertOperationAsync,The method has 5 parameters. Parameters: db' source' body' options' ct
Long Parameter List,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RetryChunk,The method has 6 parameters. Parameters: trans' chunk' offset' count' bodyAsync' bodyBlocking
Long Parameter List,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,ForEachAsync,The method has 6 parameters. Parameters: db' source' localInit' body' localFinally' ct
Long Parameter List,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,ForEachAsync,The method has 6 parameters. Parameters: db' source' localInit' body' localFinally' ct
Long Parameter List,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,AggregateAsync,The method has 5 parameters. Parameters: db' source' localInit' body' ct
Long Parameter List,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,AggregateAsync,The method has 6 parameters. Parameters: db' source' init' body' transform' ct
Long Parameter List,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RunBatchedReadOperationAsync,The method has 7 parameters. Parameters: db' source' localInit' body' localFinally' initialBatchSize' ct
Long Parameter List,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,ExportAsync,The method has 5 parameters. Parameters: db' beginInclusive' endExclusive' handler' ct
Long Parameter List,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,ExportAsync,The method has 5 parameters. Parameters: db' begin' end' handler' ct
Long Parameter List,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,FetchNextBatchAsync,The method has 5 parameters. Parameters: tr' begin' end' options' onReset
Long Parameter List,FoundationDB.Client,System,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.System.cs,EstimateCountAsync,The method has 5 parameters. Parameters: db' beginInclusive' endExclusive' onProgress' ct
Long Parameter List,FoundationDB.Client,FdbDatabase,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbDatabase.cs,ValidateKey,The method has 5 parameters. Parameters: database' key' endExclusive' ignoreError' error
Long Parameter List,FoundationDB.Client,FdbDatabase,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbDatabase.cs,ValidateKey,The method has 5 parameters. Parameters: database' key' endExclusive' ignoreError' error
Long Parameter List,FoundationDB.Client,FdbDatabaseExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbDatabaseExtensions.cs,GetRangeAsync,The method has 6 parameters. Parameters: db' beginInclusive' endExclusive' options' iteration' ct
Long Parameter List,FoundationDB.Client,FdbMergeQueryExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbMergeQueryExtensions.cs,MergeSort,The method has 5 parameters. Parameters: trans' ranges' keySelector' resultSelector' keyComparer
Long Parameter List,FoundationDB.Client,FdbMergeQueryExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbMergeQueryExtensions.cs,Intersect,The method has 5 parameters. Parameters: trans' ranges' keySelector' resultSelector' keyComparer
Long Parameter List,FoundationDB.Client,FdbMergeQueryExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbMergeQueryExtensions.cs,Except,The method has 5 parameters. Parameters: trans' ranges' keySelector' resultSelector' keyComparer
Long Parameter List,FoundationDB.Client,FdbMergeQueryExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbMergeQueryExtensions.cs,Except,The method has 5 parameters. Parameters: trans' ranges' keySelector' resultSelector' keyComparer
Long Parameter List,FoundationDB.Client,FdbRangeChunk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbRangeChunk.cs,FdbRangeChunk,The method has 7 parameters. Parameters: items' hasMore' iteration' reversed' readMode' first' last
Long Parameter List,FoundationDB.Client,FdbRangeOptions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbRangeOptions.cs,FdbRangeOptions,The method has 5 parameters. Parameters: limit' reverse' targetBytes' mode' read
Long Parameter List,FoundationDB.Client,FdbRangeOptions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbRangeOptions.cs,EnsureDefaults,The method has 6 parameters. Parameters: options' limit' targetBytes' mode' read' reverse
Long Parameter List,FoundationDB.Client,FdbRangeQuery<T>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbRangeQuery.cs,FdbRangeQuery,The method has 6 parameters. Parameters: transaction' begin' end' transform' snapshot' options
Long Parameter List,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,FdbTransaction,The method has 5 parameters. Parameters: db' context' id' handler' mode
Long Parameter List,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,GetRangeCore,The method has 5 parameters. Parameters: begin' end' options' snapshot' selector
Long Parameter List,FoundationDB.Client,FdbTransactionExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransactionExtensions.cs,GetRange,The method has 5 parameters. Parameters: trans' beginInclusive' endExclusive' limit' reverse
Long Parameter List,FoundationDB.Client,FdbTransactionExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransactionExtensions.cs,GetRange,The method has 5 parameters. Parameters: trans' beginKeyInclusive' endKeyExclusive' limit' reverse
Long Parameter List,FoundationDB.Client,FdbTransactionExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransactionExtensions.cs,GetRange,The method has 5 parameters. Parameters: trans' beginKeyInclusive' endKeyExclusive' transform' options
Long Parameter List,FoundationDB.Client,FdbTransactionExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransactionExtensions.cs,GetRangeAsync,The method has 5 parameters. Parameters: trans' beginInclusive' endExclusive' options' iteration
Long Parameter List,FoundationDB.Client,DynamicKeyEncoderBase,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\DynamicKeyEncoderBase.cs,EncodeKey,The method has 5 parameters. Parameters: writer' item1' item2' item3' item4
Long Parameter List,FoundationDB.Client,DynamicKeyEncoderBase,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\DynamicKeyEncoderBase.cs,EncodeKey,The method has 6 parameters. Parameters: writer' item1' item2' item3' item4' item5
Long Parameter List,FoundationDB.Client,DynamicKeyEncoderBase,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\DynamicKeyEncoderBase.cs,EncodeKey,The method has 7 parameters. Parameters: writer' item1' item2' item3' item4' item5' item6
Long Parameter List,FoundationDB.Client,DynamicKeyEncoderBase,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\DynamicKeyEncoderBase.cs,EncodeKey,The method has 8 parameters. Parameters: writer' item1' item2' item3' item4' item5' item6' item7
Long Parameter List,FoundationDB.Client,DynamicKeyEncoderBase,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\DynamicKeyEncoderBase.cs,EncodeKey,The method has 9 parameters. Parameters: writer' item1' item2' item3' item4' item5' item6' item7' item8
Long Parameter List,FoundationDB.Client,DynamicKeyEncoderBase,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\DynamicKeyEncoderBase.cs,ToKeyRange,The method has 5 parameters. Parameters: prefix' item1' item2' item3' item4
Long Parameter List,FoundationDB.Client,DynamicKeyEncoderBase,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\DynamicKeyEncoderBase.cs,ToKeyRange,The method has 6 parameters. Parameters: prefix' item1' item2' item3' item4' item5
Long Parameter List,FoundationDB.Client,DynamicKeyEncoderBase,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\DynamicKeyEncoderBase.cs,ToKeyRange,The method has 7 parameters. Parameters: prefix' item1' item2' item3' item4' item5' item6
Long Parameter List,FoundationDB.Client,DynamicKeyEncoderBase,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\DynamicKeyEncoderBase.cs,ToKeyRange,The method has 8 parameters. Parameters: prefix' item1' item2' item3' item4' item5' item6' item7
Long Parameter List,FoundationDB.Client,DynamicKeyEncoderBase,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\DynamicKeyEncoderBase.cs,ToKeyRange,The method has 9 parameters. Parameters: prefix' item1' item2' item3' item4' item5' item6' item7' item8
Long Parameter List,FoundationDB.Client,DynamicKeys,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\DynamicKeySubspace.cs,EncodeRange,The method has 5 parameters. Parameters: item1' item2' item3' item4' item5
Long Parameter List,FoundationDB.Client,DynamicKeys,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\DynamicKeySubspace.cs,EncodeRange,The method has 6 parameters. Parameters: item1' item2' item3' item4' item5' item6
Long Parameter List,FoundationDB.Client,DynamicKeys,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\DynamicKeySubspace.cs,EncodeRange,The method has 7 parameters. Parameters: item1' item2' item3' item4' item5' item6' item7
Long Parameter List,FoundationDB.Client,DynamicKeys,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\DynamicKeySubspace.cs,EncodeRange,The method has 8 parameters. Parameters: item1' item2' item3' item4' item5' item6' item7' item8
Long Parameter List,FoundationDB.Client,DynamicKeys,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\DynamicKeySubspace.cs,Encode,The method has 5 parameters. Parameters: item1' item2' item3' item4' item5
Long Parameter List,FoundationDB.Client,DynamicKeys,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\DynamicKeySubspace.cs,Encode,The method has 6 parameters. Parameters: item1' item2' item3' item4' item5' item6
Long Parameter List,FoundationDB.Client,TypedKeys<T1;T2;T3;T4>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\TypedKeySubspace`4.cs,Decode,The method has 5 parameters. Parameters: packedKey' item1' item2' item3' item4
Long Parameter List,FoundationDB.Filters.Logging,FdbLoggedDatabase,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbLoggedDatabase.cs,FdbLoggedDatabase,The method has 5 parameters. Parameters: database' forceReadOnly' ownsDatabase' onCommitted' defaultOptions
Long Parameter List,FoundationDB.Filters.Logging,FdbLoggingExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbLoggingExtensions.cs,Annotate,The method has 5 parameters. Parameters: trans' format' arg0' arg1' arg2
Long Parameter List,FoundationDB.Filters.Logging,FdbTransactionLog,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetFancyChar,The method has 5 parameters. Parameters: pos' count' start' end' skip
Long Parameter List,FoundationDB.Filters.Logging,FdbTransactionLog,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetFancyGraph,The method has 5 parameters. Parameters: width' offset' duration' total' skip
Long Parameter List,FoundationDB.Layers.Directories,FdbDirectoryExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryExtensions.cs,CreateOrOpenAsync,The method has 5 parameters. Parameters: directory' db' path' layer' ct
Long Parameter List,FoundationDB.Layers.Directories,FdbDirectoryExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryExtensions.cs,TryCreateOrOpenAsync,The method has 5 parameters. Parameters: directory' trans' path' readOnly' layer
Long Parameter List,FoundationDB.Layers.Directories,FdbDirectoryExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryExtensions.cs,CreateAsync,The method has 5 parameters. Parameters: directory' db' path' layer' ct
Long Parameter List,FoundationDB.Layers.Directories,FdbDirectoryExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryExtensions.cs,TryCreateAsync,The method has 5 parameters. Parameters: directory' db' path' layer' ct
Long Parameter List,FoundationDB.Layers.Directories,FdbDirectoryExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryExtensions.cs,OpenAsync,The method has 5 parameters. Parameters: directory' db' path' layer' ct
Long Parameter List,FoundationDB.Layers.Directories,FdbDirectoryExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryExtensions.cs,TryOpenAsync,The method has 5 parameters. Parameters: directory' db' path' layer' ct
Long Parameter List,FoundationDB.Layers.Directories,FdbDirectoryExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryExtensions.cs,MoveAsync,The method has 5 parameters. Parameters: directory' db' oldPath' newPath' ct
Long Parameter List,FoundationDB.Layers.Directories,FdbDirectoryExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryExtensions.cs,TryMoveAsync,The method has 5 parameters. Parameters: directory' db' oldPath' newPath' ct
Long Parameter List,FoundationDB.Layers.Directories,FdbDirectoryExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryExtensions.cs,ChangeLayerAsync,The method has 5 parameters. Parameters: directory' db' path' newLayer' ct
Long Parameter List,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,CreateOrOpenInternalAsync,The method has 8 parameters. Parameters: readTrans' trans' path' layer' prefix' allowCreate' allowOpen' throwOnError
Long Parameter List,FoundationDB.Layers.Directories,FdbDirectoryPartition,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryPartition.cs,FdbDirectoryPartition,The method has 5 parameters. Parameters: location' relativeLocation' prefix' directoryLayer' keyEncoding
Long Parameter List,FoundationDB.Layers.Directories,FdbDirectorySubspace,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectorySubspace.cs,FdbDirectorySubspace,The method has 6 parameters. Parameters: location' relativeLocation' prefix' directoryLayer' layer' encoding
Long Parameter List,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,TransactionGetRange,The method has 9 parameters. Parameters: transaction' begin' end' limit' targetBytes' mode' iteration' snapshot' reverse
Long Parameter List,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,FutureGetKeyValueArrayValuesOnly,The method has 5 parameters. Parameters: future' result' more' first' last
Long Parameter List,FoundationDB.Client.Native,NativeMethods,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,fdb_transaction_get_key,The method has 6 parameters. Parameters: transaction' keyName' keyNameLength' orEqual' offset' snapshot
Long Parameter List,FoundationDB.Client.Native,NativeMethods,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,fdb_transaction_get_range,The method has 15 parameters. Parameters: transaction' beginKeyName' beginKeyNameLength' beginOrEqual' beginOffset' endKeyName' endKeyNameLength' endOrEqual' endOffset' limit' targetBytes' mode' iteration' snapshot' reverse
Long Parameter List,FoundationDB.Client.Native,NativeMethods,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,fdb_transaction_set,The method has 5 parameters. Parameters: transaction' keyName' keyNameLength' value' valueLength
Long Parameter List,FoundationDB.Client.Native,NativeMethods,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,fdb_transaction_clear_range,The method has 5 parameters. Parameters: transaction' beginKeyName' beginKeyNameLength' endKeyName' endKeyNameLength
Long Parameter List,FoundationDB.Client.Native,NativeMethods,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,fdb_transaction_atomic_op,The method has 6 parameters. Parameters: transaction' keyName' keyNameLength' param' paramLength' operationType
Long Parameter List,FoundationDB.Client.Native,NativeMethods,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,fdb_transaction_add_conflict_range,The method has 6 parameters. Parameters: transaction' beginKeyName' beginKeyNameLength' endKeyName' endKeyNameLength' type
Long Parameter List,FoundationDB.Client.Native,FdbNativeTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNativeTransaction.cs,GetRangeAsync,The method has 6 parameters. Parameters: begin' end' options' iteration' snapshot' ct
Long Parameter List,Doxense.Async,AsyncHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Async\AsyncHelpers.cs,TransformToListAsync,The method has 5 parameters. Parameters: source' transform' ct' maxConcurrency' scheduler
Long Parameter List,Doxense.Threading.Tasks,TaskHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Async\TaskHelpers.cs,Inline,The method has 5 parameters. Parameters: action' arg1' arg2' arg3' ct
Long Parameter List,Doxense.Threading.Tasks,TaskHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Async\TaskHelpers.cs,Inline,The method has 6 parameters. Parameters: action' arg1' arg2' arg3' arg4' ct
Long Parameter List,Doxense.Threading.Tasks,TaskHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Async\TaskHelpers.cs,Inline,The method has 7 parameters. Parameters: action' arg1' arg2' arg3' arg4' arg5' ct
Long Parameter List,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,Between,The method has 5 parameters. Parameters: value' minimumInclusive' maximumInclusive' paramName' message
Long Parameter List,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,Between,The method has 5 parameters. Parameters: value' minimumInclusive' maximumInclusive' paramName' message
Long Parameter List,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,Between,The method has 5 parameters. Parameters: value' minimumInclusive' maximumInclusive' paramName' message
Long Parameter List,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,Between,The method has 5 parameters. Parameters: value' minimumInclusive' maximumInclusive' paramName' message
Long Parameter List,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,Between,The method has 5 parameters. Parameters: value' minimumInclusive' maximumInclusive' paramName' message
Long Parameter List,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,Between,The method has 5 parameters. Parameters: value' minimumInclusive' maximumInclusive' paramName' message
Long Parameter List,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,ReportFailure,The method has 5 parameters. Parameters: exceptionType' msg' userMessage' paramName' conditionTxt
Long Parameter List,Doxense.Diagnostics.Contracts,ContractException,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\ContractException.cs,ContractException,The method has 5 parameters. Parameters: kind' failure' userMessage' condition' innerException
Long Parameter List,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Combine,The method has 5 parameters. Parameters: h1' h2' h3' h4' h5
Long Parameter List,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Combine,The method has 6 parameters. Parameters: h1' h2' h3' h4' h5' h6
Long Parameter List,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The method has 5 parameters. Parameters: a' b' c' d' e
Long Parameter List,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The method has 6 parameters. Parameters: a' b' c' d' e' f
Long Parameter List,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The method has 7 parameters. Parameters: a' b' c' d' e' f' g
Long Parameter List,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The method has 8 parameters. Parameters: a' b' c' d' e' f' g' h
Long Parameter List,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromStringUtf8,The method has 5 parameters. Parameters: value' offset' count' buffer' asciiOnly
Long Parameter List,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromStringUtf8,The method has 5 parameters. Parameters: value' offset' count' buffer' asciiOnly
Long Parameter List,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FormatHexaString,The method has 5 parameters. Parameters: buffer' offset' count' sep' lower
Long Parameter List,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,EscapeString,The method has 5 parameters. Parameters: sb' buffer' offset' count' encoding
Long Parameter List,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,Uuid128,The method has 11 parameters. Parameters: a' b' c' d' e' f' g' h' i' j' k
Long Parameter List,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,Uuid128,The method has 11 parameters. Parameters: a' b' c' d' e' f' g' h' i' j' k
Long Parameter List,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Uuid80,The method has 5 parameters. Parameters: a' b' c' d' e
Long Parameter List,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Encode16,The method has 5 parameters. Parameters: hi' lo' separator' quotes' upper
Long Parameter List,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Encode16,The method has 5 parameters. Parameters: hi' lo' separator' quotes' upper
Long Parameter List,Doxense.Linq,AsyncEnumerable,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.cs,ToDictionaryAsync,The method has 5 parameters. Parameters: source' keySelector' elementSelector' comparer' ct
Long Parameter List,Doxense.Linq,AsyncEnumerable,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.cs,AggregateAsync,The method has 5 parameters. Parameters: source' seed' aggregator' resultSelector' ct
Long Parameter List,Doxense.Linq,AsyncEnumerable,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.cs,AggregateAsync,The method has 5 parameters. Parameters: source' seed' aggregator' resultSelector' ct
Long Parameter List,Doxense.Linq,OrderedSequence<TSource;TKey>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.OrderedSequence.cs,OrderedSequence,The method has 5 parameters. Parameters: source' keySelector' comparer' descending' parent
Long Parameter List,Doxense.Linq.Async.Iterators,ExceptAsyncIterator<TSource;TKey;TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\ExceptAsyncIterator.cs,ExceptAsyncIterator,The method has 5 parameters. Parameters: sources' limit' keySelector' resultSelector' comparer
Long Parameter List,Doxense.Linq.Async.Iterators,IntersectAsyncIterator<TSource;TKey;TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\IntersectAsyncIterator.cs,IntersectAsyncIterator,The method has 5 parameters. Parameters: sources' limit' keySelector' resultSelector' comparer
Long Parameter List,Doxense.Linq.Async.Iterators,MergeAsyncIterator<TSource;TKey;TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\MergeAsyncIterator.cs,MergeAsyncIterator,The method has 5 parameters. Parameters: sources' limit' keySelector' resultSelector' comparer
Long Parameter List,Doxense.Linq.Async.Iterators,MergeSortAsyncIterator<TSource;TKey;TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\MergeSortAsyncIterator.cs,MergeSortAsyncIterator,The method has 5 parameters. Parameters: sources' limit' keySelector' resultSelector' comparer
Long Parameter List,Doxense.Linq.Async.Iterators,WhereSelectAsyncIterator<TSource;TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\WhereSelectAsyncIterator.cs,WhereSelectAsyncIterator,The method has 5 parameters. Parameters: source' filter' transform' limit' offset
Long Parameter List,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteBytes,The method has 5 parameters. Parameters: value1' value2' value3' value4' value5
Long Parameter List,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,UnsafeWriteBytes,The method has 5 parameters. Parameters: value1' value2' value3' value4' value5
Long Parameter List,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,FastTryGetInt,The method has 7 parameters. Parameters: buffer' offset' length' separator' defaultValue' result' newpos
Long Parameter List,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,FastTryGetLong,The method has 7 parameters. Parameters: buffer' offset' length' separator' defaultValue' result' newpos
Long Parameter List,Doxense.Collections.Tuples.Encoding,TupleEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,EncodeKey,The method has 5 parameters. Parameters: prefix' value1' value2' value3' value4
Long Parameter List,Doxense.Collections.Tuples.Encoding,TupleEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,EncodeKey,The method has 6 parameters. Parameters: prefix' value1' value2' value3' value4' value5
Long Parameter List,Doxense.Collections.Tuples.Encoding,TupleEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,EncodeKey,The method has 7 parameters. Parameters: prefix' value1' value2' value3' value4' value5' value6
Long Parameter List,Doxense.Collections.Tuples.Encoding,TupleEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,EncodeKey,The method has 8 parameters. Parameters: prefix' value1' value2' value3' value4' value5' value6' value7
Long Parameter List,Doxense.Collections.Tuples.Encoding,TupleEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,EncodeKey,The method has 9 parameters. Parameters: prefix' value1' value2' value3' value4' value5' value6' value7' value8
Long Parameter List,Doxense.Collections.Tuples.Encoding,TupleEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,WriteKeysTo,The method has 5 parameters. Parameters: writer' item1' item2' item3' item4
Long Parameter List,Doxense.Collections.Tuples.Encoding,TupleEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,WriteKeysTo,The method has 6 parameters. Parameters: writer' item1' item2' item3' item4' item5
Long Parameter List,Doxense.Collections.Tuples.Encoding,TupleEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,WriteKeysTo,The method has 7 parameters. Parameters: writer' item1' item2' item3' item4' item5' item6
Long Parameter List,Doxense.Collections.Tuples.Encoding,TupleEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,WriteKeysTo,The method has 8 parameters. Parameters: writer' item1' item2' item3' item4' item5' item6' item7
Long Parameter List,Doxense.Collections.Tuples.Encoding,TupleEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,WriteKeysTo,The method has 9 parameters. Parameters: writer' item1' item2' item3' item4' item5' item6' item7' item8
Long Parameter List,Doxense.Collections.Tuples.Encoding,TupleEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,DecodeKey,The method has 5 parameters. Parameters: reader' item1' item2' item3' item4
Long Parameter List,Doxense.Collections.Tuples.Encoding,TupleEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,DecodeKey,The method has 6 parameters. Parameters: reader' item1' item2' item3' item4' item5
Long Parameter List,Doxense.Collections.Tuples.Encoding,TupleKeyEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleKeyEncoder.cs,EncodeKey,The method has 5 parameters. Parameters: writer' item1' item2' item3' item4
Long Parameter List,Doxense.Collections.Tuples.Encoding,TupleKeyEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleKeyEncoder.cs,EncodeKey,The method has 6 parameters. Parameters: writer' item1' item2' item3' item4' item5
Long Parameter List,Doxense.Collections.Tuples.Encoding,TupleKeyEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleKeyEncoder.cs,EncodeKey,The method has 7 parameters. Parameters: writer' item1' item2' item3' item4' item5' item6
Long Parameter List,Doxense.Collections.Tuples.Encoding,TupleKeyEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleKeyEncoder.cs,EncodeKey,The method has 8 parameters. Parameters: writer' item1' item2' item3' item4' item5' item6' item7
Long Parameter List,Doxense.Collections.Tuples.Encoding,TupleKeyEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleKeyEncoder.cs,EncodeKey,The method has 9 parameters. Parameters: writer' item1' item2' item3' item4' item5' item6' item7' item8
Long Parameter List,Doxense.Collections.Tuples.Encoding,TupleKeyEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleKeyEncoder.cs,ToKeyRange,The method has 5 parameters. Parameters: prefix' item1' item2' item3' item4
Long Parameter List,Doxense.Collections.Tuples.Encoding,TupleKeyEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleKeyEncoder.cs,ToKeyRange,The method has 6 parameters. Parameters: prefix' item1' item2' item3' item4' item5
Long Parameter List,Doxense.Collections.Tuples.Encoding,TupleKeyEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleKeyEncoder.cs,ToKeyRange,The method has 7 parameters. Parameters: prefix' item1' item2' item3' item4' item5' item6
Long Parameter List,Doxense.Collections.Tuples.Encoding,TupleKeyEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleKeyEncoder.cs,ToKeyRange,The method has 8 parameters. Parameters: prefix' item1' item2' item3' item4' item5' item6' item7
Long Parameter List,Doxense.Collections.Tuples.Encoding,TupleKeyEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleKeyEncoder.cs,ToKeyRange,The method has 9 parameters. Parameters: prefix' item1' item2' item3' item4' item5' item6' item7' item8
Long Parameter List,Doxense.Collections.Tuples,TuPack,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuPack.cs,EncodeKey,The method has 5 parameters. Parameters: item1' item2' item3' item4' item5
Long Parameter List,Doxense.Collections.Tuples,TuPack,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuPack.cs,EncodeKey,The method has 6 parameters. Parameters: item1' item2' item3' item4' item5' item6
Long Parameter List,Doxense.Collections.Tuples,TuPack,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuPack.cs,EncodeKey,The method has 7 parameters. Parameters: item1' item2' item3' item4' item5' item6' item7
Long Parameter List,Doxense.Collections.Tuples,TuPack,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuPack.cs,EncodeKey,The method has 8 parameters. Parameters: item1' item2' item3' item4' item5' item6' item7' item8
Long Parameter List,Doxense.Collections.Tuples,TuPack,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuPack.cs,ToPrefixedKeyRange,The method has 5 parameters. Parameters: prefix' item1' item2' item3' item4
Long Parameter List,Doxense.Collections.Tuples,TuPack,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuPack.cs,ToKeyRange,The method has 5 parameters. Parameters: item1' item2' item3' item4' item5
Long Parameter List,Doxense.Collections.Tuples,TuPack,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuPack.cs,ToPrefixedKeyRange,The method has 6 parameters. Parameters: prefix' item1' item2' item3' item4' item5
Long Parameter List,Doxense.Collections.Tuples,TuPack,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuPack.cs,ToKeyRange,The method has 6 parameters. Parameters: item1' item2' item3' item4' item5' item6
Long Parameter List,Doxense.Collections.Tuples,TuPack,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuPack.cs,ToPrefixedKeyRange,The method has 7 parameters. Parameters: prefix' item1' item2' item3' item4' item5' item6
Long Parameter List,Doxense.Collections.Tuples,TuPack,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuPack.cs,ToKeyRange,The method has 7 parameters. Parameters: item1' item2' item3' item4' item5' item6' item7
Long Parameter List,Doxense.Collections.Tuples,TuPack,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuPack.cs,ToPrefixedKeyRange,The method has 8 parameters. Parameters: prefix' item1' item2' item3' item4' item5' item6' item7
Long Parameter List,Doxense.Collections.Tuples,TuPack,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuPack.cs,ToKeyRange,The method has 8 parameters. Parameters: item1' item2' item3' item4' item5' item6' item7' item8
Long Parameter List,Doxense.Collections.Tuples,TuPack,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuPack.cs,ToPrefixedKeyRange,The method has 9 parameters. Parameters: prefix' item1' item2' item3' item4' item5' item6' item7' item8
Long Parameter List,Doxense.Collections.Tuples,TuPack,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuPack.cs,EncodePrefixedKey,The method has 5 parameters. Parameters: prefix' value1' value2' value3' value4
Long Parameter List,Doxense.Collections.Tuples,TuPack,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuPack.cs,EncodePrefixedKey,The method has 6 parameters. Parameters: prefix' value1' value2' value3' value4' value5
Long Parameter List,Doxense.Collections.Tuples,TuPack,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuPack.cs,EncodePrefixedKey,The method has 7 parameters. Parameters: prefix' value1' value2' value3' value4' value5' value6
Long Parameter List,Doxense.Collections.Tuples,TuPack,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuPack.cs,EncodePrefixedKey,The method has 8 parameters. Parameters: prefix' value1' value2' value3' value4' value5' value6' value7
Long Parameter List,Doxense.Collections.Tuples,TuPack,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuPack.cs,EncodePrefixedKey,The method has 9 parameters. Parameters: prefix' value1' value2' value3' value4' value5' value6' value7' value8
Long Parameter List,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Create,The method has 5 parameters. Parameters: item1' item2' item3' item4' item5
Long Parameter List,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Create,The method has 6 parameters. Parameters: item1' item2' item3' item4' item5' item6
Long Parameter List,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,STuple,The method has 5 parameters. Parameters: item1' item2' item3' item4' item5
Long Parameter List,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Deconstruct,The method has 5 parameters. Parameters: item1' item2' item3' item4' item5
Long Parameter List,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,STuple,The method has 6 parameters. Parameters: item1' item2' item3' item4' item5' item6
Long Parameter List,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Deconstruct,The method has 6 parameters. Parameters: item1' item2' item3' item4' item5' item6
Long Parameter List,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Append,The method has 5 parameters. Parameters: tuple' value1' value2' value3' value4
Long Parameter List,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The method has 5 parameters. Parameters: value' item1' item2' item3' item4
Long Parameter List,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The method has 6 parameters. Parameters: value' item1' item2' item3' item4' item5
Long Parameter List,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The method has 7 parameters. Parameters: value' item1' item2' item3' item4' item5' item6
Long Parameter List,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The method has 8 parameters. Parameters: value' item1' item2' item3' item4' item5' item6' item7
Long Parameter List,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The method has 9 parameters. Parameters: value' item1' item2' item3' item4' item5' item6' item7' item8
Long Parameter List,Doxense.Serialization.Encoders,IDynamicKeyEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\IDynamicKeyEncoder.cs,EncodeKey,The method has 5 parameters. Parameters: writer' item1' item2' item3' item4
Long Parameter List,Doxense.Serialization.Encoders,IDynamicKeyEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\IDynamicKeyEncoder.cs,EncodeKey,The method has 6 parameters. Parameters: writer' item1' item2' item3' item4' item5
Long Parameter List,Doxense.Serialization.Encoders,IDynamicKeyEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\IDynamicKeyEncoder.cs,EncodeKey,The method has 7 parameters. Parameters: writer' item1' item2' item3' item4' item5' item6
Long Parameter List,Doxense.Serialization.Encoders,IDynamicKeyEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\IDynamicKeyEncoder.cs,EncodeKey,The method has 8 parameters. Parameters: writer' item1' item2' item3' item4' item5' item6' item7
Long Parameter List,Doxense.Serialization.Encoders,IDynamicKeyEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\IDynamicKeyEncoder.cs,EncodeKey,The method has 9 parameters. Parameters: writer' item1' item2' item3' item4' item5' item6' item7' item8
Long Parameter List,Doxense.Serialization.Encoders,IDynamicKeyEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\IDynamicKeyEncoder.cs,ToKeyRange,The method has 5 parameters. Parameters: prefix' item1' item2' item3' item4
Long Parameter List,Doxense.Serialization.Encoders,IDynamicKeyEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\IDynamicKeyEncoder.cs,ToKeyRange,The method has 6 parameters. Parameters: prefix' item1' item2' item3' item4' item5
Long Parameter List,Doxense.Serialization.Encoders,IDynamicKeyEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\IDynamicKeyEncoder.cs,ToKeyRange,The method has 7 parameters. Parameters: prefix' item1' item2' item3' item4' item5' item6
Long Parameter List,Doxense.Serialization.Encoders,IDynamicKeyEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\IDynamicKeyEncoder.cs,ToKeyRange,The method has 8 parameters. Parameters: prefix' item1' item2' item3' item4' item5' item6' item7
Long Parameter List,Doxense.Serialization.Encoders,IDynamicKeyEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\IDynamicKeyEncoder.cs,ToKeyRange,The method has 9 parameters. Parameters: prefix' item1' item2' item3' item4' item5' item6' item7' item8
Long Parameter List,Doxense.Serialization.Encoders,KeyEncoderExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\KeyEncoderExtensions.cs,WriteKeyTo,The method has 5 parameters. Parameters: encoder' writer' value1' value2' value3
Long Parameter List,Doxense.Serialization.Encoders,KeyEncoderExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\KeyEncoderExtensions.cs,EncodeKey,The method has 5 parameters. Parameters: encoder' prefix' item1' item2' item3
Long Parameter List,Doxense.Serialization.Encoders,KeyEncoderExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\KeyEncoderExtensions.cs,WriteKeyTo,The method has 6 parameters. Parameters: encoder' writer' value1' value2' value3' value4
Long Parameter List,Doxense.Serialization.Encoders,KeyEncoderExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\KeyEncoderExtensions.cs,EncodeKey,The method has 5 parameters. Parameters: encoder' item1' item2' item3' item4
Long Parameter List,Doxense.Serialization.Encoders,KeyEncoderExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\KeyEncoderExtensions.cs,EncodeKey,The method has 6 parameters. Parameters: encoder' prefix' item1' item2' item3' item4
Long Parameter List,Doxense.Serialization.Encoders,KeyEncoderExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\KeyEncoderExtensions.cs,WriteKeyTo,The method has 7 parameters. Parameters: encoder' writer' value1' value2' value3' value4' value5
Long Parameter List,Doxense.Serialization.Encoders,KeyEncoderExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\KeyEncoderExtensions.cs,EncodeKey,The method has 6 parameters. Parameters: encoder' item1' item2' item3' item4' item5
Long Parameter List,Doxense.Serialization.Encoders,KeyEncoderExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\KeyEncoderExtensions.cs,EncodeKey,The method has 7 parameters. Parameters: encoder' prefix' item1' item2' item3' item4' item5
Long Identifier,Doxense.Diagnostics.Contracts,ContractMessages,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,,The length of the parameter ConditionArgGreaterOrEqualZero is 30.
Long Statement,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,UseApiVersion,The length of the statement  "			if (s_started) throw new InvalidOperationException($"You cannot set API version {value} because version {s_apiVersion} has already been selected"); " is 147.
Long Statement,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,CheckApiVersion,The length of the statement  "			if (value < min) throw new ArgumentException($"The minimum API version supported by the native fdb client is {min}' which is higher than version {value} requested by the application. You must upgrade the application and/or .NET binding!"); " is 239.
Long Statement,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,CheckApiVersion,The length of the statement  "			if (value > max) throw new ArgumentException($"The maximum API version supported by the native fdb client is {max}' which is lower than version {value} required by the application. You must upgrade the native fdb client to a higher version!"); " is 243.
Long Statement,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,EnsureApiVersion,The length of the statement  "			if (ApiVersion <= 0) throw new InvalidOperationException("The fdb API version must be set before calling this method."); " is 120.
Long Statement,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,EnsureApiVersion,The length of the statement  "			if (min > 0 && min > version) throw new NotSupportedException($"The current fdb API version is {version}' which is lower than the minimum version {min} required by the caller."); " is 178.
Long Statement,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,EnsureApiVersion,The length of the statement  "			if (max != null && max.Value < version) throw new NotSupportedException($"The current fdb API version is {version}' which is higher than the maximum version {max.Value} required by the caller."); " is 195.
Long Statement,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,StopEventLoop,The length of the statement  "					// BUGBUG: specs says that we need to wait for the network thread to stop gracefully' or else data integrity may not be guaranteed... " is 133.
Long Statement,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,StopEventLoop,The length of the statement  "							if (Logging.On) Logging.Warning(typeof(Fdb)' "StopEventLoop"' $"The fdb network thread has not stopped after {duration.Elapsed.TotalSeconds:N0} seconds. Forcing shutdown..."); " is 175.
Long Statement,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,StopEventLoop,The length of the statement  "							//REVIEW: is this even useful? If the thread is stuck in a native P/Invoke call' it won't get notified until it returns to managed code ... " is 139.
Long Statement,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,StopEventLoop,The length of the statement  "								if (Logging.On) Logging.Warning(typeof(Fdb)' "StopEventLoop"' $"The fdb network thread failed to stop after more than {duration.Elapsed.TotalSeconds:N0} seconds. Transaction integrity may not be guaranteed."); " is 209.
Long Statement,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,StopEventLoop,The length of the statement  "							if (Logging.On) Logging.Warning(typeof(Fdb)' "StopEventLoop"' $"The fdb network thread took a long time to stop ({duration.Elapsed.TotalSeconds:N0} seconds)."); " is 160.
Long Statement,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,EventLoop,The length of the statement  "			//TODO: we need to move the crash handling logic outside this method' so that an app can hook up an event and device what to do: crash or keep running (dangerous!). " is 164.
Long Statement,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,EventLoop,The length of the statement  "				if (Logging.On) Logging.Verbose(typeof(Fdb)' "EventLoop"' $"FDB Event Loop running on thread #{Fdb.s_eventLoopThreadId.Value}..."); " is 131.
Long Statement,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,EventLoop,The length of the statement  "						if (Logging.On) Logging.Info(typeof(Fdb)' "EventLoop"' $"The fdb network thread returned with error code {err}: {GetErrorMessage(err)}"); " is 137.
Long Statement,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,EventLoop,The length of the statement  "						if (Logging.On) Logging.Error(typeof(Fdb)' "EventLoop"' $"The fdb network thread returned with error code {err}: {GetErrorMessage(err)}"); " is 138.
Long Statement,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,EventLoop,The length of the statement  "				//note: any error is this thread is BAD NEWS for the process' the the network thread usually cannot be restarted safely. " is 120.
Long Statement,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,EventLoop,The length of the statement  "					Environment.FailFast("The FoundationDB Network Event Loop crashed with an Access Violation' and had to be terminated. You may try to create full memory dumps' as well as attach a debugger to this process (it will automatically break when this problem occurs)."' e); " is 265.
Long Statement,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,CreateDatabaseInternalAsync,The length of the statement  "			if (Logging.On) Logging.Info(typeof(Fdb)' "CreateDatabase"' clusterFile == null ? "Connecting to default database..." : $"Connecting to database using '{clusterFile}' ..."); " is 173.
Long Statement,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,OpenInternalAsync,The length of the statement  "			if (Logging.On) Logging.Info(typeof(Fdb)' nameof(OpenInternalAsync)' $"Connecting to database using cluster file '{clusterFile}' and subspace '{globalSpace}' ..."); " is 164.
Long Statement,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,OpenInternalAsync,The length of the statement  "				if (options.DefaultTimeout != TimeSpan.Zero) db.DefaultTimeout = checked((int) Math.Ceiling(options.DefaultTimeout.TotalMilliseconds)); " is 135.
Long Statement,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,EnsureIsStarted,The length of the statement  "				throw new InvalidOperationException("The fdb API version has not been selected. You must call Fdb.Start(...) in your Main() or Startup class before calling this method."); " is 171.
Long Statement,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,Start,The length of the statement  "						// note: we already bound check the values before' so that means that fdb_c.dll is either an older version or an incompatible new version. " is 138.
Long Statement,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,Start,The length of the statement  "						throw new FdbException(err' $"The API version {apiVersion} is not supported by the FoundationDB client library (fdb_c.dll) installed on this system. The binding only supports versions {GetMinApiVersion()} to {bindingVersion}. You either need to upgrade the .NET binding or the FoundationDB client library to a newer version."); " is 327.
Long Statement,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,Start,The length of the statement  "						Console.Error.WriteLine("FATAL: CANNOT REUSE EXISTING PROCESS! FoundationDB client cannot be restarted once stopped. Current process will be terminated."); " is 155.
Long Statement,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,Start,The length of the statement  "						Environment.FailFast("FATAL: CANNOT REUSE EXISTING PROCESS! FoundationDB client cannot be restarted once stopped. Current process will be terminated."); " is 152.
Long Statement,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,Start,The length of the statement  "				if (Logging.On) Logging.Verbose(typeof(Fdb)' "Start"' $"Will load TLS root certificate and private key from memory ({Fdb.Options.TLSCertificateBytes.Count} bytes)"); " is 165.
Long Statement,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,Start,The length of the statement  "				if (Logging.On) Logging.Verbose(typeof(Fdb)' "Start"' $"Will load TLS root certificate and private key from '{Fdb.Options.TLSCertificatePath}'"); " is 145.
Long Statement,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,Start,The length of the statement  "				if (Logging.On) Logging.Verbose(typeof(Fdb)' "Start"' $"Will load TLS private key from memory ({Fdb.Options.TLSPrivateKeyBytes.Count} bytes)"); " is 143.
Long Statement,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,Start,The length of the statement  "				if (Logging.On) Logging.Verbose(typeof(Fdb)' "Start"' $"Will load TLS private key from '{Fdb.Options.TLSPrivateKeyPath}'"); " is 123.
Long Statement,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,Start,The length of the statement  "				if (Logging.On) Logging.Verbose(typeof(Fdb)' "Start"' $"Will verify TLS peers with pattern '{Fdb.Options.TLSVerificationPattern}'"); " is 132.
Long Statement,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,Start,The length of the statement  "						if (Logging.On) Logging.Verbose(typeof(Fdb)' "AppDomainUnloadHandler"' "AppDomain is unloading' stopping FoundationDB Network Thread..."); " is 138.
Long Statement,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,CreateRootScope,The length of the statement  "			return new FdbDatabaseSingletonProvider<object>(db' null' CancellationTokenSource.CreateLinkedTokenSource(lifetime' db.Cancellation)); " is 134.
Long Statement,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RunInsertOperationAsync,The length of the statement  "						Trace.WriteLine("> commit called with " + batch.Count.ToString("N0") + " items and " + trans.Size.ToString("N0") + " bytes"); " is 125.
Long Statement,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RunInsertOperationAsync,The length of the statement  "						// if transaction Size is bigger than Fdb.MaxTransactionSize (10MB) then commit will fail' but we will retry with a smaller batch anyway " is 136.
Long Statement,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RunInsertOperationAsync,The length of the statement  "								if (batch.Count == 1) throw new InvalidOperationException("Cannot insert one the item of the source collection because it exceeds the maximum size allowed per transaction"); " is 173.
Long Statement,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RetryChunk,The length of the statement  "				Contract.Requires(trans != null && chunk != null && offset >= 0 && count >= 0 && (bodyAsync != null || bodyBlocking != null)); " is 126.
Long Statement,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RetryChunk,The length of the statement  "					if (count == 1) throw new InvalidOperationException("Cannot insert one the item of the source collection because it exceeds the maximum size allowed per transaction"); " is 167.
Long Statement,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RetryChunk,The length of the statement  "				//TODO: for the moment we do a recursive call' which could potentially cause a stack overflow in addition to being ugly. " is 120.
Long Statement,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RunBatchedInsertOperationAsync,The length of the statement  "						Trace.WriteLine("> commit called with " + batch.Count.ToString("N0") + " items and " + trans.Size.ToString("N0") + " bytes"); " is 125.
Long Statement,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RunBatchedInsertOperationAsync,The length of the statement  "						// if transaction Size is bigger than Fdb.MaxTransactionSize (10MB) then commit will fail' but we will retry with a smaller batch anyway " is 136.
Long Statement,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RunBatchedInsertOperationAsync,The length of the statement  "								if (chunk.Count == 1) throw new InvalidOperationException("Cannot insert one the item of the source collection because it exceeds the maximum size allowed per transaction"); " is 173.
Long Statement,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RetryChunk,The length of the statement  "				Contract.Requires(trans != null && chunk != null && offset >= 0 && count >= 0 && (bodyAsync != null || bodyBlocking != null)); " is 126.
Long Statement,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RetryChunk,The length of the statement  "					if (count == 1) throw new InvalidOperationException("Cannot insert one the item of the source collection because it exceeds the maximum size allowed per transaction"); " is 167.
Long Statement,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RetryChunk,The length of the statement  "				//TODO: for the moment we do a recursive call' which could potentially cause a stack overflow in addition to being ugly. " is 120.
Long Statement,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,ForEachAsync,The length of the statement  "				return RunBatchedReadOperationAsync<TSource' TLocal' object>(db' source' localInit' body' localFinally' DefaultInitialBatchSize' ct); " is 133.
Long Statement,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,ForEachAsync,The length of the statement  "				// > either it's not async' then it could only Write/Clear' and in which case we need a writable transaction ... ? (and who will commit and when ??) " is 148.
Long Statement,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,ForEachAsync,The length of the statement  "				// It could maybe make sense if the source was an IAsyncEnumerable<T> because you could not use Parallel.ForEach(...) for that " is 126.
Long Statement,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,ForEachAsync,The length of the statement  "				return RunBatchedReadOperationAsync<TSource' TLocal' object>(db' source' localInit' body' localFinally' DefaultInitialBatchSize' ct); " is 133.
Long Statement,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,ForEachAsync,The length of the statement  "				return RunBatchedReadOperationAsync<TSource' object' object>(db' source' null' body' null' DefaultInitialBatchSize' ct); " is 120.
Long Statement,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,ForEachAsync,The length of the statement  "				// > either it's not async' then it could only Write/Clear' and in which case we need a writable transaction ... ? (and who will commit and when ??) " is 148.
Long Statement,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,ForEachAsync,The length of the statement  "				// It could maybe make sense if the source was an IAsyncEnumerable<T> because you could not use Parallel.ForEach(...) for that " is 126.
Long Statement,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,ForEachAsync,The length of the statement  "				return RunBatchedReadOperationAsync<TSource' object' object>(db' source' null' body' null' DefaultInitialBatchSize' ct); " is 120.
Long Statement,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,AggregateAsync,The length of the statement  "				return RunBatchedReadOperationAsync<TSource' TAggregate' TAggregate>(db' source' localInit' body' identity' DefaultInitialBatchSize' ct); " is 137.
Long Statement,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,AggregateAsync,The length of the statement  "				return RunBatchedReadOperationAsync<TSource' TAggregate' TResult>(db' source' init' body' transform' DefaultInitialBatchSize' ct); " is 130.
Long Statement,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RunBatchedReadOperationAsync,The length of the statement  "					throw new ArgumentException($"Unsupported delegate type {body.GetType().FullName} for local finally"' nameof(localFinally)); " is 124.
Long Statement,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RunBatchedReadOperationAsync,The length of the statement  "												if (ctx.Cooldown <= 0 && sw.Elapsed.TotalSeconds < (5.0 - ctx.ElapsedGeneration.TotalSeconds) / 2)//REVIEW: magical number! " is 123.
Long Statement,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,ExportAsync,The length of the statement  "				return ExportAsync(db' KeySelector.FirstGreaterOrEqual(beginInclusive)' KeySelector.FirstGreaterOrEqual(endExclusive)' handler' ct); " is 132.
Long Statement,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,ExportAsync,The length of the statement  "				return ExportAsync(db' KeySelector.FirstGreaterOrEqual(range.Begin)' KeySelector.FirstGreaterOrEqual(range.End)' handler' ct); " is 126.
Long Statement,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,ExportAsync,The length of the statement  "				// to maximize throughput' we want to read as much as possible per transaction' so that means that we should prefetch the next batch while the current batch is processing " is 170.
Long Statement,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,ExportAsync,The length of the statement  "				// TODO: alternative method that we could use to almost double the throughput (second thread that exports backwards starting from the end) " is 138.
Long Statement,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,ExportAsync,The length of the statement  "				// If handler() is always slower than the prefetch()' the bottleneck is the local processing (or possibly local disk if writing to disk) " is 136.
Long Statement,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,ExportAsync,The length of the statement  "				// If handler() does some buffering' and only flush to disk every N batches' then reading may stall because we could have prefetch more pages (TODO: we could prefetch more pages in queue ?) " is 189.
Long Statement,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,ExportAsync,The length of the statement  "					tr.Annotate("Exported {0} items in {1} chunks ({2:N1}% network)"' count' chunks' chunks > 0 ? (100.0 * waitForFetch / chunks) : 0.0); " is 133.
Long Statement,FoundationDB.Client,System,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.System.cs,GetMetadataVersionAsync,The length of the statement  "				if (Fdb.ApiVersion < 610) throw new NotSupportedException($"The metadata version system key is only available on version 6.1 or greater. Your application has selected API version {Fdb.ApiVersion} which is too low. You will need to select API version 610 or greater."); " is 268.
Long Statement,FoundationDB.Client,System,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.System.cs,GetCoordinatorsAsync,The length of the statement  "					//note: we ask for high priority' because this method maybe called by a monitoring system than has to run when the cluster is clogged up in requests " is 148.
Long Statement,FoundationDB.Client,System,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.System.cs,GetCoordinatorsAsync,The length of the statement  "				if (coordinators.IsNull) throw new InvalidOperationException("Failed to read the list of coordinators from the cluster's system keyspace."); " is 140.
Long Statement,FoundationDB.Client,System,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.System.cs,GetConfigParameterAsync,The length of the statement  "					//note: we ask for high priority' because this method maybe called by a monitoring system than has to run when the cluster is clogged up in requests " is 148.
Long Statement,FoundationDB.Client,System,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.System.cs,GetStorageEngineModeAsync,The length of the statement  "				if (value.IsNull) throw new InvalidOperationException("Failed to read the storage engine mode from the cluster's system keyspace"); " is 131.
Long Statement,FoundationDB.Client,System,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.System.cs,GetChunksAsync,The length of the statement  "				if (endExclusive < beginInclusive) throw new ArgumentException("The end key cannot be less than the begin key"' nameof(endExclusive)); " is 134.
Long Statement,FoundationDB.Client,System,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.System.cs,GetBoundaryKeysInternalAsync,The length of the statement  "						var chunk = await trans.Snapshot.GetRangeAsync(KeyServers + begin' KeyServers + end' options' iterations).ConfigureAwait(false); " is 128.
Long Statement,FoundationDB.Client,System,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.System.cs,EstimateCountAsync,The length of the statement  "				if (endExclusive < beginInclusive) throw new ArgumentException("The end key cannot be less than the begin key"' nameof(endExclusive)); " is 134.
Long Statement,FoundationDB.Client,System,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.System.cs,EstimateCountAsync,The length of the statement  "				// To count the number of items in the range' we will scan it using a key selector with an offset equal to our window size " is 122.
Long Statement,FoundationDB.Client,System,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.System.cs,EstimateCountAsync,The length of the statement  "				// > if the returned key is still inside the range' we add the window size to the counter' and start again from the current key " is 127.
Long Statement,FoundationDB.Client,System,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.System.cs,EstimateCountAsync,The length of the statement  "				// Since we don't know in advance if the range contains 1 key or 1 Billion keys' choosing a good value for the window size is critical: " is 135.
Long Statement,FoundationDB.Client,System,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.System.cs,EstimateCountAsync,The length of the statement  "				// > if it is too small and the range is very large' we will need too many sequential reads and the network latency will quickly add up " is 135.
Long Statement,FoundationDB.Client,System,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.System.cs,EstimateCountAsync,The length of the statement  "				// > if it is too large and the range is small' we will spend too many times halving the window size until we get the correct value " is 131.
Long Statement,FoundationDB.Client,System,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.System.cs,EstimateCountAsync,The length of the statement  "				// > for the last segment' we don't need to wait for a GetKey to complete before issuing the next' so we could split the segment into 4 (or more)' do the GetKeyAsync() in parallel' detect the quarter that cross the boundary' and iterate again until the size is small " is 266.
Long Statement,FoundationDB.Client,System,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.System.cs,EstimateCountAsync,The length of the statement  "				// > once the window size is small enough' we can switch to using GetRange to read the last segment in one shot' instead of iterating with window size 16' 8' 4' 2 and 1 (the wost case being 2^N - 1 items remaining) " is 214.
Long Statement,FoundationDB.Client,System,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.System.cs,EstimateCountAsync,The length of the statement  "				// note: we make a copy of the keys because the operation could take a long time and the key's could prevent a potentially large underlying buffer from being GCed " is 162.
Long Statement,FoundationDB.Client,FdbDatabase,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbDatabase.cs,WriteAsync,The length of the statement  "			//REVIEW: right now' nothing prevents the lambda from calling read methods on the transaction' making this equivalent to calling ReadWriteAsync() " is 145.
Long Statement,FoundationDB.Client,FdbDatabase,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbDatabase.cs,WriteAsync,The length of the statement  "			// => this version of WriteAsync is only there to catch mistakes when someones passes in an async lambda' instead of an Action<IFdbTransaction> " is 143.
Long Statement,FoundationDB.Client,FdbDatabase,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbDatabase.cs,WriteAsync,The length of the statement  "			//REVIEW: right now' nothing prevents the lambda from calling read methods on the transaction' making this equivalent to calling ReadWriteAsync() " is 145.
Long Statement,FoundationDB.Client,FdbDatabase,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbDatabase.cs,WriteAsync,The length of the statement  "			// => this version of WriteAsync is only there to catch mistakes when someones passes in an async lambda' instead of an Action<IFdbTransaction> " is 143.
Long Statement,FoundationDB.Client,FdbDatabase,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbDatabase.cs,WriteAsync,The length of the statement  "			//REVIEW: right now' nothing prevents the lambda from calling read methods on the transaction' making this equivalent to calling ReadWriteAsync() " is 145.
Long Statement,FoundationDB.Client,FdbDatabase,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbDatabase.cs,WriteAsync,The length of the statement  "			// => this version of WriteAsync is only there to catch mistakes when someones passes in an async lambda' instead of an Action<IFdbTransaction> " is 143.
Long Statement,FoundationDB.Client,FdbDatabase,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbDatabase.cs,WriteAsync,The length of the statement  "			//REVIEW: right now' nothing prevents the lambda from calling read methods on the transaction' making this equivalent to calling ReadWriteAsync() " is 145.
Long Statement,FoundationDB.Client,FdbDatabase,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbDatabase.cs,WriteAsync,The length of the statement  "			// => this version of WriteAsync is only there to catch mistakes when someones passes in an async lambda' instead of an Action<IFdbTransaction> " is 143.
Long Statement,FoundationDB.Client,FdbDatabase,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbDatabase.cs,SetOption,The length of the statement  "			if (Logging.On && Logging.IsVerbose) Logging.Verbose(this' "SetOption"' $"Setting database option {option} to '{value ?? "<null>"}'"); " is 134.
Long Statement,FoundationDB.Client,FdbDatabase,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbDatabase.cs,SetOption,The length of the statement  "			if (Logging.On && Logging.IsVerbose) Logging.Verbose(this' "SetOption"' $"Setting database option {option} to {value}"); " is 120.
Long Statement,FoundationDB.Client,FdbDatabase,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbDatabase.cs,SetOption,The length of the statement  "			// Spec says: "If the option is documented as taking an Int parameter' value must point to a signed 64-bit integer (little-endian)' and value_length must be 8." " is 160.
Long Statement,FoundationDB.Client,FdbDatabaseExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbDatabaseExtensions.cs,SetLocationCacheSize,The length of the statement  "			//REVIEW: we can't really change this to a Property' because we don't have a way to get the current value for the getter' and set only properties are weird... " is 158.
Long Statement,FoundationDB.Client,FdbDatabaseExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbDatabaseExtensions.cs,SetMaxWatches,The length of the statement  "			if (count < 0) throw new FdbException(FdbError.InvalidOptionValue' "Maximum outstanding watches count must be a positive integer"); " is 131.
Long Statement,FoundationDB.Client,FdbDatabaseExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbDatabaseExtensions.cs,SetMaxWatches,The length of the statement  "			//REVIEW: we can't really change this to a Property' because we don't have a way to get the current value for the getter' and set only properties are weird... " is 158.
Long Statement,FoundationDB.Client,FdbDatabaseExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbDatabaseExtensions.cs,SetMachineId,The length of the statement  "			//REVIEW: we can't really change this to a Property' because we don't have a way to get the current value for the getter' and set only properties are weird... " is 158.
Long Statement,FoundationDB.Client,FdbDatabaseExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbDatabaseExtensions.cs,SetDataCenterId,The length of the statement  "			//REVIEW: we can't really change this to a Property' because we don't have a way to get the current value for the getter' and set only properties are weird... " is 158.
Long Statement,FoundationDB.Client,FdbEndPoint,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbEndPoint.cs,Create,The length of the statement  "			// Current implementation of IPEndPoint does really check the exact size of the buffer' and should not use the extra byte we added... " is 133.
Long Statement,FoundationDB.Client,FdbEndPoint,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbEndPoint.cs,Create,The length of the statement  "			if ((socketAddress.Family == System.Net.Sockets.AddressFamily.InterNetwork && count == 17) || (socketAddress.Family == System.Net.Sockets.AddressFamily.InterNetworkV6 && count == 29)) " is 183.
Long Statement,FoundationDB.Client,FdbKey,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbKey.cs,PrettyPrint,The length of the statement  "						// this is because your debugger is configured to automatically break on thrown exceptions of type FormatException' ArgumentException' or InvalidOperation. " is 155.
Long Statement,FoundationDB.Client,FdbKey,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbKey.cs,PrettyPrint,The length of the statement  "						// Unfortunately' there isn't much you can do except unchecking "break when this exception type is thrown". If you know a way to disable locally this behaviour' please fix this! " is 177.
Long Statement,FoundationDB.Client,FdbKey,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbKey.cs,PrettyPrint,The length of the statement  "						// => only other option would be to redesign the parsing of tuples as a TryParseXXX() that does not throw' OR to have a VerifyTuple() methods that only checks for validity.... " is 175.
Long Statement,FoundationDB.Client,FdbKey,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbKey.cs,PrettyPrint,The length of the statement  "						// this is because your debugger is configured to automatically break on thrown exceptions of type FormatException' ArgumentException' or InvalidOperation. " is 155.
Long Statement,FoundationDB.Client,FdbKey,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbKey.cs,PrettyPrint,The length of the statement  "						// Unfortunately' there isn't much you can do except unchecking "break when this exception type is thrown". If you know a way to disable locally this behaviour' please fix this! " is 177.
Long Statement,FoundationDB.Client,FdbKey,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbKey.cs,PrettyPrint,The length of the statement  "						// => only other option would be to redesign the parsing of tuples as a TryParseXXX() that does not throw' OR to have a VerifyTuple() methods that only checks for validity.... " is 175.
Long Statement,FoundationDB.Client,FdbMergeQueryExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbMergeQueryExtensions.cs,Except,The length of the statement  "			return Except<TKey' TResult>(trans' ranges.Select(r => KeySelectorPair.Create(r))' keySelector' resultSelector' keyComparer); " is 125.
Long Statement,FoundationDB.Client,FdbOperationContext,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbOperationContext.cs,ExecuteInternal,The length of the statement  "				//note: we start the clock immediately' but the transaction's 5 seconds max lifetime is actually measured from the first read operation (Get' GetRange' GetReadVersion' etc...) " is 175.
Long Statement,FoundationDB.Client,FdbOperationContext,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbOperationContext.cs,ExecuteInternal,The length of the statement  "				// => algorithms that monitor the elapsed duration to rate limit themselves may think that the trans is older than it really is... " is 130.
Long Statement,FoundationDB.Client,FdbOperationContext,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbOperationContext.cs,ExecuteInternal,The length of the statement  "							if (Logging.On && Logging.IsVerbose) Logging.Verbose(string.Format(CultureInfo.InvariantCulture' "fdb: transaction {0} failed with error code {1}"' trans.Id' e.Code)); " is 167.
Long Statement,FoundationDB.Client,FdbOperationContext,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbOperationContext.cs,ExecuteInternal,The length of the statement  "							if (Logging.On && Logging.IsVerbose) Logging.Verbose(string.Format(CultureInfo.InvariantCulture' "fdb: transaction {0} can be safely retried"' trans.Id)); " is 154.
Long Statement,FoundationDB.Client,FdbOperationContext,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbOperationContext.cs,ExecuteInternal,The length of the statement  "					if (Logging.On) Logging.Info(string.Format(CultureInfo.InvariantCulture' "fdb WARNING: long transaction ({0:N1} sec elapsed in transaction lambda function ({1} retries' {2})"' context.BaseDuration.TotalSeconds' context.Retries' context.Committed ? "committed" : "not committed")); " is 280.
Long Statement,FoundationDB.Client,FdbOperationContext,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbOperationContext.cs,RunReadWithResultAsync,The length of the statement  "			await ExecuteInternal(db' context' (Func<IFdbTransaction' Task>) Handler' (Action<IFdbReadOnlyTransaction>) Complete).ConfigureAwait(false); " is 140.
Long Statement,FoundationDB.Client,FdbOperationContext,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbOperationContext.cs,RunReadWithResultAsync,The length of the statement  "			await ExecuteInternal(db' context' (Func<IFdbTransaction' Task>) Handler' (Action<IFdbReadOnlyTransaction>) Complete).ConfigureAwait(false); " is 140.
Long Statement,FoundationDB.Client,FdbOperationContext,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbOperationContext.cs,RunReadWithResultAsync,The length of the statement  "			await ExecuteInternal(db' context' (Func<IFdbTransaction' Task>) Handler' (Func<IFdbReadOnlyTransaction' Task>) Complete).ConfigureAwait(false); " is 144.
Long Statement,FoundationDB.Client,FdbOperationContext,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbOperationContext.cs,RunWriteWithResultAsync,The length of the statement  "			await ExecuteInternal(db' context' (Func<IFdbTransaction' Task>) Handler' (Action<IFdbTransaction>) Complete).ConfigureAwait(false); " is 132.
Long Statement,FoundationDB.Client,FdbOperationContext,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbOperationContext.cs,RunWriteWithResultAsync,The length of the statement  "			await ExecuteInternal(db' context' (Func<IFdbTransaction' Task>) Handler' (Action<IFdbTransaction>) Complete).ConfigureAwait(false); " is 132.
Long Statement,FoundationDB.Client,FdbOperationContext,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbOperationContext.cs,RunWriteWithResultAsync,The length of the statement  "			await ExecuteInternal(db' context' (Func<IFdbTransaction' Task>) Handler' (Func<IFdbTransaction' Task>) Complete).ConfigureAwait(false); " is 136.
Long Statement,FoundationDB.Client,FdbRangeOptions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbRangeOptions.cs,EnsureDefaults,The length of the statement  "			else if (options.Limit == null || options.TargetBytes == null || options.Mode == null || options.Reverse == null || options.Read == null) " is 137.
Long Statement,FoundationDB.Client,FdbRangeOptions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbRangeOptions.cs,EnsureDefaults,The length of the statement  "			Contract.Ensures(options.Mode.HasValue && Enum.IsDefined(typeof(FdbStreamingMode)' options.Mode.Value)' "Streaming mode must be valid"); " is 136.
Long Statement,FoundationDB.Client,FdbRangeOptions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbRangeOptions.cs,EnsureDefaults,The length of the statement  "			Contract.Ensures(options.Read.HasValue && Enum.IsDefined(typeof(FdbReadMode)' options.Read.Value)' "Reading mode must be valid"); " is 129.
Long Statement,FoundationDB.Client,FdbRangeOptions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbRangeOptions.cs,EnsureLegalValues,The length of the statement  "			if (this.Mode < FdbStreamingMode.WantAll || this.Mode > FdbStreamingMode.Serial) throw new FdbException(FdbError.InvalidOptionValue' "Range StreamingMode must be valid."); " is 171.
Long Statement,FoundationDB.Client,FdbRangeOptions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbRangeOptions.cs,EnsureLegalValues,The length of the statement  "			if (this.Read < FdbReadMode.Both || this.Read > FdbReadMode.Values) throw new FdbException(FdbError.InvalidOptionValue' "Range ReadMode must be valid."); " is 153.
Long Statement,FoundationDB.Client,FdbRangeQuery<T>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbRangeQuery.cs,Select,The length of the statement  "			// note: avoid storing the query in the scope by storing the transform locally so that only 'f' and 'lambda' are kept alive " is 123.
Long Statement,FoundationDB.Client,FdbRangeQuery<T>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbRangeQuery.cs,LastOrDefaultAsync,The length of the statement  "			//BUGBUG: if there is a Take(N) on the query' Last() will mean "The Nth key" and not the "last key in the original range". " is 122.
Long Statement,FoundationDB.Client,FdbRangeQuery<T>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbRangeQuery.cs,LastAsync,The length of the statement  "			//BUGBUG: if there is a Take(N) on the query' Last() will mean "The Nth key" and not the "last key in the original range". " is 122.
Long Statement,FoundationDB.Client,PagingIterator,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbRangeQuery.PagingIterator.cs,OnFirstAsync,The length of the statement  "					// we can safely optimize this case by not doing any query' because it should not have any impact on conflict resolutions. " is 122.
Long Statement,FoundationDB.Client,PagingIterator,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbRangeQuery.PagingIterator.cs,OnFirstAsync,The length of the statement  "					// => The result of 'query.Take(X)' where X would be computed from reads in the db' and be equal to 0' would conflict because of those reads anyway. " is 148.
Long Statement,FoundationDB.Client,PagingIterator,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbRangeQuery.PagingIterator.cs,OnFirstAsync,The length of the statement  "					var keys = await this.Transaction.GetKeysAsync(new[] { bounds.Begin' this.Begin' bounds.End' this.End }).ConfigureAwait(false); " is 127.
Long Statement,FoundationDB.Client,PagingIterator,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbRangeQuery.PagingIterator.cs,FetchNextPageAsync,The length of the statement  "						this.AtEnd = !result.HasMore || (this.RemainingCount.HasValue && this.RemainingCount.Value <= 0) || (this.RemainingSize.HasValue && this.RemainingSize.Value <= 0); " is 163.
Long Statement,FoundationDB.Client,PagingIterator,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbRangeQuery.PagingIterator.cs,FetchNextPageAsync,The length of the statement  "						Debug.WriteLine("FdbRangeQuery.PagingIterator.FetchNextPageAsync() returned " + this.Chunk.Length + " results (" + this.RowCount + " total) " + (hasMore ? " with more to come" : " and has no more data")); " is 204.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,SetOption,The length of the statement  "			if (Logging.On && Logging.IsVerbose) Logging.Verbose(this' "SetOption"' $"Setting transaction option {option.ToString()}"); " is 123.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,SetOption,The length of the statement  "			if (Logging.On && Logging.IsVerbose) Logging.Verbose(this' "SetOption"' $"Setting transaction option {option.ToString()} to '{value ?? "<null>"}'"); " is 148.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,SetOption,The length of the statement  "			if (Logging.On && Logging.IsVerbose) Logging.Verbose(this' "SetOption"' $"Setting transaction option {option.ToString()} to '{value.ToString() ?? "<null>"}'"); " is 159.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,SetOption,The length of the statement  "			if (Logging.On && Logging.IsVerbose) Logging.Verbose(this' "SetOption"' $"Setting transaction option {option.ToString()} to {value}"); " is 134.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,SetOption,The length of the statement  "			// Spec says: "If the option is documented as taking an Int parameter' value must point to a signed 64-bit integer (little-endian)' and value_length must be 8." " is 160.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,GenerateNewVersionStampToken,The length of the statement  "			// Since this is supposed to be a version number with a ~1M tickrate per seconds' we will play it safe' and force the 8 highest bits to 1' " is 138.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,GenerateNewVersionStampToken,The length of the statement  "			// By doing some empirical testing' it also seems that the last 16 bits are a transaction batch order which is usually a low number. " is 132.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,GenerateNewVersionStampToken,The length of the statement  "			// So the final token will look like:  'FF xx xx xx xx xx xx xx Fy yy'' were 'x' is the random token' and 'y' will lowest 12 bits of the transaction retry count " is 160.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,GetValuesAsync,The length of the statement  "			if (Logging.On && Logging.IsVerbose) Logging.Verbose(this' "GetValuesAsync"' $"Getting batch of {keys.Length} values ..."); " is 123.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,GetRangeCore,The length of the statement  "			if (Logging.On && Logging.IsVerbose) Logging.Verbose(this' "GetRangeCore"' $"Getting range '{begin.ToString()} <= x < {end.ToString()}'"); " is 138.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,GetKeysAsync,The length of the statement  "			if (Logging.On && Logging.IsVerbose) Logging.Verbose(this' "GetKeysAsync"' $"Getting batch of {selectors.Length} keys ..."); " is 124.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,Set,The length of the statement  "			if (Logging.On && Logging.IsVerbose) Logging.Verbose(this' "Set"' $"Setting '{FdbKey.Dump(key)}' = {Slice.Dump(value)}"); " is 121.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,EnsureMutationTypeIsSupported,The length of the statement  "					throw new NotSupportedException("Atomic mutations are only supported starting from API level 200. You need to select API level 200 or more at the start of your process."); " is 171.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,EnsureMutationTypeIsSupported,The length of the statement  "					throw new NotSupportedException("Atomic mutations are only supported starting from client version 2.x. You need to update the version of the client' and select API level 200 or more at the start of your process."); " is 214.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,EnsureMutationTypeIsSupported,The length of the statement  "							throw new NotSupportedException("Atomic mutations Max and Min are only supported starting from API level 300. You need to select API level 300 or more at the start of your process."); " is 183.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,EnsureMutationTypeIsSupported,The length of the statement  "							throw new NotSupportedException("Atomic mutations Max and Min are only supported starting from client version 3.x. You need to update the version of the client' and select API level 300 or more at the start of your process.."); " is 227.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,EnsureMutationTypeIsSupported,The length of the statement  "							throw new NotSupportedException("Atomic mutations for VersionStamps are only supported starting from API level 400. You need to select API level 400 or more at the start of your process."); " is 189.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,EnsureMutationTypeIsSupported,The length of the statement  "							throw new NotSupportedException("Atomic mutations Max and Min are only supported starting from client version 4.x. You need to update the version of the client' and select API level 400 or more at the start of your process.."); " is 227.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,EnsureMutationTypeIsSupported,The length of the statement  "							throw new NotSupportedException("Atomic mutation AppendIfFits is only supported starting from API level 520. You need to select API level 520 or more at the start of your process."); " is 182.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,EnsureMutationTypeIsSupported,The length of the statement  "							throw new NotSupportedException("Atomic mutation AppendIfFits is only supported starting from client version 5.2. You need to update the version of the client' and select API level 520 or more at the start of your process.."); " is 226.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,EnsureMutationTypeIsSupported,The length of the statement  "							throw new NotSupportedException("Atomic mutation CompareAndClear is only supported starting from API level 610. You need to select API level 610 or more at the start of your process."); " is 185.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,EnsureMutationTypeIsSupported,The length of the statement  "							throw new NotSupportedException("Atomic mutation CompareAndClear is only supported starting from client version 6.1. You need to update the version of the client' and select API level 610 or more at the start of your process.."); " is 229.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,EnsureMutationTypeIsSupported,The length of the statement  "					throw new NotSupportedException($"An invalid mutation type '{mutation}' was issued. If you are attempting to call a new mutation type' you will need to update the version of this assembly' and select the latest API level."); " is 224.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,Atomic,The length of the statement  "			if (Logging.On && Logging.IsVerbose) Logging.Verbose(this' "AtomicCore"' $"Atomic {mutation.ToString()} on '{FdbKey.Dump(key)}' = {Slice.Dump(param)}"); " is 152.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,ClearRange,The length of the statement  "			if (Logging.On && Logging.IsVerbose) Logging.Verbose(this' "ClearRange"' $"Clearing Range '{beginKeyInclusive.ToString()}' <= k < '{endKeyExclusive.ToString()}'"); " is 163.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,AddConflictRange,The length of the statement  "			if (Logging.On && Logging.IsVerbose) Logging.Verbose(this' "AddConflictRange"' String.Format("Adding {2} conflict range '{0}' <= k < '{1}'"' beginKeyInclusive.ToString()' endKeyExclusive.ToString()' type.ToString())); " is 217.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,GetAddressesForKeyAsync,The length of the statement  "			if (Logging.On && Logging.IsVerbose) Logging.Verbose(this' "GetAddressesForKeyAsync"' $"Getting addresses for key '{FdbKey.Dump(key)}'"); " is 137.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,Watch,The length of the statement  "			//note: the caller CANNOT use the transaction's own token' or else the watch would not survive after the commit' rendering it useless " is 133.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,Watch,The length of the statement  "				throw new ArgumentException("You cannot use the transaction's own cancellation token' because the Watch will need to execute after the transaction has completed. You may use the same token that was used by the parent retry loop' or any other token."); " is 251.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,Watch,The length of the statement  "			// > don't keep a reference on a potentially large buffer while the watch is active' preventing it from being garbage collected " is 127.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,Watch,The length of the statement  "			// > allow the caller to reuse freely the slice underlying buffer' without changing the value that we will return when the task completes " is 137.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,Watch,The length of the statement  "			// Note: the FDBFuture returned by 'fdb_transaction_watch()' outlives the transaction' and can only be cancelled with 'fdb_future_cancel()' or 'fdb_future_destroy()' " is 165.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,Watch,The length of the statement  "			// Since Task<T> does not expose any cancellation mechanism by itself (and we don't want to force the caller to create a CancellationTokenSource every time)' " is 157.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,Cancel,The length of the statement  "					case STATE_DISPOSED: throw new ObjectDisposedException("FdbTransaction"' "Cannot cancel transaction because it already has been disposed"); " is 139.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,EnsureCanWrite,The length of the statement  "			// note: write operations are not async' and cannnot block' so it is (somewhat) safe to call them from the network thread itself. " is 129.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,ThrowOnInvalidState,The length of the statement  "				case STATE_DISPOSED: throw new ObjectDisposedException("FdbTransaction"' "This transaction has already been disposed and cannot be used anymore"); " is 146.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,ThrowOnInvalidState,The length of the statement  "				case STATE_FAILED: throw new InvalidOperationException("The transaction is in a failed state and cannot be used anymore"); " is 122.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,ThrowOnInvalidState,The length of the statement  "				case STATE_CANCELED: throw new FdbException(FdbError.TransactionCancelled' "The transaction has already been cancelled"); " is 121.
Long Statement,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,Dispose,The length of the statement  "							if (Logging.On) Logging.Error(this' "Dispose"' $"Transaction #{m_id} failed to dispose the transaction handler: [{e.GetType().Name}] {e.Message}"); " is 147.
Long Statement,FoundationDB.Client,Snapshotted,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.Snapshot.cs,GetValuesAsync,The length of the statement  "				if (Logging.On && Logging.IsVerbose) Logging.Verbose(this' "GetValuesAsync"' $"Getting batch of {keys.Length} values ..."); " is 123.
Long Statement,FoundationDB.Client,Snapshotted,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.Snapshot.cs,GetKeyAsync,The length of the statement  "				var key = await m_parent.m_handler.GetKeyAsync(selector' snapshot: true' ct: m_parent.m_cancellation).ConfigureAwait(false); " is 124.
Long Statement,FoundationDB.Client,Snapshotted,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.Snapshot.cs,GetKeysAsync,The length of the statement  "				if (Logging.On && Logging.IsVerbose) Logging.Verbose(this' "GetKeysCoreAsync"' $"Getting batch of {selectors.Length} keys ..."); " is 128.
Long Statement,FoundationDB.Client,Snapshotted,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.Snapshot.cs,GetRangeAsync,The length of the statement  "				return m_parent.m_handler.GetRangeAsync(beginInclusive' endExclusive' options' iteration' snapshot: true' ct: m_parent.m_cancellation); " is 135.
Long Statement,FoundationDB.Client,FdbTransactionExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransactionExtensions.cs,SetValues,The length of the statement  "			if (values.Length != keys.Length) throw new ArgumentException("Both key and value arrays must have the same size."' nameof(values)); " is 132.
Long Statement,FoundationDB.Client,FdbTransactionExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransactionExtensions.cs,SetValues,The length of the statement  "					if (!valueIter.MoveNext()) throw new ArgumentException("Both key and value sequences must have the same size."' nameof(values)); " is 128.
Long Statement,FoundationDB.Client,FdbTransactionExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransactionExtensions.cs,SetValues,The length of the statement  "				if (valueIter.MoveNext()) throw new ArgumentException("Both key and values sequences must have the same size."' nameof(values)); " is 128.
Long Statement,FoundationDB.Client,FdbTransactionExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransactionExtensions.cs,GetVersionStampOffset,The length of the statement  "			// the buffer MUST contain one incomplete stamp' either the random token of the current transaction or the default token (all-FF) " is 129.
Long Statement,FoundationDB.Client,FdbTransactionExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransactionExtensions.cs,GetVersionStampOffset,The length of the statement  "			if (buffer.Count < token.Count) throw new ArgumentException("The key is too small to contain a VersionStamp."' argName); " is 120.
Long Statement,FoundationDB.Client,FdbTransactionExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransactionExtensions.cs,FailVersionStampNotSupported,The length of the statement  "			return new NotSupportedException($"VersionStamps are not supported at API version {Fdb.ApiVersion}. You need to select at least API Version 400 or above."); " is 156.
Long Statement,FoundationDB.Client,FdbTransactionExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransactionExtensions.cs,SetVersionStampedKey,The length of the statement  "			if (stampOffset > key.Count - 10) throw new ArgumentException("The VersionStamp overflows past the end of the key."' nameof(stampOffset)); " is 138.
Long Statement,FoundationDB.Client,FdbTransactionExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransactionExtensions.cs,SetVersionStampedValue,The length of the statement  "			if (stampOffset > key.Count - 10) throw new ArgumentException("The VersionStamp overflows past the end of the value."' nameof(stampOffset)); " is 140.
Long Statement,FoundationDB.Client,FdbTransactionExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransactionExtensions.cs,SetVersionStampedValue,The length of the statement  "				if (stampOffset != 0) throw new InvalidOperationException("Prior to API version 520' the VersionStamp can only be located at offset 0. Please update to API Version 520 or above!"); " is 180.
Long Statement,FoundationDB.Client,FdbTransactionExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransactionExtensions.cs,OnlyKeys,The length of the statement  "			if (query.Read == FdbReadMode.Values) throw new InvalidOperationException("Cannot extract keys because the source query only read the values."); " is 144.
Long Statement,FoundationDB.Client,FdbTransactionExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransactionExtensions.cs,OnlyKeys,The length of the statement  "			return new FdbRangeQuery<Slice>(query.Transaction' query.Begin' query.End' KeyValuePairToKey' query.Snapshot' query.Options.OnlyKeys()); " is 136.
Long Statement,FoundationDB.Client,FdbTransactionExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransactionExtensions.cs,OnlyValues,The length of the statement  "			if (query.Read == FdbReadMode.Keys) throw new InvalidOperationException("Cannot extract values because the source query only read the keys."); " is 142.
Long Statement,FoundationDB.Client,FdbTransactionExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransactionExtensions.cs,OnlyValues,The length of the statement  "			return new FdbRangeQuery<Slice>(query.Transaction' query.Begin' query.End' KeyValuePairToValue' query.Snapshot' query.Options.OnlyValues()); " is 140.
Long Statement,FoundationDB.Client,KeyRange,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\KeyRange.cs,ToString,The length of the statement  "			return "{" + FdbKey.PrettyPrint(this.Begin' FdbKey.PrettyPrintMode.Begin) + "' " + FdbKey.PrettyPrint(this.End' FdbKey.PrettyPrintMode.End) + "}"; " is 146.
Long Statement,FoundationDB.Client,KeySelectorPair,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\KeySelectorPair.cs,ToString,The length of the statement  "			return "[ " + this.Begin.PrettyPrint(FdbKey.PrettyPrintMode.Begin) + "' " + this.End.PrettyPrint(FdbKey.PrettyPrintMode.End) + " )"; " is 132.
Long Statement,FoundationDB.Client,Directory,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\Fdb.Directory.cs,SwitchToNamedPartitionAsync,The length of the statement  "				if (Logging.On) Logging.Verbose(typeof(Fdb.Directory)' "OpenNamedPartitionAsync"' $"Opened root layer using cluster file '{db.ClusterFile}'"); " is 142.
Long Statement,FoundationDB.Client,Directory,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\Fdb.Directory.cs,SwitchToNamedPartitionAsync,The length of the statement  "				var descriptor = await db.ReadWriteAsync(tr => db.Directory.CreateOrOpenAsync(tr' path' layer: FdbDirectoryPartition.LayerId)' ct).ConfigureAwait(false); " is 153.
Long Statement,FoundationDB.Client,Directory,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\Fdb.Directory.cs,SwitchToNamedPartitionAsync,The length of the statement  "				if (Logging.On) Logging.Verbose(typeof(Fdb.Directory)' "OpenNamedPartitionAsync"' $"Found named partition '{descriptor.FullName}' at prefix {descriptor}"); " is 155.
Long Statement,FoundationDB.Client,Directory,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\Fdb.Directory.cs,SwitchToNamedPartitionAsync,The length of the statement  "				if (Logging.On) Logging.Info(typeof(Fdb.Directory)' "OpenNamedPartitionAsync"' $"Opened partition {descriptor.FullName} at {db.GlobalSpace}' using directory layer at {db.Directory.DirectoryLayer.NodeSubspace}"); " is 211.
Long Statement,FoundationDB.Client,DynamicKeys,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\DynamicKeySubspace.cs,PackMany,The length of the statement  "				(ref SliceWriter writer' TSource item' IDynamicKeyEncoder encoder) => encoder.PackKey<TTuple>(ref writer' selector(item))' " is 122.
Long Statement,FoundationDB.Client,DynamicKeys,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\DynamicKeySubspace.cs,PackRange,The length of the statement  "			return this.Encoder.ToKeyRange(this.Parent.GetPrefix()' tuple.Item1' tuple.Item2' tuple.Item3' tuple.Item4' tuple.Item5); " is 121.
Long Statement,FoundationDB.Client,DynamicKeys,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\DynamicKeySubspace.cs,PackRange,The length of the statement  "			return this.Encoder.ToKeyRange(this.Parent.GetPrefix()' tuple.Item1' tuple.Item2' tuple.Item3' tuple.Item4' tuple.Item5); " is 121.
Long Statement,FoundationDB.Client,DynamicKeys,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\DynamicKeySubspace.cs,PackRange,The length of the statement  "			return this.Encoder.ToKeyRange(this.Parent.GetPrefix()' tuple.Item1' tuple.Item2' tuple.Item3' tuple.Item4' tuple.Item5); " is 121.
Long Statement,FoundationDB.Client,DynamicKeys,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\DynamicKeySubspace.cs,PackRange,The length of the statement  "			return this.Encoder.ToKeyRange(this.Parent.GetPrefix()' tuple.Item1' tuple.Item2' tuple.Item3' tuple.Item4' tuple.Item5); " is 121.
Long Statement,FoundationDB.Client,DynamicPartition,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\DynamicKeySubspace.cs,ByKey,The length of the statement  "			return new DynamicKeySubspace(this.Subspace.Keys.Encode<T1' T2' T3' T4>(value1' value2' value3' value4)' this.Subspace.Encoding); " is 129.
Long Statement,FoundationDB.Client,KeySubspace,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\KeySubspace.cs,BoundCheck,The length of the statement  "			//note: Since this is needed to make GetRange/GetKey work properly' this should work for all subspace' include directory partitions " is 131.
Long Statement,FoundationDB.Client,KeySubspace,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\KeySubspace.cs,BoundCheck,The length of the statement  "			//note: Since this is needed to make GetRange/GetKey work properly' this should work for all subspace' include directory partitions " is 131.
Long Statement,FoundationDB.Client,KeySubspaceExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\KeySubspaceExtensions.cs,AsTyped,The length of the statement  "			return new TypedKeySubspace<T1' T2' T3>(subspace.GetPrefix()' (encoding ?? TuPack.Encoding).GetKeyEncoder<T1' T2' T3>()); " is 121.
Long Statement,FoundationDB.Client,KeySubspaceExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\KeySubspaceExtensions.cs,AsTyped,The length of the statement  "			return new TypedKeySubspace<T1' T2' T3' T4>(subspace.GetPrefix()' (encoding ?? TuPack.Encoding).GetKeyEncoder<T1' T2' T3' T4>()); " is 129.
Long Statement,FoundationDB.Client,KeySubspaceExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\KeySubspaceExtensions.cs,StealPrefix,The length of the statement  "			//note: we can workaround the 'security' in top directory partition by accessing their key prefix without triggering an exception! " is 130.
Long Statement,FoundationDB.Client,Logging,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Utils\Logging.cs,PrintLine,The length of the statement  "				s_traceSource.TraceEvent(eventType' id' "[" + Thread.CurrentThread.ManagedThreadId.ToString("d4"' CultureInfo.InvariantCulture) + "] " + msg); " is 142.
Long Statement,FoundationDB.DependencyInjection,FdbDatabaseScopeProvider<TState>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\DependencyInjection\Implementation\FdbDatabaseScopeProvider.cs,EnsureInitialized,The length of the statement  "				//REVIEW: is there a faster way to do this? (we want to make sure not to leak tons of Task.Delay(...) that will linger on until the original ct is triggered " is 156.
Long Statement,FoundationDB.DependencyInjection,FdbDatabaseScopeProvider<TState>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\DependencyInjection\Implementation\FdbDatabaseScopeProvider.cs,GetDatabaseAndState,The length of the statement  "			return t.Database != null && !this.LifeTime.IsCancellationRequested ? new ValueTask<(IFdbDatabase' TState)>((t.Database' t.State)) : GetDatabaseAndStateSlow(ct); " is 161.
Long Statement,FoundationDB.Filters.Logging,FdbLoggedTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbLoggedTransaction.cs,GetRange,The length of the statement  "			// this method does not execute immediately' so we don't need to record any operation here' only when GetRangeAsync() is called (by ToListAsync() or any other LINQ operator) " is 173.
Long Statement,FoundationDB.Filters.Logging,Snapshotted,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbLoggedTransaction.cs,GetRangeAsync,The length of the statement  "					new FdbTransactionLog.GetRangeCommand(m_parent.Grab(in beginInclusive)' m_parent.Grab(in endExclusive)' options' iteration)' " is 124.
Long Statement,FoundationDB.Filters.Logging,FdbLoggingExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbLoggingExtensions.cs,Logged,The length of the statement  "			return provider.CreateScope<object>((db' ct) => !ct.IsCancellationRequested ? Task.FromResult<(IFdbDatabase' object)>((Logged(db' handler)' null)) : Task.FromCanceled<(IFdbDatabase' object)>(ct)); " is 196.
Long Statement,FoundationDB.Filters.Logging,FdbLoggingExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbLoggingExtensions.cs,Annotate,The length of the statement  "			logged?.Log.AddOperation(new FdbTransactionLog.LogCommand(string.Format(CultureInfo.InvariantCulture' format' arg0))' countAsOperation: false); " is 143.
Long Statement,FoundationDB.Filters.Logging,FdbLoggingExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbLoggingExtensions.cs,Annotate,The length of the statement  "			GetLogger(trans)?.Log.AddOperation(new FdbTransactionLog.LogCommand(string.Format(CultureInfo.InvariantCulture' format' arg0' arg1))' countAsOperation: false); " is 159.
Long Statement,FoundationDB.Filters.Logging,FdbLoggingExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbLoggingExtensions.cs,Annotate,The length of the statement  "			GetLogger(trans)?.Log.AddOperation(new FdbTransactionLog.LogCommand(string.Format(CultureInfo.InvariantCulture' format' arg0' arg1' arg2))' countAsOperation: false); " is 165.
Long Statement,FoundationDB.Filters.Logging,FdbLoggingExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbLoggingExtensions.cs,Annotate,The length of the statement  "			GetLogger(trans)?.Log.AddOperation(new FdbTransactionLog.LogCommand(string.Format(CultureInfo.InvariantCulture' format' args))' countAsOperation: false); " is 153.
Long Statement,FoundationDB.Filters.Logging,FdbTransactionLog,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetDuration,The length of the statement  "			return TimeSpan.FromTicks((long)Math.Round(((double)elapsed / Stopwatch.Frequency) * TimeSpan.TicksPerSecond' MidpointRounding.AwayFromZero)); " is 142.
Long Statement,FoundationDB.Filters.Logging,FdbTransactionLog,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetCommandsReport,The length of the statement  "			sb.AppendFormat(culture' "Transaction #{0} ({3}' {1} operations' started {2}Z"' this.Id' cmds.Length' this.StartedUtc.TimeOfDay' this.IsReadOnly ? "read-only" : "read/write"); " is 175.
Long Statement,FoundationDB.Filters.Logging,FdbTransactionLog,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetCommandsReport,The length of the statement  "				sb.AppendLine(String.Format(culture' "Stats: {0:N0} operations' {1:N0} reads ({3:N0} bytes)' {2:N0} writes ({4:N0} bytes)' {5:N2} ms"' this.Operations' reads' writes' this.ReadSize' this.CommitSize' this.TotalDuration.TotalMilliseconds)); " is 238.
Long Statement,FoundationDB.Filters.Logging,FdbTransactionLog,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetTimingsReport,The length of the statement  "			sb.AppendFormat(culture' "Transaction #{0} ({4}' {1} operations' '#' = {2:N1} ms' started {3}Z"' this.Id' cmds.Length' (scale * 1000d)' this.StartedUtc.TimeOfDay' this.IsReadOnly ? "read-only" : "read/write"); " is 209.
Long Statement,FoundationDB.Filters.Logging,FdbTransactionLog,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetTimingsReport,The length of the statement  "						sb.AppendLine(String.Format(culture' "├────────┼{0}┼──────────────────────────────────┼─────────────┤ == Attempt #{1:N0} =="' bar' (++attempts))); " is 146.
Long Statement,FoundationDB.Filters.Logging,FdbTransactionLog,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetTimingsReport,The length of the statement  "					sb.AppendLine(String.Format(culture' " in {0:N3} ms and {1:N0} attempt(s)"' this.TotalDuration.TotalMilliseconds' attempts)); " is 125.
Long Statement,FoundationDB.Filters.Logging,FdbTransactionLog,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetTimingsReport,The length of the statement  "				sb.AppendLine(String.Format(culture' "> Completed after {0:N3} ms without performing any operation"' this.TotalDuration.TotalMilliseconds)); " is 140.
Long Statement,FoundationDB.Filters.Logging,Command<TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetResult,The length of the statement  "				if (res.Length > MAX_LENGTH) res = res.Substring(0' MAX_LENGTH / 2) + "..." + res.Substring(res.Length - (MAX_LENGTH / 2)' MAX_LENGTH / 2); " is 139.
Long Statement,FoundationDB.Filters.Logging,DirectoryKeyResolver,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,BuildFromDirectoryLayer,The length of the statement  "				//HACKHACK: for now' we will simply poke inside the node subspace of the directory layer' which is brittle (if the structure changes in future versions!) " is 153.
Long Statement,FoundationDB.Filters.Logging,DirectoryKeyResolver,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,BuildFromDirectoryLayer,The length of the statement  "				// Entries that correspond to subfolders have the form: NodeSubspace.Pack( (parent_prefix' 0' "child_name") ) = child_prefix " is 124.
Long Statement,FoundationDB.Filters.Logging,DirectoryKeyResolver,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,BuildFromDirectoryLayer,The length of the statement  "					//var parent = t.Get<Slice>(0); //TODO: use this to construct the full materialized path of this directory? (would need more than one pass) " is 139.
Long Statement,FoundationDB.Filters.Logging,AtomicCommand,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetUserKey,The length of the statement  "				//TODO: FIXME: the ApiVersion should be stored with the command or log' not read from a static variable' because it will prevent us from loading a log from a file' produced by another server with a different Api Version! " is 220.
Long Statement,FoundationDB.Filters.Logging,AtomicCommand,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetUserValue,The length of the statement  "				//TODO: FIXME: the ApiVersion should be stored with the command or log' not read from a static variable' because it will prevent us from loading a log from a file' produced by another server with a different Api Version! " is 220.
Long Statement,FoundationDB.Filters.Logging,AtomicCommand,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,ToString,The length of the statement  "				sb.Append("Atomic_").Append(this.Mutation.ToString()).Append(' ').Append(resolver.Resolve(GetUserKey())).Append("' <").Append(GetUserValue().ToHexaString(' ')).Append('>'); " is 172.
Long Statement,FoundationDB.Filters.Logging,AddConflictRangeCommand,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetArguments,The length of the statement  "				return string.Concat(this.Type.ToString()' "! "' resolver.ResolveBegin(this.Begin)' " <= k < "' resolver.ResolveEnd(this.End)); " is 127.
Long Statement,FoundationDB.Filters.Logging,GetRangeCommand,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetArguments,The length of the statement  "				string s = this.Begin.PrettyPrint(FdbKey.PrettyPrintMode.Begin) + " <= k < " + this.End.PrettyPrint(FdbKey.PrettyPrintMode.End); " is 128.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,CreateOrOpenAsync,The length of the statement  "			return CreateOrOpenInternalAsync(null' trans' ParsePath(path)' layer' Slice.Nil' allowCreate: true' allowOpen: true' throwOnError: true); " is 137.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,OpenAsync,The length of the statement  "			return CreateOrOpenInternalAsync(trans' null' ParsePath(path)' layer' prefix: Slice.Nil' allowCreate: false' allowOpen: true' throwOnError: true); " is 146.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,CreateAsync,The length of the statement  "			return CreateOrOpenInternalAsync(null' trans' ParsePath(path)' layer' prefix: Slice.Nil' allowCreate: true' allowOpen: false' throwOnError: true); " is 146.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,TryOpenAsync,The length of the statement  "			return CreateOrOpenInternalAsync(trans' null' ParsePath(path)' layer' prefix: Slice.Nil' allowCreate: false' allowOpen: true' throwOnError: false); " is 147.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,TryCreateAsync,The length of the statement  "			return CreateOrOpenInternalAsync(null' trans' ParsePath(path)' layer' prefix: Slice.Nil' allowCreate: true' allowOpen: false' throwOnError: false); " is 147.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,RegisterAsync,The length of the statement  "			return CreateOrOpenInternalAsync(null' trans' ParsePath(path)' layer' prefix: prefix' allowCreate: true' allowOpen: false' throwOnError: true); " is 143.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,TryRegisterAsync,The length of the statement  "			return CreateOrOpenInternalAsync(null' trans' ParsePath(path)' layer' prefix: prefix' allowCreate: true' allowOpen: false' throwOnError: false); " is 144.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,ChangeLayerAsync,The length of the statement  "			return await CreateOrOpenInternalAsync(null' trans' location' newLayer' prefix: Slice.Nil' allowCreate: false' allowOpen: true' throwOnError: true).ConfigureAwait(false); " is 170.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,ToString,The length of the statement  "			return $"DirectoryLayer(path={this.FullName}' contents={this.ContentSubspace.GetPrefix():K}' nodes={this.NodeSubspace.GetPrefix():K})"; " is 135.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,ToRelativePath,The length of the statement  "			if (!path.StartsWith(this.Location)) throw new InvalidOperationException("The path cannot be outside of this partition."); " is 122.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,CreateOrOpenInternalAsync,The length of the statement  "			Contract.Requires(readTrans == null || trans == null || object.ReferenceEquals(readTrans' trans)' "The write transaction should be the same as the read transaction."); " is 167.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,CreateOrOpenInternalAsync,The length of the statement  "					return await dl.CreateOrOpenInternalAsync(readTrans' trans' subPath' layer' prefix' allowCreate' allowOpen' throwOnError).ConfigureAwait(false); " is 144.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,CreateOrOpenInternalAsync,The length of the statement  "					throw new InvalidOperationException($"The directory {path} was created with incompatible layer {layer:P} instead of expected {existingNode.Layer:P}."); " is 151.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,CreateOrOpenInternalAsync,The length of the statement  "				if (FdbDirectoryLayer.AnnotateTransactions) trans.Annotate("Ensure that there is no data already present under prefix {0:K}"' prefix); " is 134.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,CreateOrOpenInternalAsync,The length of the statement  "					throw new InvalidOperationException($"The database has keys stored at the prefix chosen by the automatic prefix allocator: {prefix:K}."); " is 137.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,CreateOrOpenInternalAsync,The length of the statement  "				if (FdbDirectoryLayer.AnnotateTransactions) trans.Annotate("Ensure that the prefix {0:K} has not already been allocated"' prefix); " is 130.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,CreateOrOpenInternalAsync,The length of the statement  "					throw new InvalidOperationException("The directory layer has manually allocated prefixes that conflict with the automatic prefix allocator."); " is 142.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,CreateOrOpenInternalAsync,The length of the statement  "				if (FdbDirectoryLayer.AnnotateTransactions) trans.Annotate("Ensure that the prefix {0:K} hasn't already been allocated"' prefix); " is 129.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,CreateOrOpenInternalAsync,The length of the statement  "				var parentSubspace = await CreateOrOpenInternalAsync(readTrans' trans' path.Substring(0' path.Count - 1)' Slice.Nil' Slice.Nil' true' true' true).ConfigureAwait(false); " is 168.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,CreateOrOpenInternalAsync,The length of the statement  "			if (FdbDirectoryLayer.AnnotateTransactions) trans.Annotate("Registering the new prefix {0:K} into the folder sub-tree"' prefix); " is 128.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,MoveInternalAsync,The length of the statement  "				throw new InvalidOperationException($"The destination directory '{newPath}' cannot be a sub-directory of the source directory '{oldPath}'."); " is 141.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,MoveInternalAsync,The length of the statement  "			// we have already checked that old and new are under this partition path' but one of them (or both?) could be under a sub-partition.. " is 134.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,MoveInternalAsync,The length of the statement  "				return await GetPartitionForNode(in newNode).DirectoryLayer.MoveInternalAsync(trans' oldNode.PartitionSubPath' newNode.PartitionSubPath' throwOnError).ConfigureAwait(false); " is 173.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,MoveInternalAsync,The length of the statement  "				if (throwOnError) throw new InvalidOperationException($"The destination directory '{newPath}' already exists. Remove it first."); " is 129.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,MoveInternalAsync,The length of the statement  "				if (throwOnError) throw new InvalidOperationException($"The parent of the destination directory '{newPath}' does not exist. Create it first."); " is 143.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,MoveInternalAsync,The length of the statement  "			if (FdbDirectoryLayer.AnnotateTransactions) trans.Annotate("Register the prefix {0} to its new location in the folder sub-tree"' oldNode.Subspace.GetPrefix()); " is 159.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,MoveInternalAsync,The length of the statement  "			trans.Set(GetSubDirKey(parentNode.Subspace' newPath.Get<string>(-1))' this.NodeSubspace.Keys.Decode<Slice>(oldNode.Subspace.GetPrefix())); " is 138.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,RemoveInternalAsync,The length of the statement  "				return await GetPartitionForNode(in n).DirectoryLayer.RemoveInternalAsync(trans' n.PartitionSubPath' throwIfMissing).ConfigureAwait(false); " is 139.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,ListInternalAsync,The length of the statement  "				return await GetPartitionForNode(in node).DirectoryLayer.ListInternalAsync(trans' node.PartitionSubPath' throwIfMissing).ConfigureAwait(false); " is 143.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,ExistsInternalAsync,The length of the statement  "				return await GetPartitionForNode(in node).DirectoryLayer.ExistsInternalAsync(trans' node.PartitionSubPath).ConfigureAwait(false); " is 129.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,ChangeLayerInternalAsync,The length of the statement  "				await GetPartitionForNode(in node).DirectoryLayer.ChangeLayerInternalAsync(trans' node.PartitionSubPath' newLayer).ConfigureAwait(false); " is 137.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,CheckVersion,The length of the statement  "			// the version is stored as 3 x 32-bit unsigned int' so (1' 0' 0) will be "<01><00><00><00> <00><00><00><00> <00><00><00><00>" " is 126.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,CheckVersion,The length of the statement  "			if (major > LayerVersion.Major) throw new InvalidOperationException($"Cannot load directory with version {major}.{minor}.{upgrade} using directory layer {FdbDirectoryLayer.LayerVersion}."); " is 189.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,CheckVersion,The length of the statement  "			if (writeAccess && minor > LayerVersion.Minor) throw new InvalidOperationException($"Directory with version {major}.{minor}.{upgrade} is read-only when opened using directory layer {FdbDirectoryLayer.LayerVersion}."); " is 217.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,FindAsync,The length of the statement  "				if (FdbDirectoryLayer.AnnotateTransactions) tr.Annotate("Looking for child {0} under node {1}..."' path.Get<string>(i)' n.GetPrefix()); " is 135.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,FindAsync,The length of the statement  "				if (FdbDirectoryLayer.AnnotateTransactions) tr.Annotate("Reading Layer value for subfolder {0} found at {1}"' path' n.GetPrefix()); " is 131.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,RemoveFromParent,The length of the statement  "				if (FdbDirectoryLayer.AnnotateTransactions) tr.Annotate("Removing path {0} from its parent folder at {1}"' path' parent.Subspace.GetPrefix()); " is 142.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,RemoveRecursive,The length of the statement  "			//note: we could use Task.WhenAll to remove the children' but there is a risk of task explosion if the subtree is very large... " is 127.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,RemoveRecursive,The length of the statement  "			if (FdbDirectoryLayer.AnnotateTransactions) tr.Annotate("Removing all metadata for folder under {0}"' node.GetPrefix()); " is 120.
Long Statement,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,GetSubDirKey,The length of the statement  "			// but since the last item of path can be of any type' we will use tuple splicing to copy the last item without changing its type " is 129.
Long Statement,FoundationDB.Layers.Directories,Node,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,IsInPartition,The length of the statement  "				return this.Exists && this.Layer == FdbDirectoryPartition.LayerId && (includeEmptySubPath || this.TargetPath.Count > this.Path.Count); " is 134.
Long Statement,FoundationDB.Layers.Directories,FdbDirectorySubspace,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectorySubspace.cs,CheckLayer,The length of the statement  "				throw new InvalidOperationException($"The directory {this.FullName} was created with incompatible layer {this.Layer:P} instead of expected {layer:P}."); " is 152.
Long Statement,FoundationDB.Layers.Directories,FdbDirectorySubspace,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectorySubspace.cs,ChangeLayerAsync,The length of the statement  "			return new FdbDirectorySubspace(this.Location' this.RelativeLocation' GetKeyPrefix()' this.DirectoryLayer' newLayer' this.Encoding); " is 132.
Long Statement,FoundationDB.Layers.Directories,FdbDirectorySubspace,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectorySubspace.cs,CreateOrOpenAsync,The length of the statement  "			return this.DirectoryLayer.CreateOrOpenInternalAsync(null' trans' ToRelativePath(path)' layer' Slice.Nil' allowCreate: true' allowOpen: true' throwOnError: true); " is 162.
Long Statement,FoundationDB.Layers.Directories,FdbDirectorySubspace,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectorySubspace.cs,OpenAsync,The length of the statement  "			return this.DirectoryLayer.CreateOrOpenInternalAsync(trans' null' ToRelativePath(path)' layer' prefix: Slice.Nil' allowCreate: false' allowOpen: true' throwOnError: true); " is 171.
Long Statement,FoundationDB.Layers.Directories,FdbDirectorySubspace,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectorySubspace.cs,TryOpenAsync,The length of the statement  "			return this.DirectoryLayer.CreateOrOpenInternalAsync(trans' null' ToRelativePath(path)' layer' prefix: Slice.Nil' allowCreate: false' allowOpen: true' throwOnError: false); " is 172.
Long Statement,FoundationDB.Layers.Directories,FdbDirectorySubspace,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectorySubspace.cs,CreateAsync,The length of the statement  "			return this.DirectoryLayer.CreateOrOpenInternalAsync(null' trans' ToRelativePath(path)' layer' prefix: Slice.Nil' allowCreate: true' allowOpen: false' throwOnError: true); " is 171.
Long Statement,FoundationDB.Layers.Directories,FdbDirectorySubspace,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectorySubspace.cs,TryCreateAsync,The length of the statement  "			return this.DirectoryLayer.CreateOrOpenInternalAsync(null' trans' ToRelativePath(path)' layer' prefix: Slice.Nil' allowCreate: true' allowOpen: false' throwOnError: false); " is 172.
Long Statement,FoundationDB.Layers.Directories,FdbDirectorySubspace,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectorySubspace.cs,RegisterAsync,The length of the statement  "			return this.DirectoryLayer.CreateOrOpenInternalAsync(null' trans' ToRelativePath(path)' layer' prefix: prefix' allowCreate: true' allowOpen: false' throwOnError: true); " is 168.
Long Statement,FoundationDB.Layers.Directories,FdbDirectorySubspace,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectorySubspace.cs,MoveToAsync,The length of the statement  "			if (!location.StartsWith(directoryLayer.Location)) throw new InvalidOperationException("Cannot move between partitions."); " is 122.
Long Statement,FoundationDB.Layers.Directories,FdbDirectorySubspace,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectorySubspace.cs,MoveAsync,The length of the statement  "			return this.DirectoryLayer.MoveAsync(trans' ToRelativePath(oldPath).ToArray<string>()' ToRelativePath(newPath).ToArray<string>()); " is 130.
Long Statement,FoundationDB.Layers.Directories,FdbDirectorySubspace,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectorySubspace.cs,TryMoveToAsync,The length of the statement  "			if (!location.StartsWith(directoryLayer.Location)) throw new InvalidOperationException("Cannot move between partitions."); " is 122.
Long Statement,FoundationDB.Layers.Directories,FdbDirectorySubspace,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectorySubspace.cs,TryMoveAsync,The length of the statement  "			return this.DirectoryLayer.TryMoveAsync(trans' this.ToRelativePath(oldPath).ToArray<string>()' this.ToRelativePath(newPath).ToArray<string>()); " is 143.
Long Statement,FoundationDB.Layers.Directories,FdbHighContentionAllocator,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbHighContentionAllocator.cs,AllocateAsync,The length of the statement  "				if (FdbDirectoryLayer.AnnotateTransactions) trans.Annotate("Advance allocator window size to {0} starting at {1}"' window' start + window); " is 139.
Long Statement,FoundationDB.Layers.Directories,FdbHighContentionAllocator,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbHighContentionAllocator.cs,AllocateAsync,The length of the statement  "					if (FdbDirectoryLayer.AnnotateTransactions) trans.Annotate("Allocated prefix {0} from window [{1}..{2}] ({3} used)"' candidate' start' start + window - 1' count + 1); " is 166.
Long Statement,FoundationDB.Client.Native,FdbFuture,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbFuture.cs,CreateTaskFromHandleArray,The length of the statement  "			//TODO: technically' there is no reason why FdbFutureArray would not accept an empty array. We should simplify this by handling the case in the ctor (we are already allocating something anyway...) " is 196.
Long Statement,FoundationDB.Client.Native,FdbFuture<T>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbFuture.cs,TryCleanup,The length of the statement  "			// We try to cleanup the future handle as soon as possible' meaning as soon as we have the result' or an error' or a cancellation " is 129.
Long Statement,FoundationDB.Client.Native,FdbFuture<T>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbFuture.cs,DoCleanup,The length of the statement  "				// note: always defer the completion on the threadpool' because we don't want to dead lock here (we can be called by Dispose) " is 125.
Long Statement,FoundationDB.Client.Native,FdbFuture<T>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbFuture.cs,DoCleanup,The length of the statement  "				// The only surviving value after this would be a Task and an optional WorkItem on the ThreadPool that will signal it... " is 120.
Long Statement,FoundationDB.Client.Native,FdbFuture<T>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbFuture.cs,RegisterCallback,The length of the statement  "			var prm = new IntPtr(id); // note: we assume that we can only run in 64-bit mode' so it is safe to cast a long into an IntPtr " is 125.
Long Statement,FoundationDB.Client.Native,FdbFuture<T>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbFuture.cs,CancellationHandler,The length of the statement  "				Debug.WriteLine("Future<" + typeof(T).Name + ">.Cancel(0x" + future.m_handle.Handle.ToString("x") + ") was called on thread #" + Thread.CurrentThread.ManagedThreadId.ToString()); " is 178.
Long Statement,FoundationDB.Client.Native,FdbFutureArray<T>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbFutureArray.cs,ReleaseMemory,The length of the statement  "						//REVIEW: there is a possibility of a race condition with Dispose() that could potentially call FutureDestroy(handle) at the same time (not verified) " is 149.
Long Statement,FoundationDB.Client.Native,FdbFutureArray<T>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbFutureArray.cs,CancelHandles,The length of the statement  "						//REVIEW: there is a possibility of a race condition with Dispose() that could potentially call FutureDestroy(handle) at the same time (not verified) " is 149.
Long Statement,FoundationDB.Client.Native,FdbFutureArray<T>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbFutureArray.cs,FutureCompletionCallback,The length of the statement  "			Debug.WriteLine("Future<" + typeof(T).Name + ">.Callback(0x" + futureHandle.ToString("x") + "' " + parameter.ToString("x") + ") has fired on thread #" + Thread.CurrentThread.ManagedThreadId.ToString()); " is 202.
Long Statement,FoundationDB.Client.Native,FdbFutureArray<T>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbFutureArray.cs,HandleCompletion,The length of the statement  "			Debug.WriteLine("FutureArray<" + typeof(T).Name + ">.Callback(...) handling completion on thread #" + Thread.CurrentThread.ManagedThreadId.ToString()); " is 151.
Long Statement,FoundationDB.Client.Native,FdbFutureArray<T>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbFutureArray.cs,HandleCompletion,The length of the statement  "								//note: result selector will execute from network thread' but this should be our own code that only calls into some fdb_future_get_XXXX()' which should be safe... " is 162.
Long Statement,FoundationDB.Client.Native,FdbFutureSingle<T>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbFutureSingle.cs,FutureCompletionCallback,The length of the statement  "			Debug.WriteLine("Future<" + typeof(T).Name + ">.Callback(0x" + futureHandle.ToString("x") + "' " + parameter.ToString("x") + ") has fired on thread #" + Thread.CurrentThread.ManagedThreadId.ToString()); " is 202.
Long Statement,FoundationDB.Client.Native,FdbFutureSingle<T>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbFutureSingle.cs,HandleCompletion,The length of the statement  "			// this is very frequent when we are called with await' or ContinueWith(...' TaskContinuationOptions.ExecuteSynchronously) " is 122.
Long Statement,FoundationDB.Client.Native,FdbFutureSingle<T>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbFutureSingle.cs,HandleCompletion,The length of the statement  "							//note: result selector will execute from network thread' but this should be our own code that only calls into some fdb_future_get_XXXX()' which should be safe... " is 162.
Long Statement,FoundationDB.Client.Native,FdbFutureSingle<T>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbFutureSingle.cs,HandleCompletion,The length of the statement  "				Debug.WriteLine("Future<" + typeof(T).Name + "> callback completed in " + sw.Elapsed.TotalMilliseconds.ToString() + " ms"); " is 123.
Long Statement,FoundationDB.Client.Native,FdbFutureSingle<T>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbFutureSingle.cs,CancelHandles,The length of the statement  "			//REVIEW: there is a possibility of a race condition with Dispose() that could potentially call FutureDestroy(handle) at the same time (not verified) " is 149.
Long Statement,FoundationDB.Client.Native,FdbFutureSingle<T>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbFutureSingle.cs,ReleaseMemory,The length of the statement  "			//REVIEW: there is a possibility of a race condition with Dispose() that could potentially call FutureDestroy(handle) at the same time (not verified) " is 149.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,GetPreloadPath,The length of the statement  "			// - If String.Empty' call win32 LoadLibrary(FDB_C_DLL + ".dll") and let the os find the file (using the standard OS behavior) " is 126.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,FutureSetCallback,The length of the statement  "			Debug.WriteLine("fdb_future_set_callback(0x" + future.Handle.ToString("x") + "' 0x" + ptrCallback.ToString("x") + ") => err=" + err); " is 133.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,FutureGetCluster,The length of the statement  "			Debug.WriteLine("fdb_future_get_cluster(0x" + future.Handle.ToString("x") + ") => err=" + err + "' handle=0x" + cluster.Handle.ToString("x")); " is 142.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,FutureGetDatabase,The length of the statement  "			Debug.WriteLine("fdb_future_get_database(0x" + future.Handle.ToString("x") + ") => err=" + err + "' handle=0x" + database.Handle.ToString("x")); " is 144.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,ClusterCreateDatabase,The length of the statement  "			Debug.WriteLine("fdb_cluster_create_database(0x" + cluster.Handle.ToString("x") + "' name: '" + name + "') => 0x" + cluster.Handle.ToString("x")); " is 146.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,DatabaseCreateTransaction,The length of the statement  "			Debug.WriteLine("fdb_database_create_transaction(0x" + database.Handle.ToString("x") + ") => err=" + err + "' handle=0x" + transaction.Handle.ToString("x")); " is 157.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,TransactionCommit,The length of the statement  "			Debug.WriteLine("fdb_transaction_commit(0x" + transaction.Handle.ToString("x") + ") => 0x" + future.Handle.ToString("x")); " is 122.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,TransactionGetVersionStamp,The length of the statement  "			Debug.WriteLine("fdb_transaction_get_versionstamp(0x" + transaction.Handle.ToString("x") + ") => 0x" + future.Handle.ToString("x")); " is 132.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,TransactionWatch,The length of the statement  "				Debug.WriteLine("fdb_transaction_watch(0x" + transaction.Handle.ToString("x") + "' key: '" + FdbKey.Dump(key) + "') => 0x" + future.Handle.ToString("x")); " is 154.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,TransactionOnError,The length of the statement  "			Debug.WriteLine("fdb_transaction_on_error(0x" + transaction.Handle.ToString("x") + "' " + errorCode + ") => 0x" + future.Handle.ToString("x")); " is 143.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,TransactionSetReadVersion,The length of the statement  "			Debug.WriteLine("fdb_transaction_set_read_version(0x" + transaction.Handle.ToString("x") + "' version: " + version.ToString() + ")"); " is 133.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,TransactionGetReadVersion,The length of the statement  "			Debug.WriteLine("fdb_transaction_get_read_version(0x" + transaction.Handle.ToString("x") + ") => 0x" + future.Handle.ToString("x")); " is 132.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,TransactionGet,The length of the statement  "				Debug.WriteLine("fdb_transaction_get(0x" + transaction.Handle.ToString("x") + "' key: '" + FdbKey.Dump(key) + "'' snapshot: " + snapshot + ") => 0x" + future.Handle.ToString("x")); " is 180.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,TransactionGetRange,The length of the statement  "					Debug.WriteLine("fdb_transaction_get_range(0x" + transaction.Handle.ToString("x") + "' begin: " + begin.PrettyPrint(FdbKey.PrettyPrintMode.Begin) + "' end: " + end.PrettyPrint(FdbKey.PrettyPrintMode.End) + "' " + snapshot + ") => 0x" + future.Handle.ToString("x")); " is 265.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,TransactionGetKey,The length of the statement  "				var future = NativeMethods.fdb_transaction_get_key(transaction' ptrKey' selector.Key.Count' selector.OrEqual' selector.Offset' snapshot); " is 137.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,TransactionGetKey,The length of the statement  "				Debug.WriteLine("fdb_transaction_get_key(0x" + transaction.Handle.ToString("x") + "' " + selector.ToString() + "' " + snapshot + ") => 0x" + future.Handle.ToString("x")); " is 170.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,TransactionGetAddressesForKey,The length of the statement  "				Debug.WriteLine("fdb_transaction_get_addresses_for_key(0x" + transaction.Handle.ToString("x") + "' key: '" + FdbKey.Dump(key) + "') => 0x" + future.Handle.ToString("x")); " is 170.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,FutureGetValue,The length of the statement  "			Debug.WriteLine("fdb_future_get_value(0x" + future.Handle.ToString("x") + ") => err=" + err + "' present=" + valuePresent + "' valueLength=" + valueLength); " is 156.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,FutureGetKey,The length of the statement  "			Debug.WriteLine("fdb_future_get_key(0x" + future.Handle.ToString("x") + ") => err=" + err + "' keyLength=" + keyLength); " is 120.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,FutureGetKey,The length of the statement  "			// note: fdb_future_get_key is allowed to return NULL for the empty key (not to be confused with a key that has an empty value) " is 127.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,FutureGetKey,The length of the statement  "			{ // from the spec: "If a key selector would otherwise describe a key off the beginning of the database' it instead resolves to the empty key ''." " is 146.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,FutureGetKeyValueArray,The length of the statement  "			Debug.WriteLine("fdb_future_get_keyvalue_array(0x" + future.Handle.ToString("x") + ") => err=" + err + "' count=" + count + "' more=" + more); " is 142.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,FutureGetKeyValueArray,The length of the statement  "						if (kl > int.MaxValue) throw new InvalidOperationException("A Key has a length that is larger than a signed 32-bit int!"); " is 122.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,FutureGetKeyValueArray,The length of the statement  "						if (vl > int.MaxValue) throw new InvalidOperationException("A Value has a length that is larger than a signed 32-bit int!"); " is 124.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,FutureGetKeyValueArray,The length of the statement  "					if (total > int.MaxValue) throw new NotSupportedException("Cannot read more than 2GB of key/value data in a single batch!"); " is 124.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,FutureGetKeyValueArrayKeysOnly,The length of the statement  "			Debug.WriteLine("fdb_future_get_keyvalue_array(0x" + future.Handle.ToString("x") + ") => err=" + err + "' count=" + count + "' more=" + more); " is 142.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,FutureGetKeyValueArrayKeysOnly,The length of the statement  "						if (kl > int.MaxValue) throw new InvalidOperationException("A Key has a length that is larger than a signed 32-bit int!"); " is 122.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,FutureGetKeyValueArrayKeysOnly,The length of the statement  "						if (vl > int.MaxValue) throw new InvalidOperationException("A Value has a length that is larger than a signed 32-bit int!"); " is 124.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,FutureGetKeyValueArrayValuesOnly,The length of the statement  "			Debug.WriteLine("fdb_future_get_keyvalue_array(0x" + future.Handle.ToString("x") + ") => err=" + err + "' count=" + count + "' more=" + more); " is 142.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,FutureGetKeyValueArrayValuesOnly,The length of the statement  "						if (kl > int.MaxValue) throw new InvalidOperationException("A Key has a length that is larger than a signed 32-bit int!"); " is 122.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,FutureGetKeyValueArrayValuesOnly,The length of the statement  "						if (vl > int.MaxValue) throw new InvalidOperationException("A Value has a length that is larger than a signed 32-bit int!"); " is 124.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,FutureGetKeyValueArrayValuesOnly,The length of the statement  "					if (total > int.MaxValue) throw new NotSupportedException("Cannot read more than 2GB of value data in a single batch!"); " is 120.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,FutureGetKeyValueArrayValuesOnly,The length of the statement  "						// because we will need them for pagination when reading multiple ranges (ex: last key will be used as selector for next chunk when going forward) " is 146.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,FutureGetStringArray,The length of the statement  "			Debug.WriteLine("fdb_future_get_string_array(0x" + future.Handle.ToString("x") + ") => err=" + err + "' count=" + count); " is 121.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,FutureGetStringArray,The length of the statement  "					//TODO: if pointers are corrupted' or memory is garbled' we could very well walk around the heap' randomly copying a bunch of stuff (like passwords or jpegs of cats...) " is 168.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,FutureGetStringArray,The length of the statement  "					// there is no real way to ensure that pointers are valid' except maybe having a maximum valid size for strings' and they should probably only contain legible text ? " is 165.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,FutureGetVersionStamp,The length of the statement  "			Debug.WriteLine("fdb_future_get_key(0x" + future.Handle.ToString("x") + ") => err=" + err + "' keyLength=" + keyLength); " is 120.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,TransactionSet,The length of the statement  "				Debug.WriteLine("fdb_transaction_set(0x" + transaction.Handle.ToString("x") + "' key: '" + FdbKey.Dump(key) + "'' value: '" + FdbKey.Dump(value) + "')"); " is 153.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,TransactionAtomicOperation,The length of the statement  "				Debug.WriteLine("fdb_transaction_atomic_op(0x" + transaction.Handle.ToString("x") + "' key: '" + FdbKey.Dump(key) + "'' param: '" + FdbKey.Dump(param) + "'' " + operationType.ToString() + ")"); " is 193.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,TransactionClearRange,The length of the statement  "				Debug.WriteLine("fdb_transaction_clear_range(0x" + transaction.Handle.ToString("x") + "' beginKey: '" + FdbKey.Dump(beginKey) + "' endKey: '" + FdbKey.Dump(endKey) + "')"); " is 172.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,TransactionAddConflictRange,The length of the statement  "				Debug.WriteLine("fdb_transaction_add_conflict_range(0x" + transaction.Handle.ToString("x") + "' beginKey: '" + FdbKey.Dump(beginKey) + "' endKey: '" + FdbKey.Dump(endKey) + "'' " + type.ToString() + ")"); " is 204.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,TransactionAddConflictRange,The length of the statement  "				return NativeMethods.fdb_transaction_add_conflict_range(transaction' pBeginKey' beginKey.Length' pEndKey' endKey.Length' type); " is 127.
Long Statement,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,TransactionGetApproximateSize,The length of the statement  "			Debug.WriteLine("fdb_transaction_get_approximate_size(0x" + transaction.Handle.ToString("x") + ") => 0x" + future.Handle.ToString("x")); " is 136.
Long Statement,FoundationDB.Client.Native,FdbNativeDatabase,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNativeDatabase.cs,CreateDatabaseLegacyAsync,The length of the statement  "			// In legacy API versions' you first had to create "cluster" handle and then obtain a database handle that that cluster. " is 120.
Long Statement,FoundationDB.Client.Native,FdbNativeTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNativeTransaction.cs,TryGetValueResult,The length of the statement  "			Debug.WriteLine("FdbTransaction[].TryGetValueResult() => err=" + err + "' present=" + present + "' valueLength=" + result.Count); " is 129.
Long Statement,FoundationDB.Client.Native,FdbNativeTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNativeTransaction.cs,GetRangeAsync,The length of the statement  "			var future = FdbNative.TransactionGetRange(m_handle' begin' end' options.Limit ?? 0' options.TargetBytes ?? 0' options.Mode ?? FdbStreamingMode.Iterator' iteration' snapshot' reversed); " is 185.
Long Statement,FoundationDB.Client.Native,FdbNativeTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNativeTransaction.cs,GetStringArrayResult,The length of the statement  "			Debug.WriteLine("FdbTransaction[].FutureGetStringArray() => err=" + err + "' results=" + (result == null ? "<null>" : result.Length.ToString())); " is 145.
Long Statement,FoundationDB.Client.Native,FdbNativeTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNativeTransaction.cs,GetApproximateSizeAsync,The length of the statement  "			if (Fdb.ApiVersion < 620) throw new NotSupportedException($"The GetApproximateSize method is only available for version 6.2 or greater. Your application has selected API version {Fdb.ApiVersion} which is too low. You willl need to select API version 620 or greater."); " is 268.
Long Statement,FoundationDB.Client.Native,UnmanagedLibrary,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\UnmanagedLibrary.cs,Load,The length of the statement  "					throw new System.IO.FileNotFoundException($"Failed to load native {(IntPtr.Size == 8 ? "x64" : "x86")} library: {path}"' path' ex); " is 131.
Long Statement,Doxense.Async,AsyncBuffer<TInput;TOutput>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Async\AsyncBuffer.cs,OnNextAsync,The length of the statement  "				if (m_done) return Task.FromException<object>(new InvalidOperationException("Cannot send any more values because this buffer has already completed")); " is 150.
Long Statement,Doxense.Async,AsyncHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Async\AsyncHelpers.cs,PumpToAsync,The length of the statement  "					//LogPump("Received " + (current.HasValue ? "value" : current.Failed ? "error" : "completion") + "' publishing... " + current); " is 127.
Long Statement,Doxense.Async,AsyncHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Async\AsyncHelpers.cs,PumpToAsync,The length of the statement  "					  //REVIEW: SHOULD WE? We poush the error to the target' and the SAME error to the caller... who should be responsible for handling it? " is 133.
Long Statement,Doxense.Async,AsyncTaskBuffer<T>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Async\AsyncTaskBuffer.cs,OnNextAsync,The length of the statement  "				if (m_done) return Task.FromException<object>(new InvalidOperationException("Cannot send any more values because this buffer has already completed")); " is 150.
Long Statement,Doxense.Async,AsyncTransform<TInput;TOutput>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Async\AsyncTransform.cs,OnNextAsync,The length of the statement  "			if (m_done) throw new InvalidOperationException("Cannot send any more values because this transform has already completed."); " is 125.
Long Statement,Doxense,Maybe,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Async\Maybe.cs,CompareTo,The length of the statement  "				return ReferenceEquals(m_errorContainer' other.m_errorContainer) ? 0 : m_errorContainer.GetHashCode().CompareTo(other.m_errorContainer.GetHashCode()); " is 150.
Long Statement,Doxense,ExceptionExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\ExceptionExtensions.cs,IsFatalError,The length of the statement  "			return self is System.Threading.ThreadAbortException || self is OutOfMemoryException || self is StackOverflowException || (self is AggregateException && IsFatalError(self.InnerException)); " is 188.
Long Statement,Doxense.Threading.Tasks,TaskHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Async\TaskHelpers.cs,Observed,The length of the statement  "			// A la base en .NET 4.0' le destructeur des task rethrow les errors non observées sur le TP ce qui pouvait killer le process " is 125.
Long Statement,Doxense.Threading.Tasks,TaskHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Async\TaskHelpers.cs,TouchFaultedTask,The length of the statement  "				System.Diagnostics.Debug.WriteLine($"### muted unobserved failed Task[{t.Id}]: [{error?.InnerException?.GetType().Name}] {error?.InnerException?.Message}"); " is 156.
Long Statement,Doxense.Threading.Tasks,TaskHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Async\TaskHelpers.cs,Then,The length of the statement  "			// Note: we use 'await' instead of ContinueWith' so that we can give the caller a nicer callstack in case of errors (instead of an AggregateExecption) " is 150.
Long Statement,Doxense.Threading.Tasks,TaskHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Async\TaskHelpers.cs,Then,The length of the statement  "			// Note: we use 'await' instead of ContinueWith' so that we can give the caller a nicer callstack in case of errors (instead of an AggregateExecption) " is 150.
Long Statement,Doxense.Threading.Tasks,TaskHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Async\TaskHelpers.cs,Then,The length of the statement  "			// Note: we use 'await' instead of ContinueWith' so that we can give the caller a nicer callstack in case of errors (instead of an AggregateExecption) " is 150.
Long Statement,Doxense.Threading.Tasks,TaskHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Async\TaskHelpers.cs,Inline,The length of the statement  "			// note: if action is null' then there is a bug in the caller' and it should blow up instantly (will help preserving the call stack) " is 132.
Long Statement,Doxense.Threading.Tasks,TaskHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Async\TaskHelpers.cs,Inline,The length of the statement  "			// note: if action is null' then there is a bug in the caller' and it should blow up instantly (will help preserving the call stack) " is 132.
Long Statement,Doxense.Threading.Tasks,TaskHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Async\TaskHelpers.cs,Inline,The length of the statement  "			// note: if action is null' then there is a bug in the caller' and it should blow up instantly (will help preserving the call stack) " is 132.
Long Statement,Doxense.Threading.Tasks,TaskHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Async\TaskHelpers.cs,Inline,The length of the statement  "			// note: if action is null' then there is a bug in the caller' and it should blow up instantly (will help preserving the call stack) " is 132.
Long Statement,Doxense.Threading.Tasks,TaskHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Async\TaskHelpers.cs,Inline,The length of the statement  "			// note: if action is null' then there is a bug in the caller' and it should blow up instantly (will help preserving the call stack) " is 132.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,MapToNUnitAssertion,The length of the statement  "			return (Exception) s_constructorNUnitException?.Invoke(new object[] { message }); // => new NUnit.Framework.AssertionException(...) " is 131.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,FailStringNullOrEmpty,The length of the statement  "				return ReportFailure(typeof(ArgumentNullException)' ContractMessages.ValueCannotBeNull' message' paramName' ContractMessages.ConditionNotNull); " is 143.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,FailStringNullOrEmpty,The length of the statement  "				return ReportFailure(typeof(ArgumentException)' ContractMessages.StringCannotBeEmpty' message' paramName' ContractMessages.ConditionNotEmptyLength); " is 148.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,FailStringNullOrWhiteSpace,The length of the statement  "				return ReportFailure(typeof(ArgumentNullException)' ContractMessages.ValueCannotBeNull' message' paramName' ContractMessages.ConditionNotNull); " is 143.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,FailStringNullOrWhiteSpace,The length of the statement  "				return ReportFailure(typeof(ArgumentException)' ContractMessages.StringCannotBeEmpty' message' paramName' ContractMessages.ConditionNotEmptyLength); " is 148.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,FailStringNullOrWhiteSpace,The length of the statement  "				return ReportFailure(typeof(ArgumentException)' ContractMessages.StringCannotBeWhiteSpaces' message' paramName' ContractMessages.ConditionNotWhiteSpace); " is 153.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,FailArrayNullOrEmpty,The length of the statement  "				return ReportFailure(typeof(ArgumentNullException)' ContractMessages.ValueCannotBeNull' message' paramName' ContractMessages.ConditionNotNull); " is 143.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,FailArrayNullOrEmpty,The length of the statement  "				return ReportFailure(typeof(ArgumentException)' ContractMessages.CollectionCannotBeEmpty' message' paramName' ContractMessages.ConditionNotEmptyCount); " is 151.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,FailCollectionNullOrEmpty,The length of the statement  "				return ReportFailure(typeof(ArgumentNullException)' ContractMessages.ValueCannotBeNull' message' paramName' ContractMessages.ConditionNotNull); " is 143.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,FailCollectionNullOrEmpty,The length of the statement  "				return ReportFailure(typeof(ArgumentException)' ContractMessages.CollectionCannotBeEmpty' message' paramName' ContractMessages.ConditionNotEmptyCount); " is 151.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,FailBufferNull,The length of the statement  "			return ReportFailure(typeof(ArgumentNullException)' ContractMessages.BufferCannotBeNull' message' paramName' ContractMessages.ConditionNotNull); " is 144.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,FailBufferNullOrEmpty,The length of the statement  "				return ReportFailure(typeof(ArgumentNullException)' ContractMessages.BufferCannotBeNull' message' paramName' ContractMessages.ConditionNotNull); " is 144.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,FailBufferNullOrEmpty,The length of the statement  "				return ReportFailure(typeof(ArgumentException)' ContractMessages.BufferCannotBeEmpty' message' paramName' ContractMessages.ConditionNotEmptyCount); " is 147.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,FailArgumentNotPositive,The length of the statement  "			return ReportFailure(typeof(ArgumentException)' ContractMessages.PositiveNumberRequired' message' paramName' ContractMessages.ConditionArgPositive); " is 148.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,FailArgumentNotNonNegative,The length of the statement  "			return ReportFailure(typeof(ArgumentException)' ContractMessages.NonNegativeNumberRequired' message' paramName' ContractMessages.ConditionArgPositive); " is 151.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,FailArgumentNotPowerOfTwo,The length of the statement  "			return ReportFailure(typeof(ArgumentException)' ContractMessages.PowerOfTwoRequired' message' paramName' ContractMessages.ConditionArgPositive); " is 144.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,FailArgumentForbidden,The length of the statement  "			return ReportFailure(typeof(ArgumentException)' ContractMessages.ValueIsForbidden' message' paramName' ContractMessages.ConditionArgNotEqualTo); " is 144.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,FailArgumentExpected,The length of the statement  "			return ReportFailure(typeof(ArgumentException)' ContractMessages.ValueIsExpected' message' paramName' ContractMessages.ConditionArgEqualTo); " is 140.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,FailArgumentNotGreaterThan,The length of the statement  "			return ReportFailure(typeof(ArgumentException)' zero ? ContractMessages.AboveZeroNumberRequired : ContractMessages.ValueIsTooSmall' message' paramName' zero ? ContractMessages.ConditionArgGreaterThanZero : ContractMessages.ConditionArgGreaterThan); " is 248.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,FailArgumentNotGreaterOrEqual,The length of the statement  "			return ReportFailure(typeof(ArgumentException)' zero ? ContractMessages.PositiveNumberRequired : ContractMessages.ValueIsTooSmall' message' paramName' zero ? ContractMessages.ConditionArgGreaterOrEqualZero : ContractMessages.ConditionArgGreaterOrEqual); " is 253.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,FailArgumentNotLessThan,The length of the statement  "			return ReportFailure(typeof(ArgumentException)' ContractMessages.ValueIsTooBig' message' paramName' ContractMessages.ConditionArgLessThan); " is 139.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,FailArgumentNotLessOrEqual,The length of the statement  "			return ReportFailure(typeof(ArgumentException)' ContractMessages.ValueIsTooBig' message' paramName' ContractMessages.ConditionArgLessThanOrEqual); " is 146.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,FailArgumentOutOfBounds,The length of the statement  "			return ReportFailure(typeof(ArgumentException)' ContractMessages.ValueMustBeBetween' message' paramName' ContractMessages.ConditionArgBetween); " is 143.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,FailArgumentNotMultiple,The length of the statement  "			return ReportFailure(typeof(ArgumentException)' ContractMessages.ValueMustBeMultiple' message' paramName' ContractMessages.ConditionArgMultiple); " is 145.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,DoesNotOverflow,The length of the statement  "			if (buffer.Offset < 0 || buffer.Count < 0) throw FailArgumentNotNonNegative(buffer.Offset < 0 ? "offset" : "count"' message); " is 125.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,FailBufferTooSmall,The length of the statement  "			return ReportFailure(typeof(ArgumentException)' ContractMessages.OffsetMustBeWithinBuffer' message' paramName' ContractMessages.ConditionArgBufferOverflow); " is 156.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,FailArgumentNull,The length of the statement  "			return ReportFailure(typeof(ArgumentNullException)' ContractMessages.ValueCannotBeNull' message' paramName' ContractMessages.ConditionNotNull); " is 143.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,ReportFailure,The length of the statement  "			string str = SRC.ContractHelper.RaiseContractFailedEvent(SDC.ContractFailureKind.Precondition' userMessage ?? msg' conditionTxt' null); " is 135.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,ReportFailure,The length of the statement  "				// note: on ne spam les logs si on est en train de unit tester ! (vu qu'on va provoquer intentionellement plein d'erreurs!) " is 123.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,FallbackForUnknownException,The length of the statement  "			if (System.Diagnostics.Debugger.IsAttached) System.Diagnostics.Debugger.Break(); // README: Si vous tombez ici' c'est que l'appelant a spécifié un type d'Exception qu'on n'arrive pas a construire! il faudrait peut être changer le type... " is 237.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,RaiseContractFailure,The length of the statement  "					// README: Si vous breakpointez ici' il faut remonter plus haut dans la callstack' et trouver la fonction invoque Contract.xxx(...) " is 131.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,RaiseContractFailure,The length of the statement  "					// note: à partir de VS 2015 Up2' [DebuggerNonUserCode] n'est plus respecté si la regkey AlwaysEnableExceptionCallbacksOutsideMyCode n'est pas égale à 1' pour améliorer les perfs. " is 179.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,RaiseContractFailure,The length of the statement  "					// cf "How to Suppress Ignorable Exceptions with DebuggerNonUserCode" dans https://blogs.msdn.microsoft.com/visualstudioalm/2016/02/12/using-the-debuggernonusercode-attribute-in-visual-studio-2015/ " is 197.
Long Statement,Doxense.Diagnostics.Contracts,Contract,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Contract.cs,RaiseContractFailure,The length of the statement  "					// uniquement si on F5 depuis VS' car sinon cela cause problèmes avec le TestRunner de R# (qui popup les assertion fail!) " is 121.
Long Statement,Doxense.Diagnostics.Contracts,ThrowHelper,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\ThrowHelper.cs,IndexOutOfRangeException,The length of the statement  "			return new IndexOutOfRangeException("Index was out of range. Must be non-negative and less than the size of the collection."); " is 126.
Long Statement,Doxense.Diagnostics.Contracts,ThrowHelper,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\ThrowHelper.cs,ArgumentOutOfRangeIndex,The length of the statement  "			return new ArgumentOutOfRangeException("index"' index' "Index was out of range. Must be non-negative and less than the size of the collection."); " is 145.
Long Statement,Doxense.Diagnostics.Contracts,ThrowHelper,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\ThrowHelper.cs,ArgumentInvalidOffLen,The length of the statement  "			return new ArgumentException("Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection."); " is 179.
Long Statement,Doxense.Runtime.Converters,ComparisonHelper,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\ComparisonHelper.cs,CreateTypeComparator,The length of the statement  "			// note: the most common scenarios will be when we compare 'A' to "A"' or (int)123 to (long)123' Guids in string or System.Guid form' ... " is 137.
Long Statement,Doxense.Runtime.Converters,ComparisonHelper,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\ComparisonHelper.cs,CreateTypeComparator,The length of the statement  "				return (x' y) => x == null ? y == null : y != null && (object.ReferenceEquals(x' y) || (TryAdaptToString(x) == TryAdaptToString(y))); " is 133.
Long Statement,Doxense.Runtime.Converters,ComparisonHelper,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\ComparisonHelper.cs,CreateTypeComparator,The length of the statement  "						return x == null ? y == null : y != null && TryAdaptToDecimal(x' t1' out double d1) && TryAdaptToDecimal(y' t2' out double d2) && d1 == d2; " is 139.
Long Statement,Doxense.Runtime.Converters,ComparisonHelper,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\ComparisonHelper.cs,CreateTypeComparator,The length of the statement  "						return x == null ? y == null : y != null && TryAdaptToInteger(x' t1' out long l1) && TryAdaptToInteger(y' t2' out long l2) && l1 == l2; " is 135.
Long Statement,Doxense.Runtime.Converters,TypeConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\TypeConverters.cs,RegisterDefaultConverters,The length of the statement  "			RegisterUnsafe<string' byte[]>((value) => Slice.FromString(value).GetBytes()); //REVIEW: string=>byte[] use UTF-8' but byte[]=>string uses Base64 ? " is 147.
Long Statement,Doxense.Runtime.Converters,TypeConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\TypeConverters.cs,RegisterDefaultConverters,The length of the statement  "			RegisterUnsafe<string' sbyte>((value) => string.IsNullOrEmpty(value) ? default(sbyte) : sbyte.Parse(value' CultureInfo.InvariantCulture)); " is 138.
Long Statement,Doxense.Runtime.Converters,TypeConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\TypeConverters.cs,RegisterDefaultConverters,The length of the statement  "			RegisterUnsafe<string' byte>((value) => string.IsNullOrEmpty(value) ? default(byte) : byte.Parse(value' CultureInfo.InvariantCulture)); " is 135.
Long Statement,Doxense.Runtime.Converters,TypeConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\TypeConverters.cs,RegisterDefaultConverters,The length of the statement  "			RegisterUnsafe<string' short>((value) => string.IsNullOrEmpty(value) ? default(short) : short.Parse(value' CultureInfo.InvariantCulture)); " is 138.
Long Statement,Doxense.Runtime.Converters,TypeConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\TypeConverters.cs,RegisterDefaultConverters,The length of the statement  "			RegisterUnsafe<string' ushort>((value) => string.IsNullOrEmpty(value) ? default(ushort) : ushort.Parse(value' CultureInfo.InvariantCulture)); " is 141.
Long Statement,Doxense.Runtime.Converters,TypeConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\TypeConverters.cs,RegisterDefaultConverters,The length of the statement  "			RegisterUnsafe<string' int>((value) => string.IsNullOrEmpty(value) ? default(int) : int.Parse(value' CultureInfo.InvariantCulture)); " is 132.
Long Statement,Doxense.Runtime.Converters,TypeConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\TypeConverters.cs,RegisterDefaultConverters,The length of the statement  "			RegisterUnsafe<string' uint>((value) => string.IsNullOrEmpty(value) ? default(uint) : uint.Parse(value' CultureInfo.InvariantCulture)); " is 135.
Long Statement,Doxense.Runtime.Converters,TypeConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\TypeConverters.cs,RegisterDefaultConverters,The length of the statement  "			RegisterUnsafe<string' long>((value) => string.IsNullOrEmpty(value) ? default(long) : long.Parse(value' CultureInfo.InvariantCulture)); " is 135.
Long Statement,Doxense.Runtime.Converters,TypeConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\TypeConverters.cs,RegisterDefaultConverters,The length of the statement  "			RegisterUnsafe<string' ulong>((value) => string.IsNullOrEmpty(value) ? default(ulong) : ulong.Parse(value' CultureInfo.InvariantCulture)); " is 138.
Long Statement,Doxense.Runtime.Converters,TypeConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\TypeConverters.cs,RegisterDefaultConverters,The length of the statement  "			RegisterUnsafe<string' float>((value) => string.IsNullOrEmpty(value) ? default(float) : float.Parse(value' NumberStyles.Float' CultureInfo.InvariantCulture)); " is 158.
Long Statement,Doxense.Runtime.Converters,TypeConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\TypeConverters.cs,RegisterDefaultConverters,The length of the statement  "			RegisterUnsafe<string' double>((value) => string.IsNullOrEmpty(value) ? default(double) : double.Parse(value' NumberStyles.Float' CultureInfo.InvariantCulture)); " is 161.
Long Statement,Doxense.Runtime.Converters,TypeConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\TypeConverters.cs,RegisterDefaultConverters,The length of the statement  "			RegisterUnsafe<string' decimal>((value) => string.IsNullOrEmpty(value) ? default(decimal) : decimal.Parse(value' NumberStyles.Float' CultureInfo.InvariantCulture)); " is 164.
Long Statement,Doxense.Runtime.Converters,TypeConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\TypeConverters.cs,RegisterDefaultConverters,The length of the statement  "			RegisterUnsafe<string' System.Net.IPAddress>((value) => string.IsNullOrEmpty(value) ? default(System.Net.IPAddress) : System.Net.IPAddress.Parse(value)); " is 153.
Long Statement,Doxense.Runtime.Converters,TypeConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\TypeConverters.cs,RegisterDefaultConverters,The length of the statement  "			RegisterUnsafe<byte[]' string>((value) => value == null ? default(string) : value.Length == 0 ? string.Empty : System.Convert.ToBase64String(value)); //REVIEW: string=>byte[] use UTF-8' but byte[]=>string uses Base64 ? " is 218.
Long Statement,Doxense.Runtime.Converters,TypeConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\TypeConverters.cs,RegisterDefaultConverters,The length of the statement  "			RegisterUnsafe<byte[]' Guid>((value) => value == null || value.Length == 0 ? default(Guid) : new Uuid128(value).ToGuid()); " is 122.
Long Statement,Doxense.Runtime.Converters,TypeConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\TypeConverters.cs,RegisterDefaultConverters,The length of the statement  "			RegisterUnsafe<byte[]' TimeSpan>((value) => value == null ? TimeSpan.Zero : TimeSpan.FromTicks(value.AsSlice().ToInt64())); " is 123.
Long Statement,Doxense.Runtime.Converters,TypeConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\TypeConverters.cs,RegisterDefaultConverters,The length of the statement  "			RegisterUnsafe<byte[]' System.Net.IPAddress>((value) => value == null || value.Length == 0 ? default(System.Net.IPAddress) : new System.Net.IPAddress(value)); " is 158.
Long Statement,Doxense.Runtime.Converters,TypeConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\TypeConverters.cs,RegisterDefaultConverters,The length of the statement  "			RegisterUnsafe<Guid' System.Net.IPAddress>((value) => new System.Net.IPAddress(new Uuid128(value).ToByteArray())); //REVIEW: custom converter for Guid=>IPv6? " is 157.
Long Statement,Doxense.Runtime.Converters,TypeConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\TypeConverters.cs,RegisterDefaultConverters,The length of the statement  "			RegisterUnsafe<Uuid128' System.Net.IPAddress>((value) => new System.Net.IPAddress(value.ToByteArray())); //REVIEW: custom converter for Guid=>IPv6? " is 147.
Long Statement,Doxense.Runtime.Converters,TypeConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\TypeConverters.cs,RegisterDefaultConverters,The length of the statement  "			RegisterUnsafe<Slice' System.Net.IPAddress>((value) => !value.IsNullOrEmpty ? new System.Net.IPAddress(value.GetBytesOrEmpty()) : null); " is 136.
Long Statement,Doxense.Runtime.Converters,TypeConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\TypeConverters.cs,GetConverter,The length of the statement  "			if (!Converters.TryGetValue(new ComparisonHelper.TypePair(typeof(TInput)' typeof(TOutput))' out ITypeConverter converter)) " is 122.
Long Statement,Doxense.Runtime.Converters,TypeConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\TypeConverters.cs,Convert,The length of the statement  "			//note: we expect that' in a lot of calls' TInput == TOutput so expect the JIT to optimize this away completely (only in Release builds) " is 136.
Long Statement,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The length of the statement  "			return (a ? 1 : 0) | (b ? 2 : 0) | (c ? 4 : 0) | (d ? 8 : 0) | (e ? 16 : 0) | (f ? 32 : 0) | (g ? 64 : 0) | (h ? 128 : 0); " is 122.
Long Statement,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,CreateUnsafe,The length of the statement  "			Contract.Requires(buffer != null && (uint) offset <= (uint) buffer.Length && (uint) count <= (uint) (buffer.Length - offset)); " is 126.
Long Statement,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromStream,The length of the statement  "			if (data.Length > int.MaxValue) throw ThrowHelper.InvalidOperationException("Streams of more than 2GB are not supported"); " is 122.
Long Statement,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromStreamAsync,The length of the statement  "			if (data.Length > int.MaxValue) throw ThrowHelper.InvalidOperationException("Streams of more than 2GB are not supported"); " is 122.
Long Statement,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,MalformedSlice,The length of the statement  "			// If you break here' that means that a slice is invalid (negative count' offset' ...)' which may be a sign of memory corruption! " is 129.
Long Statement,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromBase64,The length of the statement  "			return base64String == null ? default : base64String.Length == 0 ? MutableSlice.Empty : Convert.FromBase64String(base64String).AsMutableSlice(); " is 144.
Long Statement,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed32,The length of the statement  "			return new MutableSlice(new byte[4] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24) }' 0' 4); " is 125.
Long Statement,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed32BE,The length of the statement  "			return new MutableSlice(new byte[4] { (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value' }' 0' 4); " is 126.
Long Statement,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU32,The length of the statement  "			return new MutableSlice(new byte[4] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24) }' 0' 4); " is 125.
Long Statement,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU32BE,The length of the statement  "			return new MutableSlice(new byte[4] { (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 4); " is 125.
Long Statement,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64,The length of the statement  "					return new MutableSlice(new byte[5] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32) }' 0' 5); " is 147.
Long Statement,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64,The length of the statement  "					return new MutableSlice(new byte[6] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40) }' 0' 6); " is 169.
Long Statement,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64,The length of the statement  "					return new MutableSlice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7); " is 191.
Long Statement,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed64,The length of the statement  "			return new MutableSlice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8); " is 213.
Long Statement,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64BE,The length of the statement  "					return new MutableSlice(new byte[5] { (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 5); " is 147.
Long Statement,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64BE,The length of the statement  "					return new MutableSlice(new byte[6] { (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 6); " is 169.
Long Statement,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64BE,The length of the statement  "					return new MutableSlice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7); " is 191.
Long Statement,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed64BE,The length of the statement  "			return new MutableSlice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8); " is 213.
Long Statement,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64,The length of the statement  "				return new MutableSlice(new byte[5] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32) }' 0' 5); " is 147.
Long Statement,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64,The length of the statement  "				return new MutableSlice(new byte[6] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40) }' 0' 6); " is 169.
Long Statement,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64,The length of the statement  "				return new MutableSlice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7); " is 191.
Long Statement,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU64,The length of the statement  "			return new MutableSlice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8); " is 213.
Long Statement,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64BE,The length of the statement  "				return new MutableSlice(new byte[5] { (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 5); " is 147.
Long Statement,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64BE,The length of the statement  "				return new MutableSlice(new byte[6] { (byte)(value >> 40)' (byte)(value >> 32)' (byte)(value >> 24)' (byte)(value >> 16)' (byte)(value >> 8)' (byte)value }' 0' 6); " is 163.
Long Statement,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64BE,The length of the statement  "				return new MutableSlice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7); " is 191.
Long Statement,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU64BE,The length of the statement  "			return new MutableSlice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8); " is 213.
Long Statement,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128,The length of the statement  "					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)' " is 144.
Long Statement,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128,The length of the statement  "					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)' " is 144.
Long Statement,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128BE,The length of the statement  "					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)' " is 144.
Long Statement,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128BE,The length of the statement  "					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)' " is 144.
Long Statement,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ConvertByteStringChecked,The length of the statement  "			throw ThrowHelper.FormatException("The specified string contains characters that cannot be safely truncated to 8 bits. If you are encoding natural text' you should use UTF-8 encoding."); " is 186.
Long Statement,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToBool,The length of the statement  "			//TODO: consider checking if the slice consist of only zeroes ? (ex: Slice.FromFixed32(0) could be considered falsy ...) " is 120.
Long Statement,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToGuid,The length of the statement  "				// we need to swap the byte order of the Data1' Data2 and Data3 chunks' to ensure that Guid.ToString() will return the proper value. " is 132.
Long Statement,System,MutableSliceExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.cs,AsMutableSlice,The length of the statement  "			if ((uint) offset >= (uint) bytes.Length || (uint) count > (uint) (bytes.Length - offset)) UnsafeHelpers.Errors.ThrowOffsetOutsideSlice(); " is 138.
Long Statement,System,MutableSliceExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.cs,AsMutableSlice,The length of the statement  "			if (offset >= (uint) bytes.Length || count > ((uint) bytes.Length - offset)) UnsafeHelpers.Errors.ThrowOffsetOutsideSlice(); " is 124.
Long Statement,System,MutableSliceExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.cs,AsMutableSlice,The length of the statement  "			// If somehow the arguments were corrupted (intentionally or not)' then the same problem could have happened with the slice anyway! " is 131.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,CreateUnsafe,The length of the statement  "			Contract.Requires(buffer != null && (uint) offset <= (uint) buffer.Length && (uint) count <= (uint) (buffer.Length - offset)); " is 126.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Join,The length of the statement  "			//note: we want to make sure the buffer of the writer will be the exact size (so that we can use the result as a byte[] without copying again) " is 142.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Join,The length of the statement  "			if (startIndex < 0) throw ThrowHelper.ArgumentOutOfRangeException(nameof(startIndex)' startIndex' "Start index must be a positive integer"); " is 140.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Join,The length of the statement  "			if (startIndex > values.Length - count) throw ThrowHelper.ArgumentOutOfRangeException(nameof(startIndex)' startIndex' "Start index must fit within the array"); " is 159.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Join,The length of the statement  "			//note: we want to make sure the buffer of the writer will be the exact size (so that we can use the result as a byte[] without copying again) " is 142.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,JoinBytes,The length of the statement  "			if (startIndex < 0) throw ThrowHelper.ArgumentOutOfRangeException(nameof(startIndex)' startIndex' "Start index must be a positive integer"); " is 140.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,JoinBytes,The length of the statement  "			if (startIndex > values.Length - count) throw ThrowHelper.ArgumentOutOfRangeException(nameof(startIndex)' startIndex' "Start index must fit within the array"); " is 159.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,JoinBytes,The length of the statement  "			//note: we want to make sure the buffer of the writer will be the exact size (so that we can use the result as a byte[] without copying again) " is 142.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Split,The length of the statement  "			if (separator.Count <= 0) throw ThrowHelper.ArgumentException(nameof(separator)' "Separator must have at least one byte"); " is 122.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Split,The length of the statement  "			if (options < StringSplitOptions.None || options > StringSplitOptions.RemoveEmptyEntries) throw ThrowHelper.ArgumentException(nameof(options)); " is 143.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromStream,The length of the statement  "			if (data.Length > int.MaxValue) throw ThrowHelper.InvalidOperationException("Streams of more than 2GB are not supported"); " is 122.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromStreamAsync,The length of the statement  "			if (data.Length > int.MaxValue) throw ThrowHelper.InvalidOperationException("Streams of more than 2GB are not supported"); " is 122.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,MalformedSlice,The length of the statement  "			// If you break here' that means that a slice is invalid (negative count' offset' ...)' which may be a sign of memory corruption! " is 129.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromBase64,The length of the statement  "			return base64String == null ? default : base64String.Length == 0 ? Empty : new Slice(Convert.FromBase64String(base64String)); " is 125.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt32,The length of the statement  "					//TODO: possible micro optimization is for values like 0x100' 0x201' 0x1413 or 0x4342' where we could use 2 consecutive bytes in the ByteSprite' " is 144.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt32BE,The length of the statement  "					//TODO: possible micro optimization is for values like 0x100' 0x201' 0x1413 or 0x4342' where we could use 2 consecutive bytes in the ByteSprite' " is 144.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64,The length of the statement  "					return new Slice(new byte[5] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32) }' 0' 5); " is 140.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64,The length of the statement  "					return new Slice(new byte[6] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40) }' 0' 6); " is 162.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64,The length of the statement  "					return new Slice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7); " is 184.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed64,The length of the statement  "			return new Slice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8); " is 206.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64BE,The length of the statement  "					return new Slice(new byte[5] { (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 5); " is 140.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64BE,The length of the statement  "					return new Slice(new byte[6] { (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 6); " is 162.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64BE,The length of the statement  "					return new Slice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7); " is 184.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed64BE,The length of the statement  "			return new Slice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8); " is 206.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64,The length of the statement  "				return new Slice(new byte[5] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32) }' 0' 5); " is 140.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64,The length of the statement  "				return new Slice(new byte[6] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40) }' 0' 6); " is 162.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64,The length of the statement  "				return new Slice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7); " is 184.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU64,The length of the statement  "			return new Slice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8); " is 206.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64BE,The length of the statement  "				return new Slice(new byte[5] { (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 5); " is 140.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64BE,The length of the statement  "				return new Slice(new byte[6] { (byte)(value >> 40)' (byte)(value >> 32)' (byte)(value >> 24)' (byte)(value >> 16)' (byte)(value >> 8)' (byte)value }' 0' 6); " is 156.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64BE,The length of the statement  "				return new Slice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7); " is 184.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU64BE,The length of the statement  "			return new Slice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8); " is 206.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128,The length of the statement  "					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)' " is 144.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128,The length of the statement  "					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)' " is 144.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128BE,The length of the statement  "					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)' " is 144.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128BE,The length of the statement  "					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)' " is 144.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ConvertByteStringChecked,The length of the statement  "			throw ThrowHelper.FormatException("The specified string contains characters that cannot be safely truncated to 8 bits. If you are encoding natural text' you should use UTF-8 encoding."); " is 186.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,PrettyPrint,The length of the statement  "				return EscapeString(new StringBuilder(count).Append('\'')' buffer' offset + 3' Math.Min(count - 3' maxLen)' Slice.Utf8NoBomEncoding).Append('\'').ToString(); " is 157.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,PrettyPrint,The length of the statement  "				if ((buffer[offset] == '{' && buffer[offset + count - 1] == '}') || (buffer[offset] == '[' && buffer[offset + count - 1] == ']')) " is 129.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,PrettyPrint,The length of the statement  "						// sometimes' binary data "looks" like valid JSON but is not' so we just ignore it (even if we may have done a bunch of work for nothing) " is 137.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,PrettyPrint,The length of the statement  "				return EscapeString(new StringBuilder(count + 2).Append('\'')' buffer' offset' count' Slice.Utf8NoBomEncoding).Append('\'').ToString(); " is 135.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,PrettyPrint,The length of the statement  "				return EscapeString(new StringBuilder(count + 2).Append('\'')' buffer' offset' maxLen' Slice.Utf8NoBomEncoding).Append("[\u2026]'").ToString(); " is 143.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToBool,The length of the statement  "			//TODO: consider checking if the slice consist of only zeroes ? (ex: Slice.FromFixed32(0) could be considered falsy ...) " is 120.
Long Statement,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToGuid,The length of the statement  "				// we need to swap the byte order of the Data1' Data2 and Data3 chunks' to ensure that Guid.ToString() will return the proper value. " is 132.
Long Statement,System,SliceExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.cs,AsSlice,The length of the statement  "			if ((uint) offset >= (uint) bytes.Length || (uint) count > (uint) (bytes.Length - offset)) UnsafeHelpers.Errors.ThrowOffsetOutsideSlice(); " is 138.
Long Statement,System,SliceExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.cs,AsSlice,The length of the statement  "			if (offset >= (uint) bytes.Length || count > ((uint) bytes.Length - offset)) UnsafeHelpers.Errors.ThrowOffsetOutsideSlice(); " is 124.
Long Statement,System,SliceExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.cs,AsSlice,The length of the statement  "			// If somehow the arguments were corrupted (intentionally or not)' then the same problem could have happened with the slice anyway! " is 131.
Long Statement,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,ToByteArray,The length of the statement  "			Contract.Ensures(bytes != null && bytes.Length == 8); // HACKHACK: for perf reasons' we rely on the fact that Slice.FromFixedU64BE() allocates a new 8-byte array that we can return without copying " is 196.
Long Statement,System,RandomGenerator,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,NewUuid,The length of the statement  "					//note: do *NOT* call GetBytes(byte[]' int' int) because it creates creates a temp buffer' calls GetBytes(byte[]) and copy the result back! (as of .NET 4.7.1) " is 158.
Long Statement,System,RandomGenerator,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,NewUuid,The length of the statement  "					//note: do *NOT* call GetBytes(byte[]' int' int) because it creates creates a temp buffer' calls GetBytes(byte[]) and copy the result back! (as of .NET 4.7.1) " is 158.
Long Statement,System,RandomGenerator,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,NewUuid,The length of the statement  "					//note: do *NOT* call GetBytes(byte[]' int' int) because it creates creates a temp buffer' calls GetBytes(byte[]) and copy the result back! (as of .NET 4.7.1) " is 158.
Long Statement,System,VersionStamp,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\VersionStamp.cs,Incomplete,The length of the statement  "			return new VersionStamp(PLACEHOLDER_VERSION' PLACEHOLDER_ORDER' (ushort) userVersion' FLAGS_IS_INCOMPLETE | FLAGS_HAS_VERSION); " is 127.
Long Statement,System,VersionStamp,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\VersionStamp.cs,Custom,The length of the statement  "			return new VersionStamp(version' order' (ushort) userVersion' incomplete ? (ushort) (FLAGS_IS_INCOMPLETE | FLAGS_HAS_VERSION) : FLAGS_HAS_VERSION); " is 147.
Long Statement,System,VersionStamp,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\VersionStamp.cs,Custom,The length of the statement  "				return new VersionStamp(version' order' userVersion' incomplete ? (ushort) (FLAGS_IS_INCOMPLETE | FLAGS_HAS_VERSION) : FLAGS_HAS_VERSION); " is 138.
Long Statement,System,VersionStamp,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\VersionStamp.cs,Custom,The length of the statement  "				return new VersionStamp(version' order' userVersion' incomplete ? (ushort) (FLAGS_IS_INCOMPLETE | FLAGS_HAS_VERSION) : FLAGS_HAS_VERSION); " is 138.
Long Statement,System,VersionStamp,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\VersionStamp.cs,Complete,The length of the statement  "			Contract.Between(userVersion' 0' 0xFFFF' nameof(userVersion)' "Local version must fit in 16-bits' and cannot be 0xFFFF."); " is 122.
Long Statement,System,VersionStamp,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\VersionStamp.cs,ToUuid96,The length of the statement  "			if (!this.HasUserVersion) throw new InvalidOperationException("Cannot convert 80-bit VersionStamp into a 96-bit UUID."); " is 120.
Long Statement,System,VersionStamp,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\VersionStamp.cs,CompareTo,The length of the statement  "			// - incomplete stamps are stored AFTER resolved stamps (since if they commit they would have a value higher than any other stamp already in the database) " is 154.
Long Statement,System,VersionStamp,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\VersionStamp.cs,CompareTo,The length of the statement  "			// - stamps with no user version are sorted before stamps with user version if they have the same first 10 bytes' so (XXXX) is before (XXXX' 0) " is 143.
Long Statement,Doxense.Linq,AsyncEnumerable,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.cs,Singleton,The length of the statement  "			//note: we can't call this method Single<T>(T)' because then Single<T>(Func<T>) would be ambigous with Single<Func<T>>(T) " is 121.
Long Statement,Doxense.Linq,AsyncEnumerable,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.cs,ToAsyncEnumerable,The length of the statement  "			return Create<TInput' TOutput>(source' (iterator' ct) => new EnumerableIterator<TInput' TOutput>(iterator' lambda' ct)); " is 120.
Long Statement,Doxense.Linq,AsyncEnumerable,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.cs,SelectMany,The length of the statement  "			return Flatten<TSource' TCollection' TResult>(source' new AsyncTransformExpression<TSource'IEnumerable<TCollection>>(collectionSelector)' resultSelector); " is 154.
Long Statement,Doxense.Linq,AsyncEnumerable,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.cs,SelectMany,The length of the statement  "			return SelectMany<TSource' TCollection' TResult>(source' TaskHelpers.WithCancellation(asyncCollectionSelector)' resultSelector); " is 128.
Long Statement,Doxense.Linq,AsyncEnumerable,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.cs,SelectMany,The length of the statement  "			return Flatten<TSource' TCollection' TResult>(source' new AsyncTransformExpression<TSource'IEnumerable<TCollection>>(asyncCollectionSelector)' resultSelector); " is 159.
Long Statement,Doxense.Linq,AsyncEnumerable,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.cs,SelectAsync,The length of the statement  "			return new ParallelSelectAsyncIterator<TSource' TResult>(source' asyncSelector' options ?? new ParallelAsyncQueryOptions()); " is 124.
Long Statement,Doxense.Linq,AsyncEnumerable,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.cs,Prefetch,The length of the statement  "			if (prefetchCount <= 0) throw new ArgumentOutOfRangeException(nameof(prefetchCount)' prefetchCount' "Prefetch count must be at least one."); " is 140.
Long Statement,Doxense.Linq,AsyncEnumerable,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.cs,Window,The length of the statement  "			if (maxWindowSize <= 0) throw ThrowHelper.ArgumentOutOfRangeException(nameof(maxWindowSize)' maxWindowSize' "Window size must be at least one."); " is 145.
Long Statement,Doxense.Linq,AsyncEnumerable,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.cs,Batch,The length of the statement  "			if (batchSize <= 0) throw ThrowHelper.ArgumentOutOfRangeException(nameof(batchSize)' batchSize' "Batch size must be at least one."); " is 132.
Long Statement,Doxense.Linq,AsyncEnumerable,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.cs,AggregateAsync,The length of the statement  "			await using (var iterator = source is IConfigurableAsyncEnumerable<TSource> configurable ? configurable.GetAsyncEnumerator(ct' AsyncIterationHint.All) : source.GetAsyncEnumerator(ct)) " is 183.
Long Statement,Doxense.Linq,AsyncEnumerable,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.cs,AnyAsync,The length of the statement  "			await using (var iterator = source is IConfigurableAsyncEnumerable<T> configurable ? configurable.GetAsyncEnumerator(ct' AsyncIterationHint.Head) : source.GetAsyncEnumerator(ct)) " is 178.
Long Statement,Doxense.Linq,AsyncEnumerable,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.cs,AnyAsync,The length of the statement  "			await using (var iterator = source is IConfigurableAsyncEnumerable<T> configurable ? configurable.GetAsyncEnumerator(ct' AsyncIterationHint.Head) : source.GetAsyncEnumerator(ct)) " is 178.
Long Statement,Doxense.Linq,AsyncEnumerable,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.cs,NoneAsync,The length of the statement  "			await using (var iterator = source is IConfigurableAsyncEnumerable<T> configurable ? configurable.GetAsyncEnumerator(ct' AsyncIterationHint.Head) : source.GetAsyncEnumerator(ct)) " is 178.
Long Statement,Doxense.Linq,AsyncEnumerable,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.cs,NoneAsync,The length of the statement  "			await using (var iterator = source is IConfigurableAsyncEnumerable<T> configurable ? configurable.GetAsyncEnumerator(ct' AsyncIterationHint.Head) : source.GetAsyncEnumerator(ct)) " is 178.
Long Statement,Doxense.Linq,AsyncEnumerable,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.cs,Map,The length of the statement  "			return new WhereSelectAsyncIterator<TSource' TResult>(source' filter: null' transform: selector' limit: limit' offset: offset); " is 127.
Long Statement,Doxense.Linq,AsyncEnumerable,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.cs,Offset,The length of the statement  "			return new WhereSelectAsyncIterator<TResult' TResult>(source' filter: null' transform: new AsyncTransformExpression<TResult' TResult>(TaskHelpers.CachedTasks<TResult>.Identity)' limit: null' offset: offset); " is 207.
Long Statement,Doxense.Linq,AsyncEnumerable,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.cs,Limit,The length of the statement  "			return new WhereSelectAsyncIterator<TResult' TResult>(source' filter: null' transform: new AsyncTransformExpression<TResult' TResult>(TaskHelpers.CachedTasks<TResult>.Identity)' limit: limit' offset: null); " is 206.
Long Statement,Doxense.Linq,AsyncEnumerable,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.cs,Run,The length of the statement  "			await using (var iterator = source is IConfigurableAsyncEnumerable<TSource> configurable ? configurable.GetAsyncEnumerator(ct' mode) : source.GetAsyncEnumerator(ct)) " is 165.
Long Statement,Doxense.Linq,AsyncEnumerable,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.cs,Run,The length of the statement  "			await using (var iterator = source is IConfigurableAsyncEnumerable<TSource> configurable ? configurable.GetAsyncEnumerator(ct' mode) : source.GetAsyncEnumerator(ct)) " is 165.
Long Statement,Doxense.Linq,AsyncEnumerable,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.cs,Run,The length of the statement  "			await using (var iterator = source is IConfigurableAsyncEnumerable<TSource> configurable ? configurable.GetAsyncEnumerator(ct' mode) : source.GetAsyncEnumerator(ct)) " is 165.
Long Statement,Doxense.Linq,AsyncEnumerable,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.cs,Run,The length of the statement  "			await using (var iterator = source is IConfigurableAsyncEnumerable<TSource> configurable ? configurable.GetAsyncEnumerator(ct' mode) : source.GetAsyncEnumerator(ct)) " is 165.
Long Statement,Doxense.Linq,AsyncEnumerable,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.cs,Head,The length of the statement  "			await using (var iterator = source is IConfigurableAsyncEnumerable<TSource> configurable ? configurable.GetAsyncEnumerator(ct' AsyncIterationHint.Head) : source.GetAsyncEnumerator(ct)) " is 184.
Long Statement,Doxense.Linq,AsyncEnumerable,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.cs,Head,The length of the statement  "						if (await iterator.MoveNextAsync().ConfigureAwait(false)) throw new InvalidOperationException("The sequence contained more than one element"); " is 142.
Long Statement,Doxense.Linq,Buffer<T>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.Iterators.cs,ToList,The length of the statement  "				{ // there is no List<T>.AddRange(buffer' offset' count)' and copying in a tmp buffer would waste the memory we tried to save with the buffer " is 141.
Long Statement,Doxense.Linq,Buffer<T>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.Iterators.cs,ToList,The length of the statement  "				  // also' for most of the small queries' like FirstOrDefault()/SingleOrDefault()' count will be 1 (or very small) so calling Add(T) will still be optimum " is 152.
Long Statement,Doxense.Linq,Buffer<T>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.Iterators.cs,ToHashSet,The length of the statement  "			{ // there is no List<T>.AddRange(buffer' offset' count)' and copying in a tmp buffer would waste the memory we tried to save with the buffer " is 141.
Long Statement,Doxense.Linq,Buffer<T>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.Iterators.cs,ToHashSet,The length of the statement  "			  // also' for most of the small queries' like FirstOrDefault()/SingleOrDefault()' count will be 1 (or very small) so calling Add(T) will still be optimum " is 152.
Long Statement,Doxense.Linq,OrderedSequence<TSource>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.OrderedSequence.cs,GetAsyncEnumerator,The length of the statement  "					enumerator = m_source is IConfigurableAsyncEnumerable<TSource> configurable ? configurable.GetAsyncEnumerator(ct' mode) : m_source.GetAsyncEnumerator(ct); " is 154.
Long Statement,Doxense.Linq,OrderedEnumerator<TSource>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\AsyncEnumerable.OrderedSequence.cs,MoveNextAsync,The length of the statement  "				// Firt call will be slow (and async)' but the rest of the calls will use the results already sorted in memory' and should be as fast as possible! " is 146.
Long Statement,Doxense.Linq.Async,AsyncSequence<TSource;TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\AsyncSequence.cs,GetAsyncEnumerator,The length of the statement  "				inner = this.Source is IConfigurableAsyncEnumerable<TSource> configurable ? configurable.GetAsyncEnumerator(ct' mode) : this.Source.GetAsyncEnumerator(ct); " is 155.
Long Statement,Doxense.Linq.Async.Expressions,AsyncFilterExpression<TSource>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Expressions\AsyncFilterExpression.cs,AndAlso,The length of the statement  "					return new AsyncFilterExpression<TSource>(async (x' ct) => (await f(x' ct).ConfigureAwait(false)) && (await g(x' ct).ConfigureAwait(false))); " is 141.
Long Statement,Doxense.Linq.Async.Expressions,AsyncFilterExpression<TSource>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Expressions\AsyncFilterExpression.cs,OrElse,The length of the statement  "					return new AsyncFilterExpression<TSource>(async (x' ct) => (await f(x' ct).ConfigureAwait(false)) || (await g(x' ct).ConfigureAwait(false))); " is 141.
Long Statement,Doxense.Linq.Async.Expressions,AsyncObserverExpression<TSource>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Expressions\AsyncObserverExpression.cs,Then,The length of the statement  "					return new AsyncObserverExpression<TSource>(async (x' ct) => { await f(x' ct).ConfigureAwait(false); await g(x' ct).ConfigureAwait(false); }); " is 142.
Long Statement,Doxense.Linq.Async.Expressions,AsyncTransformExpression<TSource;TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Expressions\AsyncTransformExpression.cs,IsIdentity,The length of the statement  "			//note: Identity Function is not async' and is only possible if TSource == TResult' so we can skip checking the types ourselves... " is 130.
Long Statement,Doxense.Linq.Async.Expressions,AsyncTransformExpression<TSource;TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Expressions\AsyncTransformExpression.cs,Cast,The length of the statement  "					return new AsyncTransformExpression<TSource' TCasted>(async (x' ct) => (TCasted)(object)(await f(x' ct).ConfigureAwait(false))); " is 128.
Long Statement,Doxense.Linq.Async.Expressions,AsyncTransformExpression<TSource;TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Expressions\AsyncTransformExpression.cs,Then,The length of the statement  "					return new AsyncTransformExpression<TSource' TOuter>(async (x' ct) => await g(await f(x' ct).ConfigureAwait(false)' ct).ConfigureAwait(false)); " is 143.
Long Statement,Doxense.Linq.Async.Iterators,AsyncFilterIterator<TSource;TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\AsyncFilterIterator.cs,StartInner,The length of the statement  "			// filtering changes the number of items' so that means that' even if the underlying caller wants one item' we may need to read more. " is 133.
Long Statement,Doxense.Linq.Async.Iterators,AsyncFilterIterator<TSource;TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\AsyncFilterIterator.cs,StartInner,The length of the statement  "			// => change all "Head" requests into "Iterator" to prevent any wrong optimizations by the underlying source (ex: using a too small batch size) " is 143.
Long Statement,Doxense.Linq.Async.Iterators,AsyncIterator<TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\AsyncIterator.cs,SelectMany,The length of the statement  "			return AsyncEnumerable.Flatten<TResult' TNew>(this' new AsyncTransformExpression<TResult'IEnumerable<TNew>>(asyncSelector)); " is 124.
Long Statement,Doxense.Linq.Async.Iterators,AsyncIterator<TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\AsyncIterator.cs,SelectMany,The length of the statement  "			return AsyncEnumerable.Flatten<TResult' TCollection' TNew>(this' new AsyncTransformExpression<TResult'IEnumerable<TCollection>>(collectionSelector)' resultSelector); " is 165.
Long Statement,Doxense.Linq.Async.Iterators,AsyncIterator<TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\AsyncIterator.cs,SelectMany,The length of the statement  "			return AsyncEnumerable.Flatten<TResult' TCollection' TNew>(this' new AsyncTransformExpression<TResult'IEnumerable<TCollection>>(asyncCollectionSelector)' resultSelector); " is 170.
Long Statement,Doxense.Linq.Async.Iterators,DistinctAsyncIterator<TSource>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\DistinctAsyncIterator.cs,ExecuteAsync,The length of the statement  "			await using (var iter = m_source is IConfigurableAsyncEnumerable<TSource> configurable ? configurable.GetAsyncEnumerator(ct' mode) : m_source.GetAsyncEnumerator(ct)) " is 165.
Long Statement,Doxense.Linq.Async.Iterators,DistinctAsyncIterator<TSource>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\DistinctAsyncIterator.cs,ExecuteAsync,The length of the statement  "			await using (var iter = m_source is IConfigurableAsyncEnumerable<TSource> configurable ? configurable.GetAsyncEnumerator(ct' mode) : m_source.GetAsyncEnumerator(ct)) " is 165.
Long Statement,Doxense.Linq.Async.Iterators,ExceptAsyncIterator<TSource;TKey;TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\ExceptAsyncIterator.cs,Clone,The length of the statement  "			return new ExceptAsyncIterator<TSource' TKey' TResult>(m_sources' m_limit' m_keySelector' m_resultSelector' m_keyComparer); " is 123.
Long Statement,Doxense.Linq.Async.Iterators,IntersectAsyncIterator<TSource;TKey;TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\IntersectAsyncIterator.cs,Clone,The length of the statement  "			return new IntersectAsyncIterator<TSource' TKey' TResult>(m_sources' m_limit' m_keySelector' m_resultSelector' m_keyComparer); " is 126.
Long Statement,Doxense.Linq.Async.Iterators,MergeAsyncIterator<TSource;TKey;TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\MergeAsyncIterator.cs,OnFirstAsync,The length of the statement  "						Iterator = sources[i] is IConfigurableAsyncEnumerable<TSource> configurable ? configurable.GetAsyncEnumerator(m_ct' mode) : sources[i].GetAsyncEnumerator(m_ct) " is 159.
Long Statement,Doxense.Linq.Async.Iterators,MergeSortAsyncIterator<TSource;TKey;TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\MergeSortAsyncIterator.cs,Clone,The length of the statement  "			return new MergeSortAsyncIterator<TSource' TKey' TResult>(m_sources' m_limit' m_keySelector' m_resultSelector' m_keyComparer); " is 126.
Long Statement,Doxense.Linq.Async.Iterators,ParallelSelectAsyncIterator<TSource;TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\ParallelSelectAsyncIterator.cs,OnFirstAsync,The length of the statement  "			m_processingQueue = new AsyncTransformQueue<TSource' TResult>(m_taskSelector' m_options.MaxConcurrency ?? DefaultMaxConcurrency' m_options.Scheduler); " is 150.
Long Statement,Doxense.Linq.Async.Iterators,PrefetchingAsyncIterator<TInput>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\PrefetchingAsyncIterator.cs,PrefetchNextItemsAsync,The length of the statement  "			// read items from the source until the next call to Inner.MoveNext() is not already complete' or we have filled our prefetch buffer' then returns the first item in the buffer. " is 176.
Long Statement,Doxense.Linq.Async.Iterators,PrefetchingAsyncIterator<TInput>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\PrefetchingAsyncIterator.cs,PrefetchNextItemsAsync,The length of the statement  "			// most db queries will read items by chunks' so there is a high chance the the next following calls to MoveNext() will already be completed " is 140.
Long Statement,Doxense.Linq.Async.Iterators,PrefetchingAsyncIterator<TInput>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\PrefetchingAsyncIterator.cs,PrefetchNextItemsAsync,The length of the statement  "			// as long as this is the case' and that our buffer is not full' continue eating items. Stop only when we end up with a pending task. " is 133.
Long Statement,Doxense.Linq.Async.Iterators,PrefetchingAsyncIterator<TInput>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\PrefetchingAsyncIterator.cs,PrefetchNextItemsAsync,The length of the statement  "				// we know the task is already completed' so we will immediately get the next result' or blow up if the inner iterator failed " is 125.
Long Statement,Doxense.Linq.Async.Iterators,PrefetchingAsyncIterator<TInput>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\PrefetchingAsyncIterator.cs,PrefetchNextItemsAsync,The length of the statement  "				//note: if inner blows up' we won't send any previously read items down the line. This may change the behavior of queries with a .Take(N) that would have stopped before reading the (N+1)th item that would have failed. " is 217.
Long Statement,Doxense.Linq.Async.Iterators,WhereSelectAsyncIterator<TSource;TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\WhereSelectAsyncIterator.cs,Where,The length of the statement  "			// also' since transform is done after filtering' we can only optimize if transform is null (not allowed!) or the identity function " is 131.
Long Statement,Doxense.Linq.Async.Iterators,WhereSelectAsyncIterator<TSource;TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\WhereSelectAsyncIterator.cs,Where,The length of the statement  "			if (m_limit == null && (m_offset == null || m_offset.Value == 0) && typeof(TSource) == typeof(TResult)) //BUGBUG: type comparison maybe should check derived classes also ? " is 171.
Long Statement,Doxense.Linq.Async.Iterators,WhereSelectAsyncIterator<TSource;TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\WhereSelectAsyncIterator.cs,Where,The length of the statement  "				var asyncFilter = new AsyncFilterExpression<TSource>((Func<TSource' CancellationToken' Task<bool>>)(Delegate)asyncPredicate); " is 125.
Long Statement,Doxense.Linq.Async.Iterators,WindowingAsyncIterator<TInput>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\WindowingAsyncIterator.cs,OnNextAsync,The length of the statement  "			// read items from the source until the next call to Inner.MoveNext() is not already complete' or we have filled our buffer " is 123.
Long Statement,Doxense.Linq.Async.Iterators,WindowingAsyncIterator<TInput>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\WindowingAsyncIterator.cs,OnNextAsync,The length of the statement  "			// most db queries will read items by chunks' so there is a high chance the the next following calls to MoveNext() will already be completed " is 140.
Long Statement,Doxense.Linq.Async.Iterators,WindowingAsyncIterator<TInput>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\WindowingAsyncIterator.cs,OnNextAsync,The length of the statement  "			// as long as this is the case' and that our buffer is not full' continue eating items. Stop only when we end up with a pending task. " is 133.
Long Statement,Doxense.Linq.Async.Iterators,WindowingAsyncIterator<TInput>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\WindowingAsyncIterator.cs,OnNextAsync,The length of the statement  "					//TODO: add heuristics to check if the batch is large enough to stop there' or if we should eat the latency and wait for the next wave of items to arrive! " is 154.
Long Statement,Doxense.Linq.Async.Iterators,WindowingAsyncIterator<TInput>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\WindowingAsyncIterator.cs,OnNextAsync,The length of the statement  "					// ex: we batch by 10' inner return 11 consecutive items. We will transform the first 10' then only fill the next batch with the 11th item because the 12th item is still not ready. " is 180.
Long Statement,Doxense.Linq.Async.Iterators,WindowingAsyncIterator<TInput>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\WindowingAsyncIterator.cs,OnNextAsync,The length of the statement  "				// we know the task is already completed' so we will immediately get the next result' or blow up if the inner iterator failed " is 125.
Long Statement,Doxense.Linq.Async.Iterators,WindowingAsyncIterator<TInput>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\WindowingAsyncIterator.cs,OnNextAsync,The length of the statement  "				//note: if inner blows up' we won't send any previously read items down the line. This may change the behavior of queries with a .Take(N) that would have stopped before reading the (N+1)th item that would have failed. " is 217.
Long Statement,Doxense.Memory,SliceBuffer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceBuffer.cs,Intern,The length of the statement  "				// note: we don't memoize the suffix' because in most case' it comes from a constant' and it would be a waste to copy it other and other again... " is 145.
Long Statement,Doxense.Memory,SliceListStream,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceListStream.cs,ReadByte,The length of the statement  "			if (m_position >= m_length || (m_offsetInCurrentSlice >= m_slices[m_indexOfCurrentSlice].Count && !AdvanceToNextSlice())) " is 121.
Long Statement,Doxense.Memory,SliceListStream,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceListStream.cs,ValidateBuffer,The length of the statement  "			if (offset > buffer.Length - count) throw ThrowHelper.ArgumentException(nameof(offset)' "Offset and count must fit inside the buffer"); " is 135.
Long Statement,Doxense.Memory,SliceStream,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceStream.cs,CopyToAsync,The length of the statement  "			if (!destination.CanWrite) throw new ArgumentException("The destination stream cannot be written to"' nameof(destination)); " is 123.
Long Statement,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteVarInt64,The length of the statement  "			//note: if the size if 64-bits' we probably expect values to always be way above 128 so no need to optimize for this case here " is 126.
Long Statement,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteVarAsciiInternal,The length of the statement  "				if (mask >= 128) throw ThrowHelper.ArgumentException(nameof(value)' "The specified string must only contain ASCII characters."); " is 128.
Long Statement,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteString,The length of the statement  "			// In order to estimate the required capacity' we try to guess for very small strings' but compute the actual value for larger strings' " is 135.
Long Statement,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteStringUtf8,The length of the statement  "			// In order to estimate the required capacity' we try to guess for very small strings' but compute the actual value for larger strings' " is 135.
Long Statement,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteStringUtf8,The length of the statement  "					// pour estimer la capacité' on fait une estimation a la louche pour des petites strings' mais on va calculer la bonne valeur pour des string plus grandes' " is 155.
Long Statement,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,FailCannotGrowBuffer,The length of the statement  "			// If you breakpoint here' that means that you probably have an unchecked maximum buffer size' or a runaway while(..) { append(..) } code in your layer code ! " is 158.
Long Statement,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,EnsureBufferIsValid,The length of the statement  "			if (count != 0 && (array == null || (uint) offset > (uint) array.Length || (uint) count > (uint) (array.Length - offset))) " is 122.
Long Statement,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,FromHexa,The length of the statement  "				if (i >= hexaString.Length) throw new ArgumentException("Hexadecimal string must be of even length"' nameof(hexaString)); " is 121.
Long Statement,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ComputeHashCode,The length of the statement  "			// => won't matter much for *ordered* dictionary that will probably use IComparer<T>.Compare(..) instead of the IEqalityComparer<T>.GetHashCode()/Equals() combo " is 160.
Long Statement,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint16Unsafe,The length of the statement  "			//TODO: we expect most values to be small (count or array length)' so we should optimize for single byte varints where byte[0] <= 127 should be inlined' and defer to a slower method if >= 128. " is 192.
Long Statement,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint32Unsafe,The length of the statement  "			//TODO: we expect most values to be small (count or array length)' so we should optimize for single byte varints where byte[0] <= 127 should be inlined' and defer to a slower method if >= 128. " is 192.
Long Statement,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Unsafe,The length of the statement  "			//note: we expect the value to be large (most frequent use it to decode a Sequence Number)' so there is no point in optimizing for single byte varints... " is 153.
Long Statement,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ByteSwap32,The length of the statement  "			//PERF: do not remove the local 'tmp' variable (reusing 'value' is 4X slower with RyuJit64 than introducing a tmp variable) " is 123.
Long Statement,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ByteSwap32,The length of the statement  "			//PERF: do not remove the local 'tmp' variable! Reusing 'value' is 4X slower with RyuJit64 than introducing a tmp variable " is 122.
Long Statement,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ByteSwap64,The length of the statement  "			//PERF: do not remove the local 'tmp' variable! Reusing 'value' is 4X slower with RyuJit64 than introducing a tmp variable " is 122.
Long Statement,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ByteSwap64,The length of the statement  "			//PERF: do not remove the local 'tmp' variable! Reusing 'value' is 4X slower with RyuJit64 than introducing a tmp variable " is 122.
Long Statement,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64Unsafe,The length of the statement  "			return value <= uint.MaxValue ? WriteOrderedUInt32Unsafe(cursor' (uint) value) : WriteOrderedUInt64UnsafeSlow(cursor' value); " is 125.
Long Statement,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The length of the statement  "					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]); " is 138.
Long Statement,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The length of the statement  "					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]); " is 165.
Long Statement,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The length of the statement  "					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]); " is 192.
Long Statement,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The length of the statement  "					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]); " is 219.
Long Statement,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,Nibble,The length of the statement  "			// We just need to tweak the value to have a bit that is different between digits and letters' and use that bit to compute the final offset of 0 or 9 " is 149.
Long Statement,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,IsAsciiString,The length of the statement  "			The following loop is optimized to produce the best x64 code with Deskop CLR RyuJitJIT (x64) that is currently in 4.6.2 (preview) " is 129.
Long Statement,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,IsAsciiString,The length of the statement  "			- At 18' we jump to the "INVALID" case' instead of doing "return false"' because current JIT produce better code that way " is 121.
Long Statement,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ConvertToByteString,The length of the statement  "			//note: this calls String::CtorCharCount() which in turn calls FastAllocateString(..)' but will not fill the buffer with 0s if 'char' == '\0' " is 141.
Long Statement,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ConvertToByteString,The length of the statement  "			//note: this calls String::CtorCharCount() which in turn calls FastAllocateString(..)' but will not fill the buffer with 0s if 'char' == '\0' " is 141.
Long Statement,Doxense.Memory,Errors,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,BufferOutOfBound,The length of the statement  "				return new InvalidOperationException("Attempt to write outside of the buffer' or at a position that would overflow past the end."); " is 131.
Long Statement,Doxense.Memory,Errors,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SliceOffsetNotNeg,The length of the statement  "				return new FormatException("The specified slice has a negative offset' which is not legal. This may be a side effect of memory corruption."); " is 141.
Long Statement,Doxense.Memory,Errors,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SliceCountNotNeg,The length of the statement  "				return new FormatException("The specified slice has a negative size' which is not legal. This may be a side effect of memory corruption."); " is 139.
Long Statement,Doxense.Memory,Errors,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ThrowSliceTooLargeForConversion,The length of the statement  "				throw new FormatException($"Cannot convert slice to value of type {typeof(T).Name} because it is larger than {size} bytes."); " is 125.
Long Statement,Doxense.Memory,Errors,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,BufferOffsetNotNeg,The length of the statement  "				return new ArgumentException("The specified segment has a negative offset' which is not legal. This may be a side effect of memory corruption."' "offset"); " is 155.
Long Statement,Doxense.Memory,Errors,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,BufferCountNotNeg,The length of the statement  "				return new ArgumentException("The specified segment has a negative size' which is not legal. This may be a side effect of memory corruption."' "count"); " is 152.
Long Statement,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,ToString,The length of the statement  "					   : (x >= 0 && x < StringConverters.SmallNumbers.Length ? StringConverters.SmallNumbers[(int) x] : x.ToString(NumberFormatInfo.InvariantInfo)); " is 141.
Long Statement,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,ToString,The length of the statement  "					   : (x >= 0 && x < StringConverters.SmallNumbers.Length ? StringConverters.SmallNumbers[(int)x] : x.ToString(NumberFormatInfo.InvariantInfo)); " is 140.
Long Statement,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,ToDouble,The length of the statement  "			return double.TryParse(value' NumberStyles.Float | NumberStyles.AllowThousands' culture' out double result) ? result : defaultValue; " is 132.
Long Statement,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,ToSingle,The length of the statement  "			return float.TryParse(value' NumberStyles.Float | NumberStyles.AllowThousands' culture' out float result) ? result : defaultValue; " is 130.
Long Statement,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,ToDecimal,The length of the statement  "			return decimal.TryParse(value' NumberStyles.Float | NumberStyles.AllowThousands' culture' out decimal result) ? result : defaultValue; " is 134.
Long Statement,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,ToDecimal,The length of the statement  "			return decimal.TryParse(value' NumberStyles.Float | NumberStyles.AllowThousands' culture' out decimal result) ? result : default(decimal?); " is 139.
Long Statement,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The length of the statement  "			if (date.Length < 4) { if (throwsFail) throw new FormatException("Date '" + date + "' must be at least 4 characters long"); else return false; } " is 144.
Long Statement,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The length of the statement  "				{ // Attempt a ParseExact even if the date is using an exotic representation ("Vendredi' 37 Trumaire 1789 à 3 heures moins le quart de l'après midi") " is 149.
Long Statement,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The length of the statement  "					result = DateTime.ParseExact(date' new[] { "D"' "F"' "f" }' culture ?? CultureInfo.InvariantCulture' DateTimeStyles.None); " is 122.
Long Statement,Doxense.Collections.Tuples.Encoding,PrefixedTuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\PrefixedTuple.cs,Equals,The length of the statement  "			return !object.ReferenceEquals(other' null) && ((IStructuralEquatable)this).Equals(other' SimilarValueComparer.Default); " is 120.
Long Statement,Doxense.Collections.Tuples.Encoding,SlicedTuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\SlicedTuple.cs,ToString,The length of the statement  "			//OPTIMIZE: this could be optimized' because it may be called a lot when logging is enabled on keys parsed from range reads " is 123.
Long Statement,Doxense.Collections.Tuples.Encoding,SlicedTuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\SlicedTuple.cs,Equals,The length of the statement  "			return !object.ReferenceEquals(other' null) && ((IStructuralEquatable)this).Equals(other' SimilarValueComparer.Default); " is 120.
Long Statement,Doxense.Collections.Tuples.Encoding,TupleEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,EncodeKeys,The length of the statement  "			// pre-allocate by guessing that each key will take at least 8 bytes. Even if 8 is too small' we should have at most one or two buffer resize " is 141.
Long Statement,Doxense.Collections.Tuples.Encoding,TupleEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,EncodeKeys,The length of the statement  "			// pre-allocate by guessing that each key will take at least 8 bytes. Even if 8 is too small' we should have at most one or two buffer resize " is 141.
Long Statement,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The length of the statement  "				if (count != 1 & count != 2) throw new ArgumentOutOfRangeException(nameof(count)' count' "Item count must be either 1 or 2"); " is 125.
Long Statement,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The length of the statement  "				if (count < 1 | count > 3) throw new ArgumentOutOfRangeException(nameof(count)' count' "Item count must be between 1 and 3"); " is 125.
Long Statement,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The length of the statement  "				if (count < 1 || count > 4) throw new ArgumentOutOfRangeException(nameof(count)' count' "Item count must be between 1 and 4"); " is 126.
Long Statement,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4;T5>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The length of the statement  "				if (count < 1 || count > 5) throw new ArgumentOutOfRangeException(nameof(count)' count' "Item count must be between 1 and 5"); " is 126.
Long Statement,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4;T5;T6>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The length of the statement  "				if (count < 1 || count > 6) throw new ArgumentOutOfRangeException(nameof(count)' count' "Item count must be between 1 and 6"); " is 126.
Long Statement,Doxense.Collections.Tuples.Encoding,TupleKeyEncoding,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleKeyEncoding.cs,GetValueEncoder,The length of the statement  "			if (typeof(TStorage) != typeof(Slice)) throw new NotSupportedException($"Tuple Encoding does not support {typeof(TStorage).Name} as a storage type."); " is 150.
Long Statement,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,GetSerializer,The length of the statement  "				encoder = delegate { throw new InvalidOperationException($"Does not know how to serialize values of type '{typeof(T).Name}' into keys"); }; " is 139.
Long Statement,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,GetSerializerFor,The length of the statement  "			var method = typeof(TuplePackers).GetMethod(nameof(SerializeTo)' BindingFlags.Static | BindingFlags.Public' binder: null' types: new[] { typeof(TupleWriter).MakeByRefType()' type }' modifiers: null); " is 199.
Long Statement,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,GetSerializerFor,The length of the statement  "					throw new InvalidOperationException($"Failed to compile fast tuple serializer {method.Name} for type '{type.Name}'."' e); " is 121.
Long Statement,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,GetSerializerFor,The length of the statement  "						throw new InvalidOperationException($"Failed to compile fast tuple serializer {method.Name} for type 'Nullable<{nullableType.Name}>'."' e); " is 139.
Long Statement,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,GetSerializerFor,The length of the statement  "				if (type == typeof(STuple) || (type.Name.StartsWith(nameof(STuple) + "`"' StringComparison.Ordinal) && type.Namespace == typeof(STuple).Namespace)) " is 147.
Long Statement,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,GetSerializerFor,The length of the statement  "							throw new InvalidOperationException($"Failed to compile fast tuple serializer {method.Name} for Tuple type '{type.Name}'."' e); " is 127.
Long Statement,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,GetSerializerFor,The length of the statement  "						throw new InvalidOperationException($"Failed to compile fast tuple serializer {method.Name} for Tuple type '{type.Name}'."' e); " is 127.
Long Statement,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,GetSerializerFor,The length of the statement  "			if (type == typeof(ValueTuple) || (type.Name.StartsWith(nameof(System.ValueTuple) + "`"' StringComparison.Ordinal) && type.Namespace == "System")) " is 146.
Long Statement,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,GetSerializerFor,The length of the statement  "						throw new InvalidOperationException($"Failed to compile fast tuple serializer {method.Name} for Tuple type '{type.Name}'."' e); " is 127.
Long Statement,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,FindSTupleSerializerMethod,The length of the statement  "			//note: we want to find the correct SerializeSTuple<...>(ref TupleWriter' (...')' but this cannot be done with Type.GetMethod(...) directly " is 139.
Long Statement,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,FindValueTupleSerializerMethod,The length of the statement  "			//note: we want to find the correct SerializeValueTuple<...>(ref TupleWriter' (...')' but this cannot be done with Type.GetMethod(...) directly " is 143.
Long Statement,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,SerializeTo,The length of the statement  "			// - In Release builds' this will be cleaned up and inlined by the JIT as a direct invokatino of the correct WriteXYZ method " is 124.
Long Statement,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,SerializeTo,The length of the statement  "			if (typeof(T) == typeof(VersionStamp)) { TupleParser.WriteVersionStamp(ref writer' (VersionStamp) (object) value); return; } " is 124.
Long Statement,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,SerializeTo,The length of the statement  "			if (typeof(T) == typeof(VersionStamp?)) { TupleParser.WriteVersionStamp(ref writer' (VersionStamp?) (object) value); return; } " is 126.
Long Statement,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,SerializeTo,The length of the statement  "			// - Since we are going to lose the TimeZone infos anyway' we can just store everything in UTC and let the caller deal with it " is 126.
Long Statement,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,SerializeTo,The length of the statement  "			// - Most other *nix uses the number of milliseconds since 1970-Jan-01 UTC' but if we store as an integer we will lose some precision (rounded to nearest millisecond) " is 166.
Long Statement,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,SerializeTo,The length of the statement  "			// - We could store the number of milliseconds as a floating point value' which would require support of Floating Points in the Tuple Encoding (currently a Draft) " is 162.
Long Statement,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,SerializeTo,The length of the statement  "			// - Other database engines store dates as a number of DAYS since Epoch' using a floating point number. This allows for quickly extracting the date by truncating the value' and the time by using the decimal part " is 211.
Long Statement,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,SerializeTo,The length of the statement  "			// => JS binding MAY support decoding of 64-bit floats in the future' in which case the value would be preserved exactly. " is 121.
Long Statement,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,SerializeTo,The length of the statement  "			// - Storing the number of milliseconds as an integer will round the precision to 1 millisecond' which is not acceptable " is 120.
Long Statement,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,SerializeTo,The length of the statement  "			// - We could store the the number of milliseconds as a floating point value' which would require support of Floating Points in the Tuple Encoding (currently a Draft) " is 166.
Long Statement,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,SerializeTo,The length of the statement  "			// - It is frequent for JSON APIs and other database engines to represent durations as a number of SECONDS' using a floating point number. " is 138.
Long Statement,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,SerializeTo,The length of the statement  "			// => could spare 17 bytes per key in indexes on GUID properties that are frequently missing or empty (== default(Guid)) " is 120.
Long Statement,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,GetDeserializer,The length of the statement  "			if ((type.Name == nameof(ValueTuple) || type.Name.StartsWith(nameof(ValueTuple) + "`"' StringComparison.Ordinal)) && type.Namespace == "System") " is 144.
Long Statement,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,MakeNotSupportedDeserializer,The length of the statement  "			return (_) => throw new InvalidOperationException($"Does not know how to deserialize keys into values of type {typeof(T).Name}"); " is 129.
Long Statement,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,MakeNullableDeserializer,The length of the statement  "			// We have a Decoder of T' but we have to transform it into a Decoder for Nullable<T>' which returns null if the slice is "nil"' or falls back to the underlying decoder if the slice contains something " is 200.
Long Statement,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,MakeNullableDeserializer,The length of the statement  "				Expression.Call(typeof(TuplePackers).GetMethod(nameof(IsNilSegment)' BindingFlags.Static | BindingFlags.NonPublic)' prmSlice)' " is 126.
Long Statement,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,Unpack,The length of the statement  "			if (reader.Input.HasMore) throw new FormatException("Parsing of tuple failed failed before reaching the end of the key"); " is 121.
Long Statement,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,UnpackSingle,The length of the statement  "			if (slicer.Input.HasMore) throw new FormatException("Parsing of singleton tuple failed before reaching the end of the key"); " is 124.
Long Statement,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,UnpackLast,The length of the statement  "			if (slicer.Input.HasMore) throw new FormatException("Parsing of tuple failed failed before reaching the end of the key"); " is 121.
Long Statement,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteSingle,The length of the statement  "			// This ensures that all negative numbers have their first byte < 0x80' and all positive numbers have their first byte >= 0x80 " is 126.
Long Statement,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteDouble,The length of the statement  "			// This ensures that all negative numbers have their first byte < 0x80' and all positive numbers have their first byte >= 0x80 " is 126.
Long Statement,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteDouble,The length of the statement  "			// note: we could use BitConverter.DoubleToInt64Bits(...)' but it does the same thing' and also it does not exist for floats... " is 127.
Long Statement,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,TryWriteUnescapedUtf8String,The length of the statement  "			// * We will only attempt to optimze strings that don't have any 00 to escape to 00 FF. For these' we will fallback to converting to byte[] then escaping. " is 154.
Long Statement,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,TryWriteUnescapedUtf8String,The length of the statement  "			// * Since .NET's strings are UTF-16' the max possible UNICODE value to encode is 0xFFFF' which takes 3 bytes in UTF-8 (EF BF BF) " is 129.
Long Statement,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,TryWriteUnescapedUtf8String,The length of the statement  "			// * Most western europe languages have only a few non-ASCII chars here and there' and most of them will only use 2 bytes (ex: 'é' => 'C3 A9') " is 142.
Long Statement,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,TryWriteUnescapedUtf8String,The length of the statement  "			// => if not' we will use an UTF8Encoder to convert the string to UTF-8' in chunks' using a small buffer allocated on the stack " is 127.
Long Statement,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,TryWriteUnescapedUtf8String,The length of the statement  "			// fastest way to check for non-ASCII' is to OR all the chars together' and look at bits 7 to 15. If they are not all zero' there is at least ONE non-ASCII char. " is 161.
Long Statement,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,TryWriteUnescapedUtf8String,The length of the statement  "			// * Western languages have a few chars that usually need 2 bytes. If we pre-allocate 50% more bytes' it should fit most of the time' without too much waste " is 156.
Long Statement,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,TryWriteUnescapedUtf8String,The length of the statement  "			// * Eastern langauges will have all chars encoded to 3 bytes. If we also pre-allocated 50% more' we should only need one resize of the buffer (150% x 2 = 300%)' which is acceptable " is 181.
Long Statement,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,TryWriteUnescapedUtf8String,The length of the statement  "			// note: encoder.Convert() tries to fill up the buffer as much as possible with complete chars' and will set 'done' to true when all chars have been converted. " is 159.
Long Statement,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteGuid,The length of the statement  "			// Guids should be stored using the RFC 4122 standard' so we need to swap some parts of the System.Guid (handled by Uuid128) " is 124.
Long Statement,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseSingle,The length of the statement  "			// We need to reverse encoding process: if first byte < 0x80 then it is negative (bits need to be flipped)' else it is positive (highest bit must be set to 0) " is 158.
Long Statement,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseDouble,The length of the statement  "			// We need to reverse encoding process: if first byte < 0x80 then it is negative (bits need to be flipped)' else it is positive (highest bit must be set to 0) " is 158.
Long Statement,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseDouble,The length of the statement  "			// note: we could use BitConverter.Int64BitsToDouble(...)' but it does the same thing' and also it does not exist for floats... " is 127.
Long Statement,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseNext,The length of the statement  "					//note: this format is NOT SUPPORTED ANYMORE' because it was not compatible with the current spec (<03>...<00> instead of <03>...<04> and is replaced by <05>....<00>) " is 166.
Long Statement,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseNext,The length of the statement  "					//we prefer throwing here instead of still attempting to decode the tuple' because it could silently break layers (if we read an old-style key and update it with the new-style format) " is 183.
Long Statement,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseNext,The length of the statement  "					// This means that we may need to scan multiple times the bytes' which may not be efficient if there are multiple embedded tuples inside each other " is 147.
Long Statement,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseNext,The length of the statement  "			throw new FormatException($"Invalid tuple type byte {type} at index {reader.Input.Position}/{reader.Input.Buffer.Count}"); " is 122.
Long Statement,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ReadEmbeddedTupleBytes,The length of the statement  "			// The current embedded tuple starts here' and stops on a <00>' but itself can contain more embedded tuples' and could have a <00> bytes as part of regular items (like bytes' strings' that end with <00> or could contain a <00><FF> ...) " is 235.
Long Statement,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ReadEmbeddedTupleBytes,The length of the statement  "			// This means that we have to parse the tuple recursively' discard the tokens' and note where the cursor ended. The parsing of the tuple itself will be processed later. " is 168.
Long Statement,Doxense.Collections.Tuples,JoinedTuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\JoinedTuple.cs,Equals,The length of the statement  "			return !object.ReferenceEquals(other' null) && ((IStructuralEquatable)this).Equals(other' SimilarValueComparer.Default); " is 120.
Long Statement,Doxense.Collections.Tuples,LinkedTuple<T>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\LinkedTuple.cs,Equals,The length of the statement  "			return !object.ReferenceEquals(other' null) && ((System.Collections.IStructuralEquatable)this).Equals(other' SimilarValueComparer.Default); " is 139.
Long Statement,Doxense.Collections.Tuples,ListTuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\ListTuple.cs,Equals,The length of the statement  "			return !object.ReferenceEquals(other' null) && ((IStructuralEquatable)this).Equals(other' SimilarValueComparer.Default); " is 120.
Long Statement,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Create,The length of the statement  "			//note: this is a convenience method for people that wants to pass more than 3 args arguments' and not have to call CreateRange(object[]) method " is 144.
Long Statement,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Create,The length of the statement  "			// We don't copy the array' and rely on the fact that the array was created by the compiler and that nobody will get a reference on it. " is 135.
Long Statement,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,FromArray,The length of the statement  "				case 5: return Create<T' T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]' items[offset + 4]); " is 128.
Long Statement,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,FromArray,The length of the statement  "				case 6: return Create<T' T' T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]' items[offset + 4]' items[offset + 5]); " is 150.
Long Statement,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Create,The length of the statement  "			return new STuple<T1' T2' T3' T4' T5' T6>(tuple.Item1' tuple.Item2' tuple.Item3' tuple.Item4' tuple.Item5' tuple.Item6); " is 120.
Long Statement,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Create,The length of the statement  "			return new STuple<T1' T2' T3' T4' T5' T6>(tuple.Item1' tuple.Item2' tuple.Item3' tuple.Item4' tuple.Item5' tuple.Item6); " is 120.
Long Statement,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Append,The length of the statement  "			// Note: By create a STuple<T1' T2' T3> we risk an explosion of the number of combinations of Ts which could potentially cause problems at runtime (too many variants of the same generic types). " is 193.
Long Statement,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Append,The length of the statement  "			// ex: if we have N possible types' then there could be N^3 possible variants of STuple<T1' T2' T3> that the JIT has to deal with. " is 130.
Long Statement,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Append,The length of the statement  "			// Here' the caller was explicitly using the STuple<T1' T2' T3> struct so probably care about memory footprint' so we keep returning a struct " is 141.
Long Statement,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Append,The length of the statement  "			// Note: By create a STuple<T1' T2' T3' T4> we risk an explosion of the number of combinations of Ts which could potentially cause problems at runtime (too many variants of the same generic types). " is 197.
Long Statement,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Append,The length of the statement  "			// ex: if we have N possible types' then there could be N^4 possible variants of STuple<T1' T2' T3' T4> that the JIT has to deal with. " is 134.
Long Statement,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Append,The length of the statement  "			//note: this override exists to prevent the explosion of tuple types such as STuple<T1' STuple<T1' T2>' STuple<T1' T2' T3>' STuple<T1' T2' T4>> ! " is 145.
Long Statement,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Append,The length of the statement  "			// the caller probably cares about the return type' since it is using a struct' but whatever tuple type we use will end up boxing this tuple on the heap' and we will loose type information. " is 189.
Long Statement,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Append,The length of the statement  "			// but' by returning a LinkedTuple<T5>' the tuple will still remember the exact type' and efficiently serializer/convert the values (without having to guess the type) " is 166.
Long Statement,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Append,The length of the statement  "			return new ListTuple(new object[7] { this.Item1' this.Item2' this.Item3' this.Item4' this.Item5' this.Item6' value }' 0' 7); " is 124.
Long Statement,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Append,The length of the statement  "			// the caller probably cares about the return type' since it is using a struct' but whatever tuple type we use will end up boxing this tuple on the heap' and we will loose type information. " is 189.
Long Statement,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Append,The length of the statement  "			// but' by returning a LinkedTuple<T6>' the tuple will still remember the exact type' and efficiently serializer/convert the values (without having to guess the type) " is 166.
Long Statement,Doxense.Collections.Tuples,Parser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,ParseExpression,The length of the statement  "								if (c != '\'') throw new FormatException("Missing quote after character. Single quotes are for single characters. For strings' use double quotes!"); " is 148.
Long Statement,Doxense.Collections.Tuples,Parser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,ParseExpression,The length of the statement  "									if (!TryReadKeyword("true")) throw new FormatException("Unrecognized keyword in Tuple expression. Did you meant to write 'true' instead?"); " is 139.
Long Statement,Doxense.Collections.Tuples,Parser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,ParseExpression,The length of the statement  "									if (!TryReadKeyword("false")) throw new FormatException("Unrecognized keyword in Tuple expression. Did you meant to write 'false' instead?"); " is 141.
Long Statement,Doxense.Collections.Tuples,Parser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,ReadStringLiteral,The length of the statement  "					// If we find the first instance of '\'' then we switch to a secondary loop that uses a StringBuilder to decode each character " is 126.
Long Statement,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,ThrowInvalidTupleSize,The length of the statement  "				case 1: throw new InvalidOperationException($"This operation requires a tuple of size {expected} or less' but this tuple has {tuple.Count} elements"); " is 150.
Long Statement,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,ThrowInvalidTupleSize,The length of the statement  "				case -1: throw new InvalidOperationException($"This operation requires a tuple of size {expected} or more' but this tuple has {tuple.Count} elements"); " is 151.
Long Statement,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,ThrowInvalidTupleSize,The length of the statement  "				default: throw new InvalidOperationException($"This operation requires a tuple of size {expected}' but this tuple has {tuple.Count} elements"); " is 143.
Long Statement,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The length of the statement  "			lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5)' tuple.Get<T7>(6)); " is 133.
Long Statement,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The length of the statement  "			lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5)' tuple.Get<T7>(6)' tuple.Get<T8>(7)); " is 151.
Long Statement,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The length of the statement  "			return lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5)); " is 122.
Long Statement,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The length of the statement  "			return lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5)' tuple.Get<T7>(6)); " is 140.
Long Statement,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The length of the statement  "			return lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5)' tuple.Get<T7>(6)' tuple.Get<T8>(7)); " is 158.
Long Statement,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,ToSTuple,The length of the statement  "			return new STuple<T1' T2' T3' T4' T5' T6>(tuple.Item1' tuple.Item2' tuple.Item3' tuple.Item4' tuple.Item5' tuple.Item6); " is 120.
Long Statement,Doxense.Serialization.Encoders,BinaryEncoding,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\BinaryEncoding.cs,GetValueEncoder,The length of the statement  "			if (typeof(TStorage) != typeof(Slice)) throw new NotSupportedException("BinaryEncoding can only use Slice as the storage type."); " is 129.
Long Statement,Doxense.Serialization.Encoders,KeyEncoder<TKey>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\IKeyEncoder.cs,GetKeyEncoder,The length of the statement  "			if (typeof(T) != typeof(TKey)) throw new NotSupportedException($"This custom encoding can only process keys of type {typeof(TKey).Name}."); " is 139.
Long Statement,Doxense.Serialization.Encoders,KeyEncoderExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\KeyEncoderExtensions.cs,EncodeKeys,The length of the statement  "			// note: T=>Slice usually is used for writing batches as fast as possible' which means that keys will be consumed immediately and don't need to be streamed " is 155.
Long Statement,Doxense.Serialization.Encoders,KeyEncoderExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\KeyEncoderExtensions.cs,EncodeKeys,The length of the statement  "			// note: T=>Slice usually is used for writing batches as fast as possible' which means that keys will be consumed immediately and don't need to be streamed " is 155.
Long Statement,FoundationDB.Client.Status,RoughnessCounter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Status\FdbSystemStatus.cs,ToString,The length of the statement  "			return string.Format(CultureInfo.InvariantCulture' "Counter={0:N0}' Hz={1:N1}' Roughness={2:N2}"' this.Counter' this.Hz' this.Roughness); " is 137.
Long Statement,FoundationDB.Client.Status,DiskCounter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Status\FdbSystemStatus.cs,ToString,The length of the statement  "			return string.Format(CultureInfo.InvariantCulture' "Counter={0:N0}' Hz={1:N1}' Sectors={2:N0}"' this.Counter' this.Hz' this.Sectors); " is 133.
Long Statement,FoundationDB,Batched<TValue;TState>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Utils\Batched.cs,Convert,The length of the statement  "			// - doing it this way adds a memory copy (writer => buffer) but reduce the number of byte[] allocations (and reduce the GC overhead) " is 133.
Long Statement,FoundationDB.Client.Utils,TinyJsonParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Utils\TinyJsonParser.cs,SyntaxError,The length of the statement  "			return new FormatException(String.Format(CultureInfo.InvariantCulture' "Invalid JSON Syntax: {0} at {1}"' msg' m_cursor)); " is 122.
Long Statement,FoundationDB.Client.Utils,TinyJsonParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Utils\TinyJsonParser.cs,SyntaxError,The length of the statement  "			return new FormatException(String.Format(CultureInfo.InvariantCulture' "Invalid JSON Syntax: {0} at {1}"' String.Format(CultureInfo.InvariantCulture' msg' arg0)' m_cursor)); " is 173.
Long Statement,FoundationDB.Client.Utils,TinyJsonParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Utils\TinyJsonParser.cs,ParseObject,The length of the statement  "			if (token != Token.MapBegin) throw new InvalidOperationException(String.Format("JSON object expected' but got a {0}"' token)); " is 126.
Complex Conditional,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RunBatchedReadOperationAsync,The conditional expression  "bodyAsyncWithContextAndState == null &&  					bodyAsyncWithContext == null &&  					bodyWithContextAndState == null &&  					bodyWithContext == null"  is complex.
Complex Conditional,FoundationDB.Client,FdbEndPoint,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbEndPoint.cs,Create,The conditional expression  "(socketAddress.Family == System.Net.Sockets.AddressFamily.InterNetwork && count == 17) || (socketAddress.Family == System.Net.Sockets.AddressFamily.InterNetworkV6 && count == 29)"  is complex.
Complex Conditional,FoundationDB.Client,FdbKey,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbKey.cs,PrettyPrint,The conditional expression  "c <= 28 || c == 32 || c == 33 || c == 48 || c == 49 || c >= 254"  is complex.
Complex Conditional,FoundationDB.Client,FdbKey,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbKey.cs,PrettyPrint,The conditional expression  "c <= 28 || c == 32 || c == 33 || c == 48 || c == 49 || c >= 254"  is complex.
Complex Conditional,FoundationDB.Client,FdbRangeOptions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbRangeOptions.cs,EnsureDefaults,The conditional expression  "options.Limit == null || options.TargetBytes == null || options.Mode == null || options.Reverse == null || options.Read == null"  is complex.
Complex Conditional,FoundationDB.Filters.Logging,DirectoryKeyResolver,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,Resolve,The conditional expression  "s != null && s.Length >= 3 && s[0] == '(' && s[s.Length - 1] == ')'"  is complex.
Complex Conditional,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,EscapeString,The conditional expression  "(c >= ' ' && c <= '~') || (c >= 880 && c <= 2047) || (c >= 12352 && c <= 12591)"  is complex.
Complex Conditional,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,PrettyPrint,The conditional expression  "count >= 3 && buffer[offset] == 0xEF && buffer[offset + 1] == 0xBB && buffer[offset + 2] == 0xBF"  is complex.
Complex Conditional,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,PrettyPrint,The conditional expression  "(buffer[offset] == '{' && buffer[offset + count - 1] == '}') || (buffer[offset] == '[' && buffer[offset + count - 1] == ']')"  is complex.
Complex Conditional,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,PrettyPrint,The conditional expression  "b == 0 || b == 10 || b == 13 || b == 9"  is complex.
Complex Conditional,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,TryDecode16Unsafe,The conditional expression  "(!separator || chars[8] == '-')  			 && TryCharsToHexsUnsafe(chars' out uint hi)  			 && TryCharsToHexsUnsafe(chars.Slice(separator ? 9 : 8)' out uint lo)"  is complex.
Complex Conditional,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,TryDecode16Unsafe,The conditional expression  "(!separator || (chars[4] == '-' && chars[13] == '-'))  			 && TryCharsToHex16(chars' out ushort hi)  			 && TryCharsToHex32(chars.Slice(separator ? 5 : 4)' out uint med)  			 && TryCharsToHex32(chars.Slice(separator ? 14 : 12)' out uint lo)"  is complex.
Complex Conditional,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,TryDecode16Unsafe,The conditional expression  "(!separator || (chars[8] == '-' && chars[17] == '-'))  			 && TryCharsToHex32(chars' out uint hi)  			 && TryCharsToHex32(chars.Slice(separator ? 9 : 8)' out uint med)  			 && TryCharsToHex32(chars.Slice(separator ? 18 : 16)' out uint lo)"  is complex.
Complex Conditional,Doxense.Linq.Async.Iterators,WhereSelectAsyncIterator<TSource;TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\WhereSelectAsyncIterator.cs,Where,The conditional expression  "m_limit == null  				&& (m_offset == null || m_offset.Value == 0)  				&& typeof(TSource) == typeof(TResult) //BUGBUG: type comparison maybe should check derived classes also ?  				&& m_transform.IsIdentity()"  is complex.
Complex Conditional,Doxense.Linq.Async.Iterators,WhereSelectAsyncIterator<TSource;TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\WhereSelectAsyncIterator.cs,Where,The conditional expression  "m_limit == null && (m_offset == null || m_offset.Value == 0) && typeof(TSource) == typeof(TResult)"  is complex.
Complex Conditional,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,EnsureBufferIsValid,The conditional expression  "count != 0 && (array == null || (uint) offset > (uint) array.Length || (uint) count > (uint) (array.Length - offset))"  is complex.
Complex Conditional,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,ToInt32,The conditional expression  "!char.IsDigit(c) && c != '-' && c != '+' && c != ' '"  is complex.
Complex Conditional,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,ToInt32,The conditional expression  "!char.IsDigit(c) && c != '-' && c != '+' && c != ' '"  is complex.
Complex Conditional,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,ToInt64,The conditional expression  "!char.IsDigit(c) && c != '-' && c != '+' && c != ' '"  is complex.
Complex Conditional,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,ToInt64,The conditional expression  "!char.IsDigit(c) && c != '-' && c != '+' && c != ' '"  is complex.
Complex Conditional,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,ToDouble,The conditional expression  "!char.IsDigit(c) && c != '+' && c != '-' && c != '.' && c != ' '"  is complex.
Complex Conditional,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,ToSingle,The conditional expression  "!char.IsDigit(c) && c != '+' && c != '-' && c != '.' && c != ' '"  is complex.
Complex Conditional,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,ToDecimal,The conditional expression  "!char.IsDigit(c) && c != '+' && c != '-' && c != '.' && c != ' '"  is complex.
Complex Conditional,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,ToDecimal,The conditional expression  "!char.IsDigit(c) && c != '+' && c != '-' && c != '.' && c != ' '"  is complex.
Complex Conditional,FoundationDB.Client.Utils,TinyJsonParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Utils\TinyJsonParser.cs,ReadNumberLiteral,The conditional expression  "char.IsDigit(c) || c == '.' || c == '+' || c == '-' || c == 'e' || c == 'E'"  is complex.
Empty Catch Block,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,StopEventLoop,The method has an empty catch block.
Empty Catch Block,FoundationDB.Client,FdbKey,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbKey.cs,PrettyPrint,The method has an empty catch block.
Empty Catch Block,FoundationDB.Client,FdbKey,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbKey.cs,PrettyPrint,The method has an empty catch block.
Empty Catch Block,FoundationDB.Client,DynamicKeys,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\DynamicKeySubspace.cs,Dump,The method has an empty catch block.
Empty Catch Block,FoundationDB.Client.Native,FdbFutureArray<T>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbFutureArray.cs,FutureCompletionCallback,The method has an empty catch block.
Empty Catch Block,Doxense.Async,AsyncHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Async\AsyncHelpers.cs,PumpToAsync,The method has an empty catch block.
Empty Catch Block,Doxense.Threading.Tasks,TaskHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Async\TaskHelpers.cs,SafeCancel,The method has an empty catch block.
Empty Catch Block,Doxense.Threading.Tasks,TaskHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Async\TaskHelpers.cs,SafeCancelAndDispose,The method has an empty catch block.
Empty Catch Block,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,PrettyPrint,The method has an empty catch block.
Empty Catch Block,Doxense.Linq.Async.Iterators,MergeAsyncIterator<TSource;TKey;TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\MergeAsyncIterator.cs,OnFirstAsync,The method has an empty catch block.
Magic Number,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,StopEventLoop,The following statement contains a magic number: Thread.Sleep(250);
Magic Number,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,StopEventLoop,The following statement contains a magic number: thread.IsAlive && duration.Elapsed.TotalSeconds < 5
Magic Number,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,StopEventLoop,The following statement contains a magic number: bool stopped = thread.Join(TimeSpan.FromSeconds(30));
Magic Number,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RunInsertOperationAsync,The following statement contains a magic number: trans.Size >= sizeThreshold      // transaction is startting to get big...  						 || batch.Count >= batchCount        // too many items would need to be retried...  						 || timer.Elapsed.TotalSeconds >= 4
Magic Number,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RunBatchedInsertOperationAsync,The following statement contains a magic number: Func<Task> commit = async () =>  					{  #if FULL_DEBUG  						Trace.WriteLine("> commit called with " + batch.Count.ToString("N0") + " items and " + trans.Size.ToString("N0") + " bytes");  #endif    						FdbException error = null;    						// if transaction Size is bigger than Fdb.MaxTransactionSize (10MB) then commit will fail' but we will retry with a smaller batch anyway    						try  						{  							await trans.CommitAsync().ConfigureAwait(false);    							// recompute the batch count' so that we do about 4 batch per transaction  							// we observed that 'chunk.Count' items produced 'trans.Size' bytes.  							// we would like to have 'sizeThreshold' bytes' and about 8 batch per transaction  							batchCount = (int)(((long)chunk.Count * sizeThreshold) / (trans.Size * 8L));  							//Console.WriteLine("New batch size is {0}"' batchCount);  						}  						catch (FdbException e)  						{ // the batch failed to commit :(  							error = e;  							//TODO: C# 6.0 will support awaits in catch blocks!  						}    						if (error != null)  						{ // we failed to commit this batch' we need to retry...    #if FULL_DEBUG  							Trace.WriteLine("> commit failed : " + error);  #endif    							if (error.Code == FdbError.TransactionTooLarge)  							{  								if (chunk.Count == 1) throw new InvalidOperationException("Cannot insert one the item of the source collection because it exceeds the maximum size allowed per transaction");  								// reduce the size of future batches  								if (batchCount > 1) batchCount <<= 1;  							}  							else  							{  								await trans.OnErrorAsync(error.Code).ConfigureAwait(false);  							}    							int half = checked(chunk.Count + 1) >> 1;  							// retry the first half  							await RetryChunk(trans' chunk' 0' half' bodyAsync' bodyBlocking).ConfigureAwait(false);  							// retry the second half  							await RetryChunk(trans' chunk' half' chunk.Count - half' bodyAsync' bodyBlocking).ConfigureAwait(false);  						}    						// success!  						chunk.Clear();  						trans.Reset();  						timer.Reset();  					};
Magic Number,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RunBatchedInsertOperationAsync,The following statement contains a magic number: trans.Size >= sizeThreshold         // transaction is startting to get big...  							 || timer.Elapsed.TotalSeconds >= 4
Magic Number,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RunBatchedReadOperationAsync,The following statement contains a magic number: ctx.Step = Math.Min(ctx.Step * 2' DefaultMaximumBatchSize);
Magic Number,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RunBatchedReadOperationAsync,The following statement contains a magic number: ctx.Cooldown = 2;
Magic Number,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RunBatchedReadOperationAsync,The following statement contains a magic number: ctx.Cooldown <= 0 && sw.Elapsed.TotalSeconds < (5.0 - ctx.ElapsedGeneration.TotalSeconds) / 2
Magic Number,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RunBatchedReadOperationAsync,The following statement contains a magic number: ctx.Cooldown <= 0 && sw.Elapsed.TotalSeconds < (5.0 - ctx.ElapsedGeneration.TotalSeconds) / 2
Magic Number,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,RunBatchedReadOperationAsync,The following statement contains a magic number: ctx.Cooldown = 10;
Magic Number,FoundationDB.Client,Bulk,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,ExportAsync,The following statement contains a magic number: tr.Annotate("Exported {0} items in {1} chunks ({2:N1}% network)"' count' chunks' chunks > 0 ? (100.0 * waitForFetch / chunks) : 0.0);
Magic Number,FoundationDB.Client,System,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.System.cs,GetMetadataVersionAsync,The following statement contains a magic number: Fdb.ApiVersion < 610
Magic Number,FoundationDB.Client,System,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.System.cs,GetChunksAsync,The following statement contains a magic number: var chunks = new List<KeyRange>(count + 2);
Magic Number,FoundationDB.Client,System,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.System.cs,EstimateCountAsync,The following statement contains a magic number: const int INIT_WINDOW_SIZE = 1 << 8;
Magic Number,FoundationDB.Client,System,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.System.cs,EstimateCountAsync,The following statement contains a magic number: const int MAX_WINDOW_SIZE = 1 << 13;
Magic Number,FoundationDB.Client,System,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.System.cs,EstimateCountAsync,The following statement contains a magic number: const int MIN_WINDOW_SIZE = 64;
Magic Number,FoundationDB.Client,FdbClusterFile,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbClusterFile.cs,Parse,The following statement contains a magic number: var coordinators = pairs.Select(pair =>  			{  				bool tls = false;  				if (pair.EndsWith(":tls"' StringComparison.OrdinalIgnoreCase))  				{  					pair = pair.Substring(0' pair.Length - 4);  					tls = true;  				}  				int r = pair.LastIndexOf(':');  				if (r < 0) throw new FormatException("Missing ':' in coordinator address.");  				// the format is "{IP}:{PORT}" or "{IP}:{PORT}:tls"    				return new FdbEndPoint(  					IPAddress.Parse(pair.Substring(0' r))'  					Int32.Parse(pair.Substring(r + 1))'  					tls  				);  			}).ToArray();
Magic Number,FoundationDB.Client,FdbEndPoint,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbEndPoint.cs,Create,The following statement contains a magic number: (socketAddress.Family == System.Net.Sockets.AddressFamily.InterNetwork && count == 17) || (socketAddress.Family == System.Net.Sockets.AddressFamily.InterNetworkV6 && count == 29)
Magic Number,FoundationDB.Client,FdbEndPoint,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbEndPoint.cs,Create,The following statement contains a magic number: (socketAddress.Family == System.Net.Sockets.AddressFamily.InterNetwork && count == 17) || (socketAddress.Family == System.Net.Sockets.AddressFamily.InterNetworkV6 && count == 29)
Magic Number,FoundationDB.Client,FdbKey,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbKey.cs,PrettyPrint,The following statement contains a magic number: switch (mode)  							{  								case PrettyPrintMode.End:  								{ // the last byte will either be FF' or incremented  									// for tuples' the really bad cases are for byte[]/strings (which normally end with 00)  									// => pack(("string"'))+\xFF => <02>string<00><FF>  									// => string(("string"')) => <02>string<01>  									switch (key[-1])  									{  										case 0xFF:  										{  											//***README*** if you break under here' see README in the last catch() block  											tuple = TuPack.Unpack(key[0' -1]);  											suffix = ".<FF>";  											break;  										}  										case 0x01:  										{  											var tmp = key[0' -1] + (byte)0;  											//***README*** if you break under here' see README in the last catch() block  											tuple = TuPack.Unpack(tmp);  											suffix = " + 1";  											break;  										}  									}  									break;  								}  								case PrettyPrintMode.Begin:  								{ // the last byte will usually be 00    									// We can't really know if the tuple ended with NULL (serialized to <00>) or if a <00> was added'  									// but since the ToRange() on tuples add a <00> we can bet on the fact that it is not part of the tuple itself.  									// except maybe if we have "00 FF 00" which would be the expected form of a string that ends with a <00>    									if (key.Count > 2 && key[-1] == 0 && key[-2] != 0xFF)  									{  										//***README*** if you break under here' see README in the last catch() block  										tuple = TuPack.Unpack(key[0' -1]);  										suffix = ".<00>";  									}  									break;  								}  							}
Magic Number,FoundationDB.Client,FdbKey,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbKey.cs,PrettyPrint,The following statement contains a magic number: switch (mode)  							{  								case PrettyPrintMode.End:  								{ // the last byte will either be FF' or incremented  									// for tuples' the really bad cases are for byte[]/strings (which normally end with 00)  									// => pack(("string"'))+\xFF => <02>string<00><FF>  									// => string(("string"')) => <02>string<01>  									switch (key[-1])  									{  										case 0xFF:  										{  											//***README*** if you break under here' see README in the last catch() block  											tuple = TuPack.Unpack(key[0' -1]);  											suffix = ".<FF>";  											break;  										}  										case 0x01:  										{  											var tmp = key[0' -1] + (byte)0;  											//***README*** if you break under here' see README in the last catch() block  											tuple = TuPack.Unpack(tmp);  											suffix = " + 1";  											break;  										}  									}  									break;  								}  								case PrettyPrintMode.Begin:  								{ // the last byte will usually be 00    									// We can't really know if the tuple ended with NULL (serialized to <00>) or if a <00> was added'  									// but since the ToRange() on tuples add a <00> we can bet on the fact that it is not part of the tuple itself.  									// except maybe if we have "00 FF 00" which would be the expected form of a string that ends with a <00>    									if (key.Count > 2 && key[-1] == 0 && key[-2] != 0xFF)  									{  										//***README*** if you break under here' see README in the last catch() block  										tuple = TuPack.Unpack(key[0' -1]);  										suffix = ".<00>";  									}  									break;  								}  							}
Magic Number,FoundationDB.Client,FdbKey,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbKey.cs,PrettyPrint,The following statement contains a magic number: c <= 28 || c == 32 || c == 33 || c == 48 || c == 49 || c >= 254
Magic Number,FoundationDB.Client,FdbKey,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbKey.cs,PrettyPrint,The following statement contains a magic number: c <= 28 || c == 32 || c == 33 || c == 48 || c == 49 || c >= 254
Magic Number,FoundationDB.Client,FdbKey,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbKey.cs,PrettyPrint,The following statement contains a magic number: c <= 28 || c == 32 || c == 33 || c == 48 || c == 49 || c >= 254
Magic Number,FoundationDB.Client,FdbKey,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbKey.cs,PrettyPrint,The following statement contains a magic number: c <= 28 || c == 32 || c == 33 || c == 48 || c == 49 || c >= 254
Magic Number,FoundationDB.Client,FdbKey,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbKey.cs,PrettyPrint,The following statement contains a magic number: c <= 28 || c == 32 || c == 33 || c == 48 || c == 49 || c >= 254
Magic Number,FoundationDB.Client,FdbKey,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbKey.cs,PrettyPrint,The following statement contains a magic number: c <= 28 || c == 32 || c == 33 || c == 48 || c == 49 || c >= 254
Magic Number,FoundationDB.Client,FdbKey,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbKey.cs,PrettyPrint,The following statement contains a magic number: switch (mode)  							{  								case PrettyPrintMode.End:  								{ // the last byte will either be FF' or incremented  									// for tuples' the really bad cases are for byte[]/strings (which normally end with 00)  									// => pack(("string"'))+\xFF => <02>string<00><FF>  									// => string(("string"')) => <02>string<01>  									switch (key[key.Length - 1])  									{  										case 0xFF:  										{  											//***README*** if you break under here' see README in the last catch() block  											tuple = TuPack.Unpack(key.Slice(0' key.Length - 1));  											suffix = ".<FF>";  											break;  										}  										case 0x01:  										{  											//TODO: HACKHACK: until we find another solution' we have to make a copy :(  											var tmp = key.ToArray();  											tmp[tmp.Length - 1] = 0;  											//***README*** if you break under here' see README in the last catch() block  											tuple = TuPack.Unpack(tmp.AsSlice());  											suffix = " + 1";  											break;  										}  									}  									break;  								}  								case PrettyPrintMode.Begin:  								{ // the last byte will usually be 00    									// We can't really know if the tuple ended with NULL (serialized to <00>) or if a <00> was added'  									// but since the ToRange() on tuples add a <00> we can bet on the fact that it is not part of the tuple itself.  									// except maybe if we have "00 FF 00" which would be the expected form of a string that ends with a <00>    									if (key.Length > 2 && key[-1] == 0 && key[-2] != 0xFF)  									{  										//***README*** if you break under here' see README in the last catch() block  										tuple = TuPack.Unpack(key.Slice(0' key.Length - 1));  										suffix = ".<00>";  									}  									break;  								}  							}
Magic Number,FoundationDB.Client,FdbKey,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbKey.cs,PrettyPrint,The following statement contains a magic number: switch (mode)  							{  								case PrettyPrintMode.End:  								{ // the last byte will either be FF' or incremented  									// for tuples' the really bad cases are for byte[]/strings (which normally end with 00)  									// => pack(("string"'))+\xFF => <02>string<00><FF>  									// => string(("string"')) => <02>string<01>  									switch (key[key.Length - 1])  									{  										case 0xFF:  										{  											//***README*** if you break under here' see README in the last catch() block  											tuple = TuPack.Unpack(key.Slice(0' key.Length - 1));  											suffix = ".<FF>";  											break;  										}  										case 0x01:  										{  											//TODO: HACKHACK: until we find another solution' we have to make a copy :(  											var tmp = key.ToArray();  											tmp[tmp.Length - 1] = 0;  											//***README*** if you break under here' see README in the last catch() block  											tuple = TuPack.Unpack(tmp.AsSlice());  											suffix = " + 1";  											break;  										}  									}  									break;  								}  								case PrettyPrintMode.Begin:  								{ // the last byte will usually be 00    									// We can't really know if the tuple ended with NULL (serialized to <00>) or if a <00> was added'  									// but since the ToRange() on tuples add a <00> we can bet on the fact that it is not part of the tuple itself.  									// except maybe if we have "00 FF 00" which would be the expected form of a string that ends with a <00>    									if (key.Length > 2 && key[-1] == 0 && key[-2] != 0xFF)  									{  										//***README*** if you break under here' see README in the last catch() block  										tuple = TuPack.Unpack(key.Slice(0' key.Length - 1));  										suffix = ".<00>";  									}  									break;  								}  							}
Magic Number,FoundationDB.Client,FdbKey,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbKey.cs,PrettyPrint,The following statement contains a magic number: c <= 28 || c == 32 || c == 33 || c == 48 || c == 49 || c >= 254
Magic Number,FoundationDB.Client,FdbKey,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbKey.cs,PrettyPrint,The following statement contains a magic number: c <= 28 || c == 32 || c == 33 || c == 48 || c == 49 || c >= 254
Magic Number,FoundationDB.Client,FdbKey,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbKey.cs,PrettyPrint,The following statement contains a magic number: c <= 28 || c == 32 || c == 33 || c == 48 || c == 49 || c >= 254
Magic Number,FoundationDB.Client,FdbKey,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbKey.cs,PrettyPrint,The following statement contains a magic number: c <= 28 || c == 32 || c == 33 || c == 48 || c == 49 || c >= 254
Magic Number,FoundationDB.Client,FdbKey,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbKey.cs,PrettyPrint,The following statement contains a magic number: c <= 28 || c == 32 || c == 33 || c == 48 || c == 49 || c >= 254
Magic Number,FoundationDB.Client,FdbKey,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbKey.cs,PrettyPrint,The following statement contains a magic number: c <= 28 || c == 32 || c == 33 || c == 48 || c == 49 || c >= 254
Magic Number,FoundationDB.Client,FdbRangeQuery<T>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbRangeQuery.cs,HeadAsync,The following statement contains a magic number: var options = new FdbRangeOptions  			{  				Limit = Math.Min(single ? 2 : 1' this.Options.Limit ?? int.MaxValue)'  				TargetBytes = 0'  				Mode = FdbStreamingMode.Exact'  				Reverse = this.Reversed  			};
Magic Number,FoundationDB.Client,PagingIterator,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbRangeQuery.PagingIterator.cs,OnFirstAsync,The following statement contains a magic number: var max = keys[2] <= keys[3] ? keys[2] : keys[3];
Magic Number,FoundationDB.Client,PagingIterator,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbRangeQuery.PagingIterator.cs,OnFirstAsync,The following statement contains a magic number: var max = keys[2] <= keys[3] ? keys[2] : keys[3];
Magic Number,FoundationDB.Client,PagingIterator,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbRangeQuery.PagingIterator.cs,OnFirstAsync,The following statement contains a magic number: var max = keys[2] <= keys[3] ? keys[2] : keys[3];
Magic Number,FoundationDB.Client,PagingIterator,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbRangeQuery.PagingIterator.cs,OnFirstAsync,The following statement contains a magic number: var max = keys[2] <= keys[3] ? keys[2] : keys[3];
Magic Number,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,EnsureMutationTypeIsSupported,The following statement contains a magic number: Fdb.GetMaxApiVersion() >= 200
Magic Number,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,EnsureMutationTypeIsSupported,The following statement contains a magic number: selectedApiVersion < 200
Magic Number,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,EnsureMutationTypeIsSupported,The following statement contains a magic number: switch (mutation)  			{    				case FdbMutationType.Add:  				case FdbMutationType.BitAnd:  				case FdbMutationType.BitOr:  				case FdbMutationType.BitXor:  				{ // these mutations are available since v200  					return;  				}    				case FdbMutationType.Max:  				case FdbMutationType.Min:  				{ // these mutations are available since v300  					if (selectedApiVersion < 300)  					{  						if (Fdb.GetMaxApiVersion() >= 300)  						{  							throw new NotSupportedException("Atomic mutations Max and Min are only supported starting from API level 300. You need to select API level 300 or more at the start of your process.");  						}  						else  						{  							throw new NotSupportedException("Atomic mutations Max and Min are only supported starting from client version 3.x. You need to update the version of the client' and select API level 300 or more at the start of your process..");  						}  					}    					// ok!  					return;  				}    				case FdbMutationType.VersionStampedKey:  				case FdbMutationType.VersionStampedValue:  				{  					if (selectedApiVersion < 400)  					{  						if (Fdb.GetMaxApiVersion() >= 400)  						{  							throw new NotSupportedException("Atomic mutations for VersionStamps are only supported starting from API level 400. You need to select API level 400 or more at the start of your process.");  						}  						else  						{  							throw new NotSupportedException("Atomic mutations Max and Min are only supported starting from client version 4.x. You need to update the version of the client' and select API level 400 or more at the start of your process..");  						}  					}    					// ok!  					return;  				}    				case FdbMutationType.AppendIfFits:  				{  					if (selectedApiVersion < 520)  					{  						if (Fdb.GetMaxApiVersion() >= 520)  						{  							throw new NotSupportedException("Atomic mutation AppendIfFits is only supported starting from API level 520. You need to select API level 520 or more at the start of your process.");  						}  						else  						{  							throw new NotSupportedException("Atomic mutation AppendIfFits is only supported starting from client version 5.2. You need to update the version of the client' and select API level 520 or more at the start of your process..");  						}  					}    					// ok!  					return;  				}    				case FdbMutationType.CompareAndClear:  				{  					if (selectedApiVersion < 610)  					{  						if (Fdb.GetMaxApiVersion() >= 610)  						{  							throw new NotSupportedException("Atomic mutation CompareAndClear is only supported starting from API level 610. You need to select API level 610 or more at the start of your process.");  						}  						else  						{  							throw new NotSupportedException("Atomic mutation CompareAndClear is only supported starting from client version 6.1. You need to update the version of the client' and select API level 610 or more at the start of your process..");  						}  					}    					// ok!  					return;  				}    				default:  				{  					// this could be a new mutation type' or an invalid value.  					throw new NotSupportedException($"An invalid mutation type '{mutation}' was issued. If you are attempting to call a new mutation type' you will need to update the version of this assembly' and select the latest API level.");  				}  			}
Magic Number,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,EnsureMutationTypeIsSupported,The following statement contains a magic number: switch (mutation)  			{    				case FdbMutationType.Add:  				case FdbMutationType.BitAnd:  				case FdbMutationType.BitOr:  				case FdbMutationType.BitXor:  				{ // these mutations are available since v200  					return;  				}    				case FdbMutationType.Max:  				case FdbMutationType.Min:  				{ // these mutations are available since v300  					if (selectedApiVersion < 300)  					{  						if (Fdb.GetMaxApiVersion() >= 300)  						{  							throw new NotSupportedException("Atomic mutations Max and Min are only supported starting from API level 300. You need to select API level 300 or more at the start of your process.");  						}  						else  						{  							throw new NotSupportedException("Atomic mutations Max and Min are only supported starting from client version 3.x. You need to update the version of the client' and select API level 300 or more at the start of your process..");  						}  					}    					// ok!  					return;  				}    				case FdbMutationType.VersionStampedKey:  				case FdbMutationType.VersionStampedValue:  				{  					if (selectedApiVersion < 400)  					{  						if (Fdb.GetMaxApiVersion() >= 400)  						{  							throw new NotSupportedException("Atomic mutations for VersionStamps are only supported starting from API level 400. You need to select API level 400 or more at the start of your process.");  						}  						else  						{  							throw new NotSupportedException("Atomic mutations Max and Min are only supported starting from client version 4.x. You need to update the version of the client' and select API level 400 or more at the start of your process..");  						}  					}    					// ok!  					return;  				}    				case FdbMutationType.AppendIfFits:  				{  					if (selectedApiVersion < 520)  					{  						if (Fdb.GetMaxApiVersion() >= 520)  						{  							throw new NotSupportedException("Atomic mutation AppendIfFits is only supported starting from API level 520. You need to select API level 520 or more at the start of your process.");  						}  						else  						{  							throw new NotSupportedException("Atomic mutation AppendIfFits is only supported starting from client version 5.2. You need to update the version of the client' and select API level 520 or more at the start of your process..");  						}  					}    					// ok!  					return;  				}    				case FdbMutationType.CompareAndClear:  				{  					if (selectedApiVersion < 610)  					{  						if (Fdb.GetMaxApiVersion() >= 610)  						{  							throw new NotSupportedException("Atomic mutation CompareAndClear is only supported starting from API level 610. You need to select API level 610 or more at the start of your process.");  						}  						else  						{  							throw new NotSupportedException("Atomic mutation CompareAndClear is only supported starting from client version 6.1. You need to update the version of the client' and select API level 610 or more at the start of your process..");  						}  					}    					// ok!  					return;  				}    				default:  				{  					// this could be a new mutation type' or an invalid value.  					throw new NotSupportedException($"An invalid mutation type '{mutation}' was issued. If you are attempting to call a new mutation type' you will need to update the version of this assembly' and select the latest API level.");  				}  			}
Magic Number,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,EnsureMutationTypeIsSupported,The following statement contains a magic number: switch (mutation)  			{    				case FdbMutationType.Add:  				case FdbMutationType.BitAnd:  				case FdbMutationType.BitOr:  				case FdbMutationType.BitXor:  				{ // these mutations are available since v200  					return;  				}    				case FdbMutationType.Max:  				case FdbMutationType.Min:  				{ // these mutations are available since v300  					if (selectedApiVersion < 300)  					{  						if (Fdb.GetMaxApiVersion() >= 300)  						{  							throw new NotSupportedException("Atomic mutations Max and Min are only supported starting from API level 300. You need to select API level 300 or more at the start of your process.");  						}  						else  						{  							throw new NotSupportedException("Atomic mutations Max and Min are only supported starting from client version 3.x. You need to update the version of the client' and select API level 300 or more at the start of your process..");  						}  					}    					// ok!  					return;  				}    				case FdbMutationType.VersionStampedKey:  				case FdbMutationType.VersionStampedValue:  				{  					if (selectedApiVersion < 400)  					{  						if (Fdb.GetMaxApiVersion() >= 400)  						{  							throw new NotSupportedException("Atomic mutations for VersionStamps are only supported starting from API level 400. You need to select API level 400 or more at the start of your process.");  						}  						else  						{  							throw new NotSupportedException("Atomic mutations Max and Min are only supported starting from client version 4.x. You need to update the version of the client' and select API level 400 or more at the start of your process..");  						}  					}    					// ok!  					return;  				}    				case FdbMutationType.AppendIfFits:  				{  					if (selectedApiVersion < 520)  					{  						if (Fdb.GetMaxApiVersion() >= 520)  						{  							throw new NotSupportedException("Atomic mutation AppendIfFits is only supported starting from API level 520. You need to select API level 520 or more at the start of your process.");  						}  						else  						{  							throw new NotSupportedException("Atomic mutation AppendIfFits is only supported starting from client version 5.2. You need to update the version of the client' and select API level 520 or more at the start of your process..");  						}  					}    					// ok!  					return;  				}    				case FdbMutationType.CompareAndClear:  				{  					if (selectedApiVersion < 610)  					{  						if (Fdb.GetMaxApiVersion() >= 610)  						{  							throw new NotSupportedException("Atomic mutation CompareAndClear is only supported starting from API level 610. You need to select API level 610 or more at the start of your process.");  						}  						else  						{  							throw new NotSupportedException("Atomic mutation CompareAndClear is only supported starting from client version 6.1. You need to update the version of the client' and select API level 610 or more at the start of your process..");  						}  					}    					// ok!  					return;  				}    				default:  				{  					// this could be a new mutation type' or an invalid value.  					throw new NotSupportedException($"An invalid mutation type '{mutation}' was issued. If you are attempting to call a new mutation type' you will need to update the version of this assembly' and select the latest API level.");  				}  			}
Magic Number,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,EnsureMutationTypeIsSupported,The following statement contains a magic number: switch (mutation)  			{    				case FdbMutationType.Add:  				case FdbMutationType.BitAnd:  				case FdbMutationType.BitOr:  				case FdbMutationType.BitXor:  				{ // these mutations are available since v200  					return;  				}    				case FdbMutationType.Max:  				case FdbMutationType.Min:  				{ // these mutations are available since v300  					if (selectedApiVersion < 300)  					{  						if (Fdb.GetMaxApiVersion() >= 300)  						{  							throw new NotSupportedException("Atomic mutations Max and Min are only supported starting from API level 300. You need to select API level 300 or more at the start of your process.");  						}  						else  						{  							throw new NotSupportedException("Atomic mutations Max and Min are only supported starting from client version 3.x. You need to update the version of the client' and select API level 300 or more at the start of your process..");  						}  					}    					// ok!  					return;  				}    				case FdbMutationType.VersionStampedKey:  				case FdbMutationType.VersionStampedValue:  				{  					if (selectedApiVersion < 400)  					{  						if (Fdb.GetMaxApiVersion() >= 400)  						{  							throw new NotSupportedException("Atomic mutations for VersionStamps are only supported starting from API level 400. You need to select API level 400 or more at the start of your process.");  						}  						else  						{  							throw new NotSupportedException("Atomic mutations Max and Min are only supported starting from client version 4.x. You need to update the version of the client' and select API level 400 or more at the start of your process..");  						}  					}    					// ok!  					return;  				}    				case FdbMutationType.AppendIfFits:  				{  					if (selectedApiVersion < 520)  					{  						if (Fdb.GetMaxApiVersion() >= 520)  						{  							throw new NotSupportedException("Atomic mutation AppendIfFits is only supported starting from API level 520. You need to select API level 520 or more at the start of your process.");  						}  						else  						{  							throw new NotSupportedException("Atomic mutation AppendIfFits is only supported starting from client version 5.2. You need to update the version of the client' and select API level 520 or more at the start of your process..");  						}  					}    					// ok!  					return;  				}    				case FdbMutationType.CompareAndClear:  				{  					if (selectedApiVersion < 610)  					{  						if (Fdb.GetMaxApiVersion() >= 610)  						{  							throw new NotSupportedException("Atomic mutation CompareAndClear is only supported starting from API level 610. You need to select API level 610 or more at the start of your process.");  						}  						else  						{  							throw new NotSupportedException("Atomic mutation CompareAndClear is only supported starting from client version 6.1. You need to update the version of the client' and select API level 610 or more at the start of your process..");  						}  					}    					// ok!  					return;  				}    				default:  				{  					// this could be a new mutation type' or an invalid value.  					throw new NotSupportedException($"An invalid mutation type '{mutation}' was issued. If you are attempting to call a new mutation type' you will need to update the version of this assembly' and select the latest API level.");  				}  			}
Magic Number,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,EnsureMutationTypeIsSupported,The following statement contains a magic number: switch (mutation)  			{    				case FdbMutationType.Add:  				case FdbMutationType.BitAnd:  				case FdbMutationType.BitOr:  				case FdbMutationType.BitXor:  				{ // these mutations are available since v200  					return;  				}    				case FdbMutationType.Max:  				case FdbMutationType.Min:  				{ // these mutations are available since v300  					if (selectedApiVersion < 300)  					{  						if (Fdb.GetMaxApiVersion() >= 300)  						{  							throw new NotSupportedException("Atomic mutations Max and Min are only supported starting from API level 300. You need to select API level 300 or more at the start of your process.");  						}  						else  						{  							throw new NotSupportedException("Atomic mutations Max and Min are only supported starting from client version 3.x. You need to update the version of the client' and select API level 300 or more at the start of your process..");  						}  					}    					// ok!  					return;  				}    				case FdbMutationType.VersionStampedKey:  				case FdbMutationType.VersionStampedValue:  				{  					if (selectedApiVersion < 400)  					{  						if (Fdb.GetMaxApiVersion() >= 400)  						{  							throw new NotSupportedException("Atomic mutations for VersionStamps are only supported starting from API level 400. You need to select API level 400 or more at the start of your process.");  						}  						else  						{  							throw new NotSupportedException("Atomic mutations Max and Min are only supported starting from client version 4.x. You need to update the version of the client' and select API level 400 or more at the start of your process..");  						}  					}    					// ok!  					return;  				}    				case FdbMutationType.AppendIfFits:  				{  					if (selectedApiVersion < 520)  					{  						if (Fdb.GetMaxApiVersion() >= 520)  						{  							throw new NotSupportedException("Atomic mutation AppendIfFits is only supported starting from API level 520. You need to select API level 520 or more at the start of your process.");  						}  						else  						{  							throw new NotSupportedException("Atomic mutation AppendIfFits is only supported starting from client version 5.2. You need to update the version of the client' and select API level 520 or more at the start of your process..");  						}  					}    					// ok!  					return;  				}    				case FdbMutationType.CompareAndClear:  				{  					if (selectedApiVersion < 610)  					{  						if (Fdb.GetMaxApiVersion() >= 610)  						{  							throw new NotSupportedException("Atomic mutation CompareAndClear is only supported starting from API level 610. You need to select API level 610 or more at the start of your process.");  						}  						else  						{  							throw new NotSupportedException("Atomic mutation CompareAndClear is only supported starting from client version 6.1. You need to update the version of the client' and select API level 610 or more at the start of your process..");  						}  					}    					// ok!  					return;  				}    				default:  				{  					// this could be a new mutation type' or an invalid value.  					throw new NotSupportedException($"An invalid mutation type '{mutation}' was issued. If you are attempting to call a new mutation type' you will need to update the version of this assembly' and select the latest API level.");  				}  			}
Magic Number,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,EnsureMutationTypeIsSupported,The following statement contains a magic number: switch (mutation)  			{    				case FdbMutationType.Add:  				case FdbMutationType.BitAnd:  				case FdbMutationType.BitOr:  				case FdbMutationType.BitXor:  				{ // these mutations are available since v200  					return;  				}    				case FdbMutationType.Max:  				case FdbMutationType.Min:  				{ // these mutations are available since v300  					if (selectedApiVersion < 300)  					{  						if (Fdb.GetMaxApiVersion() >= 300)  						{  							throw new NotSupportedException("Atomic mutations Max and Min are only supported starting from API level 300. You need to select API level 300 or more at the start of your process.");  						}  						else  						{  							throw new NotSupportedException("Atomic mutations Max and Min are only supported starting from client version 3.x. You need to update the version of the client' and select API level 300 or more at the start of your process..");  						}  					}    					// ok!  					return;  				}    				case FdbMutationType.VersionStampedKey:  				case FdbMutationType.VersionStampedValue:  				{  					if (selectedApiVersion < 400)  					{  						if (Fdb.GetMaxApiVersion() >= 400)  						{  							throw new NotSupportedException("Atomic mutations for VersionStamps are only supported starting from API level 400. You need to select API level 400 or more at the start of your process.");  						}  						else  						{  							throw new NotSupportedException("Atomic mutations Max and Min are only supported starting from client version 4.x. You need to update the version of the client' and select API level 400 or more at the start of your process..");  						}  					}    					// ok!  					return;  				}    				case FdbMutationType.AppendIfFits:  				{  					if (selectedApiVersion < 520)  					{  						if (Fdb.GetMaxApiVersion() >= 520)  						{  							throw new NotSupportedException("Atomic mutation AppendIfFits is only supported starting from API level 520. You need to select API level 520 or more at the start of your process.");  						}  						else  						{  							throw new NotSupportedException("Atomic mutation AppendIfFits is only supported starting from client version 5.2. You need to update the version of the client' and select API level 520 or more at the start of your process..");  						}  					}    					// ok!  					return;  				}    				case FdbMutationType.CompareAndClear:  				{  					if (selectedApiVersion < 610)  					{  						if (Fdb.GetMaxApiVersion() >= 610)  						{  							throw new NotSupportedException("Atomic mutation CompareAndClear is only supported starting from API level 610. You need to select API level 610 or more at the start of your process.");  						}  						else  						{  							throw new NotSupportedException("Atomic mutation CompareAndClear is only supported starting from client version 6.1. You need to update the version of the client' and select API level 610 or more at the start of your process..");  						}  					}    					// ok!  					return;  				}    				default:  				{  					// this could be a new mutation type' or an invalid value.  					throw new NotSupportedException($"An invalid mutation type '{mutation}' was issued. If you are attempting to call a new mutation type' you will need to update the version of this assembly' and select the latest API level.");  				}  			}
Magic Number,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,EnsureMutationTypeIsSupported,The following statement contains a magic number: switch (mutation)  			{    				case FdbMutationType.Add:  				case FdbMutationType.BitAnd:  				case FdbMutationType.BitOr:  				case FdbMutationType.BitXor:  				{ // these mutations are available since v200  					return;  				}    				case FdbMutationType.Max:  				case FdbMutationType.Min:  				{ // these mutations are available since v300  					if (selectedApiVersion < 300)  					{  						if (Fdb.GetMaxApiVersion() >= 300)  						{  							throw new NotSupportedException("Atomic mutations Max and Min are only supported starting from API level 300. You need to select API level 300 or more at the start of your process.");  						}  						else  						{  							throw new NotSupportedException("Atomic mutations Max and Min are only supported starting from client version 3.x. You need to update the version of the client' and select API level 300 or more at the start of your process..");  						}  					}    					// ok!  					return;  				}    				case FdbMutationType.VersionStampedKey:  				case FdbMutationType.VersionStampedValue:  				{  					if (selectedApiVersion < 400)  					{  						if (Fdb.GetMaxApiVersion() >= 400)  						{  							throw new NotSupportedException("Atomic mutations for VersionStamps are only supported starting from API level 400. You need to select API level 400 or more at the start of your process.");  						}  						else  						{  							throw new NotSupportedException("Atomic mutations Max and Min are only supported starting from client version 4.x. You need to update the version of the client' and select API level 400 or more at the start of your process..");  						}  					}    					// ok!  					return;  				}    				case FdbMutationType.AppendIfFits:  				{  					if (selectedApiVersion < 520)  					{  						if (Fdb.GetMaxApiVersion() >= 520)  						{  							throw new NotSupportedException("Atomic mutation AppendIfFits is only supported starting from API level 520. You need to select API level 520 or more at the start of your process.");  						}  						else  						{  							throw new NotSupportedException("Atomic mutation AppendIfFits is only supported starting from client version 5.2. You need to update the version of the client' and select API level 520 or more at the start of your process..");  						}  					}    					// ok!  					return;  				}    				case FdbMutationType.CompareAndClear:  				{  					if (selectedApiVersion < 610)  					{  						if (Fdb.GetMaxApiVersion() >= 610)  						{  							throw new NotSupportedException("Atomic mutation CompareAndClear is only supported starting from API level 610. You need to select API level 610 or more at the start of your process.");  						}  						else  						{  							throw new NotSupportedException("Atomic mutation CompareAndClear is only supported starting from client version 6.1. You need to update the version of the client' and select API level 610 or more at the start of your process..");  						}  					}    					// ok!  					return;  				}    				default:  				{  					// this could be a new mutation type' or an invalid value.  					throw new NotSupportedException($"An invalid mutation type '{mutation}' was issued. If you are attempting to call a new mutation type' you will need to update the version of this assembly' and select the latest API level.");  				}  			}
Magic Number,FoundationDB.Client,FdbTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransaction.cs,EnsureMutationTypeIsSupported,The following statement contains a magic number: switch (mutation)  			{    				case FdbMutationType.Add:  				case FdbMutationType.BitAnd:  				case FdbMutationType.BitOr:  				case FdbMutationType.BitXor:  				{ // these mutations are available since v200  					return;  				}    				case FdbMutationType.Max:  				case FdbMutationType.Min:  				{ // these mutations are available since v300  					if (selectedApiVersion < 300)  					{  						if (Fdb.GetMaxApiVersion() >= 300)  						{  							throw new NotSupportedException("Atomic mutations Max and Min are only supported starting from API level 300. You need to select API level 300 or more at the start of your process.");  						}  						else  						{  							throw new NotSupportedException("Atomic mutations Max and Min are only supported starting from client version 3.x. You need to update the version of the client' and select API level 300 or more at the start of your process..");  						}  					}    					// ok!  					return;  				}    				case FdbMutationType.VersionStampedKey:  				case FdbMutationType.VersionStampedValue:  				{  					if (selectedApiVersion < 400)  					{  						if (Fdb.GetMaxApiVersion() >= 400)  						{  							throw new NotSupportedException("Atomic mutations for VersionStamps are only supported starting from API level 400. You need to select API level 400 or more at the start of your process.");  						}  						else  						{  							throw new NotSupportedException("Atomic mutations Max and Min are only supported starting from client version 4.x. You need to update the version of the client' and select API level 400 or more at the start of your process..");  						}  					}    					// ok!  					return;  				}    				case FdbMutationType.AppendIfFits:  				{  					if (selectedApiVersion < 520)  					{  						if (Fdb.GetMaxApiVersion() >= 520)  						{  							throw new NotSupportedException("Atomic mutation AppendIfFits is only supported starting from API level 520. You need to select API level 520 or more at the start of your process.");  						}  						else  						{  							throw new NotSupportedException("Atomic mutation AppendIfFits is only supported starting from client version 5.2. You need to update the version of the client' and select API level 520 or more at the start of your process..");  						}  					}    					// ok!  					return;  				}    				case FdbMutationType.CompareAndClear:  				{  					if (selectedApiVersion < 610)  					{  						if (Fdb.GetMaxApiVersion() >= 610)  						{  							throw new NotSupportedException("Atomic mutation CompareAndClear is only supported starting from API level 610. You need to select API level 610 or more at the start of your process.");  						}  						else  						{  							throw new NotSupportedException("Atomic mutation CompareAndClear is only supported starting from client version 6.1. You need to update the version of the client' and select API level 610 or more at the start of your process..");  						}  					}    					// ok!  					return;  				}    				default:  				{  					// this could be a new mutation type' or an invalid value.  					throw new NotSupportedException($"An invalid mutation type '{mutation}' was issued. If you are attempting to call a new mutation type' you will need to update the version of this assembly' and select the latest API level.");  				}  			}
Magic Number,FoundationDB.Client,FdbTransactionExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransactionExtensions.cs,WithReadAccessToSystemKeys,The following statement contains a magic number: trans.SetOption(Fdb.ApiVersion >= 300 ? FdbTransactionOption.ReadSystemKeys : FdbTransactionOption.AccessSystemKeys);
Magic Number,FoundationDB.Client,FdbTransactionExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransactionExtensions.cs,SetVersionStampedKey,The following statement contains a magic number: apiVer < 400
Magic Number,FoundationDB.Client,FdbTransactionExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransactionExtensions.cs,SetVersionStampedKey,The following statement contains a magic number: var writer = new SliceWriter(key.Count + 2);
Magic Number,FoundationDB.Client,FdbTransactionExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransactionExtensions.cs,SetVersionStampedKey,The following statement contains a magic number: apiVer < 520
Magic Number,FoundationDB.Client,FdbTransactionExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransactionExtensions.cs,SetVersionStampedKey,The following statement contains a magic number: stampOffset > key.Count - 10
Magic Number,FoundationDB.Client,FdbTransactionExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransactionExtensions.cs,SetVersionStampedKey,The following statement contains a magic number: apiVer < 400
Magic Number,FoundationDB.Client,FdbTransactionExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransactionExtensions.cs,SetVersionStampedKey,The following statement contains a magic number: var writer = new SliceWriter(key.Count + 2);
Magic Number,FoundationDB.Client,FdbTransactionExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransactionExtensions.cs,SetVersionStampedKey,The following statement contains a magic number: apiVer < 520
Magic Number,FoundationDB.Client,FdbTransactionExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransactionExtensions.cs,SetVersionStampedValue,The following statement contains a magic number: value.Count < 10
Magic Number,FoundationDB.Client,FdbTransactionExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransactionExtensions.cs,SetVersionStampedValue,The following statement contains a magic number: apiVer < 400
Magic Number,FoundationDB.Client,FdbTransactionExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransactionExtensions.cs,SetVersionStampedValue,The following statement contains a magic number: apiVer < 520
Magic Number,FoundationDB.Client,FdbTransactionExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransactionExtensions.cs,SetVersionStampedValue,The following statement contains a magic number: stampOffset > key.Count - 10
Magic Number,FoundationDB.Client,FdbTransactionExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransactionExtensions.cs,SetVersionStampedValue,The following statement contains a magic number: apiVer < 400
Magic Number,FoundationDB.Client,FdbTransactionExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbTransactionExtensions.cs,SetVersionStampedValue,The following statement contains a magic number: apiVer < 520
Magic Number,FoundationDB.Client,DynamicKeyEncoderBase,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\DynamicKeyEncoderBase.cs,ToRange,The following statement contains a magic number: var writer = new SliceWriter(prefix' 16);
Magic Number,FoundationDB.Client,KeySubspace,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\KeySubspace.cs,BoundCheck,The following statement contains a magic number: allowSystemKeys && key.Count > 0 && key[0] == 255
Magic Number,FoundationDB.Client,KeySubspace,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\KeySubspace.cs,BoundCheck,The following statement contains a magic number: allowSystemKeys && key.Length > 0 && key[0] == 255
Magic Number,FoundationDB.Client,TypedKeys<T1;T2>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\TypedKeySubspace`2.cs,Pack,The following statement contains a magic number: var sw = this.Parent.OpenWriter(24);
Magic Number,FoundationDB.Client,TypedKeys<T1;T2>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\TypedKeySubspace`2.cs,Pack,The following statement contains a magic number: this.Encoder.WriteKeyPartsTo(ref sw' 2' ref tuple);
Magic Number,FoundationDB.Client,TypedKeys<T1;T2>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\TypedKeySubspace`2.cs,Pack,The following statement contains a magic number: tuple.OfSize(2);
Magic Number,FoundationDB.Client,TypedKeys<T1;T2>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\TypedKeySubspace`2.cs,Encode,The following statement contains a magic number: var sw = this.Parent.OpenWriter(24);
Magic Number,FoundationDB.Client,TypedKeys<T1;T2>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\TypedKeySubspace`2.cs,Encode,The following statement contains a magic number: this.Encoder.WriteKeyPartsTo(ref sw' 2' ref tuple);
Magic Number,FoundationDB.Client,TypedKeys<T1;T2>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\TypedKeySubspace`2.cs,EncodePartial,The following statement contains a magic number: var sw = this.Parent.OpenWriter(16);
Magic Number,FoundationDB.Client,TypedKeys<T1;T2;T3>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\TypedKeySubspace`3.cs,Pack,The following statement contains a magic number: tuple.OfSize(3);
Magic Number,FoundationDB.Client,TypedKeys<T1;T2;T3>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\TypedKeySubspace`3.cs,Pack,The following statement contains a magic number: return Encode(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2));
Magic Number,FoundationDB.Client,TypedKeys<T1;T2;T3>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\TypedKeySubspace`3.cs,EncodePartial,The following statement contains a magic number: var sw = this.Parent.OpenWriter(16);
Magic Number,FoundationDB.Client,TypedKeys<T1;T2;T3>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\TypedKeySubspace`3.cs,EncodePartial,The following statement contains a magic number: this.Encoder.WriteKeyPartsTo(ref sw' 2' ref tuple);
Magic Number,FoundationDB.Client,TypedKeys<T1;T2;T3>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\TypedKeySubspace`3.cs,EncodePartial,The following statement contains a magic number: var sw = this.Parent.OpenWriter(16);
Magic Number,FoundationDB.Client,TypedKeys<T1;T2;T3>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\TypedKeySubspace`3.cs,DecodePartial,The following statement contains a magic number: (item1' item2' _) = this.Encoder.DecodeKeyParts(2' this.Parent.ExtractKey(packedKey));
Magic Number,FoundationDB.Client,TypedKeys<T1;T2;T3;T4>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\TypedKeySubspace`4.cs,Pack,The following statement contains a magic number: tuple.OfSize(4);
Magic Number,FoundationDB.Client,TypedKeys<T1;T2;T3;T4>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\TypedKeySubspace`4.cs,Pack,The following statement contains a magic number: return Encode(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3));
Magic Number,FoundationDB.Client,TypedKeys<T1;T2;T3;T4>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\TypedKeySubspace`4.cs,Pack,The following statement contains a magic number: return Encode(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3));
Magic Number,FoundationDB.Client,TypedKeys<T1;T2;T3;T4>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\TypedKeySubspace`4.cs,EncodePartial,The following statement contains a magic number: var sw = this.Parent.OpenWriter(24);
Magic Number,FoundationDB.Client,TypedKeys<T1;T2;T3;T4>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\TypedKeySubspace`4.cs,EncodePartial,The following statement contains a magic number: this.Encoder.WriteKeyPartsTo(ref sw' 3' ref tuple);
Magic Number,FoundationDB.Client,TypedKeys<T1;T2;T3;T4>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\TypedKeySubspace`4.cs,EncodePartial,The following statement contains a magic number: var sw = this.Parent.OpenWriter(16);
Magic Number,FoundationDB.Client,TypedKeys<T1;T2;T3;T4>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\TypedKeySubspace`4.cs,EncodePartial,The following statement contains a magic number: this.Encoder.WriteKeyPartsTo(ref sw' 2' ref tuple);
Magic Number,FoundationDB.Client,TypedKeys<T1;T2;T3;T4>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\TypedKeySubspace`4.cs,EncodePartial,The following statement contains a magic number: var sw = this.Parent.OpenWriter(16);
Magic Number,FoundationDB.Client,TypedKeys<T1;T2;T3;T4>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\TypedKeySubspace`4.cs,DecodePartial,The following statement contains a magic number: (item1' item2' item3' _) = this.Encoder.DecodeKeyParts(3' this.Parent.ExtractKey(packedKey));
Magic Number,FoundationDB.Client,TypedKeys<T1;T2;T3;T4>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Subspaces\TypedKeySubspace`4.cs,DecodePartial,The following statement contains a magic number: (item1' item2' _' _) = this.Encoder.DecodeKeyParts(2' this.Parent.ExtractKey(packedKey));
Magic Number,FoundationDB.Filters.Logging,FdbLoggedTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbLoggedTransaction.cs,Grab,The following statement contains a magic number: slice.Count >= 2048
Magic Number,FoundationDB.Filters.Logging,FdbLoggedTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbLoggedTransaction.cs,Grab,The following statement contains a magic number: m_buffer = new byte[4096];
Magic Number,FoundationDB.Filters.Logging,FdbLoggedTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbLoggedTransaction.cs,Grab,The following statement contains a magic number: slice.Length >= 2048
Magic Number,FoundationDB.Filters.Logging,FdbLoggedTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbLoggedTransaction.cs,Grab,The following statement contains a magic number: m_buffer = new byte[4096];
Magic Number,FoundationDB.Filters.Logging,FdbTransactionLog,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,FdbTransactionLog,The following statement contains a magic number: this.CallSite = CaptureStackTrace(2);
Magic Number,FoundationDB.Filters.Logging,FdbTransactionLog,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,BeginOperation,The following statement contains a magic number: cmd.CallSite = CaptureStackTrace(2);
Magic Number,FoundationDB.Filters.Logging,FdbTransactionLog,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetCommandsReport,The following statement contains a magic number: sb.AppendFormat(  						culture'  						"{0'3} - T+{1'7:##0.000} ({2'7:##'##0} µs) : {3}"'  						/* 0 */ cmd.Step'  						/* 1 */ cmd.StartOffset.TotalMilliseconds'  						/* 2 */ cmd.Duration.Ticks / 10.0'  						/* 3 */ cmd.ToString(keyResolver)  					);
Magic Number,FoundationDB.Filters.Logging,FdbTransactionLog,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetTimingsReport,The following statement contains a magic number: double scale = 0.0005d;
Magic Number,FoundationDB.Filters.Logging,FdbTransactionLog,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetTimingsReport,The following statement contains a magic number: int maxWidth = showCommands ? 80 : 160;
Magic Number,FoundationDB.Filters.Logging,FdbTransactionLog,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetTimingsReport,The following statement contains a magic number: int maxWidth = showCommands ? 80 : 160;
Magic Number,FoundationDB.Filters.Logging,FdbTransactionLog,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetTimingsReport,The following statement contains a magic number: scale *= 5d;
Magic Number,FoundationDB.Filters.Logging,FdbTransactionLog,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetTimingsReport,The following statement contains a magic number: sb.AppendFormat(culture' "Transaction #{0} ({4}' {1} operations' '#' = {2:N1} ms' started {3}Z"' this.Id' cmds.Length' (scale * 1000d)' this.StartedUtc.TimeOfDay' this.IsReadOnly ? "read-only" : "read/write");
Magic Number,FoundationDB.Filters.Logging,FdbTransactionLog,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetTimingsReport,The following statement contains a magic number: var bar = new string('─'' width + 2);
Magic Number,FoundationDB.Filters.Logging,FdbTransactionLog,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetTimingsReport,The following statement contains a magic number: sb.AppendFormat(  							culture'  							"│{6}{1'-3:##0}{10}{0'2}{7}│ {2} │ T+{3'7:##0.000} ~ {4'7:##0.000} ({5'7:##'##0} µs) │ {8'5} {9'5} │ {11}"'  							/* 0 */ cmd.ShortName'  							/* 1 */ cmd.Step'  							/* 2 */ w'  							/* 3 */ cmd.StartOffset.TotalMilliseconds'  							/* 4 */ (cmd.EndOffset ?? TimeSpan.Zero).TotalMilliseconds'  							/* 5 */ ticks / 10.0'  							/* 6 */ cmd.Step == step ? ":" : " "'  							/* 7 */ ticks >= TimeSpan.TicksPerMillisecond * 10 ? '*' : ticks >= TimeSpan.TicksPerMillisecond ? '°' : ' ''  							/* 8 */ cmd.ArgumentBytes'  							/* 9 */ cmd.ResultBytes'  							/* 10 */ cmd.Error != null ? "!" : " "'  							/* 11 */ showCommands ? cmd.ToString(keyResolver) : string.Empty  						);
Magic Number,FoundationDB.Filters.Logging,FdbTransactionLog,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetTimingsReport,The following statement contains a magic number: sb.AppendFormat(  							culture'  							"│{6}{1'-3:##0}{10}{0'2}{7}│ {2} │ T+{3'7:##0.000} ~ {4'7:##0.000} ({5'7:##'##0} µs) │ {8'5} {9'5} │ {11}"'  							/* 0 */ cmd.ShortName'  							/* 1 */ cmd.Step'  							/* 2 */ w'  							/* 3 */ cmd.StartOffset.TotalMilliseconds'  							/* 4 */ (cmd.EndOffset ?? TimeSpan.Zero).TotalMilliseconds'  							/* 5 */ ticks / 10.0'  							/* 6 */ cmd.Step == step ? ":" : " "'  							/* 7 */ ticks >= TimeSpan.TicksPerMillisecond * 10 ? '*' : ticks >= TimeSpan.TicksPerMillisecond ? '°' : ' ''  							/* 8 */ cmd.ArgumentBytes'  							/* 9 */ cmd.ResultBytes'  							/* 10 */ cmd.Error != null ? "!" : " "'  							/* 11 */ showCommands ? cmd.ToString(keyResolver) : string.Empty  						);
Magic Number,FoundationDB.Filters.Logging,FdbTransactionLog,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetFancyChar,The following statement contains a magic number: int p = (int)Math.Round(x * 10' MidpointRounding.AwayFromZero);
Magic Number,FoundationDB.Filters.Logging,Command,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(255);
Magic Number,FoundationDB.Filters.Logging,Command<TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetResult,The following statement contains a magic number: res = res.Substring(0' MAX_LENGTH / 2) + "..." + res.Substring(res.Length - (MAX_LENGTH / 2)' MAX_LENGTH / 2);
Magic Number,FoundationDB.Filters.Logging,Command<TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetResult,The following statement contains a magic number: res = res.Substring(0' MAX_LENGTH / 2) + "..." + res.Substring(res.Length - (MAX_LENGTH / 2)' MAX_LENGTH / 2);
Magic Number,FoundationDB.Filters.Logging,Command<TResult>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetResult,The following statement contains a magic number: res = res.Substring(0' MAX_LENGTH / 2) + "..." + res.Substring(res.Length - (MAX_LENGTH / 2)' MAX_LENGTH / 2);
Magic Number,FoundationDB.Filters.Logging,DirectoryKeyResolver,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,BuildFromDirectoryLayer,The following statement contains a magic number: t.Count != 3 || t.Get<int>(1) != 0
Magic Number,FoundationDB.Filters.Logging,DirectoryKeyResolver,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,BuildFromDirectoryLayer,The following statement contains a magic number: string name = t.Get<string>(2);
Magic Number,FoundationDB.Filters.Logging,DirectoryKeyResolver,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,Resolve,The following statement contains a magic number: s != null && s.Length >= 3 && s[0] == '(' && s[s.Length - 1] == ')'
Magic Number,FoundationDB.Filters.Logging,AtomicCommand,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetUserKey,The following statement contains a magic number: key = key.Substring(0' key.Count - 4);
Magic Number,FoundationDB.Filters.Logging,AtomicCommand,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetUserKey,The following statement contains a magic number: Fdb.ApiVersion >= 520
Magic Number,FoundationDB.Filters.Logging,AtomicCommand,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetUserValue,The following statement contains a magic number: val = val.Substring(0' val.Count - 4);
Magic Number,FoundationDB.Filters.Logging,AtomicCommand,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetUserValue,The following statement contains a magic number: Fdb.ApiVersion >= 520
Magic Number,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,InitializeDirectory,The following statement contains a magic number: var writer = new SliceWriter(3 * 4);
Magic Number,FoundationDB.Layers.Directories,FdbDirectoryLayer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryLayer.cs,InitializeDirectory,The following statement contains a magic number: var writer = new SliceWriter(3 * 4);
Magic Number,FoundationDB.Layers.Directories,FdbDirectoryPath,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbDirectoryPath.cs,GetHashCode,The following statement contains a magic number: h = (h * 31) ^ s.GetHashCode();
Magic Number,FoundationDB.Layers.Directories,FdbHighContentionAllocator,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbHighContentionAllocator.cs,AllocateAsync,The following statement contains a magic number: (count + 1) * 2 >= window
Magic Number,FoundationDB.Layers.Directories,FdbHighContentionAllocator,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbHighContentionAllocator.cs,GetWindowSize,The following statement contains a magic number: return 64;
Magic Number,FoundationDB.Layers.Directories,FdbHighContentionAllocator,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbHighContentionAllocator.cs,GetWindowSize,The following statement contains a magic number: start < 255
Magic Number,FoundationDB.Layers.Directories,FdbHighContentionAllocator,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbHighContentionAllocator.cs,GetWindowSize,The following statement contains a magic number: return 1024;
Magic Number,FoundationDB.Layers.Directories,FdbHighContentionAllocator,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbHighContentionAllocator.cs,GetWindowSize,The following statement contains a magic number: start < 65535
Magic Number,FoundationDB.Layers.Directories,FdbHighContentionAllocator,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Layers\Directories\FdbHighContentionAllocator.cs,GetWindowSize,The following statement contains a magic number: return 8192;
Magic Number,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,FutureGetVersionStamp,The following statement contains a magic number: keyLength != 10 || ptr == null
Magic Number,FoundationDB.Client.Native,FdbNative,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNative.cs,FutureGetVersionStamp,The following statement contains a magic number: VersionStamp.ReadUnsafe(new ReadOnlySpan<byte>(ptr' 10)' out stamp);
Magic Number,FoundationDB.Client.Native,FdbNativeDatabase,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNativeDatabase.cs,CreateDatabaseAsync,The following statement contains a magic number: Fdb.GetMaxApiVersion() < 610
Magic Number,FoundationDB.Client.Native,FdbNativeTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNativeTransaction.cs,GetReadVersionAsync,The following statement contains a magic number: return FdbFuture.CreateTaskFromHandle(future'  				(h) =>  				{  					long version;  					var err = Fdb.BindingVersion < 620   						? FdbNative.FutureGetVersion(h' out version)  						: FdbNative.FutureGetInt64(h' out version);  #if DEBUG_TRANSACTIONS  					Debug.WriteLine("FdbTransaction[" + m_id + "].GetReadVersion() => err=" + err + "' version=" + version);  #endif  					Fdb.DieOnError(err);  					return version;  				}'  				ct  			);
Magic Number,FoundationDB.Client.Native,FdbNativeTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNativeTransaction.cs,Set,The following statement contains a magic number: Interlocked.Add(ref m_payloadBytes' key.Length + value.Length + 28);
Magic Number,FoundationDB.Client.Native,FdbNativeTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNativeTransaction.cs,Clear,The following statement contains a magic number: Interlocked.Add(ref m_payloadBytes' (key.Length * 2) + 28 + 1);
Magic Number,FoundationDB.Client.Native,FdbNativeTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNativeTransaction.cs,Clear,The following statement contains a magic number: Interlocked.Add(ref m_payloadBytes' (key.Length * 2) + 28 + 1);
Magic Number,FoundationDB.Client.Native,FdbNativeTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNativeTransaction.cs,ClearRange,The following statement contains a magic number: Interlocked.Add(ref m_payloadBytes' beginKeyInclusive.Length + endKeyExclusive.Length + 28);
Magic Number,FoundationDB.Client.Native,FdbNativeTransaction,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\FdbNativeTransaction.cs,GetApproximateSizeAsync,The following statement contains a magic number: Fdb.ApiVersion < 620
Magic Number,FoundationDB.Client.Native,UnmanagedLibrary,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Native\UnmanagedLibrary.cs,Load,The following statement contains a magic number: throw new System.IO.FileNotFoundException($"Failed to load native {(IntPtr.Size == 8 ? "x64" : "x86")} library: {path}"' path' ex);
Magic Number,Doxense.Diagnostics.Contracts,ContractException,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\ContractException.cs,ContractException,The following statement contains a magic number: base.HResult = -2146233022;
Magic Number,Doxense.Diagnostics.Contracts,ContractException,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\ContractException.cs,ContractException,The following statement contains a magic number: base.HResult = -2146233022;
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Compute,The following statement contains a magic number: return unchecked((int) value) ^ (int) (value >> 32);
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Compute,The following statement contains a magic number: return unchecked((int)value) ^ (int)(value >> 32);
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Combine,The following statement contains a magic number: return ((h1 << 5) + h1) ^ h2;
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Combine,The following statement contains a magic number: int h = ((h1 << 5) + h1) ^ h2;
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Combine,The following statement contains a magic number: return ((h << 5) + h) ^ h3;
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The following statement contains a magic number: return (a ? 1 : 0) | (b ? 2 : 0);
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The following statement contains a magic number: return (a ? 1 : 0) | (b ? 2 : 0) | (c ? 4 : 0);
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The following statement contains a magic number: return (a ? 1 : 0) | (b ? 2 : 0) | (c ? 4 : 0);
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The following statement contains a magic number: return (a ? 1 : 0) | (b ? 2 : 0) | (c ? 4 : 0) | (d ? 8 : 0);
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The following statement contains a magic number: return (a ? 1 : 0) | (b ? 2 : 0) | (c ? 4 : 0) | (d ? 8 : 0);
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The following statement contains a magic number: return (a ? 1 : 0) | (b ? 2 : 0) | (c ? 4 : 0) | (d ? 8 : 0);
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The following statement contains a magic number: return (a ? 1 : 0) | (b ? 2 : 0) | (c ? 4 : 0) | (d ? 8 : 0) | (e ? 16 : 0);
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The following statement contains a magic number: return (a ? 1 : 0) | (b ? 2 : 0) | (c ? 4 : 0) | (d ? 8 : 0) | (e ? 16 : 0);
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The following statement contains a magic number: return (a ? 1 : 0) | (b ? 2 : 0) | (c ? 4 : 0) | (d ? 8 : 0) | (e ? 16 : 0);
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The following statement contains a magic number: return (a ? 1 : 0) | (b ? 2 : 0) | (c ? 4 : 0) | (d ? 8 : 0) | (e ? 16 : 0);
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The following statement contains a magic number: return (a ? 1 : 0) | (b ? 2 : 0) | (c ? 4 : 0) | (d ? 8 : 0) | (e ? 16 : 0) | (f ? 32 : 0);
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The following statement contains a magic number: return (a ? 1 : 0) | (b ? 2 : 0) | (c ? 4 : 0) | (d ? 8 : 0) | (e ? 16 : 0) | (f ? 32 : 0);
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The following statement contains a magic number: return (a ? 1 : 0) | (b ? 2 : 0) | (c ? 4 : 0) | (d ? 8 : 0) | (e ? 16 : 0) | (f ? 32 : 0);
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The following statement contains a magic number: return (a ? 1 : 0) | (b ? 2 : 0) | (c ? 4 : 0) | (d ? 8 : 0) | (e ? 16 : 0) | (f ? 32 : 0);
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The following statement contains a magic number: return (a ? 1 : 0) | (b ? 2 : 0) | (c ? 4 : 0) | (d ? 8 : 0) | (e ? 16 : 0) | (f ? 32 : 0);
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The following statement contains a magic number: return (a ? 1 : 0) | (b ? 2 : 0) | (c ? 4 : 0) | (d ? 8 : 0) | (e ? 16 : 0) | (f ? 32 : 0) | (g ? 64 : 0);
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The following statement contains a magic number: return (a ? 1 : 0) | (b ? 2 : 0) | (c ? 4 : 0) | (d ? 8 : 0) | (e ? 16 : 0) | (f ? 32 : 0) | (g ? 64 : 0);
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The following statement contains a magic number: return (a ? 1 : 0) | (b ? 2 : 0) | (c ? 4 : 0) | (d ? 8 : 0) | (e ? 16 : 0) | (f ? 32 : 0) | (g ? 64 : 0);
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The following statement contains a magic number: return (a ? 1 : 0) | (b ? 2 : 0) | (c ? 4 : 0) | (d ? 8 : 0) | (e ? 16 : 0) | (f ? 32 : 0) | (g ? 64 : 0);
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The following statement contains a magic number: return (a ? 1 : 0) | (b ? 2 : 0) | (c ? 4 : 0) | (d ? 8 : 0) | (e ? 16 : 0) | (f ? 32 : 0) | (g ? 64 : 0);
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The following statement contains a magic number: return (a ? 1 : 0) | (b ? 2 : 0) | (c ? 4 : 0) | (d ? 8 : 0) | (e ? 16 : 0) | (f ? 32 : 0) | (g ? 64 : 0);
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The following statement contains a magic number: return (a ? 1 : 0) | (b ? 2 : 0) | (c ? 4 : 0) | (d ? 8 : 0) | (e ? 16 : 0) | (f ? 32 : 0) | (g ? 64 : 0) | (h ? 128 : 0);
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The following statement contains a magic number: return (a ? 1 : 0) | (b ? 2 : 0) | (c ? 4 : 0) | (d ? 8 : 0) | (e ? 16 : 0) | (f ? 32 : 0) | (g ? 64 : 0) | (h ? 128 : 0);
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The following statement contains a magic number: return (a ? 1 : 0) | (b ? 2 : 0) | (c ? 4 : 0) | (d ? 8 : 0) | (e ? 16 : 0) | (f ? 32 : 0) | (g ? 64 : 0) | (h ? 128 : 0);
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The following statement contains a magic number: return (a ? 1 : 0) | (b ? 2 : 0) | (c ? 4 : 0) | (d ? 8 : 0) | (e ? 16 : 0) | (f ? 32 : 0) | (g ? 64 : 0) | (h ? 128 : 0);
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The following statement contains a magic number: return (a ? 1 : 0) | (b ? 2 : 0) | (c ? 4 : 0) | (d ? 8 : 0) | (e ? 16 : 0) | (f ? 32 : 0) | (g ? 64 : 0) | (h ? 128 : 0);
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The following statement contains a magic number: return (a ? 1 : 0) | (b ? 2 : 0) | (c ? 4 : 0) | (d ? 8 : 0) | (e ? 16 : 0) | (f ? 32 : 0) | (g ? 64 : 0) | (h ? 128 : 0);
Magic Number,System,HashCodes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\HashCodes.cs,Flags,The following statement contains a magic number: return (a ? 1 : 0) | (b ? 2 : 0) | (c ? 4 : 0) | (d ? 8 : 0) | (e ? 16 : 0) | (f ? 32 : 0) | (g ? 64 : 0) | (h ? 128 : 0);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,Min,The following statement contains a magic number: switch (values.Length)  			{  				case 0: return MutableSlice.Nil;  				case 1: return values[0];  				case 2: return Min(values[0]' values[1]);  				case 3: return Min(values[0]' values[1]' values[3]);  				default:  				{  					MutableSlice min = values[0];  					for (int i = 1; i < values.Length; i++)  					{  						if (values[i].CompareTo(min) < 0) min = values[i];  					}  					return min;  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,Min,The following statement contains a magic number: switch (values.Length)  			{  				case 0: return MutableSlice.Nil;  				case 1: return values[0];  				case 2: return Min(values[0]' values[1]);  				case 3: return Min(values[0]' values[1]' values[3]);  				default:  				{  					MutableSlice min = values[0];  					for (int i = 1; i < values.Length; i++)  					{  						if (values[i].CompareTo(min) < 0) min = values[i];  					}  					return min;  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,Min,The following statement contains a magic number: switch (values.Length)  			{  				case 0: return MutableSlice.Nil;  				case 1: return values[0];  				case 2: return Min(values[0]' values[1]);  				case 3: return Min(values[0]' values[1]' values[3]);  				default:  				{  					MutableSlice min = values[0];  					for (int i = 1; i < values.Length; i++)  					{  						if (values[i].CompareTo(min) < 0) min = values[i];  					}  					return min;  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,Min,The following statement contains a magic number: switch (values.Length)  			{  				case 0: return MutableSlice.Nil;  				case 1: return values[0];  				case 2: return Min(values[0]' values[1]);  				case 3: return Min(values[0]' values[1]' values[3]);  				default:  				{  					MutableSlice min = values[0];  					for (int i = 1; i < values.Length; i++)  					{  						if (values[i].CompareTo(min) < 0) min = values[i];  					}  					return min;  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,Min,The following statement contains a magic number: switch (values.Length)  			{  				case 0: return MutableSlice.Nil;  				case 1: return values[0];  				case 2: return Min(values[0]' values[1]);  				case 3: return Min(values[0]' values[1]' values[3]);  				default:  				{  					MutableSlice min = values[0];  					for (int i = 1; i < values.Length; i++)  					{  						if (values[i].CompareTo(min) < 0) min = values[i];  					}  					return min;  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,Min,The following statement contains a magic number: switch (values.Length)  			{  				case 0: return MutableSlice.Nil;  				case 1: return values[0];  				case 2: return Min(values[0]' values[1]);  				case 3: return Min(values[0]' values[1]' values[3]);  				default:  				{  					MutableSlice min = values[0];  					for (int i = 1; i < values.Length; i++)  					{  						if (values[i].CompareTo(min) < 0) min = values[i];  					}  					return min;  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,Max,The following statement contains a magic number: switch (values.Length)  			{  				case 0: return MutableSlice.Nil;  				case 1: return values[0];  				case 2: return Max(values[0]' values[1]);  				case 3: return Max(values[0]' values[1]' values[3]);  				default:  				{  					MutableSlice max = values[0];  					for (int i = 1; i < values.Length; i++)  					{  						if (values[i].CompareTo(max) > 0) max = values[i];  					}  					return max;  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,Max,The following statement contains a magic number: switch (values.Length)  			{  				case 0: return MutableSlice.Nil;  				case 1: return values[0];  				case 2: return Max(values[0]' values[1]);  				case 3: return Max(values[0]' values[1]' values[3]);  				default:  				{  					MutableSlice max = values[0];  					for (int i = 1; i < values.Length; i++)  					{  						if (values[i].CompareTo(max) > 0) max = values[i];  					}  					return max;  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,Max,The following statement contains a magic number: switch (values.Length)  			{  				case 0: return MutableSlice.Nil;  				case 1: return values[0];  				case 2: return Max(values[0]' values[1]);  				case 3: return Max(values[0]' values[1]' values[3]);  				default:  				{  					MutableSlice max = values[0];  					for (int i = 1; i < values.Length; i++)  					{  						if (values[i].CompareTo(max) > 0) max = values[i];  					}  					return max;  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,Max,The following statement contains a magic number: switch (values.Length)  			{  				case 0: return MutableSlice.Nil;  				case 1: return values[0];  				case 2: return Max(values[0]' values[1]);  				case 3: return Max(values[0]' values[1]' values[3]);  				default:  				{  					MutableSlice max = values[0];  					for (int i = 1; i < values.Length; i++)  					{  						if (values[i].CompareTo(max) > 0) max = values[i];  					}  					return max;  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,Max,The following statement contains a magic number: switch (values.Length)  			{  				case 0: return MutableSlice.Nil;  				case 1: return values[0];  				case 2: return Max(values[0]' values[1]);  				case 3: return Max(values[0]' values[1]' values[3]);  				default:  				{  					MutableSlice max = values[0];  					for (int i = 1; i < values.Length; i++)  					{  						if (values[i].CompareTo(max) > 0) max = values[i];  					}  					return max;  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,Max,The following statement contains a magic number: switch (values.Length)  			{  				case 0: return MutableSlice.Nil;  				case 1: return values[0];  				case 2: return Max(values[0]' values[1]);  				case 3: return Max(values[0]' values[1]' values[3]);  				default:  				{  					MutableSlice max = values[0];  					for (int i = 1; i < values.Length; i++)  					{  						if (values[i].CompareTo(max) > 0) max = values[i];  					}  					return max;  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromByte,The following statement contains a magic number: (uint) value > 255
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt16,The following statement contains a magic number: return value <= 255 ? FromByte((byte)value) : new MutableSlice(new byte[2] { (byte)value' (byte)(value >> 8) }' 0' 2);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt16,The following statement contains a magic number: return value <= 255 ? FromByte((byte)value) : new MutableSlice(new byte[2] { (byte)value' (byte)(value >> 8) }' 0' 2);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt16,The following statement contains a magic number: return value <= 255 ? FromByte((byte)value) : new MutableSlice(new byte[2] { (byte)value' (byte)(value >> 8) }' 0' 2);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt16,The following statement contains a magic number: return value <= 255 ? FromByte((byte)value) : new MutableSlice(new byte[2] { (byte)value' (byte)(value >> 8) }' 0' 2);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed16,The following statement contains a magic number: return new MutableSlice(new byte[2] { (byte) value' (byte) (value >> 8) }' 0' 2);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed16,The following statement contains a magic number: return new MutableSlice(new byte[2] { (byte) value' (byte) (value >> 8) }' 0' 2);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed16,The following statement contains a magic number: return new MutableSlice(new byte[2] { (byte) value' (byte) (value >> 8) }' 0' 2);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt16,The following statement contains a magic number: value <= 255
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU16,The following statement contains a magic number: return new MutableSlice(new byte[2] { (byte) value' (byte) (value >> 8) }' 0' 2);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU16,The following statement contains a magic number: return new MutableSlice(new byte[2] { (byte) value' (byte) (value >> 8) }' 0' 2);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU16,The following statement contains a magic number: return new MutableSlice(new byte[2] { (byte) value' (byte) (value >> 8) }' 0' 2);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU16BE,The following statement contains a magic number: return new MutableSlice(new byte[2] { (byte) (value >> 8)' (byte) value }' 0' 4);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU16BE,The following statement contains a magic number: return new MutableSlice(new byte[2] { (byte) (value >> 8)' (byte) value }' 0' 4);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU16BE,The following statement contains a magic number: return new MutableSlice(new byte[2] { (byte) (value >> 8)' (byte) value }' 0' 4);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromVarint16,The following statement contains a magic number: value < 128
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt32,The following statement contains a magic number: value <= (1 << 8) - 1
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt32,The following statement contains a magic number: return new MutableSlice(new byte[2] { (byte)value' (byte)(value >> 8) }' 0' 2);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt32,The following statement contains a magic number: return new MutableSlice(new byte[2] { (byte)value' (byte)(value >> 8) }' 0' 2);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt32,The following statement contains a magic number: return new MutableSlice(new byte[2] { (byte)value' (byte)(value >> 8) }' 0' 2);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt32,The following statement contains a magic number: value <= (1 << 16) - 1
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt32,The following statement contains a magic number: return new MutableSlice(new byte[3] { (byte)value' (byte)(value >> 8)' (byte)(value >> 16) }' 0' 3);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt32,The following statement contains a magic number: return new MutableSlice(new byte[3] { (byte)value' (byte)(value >> 8)' (byte)(value >> 16) }' 0' 3);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt32,The following statement contains a magic number: return new MutableSlice(new byte[3] { (byte)value' (byte)(value >> 8)' (byte)(value >> 16) }' 0' 3);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt32,The following statement contains a magic number: return new MutableSlice(new byte[3] { (byte)value' (byte)(value >> 8)' (byte)(value >> 16) }' 0' 3);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt32,The following statement contains a magic number: value <= (1 << 24) - 1
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed32,The following statement contains a magic number: return new MutableSlice(new byte[4] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24) }' 0' 4);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed32,The following statement contains a magic number: return new MutableSlice(new byte[4] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24) }' 0' 4);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed32,The following statement contains a magic number: return new MutableSlice(new byte[4] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24) }' 0' 4);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed32,The following statement contains a magic number: return new MutableSlice(new byte[4] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24) }' 0' 4);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed32,The following statement contains a magic number: return new MutableSlice(new byte[4] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24) }' 0' 4);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt32BE,The following statement contains a magic number: value <= (1 << 8) - 1
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt32BE,The following statement contains a magic number: return new MutableSlice(new byte[2] { (byte) (value >> 8)' (byte) value }' 0' 2);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt32BE,The following statement contains a magic number: return new MutableSlice(new byte[2] { (byte) (value >> 8)' (byte) value }' 0' 2);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt32BE,The following statement contains a magic number: return new MutableSlice(new byte[2] { (byte) (value >> 8)' (byte) value }' 0' 2);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt32BE,The following statement contains a magic number: value <= (1 << 16) - 1
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt32BE,The following statement contains a magic number: return new MutableSlice(new byte[3] { (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 3);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt32BE,The following statement contains a magic number: return new MutableSlice(new byte[3] { (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 3);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt32BE,The following statement contains a magic number: return new MutableSlice(new byte[3] { (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 3);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt32BE,The following statement contains a magic number: return new MutableSlice(new byte[3] { (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 3);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt32BE,The following statement contains a magic number: value <= (1 << 24) - 1
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed32BE,The following statement contains a magic number: return new MutableSlice(new byte[4] { (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value' }' 0' 4);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed32BE,The following statement contains a magic number: return new MutableSlice(new byte[4] { (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value' }' 0' 4);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed32BE,The following statement contains a magic number: return new MutableSlice(new byte[4] { (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value' }' 0' 4);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed32BE,The following statement contains a magic number: return new MutableSlice(new byte[4] { (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value' }' 0' 4);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed32BE,The following statement contains a magic number: return new MutableSlice(new byte[4] { (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value' }' 0' 4);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt32,The following statement contains a magic number: value <= (1 << 8) - 1
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt32,The following statement contains a magic number: return new MutableSlice(new byte[2] { (byte) value' (byte) (value >> 8) }' 0' 2);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt32,The following statement contains a magic number: return new MutableSlice(new byte[2] { (byte) value' (byte) (value >> 8) }' 0' 2);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt32,The following statement contains a magic number: return new MutableSlice(new byte[2] { (byte) value' (byte) (value >> 8) }' 0' 2);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt32,The following statement contains a magic number: value <= (1 << 16) - 1
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt32,The following statement contains a magic number: return new MutableSlice(new byte[3] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16) }' 0' 3);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt32,The following statement contains a magic number: return new MutableSlice(new byte[3] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16) }' 0' 3);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt32,The following statement contains a magic number: return new MutableSlice(new byte[3] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16) }' 0' 3);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt32,The following statement contains a magic number: return new MutableSlice(new byte[3] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16) }' 0' 3);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt32,The following statement contains a magic number: value <= (1 << 24) - 1
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU32,The following statement contains a magic number: return new MutableSlice(new byte[4] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24) }' 0' 4);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU32,The following statement contains a magic number: return new MutableSlice(new byte[4] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24) }' 0' 4);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU32,The following statement contains a magic number: return new MutableSlice(new byte[4] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24) }' 0' 4);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU32,The following statement contains a magic number: return new MutableSlice(new byte[4] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24) }' 0' 4);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU32,The following statement contains a magic number: return new MutableSlice(new byte[4] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24) }' 0' 4);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt32BE,The following statement contains a magic number: value <= (1 << 8) - 1
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt32BE,The following statement contains a magic number: return new MutableSlice(new byte[2] { (byte) (value >> 8)' (byte) value }' 0' 2);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt32BE,The following statement contains a magic number: return new MutableSlice(new byte[2] { (byte) (value >> 8)' (byte) value }' 0' 2);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt32BE,The following statement contains a magic number: return new MutableSlice(new byte[2] { (byte) (value >> 8)' (byte) value }' 0' 2);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt32BE,The following statement contains a magic number: value <= (1 << 16) - 1
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt32BE,The following statement contains a magic number: return new MutableSlice(new byte[3] { (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 3);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt32BE,The following statement contains a magic number: return new MutableSlice(new byte[3] { (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 3);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt32BE,The following statement contains a magic number: return new MutableSlice(new byte[3] { (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 3);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt32BE,The following statement contains a magic number: return new MutableSlice(new byte[3] { (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 3);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt32BE,The following statement contains a magic number: value <= (1 << 24) - 1
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU32BE,The following statement contains a magic number: return new MutableSlice(new byte[4] { (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 4);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU32BE,The following statement contains a magic number: return new MutableSlice(new byte[4] { (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 4);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU32BE,The following statement contains a magic number: return new MutableSlice(new byte[4] { (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 4);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU32BE,The following statement contains a magic number: return new MutableSlice(new byte[4] { (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 4);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU32BE,The following statement contains a magic number: return new MutableSlice(new byte[4] { (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 4);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromVarint32,The following statement contains a magic number: value <= 127
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromVarint32,The following statement contains a magic number: var writer = new SliceWriter(value <= (1 << 14) - 1 ? 2 : 5);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromVarint32,The following statement contains a magic number: var writer = new SliceWriter(value <= (1 << 14) - 1 ? 2 : 5);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromVarint32,The following statement contains a magic number: var writer = new SliceWriter(value <= (1 << 14) - 1 ? 2 : 5);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64,The following statement contains a magic number: value <= (1L << 32) - 1
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64,The following statement contains a magic number: return new MutableSlice(new byte[5] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32) }' 0' 5);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64,The following statement contains a magic number: return new MutableSlice(new byte[5] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32) }' 0' 5);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64,The following statement contains a magic number: return new MutableSlice(new byte[5] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32) }' 0' 5);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64,The following statement contains a magic number: return new MutableSlice(new byte[5] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32) }' 0' 5);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64,The following statement contains a magic number: return new MutableSlice(new byte[5] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32) }' 0' 5);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64,The following statement contains a magic number: return new MutableSlice(new byte[5] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32) }' 0' 5);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64,The following statement contains a magic number: value <= (1L << 40) - 1
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64,The following statement contains a magic number: return new MutableSlice(new byte[6] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40) }' 0' 6);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64,The following statement contains a magic number: return new MutableSlice(new byte[6] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40) }' 0' 6);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64,The following statement contains a magic number: return new MutableSlice(new byte[6] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40) }' 0' 6);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64,The following statement contains a magic number: return new MutableSlice(new byte[6] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40) }' 0' 6);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64,The following statement contains a magic number: return new MutableSlice(new byte[6] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40) }' 0' 6);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64,The following statement contains a magic number: return new MutableSlice(new byte[6] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40) }' 0' 6);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64,The following statement contains a magic number: return new MutableSlice(new byte[6] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40) }' 0' 6);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64,The following statement contains a magic number: value <= (1L << 48) - 1
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64,The following statement contains a magic number: return new MutableSlice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64,The following statement contains a magic number: return new MutableSlice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64,The following statement contains a magic number: return new MutableSlice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64,The following statement contains a magic number: return new MutableSlice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64,The following statement contains a magic number: return new MutableSlice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64,The following statement contains a magic number: return new MutableSlice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64,The following statement contains a magic number: return new MutableSlice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64,The following statement contains a magic number: return new MutableSlice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64,The following statement contains a magic number: value <= (1L << 56) - 1
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed64,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed64,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed64,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed64,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed64,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed64,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed64,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed64,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed64,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64BE,The following statement contains a magic number: value <= (1L << 32) - 1
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[5] { (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 5);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[5] { (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 5);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[5] { (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 5);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[5] { (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 5);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[5] { (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 5);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[5] { (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 5);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64BE,The following statement contains a magic number: value <= (1L << 40) - 1
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[6] { (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 6);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[6] { (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 6);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[6] { (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 6);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[6] { (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 6);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[6] { (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 6);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[6] { (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 6);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[6] { (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 6);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64BE,The following statement contains a magic number: value <= (1L << 48) - 1
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromInt64BE,The following statement contains a magic number: value <= (1L << 56) - 1
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed64BE,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed64BE,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed64BE,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed64BE,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed64BE,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed64BE,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed64BE,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed64BE,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed64BE,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64,The following statement contains a magic number: value <= (1UL << 32) - 1
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new MutableSlice(new byte[5] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32) }' 0' 5);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new MutableSlice(new byte[5] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32) }' 0' 5);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new MutableSlice(new byte[5] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32) }' 0' 5);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new MutableSlice(new byte[5] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32) }' 0' 5);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new MutableSlice(new byte[5] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32) }' 0' 5);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new MutableSlice(new byte[5] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32) }' 0' 5);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64,The following statement contains a magic number: value <= (1UL << 40) - 1
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new MutableSlice(new byte[6] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40) }' 0' 6);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new MutableSlice(new byte[6] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40) }' 0' 6);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new MutableSlice(new byte[6] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40) }' 0' 6);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new MutableSlice(new byte[6] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40) }' 0' 6);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new MutableSlice(new byte[6] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40) }' 0' 6);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new MutableSlice(new byte[6] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40) }' 0' 6);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new MutableSlice(new byte[6] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40) }' 0' 6);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64,The following statement contains a magic number: value <= (1UL << 48) - 1
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new MutableSlice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new MutableSlice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new MutableSlice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new MutableSlice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new MutableSlice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new MutableSlice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new MutableSlice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new MutableSlice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64,The following statement contains a magic number: value <= (1UL << 56) - 1
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU64,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU64,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU64,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU64,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU64,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU64,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU64,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU64,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU64,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: value <= (1UL << 32) - 1
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[5] { (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 5);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[5] { (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 5);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[5] { (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 5);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[5] { (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 5);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[5] { (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 5);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[5] { (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 5);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: value <= (1UL << 40) - 1
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[6] { (byte)(value >> 40)' (byte)(value >> 32)' (byte)(value >> 24)' (byte)(value >> 16)' (byte)(value >> 8)' (byte)value }' 0' 6);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[6] { (byte)(value >> 40)' (byte)(value >> 32)' (byte)(value >> 24)' (byte)(value >> 16)' (byte)(value >> 8)' (byte)value }' 0' 6);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[6] { (byte)(value >> 40)' (byte)(value >> 32)' (byte)(value >> 24)' (byte)(value >> 16)' (byte)(value >> 8)' (byte)value }' 0' 6);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[6] { (byte)(value >> 40)' (byte)(value >> 32)' (byte)(value >> 24)' (byte)(value >> 16)' (byte)(value >> 8)' (byte)value }' 0' 6);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[6] { (byte)(value >> 40)' (byte)(value >> 32)' (byte)(value >> 24)' (byte)(value >> 16)' (byte)(value >> 8)' (byte)value }' 0' 6);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[6] { (byte)(value >> 40)' (byte)(value >> 32)' (byte)(value >> 24)' (byte)(value >> 16)' (byte)(value >> 8)' (byte)value }' 0' 6);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[6] { (byte)(value >> 40)' (byte)(value >> 32)' (byte)(value >> 24)' (byte)(value >> 16)' (byte)(value >> 8)' (byte)value }' 0' 6);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: value <= (1UL << 48) - 1
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new MutableSlice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: value <= (1UL << 56) - 1
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU64BE,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU64BE,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU64BE,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU64BE,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU64BE,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU64BE,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU64BE,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU64BE,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixedU64BE,The following statement contains a magic number: return new MutableSlice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromVarint64,The following statement contains a magic number: value <= 127
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromVarint64,The following statement contains a magic number: writer = new SliceWriter(value <= (1 << 14) - 1 ? 2 : 5);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromVarint64,The following statement contains a magic number: writer = new SliceWriter(value <= (1 << 14) - 1 ? 2 : 5);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromVarint64,The following statement contains a magic number: writer = new SliceWriter(value <= (1 << 14) - 1 ? 2 : 5);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128,The following statement contains a magic number: return new MutableSlice(  				new byte[16]  				{  					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)'  					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)'  				}'  				0'  				16  			);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128,The following statement contains a magic number: return new MutableSlice(  				new byte[16]  				{  					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)'  					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)'  				}'  				0'  				16  			);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128,The following statement contains a magic number: return new MutableSlice(  				new byte[16]  				{  					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)'  					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)'  				}'  				0'  				16  			);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128,The following statement contains a magic number: return new MutableSlice(  				new byte[16]  				{  					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)'  					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)'  				}'  				0'  				16  			);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128,The following statement contains a magic number: return new MutableSlice(  				new byte[16]  				{  					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)'  					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)'  				}'  				0'  				16  			);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128,The following statement contains a magic number: return new MutableSlice(  				new byte[16]  				{  					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)'  					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)'  				}'  				0'  				16  			);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128,The following statement contains a magic number: return new MutableSlice(  				new byte[16]  				{  					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)'  					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)'  				}'  				0'  				16  			);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128,The following statement contains a magic number: return new MutableSlice(  				new byte[16]  				{  					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)'  					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)'  				}'  				0'  				16  			);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128,The following statement contains a magic number: return new MutableSlice(  				new byte[16]  				{  					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)'  					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)'  				}'  				0'  				16  			);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128,The following statement contains a magic number: return new MutableSlice(  				new byte[16]  				{  					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)'  					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)'  				}'  				0'  				16  			);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128,The following statement contains a magic number: return new MutableSlice(  				new byte[16]  				{  					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)'  					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)'  				}'  				0'  				16  			);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128,The following statement contains a magic number: return new MutableSlice(  				new byte[16]  				{  					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)'  					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)'  				}'  				0'  				16  			);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128,The following statement contains a magic number: return new MutableSlice(  				new byte[16]  				{  					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)'  					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)'  				}'  				0'  				16  			);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128,The following statement contains a magic number: return new MutableSlice(  				new byte[16]  				{  					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)'  					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)'  				}'  				0'  				16  			);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128,The following statement contains a magic number: return new MutableSlice(  				new byte[16]  				{  					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)'  					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)'  				}'  				0'  				16  			);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128,The following statement contains a magic number: return new MutableSlice(  				new byte[16]  				{  					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)'  					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)'  				}'  				0'  				16  			);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128BE,The following statement contains a magic number: return new MutableSlice(  				new byte[16]  				{  					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)'  					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)'  				}'  				0'  				16  			);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128BE,The following statement contains a magic number: return new MutableSlice(  				new byte[16]  				{  					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)'  					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)'  				}'  				0'  				16  			);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128BE,The following statement contains a magic number: return new MutableSlice(  				new byte[16]  				{  					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)'  					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)'  				}'  				0'  				16  			);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128BE,The following statement contains a magic number: return new MutableSlice(  				new byte[16]  				{  					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)'  					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)'  				}'  				0'  				16  			);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128BE,The following statement contains a magic number: return new MutableSlice(  				new byte[16]  				{  					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)'  					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)'  				}'  				0'  				16  			);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128BE,The following statement contains a magic number: return new MutableSlice(  				new byte[16]  				{  					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)'  					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)'  				}'  				0'  				16  			);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128BE,The following statement contains a magic number: return new MutableSlice(  				new byte[16]  				{  					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)'  					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)'  				}'  				0'  				16  			);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128BE,The following statement contains a magic number: return new MutableSlice(  				new byte[16]  				{  					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)'  					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)'  				}'  				0'  				16  			);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128BE,The following statement contains a magic number: return new MutableSlice(  				new byte[16]  				{  					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)'  					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)'  				}'  				0'  				16  			);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128BE,The following statement contains a magic number: return new MutableSlice(  				new byte[16]  				{  					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)'  					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)'  				}'  				0'  				16  			);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128BE,The following statement contains a magic number: return new MutableSlice(  				new byte[16]  				{  					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)'  					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)'  				}'  				0'  				16  			);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128BE,The following statement contains a magic number: return new MutableSlice(  				new byte[16]  				{  					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)'  					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)'  				}'  				0'  				16  			);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128BE,The following statement contains a magic number: return new MutableSlice(  				new byte[16]  				{  					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)'  					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)'  				}'  				0'  				16  			);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128BE,The following statement contains a magic number: return new MutableSlice(  				new byte[16]  				{  					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)'  					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)'  				}'  				0'  				16  			);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128BE,The following statement contains a magic number: return new MutableSlice(  				new byte[16]  				{  					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)'  					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)'  				}'  				0'  				16  			);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromFixed128BE,The following statement contains a magic number: return new MutableSlice(  				new byte[16]  				{  					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)'  					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)'  				}'  				0'  				16  			);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromSingle,The following statement contains a magic number: byte[] tmp = new byte[4];
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromSingle,The following statement contains a magic number: return new MutableSlice(tmp' 0' 4);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromSingleBE,The following statement contains a magic number: byte[] tmp = new byte[4];
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromSingleBE,The following statement contains a magic number: return new MutableSlice(tmp' 0' 4);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromDouble,The following statement contains a magic number: byte[] tmp = new byte[8];
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromDouble,The following statement contains a magic number: return new MutableSlice(tmp' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromDoubleBE,The following statement contains a magic number: byte[] tmp = new byte[8];
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromDoubleBE,The following statement contains a magic number: return new MutableSlice(tmp' 0' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromDecimal,The following statement contains a magic number: byte[] tmp = new byte[16];
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromDecimal,The following statement contains a magic number: return new MutableSlice(tmp' 0' 16);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromStringUtf8WithBom,The following statement contains a magic number: var tmp = UnsafeHelpers.EnsureCapacity(ref buffer' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromStringUtf8WithBom,The following statement contains a magic number: tmp[2] = 0xBF;
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromStringUtf8WithBom,The following statement contains a magic number: return new MutableSlice(tmp' 0' 3);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromStringUtf8WithBom,The following statement contains a magic number: int capa = checked(3 + Slice.Utf8NoBomEncoding.GetByteCount(pchars' value.Length));
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromStringUtf8WithBom,The following statement contains a magic number: outp[2] = 0xBF;
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromStringUtf8WithBom,The following statement contains a magic number: Slice.Utf8NoBomEncoding.GetBytes(pchars' value.Length' outp + 3' tmp.Length - 3);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromStringUtf8WithBom,The following statement contains a magic number: Slice.Utf8NoBomEncoding.GetBytes(pchars' value.Length' outp + 3' tmp.Length - 3);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromChar,The following statement contains a magic number: value < 128
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromChar,The following statement contains a magic number: value < 128
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,FromChar,The following statement contains a magic number: var tmp = UnsafeHelpers.EnsureCapacity(ref buffer' 8);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,NibbleToDecimal,The following statement contains a magic number: int x = c - 48;
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,NibbleToDecimal,The following statement contains a magic number: x < 10
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,NibbleToDecimal,The following statement contains a magic number: return x - 7;
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,NibbleToDecimal,The following statement contains a magic number: x >= 17 && x <= 42
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,NibbleToDecimal,The following statement contains a magic number: x >= 17 && x <= 42
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,NibbleToDecimal,The following statement contains a magic number: return x - 39;
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,NibbleToDecimal,The following statement contains a magic number: x >= 49 && x <= 74
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,NibbleToDecimal,The following statement contains a magic number: x >= 49 && x <= 74
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,HasUtf8Bom,The following statement contains a magic number: return count >= 3  			    && (uint) (offset + count) <= (uint) array.Length  			    && array[offset + 0] == 0xEF  			    && array[offset + 1] == 0xBB  			    && array[offset + 2] == 0xBF;
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,HasUtf8Bom,The following statement contains a magic number: return count >= 3  			    && (uint) (offset + count) <= (uint) array.Length  			    && array[offset + 0] == 0xEF  			    && array[offset + 1] == 0xBB  			    && array[offset + 2] == 0xBF;
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToStringUtf8,The following statement contains a magic number: offset += 3;
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToStringUtf8,The following statement contains a magic number: count -= 3;
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,PrettyPrint,The following statement contains a magic number: return Slice.PrettyPrint(this.Array' this.Offset' this.Count' 1024);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt16,The following statement contains a magic number: switch (this.Count)  			{  				case 0: return 0;  				case 1: return this.Array[this.Offset];  				case 2: return (short)(this.Array[this.Offset] | (this.Array[this.Offset + 1] << 8));  				default:  					if (this.Count < 0) throw UnsafeHelpers.Errors.SliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<short>(2);  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt16,The following statement contains a magic number: switch (this.Count)  			{  				case 0: return 0;  				case 1: return this.Array[this.Offset];  				case 2: return (short)(this.Array[this.Offset] | (this.Array[this.Offset + 1] << 8));  				default:  					if (this.Count < 0) throw UnsafeHelpers.Errors.SliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<short>(2);  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt16,The following statement contains a magic number: switch (this.Count)  			{  				case 0: return 0;  				case 1: return this.Array[this.Offset];  				case 2: return (short)(this.Array[this.Offset] | (this.Array[this.Offset + 1] << 8));  				default:  					if (this.Count < 0) throw UnsafeHelpers.Errors.SliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<short>(2);  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt16BE,The following statement contains a magic number: switch (this.Count)  			{  				case 0: return 0;  				case 1: return this.Array[this.Offset];  				case 2: return (short)(this.Array[this.Offset + 1] | (this.Array[this.Offset] << 8));  				default:  					if (this.Count < 0) throw UnsafeHelpers.Errors.SliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<short>(2);    			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt16BE,The following statement contains a magic number: switch (this.Count)  			{  				case 0: return 0;  				case 1: return this.Array[this.Offset];  				case 2: return (short)(this.Array[this.Offset + 1] | (this.Array[this.Offset] << 8));  				default:  					if (this.Count < 0) throw UnsafeHelpers.Errors.SliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<short>(2);    			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt16BE,The following statement contains a magic number: switch (this.Count)  			{  				case 0: return 0;  				case 1: return this.Array[this.Offset];  				case 2: return (short)(this.Array[this.Offset + 1] | (this.Array[this.Offset] << 8));  				default:  					if (this.Count < 0) throw UnsafeHelpers.Errors.SliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<short>(2);    			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt16,The following statement contains a magic number: switch (this.Count)  			{  				case 0: return 0;  				case 1: return this.Array[this.Offset];  				case 2: return (ushort)(this.Array[this.Offset] | (this.Array[this.Offset + 1] << 8));  				default:  					if (this.Count < 0) throw UnsafeHelpers.Errors.SliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<ushort>(2);  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt16,The following statement contains a magic number: switch (this.Count)  			{  				case 0: return 0;  				case 1: return this.Array[this.Offset];  				case 2: return (ushort)(this.Array[this.Offset] | (this.Array[this.Offset + 1] << 8));  				default:  					if (this.Count < 0) throw UnsafeHelpers.Errors.SliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<ushort>(2);  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt16,The following statement contains a magic number: switch (this.Count)  			{  				case 0: return 0;  				case 1: return this.Array[this.Offset];  				case 2: return (ushort)(this.Array[this.Offset] | (this.Array[this.Offset + 1] << 8));  				default:  					if (this.Count < 0) throw UnsafeHelpers.Errors.SliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<ushort>(2);  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt16BE,The following statement contains a magic number: switch (this.Count)  			{  				case 0: return 0;  				case 1: return this.Array[this.Offset];  				case 2: return (ushort)(this.Array[this.Offset + 1] | (this.Array[this.Offset] << 8));  				default:  					if (this.Count < 0) throw UnsafeHelpers.Errors.SliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<ushort>(2);    			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt16BE,The following statement contains a magic number: switch (this.Count)  			{  				case 0: return 0;  				case 1: return this.Array[this.Offset];  				case 2: return (ushort)(this.Array[this.Offset + 1] | (this.Array[this.Offset] << 8));  				default:  					if (this.Count < 0) throw UnsafeHelpers.Errors.SliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<ushort>(2);    			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt16BE,The following statement contains a magic number: switch (this.Count)  			{  				case 0: return 0;  				case 1: return this.Array[this.Offset];  				case 2: return (ushort)(this.Array[this.Offset + 1] | (this.Array[this.Offset] << 8));  				default:  					if (this.Count < 0) throw UnsafeHelpers.Errors.SliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<ushort>(2);    			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ReadUInt16,The following statement contains a magic number: (uint) bytes > 2
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ReadUInt16,The following statement contains a magic number: switch (bytes)  			{  				case 0: return 0;  				case 1: return buffer[p];  				default: return (ushort)(buffer[p] | (buffer[p + 1] << 8));  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ReadUInt16BE,The following statement contains a magic number: (uint) bytes > 2
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ReadUInt16BE,The following statement contains a magic number: switch (bytes)  			{  				case 0: return 0;  				case 1: return buffer[p];  				default: return (ushort)(buffer[p + 1] | (buffer[p] << 8));  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt24,The following statement contains a magic number: switch (count)  					{  						case 1: return *ptr;  						case 2: return UnsafeHelpers.LoadUInt16LE(ptr); // cannot be negative  						case 3: return UnsafeHelpers.LoadInt24LE(ptr);  					}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt24,The following statement contains a magic number: switch (count)  					{  						case 1: return *ptr;  						case 2: return UnsafeHelpers.LoadUInt16LE(ptr); // cannot be negative  						case 3: return UnsafeHelpers.LoadInt24LE(ptr);  					}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt24,The following statement contains a magic number: return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(3);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt24BE,The following statement contains a magic number: switch (count)  					{  						case 1: return *ptr;  						case 2: return UnsafeHelpers.LoadUInt16BE(ptr);  						case 3: return UnsafeHelpers.LoadInt24BE(ptr);  					}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt24BE,The following statement contains a magic number: switch (count)  					{  						case 1: return *ptr;  						case 2: return UnsafeHelpers.LoadUInt16BE(ptr);  						case 3: return UnsafeHelpers.LoadInt24BE(ptr);  					}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt24BE,The following statement contains a magic number: return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(3);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt24,The following statement contains a magic number: switch (count)  					{  						case 1: return *ptr;  						case 2: return UnsafeHelpers.LoadUInt16LE(ptr);  						case 3: return UnsafeHelpers.LoadUInt24LE(ptr);  					}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt24,The following statement contains a magic number: switch (count)  					{  						case 1: return *ptr;  						case 2: return UnsafeHelpers.LoadUInt16LE(ptr);  						case 3: return UnsafeHelpers.LoadUInt24LE(ptr);  					}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt24,The following statement contains a magic number: return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(3);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt24BE,The following statement contains a magic number: switch (count)  					{  						case 1: return *ptr;  						case 2: return UnsafeHelpers.LoadUInt16BE(ptr);  						case 3: return UnsafeHelpers.LoadUInt24BE(ptr);  					}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt24BE,The following statement contains a magic number: switch (count)  					{  						case 1: return *ptr;  						case 2: return UnsafeHelpers.LoadUInt16BE(ptr);  						case 3: return UnsafeHelpers.LoadUInt24BE(ptr);  					}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt24BE,The following statement contains a magic number: return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(3);
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ReadUInt24,The following statement contains a magic number: (uint) bytes > 3
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ReadUInt24,The following statement contains a magic number: switch (bytes)  			{  				case 0: return 0;  				case 1: return buffer[p];  				case 2: return (uint)(buffer[p] | (buffer[p + 1] << 8));  				default: return (uint)(buffer[p] | (buffer[p + 1] << 8) | (buffer[p + 2] << 16));  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ReadUInt24,The following statement contains a magic number: switch (bytes)  			{  				case 0: return 0;  				case 1: return buffer[p];  				case 2: return (uint)(buffer[p] | (buffer[p + 1] << 8));  				default: return (uint)(buffer[p] | (buffer[p + 1] << 8) | (buffer[p + 2] << 16));  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ReadUInt24,The following statement contains a magic number: switch (bytes)  			{  				case 0: return 0;  				case 1: return buffer[p];  				case 2: return (uint)(buffer[p] | (buffer[p + 1] << 8));  				default: return (uint)(buffer[p] | (buffer[p + 1] << 8) | (buffer[p + 2] << 16));  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ReadUInt24,The following statement contains a magic number: switch (bytes)  			{  				case 0: return 0;  				case 1: return buffer[p];  				case 2: return (uint)(buffer[p] | (buffer[p + 1] << 8));  				default: return (uint)(buffer[p] | (buffer[p + 1] << 8) | (buffer[p + 2] << 16));  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ReadUInt24,The following statement contains a magic number: switch (bytes)  			{  				case 0: return 0;  				case 1: return buffer[p];  				case 2: return (uint)(buffer[p] | (buffer[p + 1] << 8));  				default: return (uint)(buffer[p] | (buffer[p + 1] << 8) | (buffer[p + 2] << 16));  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ReadUInt24BE,The following statement contains a magic number: (uint) bytes > 3
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ReadUInt24BE,The following statement contains a magic number: switch (bytes)  			{  				case 0: return 0;  				case 1: return buffer[p];  				case 2: return (ushort)(buffer[p + 1] | (buffer[p] << 8));  				default: return (ushort)(buffer[p + 2] | (buffer[p + 1] << 8) | (buffer[p] << 16));  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ReadUInt24BE,The following statement contains a magic number: switch (bytes)  			{  				case 0: return 0;  				case 1: return buffer[p];  				case 2: return (ushort)(buffer[p + 1] | (buffer[p] << 8));  				default: return (ushort)(buffer[p + 2] | (buffer[p + 1] << 8) | (buffer[p] << 16));  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ReadUInt24BE,The following statement contains a magic number: switch (bytes)  			{  				case 0: return 0;  				case 1: return buffer[p];  				case 2: return (ushort)(buffer[p + 1] | (buffer[p] << 8));  				default: return (ushort)(buffer[p + 2] | (buffer[p + 1] << 8) | (buffer[p] << 16));  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ReadUInt24BE,The following statement contains a magic number: switch (bytes)  			{  				case 0: return 0;  				case 1: return buffer[p];  				case 2: return (ushort)(buffer[p + 1] | (buffer[p] << 8));  				default: return (ushort)(buffer[p + 2] | (buffer[p + 1] << 8) | (buffer[p] << 16));  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ReadUInt24BE,The following statement contains a magic number: switch (bytes)  			{  				case 0: return 0;  				case 1: return buffer[p];  				case 2: return (ushort)(buffer[p + 1] | (buffer[p] << 8));  				default: return (ushort)(buffer[p + 2] | (buffer[p + 1] << 8) | (buffer[p] << 16));  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return arr[off] | (arr[off + 1] << 8);  				case 3: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16);  				case 4: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return arr[off] | (arr[off + 1] << 8);  				case 3: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16);  				case 4: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return arr[off] | (arr[off + 1] << 8);  				case 3: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16);  				case 4: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return arr[off] | (arr[off + 1] << 8);  				case 3: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16);  				case 4: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return arr[off] | (arr[off + 1] << 8);  				case 3: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16);  				case 4: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return arr[off] | (arr[off + 1] << 8);  				case 3: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16);  				case 4: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return arr[off] | (arr[off + 1] << 8);  				case 3: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16);  				case 4: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return arr[off] | (arr[off + 1] << 8);  				case 3: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16);  				case 4: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return arr[off] | (arr[off + 1] << 8);  				case 3: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16);  				case 4: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return arr[off] | (arr[off + 1] << 8);  				case 3: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16);  				case 4: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return arr[off] | (arr[off + 1] << 8);  				case 3: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16);  				case 4: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return arr[off] | (arr[off + 1] << 8);  				case 3: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16);  				case 4: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return arr[off] | (arr[off + 1] << 8);  				case 3: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16);  				case 4: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (arr[off] << 8) | arr[off + 1];  				case 3: return (arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2];  				case 4: return (arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3];  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (arr[off] << 8) | arr[off + 1];  				case 3: return (arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2];  				case 4: return (arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3];  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (arr[off] << 8) | arr[off + 1];  				case 3: return (arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2];  				case 4: return (arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3];  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (arr[off] << 8) | arr[off + 1];  				case 3: return (arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2];  				case 4: return (arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3];  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (arr[off] << 8) | arr[off + 1];  				case 3: return (arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2];  				case 4: return (arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3];  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (arr[off] << 8) | arr[off + 1];  				case 3: return (arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2];  				case 4: return (arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3];  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (arr[off] << 8) | arr[off + 1];  				case 3: return (arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2];  				case 4: return (arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3];  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (arr[off] << 8) | arr[off + 1];  				case 3: return (arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2];  				case 4: return (arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3];  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (arr[off] << 8) | arr[off + 1];  				case 3: return (arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2];  				case 4: return (arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3];  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (arr[off] << 8) | arr[off + 1];  				case 3: return (arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2];  				case 4: return (arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3];  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (arr[off] << 8) | arr[off + 1];  				case 3: return (arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2];  				case 4: return (arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3];  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (arr[off] << 8) | arr[off + 1];  				case 3: return (arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2];  				case 4: return (arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3];  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (arr[off] << 8) | arr[off + 1];  				case 3: return (arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2];  				case 4: return (arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3];  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)(arr[off] | (arr[off + 1] << 8));  				case 3: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16));  				case 4: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24));  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)(arr[off] | (arr[off + 1] << 8));  				case 3: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16));  				case 4: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24));  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)(arr[off] | (arr[off + 1] << 8));  				case 3: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16));  				case 4: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24));  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)(arr[off] | (arr[off + 1] << 8));  				case 3: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16));  				case 4: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24));  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)(arr[off] | (arr[off + 1] << 8));  				case 3: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16));  				case 4: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24));  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)(arr[off] | (arr[off + 1] << 8));  				case 3: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16));  				case 4: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24));  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)(arr[off] | (arr[off + 1] << 8));  				case 3: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16));  				case 4: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24));  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)(arr[off] | (arr[off + 1] << 8));  				case 3: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16));  				case 4: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24));  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)(arr[off] | (arr[off + 1] << 8));  				case 3: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16));  				case 4: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24));  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)(arr[off] | (arr[off + 1] << 8));  				case 3: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16));  				case 4: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24));  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)(arr[off] | (arr[off + 1] << 8));  				case 3: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16));  				case 4: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24));  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)(arr[off] | (arr[off + 1] << 8));  				case 3: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16));  				case 4: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24));  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)(arr[off] | (arr[off + 1] << 8));  				case 3: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16));  				case 4: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24));  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)((arr[off] << 8) | arr[off + 1]);  				case 3: return (uint)((arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2]);  				case 4: return (uint)((arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3]);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)((arr[off] << 8) | arr[off + 1]);  				case 3: return (uint)((arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2]);  				case 4: return (uint)((arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3]);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)((arr[off] << 8) | arr[off + 1]);  				case 3: return (uint)((arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2]);  				case 4: return (uint)((arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3]);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)((arr[off] << 8) | arr[off + 1]);  				case 3: return (uint)((arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2]);  				case 4: return (uint)((arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3]);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)((arr[off] << 8) | arr[off + 1]);  				case 3: return (uint)((arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2]);  				case 4: return (uint)((arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3]);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)((arr[off] << 8) | arr[off + 1]);  				case 3: return (uint)((arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2]);  				case 4: return (uint)((arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3]);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)((arr[off] << 8) | arr[off + 1]);  				case 3: return (uint)((arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2]);  				case 4: return (uint)((arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3]);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)((arr[off] << 8) | arr[off + 1]);  				case 3: return (uint)((arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2]);  				case 4: return (uint)((arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3]);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)((arr[off] << 8) | arr[off + 1]);  				case 3: return (uint)((arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2]);  				case 4: return (uint)((arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3]);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)((arr[off] << 8) | arr[off + 1]);  				case 3: return (uint)((arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2]);  				case 4: return (uint)((arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3]);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)((arr[off] << 8) | arr[off + 1]);  				case 3: return (uint)((arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2]);  				case 4: return (uint)((arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3]);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)((arr[off] << 8) | arr[off + 1]);  				case 3: return (uint)((arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2]);  				case 4: return (uint)((arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3]);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)((arr[off] << 8) | arr[off + 1]);  				case 3: return (uint)((arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2]);  				case 4: return (uint)((arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3]);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ReadUInt32,The following statement contains a magic number: (uint) bytes > 4
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ReadUInt32,The following statement contains a magic number: value = (value << 8) | buffer[p--];
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ReadUInt32BE,The following statement contains a magic number: (uint) bytes > 4
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ReadUInt32BE,The following statement contains a magic number: value = (value << 8) | buffer[p++];
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt64,The following statement contains a magic number: return this.Count <= 4 ? ToUInt32() : ToInt64Slow();
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt64Slow,The following statement contains a magic number: (uint) n > 8
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt64Slow,The following statement contains a magic number: value = (value << 8) | buffer[p--];
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt64BE,The following statement contains a magic number: return this.Count <= 4 ? ToInt32BE() : ToInt64BESlow();
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt64BESlow,The following statement contains a magic number: (uint) n > 8
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt64BESlow,The following statement contains a magic number: value = (value << 8) | buffer[p++];
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt64,The following statement contains a magic number: (uint) n > 8
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt64,The following statement contains a magic number: value = (value << 8) | buffer[p--];
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt64BE,The following statement contains a magic number: (uint) n > 8
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt64BE,The following statement contains a magic number: value = (value << 8) | buffer[p++];
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ReadUInt64,The following statement contains a magic number: (uint) bytes > 8
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ReadUInt64,The following statement contains a magic number: value = (value << 8) | buffer[p--];
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ReadUInt64BE,The following statement contains a magic number: (uint) bytes > 8
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ReadUInt64BE,The following statement contains a magic number: value = (value << 8) | buffer[p++];
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUuid64,The following statement contains a magic number: switch (this.Count)  			{  				case 8:  				{ // binary (8 bytes)  					return Uuid64.Read(this);  				}    				case 16: // hex16  				case 17: // hex8-hex8  				case 19: // {hex8-hex8}  				{  					// ReSharper disable once AssignNullToNotNullAttribute  					return Uuid64.Parse(ToByteString());  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUuid64,The following statement contains a magic number: switch (this.Count)  			{  				case 8:  				{ // binary (8 bytes)  					return Uuid64.Read(this);  				}    				case 16: // hex16  				case 17: // hex8-hex8  				case 19: // {hex8-hex8}  				{  					// ReSharper disable once AssignNullToNotNullAttribute  					return Uuid64.Parse(ToByteString());  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUuid64,The following statement contains a magic number: switch (this.Count)  			{  				case 8:  				{ // binary (8 bytes)  					return Uuid64.Read(this);  				}    				case 16: // hex16  				case 17: // hex8-hex8  				case 19: // {hex8-hex8}  				{  					// ReSharper disable once AssignNullToNotNullAttribute  					return Uuid64.Parse(ToByteString());  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUuid64,The following statement contains a magic number: switch (this.Count)  			{  				case 8:  				{ // binary (8 bytes)  					return Uuid64.Read(this);  				}    				case 16: // hex16  				case 17: // hex8-hex8  				case 19: // {hex8-hex8}  				{  					// ReSharper disable once AssignNullToNotNullAttribute  					return Uuid64.Parse(ToByteString());  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToSingle,The following statement contains a magic number: this.Count != 4
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToSingleBE,The following statement contains a magic number: this.Count != 4
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToDouble,The following statement contains a magic number: this.Count != 8
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToDoubleBE,The following statement contains a magic number: this.Count != 8
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToDecimal,The following statement contains a magic number: this.Count != 16
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToGuid,The following statement contains a magic number: this.Count == 16
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToGuid,The following statement contains a magic number: this.Count == 36
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUuid128,The following statement contains a magic number: this.Count == 16
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUuid128,The following statement contains a magic number: this.Count == 36
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUuid80,The following statement contains a magic number: switch (this.Count)  			{  				case 10:  				{ // binary (10 bytes)  					return Uuid80.Read(this);  				}    				case 20: // XXXXXXXXXXXXXXXXXXXX  				case 22: // XXXX-XXXXXXXX-XXXXXXXX  				case 24: // {XXXX-XXXXXXXX-XXXXXXXX}  				{  					// ReSharper disable once AssignNullToNotNullAttribute  					return Uuid80.Parse(ToByteString());  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUuid80,The following statement contains a magic number: switch (this.Count)  			{  				case 10:  				{ // binary (10 bytes)  					return Uuid80.Read(this);  				}    				case 20: // XXXXXXXXXXXXXXXXXXXX  				case 22: // XXXX-XXXXXXXX-XXXXXXXX  				case 24: // {XXXX-XXXXXXXX-XXXXXXXX}  				{  					// ReSharper disable once AssignNullToNotNullAttribute  					return Uuid80.Parse(ToByteString());  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUuid80,The following statement contains a magic number: switch (this.Count)  			{  				case 10:  				{ // binary (10 bytes)  					return Uuid80.Read(this);  				}    				case 20: // XXXXXXXXXXXXXXXXXXXX  				case 22: // XXXX-XXXXXXXX-XXXXXXXX  				case 24: // {XXXX-XXXXXXXX-XXXXXXXX}  				{  					// ReSharper disable once AssignNullToNotNullAttribute  					return Uuid80.Parse(ToByteString());  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUuid80,The following statement contains a magic number: switch (this.Count)  			{  				case 10:  				{ // binary (10 bytes)  					return Uuid80.Read(this);  				}    				case 20: // XXXXXXXXXXXXXXXXXXXX  				case 22: // XXXX-XXXXXXXX-XXXXXXXX  				case 24: // {XXXX-XXXXXXXX-XXXXXXXX}  				{  					// ReSharper disable once AssignNullToNotNullAttribute  					return Uuid80.Parse(ToByteString());  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUuid96,The following statement contains a magic number: switch (this.Count)  			{  				case 12:  				{ // binary (12 bytes)  					return Uuid96.Read(this);  				}    				case 24: // XXXXXXXXXXXXXXXXXXXXXXXX  				case 26: // XXXXXXXX-XXXXXXXX-XXXXXXXX  				case 28: // {XXXXXXXX-XXXXXXXX-XXXXXXXX}  				{  					// ReSharper disable once AssignNullToNotNullAttribute  					return Uuid96.Parse(ToByteString());  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUuid96,The following statement contains a magic number: switch (this.Count)  			{  				case 12:  				{ // binary (12 bytes)  					return Uuid96.Read(this);  				}    				case 24: // XXXXXXXXXXXXXXXXXXXXXXXX  				case 26: // XXXXXXXX-XXXXXXXX-XXXXXXXX  				case 28: // {XXXXXXXX-XXXXXXXX-XXXXXXXX}  				{  					// ReSharper disable once AssignNullToNotNullAttribute  					return Uuid96.Parse(ToByteString());  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUuid96,The following statement contains a magic number: switch (this.Count)  			{  				case 12:  				{ // binary (12 bytes)  					return Uuid96.Read(this);  				}    				case 24: // XXXXXXXXXXXXXXXXXXXXXXXX  				case 26: // XXXXXXXX-XXXXXXXX-XXXXXXXX  				case 28: // {XXXXXXXX-XXXXXXXX-XXXXXXXX}  				{  					// ReSharper disable once AssignNullToNotNullAttribute  					return Uuid96.Parse(ToByteString());  				}  			}
Magic Number,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUuid96,The following statement contains a magic number: switch (this.Count)  			{  				case 12:  				{ // binary (12 bytes)  					return Uuid96.Read(this);  				}    				case 24: // XXXXXXXXXXXXXXXXXXXXXXXX  				case 26: // XXXXXXXX-XXXXXXXX-XXXXXXXX  				case 28: // {XXXXXXXX-XXXXXXXX-XXXXXXXX}  				{  					// ReSharper disable once AssignNullToNotNullAttribute  					return Uuid96.Parse(ToByteString());  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,CreateByteSprite,The following statement contains a magic number: var tmp = new byte[256];
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ConcatRange,The following statement contains a magic number: var buf = new SliceBuffer(Math.Min(totalSize' 64 * 1024));
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ConcatRange,The following statement contains a magic number: var buf = new SliceBuffer(Math.Min(totalSize' 64 * 1024));
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Min,The following statement contains a magic number: switch (values.Length)  			{  				case 0: return default;  				case 1: return values[0];  				case 2: return Min(values[0]' values[1]);  				case 3: return Min(values[0]' values[1]' values[3]);  				default:  				{  					var min = values[0];  					for (int i = 1; i < values.Length; i++)  					{  						if (values[i].CompareTo(min) < 0) min = values[i];  					}  					return min;  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Min,The following statement contains a magic number: switch (values.Length)  			{  				case 0: return default;  				case 1: return values[0];  				case 2: return Min(values[0]' values[1]);  				case 3: return Min(values[0]' values[1]' values[3]);  				default:  				{  					var min = values[0];  					for (int i = 1; i < values.Length; i++)  					{  						if (values[i].CompareTo(min) < 0) min = values[i];  					}  					return min;  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Min,The following statement contains a magic number: switch (values.Length)  			{  				case 0: return default;  				case 1: return values[0];  				case 2: return Min(values[0]' values[1]);  				case 3: return Min(values[0]' values[1]' values[3]);  				default:  				{  					var min = values[0];  					for (int i = 1; i < values.Length; i++)  					{  						if (values[i].CompareTo(min) < 0) min = values[i];  					}  					return min;  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Min,The following statement contains a magic number: switch (values.Length)  			{  				case 0: return default;  				case 1: return values[0];  				case 2: return Min(values[0]' values[1]);  				case 3: return Min(values[0]' values[1]' values[3]);  				default:  				{  					var min = values[0];  					for (int i = 1; i < values.Length; i++)  					{  						if (values[i].CompareTo(min) < 0) min = values[i];  					}  					return min;  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Min,The following statement contains a magic number: switch (values.Length)  			{  				case 0: return default;  				case 1: return values[0];  				case 2: return Min(values[0]' values[1]);  				case 3: return Min(values[0]' values[1]' values[3]);  				default:  				{  					var min = values[0];  					for (int i = 1; i < values.Length; i++)  					{  						if (values[i].CompareTo(min) < 0) min = values[i];  					}  					return min;  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Min,The following statement contains a magic number: switch (values.Length)  			{  				case 0: return default;  				case 1: return values[0];  				case 2: return Min(values[0]' values[1]);  				case 3: return Min(values[0]' values[1]' values[3]);  				default:  				{  					var min = values[0];  					for (int i = 1; i < values.Length; i++)  					{  						if (values[i].CompareTo(min) < 0) min = values[i];  					}  					return min;  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Max,The following statement contains a magic number: switch (values.Length)  			{  				case 0: return default;  				case 1: return values[0];  				case 2: return Max(values[0]' values[1]);  				case 3: return Max(values[0]' values[1]' values[3]);  				default:  				{  					var max = values[0];  					for (int i = 1; i < values.Length; i++)  					{  						if (values[i].CompareTo(max) > 0) max = values[i];  					}  					return max;  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Max,The following statement contains a magic number: switch (values.Length)  			{  				case 0: return default;  				case 1: return values[0];  				case 2: return Max(values[0]' values[1]);  				case 3: return Max(values[0]' values[1]' values[3]);  				default:  				{  					var max = values[0];  					for (int i = 1; i < values.Length; i++)  					{  						if (values[i].CompareTo(max) > 0) max = values[i];  					}  					return max;  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Max,The following statement contains a magic number: switch (values.Length)  			{  				case 0: return default;  				case 1: return values[0];  				case 2: return Max(values[0]' values[1]);  				case 3: return Max(values[0]' values[1]' values[3]);  				default:  				{  					var max = values[0];  					for (int i = 1; i < values.Length; i++)  					{  						if (values[i].CompareTo(max) > 0) max = values[i];  					}  					return max;  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Max,The following statement contains a magic number: switch (values.Length)  			{  				case 0: return default;  				case 1: return values[0];  				case 2: return Max(values[0]' values[1]);  				case 3: return Max(values[0]' values[1]' values[3]);  				default:  				{  					var max = values[0];  					for (int i = 1; i < values.Length; i++)  					{  						if (values[i].CompareTo(max) > 0) max = values[i];  					}  					return max;  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Max,The following statement contains a magic number: switch (values.Length)  			{  				case 0: return default;  				case 1: return values[0];  				case 2: return Max(values[0]' values[1]);  				case 3: return Max(values[0]' values[1]' values[3]);  				default:  				{  					var max = values[0];  					for (int i = 1; i < values.Length; i++)  					{  						if (values[i].CompareTo(max) > 0) max = values[i];  					}  					return max;  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Max,The following statement contains a magic number: switch (values.Length)  			{  				case 0: return default;  				case 1: return values[0];  				case 2: return Max(values[0]' values[1]);  				case 3: return Max(values[0]' values[1]' values[3]);  				default:  				{  					var max = values[0];  					for (int i = 1; i < values.Length; i++)  					{  						if (values[i].CompareTo(max) > 0) max = values[i];  					}  					return max;  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Dump,The following statement contains a magic number: var sb = new StringBuilder(count + 16);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Dump,The following statement contains a magic number: int x = c >> 4;
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Dump,The following statement contains a magic number: sb.Append((char)(x + (x < 10 ? 48 : 55)));
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Dump,The following statement contains a magic number: sb.Append((char)(x + (x < 10 ? 48 : 55)));
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Dump,The following statement contains a magic number: sb.Append((char)(x + (x < 10 ? 48 : 55)));
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Dump,The following statement contains a magic number: sb.Append((char)(x + (x < 10 ? 48 : 55)));
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Dump,The following statement contains a magic number: sb.Append((char)(x + (x < 10 ? 48 : 55)));
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Dump,The following statement contains a magic number: sb.Append((char)(x + (x < 10 ? 48 : 55)));
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Dump,The following statement contains a magic number: c < 32 || c >= 127 || c == 60
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Dump,The following statement contains a magic number: c < 32 || c >= 127 || c == 60
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Dump,The following statement contains a magic number: c < 32 || c >= 127 || c == 60
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Dump,The following statement contains a magic number: var sb = new StringBuilder(count + 16);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Dump,The following statement contains a magic number: int x = c >> 4;
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Dump,The following statement contains a magic number: sb.Append((char) (x + (x < 10 ? 48 : 55)));
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Dump,The following statement contains a magic number: sb.Append((char) (x + (x < 10 ? 48 : 55)));
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Dump,The following statement contains a magic number: sb.Append((char) (x + (x < 10 ? 48 : 55)));
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Dump,The following statement contains a magic number: sb.Append((char) (x + (x < 10 ? 48 : 55)));
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Dump,The following statement contains a magic number: sb.Append((char) (x + (x < 10 ? 48 : 55)));
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Dump,The following statement contains a magic number: sb.Append((char) (x + (x < 10 ? 48 : 55)));
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Dump,The following statement contains a magic number: c < 32 || c >= 127 || c == 60
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Dump,The following statement contains a magic number: c < 32 || c >= 127 || c == 60
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Dump,The following statement contains a magic number: c < 32 || c >= 127 || c == 60
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromByte,The following statement contains a magic number: (uint) value > 255
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt16,The following statement contains a magic number: value <= 255
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt16,The following statement contains a magic number: return new Slice(new byte[] { (byte)value' (byte)(value >> 8) }' 0' 2);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt16,The following statement contains a magic number: return new Slice(new byte[] { (byte)value' (byte)(value >> 8) }' 0' 2);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed16,The following statement contains a magic number: return new Slice(new byte[2] { (byte) value' (byte) (value >> 8) }' 0' 2);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed16,The following statement contains a magic number: return new Slice(new byte[2] { (byte) value' (byte) (value >> 8) }' 0' 2);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed16,The following statement contains a magic number: return new Slice(new byte[2] { (byte) value' (byte) (value >> 8) }' 0' 2);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt16,The following statement contains a magic number: value <= 255
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU16,The following statement contains a magic number: return new Slice(new byte[2] { (byte) value' (byte) (value >> 8) }' 0' 2);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU16,The following statement contains a magic number: return new Slice(new byte[2] { (byte) value' (byte) (value >> 8) }' 0' 2);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU16,The following statement contains a magic number: return new Slice(new byte[2] { (byte) value' (byte) (value >> 8) }' 0' 2);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU16BE,The following statement contains a magic number: return new Slice(new byte[2] { (byte) (value >> 8)' (byte) value }' 0' 4);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU16BE,The following statement contains a magic number: return new Slice(new byte[2] { (byte) (value >> 8)' (byte) value }' 0' 4);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU16BE,The following statement contains a magic number: return new Slice(new byte[2] { (byte) (value >> 8)' (byte) value }' 0' 4);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromVarint16,The following statement contains a magic number: value < 128
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt32,The following statement contains a magic number: value <= (1 << 8) - 1
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt32,The following statement contains a magic number: return new Slice(new byte[2] { (byte)value' (byte)(value >> 8) }' 0' 2);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt32,The following statement contains a magic number: return new Slice(new byte[2] { (byte)value' (byte)(value >> 8) }' 0' 2);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt32,The following statement contains a magic number: return new Slice(new byte[2] { (byte)value' (byte)(value >> 8) }' 0' 2);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt32,The following statement contains a magic number: value <= (1 << 16) - 1
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt32,The following statement contains a magic number: return new Slice(new byte[3] { (byte)value' (byte)(value >> 8)' (byte)(value >> 16) }' 0' 3);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt32,The following statement contains a magic number: return new Slice(new byte[3] { (byte)value' (byte)(value >> 8)' (byte)(value >> 16) }' 0' 3);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt32,The following statement contains a magic number: return new Slice(new byte[3] { (byte)value' (byte)(value >> 8)' (byte)(value >> 16) }' 0' 3);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt32,The following statement contains a magic number: return new Slice(new byte[3] { (byte)value' (byte)(value >> 8)' (byte)(value >> 16) }' 0' 3);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt32,The following statement contains a magic number: value <= (1 << 24) - 1
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed32,The following statement contains a magic number: return new Slice(new byte[4] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24) }' 0' 4);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed32,The following statement contains a magic number: return new Slice(new byte[4] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24) }' 0' 4);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed32,The following statement contains a magic number: return new Slice(new byte[4] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24) }' 0' 4);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed32,The following statement contains a magic number: return new Slice(new byte[4] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24) }' 0' 4);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed32,The following statement contains a magic number: return new Slice(new byte[4] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24) }' 0' 4);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt32BE,The following statement contains a magic number: value <= (1 << 8) - 1
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt32BE,The following statement contains a magic number: return new Slice(new byte[2] { (byte) (value >> 8)' (byte) value }' 0' 2);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt32BE,The following statement contains a magic number: return new Slice(new byte[2] { (byte) (value >> 8)' (byte) value }' 0' 2);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt32BE,The following statement contains a magic number: return new Slice(new byte[2] { (byte) (value >> 8)' (byte) value }' 0' 2);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt32BE,The following statement contains a magic number: value <= (1 << 16) - 1
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt32BE,The following statement contains a magic number: return new Slice(new byte[3] { (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 3);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt32BE,The following statement contains a magic number: return new Slice(new byte[3] { (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 3);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt32BE,The following statement contains a magic number: return new Slice(new byte[3] { (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 3);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt32BE,The following statement contains a magic number: return new Slice(new byte[3] { (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 3);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt32BE,The following statement contains a magic number: value <= (1 << 24) - 1
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed32BE,The following statement contains a magic number: return new Slice(new byte[4] { (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value' }' 0' 4);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed32BE,The following statement contains a magic number: return new Slice(new byte[4] { (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value' }' 0' 4);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed32BE,The following statement contains a magic number: return new Slice(new byte[4] { (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value' }' 0' 4);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed32BE,The following statement contains a magic number: return new Slice(new byte[4] { (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value' }' 0' 4);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed32BE,The following statement contains a magic number: return new Slice(new byte[4] { (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value' }' 0' 4);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt32,The following statement contains a magic number: value <= (1 << 8) - 1
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt32,The following statement contains a magic number: return new Slice(new byte[2] { (byte) value' (byte) (value >> 8) }' 0' 2);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt32,The following statement contains a magic number: return new Slice(new byte[2] { (byte) value' (byte) (value >> 8) }' 0' 2);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt32,The following statement contains a magic number: return new Slice(new byte[2] { (byte) value' (byte) (value >> 8) }' 0' 2);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt32,The following statement contains a magic number: value <= (1 << 16) - 1
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt32,The following statement contains a magic number: return new Slice(new byte[3] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16) }' 0' 3);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt32,The following statement contains a magic number: return new Slice(new byte[3] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16) }' 0' 3);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt32,The following statement contains a magic number: return new Slice(new byte[3] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16) }' 0' 3);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt32,The following statement contains a magic number: return new Slice(new byte[3] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16) }' 0' 3);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt32,The following statement contains a magic number: value <= (1 << 24) - 1
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU32,The following statement contains a magic number: return new Slice(new byte[4] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24) }' 0' 4);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU32,The following statement contains a magic number: return new Slice(new byte[4] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24) }' 0' 4);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU32,The following statement contains a magic number: return new Slice(new byte[4] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24) }' 0' 4);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU32,The following statement contains a magic number: return new Slice(new byte[4] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24) }' 0' 4);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU32,The following statement contains a magic number: return new Slice(new byte[4] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24) }' 0' 4);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt32BE,The following statement contains a magic number: value <= (1 << 8) - 1
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt32BE,The following statement contains a magic number: return new Slice(new byte[2] { (byte) (value >> 8)' (byte) value }' 0' 2);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt32BE,The following statement contains a magic number: return new Slice(new byte[2] { (byte) (value >> 8)' (byte) value }' 0' 2);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt32BE,The following statement contains a magic number: return new Slice(new byte[2] { (byte) (value >> 8)' (byte) value }' 0' 2);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt32BE,The following statement contains a magic number: value <= (1 << 16) - 1
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt32BE,The following statement contains a magic number: return new Slice(new byte[3] { (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 3);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt32BE,The following statement contains a magic number: return new Slice(new byte[3] { (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 3);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt32BE,The following statement contains a magic number: return new Slice(new byte[3] { (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 3);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt32BE,The following statement contains a magic number: return new Slice(new byte[3] { (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 3);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt32BE,The following statement contains a magic number: value <= (1 << 24) - 1
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU32BE,The following statement contains a magic number: return new Slice(new byte[4] { (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 4);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU32BE,The following statement contains a magic number: return new Slice(new byte[4] { (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 4);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU32BE,The following statement contains a magic number: return new Slice(new byte[4] { (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 4);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU32BE,The following statement contains a magic number: return new Slice(new byte[4] { (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 4);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU32BE,The following statement contains a magic number: return new Slice(new byte[4] { (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 4);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromVarint32,The following statement contains a magic number: value <= 127
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromVarint32,The following statement contains a magic number: var writer = new SliceWriter(value <= (1 << 14) - 1 ? 2 : 5);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromVarint32,The following statement contains a magic number: var writer = new SliceWriter(value <= (1 << 14) - 1 ? 2 : 5);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromVarint32,The following statement contains a magic number: var writer = new SliceWriter(value <= (1 << 14) - 1 ? 2 : 5);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64,The following statement contains a magic number: value <= (1L << 32) - 1
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64,The following statement contains a magic number: return new Slice(new byte[5] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32) }' 0' 5);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64,The following statement contains a magic number: return new Slice(new byte[5] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32) }' 0' 5);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64,The following statement contains a magic number: return new Slice(new byte[5] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32) }' 0' 5);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64,The following statement contains a magic number: return new Slice(new byte[5] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32) }' 0' 5);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64,The following statement contains a magic number: return new Slice(new byte[5] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32) }' 0' 5);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64,The following statement contains a magic number: return new Slice(new byte[5] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32) }' 0' 5);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64,The following statement contains a magic number: value <= (1L << 40) - 1
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64,The following statement contains a magic number: return new Slice(new byte[6] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40) }' 0' 6);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64,The following statement contains a magic number: return new Slice(new byte[6] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40) }' 0' 6);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64,The following statement contains a magic number: return new Slice(new byte[6] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40) }' 0' 6);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64,The following statement contains a magic number: return new Slice(new byte[6] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40) }' 0' 6);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64,The following statement contains a magic number: return new Slice(new byte[6] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40) }' 0' 6);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64,The following statement contains a magic number: return new Slice(new byte[6] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40) }' 0' 6);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64,The following statement contains a magic number: return new Slice(new byte[6] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40) }' 0' 6);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64,The following statement contains a magic number: value <= (1L << 48) - 1
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64,The following statement contains a magic number: return new Slice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64,The following statement contains a magic number: return new Slice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64,The following statement contains a magic number: return new Slice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64,The following statement contains a magic number: return new Slice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64,The following statement contains a magic number: return new Slice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64,The following statement contains a magic number: return new Slice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64,The following statement contains a magic number: return new Slice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64,The following statement contains a magic number: return new Slice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64,The following statement contains a magic number: value <= (1L << 56) - 1
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed64,The following statement contains a magic number: return new Slice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed64,The following statement contains a magic number: return new Slice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed64,The following statement contains a magic number: return new Slice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed64,The following statement contains a magic number: return new Slice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed64,The following statement contains a magic number: return new Slice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed64,The following statement contains a magic number: return new Slice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed64,The following statement contains a magic number: return new Slice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed64,The following statement contains a magic number: return new Slice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed64,The following statement contains a magic number: return new Slice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64BE,The following statement contains a magic number: value <= (1L << 32) - 1
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new Slice(new byte[5] { (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 5);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new Slice(new byte[5] { (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 5);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new Slice(new byte[5] { (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 5);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new Slice(new byte[5] { (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 5);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new Slice(new byte[5] { (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 5);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new Slice(new byte[5] { (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 5);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64BE,The following statement contains a magic number: value <= (1L << 40) - 1
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new Slice(new byte[6] { (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 6);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new Slice(new byte[6] { (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 6);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new Slice(new byte[6] { (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 6);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new Slice(new byte[6] { (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 6);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new Slice(new byte[6] { (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 6);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new Slice(new byte[6] { (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 6);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new Slice(new byte[6] { (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 6);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64BE,The following statement contains a magic number: value <= (1L << 48) - 1
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new Slice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new Slice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new Slice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new Slice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new Slice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new Slice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new Slice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64BE,The following statement contains a magic number: return new Slice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromInt64BE,The following statement contains a magic number: value <= (1L << 56) - 1
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed64BE,The following statement contains a magic number: return new Slice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed64BE,The following statement contains a magic number: return new Slice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed64BE,The following statement contains a magic number: return new Slice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed64BE,The following statement contains a magic number: return new Slice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed64BE,The following statement contains a magic number: return new Slice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed64BE,The following statement contains a magic number: return new Slice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed64BE,The following statement contains a magic number: return new Slice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed64BE,The following statement contains a magic number: return new Slice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed64BE,The following statement contains a magic number: return new Slice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64,The following statement contains a magic number: value <= (1UL << 32) - 1
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new Slice(new byte[5] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32) }' 0' 5);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new Slice(new byte[5] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32) }' 0' 5);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new Slice(new byte[5] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32) }' 0' 5);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new Slice(new byte[5] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32) }' 0' 5);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new Slice(new byte[5] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32) }' 0' 5);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new Slice(new byte[5] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32) }' 0' 5);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64,The following statement contains a magic number: value <= (1UL << 40) - 1
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new Slice(new byte[6] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40) }' 0' 6);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new Slice(new byte[6] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40) }' 0' 6);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new Slice(new byte[6] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40) }' 0' 6);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new Slice(new byte[6] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40) }' 0' 6);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new Slice(new byte[6] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40) }' 0' 6);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new Slice(new byte[6] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40) }' 0' 6);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new Slice(new byte[6] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40) }' 0' 6);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64,The following statement contains a magic number: value <= (1UL << 48) - 1
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new Slice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new Slice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new Slice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new Slice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new Slice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new Slice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new Slice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64,The following statement contains a magic number: return new Slice(new byte[7] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48) }' 0' 7);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64,The following statement contains a magic number: value <= (1UL << 56) - 1
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU64,The following statement contains a magic number: return new Slice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU64,The following statement contains a magic number: return new Slice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU64,The following statement contains a magic number: return new Slice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU64,The following statement contains a magic number: return new Slice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU64,The following statement contains a magic number: return new Slice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU64,The following statement contains a magic number: return new Slice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU64,The following statement contains a magic number: return new Slice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU64,The following statement contains a magic number: return new Slice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU64,The following statement contains a magic number: return new Slice(new byte[8] { (byte) value' (byte) (value >> 8)' (byte) (value >> 16)' (byte) (value >> 24)' (byte) (value >> 32)' (byte) (value >> 40)' (byte) (value >> 48)' (byte) (value >> 56) }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: value <= (1UL << 32) - 1
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new Slice(new byte[5] { (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 5);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new Slice(new byte[5] { (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 5);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new Slice(new byte[5] { (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 5);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new Slice(new byte[5] { (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 5);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new Slice(new byte[5] { (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 5);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new Slice(new byte[5] { (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 5);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: value <= (1UL << 40) - 1
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new Slice(new byte[6] { (byte)(value >> 40)' (byte)(value >> 32)' (byte)(value >> 24)' (byte)(value >> 16)' (byte)(value >> 8)' (byte)value }' 0' 6);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new Slice(new byte[6] { (byte)(value >> 40)' (byte)(value >> 32)' (byte)(value >> 24)' (byte)(value >> 16)' (byte)(value >> 8)' (byte)value }' 0' 6);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new Slice(new byte[6] { (byte)(value >> 40)' (byte)(value >> 32)' (byte)(value >> 24)' (byte)(value >> 16)' (byte)(value >> 8)' (byte)value }' 0' 6);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new Slice(new byte[6] { (byte)(value >> 40)' (byte)(value >> 32)' (byte)(value >> 24)' (byte)(value >> 16)' (byte)(value >> 8)' (byte)value }' 0' 6);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new Slice(new byte[6] { (byte)(value >> 40)' (byte)(value >> 32)' (byte)(value >> 24)' (byte)(value >> 16)' (byte)(value >> 8)' (byte)value }' 0' 6);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new Slice(new byte[6] { (byte)(value >> 40)' (byte)(value >> 32)' (byte)(value >> 24)' (byte)(value >> 16)' (byte)(value >> 8)' (byte)value }' 0' 6);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new Slice(new byte[6] { (byte)(value >> 40)' (byte)(value >> 32)' (byte)(value >> 24)' (byte)(value >> 16)' (byte)(value >> 8)' (byte)value }' 0' 6);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: value <= (1UL << 48) - 1
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new Slice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new Slice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new Slice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new Slice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new Slice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new Slice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new Slice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: return new Slice(new byte[7] { (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 7);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromUInt64BE,The following statement contains a magic number: value <= (1UL << 56) - 1
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU64BE,The following statement contains a magic number: return new Slice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU64BE,The following statement contains a magic number: return new Slice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU64BE,The following statement contains a magic number: return new Slice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU64BE,The following statement contains a magic number: return new Slice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU64BE,The following statement contains a magic number: return new Slice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU64BE,The following statement contains a magic number: return new Slice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU64BE,The following statement contains a magic number: return new Slice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU64BE,The following statement contains a magic number: return new Slice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixedU64BE,The following statement contains a magic number: return new Slice(new byte[8] { (byte) (value >> 56)' (byte) (value >> 48)' (byte) (value >> 40)' (byte) (value >> 32)' (byte) (value >> 24)' (byte) (value >> 16)' (byte) (value >> 8)' (byte) value }' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromVarint64,The following statement contains a magic number: value <= 127
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromVarint64,The following statement contains a magic number: writer = new SliceWriter(value <= (1 << 14) - 1 ? 2 : 5);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromVarint64,The following statement contains a magic number: writer = new SliceWriter(value <= (1 << 14) - 1 ? 2 : 5);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromVarint64,The following statement contains a magic number: writer = new SliceWriter(value <= (1 << 14) - 1 ? 2 : 5);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128,The following statement contains a magic number: return new Slice(  				new byte[16]  				{  					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)'  					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)'  				}'  				0'  				16  			);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128,The following statement contains a magic number: return new Slice(  				new byte[16]  				{  					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)'  					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)'  				}'  				0'  				16  			);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128,The following statement contains a magic number: return new Slice(  				new byte[16]  				{  					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)'  					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)'  				}'  				0'  				16  			);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128,The following statement contains a magic number: return new Slice(  				new byte[16]  				{  					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)'  					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)'  				}'  				0'  				16  			);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128,The following statement contains a magic number: return new Slice(  				new byte[16]  				{  					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)'  					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)'  				}'  				0'  				16  			);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128,The following statement contains a magic number: return new Slice(  				new byte[16]  				{  					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)'  					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)'  				}'  				0'  				16  			);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128,The following statement contains a magic number: return new Slice(  				new byte[16]  				{  					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)'  					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)'  				}'  				0'  				16  			);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128,The following statement contains a magic number: return new Slice(  				new byte[16]  				{  					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)'  					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)'  				}'  				0'  				16  			);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128,The following statement contains a magic number: return new Slice(  				new byte[16]  				{  					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)'  					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)'  				}'  				0'  				16  			);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128,The following statement contains a magic number: return new Slice(  				new byte[16]  				{  					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)'  					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)'  				}'  				0'  				16  			);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128,The following statement contains a magic number: return new Slice(  				new byte[16]  				{  					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)'  					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)'  				}'  				0'  				16  			);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128,The following statement contains a magic number: return new Slice(  				new byte[16]  				{  					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)'  					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)'  				}'  				0'  				16  			);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128,The following statement contains a magic number: return new Slice(  				new byte[16]  				{  					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)'  					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)'  				}'  				0'  				16  			);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128,The following statement contains a magic number: return new Slice(  				new byte[16]  				{  					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)'  					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)'  				}'  				0'  				16  			);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128,The following statement contains a magic number: return new Slice(  				new byte[16]  				{  					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)'  					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)'  				}'  				0'  				16  			);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128,The following statement contains a magic number: return new Slice(  				new byte[16]  				{  					(byte) (lo)' (byte) (lo >> 8)' (byte) (lo >> 16)' (byte) (lo >> 24)' (byte) (lo >> 32)' (byte) (lo >> 40)' (byte) (lo >> 48)' (byte) (lo >> 56)'  					(byte) (hi)' (byte) (hi >> 8)' (byte) (hi >> 16)' (byte) (hi >> 24)' (byte) (hi >> 32)' (byte) (hi >> 40)' (byte) (hi >> 48)' (byte) (hi >> 56)'  				}'  				0'  				16  			);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128BE,The following statement contains a magic number: return new Slice(  				new byte[16]  				{  					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)'  					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)'  				}'  				0'  				16  			);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128BE,The following statement contains a magic number: return new Slice(  				new byte[16]  				{  					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)'  					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)'  				}'  				0'  				16  			);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128BE,The following statement contains a magic number: return new Slice(  				new byte[16]  				{  					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)'  					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)'  				}'  				0'  				16  			);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128BE,The following statement contains a magic number: return new Slice(  				new byte[16]  				{  					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)'  					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)'  				}'  				0'  				16  			);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128BE,The following statement contains a magic number: return new Slice(  				new byte[16]  				{  					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)'  					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)'  				}'  				0'  				16  			);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128BE,The following statement contains a magic number: return new Slice(  				new byte[16]  				{  					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)'  					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)'  				}'  				0'  				16  			);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128BE,The following statement contains a magic number: return new Slice(  				new byte[16]  				{  					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)'  					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)'  				}'  				0'  				16  			);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128BE,The following statement contains a magic number: return new Slice(  				new byte[16]  				{  					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)'  					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)'  				}'  				0'  				16  			);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128BE,The following statement contains a magic number: return new Slice(  				new byte[16]  				{  					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)'  					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)'  				}'  				0'  				16  			);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128BE,The following statement contains a magic number: return new Slice(  				new byte[16]  				{  					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)'  					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)'  				}'  				0'  				16  			);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128BE,The following statement contains a magic number: return new Slice(  				new byte[16]  				{  					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)'  					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)'  				}'  				0'  				16  			);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128BE,The following statement contains a magic number: return new Slice(  				new byte[16]  				{  					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)'  					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)'  				}'  				0'  				16  			);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128BE,The following statement contains a magic number: return new Slice(  				new byte[16]  				{  					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)'  					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)'  				}'  				0'  				16  			);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128BE,The following statement contains a magic number: return new Slice(  				new byte[16]  				{  					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)'  					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)'  				}'  				0'  				16  			);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128BE,The following statement contains a magic number: return new Slice(  				new byte[16]  				{  					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)'  					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)'  				}'  				0'  				16  			);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromFixed128BE,The following statement contains a magic number: return new Slice(  				new byte[16]  				{  					(byte) (hi >> 56)' (byte) (hi >> 48)' (byte) (hi >> 40)' (byte) (hi >> 32)' (byte) (hi >> 24)' (byte) (hi >> 16)' (byte) (hi >> 8)' (byte) (hi)'  					(byte) (lo >> 56)' (byte) (lo >> 48)' (byte) (lo >> 40)' (byte) (lo >> 32)' (byte) (lo >> 24)' (byte) (lo >> 16)' (byte) (lo >> 8)' (byte) (lo)'  				}'  				0'  				16  			);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromSingle,The following statement contains a magic number: byte[] tmp = new byte[4];
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromSingle,The following statement contains a magic number: return new Slice(tmp' 0' 4);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromSingleBE,The following statement contains a magic number: byte[] tmp = new byte[4];
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromSingleBE,The following statement contains a magic number: return new Slice(tmp' 0' 4);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromDouble,The following statement contains a magic number: byte[] tmp = new byte[8];
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromDouble,The following statement contains a magic number: return new Slice(tmp' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromDoubleBE,The following statement contains a magic number: byte[] tmp = new byte[8];
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromDoubleBE,The following statement contains a magic number: return new Slice(tmp' 0' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromDecimal,The following statement contains a magic number: byte[] tmp = new byte[16];
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromDecimal,The following statement contains a magic number: return new Slice(tmp' 0' 16);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromStringUtf8WithBom,The following statement contains a magic number: var tmp = UnsafeHelpers.EnsureCapacity(ref buffer' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromStringUtf8WithBom,The following statement contains a magic number: tmp[2] = 0xBF;
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromStringUtf8WithBom,The following statement contains a magic number: return new Slice(tmp' 0' 3);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromStringUtf8WithBom,The following statement contains a magic number: int capa = checked(3 + Utf8NoBomEncoding.GetByteCount(pchars' value.Length));
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromStringUtf8WithBom,The following statement contains a magic number: outp[2] = 0xBF;
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromStringUtf8WithBom,The following statement contains a magic number: Utf8NoBomEncoding.GetBytes(pchars' value.Length' outp + 3' tmp.Length - 3);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromStringUtf8WithBom,The following statement contains a magic number: Utf8NoBomEncoding.GetBytes(pchars' value.Length' outp + 3' tmp.Length - 3);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromChar,The following statement contains a magic number: value < 128
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromChar,The following statement contains a magic number: value < 128
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FromChar,The following statement contains a magic number: var tmp = UnsafeHelpers.EnsureCapacity(ref buffer' 8);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,HasUtf8Bom,The following statement contains a magic number: return count >= 3  			    && (uint) (offset + count) <= (uint) array.Length  			    && array[offset + 0] == 0xEF  			    && array[offset + 1] == 0xBB  			    && array[offset + 2] == 0xBF;
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,HasUtf8Bom,The following statement contains a magic number: return count >= 3  			    && (uint) (offset + count) <= (uint) array.Length  			    && array[offset + 0] == 0xEF  			    && array[offset + 1] == 0xBB  			    && array[offset + 2] == 0xBF;
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToStringUtf8,The following statement contains a magic number: offset += 3;
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToStringUtf8,The following statement contains a magic number: count -= 3;
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FormatHexaString,The following statement contains a magic number: var sb = new StringBuilder(count * (sep == '\0' ? 2 : 3));
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FormatHexaString,The following statement contains a magic number: var sb = new StringBuilder(count * (sep == '\0' ? 2 : 3));
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FormatHexaString,The following statement contains a magic number: int letters = lower ? 87 : 55;
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FormatHexaString,The following statement contains a magic number: int letters = lower ? 87 : 55;
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FormatHexaString,The following statement contains a magic number: int h = b >> 4;
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FormatHexaString,The following statement contains a magic number: h += h < 10 ? 48 : letters;
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FormatHexaString,The following statement contains a magic number: h += h < 10 ? 48 : letters;
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FormatHexaString,The following statement contains a magic number: l += l < 10 ? 48 : letters;
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,FormatHexaString,The following statement contains a magic number: l += l < 10 ? 48 : letters;
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,EscapeString,The following statement contains a magic number: sb = new StringBuilder(count + 16);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,EscapeString,The following statement contains a magic number: (c >= ' ' && c <= '~') || (c >= 880 && c <= 2047) || (c >= 12352 && c <= 12591)
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,EscapeString,The following statement contains a magic number: (c >= ' ' && c <= '~') || (c >= 880 && c <= 2047) || (c >= 12352 && c <= 12591)
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,EscapeString,The following statement contains a magic number: (c >= ' ' && c <= '~') || (c >= 880 && c <= 2047) || (c >= 12352 && c <= 12591)
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,EscapeString,The following statement contains a magic number: (c >= ' ' && c <= '~') || (c >= 880 && c <= 2047) || (c >= 12352 && c <= 12591)
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,PrettyPrint,The following statement contains a magic number: return PrettyPrint(this.Array' this.Offset' this.Count' 1024);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,PrettyPrint,The following statement contains a magic number: return EscapeString(new StringBuilder(count).Append('\'')' buffer' offset + 3' Math.Min(count - 3' maxLen)' Slice.Utf8NoBomEncoding).Append('\'').ToString();
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,PrettyPrint,The following statement contains a magic number: return EscapeString(new StringBuilder(count).Append('\'')' buffer' offset + 3' Math.Min(count - 3' maxLen)' Slice.Utf8NoBomEncoding).Append('\'').ToString();
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,PrettyPrint,The following statement contains a magic number: count >= 3 && buffer[offset] == 0xEF && buffer[offset + 1] == 0xBB && buffer[offset + 2] == 0xBF
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,PrettyPrint,The following statement contains a magic number: count >= 3 && buffer[offset] == 0xEF && buffer[offset + 1] == 0xBB && buffer[offset + 2] == 0xBF
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,PrettyPrint,The following statement contains a magic number: return EscapeString(new StringBuilder(count + 16)' buffer' offset' count' Slice.Utf8NoBomEncoding).ToString();
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,PrettyPrint,The following statement contains a magic number: count >= 2
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,PrettyPrint,The following statement contains a magic number: b >= 32 && b < 127
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,PrettyPrint,The following statement contains a magic number: b >= 32 && b < 127
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,PrettyPrint,The following statement contains a magic number: b == 0 || b == 10 || b == 13 || b == 9
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,PrettyPrint,The following statement contains a magic number: b == 0 || b == 10 || b == 13 || b == 9
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,PrettyPrint,The following statement contains a magic number: b == 0 || b == 10 || b == 13 || b == 9
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,PrettyPrint,The following statement contains a magic number: return EscapeString(new StringBuilder(count + 2).Append('\'')' buffer' offset' count' Slice.Utf8NoBomEncoding).Append('\'').ToString();
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt16,The following statement contains a magic number: switch (this.Count)  			{  				case 0: return 0;  				case 1: return this.Array[this.Offset];  				case 2: return (short)(this.Array[this.Offset] | (this.Array[this.Offset + 1] << 8));  				default:  					if (this.Count < 0) throw UnsafeHelpers.Errors.SliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<short>(2);  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt16,The following statement contains a magic number: switch (this.Count)  			{  				case 0: return 0;  				case 1: return this.Array[this.Offset];  				case 2: return (short)(this.Array[this.Offset] | (this.Array[this.Offset + 1] << 8));  				default:  					if (this.Count < 0) throw UnsafeHelpers.Errors.SliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<short>(2);  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt16,The following statement contains a magic number: switch (this.Count)  			{  				case 0: return 0;  				case 1: return this.Array[this.Offset];  				case 2: return (short)(this.Array[this.Offset] | (this.Array[this.Offset + 1] << 8));  				default:  					if (this.Count < 0) throw UnsafeHelpers.Errors.SliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<short>(2);  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt16BE,The following statement contains a magic number: switch (this.Count)  			{  				case 0: return 0;  				case 1: return this.Array[this.Offset];  				case 2: return (short)(this.Array[this.Offset + 1] | (this.Array[this.Offset] << 8));  				default:  					if (this.Count < 0) throw UnsafeHelpers.Errors.SliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<short>(2);    			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt16BE,The following statement contains a magic number: switch (this.Count)  			{  				case 0: return 0;  				case 1: return this.Array[this.Offset];  				case 2: return (short)(this.Array[this.Offset + 1] | (this.Array[this.Offset] << 8));  				default:  					if (this.Count < 0) throw UnsafeHelpers.Errors.SliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<short>(2);    			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt16BE,The following statement contains a magic number: switch (this.Count)  			{  				case 0: return 0;  				case 1: return this.Array[this.Offset];  				case 2: return (short)(this.Array[this.Offset + 1] | (this.Array[this.Offset] << 8));  				default:  					if (this.Count < 0) throw UnsafeHelpers.Errors.SliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<short>(2);    			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt16,The following statement contains a magic number: switch (this.Count)  			{  				case 0: return 0;  				case 1: return this.Array[this.Offset];  				case 2: return (ushort)(this.Array[this.Offset] | (this.Array[this.Offset + 1] << 8));  				default:  					if (this.Count < 0) throw UnsafeHelpers.Errors.SliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<ushort>(2);  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt16,The following statement contains a magic number: switch (this.Count)  			{  				case 0: return 0;  				case 1: return this.Array[this.Offset];  				case 2: return (ushort)(this.Array[this.Offset] | (this.Array[this.Offset + 1] << 8));  				default:  					if (this.Count < 0) throw UnsafeHelpers.Errors.SliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<ushort>(2);  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt16,The following statement contains a magic number: switch (this.Count)  			{  				case 0: return 0;  				case 1: return this.Array[this.Offset];  				case 2: return (ushort)(this.Array[this.Offset] | (this.Array[this.Offset + 1] << 8));  				default:  					if (this.Count < 0) throw UnsafeHelpers.Errors.SliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<ushort>(2);  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt16BE,The following statement contains a magic number: switch (this.Count)  			{  				case 0: return 0;  				case 1: return this.Array[this.Offset];  				case 2: return (ushort)(this.Array[this.Offset + 1] | (this.Array[this.Offset] << 8));  				default:  					if (this.Count < 0) throw UnsafeHelpers.Errors.SliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<ushort>(2);    			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt16BE,The following statement contains a magic number: switch (this.Count)  			{  				case 0: return 0;  				case 1: return this.Array[this.Offset];  				case 2: return (ushort)(this.Array[this.Offset + 1] | (this.Array[this.Offset] << 8));  				default:  					if (this.Count < 0) throw UnsafeHelpers.Errors.SliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<ushort>(2);    			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt16BE,The following statement contains a magic number: switch (this.Count)  			{  				case 0: return 0;  				case 1: return this.Array[this.Offset];  				case 2: return (ushort)(this.Array[this.Offset + 1] | (this.Array[this.Offset] << 8));  				default:  					if (this.Count < 0) throw UnsafeHelpers.Errors.SliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<ushort>(2);    			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ReadUInt16,The following statement contains a magic number: (uint) bytes > 2
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ReadUInt16,The following statement contains a magic number: switch (bytes)  			{  				case 0: return 0;  				case 1: return buffer[p];  				default: return (ushort)(buffer[p] | (buffer[p + 1] << 8));  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ReadUInt16BE,The following statement contains a magic number: (uint) bytes > 2
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ReadUInt16BE,The following statement contains a magic number: switch (bytes)  			{  				case 0: return 0;  				case 1: return buffer[p];  				default: return (ushort)(buffer[p + 1] | (buffer[p] << 8));  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt24,The following statement contains a magic number: switch (count)  					{  						case 1: return *ptr;  						case 2: return UnsafeHelpers.LoadUInt16LE(ptr); // cannot be negative  						case 3: return UnsafeHelpers.LoadInt24LE(ptr);  					}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt24,The following statement contains a magic number: switch (count)  					{  						case 1: return *ptr;  						case 2: return UnsafeHelpers.LoadUInt16LE(ptr); // cannot be negative  						case 3: return UnsafeHelpers.LoadInt24LE(ptr);  					}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt24,The following statement contains a magic number: return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(3);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt24BE,The following statement contains a magic number: switch (count)  					{  						case 1: return *ptr;  						case 2: return UnsafeHelpers.LoadUInt16BE(ptr);  						case 3: return UnsafeHelpers.LoadInt24BE(ptr);  					}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt24BE,The following statement contains a magic number: switch (count)  					{  						case 1: return *ptr;  						case 2: return UnsafeHelpers.LoadUInt16BE(ptr);  						case 3: return UnsafeHelpers.LoadInt24BE(ptr);  					}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt24BE,The following statement contains a magic number: return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(3);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt24,The following statement contains a magic number: switch (count)  					{  						case 1: return *ptr;  						case 2: return UnsafeHelpers.LoadUInt16LE(ptr);  						case 3: return UnsafeHelpers.LoadUInt24LE(ptr);  					}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt24,The following statement contains a magic number: switch (count)  					{  						case 1: return *ptr;  						case 2: return UnsafeHelpers.LoadUInt16LE(ptr);  						case 3: return UnsafeHelpers.LoadUInt24LE(ptr);  					}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt24,The following statement contains a magic number: return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(3);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt24BE,The following statement contains a magic number: switch (count)  					{  						case 1: return *ptr;  						case 2: return UnsafeHelpers.LoadUInt16BE(ptr);  						case 3: return UnsafeHelpers.LoadUInt24BE(ptr);  					}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt24BE,The following statement contains a magic number: switch (count)  					{  						case 1: return *ptr;  						case 2: return UnsafeHelpers.LoadUInt16BE(ptr);  						case 3: return UnsafeHelpers.LoadUInt24BE(ptr);  					}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt24BE,The following statement contains a magic number: return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(3);
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ReadUInt24,The following statement contains a magic number: (uint) bytes > 3
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ReadUInt24,The following statement contains a magic number: switch (bytes)  			{  				case 0: return 0;  				case 1: return buffer[p];  				case 2: return (uint)(buffer[p] | (buffer[p + 1] << 8));  				default: return (uint)(buffer[p] | (buffer[p + 1] << 8) | (buffer[p + 2] << 16));  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ReadUInt24,The following statement contains a magic number: switch (bytes)  			{  				case 0: return 0;  				case 1: return buffer[p];  				case 2: return (uint)(buffer[p] | (buffer[p + 1] << 8));  				default: return (uint)(buffer[p] | (buffer[p + 1] << 8) | (buffer[p + 2] << 16));  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ReadUInt24,The following statement contains a magic number: switch (bytes)  			{  				case 0: return 0;  				case 1: return buffer[p];  				case 2: return (uint)(buffer[p] | (buffer[p + 1] << 8));  				default: return (uint)(buffer[p] | (buffer[p + 1] << 8) | (buffer[p + 2] << 16));  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ReadUInt24,The following statement contains a magic number: switch (bytes)  			{  				case 0: return 0;  				case 1: return buffer[p];  				case 2: return (uint)(buffer[p] | (buffer[p + 1] << 8));  				default: return (uint)(buffer[p] | (buffer[p + 1] << 8) | (buffer[p + 2] << 16));  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ReadUInt24,The following statement contains a magic number: switch (bytes)  			{  				case 0: return 0;  				case 1: return buffer[p];  				case 2: return (uint)(buffer[p] | (buffer[p + 1] << 8));  				default: return (uint)(buffer[p] | (buffer[p + 1] << 8) | (buffer[p + 2] << 16));  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ReadUInt24BE,The following statement contains a magic number: (uint) bytes > 3
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ReadUInt24BE,The following statement contains a magic number: switch (bytes)  			{  				case 0: return 0;  				case 1: return buffer[p];  				case 2: return (ushort)(buffer[p + 1] | (buffer[p] << 8));  				default: return (ushort)(buffer[p + 2] | (buffer[p + 1] << 8) | (buffer[p] << 16));  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ReadUInt24BE,The following statement contains a magic number: switch (bytes)  			{  				case 0: return 0;  				case 1: return buffer[p];  				case 2: return (ushort)(buffer[p + 1] | (buffer[p] << 8));  				default: return (ushort)(buffer[p + 2] | (buffer[p + 1] << 8) | (buffer[p] << 16));  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ReadUInt24BE,The following statement contains a magic number: switch (bytes)  			{  				case 0: return 0;  				case 1: return buffer[p];  				case 2: return (ushort)(buffer[p + 1] | (buffer[p] << 8));  				default: return (ushort)(buffer[p + 2] | (buffer[p + 1] << 8) | (buffer[p] << 16));  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ReadUInt24BE,The following statement contains a magic number: switch (bytes)  			{  				case 0: return 0;  				case 1: return buffer[p];  				case 2: return (ushort)(buffer[p + 1] | (buffer[p] << 8));  				default: return (ushort)(buffer[p + 2] | (buffer[p + 1] << 8) | (buffer[p] << 16));  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ReadUInt24BE,The following statement contains a magic number: switch (bytes)  			{  				case 0: return 0;  				case 1: return buffer[p];  				case 2: return (ushort)(buffer[p + 1] | (buffer[p] << 8));  				default: return (ushort)(buffer[p + 2] | (buffer[p + 1] << 8) | (buffer[p] << 16));  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return arr[off] | (arr[off + 1] << 8);  				case 3: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16);  				case 4: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return arr[off] | (arr[off + 1] << 8);  				case 3: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16);  				case 4: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return arr[off] | (arr[off + 1] << 8);  				case 3: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16);  				case 4: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return arr[off] | (arr[off + 1] << 8);  				case 3: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16);  				case 4: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return arr[off] | (arr[off + 1] << 8);  				case 3: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16);  				case 4: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return arr[off] | (arr[off + 1] << 8);  				case 3: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16);  				case 4: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return arr[off] | (arr[off + 1] << 8);  				case 3: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16);  				case 4: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return arr[off] | (arr[off + 1] << 8);  				case 3: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16);  				case 4: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return arr[off] | (arr[off + 1] << 8);  				case 3: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16);  				case 4: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return arr[off] | (arr[off + 1] << 8);  				case 3: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16);  				case 4: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return arr[off] | (arr[off + 1] << 8);  				case 3: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16);  				case 4: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return arr[off] | (arr[off + 1] << 8);  				case 3: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16);  				case 4: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return arr[off] | (arr[off + 1] << 8);  				case 3: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16);  				case 4: return arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (arr[off] << 8) | arr[off + 1];  				case 3: return (arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2];  				case 4: return (arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3];  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (arr[off] << 8) | arr[off + 1];  				case 3: return (arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2];  				case 4: return (arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3];  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (arr[off] << 8) | arr[off + 1];  				case 3: return (arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2];  				case 4: return (arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3];  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (arr[off] << 8) | arr[off + 1];  				case 3: return (arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2];  				case 4: return (arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3];  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (arr[off] << 8) | arr[off + 1];  				case 3: return (arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2];  				case 4: return (arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3];  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (arr[off] << 8) | arr[off + 1];  				case 3: return (arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2];  				case 4: return (arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3];  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (arr[off] << 8) | arr[off + 1];  				case 3: return (arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2];  				case 4: return (arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3];  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (arr[off] << 8) | arr[off + 1];  				case 3: return (arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2];  				case 4: return (arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3];  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (arr[off] << 8) | arr[off + 1];  				case 3: return (arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2];  				case 4: return (arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3];  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (arr[off] << 8) | arr[off + 1];  				case 3: return (arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2];  				case 4: return (arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3];  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (arr[off] << 8) | arr[off + 1];  				case 3: return (arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2];  				case 4: return (arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3];  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (arr[off] << 8) | arr[off + 1];  				case 3: return (arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2];  				case 4: return (arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3];  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (arr[off] << 8) | arr[off + 1];  				case 3: return (arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2];  				case 4: return (arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3];  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<int>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)(arr[off] | (arr[off + 1] << 8));  				case 3: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16));  				case 4: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24));  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)(arr[off] | (arr[off + 1] << 8));  				case 3: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16));  				case 4: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24));  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)(arr[off] | (arr[off + 1] << 8));  				case 3: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16));  				case 4: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24));  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)(arr[off] | (arr[off + 1] << 8));  				case 3: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16));  				case 4: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24));  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)(arr[off] | (arr[off + 1] << 8));  				case 3: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16));  				case 4: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24));  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)(arr[off] | (arr[off + 1] << 8));  				case 3: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16));  				case 4: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24));  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)(arr[off] | (arr[off + 1] << 8));  				case 3: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16));  				case 4: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24));  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)(arr[off] | (arr[off + 1] << 8));  				case 3: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16));  				case 4: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24));  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)(arr[off] | (arr[off + 1] << 8));  				case 3: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16));  				case 4: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24));  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)(arr[off] | (arr[off + 1] << 8));  				case 3: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16));  				case 4: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24));  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)(arr[off] | (arr[off + 1] << 8));  				case 3: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16));  				case 4: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24));  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)(arr[off] | (arr[off + 1] << 8));  				case 3: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16));  				case 4: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24));  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt32,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)(arr[off] | (arr[off + 1] << 8));  				case 3: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16));  				case 4: return (uint)(arr[off] | (arr[off + 1] << 8) | (arr[off + 2] << 16) | (arr[off + 3] << 24));  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)((arr[off] << 8) | arr[off + 1]);  				case 3: return (uint)((arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2]);  				case 4: return (uint)((arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3]);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)((arr[off] << 8) | arr[off + 1]);  				case 3: return (uint)((arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2]);  				case 4: return (uint)((arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3]);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)((arr[off] << 8) | arr[off + 1]);  				case 3: return (uint)((arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2]);  				case 4: return (uint)((arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3]);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)((arr[off] << 8) | arr[off + 1]);  				case 3: return (uint)((arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2]);  				case 4: return (uint)((arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3]);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)((arr[off] << 8) | arr[off + 1]);  				case 3: return (uint)((arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2]);  				case 4: return (uint)((arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3]);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)((arr[off] << 8) | arr[off + 1]);  				case 3: return (uint)((arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2]);  				case 4: return (uint)((arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3]);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)((arr[off] << 8) | arr[off + 1]);  				case 3: return (uint)((arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2]);  				case 4: return (uint)((arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3]);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)((arr[off] << 8) | arr[off + 1]);  				case 3: return (uint)((arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2]);  				case 4: return (uint)((arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3]);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)((arr[off] << 8) | arr[off + 1]);  				case 3: return (uint)((arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2]);  				case 4: return (uint)((arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3]);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)((arr[off] << 8) | arr[off + 1]);  				case 3: return (uint)((arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2]);  				case 4: return (uint)((arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3]);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)((arr[off] << 8) | arr[off + 1]);  				case 3: return (uint)((arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2]);  				case 4: return (uint)((arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3]);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)((arr[off] << 8) | arr[off + 1]);  				case 3: return (uint)((arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2]);  				case 4: return (uint)((arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3]);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt32BE,The following statement contains a magic number: switch (this.Count) // if negative' will throw in the default case below  			{  				case 0: return 0;  				case 1: return arr[off];  				case 2: return (uint)((arr[off] << 8) | arr[off + 1]);  				case 3: return (uint)((arr[off] << 16) | (arr[off + 1] << 8) | arr[off + 2]);  				case 4: return (uint)((arr[off] << 24) | (arr[off + 1] << 16) | (arr[off + 2] << 8) | arr[off + 3]);  				default:  				{  					if (this.Count < 0) UnsafeHelpers.Errors.ThrowSliceCountNotNeg();  					return UnsafeHelpers.Errors.ThrowSliceTooLargeForConversion<uint>(4);  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ReadUInt32,The following statement contains a magic number: (uint) bytes > 4
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ReadUInt32,The following statement contains a magic number: value = (value << 8) | buffer[p--];
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ReadUInt32BE,The following statement contains a magic number: (uint) bytes > 4
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ReadUInt32BE,The following statement contains a magic number: value = (value << 8) | buffer[p++];
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt64,The following statement contains a magic number: return this.Count <= 4 ? ToUInt32() : ToInt64Slow();
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt64Slow,The following statement contains a magic number: (uint) n > 8
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt64Slow,The following statement contains a magic number: value = (value << 8) | buffer[p--];
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt64BE,The following statement contains a magic number: return this.Count <= 4 ? ToInt32BE() : ToInt64BESlow();
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt64BESlow,The following statement contains a magic number: (uint) n > 8
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt64BESlow,The following statement contains a magic number: value = (value << 8) | buffer[p++];
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt64,The following statement contains a magic number: (uint) n > 8
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt64,The following statement contains a magic number: value = (value << 8) | buffer[p--];
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt64BE,The following statement contains a magic number: (uint) n > 8
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt64BE,The following statement contains a magic number: value = (value << 8) | buffer[p++];
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ReadUInt64,The following statement contains a magic number: (uint) bytes > 8
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ReadUInt64,The following statement contains a magic number: value = (value << 8) | buffer[p--];
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ReadUInt64BE,The following statement contains a magic number: (uint) bytes > 8
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ReadUInt64BE,The following statement contains a magic number: value = (value << 8) | buffer[p++];
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUuid64,The following statement contains a magic number: switch (this.Count)  			{  				case 8:  				{ // binary (8 bytes)  					return Uuid64.Read(this);  				}    				case 16: // hex16  				case 17: // hex8-hex8  				case 19: // {hex8-hex8}  				{  					// ReSharper disable once AssignNullToNotNullAttribute  					return Uuid64.Parse(ToByteString());  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUuid64,The following statement contains a magic number: switch (this.Count)  			{  				case 8:  				{ // binary (8 bytes)  					return Uuid64.Read(this);  				}    				case 16: // hex16  				case 17: // hex8-hex8  				case 19: // {hex8-hex8}  				{  					// ReSharper disable once AssignNullToNotNullAttribute  					return Uuid64.Parse(ToByteString());  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUuid64,The following statement contains a magic number: switch (this.Count)  			{  				case 8:  				{ // binary (8 bytes)  					return Uuid64.Read(this);  				}    				case 16: // hex16  				case 17: // hex8-hex8  				case 19: // {hex8-hex8}  				{  					// ReSharper disable once AssignNullToNotNullAttribute  					return Uuid64.Parse(ToByteString());  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUuid64,The following statement contains a magic number: switch (this.Count)  			{  				case 8:  				{ // binary (8 bytes)  					return Uuid64.Read(this);  				}    				case 16: // hex16  				case 17: // hex8-hex8  				case 19: // {hex8-hex8}  				{  					// ReSharper disable once AssignNullToNotNullAttribute  					return Uuid64.Parse(ToByteString());  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToSingle,The following statement contains a magic number: this.Count != 4
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToSingleBE,The following statement contains a magic number: this.Count != 4
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToDouble,The following statement contains a magic number: this.Count != 8
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToDoubleBE,The following statement contains a magic number: this.Count != 8
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToDecimal,The following statement contains a magic number: this.Count != 16
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToGuid,The following statement contains a magic number: this.Count == 16
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToGuid,The following statement contains a magic number: this.Count == 36
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUuid128,The following statement contains a magic number: this.Count == 16
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUuid128,The following statement contains a magic number: this.Count == 36
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUuid80,The following statement contains a magic number: switch (this.Count)  			{  				case 10:  				{ // binary (10 bytes)  					return Uuid80.Read(this);  				}    				case 20: // XXXXXXXXXXXXXXXXXXXX  				case 22: // XXXX-XXXXXXXX-XXXXXXXX  				case 24: // {XXXX-XXXXXXXX-XXXXXXXX}  				{  					// ReSharper disable once AssignNullToNotNullAttribute  					return Uuid80.Parse(ToByteString());  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUuid80,The following statement contains a magic number: switch (this.Count)  			{  				case 10:  				{ // binary (10 bytes)  					return Uuid80.Read(this);  				}    				case 20: // XXXXXXXXXXXXXXXXXXXX  				case 22: // XXXX-XXXXXXXX-XXXXXXXX  				case 24: // {XXXX-XXXXXXXX-XXXXXXXX}  				{  					// ReSharper disable once AssignNullToNotNullAttribute  					return Uuid80.Parse(ToByteString());  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUuid80,The following statement contains a magic number: switch (this.Count)  			{  				case 10:  				{ // binary (10 bytes)  					return Uuid80.Read(this);  				}    				case 20: // XXXXXXXXXXXXXXXXXXXX  				case 22: // XXXX-XXXXXXXX-XXXXXXXX  				case 24: // {XXXX-XXXXXXXX-XXXXXXXX}  				{  					// ReSharper disable once AssignNullToNotNullAttribute  					return Uuid80.Parse(ToByteString());  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUuid80,The following statement contains a magic number: switch (this.Count)  			{  				case 10:  				{ // binary (10 bytes)  					return Uuid80.Read(this);  				}    				case 20: // XXXXXXXXXXXXXXXXXXXX  				case 22: // XXXX-XXXXXXXX-XXXXXXXX  				case 24: // {XXXX-XXXXXXXX-XXXXXXXX}  				{  					// ReSharper disable once AssignNullToNotNullAttribute  					return Uuid80.Parse(ToByteString());  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUuid96,The following statement contains a magic number: switch (this.Count)  			{  				case 12:  				{ // binary (12 bytes)  					return Uuid96.Read(this);  				}    				case 24: // XXXXXXXXXXXXXXXXXXXXXXXX  				case 26: // XXXXXXXX-XXXXXXXX-XXXXXXXX  				case 28: // {XXXXXXXX-XXXXXXXX-XXXXXXXX}  				{  					// ReSharper disable once AssignNullToNotNullAttribute  					return Uuid96.Parse(ToByteString());  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUuid96,The following statement contains a magic number: switch (this.Count)  			{  				case 12:  				{ // binary (12 bytes)  					return Uuid96.Read(this);  				}    				case 24: // XXXXXXXXXXXXXXXXXXXXXXXX  				case 26: // XXXXXXXX-XXXXXXXX-XXXXXXXX  				case 28: // {XXXXXXXX-XXXXXXXX-XXXXXXXX}  				{  					// ReSharper disable once AssignNullToNotNullAttribute  					return Uuid96.Parse(ToByteString());  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUuid96,The following statement contains a magic number: switch (this.Count)  			{  				case 12:  				{ // binary (12 bytes)  					return Uuid96.Read(this);  				}    				case 24: // XXXXXXXXXXXXXXXXXXXXXXXX  				case 26: // XXXXXXXX-XXXXXXXX-XXXXXXXX  				case 28: // {XXXXXXXX-XXXXXXXX-XXXXXXXX}  				{  					// ReSharper disable once AssignNullToNotNullAttribute  					return Uuid96.Parse(ToByteString());  				}  			}
Magic Number,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUuid96,The following statement contains a magic number: switch (this.Count)  			{  				case 12:  				{ // binary (12 bytes)  					return Uuid96.Read(this);  				}    				case 24: // XXXXXXXXXXXXXXXXXXXXXXXX  				case 26: // XXXXXXXX-XXXXXXXX-XXXXXXXX  				case 28: // {XXXXXXXX-XXXXXXXX-XXXXXXXX}  				{  					// ReSharper disable once AssignNullToNotNullAttribute  					return Uuid96.Parse(ToByteString());  				}  			}
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,Convert,The following statement contains a magic number: input.Length != 16
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,Convert,The following statement contains a magic number: b.WriteToUnsafe(buf.Slice(8));
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,Convert,The following statement contains a magic number: Span<byte> buf = stackalloc byte[16];
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,Convert,The following statement contains a magic number: buf[8] = (byte) b;
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,Convert,The following statement contains a magic number: buf[9] = (byte)(b >> 8);
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,Convert,The following statement contains a magic number: buf[9] = (byte)(b >> 8);
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,Convert,The following statement contains a magic number: buf[10] = (byte)(b >> 16);
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,Convert,The following statement contains a magic number: buf[10] = (byte)(b >> 16);
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,Convert,The following statement contains a magic number: buf[11] = (byte)(b >> 24);
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,Convert,The following statement contains a magic number: buf[11] = (byte)(b >> 24);
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,Convert,The following statement contains a magic number: buf[12] = (byte) c;
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,Convert,The following statement contains a magic number: buf[13] = (byte)(c >> 8);
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,Convert,The following statement contains a magic number: buf[13] = (byte)(c >> 8);
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,Convert,The following statement contains a magic number: buf[14] = (byte)(c >> 16);
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,Convert,The following statement contains a magic number: buf[14] = (byte)(c >> 16);
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,Convert,The following statement contains a magic number: buf[15] = (byte)(c >> 24);
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,Convert,The following statement contains a magic number: buf[15] = (byte)(c >> 24);
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,ReadUnsafe,The following statement contains a magic number: Contract.Requires(source.Length >= 16);
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,ReadUnsafe,The following statement contains a magic number: ptr[0] = src[3];
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,ReadUnsafe,The following statement contains a magic number: ptr[1] = src[2];
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,ReadUnsafe,The following statement contains a magic number: ptr[2] = src[1];
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,ReadUnsafe,The following statement contains a magic number: ptr[3] = src[0];
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,ReadUnsafe,The following statement contains a magic number: ptr[4] = src[5];
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,ReadUnsafe,The following statement contains a magic number: ptr[4] = src[5];
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,ReadUnsafe,The following statement contains a magic number: ptr[5] = src[4];
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,ReadUnsafe,The following statement contains a magic number: ptr[5] = src[4];
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,ReadUnsafe,The following statement contains a magic number: ptr[6] = src[7];
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,ReadUnsafe,The following statement contains a magic number: ptr[6] = src[7];
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,ReadUnsafe,The following statement contains a magic number: ptr[7] = src[6];
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,ReadUnsafe,The following statement contains a magic number: ptr[7] = src[6];
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,ReadUnsafe,The following statement contains a magic number: *(long*) (ptr + 8) = *(long*) (src + 8);
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,ReadUnsafe,The following statement contains a magic number: *(long*) (ptr + 8) = *(long*) (src + 8);
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,WriteUnsafe,The following statement contains a magic number: Contract.Requires(value != null && buffer.Length >= 16);
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,WriteUnsafe,The following statement contains a magic number: fixed (byte* outp = &MemoryMarshal.GetReference(buffer))  			{  				if (BitConverter.IsLittleEndian)  				{  					byte* src = (byte*) inp;    					// Data1: 32 bits' must swap  					outp[0] = src[3];  					outp[1] = src[2];  					outp[2] = src[1];  					outp[3] = src[0];  					// Data2: 16 bits' must swap  					outp[4] = src[5];  					outp[5] = src[4];  					// Data3: 16 bits' must swap  					outp[6] = src[7];  					outp[7] = src[6];  					// Data4: 64 bits' no swap required  					*(long*) (outp + 8) = *(long*) (src + 8);  				}  				else  				{  					long* src = (long*) inp;  					*(long*) (outp) = src[0];  					*(long*) (outp + 8) = src[1];  				}  			}
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,WriteUnsafe,The following statement contains a magic number: fixed (byte* outp = &MemoryMarshal.GetReference(buffer))  			{  				if (BitConverter.IsLittleEndian)  				{  					byte* src = (byte*) inp;    					// Data1: 32 bits' must swap  					outp[0] = src[3];  					outp[1] = src[2];  					outp[2] = src[1];  					outp[3] = src[0];  					// Data2: 16 bits' must swap  					outp[4] = src[5];  					outp[5] = src[4];  					// Data3: 16 bits' must swap  					outp[6] = src[7];  					outp[7] = src[6];  					// Data4: 64 bits' no swap required  					*(long*) (outp + 8) = *(long*) (src + 8);  				}  				else  				{  					long* src = (long*) inp;  					*(long*) (outp) = src[0];  					*(long*) (outp + 8) = src[1];  				}  			}
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,WriteUnsafe,The following statement contains a magic number: fixed (byte* outp = &MemoryMarshal.GetReference(buffer))  			{  				if (BitConverter.IsLittleEndian)  				{  					byte* src = (byte*) inp;    					// Data1: 32 bits' must swap  					outp[0] = src[3];  					outp[1] = src[2];  					outp[2] = src[1];  					outp[3] = src[0];  					// Data2: 16 bits' must swap  					outp[4] = src[5];  					outp[5] = src[4];  					// Data3: 16 bits' must swap  					outp[6] = src[7];  					outp[7] = src[6];  					// Data4: 64 bits' no swap required  					*(long*) (outp + 8) = *(long*) (src + 8);  				}  				else  				{  					long* src = (long*) inp;  					*(long*) (outp) = src[0];  					*(long*) (outp + 8) = src[1];  				}  			}
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,WriteUnsafe,The following statement contains a magic number: fixed (byte* outp = &MemoryMarshal.GetReference(buffer))  			{  				if (BitConverter.IsLittleEndian)  				{  					byte* src = (byte*) inp;    					// Data1: 32 bits' must swap  					outp[0] = src[3];  					outp[1] = src[2];  					outp[2] = src[1];  					outp[3] = src[0];  					// Data2: 16 bits' must swap  					outp[4] = src[5];  					outp[5] = src[4];  					// Data3: 16 bits' must swap  					outp[6] = src[7];  					outp[7] = src[6];  					// Data4: 64 bits' no swap required  					*(long*) (outp + 8) = *(long*) (src + 8);  				}  				else  				{  					long* src = (long*) inp;  					*(long*) (outp) = src[0];  					*(long*) (outp + 8) = src[1];  				}  			}
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,WriteUnsafe,The following statement contains a magic number: fixed (byte* outp = &MemoryMarshal.GetReference(buffer))  			{  				if (BitConverter.IsLittleEndian)  				{  					byte* src = (byte*) inp;    					// Data1: 32 bits' must swap  					outp[0] = src[3];  					outp[1] = src[2];  					outp[2] = src[1];  					outp[3] = src[0];  					// Data2: 16 bits' must swap  					outp[4] = src[5];  					outp[5] = src[4];  					// Data3: 16 bits' must swap  					outp[6] = src[7];  					outp[7] = src[6];  					// Data4: 64 bits' no swap required  					*(long*) (outp + 8) = *(long*) (src + 8);  				}  				else  				{  					long* src = (long*) inp;  					*(long*) (outp) = src[0];  					*(long*) (outp + 8) = src[1];  				}  			}
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,WriteUnsafe,The following statement contains a magic number: fixed (byte* outp = &MemoryMarshal.GetReference(buffer))  			{  				if (BitConverter.IsLittleEndian)  				{  					byte* src = (byte*) inp;    					// Data1: 32 bits' must swap  					outp[0] = src[3];  					outp[1] = src[2];  					outp[2] = src[1];  					outp[3] = src[0];  					// Data2: 16 bits' must swap  					outp[4] = src[5];  					outp[5] = src[4];  					// Data3: 16 bits' must swap  					outp[6] = src[7];  					outp[7] = src[6];  					// Data4: 64 bits' no swap required  					*(long*) (outp + 8) = *(long*) (src + 8);  				}  				else  				{  					long* src = (long*) inp;  					*(long*) (outp) = src[0];  					*(long*) (outp + 8) = src[1];  				}  			}
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,WriteUnsafe,The following statement contains a magic number: fixed (byte* outp = &MemoryMarshal.GetReference(buffer))  			{  				if (BitConverter.IsLittleEndian)  				{  					byte* src = (byte*) inp;    					// Data1: 32 bits' must swap  					outp[0] = src[3];  					outp[1] = src[2];  					outp[2] = src[1];  					outp[3] = src[0];  					// Data2: 16 bits' must swap  					outp[4] = src[5];  					outp[5] = src[4];  					// Data3: 16 bits' must swap  					outp[6] = src[7];  					outp[7] = src[6];  					// Data4: 64 bits' no swap required  					*(long*) (outp + 8) = *(long*) (src + 8);  				}  				else  				{  					long* src = (long*) inp;  					*(long*) (outp) = src[0];  					*(long*) (outp + 8) = src[1];  				}  			}
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,WriteUnsafe,The following statement contains a magic number: fixed (byte* outp = &MemoryMarshal.GetReference(buffer))  			{  				if (BitConverter.IsLittleEndian)  				{  					byte* src = (byte*) inp;    					// Data1: 32 bits' must swap  					outp[0] = src[3];  					outp[1] = src[2];  					outp[2] = src[1];  					outp[3] = src[0];  					// Data2: 16 bits' must swap  					outp[4] = src[5];  					outp[5] = src[4];  					// Data3: 16 bits' must swap  					outp[6] = src[7];  					outp[7] = src[6];  					// Data4: 64 bits' no swap required  					*(long*) (outp + 8) = *(long*) (src + 8);  				}  				else  				{  					long* src = (long*) inp;  					*(long*) (outp) = src[0];  					*(long*) (outp + 8) = src[1];  				}  			}
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,WriteUnsafe,The following statement contains a magic number: fixed (byte* outp = &MemoryMarshal.GetReference(buffer))  			{  				if (BitConverter.IsLittleEndian)  				{  					byte* src = (byte*) inp;    					// Data1: 32 bits' must swap  					outp[0] = src[3];  					outp[1] = src[2];  					outp[2] = src[1];  					outp[3] = src[0];  					// Data2: 16 bits' must swap  					outp[4] = src[5];  					outp[5] = src[4];  					// Data3: 16 bits' must swap  					outp[6] = src[7];  					outp[7] = src[6];  					// Data4: 64 bits' no swap required  					*(long*) (outp + 8) = *(long*) (src + 8);  				}  				else  				{  					long* src = (long*) inp;  					*(long*) (outp) = src[0];  					*(long*) (outp + 8) = src[1];  				}  			}
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,WriteUnsafe,The following statement contains a magic number: fixed (byte* outp = &MemoryMarshal.GetReference(buffer))  			{  				if (BitConverter.IsLittleEndian)  				{  					byte* src = (byte*) inp;    					// Data1: 32 bits' must swap  					outp[0] = src[3];  					outp[1] = src[2];  					outp[2] = src[1];  					outp[3] = src[0];  					// Data2: 16 bits' must swap  					outp[4] = src[5];  					outp[5] = src[4];  					// Data3: 16 bits' must swap  					outp[6] = src[7];  					outp[7] = src[6];  					// Data4: 64 bits' no swap required  					*(long*) (outp + 8) = *(long*) (src + 8);  				}  				else  				{  					long* src = (long*) inp;  					*(long*) (outp) = src[0];  					*(long*) (outp + 8) = src[1];  				}  			}
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,WriteUnsafe,The following statement contains a magic number: fixed (byte* outp = &MemoryMarshal.GetReference(buffer))  			{  				if (BitConverter.IsLittleEndian)  				{  					byte* src = (byte*) inp;    					// Data1: 32 bits' must swap  					outp[0] = src[3];  					outp[1] = src[2];  					outp[2] = src[1];  					outp[3] = src[0];  					// Data2: 16 bits' must swap  					outp[4] = src[5];  					outp[5] = src[4];  					// Data3: 16 bits' must swap  					outp[6] = src[7];  					outp[7] = src[6];  					// Data4: 64 bits' no swap required  					*(long*) (outp + 8) = *(long*) (src + 8);  				}  				else  				{  					long* src = (long*) inp;  					*(long*) (outp) = src[0];  					*(long*) (outp + 8) = src[1];  				}  			}
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,WriteUnsafe,The following statement contains a magic number: fixed (byte* outp = &MemoryMarshal.GetReference(buffer))  			{  				if (BitConverter.IsLittleEndian)  				{  					byte* src = (byte*) inp;    					// Data1: 32 bits' must swap  					outp[0] = src[3];  					outp[1] = src[2];  					outp[2] = src[1];  					outp[3] = src[0];  					// Data2: 16 bits' must swap  					outp[4] = src[5];  					outp[5] = src[4];  					// Data3: 16 bits' must swap  					outp[6] = src[7];  					outp[7] = src[6];  					// Data4: 64 bits' no swap required  					*(long*) (outp + 8) = *(long*) (src + 8);  				}  				else  				{  					long* src = (long*) inp;  					*(long*) (outp) = src[0];  					*(long*) (outp + 8) = src[1];  				}  			}
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,WriteUnsafe,The following statement contains a magic number: fixed (byte* outp = &MemoryMarshal.GetReference(buffer))  			{  				if (BitConverter.IsLittleEndian)  				{  					byte* src = (byte*) inp;    					// Data1: 32 bits' must swap  					outp[0] = src[3];  					outp[1] = src[2];  					outp[2] = src[1];  					outp[3] = src[0];  					// Data2: 16 bits' must swap  					outp[4] = src[5];  					outp[5] = src[4];  					// Data3: 16 bits' must swap  					outp[6] = src[7];  					outp[7] = src[6];  					// Data4: 64 bits' no swap required  					*(long*) (outp + 8) = *(long*) (src + 8);  				}  				else  				{  					long* src = (long*) inp;  					*(long*) (outp) = src[0];  					*(long*) (outp + 8) = src[1];  				}  			}
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,WriteUnsafe,The following statement contains a magic number: fixed (byte* outp = &MemoryMarshal.GetReference(buffer))  			{  				if (BitConverter.IsLittleEndian)  				{  					byte* src = (byte*) inp;    					// Data1: 32 bits' must swap  					outp[0] = src[3];  					outp[1] = src[2];  					outp[2] = src[1];  					outp[3] = src[0];  					// Data2: 16 bits' must swap  					outp[4] = src[5];  					outp[5] = src[4];  					// Data3: 16 bits' must swap  					outp[6] = src[7];  					outp[7] = src[6];  					// Data4: 64 bits' no swap required  					*(long*) (outp + 8) = *(long*) (src + 8);  				}  				else  				{  					long* src = (long*) inp;  					*(long*) (outp) = src[0];  					*(long*) (outp + 8) = src[1];  				}  			}
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,WriteUnsafe,The following statement contains a magic number: fixed (byte* outp = &MemoryMarshal.GetReference(buffer))  			{  				if (BitConverter.IsLittleEndian)  				{  					byte* src = (byte*) inp;    					// Data1: 32 bits' must swap  					outp[0] = src[3];  					outp[1] = src[2];  					outp[2] = src[1];  					outp[3] = src[0];  					// Data2: 16 bits' must swap  					outp[4] = src[5];  					outp[5] = src[4];  					// Data3: 16 bits' must swap  					outp[6] = src[7];  					outp[7] = src[6];  					// Data4: 64 bits' no swap required  					*(long*) (outp + 8) = *(long*) (src + 8);  				}  				else  				{  					long* src = (long*) inp;  					*(long*) (outp) = src[0];  					*(long*) (outp + 8) = src[1];  				}  			}
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,Split,The following statement contains a magic number: low = Uuid64.ReadUnsafe(buffer.Slice(8));
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,Deconstruct,The following statement contains a magic number: b = UnsafeHelpers.LoadUInt64BE(buffer + 8);
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,Deconstruct,The following statement contains a magic number: b = UnsafeHelpers.LoadUInt32BE(buffer + 8);
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,Deconstruct,The following statement contains a magic number: c = UnsafeHelpers.LoadUInt32BE(buffer + 12);
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,Deconstruct,The following statement contains a magic number: b = UnsafeHelpers.LoadUInt32BE(buffer + 4);
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,Deconstruct,The following statement contains a magic number: c = UnsafeHelpers.LoadUInt32BE(buffer + 8);
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,Deconstruct,The following statement contains a magic number: d = UnsafeHelpers.LoadUInt32BE(buffer + 12);
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,Increment,The following statement contains a magic number: ulong sum = unchecked(UnsafeHelpers.LoadUInt64BE(buf + 8) + value);
Magic Number,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,Increment,The following statement contains a magic number: UnsafeHelpers.StoreUInt64BE(buf + 8' sum);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,Uuid64,The following statement contains a magic number: m_value = ((ulong) a << 32) | b;
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,Uuid64,The following statement contains a magic number: m_value = ((ulong) a << 48) | ((ulong) b & ((1UL << 48) - 1));
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,Uuid64,The following statement contains a magic number: m_value = ((ulong) a << 48) | ((ulong) b & ((1UL << 48) - 1));
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,Deconstruct,The following statement contains a magic number: a = (uint) (value >> 32);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,Deconstruct,The following statement contains a magic number: a = (ushort) (value >> 48);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,Deconstruct,The following statement contains a magic number: b = (ushort) (value >> 32);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,Deconstruct,The following statement contains a magic number: c = (ushort) (value >> 16);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,Read,The following statement contains a magic number: value.Length == 8
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,TryParse,The following statement contains a magic number: switch (s.Length)  			{  				case 0:  				{ // empty  					return true;  				}  				case 16:  				{ // xxxxxxxxxxxxxxxx  					return TryDecode16Unsafe(s' separator: false' out result);  				}  				case 17:  				{ // xxxxxxxx-xxxxxxxx  					if (s[8] != '-') return false;  					return TryDecode16Unsafe(s' separator: true' out result);  				}  				case 18:  				{ // {xxxxxxxxxxxxxxxx}  					if (s[0] != '{' || s[17] != '}')  					{  						return false;  					}  					return TryDecode16Unsafe(s.Slice(1' s.Length - 2)' separator: false' out result);  				}  				case 19:  				{ // {xxxxxxxx-xxxxxxxx}  					if (s[0] != '{' || s[18] != '}')  					{  						return false;  					}  					return TryDecode16Unsafe(s.Slice(1' s.Length - 2)' separator: true' out result);  				}  				default:  				{  					return false;  				}  			}
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,TryParse,The following statement contains a magic number: switch (s.Length)  			{  				case 0:  				{ // empty  					return true;  				}  				case 16:  				{ // xxxxxxxxxxxxxxxx  					return TryDecode16Unsafe(s' separator: false' out result);  				}  				case 17:  				{ // xxxxxxxx-xxxxxxxx  					if (s[8] != '-') return false;  					return TryDecode16Unsafe(s' separator: true' out result);  				}  				case 18:  				{ // {xxxxxxxxxxxxxxxx}  					if (s[0] != '{' || s[17] != '}')  					{  						return false;  					}  					return TryDecode16Unsafe(s.Slice(1' s.Length - 2)' separator: false' out result);  				}  				case 19:  				{ // {xxxxxxxx-xxxxxxxx}  					if (s[0] != '{' || s[18] != '}')  					{  						return false;  					}  					return TryDecode16Unsafe(s.Slice(1' s.Length - 2)' separator: true' out result);  				}  				default:  				{  					return false;  				}  			}
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,TryParse,The following statement contains a magic number: switch (s.Length)  			{  				case 0:  				{ // empty  					return true;  				}  				case 16:  				{ // xxxxxxxxxxxxxxxx  					return TryDecode16Unsafe(s' separator: false' out result);  				}  				case 17:  				{ // xxxxxxxx-xxxxxxxx  					if (s[8] != '-') return false;  					return TryDecode16Unsafe(s' separator: true' out result);  				}  				case 18:  				{ // {xxxxxxxxxxxxxxxx}  					if (s[0] != '{' || s[17] != '}')  					{  						return false;  					}  					return TryDecode16Unsafe(s.Slice(1' s.Length - 2)' separator: false' out result);  				}  				case 19:  				{ // {xxxxxxxx-xxxxxxxx}  					if (s[0] != '{' || s[18] != '}')  					{  						return false;  					}  					return TryDecode16Unsafe(s.Slice(1' s.Length - 2)' separator: true' out result);  				}  				default:  				{  					return false;  				}  			}
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,TryParse,The following statement contains a magic number: switch (s.Length)  			{  				case 0:  				{ // empty  					return true;  				}  				case 16:  				{ // xxxxxxxxxxxxxxxx  					return TryDecode16Unsafe(s' separator: false' out result);  				}  				case 17:  				{ // xxxxxxxx-xxxxxxxx  					if (s[8] != '-') return false;  					return TryDecode16Unsafe(s' separator: true' out result);  				}  				case 18:  				{ // {xxxxxxxxxxxxxxxx}  					if (s[0] != '{' || s[17] != '}')  					{  						return false;  					}  					return TryDecode16Unsafe(s.Slice(1' s.Length - 2)' separator: false' out result);  				}  				case 19:  				{ // {xxxxxxxx-xxxxxxxx}  					if (s[0] != '{' || s[18] != '}')  					{  						return false;  					}  					return TryDecode16Unsafe(s.Slice(1' s.Length - 2)' separator: true' out result);  				}  				default:  				{  					return false;  				}  			}
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,TryParse,The following statement contains a magic number: switch (s.Length)  			{  				case 0:  				{ // empty  					return true;  				}  				case 16:  				{ // xxxxxxxxxxxxxxxx  					return TryDecode16Unsafe(s' separator: false' out result);  				}  				case 17:  				{ // xxxxxxxx-xxxxxxxx  					if (s[8] != '-') return false;  					return TryDecode16Unsafe(s' separator: true' out result);  				}  				case 18:  				{ // {xxxxxxxxxxxxxxxx}  					if (s[0] != '{' || s[17] != '}')  					{  						return false;  					}  					return TryDecode16Unsafe(s.Slice(1' s.Length - 2)' separator: false' out result);  				}  				case 19:  				{ // {xxxxxxxx-xxxxxxxx}  					if (s[0] != '{' || s[18] != '}')  					{  						return false;  					}  					return TryDecode16Unsafe(s.Slice(1' s.Length - 2)' separator: true' out result);  				}  				default:  				{  					return false;  				}  			}
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,TryParse,The following statement contains a magic number: switch (s.Length)  			{  				case 0:  				{ // empty  					return true;  				}  				case 16:  				{ // xxxxxxxxxxxxxxxx  					return TryDecode16Unsafe(s' separator: false' out result);  				}  				case 17:  				{ // xxxxxxxx-xxxxxxxx  					if (s[8] != '-') return false;  					return TryDecode16Unsafe(s' separator: true' out result);  				}  				case 18:  				{ // {xxxxxxxxxxxxxxxx}  					if (s[0] != '{' || s[17] != '}')  					{  						return false;  					}  					return TryDecode16Unsafe(s.Slice(1' s.Length - 2)' separator: false' out result);  				}  				case 19:  				{ // {xxxxxxxx-xxxxxxxx}  					if (s[0] != '{' || s[18] != '}')  					{  						return false;  					}  					return TryDecode16Unsafe(s.Slice(1' s.Length - 2)' separator: true' out result);  				}  				default:  				{  					return false;  				}  			}
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,TryParse,The following statement contains a magic number: switch (s.Length)  			{  				case 0:  				{ // empty  					return true;  				}  				case 16:  				{ // xxxxxxxxxxxxxxxx  					return TryDecode16Unsafe(s' separator: false' out result);  				}  				case 17:  				{ // xxxxxxxx-xxxxxxxx  					if (s[8] != '-') return false;  					return TryDecode16Unsafe(s' separator: true' out result);  				}  				case 18:  				{ // {xxxxxxxxxxxxxxxx}  					if (s[0] != '{' || s[17] != '}')  					{  						return false;  					}  					return TryDecode16Unsafe(s.Slice(1' s.Length - 2)' separator: false' out result);  				}  				case 19:  				{ // {xxxxxxxx-xxxxxxxx}  					if (s[0] != '{' || s[18] != '}')  					{  						return false;  					}  					return TryDecode16Unsafe(s.Slice(1' s.Length - 2)' separator: true' out result);  				}  				default:  				{  					return false;  				}  			}
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,TryParse,The following statement contains a magic number: switch (s.Length)  			{  				case 0:  				{ // empty  					return true;  				}  				case 16:  				{ // xxxxxxxxxxxxxxxx  					return TryDecode16Unsafe(s' separator: false' out result);  				}  				case 17:  				{ // xxxxxxxx-xxxxxxxx  					if (s[8] != '-') return false;  					return TryDecode16Unsafe(s' separator: true' out result);  				}  				case 18:  				{ // {xxxxxxxxxxxxxxxx}  					if (s[0] != '{' || s[17] != '}')  					{  						return false;  					}  					return TryDecode16Unsafe(s.Slice(1' s.Length - 2)' separator: false' out result);  				}  				case 19:  				{ // {xxxxxxxx-xxxxxxxx}  					if (s[0] != '{' || s[18] != '}')  					{  						return false;  					}  					return TryDecode16Unsafe(s.Slice(1' s.Length - 2)' separator: true' out result);  				}  				default:  				{  					return false;  				}  			}
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,TryParse,The following statement contains a magic number: switch (s.Length)  			{  				case 0:  				{ // empty  					return true;  				}  				case 16:  				{ // xxxxxxxxxxxxxxxx  					return TryDecode16Unsafe(s' separator: false' out result);  				}  				case 17:  				{ // xxxxxxxx-xxxxxxxx  					if (s[8] != '-') return false;  					return TryDecode16Unsafe(s' separator: true' out result);  				}  				case 18:  				{ // {xxxxxxxxxxxxxxxx}  					if (s[0] != '{' || s[17] != '}')  					{  						return false;  					}  					return TryDecode16Unsafe(s.Slice(1' s.Length - 2)' separator: false' out result);  				}  				case 19:  				{ // {xxxxxxxx-xxxxxxxx}  					if (s[0] != '{' || s[18] != '}')  					{  						return false;  					}  					return TryDecode16Unsafe(s.Slice(1' s.Length - 2)' separator: true' out result);  				}  				default:  				{  					return false;  				}  			}
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,TryParseBase62,The following statement contains a magic number: s.Length <= 11 && Base62.TryDecode(s' out ulong x)
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,ToByteArray,The following statement contains a magic number: Contract.Ensures(bytes != null && bytes.Length == 8);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,GetHashCode,The following statement contains a magic number: return ((int) m_value) ^ (int) (m_value >> 32);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,HexToLowerChar,The following statement contains a magic number: return a > 9 ? (char)(a - 10 + 'a') : (char)(a + '0');
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,HexToLowerChar,The following statement contains a magic number: return a > 9 ? (char)(a - 10 + 'a') : (char)(a + '0');
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,HexsToLowerChars,The following statement contains a magic number: ptr[0] = HexToLowerChar(a >> 28);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,HexsToLowerChars,The following statement contains a magic number: ptr[1] = HexToLowerChar(a >> 24);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,HexsToLowerChars,The following statement contains a magic number: ptr[2] = HexToLowerChar(a >> 20);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,HexsToLowerChars,The following statement contains a magic number: ptr[2] = HexToLowerChar(a >> 20);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,HexsToLowerChars,The following statement contains a magic number: ptr[3] = HexToLowerChar(a >> 16);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,HexsToLowerChars,The following statement contains a magic number: ptr[3] = HexToLowerChar(a >> 16);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,HexsToLowerChars,The following statement contains a magic number: ptr[4] = HexToLowerChar(a >> 12);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,HexsToLowerChars,The following statement contains a magic number: ptr[4] = HexToLowerChar(a >> 12);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,HexsToLowerChars,The following statement contains a magic number: ptr[5] = HexToLowerChar(a >> 8);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,HexsToLowerChars,The following statement contains a magic number: ptr[5] = HexToLowerChar(a >> 8);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,HexsToLowerChars,The following statement contains a magic number: ptr[6] = HexToLowerChar(a >> 4);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,HexsToLowerChars,The following statement contains a magic number: ptr[6] = HexToLowerChar(a >> 4);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,HexsToLowerChars,The following statement contains a magic number: ptr[7] = HexToLowerChar(a);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,HexsToLowerChars,The following statement contains a magic number: return ptr + 8;
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,HexToUpperChar,The following statement contains a magic number: return a > 9 ? (char)(a - 10 + 'A') : (char)(a + '0');
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,HexToUpperChar,The following statement contains a magic number: return a > 9 ? (char)(a - 10 + 'A') : (char)(a + '0');
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,HexsToUpperChars,The following statement contains a magic number: ptr[0] = HexToUpperChar(a >> 28);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,HexsToUpperChars,The following statement contains a magic number: ptr[1] = HexToUpperChar(a >> 24);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,HexsToUpperChars,The following statement contains a magic number: ptr[2] = HexToUpperChar(a >> 20);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,HexsToUpperChars,The following statement contains a magic number: ptr[2] = HexToUpperChar(a >> 20);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,HexsToUpperChars,The following statement contains a magic number: ptr[3] = HexToUpperChar(a >> 16);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,HexsToUpperChars,The following statement contains a magic number: ptr[3] = HexToUpperChar(a >> 16);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,HexsToUpperChars,The following statement contains a magic number: ptr[4] = HexToUpperChar(a >> 12);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,HexsToUpperChars,The following statement contains a magic number: ptr[4] = HexToUpperChar(a >> 12);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,HexsToUpperChars,The following statement contains a magic number: ptr[5] = HexToUpperChar(a >> 8);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,HexsToUpperChars,The following statement contains a magic number: ptr[5] = HexToUpperChar(a >> 8);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,HexsToUpperChars,The following statement contains a magic number: ptr[6] = HexToUpperChar(a >> 4);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,HexsToUpperChars,The following statement contains a magic number: ptr[6] = HexToUpperChar(a >> 4);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,HexsToUpperChars,The following statement contains a magic number: ptr[7] = HexToUpperChar(a);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,HexsToUpperChars,The following statement contains a magic number: return ptr + 8;
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,Encode16,The following statement contains a magic number: int size = 16 + (separator ? 1 : 0) + (quotes ? 2 : 0);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,Encode16,The following statement contains a magic number: int size = 16 + (separator ? 1 : 0) + (quotes ? 2 : 0);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,Encode16,The following statement contains a magic number: char* buffer = stackalloc char[24];
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,Encode16,The following statement contains a magic number: ptr = upper  				? HexsToUpperChars(ptr' (int)(value >> 32))  				: HexsToLowerChars(ptr' (int)(value >> 32));
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,Encode16,The following statement contains a magic number: ptr = upper  				? HexsToUpperChars(ptr' (int)(value >> 32))  				: HexsToLowerChars(ptr' (int)(value >> 32));
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,CharToHex,The following statement contains a magic number: return c >= '0' ? (c - 48) : INVALID_CHAR;
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,CharToHex,The following statement contains a magic number: return c >= 'A' ? (c - 55) : INVALID_CHAR;
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,CharToHex,The following statement contains a magic number: return c >= 'a' ? (c - 87) : INVALID_CHAR;
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,TryCharsToHexsUnsafe,The following statement contains a magic number: word = (word << 4) | a;
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,TryCharsToHexsUnsafe,The following statement contains a magic number: i < 8
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,TryDecode16Unsafe,The following statement contains a magic number: result = new Uuid64(((ulong)hi << 32) | lo);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,TryDecode16Unsafe,The following statement contains a magic number: (!separator || chars[8] == '-')  			 && TryCharsToHexsUnsafe(chars' out uint hi)  			 && TryCharsToHexsUnsafe(chars.Slice(separator ? 9 : 8)' out uint lo)
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,TryDecode16Unsafe,The following statement contains a magic number: (!separator || chars[8] == '-')  			 && TryCharsToHexsUnsafe(chars' out uint hi)  			 && TryCharsToHexsUnsafe(chars.Slice(separator ? 9 : 8)' out uint lo)
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,TryDecode16Unsafe,The following statement contains a magic number: (!separator || chars[8] == '-')  			 && TryCharsToHexsUnsafe(chars' out uint hi)  			 && TryCharsToHexsUnsafe(chars.Slice(separator ? 9 : 8)' out uint lo)
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,ReadUnsafe,The following statement contains a magic number: Contract.Requires(src.Length >= 8);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,WriteUnsafe,The following statement contains a magic number: Contract.Requires(buffer.Length >= 8);
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,WriteTo,The following statement contains a magic number: destination.Length < 8
Magic Number,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,TryWriteTo,The following statement contains a magic number: destination.Length < 8
Magic Number,System,Base62,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,Encode,The following statement contains a magic number: const int MAX_SIZE = 11;
Magic Number,System,Base62,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,Encode,The following statement contains a magic number: char* chars = stackalloc char[16];
Magic Number,System,Base62,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,Encode,The following statement contains a magic number: ulong r = value % 62L;
Magic Number,System,Base62,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,Encode,The following statement contains a magic number: value /= 62L;
Magic Number,System,Base62,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,Encode,The following statement contains a magic number: Contract.Assert(count > 0 && count <= 11);
Magic Number,System,Base62,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,TryDecode,The following statement contains a magic number: s == null || s.Length == 0 || s.Length > 11
Magic Number,System,Base62,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,TryDecode,The following statement contains a magic number: a = a >= 32 && a < 128 ? bv[a - 32] : -1;
Magic Number,System,Base62,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,TryDecode,The following statement contains a magic number: a = a >= 32 && a < 128 ? bv[a - 32] : -1;
Magic Number,System,Base62,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,TryDecode,The following statement contains a magic number: a = a >= 32 && a < 128 ? bv[a - 32] : -1;
Magic Number,System,Base62,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,TryDecode,The following statement contains a magic number: factor *= 62;
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Uuid80,The following statement contains a magic number: this.Lo = ((ulong) b) << 32 | c;
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Uuid80,The following statement contains a magic number: this.Lo = ((ulong) (uint) b) << 32 | (uint) c;
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Uuid80,The following statement contains a magic number: this.Lo = ((ulong) b) << 48 | ((ulong) c) << 32 | ((ulong) d) << 16 | ((ulong) e);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Uuid80,The following statement contains a magic number: this.Lo = ((ulong) b) << 48 | ((ulong) c) << 32 | ((ulong) d) << 16 | ((ulong) e);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Uuid80,The following statement contains a magic number: this.Lo = ((ulong) b) << 48 | ((ulong) c) << 32 | ((ulong) d) << 16 | ((ulong) e);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,NewUuid,The following statement contains a magic number: return new Uuid80((ushort) (p[0] ^ p[5])' (ushort) (p[1] ^ p[6])' (ushort) (p[2] ^ p[7])' p[3]' p[4]);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,NewUuid,The following statement contains a magic number: return new Uuid80((ushort) (p[0] ^ p[5])' (ushort) (p[1] ^ p[6])' (ushort) (p[2] ^ p[7])' p[3]' p[4]);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,NewUuid,The following statement contains a magic number: return new Uuid80((ushort) (p[0] ^ p[5])' (ushort) (p[1] ^ p[6])' (ushort) (p[2] ^ p[7])' p[3]' p[4]);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,NewUuid,The following statement contains a magic number: return new Uuid80((ushort) (p[0] ^ p[5])' (ushort) (p[1] ^ p[6])' (ushort) (p[2] ^ p[7])' p[3]' p[4]);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,NewUuid,The following statement contains a magic number: return new Uuid80((ushort) (p[0] ^ p[5])' (ushort) (p[1] ^ p[6])' (ushort) (p[2] ^ p[7])' p[3]' p[4]);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,NewUuid,The following statement contains a magic number: return new Uuid80((ushort) (p[0] ^ p[5])' (ushort) (p[1] ^ p[6])' (ushort) (p[2] ^ p[7])' p[3]' p[4]);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Deconstruct,The following statement contains a magic number: b = (uint) this.Lo >> 32;
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,TryParse,The following statement contains a magic number: s = s.Slice(1' s.Length - 2);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,TryParse,The following statement contains a magic number: s.Length > 2 && s[0] == '{' && s[s.Length - 1] == '}'
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,TryParse,The following statement contains a magic number: switch (s.Length)  			{  				case 0:  				{ // empty  					return true;  				}  				case 20:  				{ // xxxxxxxxxxxxxxxxxxxx  					return TryDecode16Unsafe(s' separator: false' out result);  				}  				case 22:  				{ // xxxx-xxxxxxxx-xxxxxxxx  					if (s[4] != '-' || s[13] != '-') return false;  					return TryDecode16Unsafe(s' separator: true' out result);  				}  				default:  				{  					return false;  				}  			}
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,TryParse,The following statement contains a magic number: switch (s.Length)  			{  				case 0:  				{ // empty  					return true;  				}  				case 20:  				{ // xxxxxxxxxxxxxxxxxxxx  					return TryDecode16Unsafe(s' separator: false' out result);  				}  				case 22:  				{ // xxxx-xxxxxxxx-xxxxxxxx  					if (s[4] != '-' || s[13] != '-') return false;  					return TryDecode16Unsafe(s' separator: true' out result);  				}  				default:  				{  					return false;  				}  			}
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,TryParse,The following statement contains a magic number: switch (s.Length)  			{  				case 0:  				{ // empty  					return true;  				}  				case 20:  				{ // xxxxxxxxxxxxxxxxxxxx  					return TryDecode16Unsafe(s' separator: false' out result);  				}  				case 22:  				{ // xxxx-xxxxxxxx-xxxxxxxx  					if (s[4] != '-' || s[13] != '-') return false;  					return TryDecode16Unsafe(s' separator: true' out result);  				}  				default:  				{  					return false;  				}  			}
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,TryParse,The following statement contains a magic number: switch (s.Length)  			{  				case 0:  				{ // empty  					return true;  				}  				case 20:  				{ // xxxxxxxxxxxxxxxxxxxx  					return TryDecode16Unsafe(s' separator: false' out result);  				}  				case 22:  				{ // xxxx-xxxxxxxx-xxxxxxxx  					if (s[4] != '-' || s[13] != '-') return false;  					return TryDecode16Unsafe(s' separator: true' out result);  				}  				default:  				{  					return false;  				}  			}
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,ToByteArray,The following statement contains a magic number: UnsafeHelpers.StoreUInt64BE(ptr + 2' this.Lo);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,HexToLowerChar,The following statement contains a magic number: return a > 9 ? (char)(a - 10 + 'a') : (char)(a + '0');
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,HexToLowerChar,The following statement contains a magic number: return a > 9 ? (char)(a - 10 + 'a') : (char)(a + '0');
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,HexsToLowerChars,The following statement contains a magic number: ptr[0] = HexToLowerChar((uint) a >> 12);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,HexsToLowerChars,The following statement contains a magic number: ptr[1] = HexToLowerChar((uint) a >> 8);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,HexsToLowerChars,The following statement contains a magic number: ptr[2] = HexToLowerChar((uint) a >> 4);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,HexsToLowerChars,The following statement contains a magic number: ptr[2] = HexToLowerChar((uint) a >> 4);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,HexsToLowerChars,The following statement contains a magic number: ptr[3] = HexToLowerChar((uint) a);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,HexsToLowerChars,The following statement contains a magic number: return ptr + 4;
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,HexsToLowerChars,The following statement contains a magic number: ptr[0] = HexToLowerChar(a >> 28);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,HexsToLowerChars,The following statement contains a magic number: ptr[1] = HexToLowerChar(a >> 24);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,HexsToLowerChars,The following statement contains a magic number: ptr[2] = HexToLowerChar(a >> 20);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,HexsToLowerChars,The following statement contains a magic number: ptr[2] = HexToLowerChar(a >> 20);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,HexsToLowerChars,The following statement contains a magic number: ptr[3] = HexToLowerChar(a >> 16);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,HexsToLowerChars,The following statement contains a magic number: ptr[3] = HexToLowerChar(a >> 16);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,HexsToLowerChars,The following statement contains a magic number: ptr[4] = HexToLowerChar(a >> 12);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,HexsToLowerChars,The following statement contains a magic number: ptr[4] = HexToLowerChar(a >> 12);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,HexsToLowerChars,The following statement contains a magic number: ptr[5] = HexToLowerChar(a >> 8);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,HexsToLowerChars,The following statement contains a magic number: ptr[5] = HexToLowerChar(a >> 8);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,HexsToLowerChars,The following statement contains a magic number: ptr[6] = HexToLowerChar(a >> 4);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,HexsToLowerChars,The following statement contains a magic number: ptr[6] = HexToLowerChar(a >> 4);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,HexsToLowerChars,The following statement contains a magic number: ptr[7] = HexToLowerChar(a);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,HexsToLowerChars,The following statement contains a magic number: return ptr + 8;
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,HexToUpperChar,The following statement contains a magic number: return a > 9 ? (char)(a - 10 + 'A') : (char)(a + '0');
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,HexToUpperChar,The following statement contains a magic number: return a > 9 ? (char)(a - 10 + 'A') : (char)(a + '0');
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Hex16ToUpperChars,The following statement contains a magic number: ptr[0] = HexToUpperChar((uint) a >> 12);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Hex16ToUpperChars,The following statement contains a magic number: ptr[1] = HexToUpperChar((uint) a >> 8);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Hex16ToUpperChars,The following statement contains a magic number: ptr[2] = HexToUpperChar((uint) a >> 4);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Hex16ToUpperChars,The following statement contains a magic number: ptr[2] = HexToUpperChar((uint) a >> 4);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Hex16ToUpperChars,The following statement contains a magic number: ptr[3] = HexToUpperChar((uint) a);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Hex16ToUpperChars,The following statement contains a magic number: return ptr + 4;
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Hex32ToUpperChars,The following statement contains a magic number: ptr[0] = HexToUpperChar(a >> 28);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Hex32ToUpperChars,The following statement contains a magic number: ptr[1] = HexToUpperChar(a >> 24);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Hex32ToUpperChars,The following statement contains a magic number: ptr[2] = HexToUpperChar(a >> 20);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Hex32ToUpperChars,The following statement contains a magic number: ptr[2] = HexToUpperChar(a >> 20);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Hex32ToUpperChars,The following statement contains a magic number: ptr[3] = HexToUpperChar(a >> 16);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Hex32ToUpperChars,The following statement contains a magic number: ptr[3] = HexToUpperChar(a >> 16);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Hex32ToUpperChars,The following statement contains a magic number: ptr[4] = HexToUpperChar(a >> 12);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Hex32ToUpperChars,The following statement contains a magic number: ptr[4] = HexToUpperChar(a >> 12);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Hex32ToUpperChars,The following statement contains a magic number: ptr[5] = HexToUpperChar(a >> 8);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Hex32ToUpperChars,The following statement contains a magic number: ptr[5] = HexToUpperChar(a >> 8);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Hex32ToUpperChars,The following statement contains a magic number: ptr[6] = HexToUpperChar(a >> 4);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Hex32ToUpperChars,The following statement contains a magic number: ptr[6] = HexToUpperChar(a >> 4);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Hex32ToUpperChars,The following statement contains a magic number: ptr[7] = HexToUpperChar(a);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Hex32ToUpperChars,The following statement contains a magic number: return ptr + 8;
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Encode16,The following statement contains a magic number: int size = 20 + (separator ? 2 : 0) + (quotes ? 2 : 0);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Encode16,The following statement contains a magic number: int size = 20 + (separator ? 2 : 0) + (quotes ? 2 : 0);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Encode16,The following statement contains a magic number: int size = 20 + (separator ? 2 : 0) + (quotes ? 2 : 0);
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Encode16,The following statement contains a magic number: char* buffer = stackalloc char[24];
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Encode16,The following statement contains a magic number: ptr = upper  				? Hex32ToUpperChars(ptr' (uint) (lo >> 32))  				: HexsToLowerChars(ptr' (uint) (lo >> 32));
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Encode16,The following statement contains a magic number: ptr = upper  				? Hex32ToUpperChars(ptr' (uint) (lo >> 32))  				: HexsToLowerChars(ptr' (uint) (lo >> 32));
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,CharToHex,The following statement contains a magic number: return c >= '0' ? (c - 48) : INVALID_CHAR;
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,CharToHex,The following statement contains a magic number: return c >= 'A' ? (c - 55) : INVALID_CHAR;
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,CharToHex,The following statement contains a magic number: return c >= 'a' ? (c - 87) : INVALID_CHAR;
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,TryCharsToHex16,The following statement contains a magic number: word = (word << 4) | a;
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,TryCharsToHex16,The following statement contains a magic number: i < 4
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,TryCharsToHex32,The following statement contains a magic number: word = (word << 4) | a;
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,TryCharsToHex32,The following statement contains a magic number: i < 8
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,TryDecode16Unsafe,The following statement contains a magic number: (!separator || (chars[4] == '-' && chars[13] == '-'))  			 && TryCharsToHex16(chars' out ushort hi)  			 && TryCharsToHex32(chars.Slice(separator ? 5 : 4)' out uint med)  			 && TryCharsToHex32(chars.Slice(separator ? 14 : 12)' out uint lo)
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,TryDecode16Unsafe,The following statement contains a magic number: (!separator || (chars[4] == '-' && chars[13] == '-'))  			 && TryCharsToHex16(chars' out ushort hi)  			 && TryCharsToHex32(chars.Slice(separator ? 5 : 4)' out uint med)  			 && TryCharsToHex32(chars.Slice(separator ? 14 : 12)' out uint lo)
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,TryDecode16Unsafe,The following statement contains a magic number: (!separator || (chars[4] == '-' && chars[13] == '-'))  			 && TryCharsToHex16(chars' out ushort hi)  			 && TryCharsToHex32(chars.Slice(separator ? 5 : 4)' out uint med)  			 && TryCharsToHex32(chars.Slice(separator ? 14 : 12)' out uint lo)
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,TryDecode16Unsafe,The following statement contains a magic number: (!separator || (chars[4] == '-' && chars[13] == '-'))  			 && TryCharsToHex16(chars' out ushort hi)  			 && TryCharsToHex32(chars.Slice(separator ? 5 : 4)' out uint med)  			 && TryCharsToHex32(chars.Slice(separator ? 14 : 12)' out uint lo)
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,TryDecode16Unsafe,The following statement contains a magic number: (!separator || (chars[4] == '-' && chars[13] == '-'))  			 && TryCharsToHex16(chars' out ushort hi)  			 && TryCharsToHex32(chars.Slice(separator ? 5 : 4)' out uint med)  			 && TryCharsToHex32(chars.Slice(separator ? 14 : 12)' out uint lo)
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,TryDecode16Unsafe,The following statement contains a magic number: (!separator || (chars[4] == '-' && chars[13] == '-'))  			 && TryCharsToHex16(chars' out ushort hi)  			 && TryCharsToHex32(chars.Slice(separator ? 5 : 4)' out uint med)  			 && TryCharsToHex32(chars.Slice(separator ? 14 : 12)' out uint lo)
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,ReadUnsafe,The following statement contains a magic number: result = new Uuid80(UnsafeHelpers.LoadUInt16BE(ptr)' UnsafeHelpers.LoadUInt64BE(ptr + 2));
Magic Number,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,WriteUnsafe,The following statement contains a magic number: UnsafeHelpers.StoreUInt64BE(ptr + 2' lo);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Uuid96,The following statement contains a magic number: this.Lo = ((ulong) b) << 32 | c;
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Uuid96,The following statement contains a magic number: this.Lo = ((ulong) (uint) b) << 32 | (uint) c;
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,NewUuid,The following statement contains a magic number: return new Uuid96(p[0]' p[1] ^ p[3]' p[2]);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,NewUuid,The following statement contains a magic number: return new Uuid96(p[0]' p[1] ^ p[3]' p[2]);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Deconstruct,The following statement contains a magic number: b = (uint) this.Lo >> 32;
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,TryParse,The following statement contains a magic number: s = s.Slice(1' s.Length - 2);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,TryParse,The following statement contains a magic number: s.Length > 2 && s[0] == '{' && s[s.Length - 1] == '}'
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,TryParse,The following statement contains a magic number: switch (s.Length)  			{  				case 0:  				{ // empty  					return true;  				}  				case 24:  				{ // xxxxxxxxxxxxxxxxxxxxxxxx  					return TryDecode16Unsafe(s' separator: false' out result);  				}  				case 26:  				{ // xxxxxxxx-xxxxxxxx-xxxxxxxx  					if (s[8] != '-' || s[17] != '-') return false;  					return TryDecode16Unsafe(s' separator: true' out result);  				}  				default:  				{  					return false;  				}  			}
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,TryParse,The following statement contains a magic number: switch (s.Length)  			{  				case 0:  				{ // empty  					return true;  				}  				case 24:  				{ // xxxxxxxxxxxxxxxxxxxxxxxx  					return TryDecode16Unsafe(s' separator: false' out result);  				}  				case 26:  				{ // xxxxxxxx-xxxxxxxx-xxxxxxxx  					if (s[8] != '-' || s[17] != '-') return false;  					return TryDecode16Unsafe(s' separator: true' out result);  				}  				default:  				{  					return false;  				}  			}
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,TryParse,The following statement contains a magic number: switch (s.Length)  			{  				case 0:  				{ // empty  					return true;  				}  				case 24:  				{ // xxxxxxxxxxxxxxxxxxxxxxxx  					return TryDecode16Unsafe(s' separator: false' out result);  				}  				case 26:  				{ // xxxxxxxx-xxxxxxxx-xxxxxxxx  					if (s[8] != '-' || s[17] != '-') return false;  					return TryDecode16Unsafe(s' separator: true' out result);  				}  				default:  				{  					return false;  				}  			}
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,TryParse,The following statement contains a magic number: switch (s.Length)  			{  				case 0:  				{ // empty  					return true;  				}  				case 24:  				{ // xxxxxxxxxxxxxxxxxxxxxxxx  					return TryDecode16Unsafe(s' separator: false' out result);  				}  				case 26:  				{ // xxxxxxxx-xxxxxxxx-xxxxxxxx  					if (s[8] != '-' || s[17] != '-') return false;  					return TryDecode16Unsafe(s' separator: true' out result);  				}  				default:  				{  					return false;  				}  			}
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,ToByteArray,The following statement contains a magic number: UnsafeHelpers.StoreUInt64BE(ptr + 4' this.Lo);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,HexToLowerChar,The following statement contains a magic number: return a > 9 ? (char)(a - 10 + 'a') : (char)(a + '0');
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,HexToLowerChar,The following statement contains a magic number: return a > 9 ? (char)(a - 10 + 'a') : (char)(a + '0');
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Hex32ToLowerChars,The following statement contains a magic number: ptr[0] = HexToLowerChar(a >> 28);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Hex32ToLowerChars,The following statement contains a magic number: ptr[1] = HexToLowerChar(a >> 24);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Hex32ToLowerChars,The following statement contains a magic number: ptr[2] = HexToLowerChar(a >> 20);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Hex32ToLowerChars,The following statement contains a magic number: ptr[2] = HexToLowerChar(a >> 20);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Hex32ToLowerChars,The following statement contains a magic number: ptr[3] = HexToLowerChar(a >> 16);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Hex32ToLowerChars,The following statement contains a magic number: ptr[3] = HexToLowerChar(a >> 16);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Hex32ToLowerChars,The following statement contains a magic number: ptr[4] = HexToLowerChar(a >> 12);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Hex32ToLowerChars,The following statement contains a magic number: ptr[4] = HexToLowerChar(a >> 12);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Hex32ToLowerChars,The following statement contains a magic number: ptr[5] = HexToLowerChar(a >> 8);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Hex32ToLowerChars,The following statement contains a magic number: ptr[5] = HexToLowerChar(a >> 8);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Hex32ToLowerChars,The following statement contains a magic number: ptr[6] = HexToLowerChar(a >> 4);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Hex32ToLowerChars,The following statement contains a magic number: ptr[6] = HexToLowerChar(a >> 4);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Hex32ToLowerChars,The following statement contains a magic number: ptr[7] = HexToLowerChar(a);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Hex32ToLowerChars,The following statement contains a magic number: return ptr + 8;
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,HexToUpperChar,The following statement contains a magic number: return a > 9 ? (char)(a - 10 + 'A') : (char)(a + '0');
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,HexToUpperChar,The following statement contains a magic number: return a > 9 ? (char)(a - 10 + 'A') : (char)(a + '0');
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Hex32ToUpperChars,The following statement contains a magic number: ptr[0] = HexToUpperChar(a >> 28);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Hex32ToUpperChars,The following statement contains a magic number: ptr[1] = HexToUpperChar(a >> 24);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Hex32ToUpperChars,The following statement contains a magic number: ptr[2] = HexToUpperChar(a >> 20);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Hex32ToUpperChars,The following statement contains a magic number: ptr[2] = HexToUpperChar(a >> 20);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Hex32ToUpperChars,The following statement contains a magic number: ptr[3] = HexToUpperChar(a >> 16);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Hex32ToUpperChars,The following statement contains a magic number: ptr[3] = HexToUpperChar(a >> 16);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Hex32ToUpperChars,The following statement contains a magic number: ptr[4] = HexToUpperChar(a >> 12);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Hex32ToUpperChars,The following statement contains a magic number: ptr[4] = HexToUpperChar(a >> 12);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Hex32ToUpperChars,The following statement contains a magic number: ptr[5] = HexToUpperChar(a >> 8);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Hex32ToUpperChars,The following statement contains a magic number: ptr[5] = HexToUpperChar(a >> 8);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Hex32ToUpperChars,The following statement contains a magic number: ptr[6] = HexToUpperChar(a >> 4);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Hex32ToUpperChars,The following statement contains a magic number: ptr[6] = HexToUpperChar(a >> 4);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Hex32ToUpperChars,The following statement contains a magic number: ptr[7] = HexToUpperChar(a);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Hex32ToUpperChars,The following statement contains a magic number: return ptr + 8;
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Encode16,The following statement contains a magic number: int size = SizeOf * 2 + (separator ? 2 : 0) + (quotes ? 2 : 0);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Encode16,The following statement contains a magic number: int size = SizeOf * 2 + (separator ? 2 : 0) + (quotes ? 2 : 0);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Encode16,The following statement contains a magic number: int size = SizeOf * 2 + (separator ? 2 : 0) + (quotes ? 2 : 0);
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Encode16,The following statement contains a magic number: char* buffer = stackalloc char[32];
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Encode16,The following statement contains a magic number: ptr = Hex32ToUpperChars(ptr' (uint) (lo >> 32));
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,CharToHex,The following statement contains a magic number: return c >= '0' ? (c - 48) : INVALID_CHAR;
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,CharToHex,The following statement contains a magic number: return c >= 'A' ? (c - 55) : INVALID_CHAR;
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,CharToHex,The following statement contains a magic number: return c >= 'a' ? (c - 87) : INVALID_CHAR;
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,TryCharsToHex32,The following statement contains a magic number: word = (word << 4) | a;
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,TryCharsToHex32,The following statement contains a magic number: i < 8
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,TryDecode16Unsafe,The following statement contains a magic number: (!separator || (chars[8] == '-' && chars[17] == '-'))  			 && TryCharsToHex32(chars' out uint hi)  			 && TryCharsToHex32(chars.Slice(separator ? 9 : 8)' out uint med)  			 && TryCharsToHex32(chars.Slice(separator ? 18 : 16)' out uint lo)
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,TryDecode16Unsafe,The following statement contains a magic number: (!separator || (chars[8] == '-' && chars[17] == '-'))  			 && TryCharsToHex32(chars' out uint hi)  			 && TryCharsToHex32(chars.Slice(separator ? 9 : 8)' out uint med)  			 && TryCharsToHex32(chars.Slice(separator ? 18 : 16)' out uint lo)
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,TryDecode16Unsafe,The following statement contains a magic number: (!separator || (chars[8] == '-' && chars[17] == '-'))  			 && TryCharsToHex32(chars' out uint hi)  			 && TryCharsToHex32(chars.Slice(separator ? 9 : 8)' out uint med)  			 && TryCharsToHex32(chars.Slice(separator ? 18 : 16)' out uint lo)
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,TryDecode16Unsafe,The following statement contains a magic number: (!separator || (chars[8] == '-' && chars[17] == '-'))  			 && TryCharsToHex32(chars' out uint hi)  			 && TryCharsToHex32(chars.Slice(separator ? 9 : 8)' out uint med)  			 && TryCharsToHex32(chars.Slice(separator ? 18 : 16)' out uint lo)
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,TryDecode16Unsafe,The following statement contains a magic number: (!separator || (chars[8] == '-' && chars[17] == '-'))  			 && TryCharsToHex32(chars' out uint hi)  			 && TryCharsToHex32(chars.Slice(separator ? 9 : 8)' out uint med)  			 && TryCharsToHex32(chars.Slice(separator ? 18 : 16)' out uint lo)
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,TryDecode16Unsafe,The following statement contains a magic number: (!separator || (chars[8] == '-' && chars[17] == '-'))  			 && TryCharsToHex32(chars' out uint hi)  			 && TryCharsToHex32(chars.Slice(separator ? 9 : 8)' out uint med)  			 && TryCharsToHex32(chars.Slice(separator ? 18 : 16)' out uint lo)
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,ReadUnsafe,The following statement contains a magic number: result = new Uuid96(UnsafeHelpers.LoadUInt32BE(ptr)' UnsafeHelpers.LoadUInt64BE(ptr + 4));
Magic Number,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,WriteUnsafe,The following statement contains a magic number: UnsafeHelpers.StoreUInt64BE(ptr + 4' lo);
Magic Number,System,VersionStamp,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\VersionStamp.cs,Custom,The following statement contains a magic number: ushort order = UnsafeHelpers.LoadUInt16BE(ptr + 8);
Magic Number,System,VersionStamp,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\VersionStamp.cs,Custom,The following statement contains a magic number: ushort order = UnsafeHelpers.LoadUInt16BE(ptr + 8);
Magic Number,System,VersionStamp,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\VersionStamp.cs,Custom,The following statement contains a magic number: ushort order = UnsafeHelpers.LoadUInt16BE(ptr + 8);
Magic Number,System,VersionStamp,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\VersionStamp.cs,Custom,The following statement contains a magic number: ushort userVersion = UnsafeHelpers.LoadUInt16BE(ptr + 10);
Magic Number,System,VersionStamp,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\VersionStamp.cs,WriteUnsafe,The following statement contains a magic number: Contract.Debug.Assert(buffer.Length == 10 || buffer.Length == 12' "Buffer length must be 10 or 12");
Magic Number,System,VersionStamp,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\VersionStamp.cs,WriteUnsafe,The following statement contains a magic number: Contract.Debug.Assert(buffer.Length == 10 || buffer.Length == 12' "Buffer length must be 10 or 12");
Magic Number,System,VersionStamp,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\VersionStamp.cs,WriteUnsafe,The following statement contains a magic number: UnsafeHelpers.StoreUInt16BE(ptr + 8' vs.TransactionOrder);
Magic Number,System,VersionStamp,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\VersionStamp.cs,WriteUnsafe,The following statement contains a magic number: UnsafeHelpers.StoreUInt16BE(ptr + 10' vs.UserVersion);
Magic Number,System,VersionStamp,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\VersionStamp.cs,WriteUnsafe,The following statement contains a magic number: buffer.Length >= 12
Magic Number,System,VersionStamp,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\VersionStamp.cs,TryParse,The following statement contains a magic number: data.Count != 10 && data.Count != 12
Magic Number,System,VersionStamp,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\VersionStamp.cs,TryParse,The following statement contains a magic number: data.Count != 10 && data.Count != 12
Magic Number,System,VersionStamp,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\VersionStamp.cs,ReadUnsafe,The following statement contains a magic number: Contract.Debug.Assert(buf.Length == 10 || buf.Length == 12);
Magic Number,System,VersionStamp,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\VersionStamp.cs,ReadUnsafe,The following statement contains a magic number: Contract.Debug.Assert(buf.Length == 10 || buf.Length == 12);
Magic Number,System,VersionStamp,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\VersionStamp.cs,ReadUnsafe,The following statement contains a magic number: ushort order = UnsafeHelpers.LoadUInt16BE(ptr + 8);
Magic Number,System,VersionStamp,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\VersionStamp.cs,ReadUnsafe,The following statement contains a magic number: ushort idx = buf.Length == 10 ? NO_USER_VERSION : UnsafeHelpers.LoadUInt16BE(ptr + 10);
Magic Number,System,VersionStamp,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\VersionStamp.cs,ReadUnsafe,The following statement contains a magic number: ushort idx = buf.Length == 10 ? NO_USER_VERSION : UnsafeHelpers.LoadUInt16BE(ptr + 10);
Magic Number,System,VersionStamp,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\VersionStamp.cs,ReadUnsafe,The following statement contains a magic number: buf.Length == 12
Magic Number,Doxense.Linq.Async.Iterators,BatchingAsyncIterator<TInput>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\BatchingAsyncIterator.cs,OnStarted,The following statement contains a magic number: m_buffer = new List<TInput>(Math.Min(m_batchSize' 1024));
Magic Number,Doxense.Linq.Async.Iterators,WindowingAsyncIterator<TInput>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Linq\Async\Iterators\WindowingAsyncIterator.cs,OnStarted,The following statement contains a magic number: m_buffer = new List<TInput>(Math.Min(m_maxWindowSize' 1024));
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,NextPowerOfTwo,The following statement contains a magic number: x > (1U << 31)
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,NextPowerOfTwo,The following statement contains a magic number: x |= (x >> 2);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,NextPowerOfTwo,The following statement contains a magic number: x |= (x >> 4);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,NextPowerOfTwo,The following statement contains a magic number: x |= (x >> 8);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,NextPowerOfTwo,The following statement contains a magic number: x |= (x >> 16);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,NextPowerOfTwo,The following statement contains a magic number: (uint)x > (1U << 30)
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,NextPowerOfTwo,The following statement contains a magic number: x |= (x >> 2);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,NextPowerOfTwo,The following statement contains a magic number: x |= (x >> 4);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,NextPowerOfTwo,The following statement contains a magic number: x |= (x >> 8);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,NextPowerOfTwo,The following statement contains a magic number: x |= (x >> 16);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,NextPowerOfTwo,The following statement contains a magic number: x > (1UL << 63)
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,NextPowerOfTwo,The following statement contains a magic number: x |= (x >> 2);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,NextPowerOfTwo,The following statement contains a magic number: x |= (x >> 4);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,NextPowerOfTwo,The following statement contains a magic number: x |= (x >> 8);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,NextPowerOfTwo,The following statement contains a magic number: x |= (x >> 16);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,NextPowerOfTwo,The following statement contains a magic number: x |= (x >> 32);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,NextPowerOfTwo,The following statement contains a magic number: (ulong) x > (1UL << 62)
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,NextPowerOfTwo,The following statement contains a magic number: x |= (x >> 2);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,NextPowerOfTwo,The following statement contains a magic number: x |= (x >> 4);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,NextPowerOfTwo,The following statement contains a magic number: x |= (x >> 8);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,NextPowerOfTwo,The following statement contains a magic number: x |= (x >> 16);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,NextPowerOfTwo,The following statement contains a magic number: x |= (x >> 32);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,CountBits,The following statement contains a magic number: value = (value & 0x33333333) + ((value >> 2) & 0x33333333);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,CountBits,The following statement contains a magic number: value = ((value + (value >> 4) & 0xF0F0F0F) * 0x1010101) >> (32 - 8);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,CountBits,The following statement contains a magic number: value = ((value + (value >> 4) & 0xF0F0F0F) * 0x1010101) >> (32 - 8);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,CountBits,The following statement contains a magic number: value = ((value + (value >> 4) & 0xF0F0F0F) * 0x1010101) >> (32 - 8);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,CountBits,The following statement contains a magic number: value = (value & 0x33333333) + ((value >> 2) & 0x33333333);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,CountBits,The following statement contains a magic number: value = ((value + (value >> 4) & 0xF0F0F0F) * 0x1010101) >> (32 - 8);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,CountBits,The following statement contains a magic number: value = ((value + (value >> 4) & 0xF0F0F0F) * 0x1010101) >> (32 - 8);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,CountBits,The following statement contains a magic number: value = ((value + (value >> 4) & 0xF0F0F0F) * 0x1010101) >> (32 - 8);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,CountBits,The following statement contains a magic number: value = (value & 0x3333333333333333) + ((value >> 2) & 0x3333333333333333);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,CountBits,The following statement contains a magic number: value = ((value + (value >> 4) & 0x0F0F0F0F0F0F0F0F) * 0x0101010101010101) >> (64 - 8);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,CountBits,The following statement contains a magic number: value = ((value + (value >> 4) & 0x0F0F0F0F0F0F0F0F) * 0x0101010101010101) >> (64 - 8);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,CountBits,The following statement contains a magic number: value = ((value + (value >> 4) & 0x0F0F0F0F0F0F0F0F) * 0x0101010101010101) >> (64 - 8);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,CountBits,The following statement contains a magic number: value = (value & 0x3333333333333333) + ((value >> 2) & 0x3333333333333333);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,CountBits,The following statement contains a magic number: value = ((value + (value >> 4) & 0x0F0F0F0F0F0F0F0F) * 0x0101010101010101) >> (64 - 8);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,CountBits,The following statement contains a magic number: value = ((value + (value >> 4) & 0x0F0F0F0F0F0F0F0F) * 0x0101010101010101) >> (64 - 8);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,CountBits,The following statement contains a magic number: value = ((value + (value >> 4) & 0x0F0F0F0F0F0F0F0F) * 0x0101010101010101) >> (64 - 8);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,MostSignificantBit,The following statement contains a magic number: return v == 0 ? 32 : MostSignificantBitNonZero32((uint) v);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,MostSignificantBit,The following statement contains a magic number: return v == 0 ? 32 : MostSignificantBitNonZero32(v);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,MostSignificantBitNonZero32,The following statement contains a magic number: v |= v >> 2;
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,MostSignificantBitNonZero32,The following statement contains a magic number: v |= v >> 4;
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,MostSignificantBitNonZero32,The following statement contains a magic number: v |= v >> 8;
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,MostSignificantBitNonZero32,The following statement contains a magic number: v |= v >> 16;
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,MostSignificantBitNonZero32,The following statement contains a magic number: var r = (v * 0x07C4ACDDU) >> 27;
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,MostSignificantBitNonZero32,The following statement contains a magic number: return MultiplyDeBruijnBitPosition32[r & 31];
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,MostSignificantBit,The following statement contains a magic number: return v == 0 ? 64 : MostSignificantBitNonZero64((ulong) v);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,MostSignificantBit,The following statement contains a magic number: return v == 0 ? 64 : MostSignificantBitNonZero64(v);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,MostSignificantBitNonZero64,The following statement contains a magic number: v |= v >> 2;
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,MostSignificantBitNonZero64,The following statement contains a magic number: v |= v >> 4;
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,MostSignificantBitNonZero64,The following statement contains a magic number: v |= v >> 8;
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,MostSignificantBitNonZero64,The following statement contains a magic number: v |= v >> 16;
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,MostSignificantBitNonZero64,The following statement contains a magic number: v |= v >> 32;
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,MostSignificantBitNonZero64,The following statement contains a magic number: var r = ((v - (v >> 1)) * 0x07EDD5E59A4E28C2UL) >> 58;
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,MostSignificantBitNonZero64,The following statement contains a magic number: return MultiplyDeBruijnBitPosition64[r & 63];
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,LeastSignificantBit,The following statement contains a magic number: return v == 0 ? 32 : LeastSignificantBitNonZero32(v);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,LeastSignificantBit,The following statement contains a magic number: return v == 0 ? 32 : LeastSignificantBitNonZero32(v);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,LeastSignificantBitNonZero32,The following statement contains a magic number: return (int) (((*(uint*) &d) >> 23) - 0x7f);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,LeastSignificantBit,The following statement contains a magic number: return v == 0 ? 64 : LeastSignificantBitNonZero64((long) v);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,LeastSignificantBit,The following statement contains a magic number: return v == 0 ? 64 : LeastSignificantBitNonZero64(v);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,LeastSignificantBitNonZero64,The following statement contains a magic number: ulong exp = (l >> 52) & ((1 << 11) - 1);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,LeastSignificantBitNonZero64,The following statement contains a magic number: ulong exp = (l >> 52) & ((1 << 11) - 1);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,LeastSignificantBitNonZero64,The following statement contains a magic number: return (int)(exp - 1023);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,FirstNonZeroByte,The following statement contains a magic number: return v == 0 ? 4 : (LeastSignificantBitNonZero32(v) >> 3);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,FirstNonZeroByte,The following statement contains a magic number: return v == 0 ? 4 : (LeastSignificantBitNonZero32(v) >> 3);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,FirstNonZeroByte,The following statement contains a magic number: return v == 0 ? 4 : (LeastSignificantBitNonZero32((int) v) >> 3);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,FirstNonZeroByte,The following statement contains a magic number: return v == 0 ? 4 : (LeastSignificantBitNonZero32((int) v) >> 3);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,FirstNonZeroByte,The following statement contains a magic number: return v == 0 ? 8 : (LeastSignificantBitNonZero64(v) >> 3);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,FirstNonZeroByte,The following statement contains a magic number: return v == 0 ? 8 : (LeastSignificantBitNonZero64(v) >> 3);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,FirstNonZeroByte,The following statement contains a magic number: return v == 0 ? 8 : (LeastSignificantBitNonZero64((long) v) >> 3);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,FirstNonZeroByte,The following statement contains a magic number: return v == 0 ? 8 : (LeastSignificantBitNonZero64((long) v) >> 3);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,LastNonZeroByte,The following statement contains a magic number: return v == 0 ? 4 : (MostSignificantBitNonZero32((uint) v) >> 3);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,LastNonZeroByte,The following statement contains a magic number: return v == 0 ? 4 : (MostSignificantBitNonZero32((uint) v) >> 3);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,LastNonZeroByte,The following statement contains a magic number: return v == 0 ? 4 : (MostSignificantBitNonZero32(v) >> 3);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,LastNonZeroByte,The following statement contains a magic number: return v == 0 ? 4 : (MostSignificantBitNonZero32(v) >> 3);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,LastNonZeroByte,The following statement contains a magic number: return v == 0 ? 8 : (MostSignificantBitNonZero64((ulong) v) >> 3);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,LastNonZeroByte,The following statement contains a magic number: return v == 0 ? 8 : (MostSignificantBitNonZero64((ulong) v) >> 3);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,LastNonZeroByte,The following statement contains a magic number: return v == 0 ? 8 : (MostSignificantBitNonZero64(v) >> 3);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,LastNonZeroByte,The following statement contains a magic number: return v == 0 ? 8 : (MostSignificantBitNonZero64(v) >> 3);
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,RotL32,The following statement contains a magic number: return (x << n) | (x >> (32 - n));
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,RotR32,The following statement contains a magic number: return (x >> n) | (x << (32 - n));
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,RotL64,The following statement contains a magic number: return (x << n) | (x >> (64 - n));
Magic Number,Doxense.Memory,BitHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\BitHelpers.cs,RotR64,The following statement contains a magic number: return (x >> n) | (x << (64 - n));
Magic Number,Doxense.Memory,SliceBuffer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceBuffer.cs,SliceBuffer,The following statement contains a magic number: m_pageSize = pageSize == 0 ? DefaultPageSize : BitHelpers.AlignPowerOfTwo(pageSize' 16);
Magic Number,Doxense.Memory,SliceBuffer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceBuffer.cs,Allocate,The following statement contains a magic number: const int ALIGNMENT = 4;
Magic Number,Doxense.Memory,SliceListStream,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceListStream.cs,Read,The following statement contains a magic number: remaining <= 8
Magic Number,Doxense.Memory,SlicePairComparer,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SlicePairComparer.cs,GetHashCode,The following statement contains a magic number: switch(m_mode)  			{  				case KEY_ONLY: return obj.Key.GetHashCode();  				case VALUE_ONLY: return obj.Value.GetHashCode();  				default: return (obj.Key.GetHashCode() * 31) + obj.Value.GetHashCode();  			}
Magic Number,Doxense.Memory,SliceReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceReader.cs,ReadFixed16,The following statement contains a magic number: return ReadBytes(2).ToUInt16();
Magic Number,Doxense.Memory,SliceReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceReader.cs,ReadFixed24,The following statement contains a magic number: return ReadBytes(3).ToUInt24();
Magic Number,Doxense.Memory,SliceReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceReader.cs,ReadFixed32,The following statement contains a magic number: return ReadBytes(4).ToUInt32();
Magic Number,Doxense.Memory,SliceReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceReader.cs,ReadFixed64,The following statement contains a magic number: return ReadBytes(8).ToUInt64();
Magic Number,Doxense.Memory,SliceReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceReader.cs,ReadFixed16BE,The following statement contains a magic number: return ReadBytes(2).ToUInt16BE();
Magic Number,Doxense.Memory,SliceReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceReader.cs,ReadFixed24BE,The following statement contains a magic number: return ReadBytes(3).ToUInt24BE();
Magic Number,Doxense.Memory,SliceReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceReader.cs,ReadFixed32BE,The following statement contains a magic number: return ReadBytes(4).ToUInt32BE();
Magic Number,Doxense.Memory,SliceReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceReader.cs,ReadFixed64BE,The following statement contains a magic number: return ReadBytes(8).ToUInt64BE();
Magic Number,Doxense.Memory,SliceReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceReader.cs,ReadSingle,The following statement contains a magic number: return ReadBytes(4).ToSingle();
Magic Number,Doxense.Memory,SliceReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceReader.cs,ReadDouble,The following statement contains a magic number: return ReadBytes(8).ToDouble();
Magic Number,Doxense.Memory,SliceReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceReader.cs,ReadVarInt16,The following statement contains a magic number: return checked((ushort)ReadVarInt(3));
Magic Number,Doxense.Memory,SliceReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceReader.cs,ReadVarInt32,The following statement contains a magic number: return checked((uint)ReadVarInt(5));
Magic Number,Doxense.Memory,SliceReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceReader.cs,ReadVarInt64,The following statement contains a magic number: return ReadVarInt(10);
Magic Number,Doxense.Memory,SliceReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceReader.cs,ReadVarInt,The following statement contains a magic number: s += 7;
Magic Number,Doxense.Memory,SliceReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceReader.cs,ReadUuid128,The following statement contains a magic number: return ReadBytes(16).ToUuid128();
Magic Number,Doxense.Memory,SliceReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceReader.cs,ReadUuid64,The following statement contains a magic number: return ReadBytes(8).ToUuid64();
Magic Number,Doxense.Memory,SliceStream,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceStream.cs,Read,The following statement contains a magic number: remaining <= 8
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,SliceWriter,The following statement contains a magic number: capacity = BitHelpers.AlignPowerOfTwo(n + 8' 16);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,SliceWriter,The following statement contains a magic number: capacity = BitHelpers.AlignPowerOfTwo(n + 8' 16);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,Reset,The following statement contains a magic number: this.Buffer.Length > 65536 && this.Position <= (this.Buffer.Length >> 3)
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,Reset,The following statement contains a magic number: this.Buffer.Length > 65536 && this.Position <= (this.Buffer.Length >> 3)
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteBytes,The following statement contains a magic number: var buffer = EnsureBytes(2);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteBytes,The following statement contains a magic number: this.Position = p + 2;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,UnsafeWriteBytes,The following statement contains a magic number: this.Position = p + 2;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteBytes,The following statement contains a magic number: var buffer = EnsureBytes(3);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteBytes,The following statement contains a magic number: buffer[p + 2] = value3;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteBytes,The following statement contains a magic number: this.Position = p + 3;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,UnsafeWriteBytes,The following statement contains a magic number: Contract.Requires(this.Buffer != null && this.Position + 2 < this.Buffer.Length);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,UnsafeWriteBytes,The following statement contains a magic number: buffer[p + 2] = value3;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,UnsafeWriteBytes,The following statement contains a magic number: this.Position = p + 3;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteBytes,The following statement contains a magic number: var buffer = EnsureBytes(4);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteBytes,The following statement contains a magic number: buffer[p + 2] = value3;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteBytes,The following statement contains a magic number: buffer[p + 3] = value4;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteBytes,The following statement contains a magic number: this.Position = p + 4;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,UnsafeWriteBytes,The following statement contains a magic number: Contract.Requires(this.Buffer != null && this.Position + 3 < this.Buffer.Length);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,UnsafeWriteBytes,The following statement contains a magic number: buffer[p + 2] = value3;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,UnsafeWriteBytes,The following statement contains a magic number: buffer[p + 3] = value4;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,UnsafeWriteBytes,The following statement contains a magic number: this.Position = p + 4;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteBytes,The following statement contains a magic number: var buffer = EnsureBytes(5);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteBytes,The following statement contains a magic number: buffer[p + 2] = value3;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteBytes,The following statement contains a magic number: buffer[p + 3] = value4;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteBytes,The following statement contains a magic number: buffer[p + 4] = value5;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteBytes,The following statement contains a magic number: this.Position = p + 5;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,UnsafeWriteBytes,The following statement contains a magic number: Contract.Requires(this.Buffer != null && this.Position + 4 < this.Buffer.Length);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,UnsafeWriteBytes,The following statement contains a magic number: buffer[p + 2] = value3;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,UnsafeWriteBytes,The following statement contains a magic number: buffer[p + 3] = value4;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,UnsafeWriteBytes,The following statement contains a magic number: buffer[p + 4] = value5;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,UnsafeWriteBytes,The following statement contains a magic number: this.Position = p + 5;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed16,The following statement contains a magic number: this.Position = p + 2;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed16,The following statement contains a magic number: this.Position = p + 2;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed24,The following statement contains a magic number: this.Position = p + 3;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed24,The following statement contains a magic number: this.Position = p + 3;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed32,The following statement contains a magic number: this.Position = p + 4;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed32,The following statement contains a magic number: this.Position = p + 4;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed64,The following statement contains a magic number: this.Position = p + 8;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed64,The following statement contains a magic number: this.Position = p + 8;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed16BE,The following statement contains a magic number: var buffer = EnsureBytes(2);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed16BE,The following statement contains a magic number: buffer[p] = (byte)(value >> 8);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed16BE,The following statement contains a magic number: this.Position = p + 2;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed16BE,The following statement contains a magic number: var buffer = EnsureBytes(2);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed16BE,The following statement contains a magic number: buffer[p] = (byte)(value >> 8);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed16BE,The following statement contains a magic number: this.Position = p + 2;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed24BE,The following statement contains a magic number: var buffer = EnsureBytes(3);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed24BE,The following statement contains a magic number: this.Position = p + 3;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed24BE,The following statement contains a magic number: var buffer = EnsureBytes(3);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed24BE,The following statement contains a magic number: this.Position = p + 3;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed32BE,The following statement contains a magic number: var buffer = EnsureBytes(4);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed32BE,The following statement contains a magic number: buffer[p] = (byte)(value >> 24);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed32BE,The following statement contains a magic number: buffer[p + 1] = (byte)(value >> 16);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed32BE,The following statement contains a magic number: buffer[p + 2] = (byte)(value >> 8);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed32BE,The following statement contains a magic number: buffer[p + 2] = (byte)(value >> 8);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed32BE,The following statement contains a magic number: buffer[p + 3] = (byte)(value);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed32BE,The following statement contains a magic number: this.Position = p + 4;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed32BE,The following statement contains a magic number: var buffer = EnsureBytes(4);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed32BE,The following statement contains a magic number: buffer[p] = (byte)(value >> 24);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed32BE,The following statement contains a magic number: buffer[p + 1] = (byte)(value >> 16);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed32BE,The following statement contains a magic number: buffer[p + 2] = (byte)(value >> 8);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed32BE,The following statement contains a magic number: buffer[p + 2] = (byte)(value >> 8);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed32BE,The following statement contains a magic number: buffer[p + 3] = (byte)(value);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed32BE,The following statement contains a magic number: this.Position = p + 4;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed64BE,The following statement contains a magic number: var buffer = EnsureBytes(8);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed64BE,The following statement contains a magic number: buffer[p] = (byte)(value >> 56);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed64BE,The following statement contains a magic number: buffer[p + 1] = (byte)(value >> 48);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed64BE,The following statement contains a magic number: buffer[p + 2] = (byte)(value >> 40);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed64BE,The following statement contains a magic number: buffer[p + 2] = (byte)(value >> 40);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed64BE,The following statement contains a magic number: buffer[p + 3] = (byte)(value >> 32);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed64BE,The following statement contains a magic number: buffer[p + 3] = (byte)(value >> 32);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed64BE,The following statement contains a magic number: buffer[p + 4] = (byte)(value >> 24);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed64BE,The following statement contains a magic number: buffer[p + 4] = (byte)(value >> 24);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed64BE,The following statement contains a magic number: buffer[p + 5] = (byte)(value >> 16);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed64BE,The following statement contains a magic number: buffer[p + 5] = (byte)(value >> 16);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed64BE,The following statement contains a magic number: buffer[p + 6] = (byte)(value >> 8);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed64BE,The following statement contains a magic number: buffer[p + 6] = (byte)(value >> 8);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed64BE,The following statement contains a magic number: buffer[p + 7] = (byte)(value);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed64BE,The following statement contains a magic number: this.Position = p + 8;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed64BE,The following statement contains a magic number: var buffer = EnsureBytes(8);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed64BE,The following statement contains a magic number: buffer[p] = (byte)(value >> 56);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed64BE,The following statement contains a magic number: buffer[p + 1] = (byte)(value >> 48);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed64BE,The following statement contains a magic number: buffer[p + 2] = (byte)(value >> 40);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed64BE,The following statement contains a magic number: buffer[p + 2] = (byte)(value >> 40);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed64BE,The following statement contains a magic number: buffer[p + 3] = (byte)(value >> 32);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed64BE,The following statement contains a magic number: buffer[p + 3] = (byte)(value >> 32);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed64BE,The following statement contains a magic number: buffer[p + 4] = (byte)(value >> 24);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed64BE,The following statement contains a magic number: buffer[p + 4] = (byte)(value >> 24);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed64BE,The following statement contains a magic number: buffer[p + 5] = (byte)(value >> 16);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed64BE,The following statement contains a magic number: buffer[p + 5] = (byte)(value >> 16);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed64BE,The following statement contains a magic number: buffer[p + 6] = (byte)(value >> 8);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed64BE,The following statement contains a magic number: buffer[p + 6] = (byte)(value >> 8);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed64BE,The following statement contains a magic number: buffer[p + 7] = (byte)(value);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteFixed64BE,The following statement contains a magic number: this.Position = p + 8;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteSingle,The following statement contains a magic number: var buffer = EnsureBytes(4);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteSingle,The following statement contains a magic number: this.Position = p + 4;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteSingle,The following statement contains a magic number: var buffer = EnsureBytes(5);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteSingle,The following statement contains a magic number: this.Position = p + 5;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteDouble,The following statement contains a magic number: var buffer = EnsureBytes(8);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteDouble,The following statement contains a magic number: this.Position = p + 8;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteDouble,The following statement contains a magic number: var buffer = EnsureBytes(9);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteDouble,The following statement contains a magic number: this.Position = p + 9;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteVarInt16,The following statement contains a magic number: value < (1 << 7)
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteVarInt16Slow,The following statement contains a magic number: const uint MASK = 128;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteVarInt16Slow,The following statement contains a magic number: WriteBytes(  					(byte)(value | MASK)'  					(byte)(value >> 7)  				);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteVarInt16Slow,The following statement contains a magic number: value < (1 << 14)
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteVarInt32,The following statement contains a magic number: value < (1 << 7)
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteVarInt32Slow,The following statement contains a magic number: const uint MASK = 128;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteVarInt32Slow,The following statement contains a magic number: WriteBytes(  					(byte)(value | MASK)'  					(byte)(value >> 7)  				);
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteVarInt32Slow,The following statement contains a magic number: value < (1 << 14)
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteVarInt64,The following statement contains a magic number: const uint MASK = 128;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteVarInt64,The following statement contains a magic number: value >>= 7;
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteVarBytes,The following statement contains a magic number: n >= 128
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteVarBytesSlow,The following statement contains a magic number: var buffer = EnsureBytes(checked(n + 5));
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteVarAsciiInternal,The following statement contains a magic number: fixed (char* chars = value)  			{  				var outp = UnsafeHelpers.WriteVarInt32Unsafe(bytes' (uint) value.Length);  				p += (int) (outp - bytes);  				int mask = 0;  				for (int i = 0; i < len; i++)  				{  					var c = chars[i];  					mask |= c;  					outp[i] = (byte)c;  				}  				if (mask >= 128) throw ThrowHelper.ArgumentException(nameof(value)' "The specified string must only contain ASCII characters.");  			}
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteString,The following statement contains a magic number: var buffer = EnsureBytes(value.Length > 128 ? encoding.GetByteCount(value) : encoding.GetMaxByteCount(value.Length));
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteStringUtf8,The following statement contains a magic number: var buffer = EnsureBytes(value.Length > 128  				? Encoding.UTF8.GetByteCount(value)  				: Encoding.UTF8.GetMaxByteCount(value.Length));
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteStringUtf8,The following statement contains a magic number: var buffer = EnsureBytes(count > 128  						? Encoding.UTF8.GetByteCount(inp' count)  						: Encoding.UTF8.GetMaxByteCount(count));
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteBase10,The following statement contains a magic number: (uint) value <= 9
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteBase10,The following statement contains a magic number: (ulong) value <= 9
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteBase10,The following statement contains a magic number: value <= 9
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteBase10,The following statement contains a magic number: value <= 9
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteBase10Slow,The following statement contains a magic number: value < 10
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,WriteBase10Slow,The following statement contains a magic number: value < 10
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,PatchInt16,The following statement contains a magic number: index + 2 > this.Position
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,PatchUInt16,The following statement contains a magic number: index + 2 > this.Position
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,PatchInt16BE,The following statement contains a magic number: index + 2 > this.Position
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,PatchUInt16BE,The following statement contains a magic number: index + 2 > this.Position
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,PatchInt32,The following statement contains a magic number: index + 4 > this.Position
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,PatchUInt32,The following statement contains a magic number: index + 4 > this.Position
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,PatchInt32BE,The following statement contains a magic number: index + 4 > this.Position
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,PatchUInt32BE,The following statement contains a magic number: index + 4 > this.Position
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,PatchInt64,The following statement contains a magic number: index + 8 > this.Position
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,PatchUInt64,The following statement contains a magic number: index + 8 > this.Position
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,PatchInt64BE,The following statement contains a magic number: index + 8 > this.Position
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,PatchUInt64BE,The following statement contains a magic number: index + 8 > this.Position
Magic Number,Doxense.Memory,SliceWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\SliceWriter.cs,GrowBuffer,The following statement contains a magic number: int size = BitHelpers.AlignPowerOfTwo((int) newSize' 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,AllocateAligned,The following statement contains a magic number: return new byte[BitHelpers.AlignPowerOfTwo(minCapacity' 8)];
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,Unescape,The following statement contains a magic number: i + 3 >= value.Length || value[i + 3] != '>'
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,Unescape,The following statement contains a magic number: i + 3 >= value.Length || value[i + 3] != '>'
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,Unescape,The following statement contains a magic number: c = (char) (NibbleToDecimal(value[i + 1]) << 4 | NibbleToDecimal(value[i + 2]));
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,Unescape,The following statement contains a magic number: c = (char) (NibbleToDecimal(value[i + 1]) << 4 | NibbleToDecimal(value[i + 2]));
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,Unescape,The following statement contains a magic number: i += 3;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,FromHexa,The following statement contains a magic number: buffer[p++] = (byte) ((NibbleToDecimal(x) << 4) | NibbleToDecimal(y));
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,NibbleToDecimal,The following statement contains a magic number: int x = c - 48;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,NibbleToDecimal,The following statement contains a magic number: x < 10
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,NibbleToDecimal,The following statement contains a magic number: return x - 7;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,NibbleToDecimal,The following statement contains a magic number: x >= 17 && x <= 42
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,NibbleToDecimal,The following statement contains a magic number: x >= 17 && x <= 42
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,NibbleToDecimal,The following statement contains a magic number: return x - 39;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,NibbleToDecimal,The following statement contains a magic number: x >= 49 && x <= 74
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,NibbleToDecimal,The following statement contains a magic number: x >= 49 && x <= 74
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ComputeHashCode,The following statement contains a magic number: uint h = 2166136261;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ComputeHashCode,The following statement contains a magic number: h = unchecked ((h ^ bytes[i]) * 16777619);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfVarInt,The following statement contains a magic number: return value < (1U << 7) ? 1 : SizeOfVarIntSlow(value);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfVarIntSlow,The following statement contains a magic number: return 2;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfVarIntSlow,The following statement contains a magic number: value < (1U << 14)
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfVarIntSlow,The following statement contains a magic number: return 3;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfVarIntSlow,The following statement contains a magic number: value < (1U << 21)
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfVarIntSlow,The following statement contains a magic number: return 4;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfVarIntSlow,The following statement contains a magic number: value < (1U << 28)
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfVarIntSlow,The following statement contains a magic number: return 5;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfVarInt,The following statement contains a magic number: return value < (1UL << 7) ? 1 : SizeOfVarIntSlow(value);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfVarIntSlow,The following statement contains a magic number: return 2;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfVarIntSlow,The following statement contains a magic number: value < (1UL << 14)
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfVarIntSlow,The following statement contains a magic number: return 3;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfVarIntSlow,The following statement contains a magic number: value < (1UL << 21)
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfVarIntSlow,The following statement contains a magic number: return 4;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfVarIntSlow,The following statement contains a magic number: value < (1UL << 28)
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfVarIntSlow,The following statement contains a magic number: return 5;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfVarIntSlow,The following statement contains a magic number: value < (1UL << 35)
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfVarIntSlow,The following statement contains a magic number: return 6;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfVarIntSlow,The following statement contains a magic number: value < (1UL << 42)
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfVarIntSlow,The following statement contains a magic number: return 7;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfVarIntSlow,The following statement contains a magic number: value < (1UL << 49)
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfVarIntSlow,The following statement contains a magic number: return 8;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfVarIntSlow,The following statement contains a magic number: value < (1UL << 56)
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfVarIntSlow,The following statement contains a magic number: return 9;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfVarIntSlow,The following statement contains a magic number: value < (1UL << 63)
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfVarIntSlow,The following statement contains a magic number: return 10;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint16Slow,The following statement contains a magic number: res |= (b & 0x7F) << 7;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint16Slow,The following statement contains a magic number: n = 2;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint16Slow,The following statement contains a magic number: cursor + 2 >= stop
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint16Slow,The following statement contains a magic number: b = cursor[2];
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint16Slow,The following statement contains a magic number: res |= (b & 0x3) << 14;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint16Slow,The following statement contains a magic number: n = 3;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint16Unsafe,The following statement contains a magic number: res |= (b & 0x7F) << 7;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint16Unsafe,The following statement contains a magic number: n = 2;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint16Unsafe,The following statement contains a magic number: b = cursor[2];
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint16Unsafe,The following statement contains a magic number: res |= (b & 0x3) << 14;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint16Unsafe,The following statement contains a magic number: n = 3;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteVarInt32UnsafeSlow,The following statement contains a magic number: value >>= 7;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteVarInt32Slow,The following statement contains a magic number: value >>= 7;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint32Unsafe,The following statement contains a magic number: res |= (b & 0x7F) << 7;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint32Unsafe,The following statement contains a magic number: n = 2;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint32Unsafe,The following statement contains a magic number: b = cursor[2];
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint32Unsafe,The following statement contains a magic number: res |= (b & 0x7F) << 14;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint32Unsafe,The following statement contains a magic number: n = 3;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint32Unsafe,The following statement contains a magic number: b = cursor[3];
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint32Unsafe,The following statement contains a magic number: res |= (b & 0x7F) << 21;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint32Unsafe,The following statement contains a magic number: n = 4;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint32Unsafe,The following statement contains a magic number: b = cursor[4];
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint32Unsafe,The following statement contains a magic number: res |= (b & 0x1F) << 28;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint32Unsafe,The following statement contains a magic number: n = 5;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint32Slow,The following statement contains a magic number: res |= (b & 0x7F) << 7;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint32Slow,The following statement contains a magic number: n = 2;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint32Slow,The following statement contains a magic number: cursor + 2 >= stop
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint32Slow,The following statement contains a magic number: b = cursor[2];
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint32Slow,The following statement contains a magic number: res |= (b & 0x7F) << 14;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint32Slow,The following statement contains a magic number: n = 3;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint32Slow,The following statement contains a magic number: cursor + 3 >= stop
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint32Slow,The following statement contains a magic number: b = cursor[3];
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint32Slow,The following statement contains a magic number: res |= (b & 0x7F) << 21;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint32Slow,The following statement contains a magic number: n = 4;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint32Slow,The following statement contains a magic number: cursor + 4 >= stop
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint32Slow,The following statement contains a magic number: b = cursor[4];
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint32Slow,The following statement contains a magic number: res |= (b & 0x1F) << 28;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint32Slow,The following statement contains a magic number: n = 5;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteVarInt64UnsafeSlow,The following statement contains a magic number: value >>= 7;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteVarInt64Slow,The following statement contains a magic number: value >>= 7;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Unsafe,The following statement contains a magic number: res |= (b & 0x7F) << 7;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Unsafe,The following statement contains a magic number: n = 2;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Unsafe,The following statement contains a magic number: b = cursor[2];
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Unsafe,The following statement contains a magic number: res |= (b & 0x7F) << 14;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Unsafe,The following statement contains a magic number: n = 3;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Unsafe,The following statement contains a magic number: b = cursor[3];
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Unsafe,The following statement contains a magic number: res |= (b & 0x7F) << 21;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Unsafe,The following statement contains a magic number: n = 4;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Unsafe,The following statement contains a magic number: b = cursor[4];
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Unsafe,The following statement contains a magic number: res |= (b & 0x7F) << 28;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Unsafe,The following statement contains a magic number: n = 5;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Unsafe,The following statement contains a magic number: b = cursor[5];
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Unsafe,The following statement contains a magic number: res |= (b & 0x7F) << 35;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Unsafe,The following statement contains a magic number: n = 6;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Unsafe,The following statement contains a magic number: b = cursor[6];
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Unsafe,The following statement contains a magic number: res |= (b & 0x7F) << 42;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Unsafe,The following statement contains a magic number: n = 7;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Unsafe,The following statement contains a magic number: b = cursor[7];
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Unsafe,The following statement contains a magic number: res |= (b & 0x7F) << 49;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Unsafe,The following statement contains a magic number: n = 8;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Unsafe,The following statement contains a magic number: b = cursor[8];
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Unsafe,The following statement contains a magic number: res |= (b & 0x7F) << 56;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Unsafe,The following statement contains a magic number: n = 9;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Unsafe,The following statement contains a magic number: b = cursor[9];
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Unsafe,The following statement contains a magic number: res |= (b & 0x1) << 63;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Unsafe,The following statement contains a magic number: n = 10;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Slow,The following statement contains a magic number: res |= (b & 0x7F) << 7;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Slow,The following statement contains a magic number: n = 2;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Slow,The following statement contains a magic number: b = cursor[2];
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Slow,The following statement contains a magic number: res |= (b & 0x7F) << 14;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Slow,The following statement contains a magic number: n = 3;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Slow,The following statement contains a magic number: b = cursor[3];
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Slow,The following statement contains a magic number: res |= (b & 0x7F) << 21;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Slow,The following statement contains a magic number: n = 4;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Slow,The following statement contains a magic number: b = cursor[4];
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Slow,The following statement contains a magic number: res |= (b & 0x7F) << 28;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Slow,The following statement contains a magic number: n = 5;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Slow,The following statement contains a magic number: b = cursor[5];
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Slow,The following statement contains a magic number: res |= (b & 0x7F) << 35;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Slow,The following statement contains a magic number: n = 6;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Slow,The following statement contains a magic number: b = cursor[6];
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Slow,The following statement contains a magic number: res |= (b & 0x7F) << 42;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Slow,The following statement contains a magic number: n = 7;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Slow,The following statement contains a magic number: b = cursor[7];
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Slow,The following statement contains a magic number: res |= (b & 0x7F) << 49;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Slow,The following statement contains a magic number: n = 8;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Slow,The following statement contains a magic number: b = cursor[8];
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Slow,The following statement contains a magic number: res |= (b & 0x7F) << 56;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Slow,The following statement contains a magic number: n = 9;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Slow,The following statement contains a magic number: b = cursor[9];
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Slow,The following statement contains a magic number: res |= (b & 0x1) << 63;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadVarint64Slow,The following statement contains a magic number: n = 10;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ByteSwap16,The following statement contains a magic number: return (ushort) ((value << 8) | (value >> 8));
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ByteSwap16,The following statement contains a magic number: return (ushort) ((value << 8) | (value >> 8));
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ByteSwap16,The following statement contains a magic number: return (short) ((value << 8) | ((value >> 8) & 0xFF));
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ByteSwap16,The following statement contains a magic number: return (short) ((value << 8) | ((value >> 8) & 0xFF));
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ByteSwap24,The following statement contains a magic number: return (value & 0xFF) << 16 | (value & 0x00FF00) | ((value & 0xFF0000) >> 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ByteSwap24,The following statement contains a magic number: return (value & 0xFF) << 16 | (value & 0x00FF00) | ((value & 0xFF0000) >> 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ByteSwap24,The following statement contains a magic number: return (value & 0xFF) << 16 | (value & 0x00FF00) | ((value & 0xFF0000) >> 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ByteSwap24,The following statement contains a magic number: return (value & 0xFF) << 16 | (value & 0x00FF00) | ((value & 0xFF0000) >> 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,LoadInt24LE,The following statement contains a magic number: x |= (uint) ((byte*) ptr)[2] << 16;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,LoadInt24LE,The following statement contains a magic number: x |= (uint) ((byte*) ptr)[2] << 16;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,LoadUInt24LE,The following statement contains a magic number: x |= (uint) ((byte*) ptr)[2] << 16;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,LoadUInt24LE,The following statement contains a magic number: x |= (uint) ((byte*) ptr)[2] << 16;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,StoreInt24LE,The following statement contains a magic number: ((byte*) ptr)[2] = (byte) (x >> 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,StoreInt24LE,The following statement contains a magic number: ((byte*) ptr)[2] = (byte) (x >> 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,StoreUInt24LE,The following statement contains a magic number: ((byte*)ptr)[2] = (byte)(x >> 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,StoreUInt24LE,The following statement contains a magic number: ((byte*)ptr)[2] = (byte)(x >> 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,LoadInt24BE,The following statement contains a magic number: uint x = *(ushort*) ptr | ((uint) ((byte*) ptr)[2] << 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,LoadInt24BE,The following statement contains a magic number: uint x = *(ushort*) ptr | ((uint) ((byte*) ptr)[2] << 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,LoadUInt24BE,The following statement contains a magic number: uint x = *(ushort*) ptr | ((uint) ((byte*) ptr)[2] << 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,LoadUInt24BE,The following statement contains a magic number: uint x = *(ushort*) ptr | ((uint) ((byte*) ptr)[2] << 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,StoreInt24BE,The following statement contains a magic number: ((byte*) ptr)[2] = (byte) (x >> 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,StoreInt24BE,The following statement contains a magic number: ((byte*) ptr)[2] = (byte) (x >> 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,StoreUInt24BE,The following statement contains a magic number: ((byte*)ptr)[2] = (byte)(x >> 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,StoreUInt24BE,The following statement contains a magic number: ((byte*)ptr)[2] = (byte)(x >> 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ByteSwap32,The following statement contains a magic number: uint tmp = ((value << 8) & MASK1_HI) | ((value >> 8) & MASK1_LO);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ByteSwap32,The following statement contains a magic number: uint tmp = ((value << 8) & MASK1_HI) | ((value >> 8) & MASK1_LO);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ByteSwap32,The following statement contains a magic number: return (tmp << 16) | (tmp >> 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ByteSwap32,The following statement contains a magic number: return (tmp << 16) | (tmp >> 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ByteSwap32,The following statement contains a magic number: int tmp = ((value << 8) & MASK1_HI) | ((value >> 8) & MASK1_LO);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ByteSwap32,The following statement contains a magic number: int tmp = ((value << 8) & MASK1_HI) | ((value >> 8) & MASK1_LO);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ByteSwap32,The following statement contains a magic number: return (tmp << 16) | ((tmp >> 16) & 0xFFFF);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ByteSwap32,The following statement contains a magic number: return (tmp << 16) | ((tmp >> 16) & 0xFFFF);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ByteSwap64,The following statement contains a magic number: ulong tmp = ((value << 8) & MASK1_HI) | ((value >> 8) & MASK1_LO);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ByteSwap64,The following statement contains a magic number: ulong tmp = ((value << 8) & MASK1_HI) | ((value >> 8) & MASK1_LO);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ByteSwap64,The following statement contains a magic number: tmp = ((tmp << 16) & MASK2_HI) | ((tmp >> 16) & MASK2_LO);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ByteSwap64,The following statement contains a magic number: tmp = ((tmp << 16) & MASK2_HI) | ((tmp >> 16) & MASK2_LO);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ByteSwap64,The following statement contains a magic number: return (tmp << 32) | (tmp >> 32);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ByteSwap64,The following statement contains a magic number: return (tmp << 32) | (tmp >> 32);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ByteSwap64,The following statement contains a magic number: long tmp = ((value << 8) & MASK1_HI) | ((value >> 8) & MASK1_LO);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ByteSwap64,The following statement contains a magic number: long tmp = ((value << 8) & MASK1_HI) | ((value >> 8) & MASK1_LO);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ByteSwap64,The following statement contains a magic number: tmp = ((tmp << 16) & MASK2_HI) | ((tmp >> 16) & MASK2_LO);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ByteSwap64,The following statement contains a magic number: tmp = ((tmp << 16) & MASK2_HI) | ((tmp >> 16) & MASK2_LO);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ByteSwap64,The following statement contains a magic number: return (tmp << 32) | ((tmp >> 32) & 0xFFFFFFFFL);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ByteSwap64,The following statement contains a magic number: return (tmp << 32) | ((tmp >> 32) & 0xFFFFFFFFL);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteFixed16Unsafe,The following statement contains a magic number: return cursor + 2;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteFixed16,The following statement contains a magic number: cursor + 2 > stop
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteFixed16,The following statement contains a magic number: return cursor + 2;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadFixed16,The following statement contains a magic number: return p + 2;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteFixed16BEUnsafe,The following statement contains a magic number: return cursor + 2;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteFixed16BE,The following statement contains a magic number: cursor + 2 > stop
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteFixed16BE,The following statement contains a magic number: return cursor + 2;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteZeroFixed16,The following statement contains a magic number: return cursor + 2;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadFixed16BE,The following statement contains a magic number: return p + 2;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteFixed32Unsafe,The following statement contains a magic number: return cursor + 4;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteFixed32,The following statement contains a magic number: cursor + 4 > stop
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteFixed32,The following statement contains a magic number: return cursor + 4;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadFixed32,The following statement contains a magic number: return p + 4;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteFixed32BEUnsafe,The following statement contains a magic number: return cursor + 4;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteFixed32BE,The following statement contains a magic number: cursor + 4 > stop
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteFixed32BE,The following statement contains a magic number: return cursor + 4;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteZeroFixed32,The following statement contains a magic number: return cursor + 4;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadFixed32BE,The following statement contains a magic number: return p + 4;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteFixed64Unsafe,The following statement contains a magic number: return cursor + 8;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteFixed64,The following statement contains a magic number: cursor + 8 > stop
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteFixed64,The following statement contains a magic number: return cursor + 8;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadFixed64,The following statement contains a magic number: return p + 8;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteFixed64BEUnsafe,The following statement contains a magic number: return cursor + 8;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteFixed64BE,The following statement contains a magic number: cursor + 8 > stop
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteFixed64BE,The following statement contains a magic number: return cursor + 8;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteZeroFixed64,The following statement contains a magic number: return cursor + 8;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadFixed64BE,The following statement contains a magic number: return p + 8;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfCompact16,The following statement contains a magic number: return value <= 0xFF ? 1U : 2U;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfCompact32Slow,The following statement contains a magic number: return 2;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfCompact32Slow,The following statement contains a magic number: value < (1U << 16)
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfCompact32Slow,The following statement contains a magic number: return 3;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfCompact32Slow,The following statement contains a magic number: value < (1U << 24)
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfCompact32Slow,The following statement contains a magic number: return 4;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfCompact64Slow,The following statement contains a magic number: return 2;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfCompact64Slow,The following statement contains a magic number: value < (1UL << 16)
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfCompact64Slow,The following statement contains a magic number: return 3;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfCompact64Slow,The following statement contains a magic number: value < (1UL << 24)
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfCompact64Slow,The following statement contains a magic number: return 4;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfCompact64Slow,The following statement contains a magic number: value < (1UL << 32)
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfCompact64Slow,The following statement contains a magic number: return 5;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfCompact64Slow,The following statement contains a magic number: value < (1UL << 40)
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfCompact64Slow,The following statement contains a magic number: return 6;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfCompact64Slow,The following statement contains a magic number: value < (1UL << 48)
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfCompact64Slow,The following statement contains a magic number: return 7;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfCompact64Slow,The following statement contains a magic number: value < (1UL << 56)
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfCompact64Slow,The following statement contains a magic number: return 8;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteCompact16Unsafe,The following statement contains a magic number: return ptr + 2;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteCompact16BEUnsafe,The following statement contains a magic number: return ptr + 2;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteCompact32UnsafeSlow,The following statement contains a magic number: return ptr + 2;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteCompact32UnsafeSlow,The following statement contains a magic number: ptr[2] = (byte) (value >> 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteCompact32UnsafeSlow,The following statement contains a magic number: ptr[2] = (byte) (value >> 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteCompact32UnsafeSlow,The following statement contains a magic number: return ptr + 3;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteCompact32UnsafeSlow,The following statement contains a magic number: return ptr + 4;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteCompact32BEUnsafeSlow,The following statement contains a magic number: return ptr + 2;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteCompact32BEUnsafeSlow,The following statement contains a magic number: ptr[0] = (byte) (value >> 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteCompact32BEUnsafeSlow,The following statement contains a magic number: return ptr + 3;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteCompact32BEUnsafeSlow,The following statement contains a magic number: return ptr + 4;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteCompact64Unsafe,The following statement contains a magic number: return ptr + 8;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteCompact64UnsafeSlow,The following statement contains a magic number: return ptr + 4;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteCompact64UnsafeSlow,The following statement contains a magic number: return ptr + 2;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteCompact64UnsafeSlow,The following statement contains a magic number: ptr[2] = (byte) (value >> 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteCompact64UnsafeSlow,The following statement contains a magic number: ptr[2] = (byte) (value >> 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteCompact64UnsafeSlow,The following statement contains a magic number: return ptr + 3;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteCompact64BEUnsafe,The following statement contains a magic number: return ptr + 8;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteCompact64BEUnsafeSlow,The following statement contains a magic number: return ptr + 4;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteCompact64BEUnsafeSlow,The following statement contains a magic number: return ptr + 2;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteCompact64BEUnsafeSlow,The following statement contains a magic number: StoreUInt16BE((ushort*) ptr' (ushort) (value >> 8));
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteCompact64BEUnsafeSlow,The following statement contains a magic number: ptr[2] = (byte) value;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteCompact64BEUnsafeSlow,The following statement contains a magic number: return ptr + 3;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfOrderedUInt32,The following statement contains a magic number: return value <= OCU_MAX0 ? 1  			     : value <= OCU_MAX1 ? 2  			     : value <= OCU_MAX2 ? 3  			     : value <= OCU_MAX3 ? 4  			     : 5;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfOrderedUInt32,The following statement contains a magic number: return value <= OCU_MAX0 ? 1  			     : value <= OCU_MAX1 ? 2  			     : value <= OCU_MAX2 ? 3  			     : value <= OCU_MAX3 ? 4  			     : 5;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfOrderedUInt32,The following statement contains a magic number: return value <= OCU_MAX0 ? 1  			     : value <= OCU_MAX1 ? 2  			     : value <= OCU_MAX2 ? 3  			     : value <= OCU_MAX3 ? 4  			     : 5;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfOrderedUInt32,The following statement contains a magic number: return value <= OCU_MAX0 ? 1  			     : value <= OCU_MAX1 ? 2  			     : value <= OCU_MAX2 ? 3  			     : value <= OCU_MAX3 ? 4  			     : 5;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfOrderedUInt64,The following statement contains a magic number: return value <= OCU_MAX0 ? 1  				 : value <= OCU_MAX1 ? 2  				 : value <= OCU_MAX2 ? 3  				 : value <= OCU_MAX3 ? 4  				 : value <= OCU_MAX4 ? 5  				 : value <= OCU_MAX5 ? 6  				 : value <= OCU_MAX6 ? 7  				 : value <= OCU_MAX7 ? 8  				 : 0;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfOrderedUInt64,The following statement contains a magic number: return value <= OCU_MAX0 ? 1  				 : value <= OCU_MAX1 ? 2  				 : value <= OCU_MAX2 ? 3  				 : value <= OCU_MAX3 ? 4  				 : value <= OCU_MAX4 ? 5  				 : value <= OCU_MAX5 ? 6  				 : value <= OCU_MAX6 ? 7  				 : value <= OCU_MAX7 ? 8  				 : 0;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfOrderedUInt64,The following statement contains a magic number: return value <= OCU_MAX0 ? 1  				 : value <= OCU_MAX1 ? 2  				 : value <= OCU_MAX2 ? 3  				 : value <= OCU_MAX3 ? 4  				 : value <= OCU_MAX4 ? 5  				 : value <= OCU_MAX5 ? 6  				 : value <= OCU_MAX6 ? 7  				 : value <= OCU_MAX7 ? 8  				 : 0;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfOrderedUInt64,The following statement contains a magic number: return value <= OCU_MAX0 ? 1  				 : value <= OCU_MAX1 ? 2  				 : value <= OCU_MAX2 ? 3  				 : value <= OCU_MAX3 ? 4  				 : value <= OCU_MAX4 ? 5  				 : value <= OCU_MAX5 ? 6  				 : value <= OCU_MAX6 ? 7  				 : value <= OCU_MAX7 ? 8  				 : 0;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfOrderedUInt64,The following statement contains a magic number: return value <= OCU_MAX0 ? 1  				 : value <= OCU_MAX1 ? 2  				 : value <= OCU_MAX2 ? 3  				 : value <= OCU_MAX3 ? 4  				 : value <= OCU_MAX4 ? 5  				 : value <= OCU_MAX5 ? 6  				 : value <= OCU_MAX6 ? 7  				 : value <= OCU_MAX7 ? 8  				 : 0;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfOrderedUInt64,The following statement contains a magic number: return value <= OCU_MAX0 ? 1  				 : value <= OCU_MAX1 ? 2  				 : value <= OCU_MAX2 ? 3  				 : value <= OCU_MAX3 ? 4  				 : value <= OCU_MAX4 ? 5  				 : value <= OCU_MAX5 ? 6  				 : value <= OCU_MAX6 ? 7  				 : value <= OCU_MAX7 ? 8  				 : 0;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,SizeOfOrderedUInt64,The following statement contains a magic number: return value <= OCU_MAX0 ? 1  				 : value <= OCU_MAX1 ? 2  				 : value <= OCU_MAX2 ? 3  				 : value <= OCU_MAX3 ? 4  				 : value <= OCU_MAX4 ? 5  				 : value <= OCU_MAX5 ? 6  				 : value <= OCU_MAX6 ? 7  				 : value <= OCU_MAX7 ? 8  				 : 0;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt32Unsafe,The following statement contains a magic number: cursor[0] = (byte) (OCU_LEN1 | (value >> 8));
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt32Unsafe,The following statement contains a magic number: return cursor + 2;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt32UnsafeSlow,The following statement contains a magic number: cursor[0] = (byte)(OCU_LEN2 | (value >> 16));
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt32UnsafeSlow,The following statement contains a magic number: cursor[1] = (byte)(value >> 8);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt32UnsafeSlow,The following statement contains a magic number: cursor[2] = (byte)(value);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt32UnsafeSlow,The following statement contains a magic number: return cursor + 3;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt32UnsafeSlow,The following statement contains a magic number: cursor[0] = (byte)(OCU_LEN3 | (value >> 24));
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt32UnsafeSlow,The following statement contains a magic number: cursor[1] = (byte)(value >> 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt32UnsafeSlow,The following statement contains a magic number: cursor[2] = (byte)(value >> 8);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt32UnsafeSlow,The following statement contains a magic number: cursor[2] = (byte)(value >> 8);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt32UnsafeSlow,The following statement contains a magic number: cursor[3] = (byte)(value);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt32UnsafeSlow,The following statement contains a magic number: return cursor + 4;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt32UnsafeSlow,The following statement contains a magic number: cursor[1] = (byte)(value >> 24);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt32UnsafeSlow,The following statement contains a magic number: cursor[2] = (byte)(value >> 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt32UnsafeSlow,The following statement contains a magic number: cursor[2] = (byte)(value >> 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt32UnsafeSlow,The following statement contains a magic number: cursor[3] = (byte)(value >> 8);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt32UnsafeSlow,The following statement contains a magic number: cursor[3] = (byte)(value >> 8);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt32UnsafeSlow,The following statement contains a magic number: cursor[4] = (byte)(value);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt32UnsafeSlow,The following statement contains a magic number: return cursor + 5;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[0] = (byte)(OCU_LEN4 | (value >> 32));
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[1] = (byte)(value >> 24);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[2] = (byte)(value >> 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[2] = (byte)(value >> 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[3] = (byte)(value >> 8);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[3] = (byte)(value >> 8);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[4] = (byte)(value);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: return cursor + 5;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[0] = (byte)(OCU_LEN5 | (value >> 40));
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[1] = (byte)(value >> 32);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[2] = (byte)(value >> 24);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[2] = (byte)(value >> 24);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[3] = (byte)(value >> 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[3] = (byte)(value >> 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[4] = (byte)(value >> 8);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[4] = (byte)(value >> 8);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[5] = (byte)(value);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: return cursor + 6;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[0] = (byte)(OCU_LEN6 | (value >> 48));
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[1] = (byte)(value >> 40);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[2] = (byte)(value >> 32);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[2] = (byte)(value >> 32);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[3] = (byte)(value >> 24);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[3] = (byte)(value >> 24);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[4] = (byte)(value >> 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[4] = (byte)(value >> 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[5] = (byte)(value >> 8);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[5] = (byte)(value >> 8);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[6] = (byte)(value);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: return cursor + 7;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[0] = (byte) (OCU_LEN7 | (value >> 56));
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[1] = (byte) (value >> 48);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[2] = (byte) (value >> 40);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[2] = (byte) (value >> 40);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[3] = (byte) (value >> 32);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[3] = (byte) (value >> 32);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[4] = (byte) (value >> 24);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[4] = (byte) (value >> 24);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[5] = (byte) (value >> 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[5] = (byte) (value >> 16);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[6] = (byte) (value >> 8);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[6] = (byte) (value >> 8);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: cursor[7] = (byte) (value);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,WriteOrderedUInt64UnsafeSlow,The following statement contains a magic number: return cursor + 8;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt32Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((uint) cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((uint) cursor[1] << 8) | ((uint) cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((uint)cursor[1] << 16) | ((uint)cursor[2] << 8) | (uint)cursor[3];  					return cursor + 4;  				case 4:  					// start bits MUST be 0 (else' there is an overflow)  					if ((start & OCU_BITMAK) != 0) throw new InvalidDataException(); //TODO: message?  					value = ((uint)cursor[1] << 24) | ((uint)cursor[2] << 16) | ((uint)cursor[3] << 8) | (uint)cursor[4];  					return cursor + 5;  				default:  					// overflow?  					throw new InvalidDataException(); //TODO: message?  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt32Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((uint) cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((uint) cursor[1] << 8) | ((uint) cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((uint)cursor[1] << 16) | ((uint)cursor[2] << 8) | (uint)cursor[3];  					return cursor + 4;  				case 4:  					// start bits MUST be 0 (else' there is an overflow)  					if ((start & OCU_BITMAK) != 0) throw new InvalidDataException(); //TODO: message?  					value = ((uint)cursor[1] << 24) | ((uint)cursor[2] << 16) | ((uint)cursor[3] << 8) | (uint)cursor[4];  					return cursor + 5;  				default:  					// overflow?  					throw new InvalidDataException(); //TODO: message?  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt32Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((uint) cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((uint) cursor[1] << 8) | ((uint) cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((uint)cursor[1] << 16) | ((uint)cursor[2] << 8) | (uint)cursor[3];  					return cursor + 4;  				case 4:  					// start bits MUST be 0 (else' there is an overflow)  					if ((start & OCU_BITMAK) != 0) throw new InvalidDataException(); //TODO: message?  					value = ((uint)cursor[1] << 24) | ((uint)cursor[2] << 16) | ((uint)cursor[3] << 8) | (uint)cursor[4];  					return cursor + 5;  				default:  					// overflow?  					throw new InvalidDataException(); //TODO: message?  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt32Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((uint) cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((uint) cursor[1] << 8) | ((uint) cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((uint)cursor[1] << 16) | ((uint)cursor[2] << 8) | (uint)cursor[3];  					return cursor + 4;  				case 4:  					// start bits MUST be 0 (else' there is an overflow)  					if ((start & OCU_BITMAK) != 0) throw new InvalidDataException(); //TODO: message?  					value = ((uint)cursor[1] << 24) | ((uint)cursor[2] << 16) | ((uint)cursor[3] << 8) | (uint)cursor[4];  					return cursor + 5;  				default:  					// overflow?  					throw new InvalidDataException(); //TODO: message?  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt32Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((uint) cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((uint) cursor[1] << 8) | ((uint) cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((uint)cursor[1] << 16) | ((uint)cursor[2] << 8) | (uint)cursor[3];  					return cursor + 4;  				case 4:  					// start bits MUST be 0 (else' there is an overflow)  					if ((start & OCU_BITMAK) != 0) throw new InvalidDataException(); //TODO: message?  					value = ((uint)cursor[1] << 24) | ((uint)cursor[2] << 16) | ((uint)cursor[3] << 8) | (uint)cursor[4];  					return cursor + 5;  				default:  					// overflow?  					throw new InvalidDataException(); //TODO: message?  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt32Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((uint) cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((uint) cursor[1] << 8) | ((uint) cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((uint)cursor[1] << 16) | ((uint)cursor[2] << 8) | (uint)cursor[3];  					return cursor + 4;  				case 4:  					// start bits MUST be 0 (else' there is an overflow)  					if ((start & OCU_BITMAK) != 0) throw new InvalidDataException(); //TODO: message?  					value = ((uint)cursor[1] << 24) | ((uint)cursor[2] << 16) | ((uint)cursor[3] << 8) | (uint)cursor[4];  					return cursor + 5;  				default:  					// overflow?  					throw new InvalidDataException(); //TODO: message?  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt32Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((uint) cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((uint) cursor[1] << 8) | ((uint) cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((uint)cursor[1] << 16) | ((uint)cursor[2] << 8) | (uint)cursor[3];  					return cursor + 4;  				case 4:  					// start bits MUST be 0 (else' there is an overflow)  					if ((start & OCU_BITMAK) != 0) throw new InvalidDataException(); //TODO: message?  					value = ((uint)cursor[1] << 24) | ((uint)cursor[2] << 16) | ((uint)cursor[3] << 8) | (uint)cursor[4];  					return cursor + 5;  				default:  					// overflow?  					throw new InvalidDataException(); //TODO: message?  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt32Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((uint) cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((uint) cursor[1] << 8) | ((uint) cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((uint)cursor[1] << 16) | ((uint)cursor[2] << 8) | (uint)cursor[3];  					return cursor + 4;  				case 4:  					// start bits MUST be 0 (else' there is an overflow)  					if ((start & OCU_BITMAK) != 0) throw new InvalidDataException(); //TODO: message?  					value = ((uint)cursor[1] << 24) | ((uint)cursor[2] << 16) | ((uint)cursor[3] << 8) | (uint)cursor[4];  					return cursor + 5;  				default:  					// overflow?  					throw new InvalidDataException(); //TODO: message?  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt32Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((uint) cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((uint) cursor[1] << 8) | ((uint) cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((uint)cursor[1] << 16) | ((uint)cursor[2] << 8) | (uint)cursor[3];  					return cursor + 4;  				case 4:  					// start bits MUST be 0 (else' there is an overflow)  					if ((start & OCU_BITMAK) != 0) throw new InvalidDataException(); //TODO: message?  					value = ((uint)cursor[1] << 24) | ((uint)cursor[2] << 16) | ((uint)cursor[3] << 8) | (uint)cursor[4];  					return cursor + 5;  				default:  					// overflow?  					throw new InvalidDataException(); //TODO: message?  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt32Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((uint) cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((uint) cursor[1] << 8) | ((uint) cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((uint)cursor[1] << 16) | ((uint)cursor[2] << 8) | (uint)cursor[3];  					return cursor + 4;  				case 4:  					// start bits MUST be 0 (else' there is an overflow)  					if ((start & OCU_BITMAK) != 0) throw new InvalidDataException(); //TODO: message?  					value = ((uint)cursor[1] << 24) | ((uint)cursor[2] << 16) | ((uint)cursor[3] << 8) | (uint)cursor[4];  					return cursor + 5;  				default:  					// overflow?  					throw new InvalidDataException(); //TODO: message?  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt32Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((uint) cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((uint) cursor[1] << 8) | ((uint) cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((uint)cursor[1] << 16) | ((uint)cursor[2] << 8) | (uint)cursor[3];  					return cursor + 4;  				case 4:  					// start bits MUST be 0 (else' there is an overflow)  					if ((start & OCU_BITMAK) != 0) throw new InvalidDataException(); //TODO: message?  					value = ((uint)cursor[1] << 24) | ((uint)cursor[2] << 16) | ((uint)cursor[3] << 8) | (uint)cursor[4];  					return cursor + 5;  				default:  					// overflow?  					throw new InvalidDataException(); //TODO: message?  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt32Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((uint) cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((uint) cursor[1] << 8) | ((uint) cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((uint)cursor[1] << 16) | ((uint)cursor[2] << 8) | (uint)cursor[3];  					return cursor + 4;  				case 4:  					// start bits MUST be 0 (else' there is an overflow)  					if ((start & OCU_BITMAK) != 0) throw new InvalidDataException(); //TODO: message?  					value = ((uint)cursor[1] << 24) | ((uint)cursor[2] << 16) | ((uint)cursor[3] << 8) | (uint)cursor[4];  					return cursor + 5;  				default:  					// overflow?  					throw new InvalidDataException(); //TODO: message?  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt32Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((uint) cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((uint) cursor[1] << 8) | ((uint) cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((uint)cursor[1] << 16) | ((uint)cursor[2] << 8) | (uint)cursor[3];  					return cursor + 4;  				case 4:  					// start bits MUST be 0 (else' there is an overflow)  					if ((start & OCU_BITMAK) != 0) throw new InvalidDataException(); //TODO: message?  					value = ((uint)cursor[1] << 24) | ((uint)cursor[2] << 16) | ((uint)cursor[3] << 8) | (uint)cursor[4];  					return cursor + 5;  				default:  					// overflow?  					throw new InvalidDataException(); //TODO: message?  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt32Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((uint) cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((uint) cursor[1] << 8) | ((uint) cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((uint)cursor[1] << 16) | ((uint)cursor[2] << 8) | (uint)cursor[3];  					return cursor + 4;  				case 4:  					// start bits MUST be 0 (else' there is an overflow)  					if ((start & OCU_BITMAK) != 0) throw new InvalidDataException(); //TODO: message?  					value = ((uint)cursor[1] << 24) | ((uint)cursor[2] << 16) | ((uint)cursor[3] << 8) | (uint)cursor[4];  					return cursor + 5;  				default:  					// overflow?  					throw new InvalidDataException(); //TODO: message?  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt32Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((uint) cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((uint) cursor[1] << 8) | ((uint) cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((uint)cursor[1] << 16) | ((uint)cursor[2] << 8) | (uint)cursor[3];  					return cursor + 4;  				case 4:  					// start bits MUST be 0 (else' there is an overflow)  					if ((start & OCU_BITMAK) != 0) throw new InvalidDataException(); //TODO: message?  					value = ((uint)cursor[1] << 24) | ((uint)cursor[2] << 16) | ((uint)cursor[3] << 8) | (uint)cursor[4];  					return cursor + 5;  				default:  					// overflow?  					throw new InvalidDataException(); //TODO: message?  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt32Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((uint) cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((uint) cursor[1] << 8) | ((uint) cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((uint)cursor[1] << 16) | ((uint)cursor[2] << 8) | (uint)cursor[3];  					return cursor + 4;  				case 4:  					// start bits MUST be 0 (else' there is an overflow)  					if ((start & OCU_BITMAK) != 0) throw new InvalidDataException(); //TODO: message?  					value = ((uint)cursor[1] << 24) | ((uint)cursor[2] << 16) | ((uint)cursor[3] << 8) | (uint)cursor[4];  					return cursor + 5;  				default:  					// overflow?  					throw new InvalidDataException(); //TODO: message?  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt32Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((uint) cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((uint) cursor[1] << 8) | ((uint) cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((uint)cursor[1] << 16) | ((uint)cursor[2] << 8) | (uint)cursor[3];  					return cursor + 4;  				case 4:  					// start bits MUST be 0 (else' there is an overflow)  					if ((start & OCU_BITMAK) != 0) throw new InvalidDataException(); //TODO: message?  					value = ((uint)cursor[1] << 24) | ((uint)cursor[2] << 16) | ((uint)cursor[3] << 8) | (uint)cursor[4];  					return cursor + 5;  				default:  					// overflow?  					throw new InvalidDataException(); //TODO: message?  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt32Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((uint) cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((uint) cursor[1] << 8) | ((uint) cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((uint)cursor[1] << 16) | ((uint)cursor[2] << 8) | (uint)cursor[3];  					return cursor + 4;  				case 4:  					// start bits MUST be 0 (else' there is an overflow)  					if ((start & OCU_BITMAK) != 0) throw new InvalidDataException(); //TODO: message?  					value = ((uint)cursor[1] << 24) | ((uint)cursor[2] << 16) | ((uint)cursor[3] << 8) | (uint)cursor[4];  					return cursor + 5;  				default:  					// overflow?  					throw new InvalidDataException(); //TODO: message?  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt32Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((uint) cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((uint) cursor[1] << 8) | ((uint) cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((uint)cursor[1] << 16) | ((uint)cursor[2] << 8) | (uint)cursor[3];  					return cursor + 4;  				case 4:  					// start bits MUST be 0 (else' there is an overflow)  					if ((start & OCU_BITMAK) != 0) throw new InvalidDataException(); //TODO: message?  					value = ((uint)cursor[1] << 24) | ((uint)cursor[2] << 16) | ((uint)cursor[3] << 8) | (uint)cursor[4];  					return cursor + 5;  				default:  					// overflow?  					throw new InvalidDataException(); //TODO: message?  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt32Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((uint) cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((uint) cursor[1] << 8) | ((uint) cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((uint)cursor[1] << 16) | ((uint)cursor[2] << 8) | (uint)cursor[3];  					return cursor + 4;  				case 4:  					// start bits MUST be 0 (else' there is an overflow)  					if ((start & OCU_BITMAK) != 0) throw new InvalidDataException(); //TODO: message?  					value = ((uint)cursor[1] << 24) | ((uint)cursor[2] << 16) | ((uint)cursor[3] << 8) | (uint)cursor[4];  					return cursor + 5;  				default:  					// overflow?  					throw new InvalidDataException(); //TODO: message?  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt32Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((uint) cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((uint) cursor[1] << 8) | ((uint) cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((uint)cursor[1] << 16) | ((uint)cursor[2] << 8) | (uint)cursor[3];  					return cursor + 4;  				case 4:  					// start bits MUST be 0 (else' there is an overflow)  					if ((start & OCU_BITMAK) != 0) throw new InvalidDataException(); //TODO: message?  					value = ((uint)cursor[1] << 24) | ((uint)cursor[2] << 16) | ((uint)cursor[3] << 8) | (uint)cursor[4];  					return cursor + 5;  				default:  					// overflow?  					throw new InvalidDataException(); //TODO: message?  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt32Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((uint) cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((uint) cursor[1] << 8) | ((uint) cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((uint)cursor[1] << 16) | ((uint)cursor[2] << 8) | (uint)cursor[3];  					return cursor + 4;  				case 4:  					// start bits MUST be 0 (else' there is an overflow)  					if ((start & OCU_BITMAK) != 0) throw new InvalidDataException(); //TODO: message?  					value = ((uint)cursor[1] << 24) | ((uint)cursor[2] << 16) | ((uint)cursor[3] << 8) | (uint)cursor[4];  					return cursor + 5;  				default:  					// overflow?  					throw new InvalidDataException(); //TODO: message?  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt32Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((uint) cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((uint) cursor[1] << 8) | ((uint) cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((uint)cursor[1] << 16) | ((uint)cursor[2] << 8) | (uint)cursor[3];  					return cursor + 4;  				case 4:  					// start bits MUST be 0 (else' there is an overflow)  					if ((start & OCU_BITMAK) != 0) throw new InvalidDataException(); //TODO: message?  					value = ((uint)cursor[1] << 24) | ((uint)cursor[2] << 16) | ((uint)cursor[3] << 8) | (uint)cursor[4];  					return cursor + 5;  				default:  					// overflow?  					throw new InvalidDataException(); //TODO: message?  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ReadOrderedUInt64Unsafe,The following statement contains a magic number: switch (start >> 5)  			{  				case 0:  					value = (start & OCU_BITMAK);  					return cursor + 1;  				case 1:  					value = ((start & OCU_BITMAK) << 8) | ((ulong)cursor[1]);  					return cursor + 2;  				case 2:  					value = ((start & OCU_BITMAK) << 16) | ((ulong)cursor[1] << 8) | ((ulong)cursor[2]);  					return cursor + 3;  				case 3:  					value = ((start & OCU_BITMAK) << 24) | ((ulong)cursor[1] << 16) | ((ulong)cursor[2] << 8) | ((ulong)cursor[3]);  					return cursor + 4;  				case 4:  					value = ((start & OCU_BITMAK) << 32) | ((ulong)cursor[1] << 24) | ((ulong)cursor[2] << 16) | ((ulong)cursor[3] << 8) | ((ulong)cursor[4]);  					return cursor + 5;  				case 5:  					value = ((start & OCU_BITMAK) << 40) | ((ulong)cursor[1] << 32) | ((ulong)cursor[2] << 24) | ((ulong)cursor[3] << 16) | ((ulong)cursor[4] << 8) | ((ulong)cursor[5]);  					return cursor + 6;  				case 6:  					value = ((start & OCU_BITMAK) << 48) | ((ulong)cursor[1] << 40) | ((ulong)cursor[2] << 32) | ((ulong)cursor[3] << 24) | ((ulong)cursor[4] << 16) | ((ulong)cursor[5] << 8) | ((ulong)cursor[6]);  					return cursor + 7;  				default: // 7  					value = ((start & OCU_BITMAK) << 56) | ((ulong)cursor[1] << 48) | ((ulong)cursor[2] << 40) | ((ulong)cursor[3] << 32) | ((ulong)cursor[4] << 24) | ((ulong)cursor[5] << 16) | ((ulong)cursor[6] << 8) | ((ulong)cursor[7]);  					return cursor + 8;  			}
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,Nibble,The following statement contains a magic number: return (c & 15) + (((((c + 16) & ~64) >> 4) & 1) * 9);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,Nibble,The following statement contains a magic number: return (c & 15) + (((((c + 16) & ~64) >> 4) & 1) * 9);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,Nibble,The following statement contains a magic number: return (c & 15) + (((((c + 16) & ~64) >> 4) & 1) * 9);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,Nibble,The following statement contains a magic number: return (c & 15) + (((((c + 16) & ~64) >> 4) & 1) * 9);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,Nibble,The following statement contains a magic number: return (c & 15) + (((((c + 16) & ~64) >> 4) & 1) * 9);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,Nibble,The following statement contains a magic number: int tmp = ((x & 0xF) + 54);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,Nibble,The following statement contains a magic number: return (char)(tmp + 1 - ((tmp & 32) >> 5) * 7);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,Nibble,The following statement contains a magic number: return (char)(tmp + 1 - ((tmp & 32) >> 5) * 7);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,Nibble,The following statement contains a magic number: return (char)(tmp + 1 - ((tmp & 32) >> 5) * 7);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,IsAsciiString,The following statement contains a magic number: char* end = ptr + (numChars & ~15);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,IsAsciiString,The following statement contains a magic number: ulong x2 = *(ulong*) (ptr + 4);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,IsAsciiString,The following statement contains a magic number: ulong x3 = *(ulong*) (ptr + 8);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,IsAsciiString,The following statement contains a magic number: ulong x4 = *(ulong*) (ptr + 12);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,IsAsciiString,The following statement contains a magic number: ptr += 16;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,IsAsciiString,The following statement contains a magic number: ulong x2 = *(ulong*) (ptr + 4);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,IsAsciiString,The following statement contains a magic number: ptr += 8;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,IsAsciiString,The following statement contains a magic number: (numChars & 8) != 0
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,IsAsciiString,The following statement contains a magic number: ptr += 4;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,IsAsciiString,The following statement contains a magic number: (numChars & 4) != 0
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,IsAsciiString,The following statement contains a magic number: ptr += 2;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,IsAsciiString,The following statement contains a magic number: (numChars & 2) != 0
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,IsAsciiBytes,The following statement contains a magic number: byte* end = buffer + (count & ~31);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,IsAsciiBytes,The following statement contains a magic number: ulong x3 = *((ulong*) ptr + 2);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,IsAsciiBytes,The following statement contains a magic number: ulong x4 = *((ulong*) ptr + 3);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,IsAsciiBytes,The following statement contains a magic number: ptr += 32;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,IsAsciiBytes,The following statement contains a magic number: ptr += 16;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,IsAsciiBytes,The following statement contains a magic number: (count & 16) != 0
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,IsAsciiBytes,The following statement contains a magic number: ptr += 8;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,IsAsciiBytes,The following statement contains a magic number: (count & 8) != 0
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,IsAsciiBytes,The following statement contains a magic number: ptr += 4;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,IsAsciiBytes,The following statement contains a magic number: (count & 4) != 0
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,IsAsciiBytes,The following statement contains a magic number: ptr += 2;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,IsAsciiBytes,The following statement contains a magic number: (count & 2) != 0
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ConvertToByteStringUnsafe,The following statement contains a magic number: byte* inend = pBytes + (count & ~3);
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ConvertToByteStringUnsafe,The following statement contains a magic number: y2 <<= 8;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ConvertToByteStringUnsafe,The following statement contains a magic number: y3 <<= 16;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ConvertToByteStringUnsafe,The following statement contains a magic number: y4 <<= 24;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ConvertToByteStringUnsafe,The following statement contains a magic number: inp += 4;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ConvertToByteStringUnsafe,The following statement contains a magic number: outp += 4;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ConvertToByteStringUnsafe,The following statement contains a magic number: y2 <<= 8;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ConvertToByteStringUnsafe,The following statement contains a magic number: inp += 2;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ConvertToByteStringUnsafe,The following statement contains a magic number: outp += 2;
Magic Number,Doxense.Memory,UnsafeHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\UnsafeHelpers.cs,ConvertToByteStringUnsafe,The following statement contains a magic number: (count & 2) != 0
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,FastTryGetInt,The following statement contains a magic number: int res = c - 48;
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,FastTryGetInt,The following statement contains a magic number: res = res * 10 + (c - 48);
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,FastTryGetInt,The following statement contains a magic number: res = res * 10 + (c - 48);
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,FastTryGetLong,The following statement contains a magic number: int res = c - 48;
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,FastTryGetLong,The following statement contains a magic number: res = res * 10 + (c - 48);
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,FastTryGetLong,The following statement contains a magic number: res = res * 10 + (c - 48);
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,ToInt32,The following statement contains a magic number: return char.IsDigit(c) ? c - 48 : defaultValue;
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,ToInt32,The following statement contains a magic number: return char.IsDigit(c) ? (c - 48) : default(int?);
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,ToInt64,The following statement contains a magic number: return char.IsDigit(c) ? ((long) c - 48) : defaultValue;
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,ToInt64,The following statement contains a magic number: return char.IsDigit(c) ? ((long) c - 48) : default(long?);
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,ParseDateSegmentUnsafe,The following statement contains a magic number: sum < 0 || sum >= 10
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,ParseDateSegmentUnsafe,The following statement contains a magic number: d < 0 || d >= 10
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,ParseDateSegmentUnsafe,The following statement contains a magic number: sum = (sum * 10) + d;
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: date.Length < 4
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following statement contains a magic number: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Magic Number,Doxense.Collections.Tuples.Encoding,TupleEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,WriteTo,The following statement contains a magic number: n <= 4
Magic Number,Doxense.Collections.Tuples.Encoding,TupleEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,Pack,The following statement contains a magic number: var writer = new TupleWriter(32 + prefix.Count);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,Pack,The following statement contains a magic number: var writer = new TupleWriter(tuples.Length * (16 + prefix.Count));
Magic Number,Doxense.Collections.Tuples.Encoding,TupleEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,Pack,The following statement contains a magic number: var writer = new TupleWriter(next.Capacity * (16 + prefix.Count));
Magic Number,Doxense.Collections.Tuples.Encoding,TupleEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,Pack,The following statement contains a magic number: var writer = new TupleWriter(next.Capacity * (16 + prefix.Count));
Magic Number,Doxense.Collections.Tuples.Encoding,TupleEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,Pack,The following statement contains a magic number: var writer = new TupleWriter(next.Capacity * (16 + prefix.Count));
Magic Number,Doxense.Collections.Tuples.Encoding,TupleEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,EncodeKeys,The following statement contains a magic number: var writer = new TupleWriter(keys.Length * (prefix.Count + 8));
Magic Number,Doxense.Collections.Tuples.Encoding,TupleEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,EncodeKeys,The following statement contains a magic number: var writer = new TupleWriter(elements.Length * (prefix.Count + 8));
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,WriteKeyPartsTo,The following statement contains a magic number: switch (count)  				{  					case 2: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2); break;  					case 1: TupleEncoder.WriteKeysTo(ref writer' key.Item1); break;  					default: throw new ArgumentOutOfRangeException(nameof(count)' count' "Item count must be either 1 or 2");  				}
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The following statement contains a magic number: count != 1 & count != 2
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The following statement contains a magic number: key.Item2 = count == 2 ? t.Get<T2>(1) : default;
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,WriteKeyPartsTo,The following statement contains a magic number: switch (count)  				{  					case 3: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3); break;  					case 2: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2); break;  					case 1: TupleEncoder.WriteKeysTo(ref writer' key.Item1); break;  					default: throw new ArgumentOutOfRangeException(nameof(count)' count' "Item count must be between 1 and 3");  				}
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,WriteKeyPartsTo,The following statement contains a magic number: switch (count)  				{  					case 3: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3); break;  					case 2: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2); break;  					case 1: TupleEncoder.WriteKeysTo(ref writer' key.Item1); break;  					default: throw new ArgumentOutOfRangeException(nameof(count)' count' "Item count must be between 1 and 3");  				}
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The following statement contains a magic number: count < 1 | count > 3
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The following statement contains a magic number: key.Item2 = count >= 2 ? t.Get<T2>(1) : default;
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The following statement contains a magic number: key.Item3 = count >= 3 ? t.Get<T3>(2) : default;
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The following statement contains a magic number: key.Item3 = count >= 3 ? t.Get<T3>(2) : default;
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,WriteKeyPartsTo,The following statement contains a magic number: switch (count)  				{  					case 4: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3' key.Item4); break;  					case 3: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3); break;  					case 2: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2); break;  					case 1: TupleEncoder.WriteKeysTo(ref writer' key.Item1); break;  					default: throw new ArgumentOutOfRangeException(nameof(count)' count' "Item count must be between 1 and 4");  				}
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,WriteKeyPartsTo,The following statement contains a magic number: switch (count)  				{  					case 4: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3' key.Item4); break;  					case 3: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3); break;  					case 2: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2); break;  					case 1: TupleEncoder.WriteKeysTo(ref writer' key.Item1); break;  					default: throw new ArgumentOutOfRangeException(nameof(count)' count' "Item count must be between 1 and 4");  				}
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,WriteKeyPartsTo,The following statement contains a magic number: switch (count)  				{  					case 4: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3' key.Item4); break;  					case 3: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3); break;  					case 2: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2); break;  					case 1: TupleEncoder.WriteKeysTo(ref writer' key.Item1); break;  					default: throw new ArgumentOutOfRangeException(nameof(count)' count' "Item count must be between 1 and 4");  				}
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The following statement contains a magic number: count < 1 || count > 4
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The following statement contains a magic number: key.Item2 = count >= 2 ? t.Get<T2>(1) : default;
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The following statement contains a magic number: key.Item3 = count >= 3 ? t.Get<T3>(2) : default;
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The following statement contains a magic number: key.Item3 = count >= 3 ? t.Get<T3>(2) : default;
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The following statement contains a magic number: key.Item4 = count >= 4 ? t.Get<T4>(3) : default;
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The following statement contains a magic number: key.Item4 = count >= 4 ? t.Get<T4>(3) : default;
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4;T5>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,WriteKeyPartsTo,The following statement contains a magic number: switch (count)  				{  					case 5: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3' key.Item4' key.Item5); break;  					case 4: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3' key.Item4); break;  					case 3: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3); break;  					case 2: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2); break;  					case 1: TupleEncoder.WriteKeysTo(ref writer' key.Item1); break;  					default: throw new ArgumentOutOfRangeException(nameof(count)' count' "Item count must be between 1 and 5");  				}
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4;T5>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,WriteKeyPartsTo,The following statement contains a magic number: switch (count)  				{  					case 5: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3' key.Item4' key.Item5); break;  					case 4: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3' key.Item4); break;  					case 3: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3); break;  					case 2: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2); break;  					case 1: TupleEncoder.WriteKeysTo(ref writer' key.Item1); break;  					default: throw new ArgumentOutOfRangeException(nameof(count)' count' "Item count must be between 1 and 5");  				}
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4;T5>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,WriteKeyPartsTo,The following statement contains a magic number: switch (count)  				{  					case 5: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3' key.Item4' key.Item5); break;  					case 4: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3' key.Item4); break;  					case 3: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3); break;  					case 2: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2); break;  					case 1: TupleEncoder.WriteKeysTo(ref writer' key.Item1); break;  					default: throw new ArgumentOutOfRangeException(nameof(count)' count' "Item count must be between 1 and 5");  				}
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4;T5>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,WriteKeyPartsTo,The following statement contains a magic number: switch (count)  				{  					case 5: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3' key.Item4' key.Item5); break;  					case 4: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3' key.Item4); break;  					case 3: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3); break;  					case 2: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2); break;  					case 1: TupleEncoder.WriteKeysTo(ref writer' key.Item1); break;  					default: throw new ArgumentOutOfRangeException(nameof(count)' count' "Item count must be between 1 and 5");  				}
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4;T5>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The following statement contains a magic number: count < 1 || count > 5
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4;T5>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The following statement contains a magic number: key.Item2 = count >= 2 ? t.Get<T2>(1) : default;
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4;T5>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The following statement contains a magic number: key.Item3 = count >= 3 ? t.Get<T3>(2) : default;
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4;T5>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The following statement contains a magic number: key.Item3 = count >= 3 ? t.Get<T3>(2) : default;
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4;T5>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The following statement contains a magic number: key.Item4 = count >= 4 ? t.Get<T4>(3) : default;
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4;T5>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The following statement contains a magic number: key.Item4 = count >= 4 ? t.Get<T4>(3) : default;
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4;T5>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The following statement contains a magic number: key.Item5 = count >= 5 ? t.Get<T5>(4) : default;
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4;T5>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The following statement contains a magic number: key.Item5 = count >= 5 ? t.Get<T5>(4) : default;
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4;T5;T6>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,WriteKeyPartsTo,The following statement contains a magic number: switch (count)  				{  					case 6: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3' key.Item4' key.Item5' key.Item6); break;  					case 5: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3' key.Item4' key.Item5); break;  					case 4: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3' key.Item4); break;  					case 3: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3); break;  					case 2: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2); break;  					case 1: TupleEncoder.WriteKeysTo(ref writer' key.Item1); break;  					default: throw new ArgumentOutOfRangeException(nameof(count)' count' "Item count must be between 1 and 6");  				}
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4;T5;T6>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,WriteKeyPartsTo,The following statement contains a magic number: switch (count)  				{  					case 6: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3' key.Item4' key.Item5' key.Item6); break;  					case 5: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3' key.Item4' key.Item5); break;  					case 4: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3' key.Item4); break;  					case 3: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3); break;  					case 2: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2); break;  					case 1: TupleEncoder.WriteKeysTo(ref writer' key.Item1); break;  					default: throw new ArgumentOutOfRangeException(nameof(count)' count' "Item count must be between 1 and 6");  				}
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4;T5;T6>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,WriteKeyPartsTo,The following statement contains a magic number: switch (count)  				{  					case 6: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3' key.Item4' key.Item5' key.Item6); break;  					case 5: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3' key.Item4' key.Item5); break;  					case 4: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3' key.Item4); break;  					case 3: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3); break;  					case 2: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2); break;  					case 1: TupleEncoder.WriteKeysTo(ref writer' key.Item1); break;  					default: throw new ArgumentOutOfRangeException(nameof(count)' count' "Item count must be between 1 and 6");  				}
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4;T5;T6>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,WriteKeyPartsTo,The following statement contains a magic number: switch (count)  				{  					case 6: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3' key.Item4' key.Item5' key.Item6); break;  					case 5: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3' key.Item4' key.Item5); break;  					case 4: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3' key.Item4); break;  					case 3: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3); break;  					case 2: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2); break;  					case 1: TupleEncoder.WriteKeysTo(ref writer' key.Item1); break;  					default: throw new ArgumentOutOfRangeException(nameof(count)' count' "Item count must be between 1 and 6");  				}
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4;T5;T6>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,WriteKeyPartsTo,The following statement contains a magic number: switch (count)  				{  					case 6: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3' key.Item4' key.Item5' key.Item6); break;  					case 5: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3' key.Item4' key.Item5); break;  					case 4: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3' key.Item4); break;  					case 3: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2' key.Item3); break;  					case 2: TupleEncoder.WriteKeysTo(ref writer' key.Item1' key.Item2); break;  					case 1: TupleEncoder.WriteKeysTo(ref writer' key.Item1); break;  					default: throw new ArgumentOutOfRangeException(nameof(count)' count' "Item count must be between 1 and 6");  				}
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4;T5;T6>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The following statement contains a magic number: count < 1 || count > 6
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4;T5;T6>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The following statement contains a magic number: key.Item2 = count >= 2 ? t.Get<T2>(1) : default;
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4;T5;T6>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The following statement contains a magic number: key.Item3 = count >= 3 ? t.Get<T3>(2) : default;
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4;T5;T6>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The following statement contains a magic number: key.Item3 = count >= 3 ? t.Get<T3>(2) : default;
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4;T5;T6>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The following statement contains a magic number: key.Item4 = count >= 4 ? t.Get<T4>(3) : default;
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4;T5;T6>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The following statement contains a magic number: key.Item4 = count >= 4 ? t.Get<T4>(3) : default;
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4;T5;T6>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The following statement contains a magic number: key.Item5 = count >= 5 ? t.Get<T5>(4) : default;
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4;T5;T6>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The following statement contains a magic number: key.Item5 = count >= 5 ? t.Get<T5>(4) : default;
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4;T5;T6>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The following statement contains a magic number: key.Item6 = count >= 6 ? t.Get<T6>(5) : default;
Magic Number,Doxense.Collections.Tuples.Encoding,CompositeEncoder<T1;T2;T3;T4;T5;T6>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleEncoder.cs,ReadKeyPartsFrom,The following statement contains a magic number: key.Item6 = count >= 6 ? t.Get<T6>(5) : default;
Magic Number,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,SerializeTo,The following statement contains a magic number: const long UNIX_EPOCH_EPOCH = 621355968000000000L;
Magic Number,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,DeserializeBoolean,The following statement contains a magic number: switch (type)  			{  				case TupleTypes.Bytes:  				{ // empty is false' all other is true  					return slice.Count != 2; // <01><00>  				}  				case TupleTypes.Utf8:  				{// empty is false' all other is true  					return slice.Count != 2; // <02><00>  				}  				case TupleTypes.Single:  				{  					//TODO: should NaN considered to be false ?  					//=> it is the "null" of the floats' so if we do' 'null' should also be considered false  					// ReSharper disable once CompareOfFloatsByEqualityOperator  					return 0f != TupleParser.ParseSingle(slice);  				}  				case TupleTypes.Double:  				{  					//TODO: should NaN considered to be false ?  					//=> it is the "null" of the floats' so if we do' 'null' should also be considered false  					// ReSharper disable once CompareOfFloatsByEqualityOperator  					return 0d != TupleParser.ParseDouble(slice);  				}  				//TODO: triple  				case TupleTypes.Decimal:  				{  					return 0m != TupleParser.ParseDecimal(slice);  				}  				case TupleTypes.False:  				{  					return false;  				}  				case TupleTypes.True:  				{  					return true;  				}  			}
Magic Number,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,DeserializeBoolean,The following statement contains a magic number: switch (type)  			{  				case TupleTypes.Bytes:  				{ // empty is false' all other is true  					return slice.Count != 2; // <01><00>  				}  				case TupleTypes.Utf8:  				{// empty is false' all other is true  					return slice.Count != 2; // <02><00>  				}  				case TupleTypes.Single:  				{  					//TODO: should NaN considered to be false ?  					//=> it is the "null" of the floats' so if we do' 'null' should also be considered false  					// ReSharper disable once CompareOfFloatsByEqualityOperator  					return 0f != TupleParser.ParseSingle(slice);  				}  				case TupleTypes.Double:  				{  					//TODO: should NaN considered to be false ?  					//=> it is the "null" of the floats' so if we do' 'null' should also be considered false  					// ReSharper disable once CompareOfFloatsByEqualityOperator  					return 0d != TupleParser.ParseDouble(slice);  				}  				//TODO: triple  				case TupleTypes.Decimal:  				{  					return 0m != TupleParser.ParseDecimal(slice);  				}  				case TupleTypes.False:  				{  					return false;  				}  				case TupleTypes.True:  				{  					return true;  				}  			}
Magic Number,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,DeserializeDateTime,The following statement contains a magic number: switch(type)  			{  				case TupleTypes.Nil:  				{  					return DateTime.MinValue;  				}    				case TupleTypes.Utf8:  				{ // we only support ISO 8601 dates. For ex: YYYY-MM-DDTHH:MM:SS.fffff"  					string str = TupleParser.ParseUnicode(slice);  					return DateTime.Parse(str' CultureInfo.InvariantCulture' DateTimeStyles.RoundtripKind);  				}    				case TupleTypes.Double:  				{ // Number of days since Epoch  					const long UNIX_EPOCH_TICKS = 621355968000000000L;  					//note: we can't user TimeSpan.FromDays(...) because it rounds to the nearest millisecond!  					long ticks = UNIX_EPOCH_TICKS + (long)(TupleParser.ParseDouble(slice) * TimeSpan.TicksPerDay);  					return new DateTime(ticks' DateTimeKind.Utc);  				}    				case TupleTypes.Decimal:  				{  					const long UNIX_EPOCH_TICKS = 621355968000000000L;  					//note: we can't user TimeSpan.FromDays(...) because it rounds to the nearest millisecond!  					long ticks = UNIX_EPOCH_TICKS + (long)(TupleParser.ParseDecimal(slice) * TimeSpan.TicksPerDay);  					return new DateTime(ticks' DateTimeKind.Utc);  				}  			}
Magic Number,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,DeserializeDateTime,The following statement contains a magic number: switch(type)  			{  				case TupleTypes.Nil:  				{  					return DateTime.MinValue;  				}    				case TupleTypes.Utf8:  				{ // we only support ISO 8601 dates. For ex: YYYY-MM-DDTHH:MM:SS.fffff"  					string str = TupleParser.ParseUnicode(slice);  					return DateTime.Parse(str' CultureInfo.InvariantCulture' DateTimeStyles.RoundtripKind);  				}    				case TupleTypes.Double:  				{ // Number of days since Epoch  					const long UNIX_EPOCH_TICKS = 621355968000000000L;  					//note: we can't user TimeSpan.FromDays(...) because it rounds to the nearest millisecond!  					long ticks = UNIX_EPOCH_TICKS + (long)(TupleParser.ParseDouble(slice) * TimeSpan.TicksPerDay);  					return new DateTime(ticks' DateTimeKind.Utc);  				}    				case TupleTypes.Decimal:  				{  					const long UNIX_EPOCH_TICKS = 621355968000000000L;  					//note: we can't user TimeSpan.FromDays(...) because it rounds to the nearest millisecond!  					long ticks = UNIX_EPOCH_TICKS + (long)(TupleParser.ParseDecimal(slice) * TimeSpan.TicksPerDay);  					return new DateTime(ticks' DateTimeKind.Utc);  				}  			}
Magic Number,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,Unpack,The following statement contains a magic number: var items = new Slice[4];
Magic Number,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,Unpack,The following statement contains a magic number: Array.Resize(ref items' p + 4);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteInt32,The following statement contains a magic number: writer.Output.WriteBytes(TupleTypes.IntNeg1' (byte) (255 + value));
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteInt32,The following statement contains a magic number: value > -256
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteInt32,The following statement contains a magic number: value <= 255
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteInt64,The following statement contains a magic number: writer.Output.WriteBytes(TupleTypes.IntNeg1' (byte) (255 + value));
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteInt64,The following statement contains a magic number: value > -256
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteInt64,The following statement contains a magic number: value <= 255
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteInt64Slow,The following statement contains a magic number: int shift = bytes << 3;
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteInt64Slow,The following statement contains a magic number: shift -= 8;
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteUInt32,The following statement contains a magic number: value <= 255
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteUInt64,The following statement contains a magic number: value <= 255
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteUInt64Slow,The following statement contains a magic number: int shift = bytes << 3;
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteUInt64Slow,The following statement contains a magic number: shift -= 8;
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteSingle,The following statement contains a magic number: var buffer = writer.Output.Allocate(5);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteSingle,The following statement contains a magic number: buffer[1] = (byte)(bits >> 24);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteSingle,The following statement contains a magic number: buffer[2] = (byte)(bits >> 16);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteSingle,The following statement contains a magic number: buffer[2] = (byte)(bits >> 16);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteSingle,The following statement contains a magic number: buffer[3] = (byte)(bits >> 8);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteSingle,The following statement contains a magic number: buffer[3] = (byte)(bits >> 8);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteSingle,The following statement contains a magic number: buffer[4] = (byte)(bits);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteDouble,The following statement contains a magic number: var buffer = writer.Output.AllocateSpan(9);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteDouble,The following statement contains a magic number: buffer[1] = (byte)(bits >> 56);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteDouble,The following statement contains a magic number: buffer[2] = (byte)(bits >> 48);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteDouble,The following statement contains a magic number: buffer[2] = (byte)(bits >> 48);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteDouble,The following statement contains a magic number: buffer[3] = (byte)(bits >> 40);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteDouble,The following statement contains a magic number: buffer[3] = (byte)(bits >> 40);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteDouble,The following statement contains a magic number: buffer[4] = (byte)(bits >> 32);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteDouble,The following statement contains a magic number: buffer[4] = (byte)(bits >> 32);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteDouble,The following statement contains a magic number: buffer[5] = (byte)(bits >> 24);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteDouble,The following statement contains a magic number: buffer[5] = (byte)(bits >> 24);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteDouble,The following statement contains a magic number: buffer[6] = (byte)(bits >> 16);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteDouble,The following statement contains a magic number: buffer[6] = (byte)(bits >> 16);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteDouble,The following statement contains a magic number: buffer[7] = (byte)(bits >> 8);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteDouble,The following statement contains a magic number: buffer[7] = (byte)(bits >> 8);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteDouble,The following statement contains a magic number: buffer[8] = (byte)(bits);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteUnescapedAsciiChars,The following statement contains a magic number: writer.Output.EnsureBytes(2 + count);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,TryWriteUnescapedUtf8String,The following statement contains a magic number: (mask >> 7) == 0
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,TryWriteUnescapedUtf8String,The following statement contains a magic number: const int CHUNK_SIZE = 1024;
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,TryWriteUnescapedUtf8String,The following statement contains a magic number: writer.Output.EnsureBytes(checked(2 + count + (count >> 1)));
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteNulEscapedBytes,The following statement contains a magic number: writer.Output.EnsureBytes(n + 2);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteGuid,The following statement contains a magic number: var span = writer.Output.AllocateSpan(17);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteUuid128,The following statement contains a magic number: var span = writer.Output.AllocateSpan(17);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteUuid96,The following statement contains a magic number: var span = writer.Output.AllocateSpan(13);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteUuid80,The following statement contains a magic number: var span = writer.Output.AllocateSpan(11);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteUuid64,The following statement contains a magic number: var span = writer.Output.AllocateSpan(9);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,WriteVersionStamp,The following statement contains a magic number: var span = writer.Output.AllocateSpan(13);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseInt64,The following statement contains a magic number: bytes > 8
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseInt64,The following statement contains a magic number: value |= (-1L << (bytes << 3));
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseInt64,The following statement contains a magic number: bytes < 8
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseBytes,The following statement contains a magic number: slice.Count <= 2
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseBytes,The following statement contains a magic number: var chunk = slice.Substring(1' slice.Count - 2);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseAscii,The following statement contains a magic number: slice.Count <= 2
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseAscii,The following statement contains a magic number: var chunk = slice.Substring(1' slice.Count - 2);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseUnicode,The following statement contains a magic number: slice.Count <= 2
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseUnicode,The following statement contains a magic number: var chunk = slice.Substring(1' slice.Count - 2);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseTuple,The following statement contains a magic number: slice.Count <= 2
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseTuple,The following statement contains a magic number: return TuplePackers.Unpack(slice.Substring(1' slice.Count - 2)' true);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseSingle,The following statement contains a magic number: slice.Count != 5
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseSingle,The following statement contains a magic number: uint bits = slice.ReadUInt32BE(1' 4);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseDouble,The following statement contains a magic number: slice.Count != 9
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseDouble,The following statement contains a magic number: ulong bits = slice.ReadUInt64BE(1' 8);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseDecimal,The following statement contains a magic number: slice.Count != 17
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseGuid,The following statement contains a magic number: slice.Count != 17
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseGuid,The following statement contains a magic number: return Uuid128.Convert(slice.Substring(1' 16));
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseUuid128,The following statement contains a magic number: slice.Count != 17
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseUuid128,The following statement contains a magic number: return new Uuid128(slice.Substring(1' 16));
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseUuid64,The following statement contains a magic number: slice.Count != 9
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseUuid64,The following statement contains a magic number: return Uuid64.Read(slice.Substring(1' 8));
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseVersionStamp,The following statement contains a magic number: slice.Count != 11 && slice.Count != 13
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseVersionStamp,The following statement contains a magic number: slice.Count != 11 && slice.Count != 13
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseNext,The following statement contains a magic number: switch (type)  			{  				case -1:  				{ // End of Stream  					return Slice.Nil;  				}    				case TupleTypes.Nil:  				{ // <00> / <00><FF> => null  					if (reader.Depth > 0)  					{ // must be <00><FF> inside an embedded tuple  						if (reader.Input.PeekByteAt(1) == 0xFF)  						{ // this is a Nil entry  							reader.Input.Skip(2);  							return Slice.Empty;  						}  						else  						{ // this is the end of the embedded tuple  							reader.Input.Skip(1);  							return Slice.Nil;  						}  					}  					else  					{ // can be <00> outside an embedded tuple  						reader.Input.Skip(1);  						return Slice.Empty;  					}  				}    				case TupleTypes.Bytes:  				{ // <01>(bytes)<00>  					return reader.Input.ReadByteString();  				}    				case TupleTypes.Utf8:  				{ // <02>(utf8 bytes)<00>  					return reader.Input.ReadByteString();  				}    				case TupleTypes.LegacyTupleStart:  				{ // <03>(packed tuple)<04>    					//note: this format is NOT SUPPORTED ANYMORE' because it was not compatible with the current spec (<03>...<00> instead of <03>...<04> and is replaced by <05>....<00>)  					//we prefer throwing here instead of still attempting to decode the tuple' because it could silently break layers (if we read an old-style key and update it with the new-style format)  					throw TupleParser.FailLegacyTupleNotSupported();  				}  				case TupleTypes.EmbeddedTuple:  				{ // <05>(packed tuple)<00>  					//PERF: currently' we will first scan to get all the bytes of this tuple' and parse it later.  					// This means that we may need to scan multiple times the bytes' which may not be efficient if there are multiple embedded tuples inside each other  					return ReadEmbeddedTupleBytes(ref reader);  				}    				case TupleTypes.Single:  				{ // <20>(4 bytes)  					return reader.Input.ReadBytes(5);  				}    				case TupleTypes.Double:  				{ // <21>(8 bytes)  					return reader.Input.ReadBytes(9);  				}    				case TupleTypes.Triple:  				{ // <22>(10 bytes)  					return reader.Input.ReadBytes(11);  				}    				case TupleTypes.Decimal:  				{ // <23>(16 bytes)  					return reader.Input.ReadBytes(17);  				}    				case TupleTypes.False:  				{ // <26>  					return reader.Input.ReadBytes(1);  				}  				case TupleTypes.True:  				{ // <27>  					return reader.Input.ReadBytes(1);  				}    				case TupleTypes.Uuid128:  				{ // <30>(16 bytes)  					return reader.Input.ReadBytes(17);  				}    				case TupleTypes.Uuid64:  				{ // <31>(8 bytes)  					return reader.Input.ReadBytes(9);  				}    				case TupleTypes.VersionStamp80:  				{ // <32>(10 bytes)  					return reader.Input.ReadBytes(11);  				}    				case TupleTypes.VersionStamp96:  				{ // <33>(12 bytes)  					return reader.Input.ReadBytes(13);  				}    				case TupleTypes.Directory:  				case TupleTypes.Escape:  				{ // <FE> or <FF>  					return reader.Input.ReadBytes(1);  				}  			}
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseNext,The following statement contains a magic number: switch (type)  			{  				case -1:  				{ // End of Stream  					return Slice.Nil;  				}    				case TupleTypes.Nil:  				{ // <00> / <00><FF> => null  					if (reader.Depth > 0)  					{ // must be <00><FF> inside an embedded tuple  						if (reader.Input.PeekByteAt(1) == 0xFF)  						{ // this is a Nil entry  							reader.Input.Skip(2);  							return Slice.Empty;  						}  						else  						{ // this is the end of the embedded tuple  							reader.Input.Skip(1);  							return Slice.Nil;  						}  					}  					else  					{ // can be <00> outside an embedded tuple  						reader.Input.Skip(1);  						return Slice.Empty;  					}  				}    				case TupleTypes.Bytes:  				{ // <01>(bytes)<00>  					return reader.Input.ReadByteString();  				}    				case TupleTypes.Utf8:  				{ // <02>(utf8 bytes)<00>  					return reader.Input.ReadByteString();  				}    				case TupleTypes.LegacyTupleStart:  				{ // <03>(packed tuple)<04>    					//note: this format is NOT SUPPORTED ANYMORE' because it was not compatible with the current spec (<03>...<00> instead of <03>...<04> and is replaced by <05>....<00>)  					//we prefer throwing here instead of still attempting to decode the tuple' because it could silently break layers (if we read an old-style key and update it with the new-style format)  					throw TupleParser.FailLegacyTupleNotSupported();  				}  				case TupleTypes.EmbeddedTuple:  				{ // <05>(packed tuple)<00>  					//PERF: currently' we will first scan to get all the bytes of this tuple' and parse it later.  					// This means that we may need to scan multiple times the bytes' which may not be efficient if there are multiple embedded tuples inside each other  					return ReadEmbeddedTupleBytes(ref reader);  				}    				case TupleTypes.Single:  				{ // <20>(4 bytes)  					return reader.Input.ReadBytes(5);  				}    				case TupleTypes.Double:  				{ // <21>(8 bytes)  					return reader.Input.ReadBytes(9);  				}    				case TupleTypes.Triple:  				{ // <22>(10 bytes)  					return reader.Input.ReadBytes(11);  				}    				case TupleTypes.Decimal:  				{ // <23>(16 bytes)  					return reader.Input.ReadBytes(17);  				}    				case TupleTypes.False:  				{ // <26>  					return reader.Input.ReadBytes(1);  				}  				case TupleTypes.True:  				{ // <27>  					return reader.Input.ReadBytes(1);  				}    				case TupleTypes.Uuid128:  				{ // <30>(16 bytes)  					return reader.Input.ReadBytes(17);  				}    				case TupleTypes.Uuid64:  				{ // <31>(8 bytes)  					return reader.Input.ReadBytes(9);  				}    				case TupleTypes.VersionStamp80:  				{ // <32>(10 bytes)  					return reader.Input.ReadBytes(11);  				}    				case TupleTypes.VersionStamp96:  				{ // <33>(12 bytes)  					return reader.Input.ReadBytes(13);  				}    				case TupleTypes.Directory:  				case TupleTypes.Escape:  				{ // <FE> or <FF>  					return reader.Input.ReadBytes(1);  				}  			}
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseNext,The following statement contains a magic number: switch (type)  			{  				case -1:  				{ // End of Stream  					return Slice.Nil;  				}    				case TupleTypes.Nil:  				{ // <00> / <00><FF> => null  					if (reader.Depth > 0)  					{ // must be <00><FF> inside an embedded tuple  						if (reader.Input.PeekByteAt(1) == 0xFF)  						{ // this is a Nil entry  							reader.Input.Skip(2);  							return Slice.Empty;  						}  						else  						{ // this is the end of the embedded tuple  							reader.Input.Skip(1);  							return Slice.Nil;  						}  					}  					else  					{ // can be <00> outside an embedded tuple  						reader.Input.Skip(1);  						return Slice.Empty;  					}  				}    				case TupleTypes.Bytes:  				{ // <01>(bytes)<00>  					return reader.Input.ReadByteString();  				}    				case TupleTypes.Utf8:  				{ // <02>(utf8 bytes)<00>  					return reader.Input.ReadByteString();  				}    				case TupleTypes.LegacyTupleStart:  				{ // <03>(packed tuple)<04>    					//note: this format is NOT SUPPORTED ANYMORE' because it was not compatible with the current spec (<03>...<00> instead of <03>...<04> and is replaced by <05>....<00>)  					//we prefer throwing here instead of still attempting to decode the tuple' because it could silently break layers (if we read an old-style key and update it with the new-style format)  					throw TupleParser.FailLegacyTupleNotSupported();  				}  				case TupleTypes.EmbeddedTuple:  				{ // <05>(packed tuple)<00>  					//PERF: currently' we will first scan to get all the bytes of this tuple' and parse it later.  					// This means that we may need to scan multiple times the bytes' which may not be efficient if there are multiple embedded tuples inside each other  					return ReadEmbeddedTupleBytes(ref reader);  				}    				case TupleTypes.Single:  				{ // <20>(4 bytes)  					return reader.Input.ReadBytes(5);  				}    				case TupleTypes.Double:  				{ // <21>(8 bytes)  					return reader.Input.ReadBytes(9);  				}    				case TupleTypes.Triple:  				{ // <22>(10 bytes)  					return reader.Input.ReadBytes(11);  				}    				case TupleTypes.Decimal:  				{ // <23>(16 bytes)  					return reader.Input.ReadBytes(17);  				}    				case TupleTypes.False:  				{ // <26>  					return reader.Input.ReadBytes(1);  				}  				case TupleTypes.True:  				{ // <27>  					return reader.Input.ReadBytes(1);  				}    				case TupleTypes.Uuid128:  				{ // <30>(16 bytes)  					return reader.Input.ReadBytes(17);  				}    				case TupleTypes.Uuid64:  				{ // <31>(8 bytes)  					return reader.Input.ReadBytes(9);  				}    				case TupleTypes.VersionStamp80:  				{ // <32>(10 bytes)  					return reader.Input.ReadBytes(11);  				}    				case TupleTypes.VersionStamp96:  				{ // <33>(12 bytes)  					return reader.Input.ReadBytes(13);  				}    				case TupleTypes.Directory:  				case TupleTypes.Escape:  				{ // <FE> or <FF>  					return reader.Input.ReadBytes(1);  				}  			}
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseNext,The following statement contains a magic number: switch (type)  			{  				case -1:  				{ // End of Stream  					return Slice.Nil;  				}    				case TupleTypes.Nil:  				{ // <00> / <00><FF> => null  					if (reader.Depth > 0)  					{ // must be <00><FF> inside an embedded tuple  						if (reader.Input.PeekByteAt(1) == 0xFF)  						{ // this is a Nil entry  							reader.Input.Skip(2);  							return Slice.Empty;  						}  						else  						{ // this is the end of the embedded tuple  							reader.Input.Skip(1);  							return Slice.Nil;  						}  					}  					else  					{ // can be <00> outside an embedded tuple  						reader.Input.Skip(1);  						return Slice.Empty;  					}  				}    				case TupleTypes.Bytes:  				{ // <01>(bytes)<00>  					return reader.Input.ReadByteString();  				}    				case TupleTypes.Utf8:  				{ // <02>(utf8 bytes)<00>  					return reader.Input.ReadByteString();  				}    				case TupleTypes.LegacyTupleStart:  				{ // <03>(packed tuple)<04>    					//note: this format is NOT SUPPORTED ANYMORE' because it was not compatible with the current spec (<03>...<00> instead of <03>...<04> and is replaced by <05>....<00>)  					//we prefer throwing here instead of still attempting to decode the tuple' because it could silently break layers (if we read an old-style key and update it with the new-style format)  					throw TupleParser.FailLegacyTupleNotSupported();  				}  				case TupleTypes.EmbeddedTuple:  				{ // <05>(packed tuple)<00>  					//PERF: currently' we will first scan to get all the bytes of this tuple' and parse it later.  					// This means that we may need to scan multiple times the bytes' which may not be efficient if there are multiple embedded tuples inside each other  					return ReadEmbeddedTupleBytes(ref reader);  				}    				case TupleTypes.Single:  				{ // <20>(4 bytes)  					return reader.Input.ReadBytes(5);  				}    				case TupleTypes.Double:  				{ // <21>(8 bytes)  					return reader.Input.ReadBytes(9);  				}    				case TupleTypes.Triple:  				{ // <22>(10 bytes)  					return reader.Input.ReadBytes(11);  				}    				case TupleTypes.Decimal:  				{ // <23>(16 bytes)  					return reader.Input.ReadBytes(17);  				}    				case TupleTypes.False:  				{ // <26>  					return reader.Input.ReadBytes(1);  				}  				case TupleTypes.True:  				{ // <27>  					return reader.Input.ReadBytes(1);  				}    				case TupleTypes.Uuid128:  				{ // <30>(16 bytes)  					return reader.Input.ReadBytes(17);  				}    				case TupleTypes.Uuid64:  				{ // <31>(8 bytes)  					return reader.Input.ReadBytes(9);  				}    				case TupleTypes.VersionStamp80:  				{ // <32>(10 bytes)  					return reader.Input.ReadBytes(11);  				}    				case TupleTypes.VersionStamp96:  				{ // <33>(12 bytes)  					return reader.Input.ReadBytes(13);  				}    				case TupleTypes.Directory:  				case TupleTypes.Escape:  				{ // <FE> or <FF>  					return reader.Input.ReadBytes(1);  				}  			}
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseNext,The following statement contains a magic number: switch (type)  			{  				case -1:  				{ // End of Stream  					return Slice.Nil;  				}    				case TupleTypes.Nil:  				{ // <00> / <00><FF> => null  					if (reader.Depth > 0)  					{ // must be <00><FF> inside an embedded tuple  						if (reader.Input.PeekByteAt(1) == 0xFF)  						{ // this is a Nil entry  							reader.Input.Skip(2);  							return Slice.Empty;  						}  						else  						{ // this is the end of the embedded tuple  							reader.Input.Skip(1);  							return Slice.Nil;  						}  					}  					else  					{ // can be <00> outside an embedded tuple  						reader.Input.Skip(1);  						return Slice.Empty;  					}  				}    				case TupleTypes.Bytes:  				{ // <01>(bytes)<00>  					return reader.Input.ReadByteString();  				}    				case TupleTypes.Utf8:  				{ // <02>(utf8 bytes)<00>  					return reader.Input.ReadByteString();  				}    				case TupleTypes.LegacyTupleStart:  				{ // <03>(packed tuple)<04>    					//note: this format is NOT SUPPORTED ANYMORE' because it was not compatible with the current spec (<03>...<00> instead of <03>...<04> and is replaced by <05>....<00>)  					//we prefer throwing here instead of still attempting to decode the tuple' because it could silently break layers (if we read an old-style key and update it with the new-style format)  					throw TupleParser.FailLegacyTupleNotSupported();  				}  				case TupleTypes.EmbeddedTuple:  				{ // <05>(packed tuple)<00>  					//PERF: currently' we will first scan to get all the bytes of this tuple' and parse it later.  					// This means that we may need to scan multiple times the bytes' which may not be efficient if there are multiple embedded tuples inside each other  					return ReadEmbeddedTupleBytes(ref reader);  				}    				case TupleTypes.Single:  				{ // <20>(4 bytes)  					return reader.Input.ReadBytes(5);  				}    				case TupleTypes.Double:  				{ // <21>(8 bytes)  					return reader.Input.ReadBytes(9);  				}    				case TupleTypes.Triple:  				{ // <22>(10 bytes)  					return reader.Input.ReadBytes(11);  				}    				case TupleTypes.Decimal:  				{ // <23>(16 bytes)  					return reader.Input.ReadBytes(17);  				}    				case TupleTypes.False:  				{ // <26>  					return reader.Input.ReadBytes(1);  				}  				case TupleTypes.True:  				{ // <27>  					return reader.Input.ReadBytes(1);  				}    				case TupleTypes.Uuid128:  				{ // <30>(16 bytes)  					return reader.Input.ReadBytes(17);  				}    				case TupleTypes.Uuid64:  				{ // <31>(8 bytes)  					return reader.Input.ReadBytes(9);  				}    				case TupleTypes.VersionStamp80:  				{ // <32>(10 bytes)  					return reader.Input.ReadBytes(11);  				}    				case TupleTypes.VersionStamp96:  				{ // <33>(12 bytes)  					return reader.Input.ReadBytes(13);  				}    				case TupleTypes.Directory:  				case TupleTypes.Escape:  				{ // <FE> or <FF>  					return reader.Input.ReadBytes(1);  				}  			}
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseNext,The following statement contains a magic number: switch (type)  			{  				case -1:  				{ // End of Stream  					return Slice.Nil;  				}    				case TupleTypes.Nil:  				{ // <00> / <00><FF> => null  					if (reader.Depth > 0)  					{ // must be <00><FF> inside an embedded tuple  						if (reader.Input.PeekByteAt(1) == 0xFF)  						{ // this is a Nil entry  							reader.Input.Skip(2);  							return Slice.Empty;  						}  						else  						{ // this is the end of the embedded tuple  							reader.Input.Skip(1);  							return Slice.Nil;  						}  					}  					else  					{ // can be <00> outside an embedded tuple  						reader.Input.Skip(1);  						return Slice.Empty;  					}  				}    				case TupleTypes.Bytes:  				{ // <01>(bytes)<00>  					return reader.Input.ReadByteString();  				}    				case TupleTypes.Utf8:  				{ // <02>(utf8 bytes)<00>  					return reader.Input.ReadByteString();  				}    				case TupleTypes.LegacyTupleStart:  				{ // <03>(packed tuple)<04>    					//note: this format is NOT SUPPORTED ANYMORE' because it was not compatible with the current spec (<03>...<00> instead of <03>...<04> and is replaced by <05>....<00>)  					//we prefer throwing here instead of still attempting to decode the tuple' because it could silently break layers (if we read an old-style key and update it with the new-style format)  					throw TupleParser.FailLegacyTupleNotSupported();  				}  				case TupleTypes.EmbeddedTuple:  				{ // <05>(packed tuple)<00>  					//PERF: currently' we will first scan to get all the bytes of this tuple' and parse it later.  					// This means that we may need to scan multiple times the bytes' which may not be efficient if there are multiple embedded tuples inside each other  					return ReadEmbeddedTupleBytes(ref reader);  				}    				case TupleTypes.Single:  				{ // <20>(4 bytes)  					return reader.Input.ReadBytes(5);  				}    				case TupleTypes.Double:  				{ // <21>(8 bytes)  					return reader.Input.ReadBytes(9);  				}    				case TupleTypes.Triple:  				{ // <22>(10 bytes)  					return reader.Input.ReadBytes(11);  				}    				case TupleTypes.Decimal:  				{ // <23>(16 bytes)  					return reader.Input.ReadBytes(17);  				}    				case TupleTypes.False:  				{ // <26>  					return reader.Input.ReadBytes(1);  				}  				case TupleTypes.True:  				{ // <27>  					return reader.Input.ReadBytes(1);  				}    				case TupleTypes.Uuid128:  				{ // <30>(16 bytes)  					return reader.Input.ReadBytes(17);  				}    				case TupleTypes.Uuid64:  				{ // <31>(8 bytes)  					return reader.Input.ReadBytes(9);  				}    				case TupleTypes.VersionStamp80:  				{ // <32>(10 bytes)  					return reader.Input.ReadBytes(11);  				}    				case TupleTypes.VersionStamp96:  				{ // <33>(12 bytes)  					return reader.Input.ReadBytes(13);  				}    				case TupleTypes.Directory:  				case TupleTypes.Escape:  				{ // <FE> or <FF>  					return reader.Input.ReadBytes(1);  				}  			}
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseNext,The following statement contains a magic number: switch (type)  			{  				case -1:  				{ // End of Stream  					return Slice.Nil;  				}    				case TupleTypes.Nil:  				{ // <00> / <00><FF> => null  					if (reader.Depth > 0)  					{ // must be <00><FF> inside an embedded tuple  						if (reader.Input.PeekByteAt(1) == 0xFF)  						{ // this is a Nil entry  							reader.Input.Skip(2);  							return Slice.Empty;  						}  						else  						{ // this is the end of the embedded tuple  							reader.Input.Skip(1);  							return Slice.Nil;  						}  					}  					else  					{ // can be <00> outside an embedded tuple  						reader.Input.Skip(1);  						return Slice.Empty;  					}  				}    				case TupleTypes.Bytes:  				{ // <01>(bytes)<00>  					return reader.Input.ReadByteString();  				}    				case TupleTypes.Utf8:  				{ // <02>(utf8 bytes)<00>  					return reader.Input.ReadByteString();  				}    				case TupleTypes.LegacyTupleStart:  				{ // <03>(packed tuple)<04>    					//note: this format is NOT SUPPORTED ANYMORE' because it was not compatible with the current spec (<03>...<00> instead of <03>...<04> and is replaced by <05>....<00>)  					//we prefer throwing here instead of still attempting to decode the tuple' because it could silently break layers (if we read an old-style key and update it with the new-style format)  					throw TupleParser.FailLegacyTupleNotSupported();  				}  				case TupleTypes.EmbeddedTuple:  				{ // <05>(packed tuple)<00>  					//PERF: currently' we will first scan to get all the bytes of this tuple' and parse it later.  					// This means that we may need to scan multiple times the bytes' which may not be efficient if there are multiple embedded tuples inside each other  					return ReadEmbeddedTupleBytes(ref reader);  				}    				case TupleTypes.Single:  				{ // <20>(4 bytes)  					return reader.Input.ReadBytes(5);  				}    				case TupleTypes.Double:  				{ // <21>(8 bytes)  					return reader.Input.ReadBytes(9);  				}    				case TupleTypes.Triple:  				{ // <22>(10 bytes)  					return reader.Input.ReadBytes(11);  				}    				case TupleTypes.Decimal:  				{ // <23>(16 bytes)  					return reader.Input.ReadBytes(17);  				}    				case TupleTypes.False:  				{ // <26>  					return reader.Input.ReadBytes(1);  				}  				case TupleTypes.True:  				{ // <27>  					return reader.Input.ReadBytes(1);  				}    				case TupleTypes.Uuid128:  				{ // <30>(16 bytes)  					return reader.Input.ReadBytes(17);  				}    				case TupleTypes.Uuid64:  				{ // <31>(8 bytes)  					return reader.Input.ReadBytes(9);  				}    				case TupleTypes.VersionStamp80:  				{ // <32>(10 bytes)  					return reader.Input.ReadBytes(11);  				}    				case TupleTypes.VersionStamp96:  				{ // <33>(12 bytes)  					return reader.Input.ReadBytes(13);  				}    				case TupleTypes.Directory:  				case TupleTypes.Escape:  				{ // <FE> or <FF>  					return reader.Input.ReadBytes(1);  				}  			}
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseNext,The following statement contains a magic number: switch (type)  			{  				case -1:  				{ // End of Stream  					return Slice.Nil;  				}    				case TupleTypes.Nil:  				{ // <00> / <00><FF> => null  					if (reader.Depth > 0)  					{ // must be <00><FF> inside an embedded tuple  						if (reader.Input.PeekByteAt(1) == 0xFF)  						{ // this is a Nil entry  							reader.Input.Skip(2);  							return Slice.Empty;  						}  						else  						{ // this is the end of the embedded tuple  							reader.Input.Skip(1);  							return Slice.Nil;  						}  					}  					else  					{ // can be <00> outside an embedded tuple  						reader.Input.Skip(1);  						return Slice.Empty;  					}  				}    				case TupleTypes.Bytes:  				{ // <01>(bytes)<00>  					return reader.Input.ReadByteString();  				}    				case TupleTypes.Utf8:  				{ // <02>(utf8 bytes)<00>  					return reader.Input.ReadByteString();  				}    				case TupleTypes.LegacyTupleStart:  				{ // <03>(packed tuple)<04>    					//note: this format is NOT SUPPORTED ANYMORE' because it was not compatible with the current spec (<03>...<00> instead of <03>...<04> and is replaced by <05>....<00>)  					//we prefer throwing here instead of still attempting to decode the tuple' because it could silently break layers (if we read an old-style key and update it with the new-style format)  					throw TupleParser.FailLegacyTupleNotSupported();  				}  				case TupleTypes.EmbeddedTuple:  				{ // <05>(packed tuple)<00>  					//PERF: currently' we will first scan to get all the bytes of this tuple' and parse it later.  					// This means that we may need to scan multiple times the bytes' which may not be efficient if there are multiple embedded tuples inside each other  					return ReadEmbeddedTupleBytes(ref reader);  				}    				case TupleTypes.Single:  				{ // <20>(4 bytes)  					return reader.Input.ReadBytes(5);  				}    				case TupleTypes.Double:  				{ // <21>(8 bytes)  					return reader.Input.ReadBytes(9);  				}    				case TupleTypes.Triple:  				{ // <22>(10 bytes)  					return reader.Input.ReadBytes(11);  				}    				case TupleTypes.Decimal:  				{ // <23>(16 bytes)  					return reader.Input.ReadBytes(17);  				}    				case TupleTypes.False:  				{ // <26>  					return reader.Input.ReadBytes(1);  				}  				case TupleTypes.True:  				{ // <27>  					return reader.Input.ReadBytes(1);  				}    				case TupleTypes.Uuid128:  				{ // <30>(16 bytes)  					return reader.Input.ReadBytes(17);  				}    				case TupleTypes.Uuid64:  				{ // <31>(8 bytes)  					return reader.Input.ReadBytes(9);  				}    				case TupleTypes.VersionStamp80:  				{ // <32>(10 bytes)  					return reader.Input.ReadBytes(11);  				}    				case TupleTypes.VersionStamp96:  				{ // <33>(12 bytes)  					return reader.Input.ReadBytes(13);  				}    				case TupleTypes.Directory:  				case TupleTypes.Escape:  				{ // <FE> or <FF>  					return reader.Input.ReadBytes(1);  				}  			}
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseNext,The following statement contains a magic number: switch (type)  			{  				case -1:  				{ // End of Stream  					return Slice.Nil;  				}    				case TupleTypes.Nil:  				{ // <00> / <00><FF> => null  					if (reader.Depth > 0)  					{ // must be <00><FF> inside an embedded tuple  						if (reader.Input.PeekByteAt(1) == 0xFF)  						{ // this is a Nil entry  							reader.Input.Skip(2);  							return Slice.Empty;  						}  						else  						{ // this is the end of the embedded tuple  							reader.Input.Skip(1);  							return Slice.Nil;  						}  					}  					else  					{ // can be <00> outside an embedded tuple  						reader.Input.Skip(1);  						return Slice.Empty;  					}  				}    				case TupleTypes.Bytes:  				{ // <01>(bytes)<00>  					return reader.Input.ReadByteString();  				}    				case TupleTypes.Utf8:  				{ // <02>(utf8 bytes)<00>  					return reader.Input.ReadByteString();  				}    				case TupleTypes.LegacyTupleStart:  				{ // <03>(packed tuple)<04>    					//note: this format is NOT SUPPORTED ANYMORE' because it was not compatible with the current spec (<03>...<00> instead of <03>...<04> and is replaced by <05>....<00>)  					//we prefer throwing here instead of still attempting to decode the tuple' because it could silently break layers (if we read an old-style key and update it with the new-style format)  					throw TupleParser.FailLegacyTupleNotSupported();  				}  				case TupleTypes.EmbeddedTuple:  				{ // <05>(packed tuple)<00>  					//PERF: currently' we will first scan to get all the bytes of this tuple' and parse it later.  					// This means that we may need to scan multiple times the bytes' which may not be efficient if there are multiple embedded tuples inside each other  					return ReadEmbeddedTupleBytes(ref reader);  				}    				case TupleTypes.Single:  				{ // <20>(4 bytes)  					return reader.Input.ReadBytes(5);  				}    				case TupleTypes.Double:  				{ // <21>(8 bytes)  					return reader.Input.ReadBytes(9);  				}    				case TupleTypes.Triple:  				{ // <22>(10 bytes)  					return reader.Input.ReadBytes(11);  				}    				case TupleTypes.Decimal:  				{ // <23>(16 bytes)  					return reader.Input.ReadBytes(17);  				}    				case TupleTypes.False:  				{ // <26>  					return reader.Input.ReadBytes(1);  				}  				case TupleTypes.True:  				{ // <27>  					return reader.Input.ReadBytes(1);  				}    				case TupleTypes.Uuid128:  				{ // <30>(16 bytes)  					return reader.Input.ReadBytes(17);  				}    				case TupleTypes.Uuid64:  				{ // <31>(8 bytes)  					return reader.Input.ReadBytes(9);  				}    				case TupleTypes.VersionStamp80:  				{ // <32>(10 bytes)  					return reader.Input.ReadBytes(11);  				}    				case TupleTypes.VersionStamp96:  				{ // <33>(12 bytes)  					return reader.Input.ReadBytes(13);  				}    				case TupleTypes.Directory:  				case TupleTypes.Escape:  				{ // <FE> or <FF>  					return reader.Input.ReadBytes(1);  				}  			}
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,NumberOfBytes,The following statement contains a magic number: return (MostSignificantBit(v) + 8) >> 3;
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,NumberOfBytes,The following statement contains a magic number: return (MostSignificantBit(v) + 8) >> 3;
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,NumberOfBytes,The following statement contains a magic number: return v >= 0 ? NumberOfBytes((ulong)v) : v != long.MinValue ? NumberOfBytes((ulong)-v) : 8;
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,NumberOfBytes,The following statement contains a magic number: msb += 32;
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,NumberOfBytes,The following statement contains a magic number: v >>= 32;
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,NumberOfBytes,The following statement contains a magic number: return (msb + 8) >> 3;
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,NumberOfBytes,The following statement contains a magic number: return (msb + 8) >> 3;
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,MostSignificantBit,The following statement contains a magic number: v |= v >> 2;
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,MostSignificantBit,The following statement contains a magic number: v |= v >> 4;
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,MostSignificantBit,The following statement contains a magic number: v |= v >> 8;
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,MostSignificantBit,The following statement contains a magic number: v |= v >> 16;
Magic Number,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,MostSignificantBit,The following statement contains a magic number: var r = (v * 0x07C4ACDDU) >> 27;
Magic Number,Doxense.Collections.Tuples.Encoding,TupleReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleReader.cs,Embedded,The following statement contains a magic number: Contract.Requires(packed.Count >= 2 && packed[0] == TupleTypes.EmbeddedTuple && packed[-1] == 0);
Magic Number,Doxense.Collections.Tuples.Encoding,TupleReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleReader.cs,Embedded,The following statement contains a magic number: return new TupleReader(packed.Substring(1' packed.Count - 2)' 1);
Magic Number,Doxense.Collections.Tuples,JoinedTuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\JoinedTuple.cs,Concat,The following statement contains a magic number: n1 + n2 >= 10
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,FromArray,The following statement contains a magic number: switch (count)  			{  				case 0: return Create();  				case 1: return Create<T>(items[offset]);  				case 2: return Create<T' T>(items[offset]' items[offset + 1]);  				case 3: return Create<T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]);  				case 4: return Create<T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]);  				case 5: return Create<T' T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]' items[offset + 4]);  				case 6: return Create<T' T' T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]' items[offset + 4]' items[offset + 5]);  				default:  				{ // copy the items in a temp array  					//TODO: we would probably benefit from having an ListTuple<T> here!  					var tmp = new object[count];  					Array.Copy(items' offset' tmp' 0' count);  					return new ListTuple(tmp' 0' count);  				}  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,FromArray,The following statement contains a magic number: switch (count)  			{  				case 0: return Create();  				case 1: return Create<T>(items[offset]);  				case 2: return Create<T' T>(items[offset]' items[offset + 1]);  				case 3: return Create<T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]);  				case 4: return Create<T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]);  				case 5: return Create<T' T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]' items[offset + 4]);  				case 6: return Create<T' T' T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]' items[offset + 4]' items[offset + 5]);  				default:  				{ // copy the items in a temp array  					//TODO: we would probably benefit from having an ListTuple<T> here!  					var tmp = new object[count];  					Array.Copy(items' offset' tmp' 0' count);  					return new ListTuple(tmp' 0' count);  				}  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,FromArray,The following statement contains a magic number: switch (count)  			{  				case 0: return Create();  				case 1: return Create<T>(items[offset]);  				case 2: return Create<T' T>(items[offset]' items[offset + 1]);  				case 3: return Create<T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]);  				case 4: return Create<T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]);  				case 5: return Create<T' T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]' items[offset + 4]);  				case 6: return Create<T' T' T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]' items[offset + 4]' items[offset + 5]);  				default:  				{ // copy the items in a temp array  					//TODO: we would probably benefit from having an ListTuple<T> here!  					var tmp = new object[count];  					Array.Copy(items' offset' tmp' 0' count);  					return new ListTuple(tmp' 0' count);  				}  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,FromArray,The following statement contains a magic number: switch (count)  			{  				case 0: return Create();  				case 1: return Create<T>(items[offset]);  				case 2: return Create<T' T>(items[offset]' items[offset + 1]);  				case 3: return Create<T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]);  				case 4: return Create<T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]);  				case 5: return Create<T' T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]' items[offset + 4]);  				case 6: return Create<T' T' T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]' items[offset + 4]' items[offset + 5]);  				default:  				{ // copy the items in a temp array  					//TODO: we would probably benefit from having an ListTuple<T> here!  					var tmp = new object[count];  					Array.Copy(items' offset' tmp' 0' count);  					return new ListTuple(tmp' 0' count);  				}  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,FromArray,The following statement contains a magic number: switch (count)  			{  				case 0: return Create();  				case 1: return Create<T>(items[offset]);  				case 2: return Create<T' T>(items[offset]' items[offset + 1]);  				case 3: return Create<T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]);  				case 4: return Create<T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]);  				case 5: return Create<T' T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]' items[offset + 4]);  				case 6: return Create<T' T' T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]' items[offset + 4]' items[offset + 5]);  				default:  				{ // copy the items in a temp array  					//TODO: we would probably benefit from having an ListTuple<T> here!  					var tmp = new object[count];  					Array.Copy(items' offset' tmp' 0' count);  					return new ListTuple(tmp' 0' count);  				}  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,FromArray,The following statement contains a magic number: switch (count)  			{  				case 0: return Create();  				case 1: return Create<T>(items[offset]);  				case 2: return Create<T' T>(items[offset]' items[offset + 1]);  				case 3: return Create<T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]);  				case 4: return Create<T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]);  				case 5: return Create<T' T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]' items[offset + 4]);  				case 6: return Create<T' T' T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]' items[offset + 4]' items[offset + 5]);  				default:  				{ // copy the items in a temp array  					//TODO: we would probably benefit from having an ListTuple<T> here!  					var tmp = new object[count];  					Array.Copy(items' offset' tmp' 0' count);  					return new ListTuple(tmp' 0' count);  				}  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,FromArray,The following statement contains a magic number: switch (count)  			{  				case 0: return Create();  				case 1: return Create<T>(items[offset]);  				case 2: return Create<T' T>(items[offset]' items[offset + 1]);  				case 3: return Create<T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]);  				case 4: return Create<T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]);  				case 5: return Create<T' T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]' items[offset + 4]);  				case 6: return Create<T' T' T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]' items[offset + 4]' items[offset + 5]);  				default:  				{ // copy the items in a temp array  					//TODO: we would probably benefit from having an ListTuple<T> here!  					var tmp = new object[count];  					Array.Copy(items' offset' tmp' 0' count);  					return new ListTuple(tmp' 0' count);  				}  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,FromArray,The following statement contains a magic number: switch (count)  			{  				case 0: return Create();  				case 1: return Create<T>(items[offset]);  				case 2: return Create<T' T>(items[offset]' items[offset + 1]);  				case 3: return Create<T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]);  				case 4: return Create<T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]);  				case 5: return Create<T' T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]' items[offset + 4]);  				case 6: return Create<T' T' T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]' items[offset + 4]' items[offset + 5]);  				default:  				{ // copy the items in a temp array  					//TODO: we would probably benefit from having an ListTuple<T> here!  					var tmp = new object[count];  					Array.Copy(items' offset' tmp' 0' count);  					return new ListTuple(tmp' 0' count);  				}  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,FromArray,The following statement contains a magic number: switch (count)  			{  				case 0: return Create();  				case 1: return Create<T>(items[offset]);  				case 2: return Create<T' T>(items[offset]' items[offset + 1]);  				case 3: return Create<T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]);  				case 4: return Create<T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]);  				case 5: return Create<T' T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]' items[offset + 4]);  				case 6: return Create<T' T' T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]' items[offset + 4]' items[offset + 5]);  				default:  				{ // copy the items in a temp array  					//TODO: we would probably benefit from having an ListTuple<T> here!  					var tmp = new object[count];  					Array.Copy(items' offset' tmp' 0' count);  					return new ListTuple(tmp' 0' count);  				}  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,FromArray,The following statement contains a magic number: switch (count)  			{  				case 0: return Create();  				case 1: return Create<T>(items[offset]);  				case 2: return Create<T' T>(items[offset]' items[offset + 1]);  				case 3: return Create<T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]);  				case 4: return Create<T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]);  				case 5: return Create<T' T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]' items[offset + 4]);  				case 6: return Create<T' T' T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]' items[offset + 4]' items[offset + 5]);  				default:  				{ // copy the items in a temp array  					//TODO: we would probably benefit from having an ListTuple<T> here!  					var tmp = new object[count];  					Array.Copy(items' offset' tmp' 0' count);  					return new ListTuple(tmp' 0' count);  				}  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,FromArray,The following statement contains a magic number: switch (count)  			{  				case 0: return Create();  				case 1: return Create<T>(items[offset]);  				case 2: return Create<T' T>(items[offset]' items[offset + 1]);  				case 3: return Create<T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]);  				case 4: return Create<T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]);  				case 5: return Create<T' T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]' items[offset + 4]);  				case 6: return Create<T' T' T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]' items[offset + 4]' items[offset + 5]);  				default:  				{ // copy the items in a temp array  					//TODO: we would probably benefit from having an ListTuple<T> here!  					var tmp = new object[count];  					Array.Copy(items' offset' tmp' 0' count);  					return new ListTuple(tmp' 0' count);  				}  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,FromArray,The following statement contains a magic number: switch (count)  			{  				case 0: return Create();  				case 1: return Create<T>(items[offset]);  				case 2: return Create<T' T>(items[offset]' items[offset + 1]);  				case 3: return Create<T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]);  				case 4: return Create<T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]);  				case 5: return Create<T' T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]' items[offset + 4]);  				case 6: return Create<T' T' T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]' items[offset + 4]' items[offset + 5]);  				default:  				{ // copy the items in a temp array  					//TODO: we would probably benefit from having an ListTuple<T> here!  					var tmp = new object[count];  					Array.Copy(items' offset' tmp' 0' count);  					return new ListTuple(tmp' 0' count);  				}  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,FromArray,The following statement contains a magic number: switch (count)  			{  				case 0: return Create();  				case 1: return Create<T>(items[offset]);  				case 2: return Create<T' T>(items[offset]' items[offset + 1]);  				case 3: return Create<T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]);  				case 4: return Create<T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]);  				case 5: return Create<T' T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]' items[offset + 4]);  				case 6: return Create<T' T' T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]' items[offset + 4]' items[offset + 5]);  				default:  				{ // copy the items in a temp array  					//TODO: we would probably benefit from having an ListTuple<T> here!  					var tmp = new object[count];  					Array.Copy(items' offset' tmp' 0' count);  					return new ListTuple(tmp' 0' count);  				}  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,FromArray,The following statement contains a magic number: switch (count)  			{  				case 0: return Create();  				case 1: return Create<T>(items[offset]);  				case 2: return Create<T' T>(items[offset]' items[offset + 1]);  				case 3: return Create<T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]);  				case 4: return Create<T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]);  				case 5: return Create<T' T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]' items[offset + 4]);  				case 6: return Create<T' T' T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]' items[offset + 4]' items[offset + 5]);  				default:  				{ // copy the items in a temp array  					//TODO: we would probably benefit from having an ListTuple<T> here!  					var tmp = new object[count];  					Array.Copy(items' offset' tmp' 0' count);  					return new ListTuple(tmp' 0' count);  				}  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,FromArray,The following statement contains a magic number: switch (count)  			{  				case 0: return Create();  				case 1: return Create<T>(items[offset]);  				case 2: return Create<T' T>(items[offset]' items[offset + 1]);  				case 3: return Create<T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]);  				case 4: return Create<T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]);  				case 5: return Create<T' T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]' items[offset + 4]);  				case 6: return Create<T' T' T' T' T' T>(items[offset]' items[offset + 1]' items[offset + 2]' items[offset + 3]' items[offset + 4]' items[offset + 5]);  				default:  				{ // copy the items in a temp array  					//TODO: we would probably benefit from having an ListTuple<T> here!  					var tmp = new object[count];  					Array.Copy(items' offset' tmp' 0' count);  					return new ListTuple(tmp' 0' count);  				}  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Get,The following statement contains a magic number: switch(index)  			{  				case 0: case -2: return TypeConverters.Convert<T1' TItem>(this.Item1);  				case 1: case -1: return TypeConverters.Convert<T2' TItem>(this.Item2);  				default: return TupleHelpers.FailIndexOutOfRange<TItem>(index' 2);  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Get,The following statement contains a magic number: switch(index)  			{  				case 0: case -2: return TypeConverters.Convert<T1' TItem>(this.Item1);  				case 1: case -1: return TypeConverters.Convert<T2' TItem>(this.Item2);  				default: return TupleHelpers.FailIndexOutOfRange<TItem>(index' 2);  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Get,The following statement contains a magic number: switch(index)  			{  					case 0: case -3: return TypeConverters.Convert<T1' TItem>(this.Item1);  					case 1: case -2: return TypeConverters.Convert<T2' TItem>(this.Item2);  					case 2: case -1: return TypeConverters.Convert<T3' TItem>(this.Item3);  					default: return TupleHelpers.FailIndexOutOfRange<TItem>(index' 3);  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Get,The following statement contains a magic number: switch(index)  			{  					case 0: case -3: return TypeConverters.Convert<T1' TItem>(this.Item1);  					case 1: case -2: return TypeConverters.Convert<T2' TItem>(this.Item2);  					case 2: case -1: return TypeConverters.Convert<T3' TItem>(this.Item3);  					default: return TupleHelpers.FailIndexOutOfRange<TItem>(index' 3);  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Get,The following statement contains a magic number: switch(index)  			{  					case 0: case -3: return TypeConverters.Convert<T1' TItem>(this.Item1);  					case 1: case -2: return TypeConverters.Convert<T2' TItem>(this.Item2);  					case 2: case -1: return TypeConverters.Convert<T3' TItem>(this.Item3);  					default: return TupleHelpers.FailIndexOutOfRange<TItem>(index' 3);  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Get,The following statement contains a magic number: switch(index)  			{  					case 0: case -3: return TypeConverters.Convert<T1' TItem>(this.Item1);  					case 1: case -2: return TypeConverters.Convert<T2' TItem>(this.Item2);  					case 2: case -1: return TypeConverters.Convert<T3' TItem>(this.Item3);  					default: return TupleHelpers.FailIndexOutOfRange<TItem>(index' 3);  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Append,The following statement contains a magic number: return new ListTuple(new object[4] { this.Item1' this.Item2' this.Item3' value }' 0' 4);
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Append,The following statement contains a magic number: return new ListTuple(new object[4] { this.Item1' this.Item2' this.Item3' value }' 0' 4);
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,CopyTo,The following statement contains a magic number: array[offset + 2] = this.Item3;
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Get,The following statement contains a magic number: switch(index)  			{  				case 0: case -4: return TypeConverters.Convert<T1' TItem>(this.Item1);  				case 1: case -3: return TypeConverters.Convert<T2' TItem>(this.Item2);  				case 2: case -2: return TypeConverters.Convert<T3' TItem>(this.Item3);  				case 3: case -1: return TypeConverters.Convert<T4' TItem>(this.Item4);  				default: return TupleHelpers.FailIndexOutOfRange<TItem>(index' 4);  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Get,The following statement contains a magic number: switch(index)  			{  				case 0: case -4: return TypeConverters.Convert<T1' TItem>(this.Item1);  				case 1: case -3: return TypeConverters.Convert<T2' TItem>(this.Item2);  				case 2: case -2: return TypeConverters.Convert<T3' TItem>(this.Item3);  				case 3: case -1: return TypeConverters.Convert<T4' TItem>(this.Item4);  				default: return TupleHelpers.FailIndexOutOfRange<TItem>(index' 4);  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Get,The following statement contains a magic number: switch(index)  			{  				case 0: case -4: return TypeConverters.Convert<T1' TItem>(this.Item1);  				case 1: case -3: return TypeConverters.Convert<T2' TItem>(this.Item2);  				case 2: case -2: return TypeConverters.Convert<T3' TItem>(this.Item3);  				case 3: case -1: return TypeConverters.Convert<T4' TItem>(this.Item4);  				default: return TupleHelpers.FailIndexOutOfRange<TItem>(index' 4);  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Get,The following statement contains a magic number: switch(index)  			{  				case 0: case -4: return TypeConverters.Convert<T1' TItem>(this.Item1);  				case 1: case -3: return TypeConverters.Convert<T2' TItem>(this.Item2);  				case 2: case -2: return TypeConverters.Convert<T3' TItem>(this.Item3);  				case 3: case -1: return TypeConverters.Convert<T4' TItem>(this.Item4);  				default: return TupleHelpers.FailIndexOutOfRange<TItem>(index' 4);  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Get,The following statement contains a magic number: switch(index)  			{  				case 0: case -4: return TypeConverters.Convert<T1' TItem>(this.Item1);  				case 1: case -3: return TypeConverters.Convert<T2' TItem>(this.Item2);  				case 2: case -2: return TypeConverters.Convert<T3' TItem>(this.Item3);  				case 3: case -1: return TypeConverters.Convert<T4' TItem>(this.Item4);  				default: return TupleHelpers.FailIndexOutOfRange<TItem>(index' 4);  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Get,The following statement contains a magic number: switch(index)  			{  				case 0: case -4: return TypeConverters.Convert<T1' TItem>(this.Item1);  				case 1: case -3: return TypeConverters.Convert<T2' TItem>(this.Item2);  				case 2: case -2: return TypeConverters.Convert<T3' TItem>(this.Item3);  				case 3: case -1: return TypeConverters.Convert<T4' TItem>(this.Item4);  				default: return TupleHelpers.FailIndexOutOfRange<TItem>(index' 4);  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Append,The following statement contains a magic number: return new ListTuple(new object[5] { this.Item1' this.Item2' this.Item3' this.Item4' value }' 0' 5);
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Append,The following statement contains a magic number: return new ListTuple(new object[5] { this.Item1' this.Item2' this.Item3' this.Item4' value }' 0' 5);
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,CopyTo,The following statement contains a magic number: array[offset + 2] = this.Item3;
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,CopyTo,The following statement contains a magic number: array[offset + 3] = this.Item4;
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Get,The following statement contains a magic number: switch(index)  			{  					case 0: case -5: return TypeConverters.Convert<T1' TItem>(this.Item1);  					case 1: case -4: return TypeConverters.Convert<T2' TItem>(this.Item2);  					case 2: case -3: return TypeConverters.Convert<T3' TItem>(this.Item3);  					case 3: case -2: return TypeConverters.Convert<T4' TItem>(this.Item4);  					case 4: case -1: return TypeConverters.Convert<T5' TItem>(this.Item5);  					default: return TupleHelpers.FailIndexOutOfRange<TItem>(index' 5);  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Get,The following statement contains a magic number: switch(index)  			{  					case 0: case -5: return TypeConverters.Convert<T1' TItem>(this.Item1);  					case 1: case -4: return TypeConverters.Convert<T2' TItem>(this.Item2);  					case 2: case -3: return TypeConverters.Convert<T3' TItem>(this.Item3);  					case 3: case -2: return TypeConverters.Convert<T4' TItem>(this.Item4);  					case 4: case -1: return TypeConverters.Convert<T5' TItem>(this.Item5);  					default: return TupleHelpers.FailIndexOutOfRange<TItem>(index' 5);  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Get,The following statement contains a magic number: switch(index)  			{  					case 0: case -5: return TypeConverters.Convert<T1' TItem>(this.Item1);  					case 1: case -4: return TypeConverters.Convert<T2' TItem>(this.Item2);  					case 2: case -3: return TypeConverters.Convert<T3' TItem>(this.Item3);  					case 3: case -2: return TypeConverters.Convert<T4' TItem>(this.Item4);  					case 4: case -1: return TypeConverters.Convert<T5' TItem>(this.Item5);  					default: return TupleHelpers.FailIndexOutOfRange<TItem>(index' 5);  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Get,The following statement contains a magic number: switch(index)  			{  					case 0: case -5: return TypeConverters.Convert<T1' TItem>(this.Item1);  					case 1: case -4: return TypeConverters.Convert<T2' TItem>(this.Item2);  					case 2: case -3: return TypeConverters.Convert<T3' TItem>(this.Item3);  					case 3: case -2: return TypeConverters.Convert<T4' TItem>(this.Item4);  					case 4: case -1: return TypeConverters.Convert<T5' TItem>(this.Item5);  					default: return TupleHelpers.FailIndexOutOfRange<TItem>(index' 5);  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Get,The following statement contains a magic number: switch(index)  			{  					case 0: case -5: return TypeConverters.Convert<T1' TItem>(this.Item1);  					case 1: case -4: return TypeConverters.Convert<T2' TItem>(this.Item2);  					case 2: case -3: return TypeConverters.Convert<T3' TItem>(this.Item3);  					case 3: case -2: return TypeConverters.Convert<T4' TItem>(this.Item4);  					case 4: case -1: return TypeConverters.Convert<T5' TItem>(this.Item5);  					default: return TupleHelpers.FailIndexOutOfRange<TItem>(index' 5);  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Get,The following statement contains a magic number: switch(index)  			{  					case 0: case -5: return TypeConverters.Convert<T1' TItem>(this.Item1);  					case 1: case -4: return TypeConverters.Convert<T2' TItem>(this.Item2);  					case 2: case -3: return TypeConverters.Convert<T3' TItem>(this.Item3);  					case 3: case -2: return TypeConverters.Convert<T4' TItem>(this.Item4);  					case 4: case -1: return TypeConverters.Convert<T5' TItem>(this.Item5);  					default: return TupleHelpers.FailIndexOutOfRange<TItem>(index' 5);  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Get,The following statement contains a magic number: switch(index)  			{  					case 0: case -5: return TypeConverters.Convert<T1' TItem>(this.Item1);  					case 1: case -4: return TypeConverters.Convert<T2' TItem>(this.Item2);  					case 2: case -3: return TypeConverters.Convert<T3' TItem>(this.Item3);  					case 3: case -2: return TypeConverters.Convert<T4' TItem>(this.Item4);  					case 4: case -1: return TypeConverters.Convert<T5' TItem>(this.Item5);  					default: return TupleHelpers.FailIndexOutOfRange<TItem>(index' 5);  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Get,The following statement contains a magic number: switch(index)  			{  					case 0: case -5: return TypeConverters.Convert<T1' TItem>(this.Item1);  					case 1: case -4: return TypeConverters.Convert<T2' TItem>(this.Item2);  					case 2: case -3: return TypeConverters.Convert<T3' TItem>(this.Item3);  					case 3: case -2: return TypeConverters.Convert<T4' TItem>(this.Item4);  					case 4: case -1: return TypeConverters.Convert<T5' TItem>(this.Item5);  					default: return TupleHelpers.FailIndexOutOfRange<TItem>(index' 5);  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Append,The following statement contains a magic number: return new ListTuple(new object[6] { this.Item1' this.Item2' this.Item3' this.Item4' this.Item5' value }' 0' 6);
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Append,The following statement contains a magic number: return new ListTuple(new object[6] { this.Item1' this.Item2' this.Item3' this.Item4' this.Item5' value }' 0' 6);
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,CopyTo,The following statement contains a magic number: array[offset + 2] = this.Item3;
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,CopyTo,The following statement contains a magic number: array[offset + 3] = this.Item4;
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,CopyTo,The following statement contains a magic number: array[offset + 4] = this.Item5;
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Get,The following statement contains a magic number: switch(index)  			{  					case 0: case -6: return TypeConverters.Convert<T1' TItem>(this.Item1);  					case 1: case -5: return TypeConverters.Convert<T2' TItem>(this.Item2);  					case 2: case -4: return TypeConverters.Convert<T3' TItem>(this.Item3);  					case 3: case -3: return TypeConverters.Convert<T4' TItem>(this.Item4);  					case 4: case -2: return TypeConverters.Convert<T5' TItem>(this.Item5);  					case 5: case -1: return TypeConverters.Convert<T6' TItem>(this.Item6);  					default: return TupleHelpers.FailIndexOutOfRange<TItem>(index' 6);  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Get,The following statement contains a magic number: switch(index)  			{  					case 0: case -6: return TypeConverters.Convert<T1' TItem>(this.Item1);  					case 1: case -5: return TypeConverters.Convert<T2' TItem>(this.Item2);  					case 2: case -4: return TypeConverters.Convert<T3' TItem>(this.Item3);  					case 3: case -3: return TypeConverters.Convert<T4' TItem>(this.Item4);  					case 4: case -2: return TypeConverters.Convert<T5' TItem>(this.Item5);  					case 5: case -1: return TypeConverters.Convert<T6' TItem>(this.Item6);  					default: return TupleHelpers.FailIndexOutOfRange<TItem>(index' 6);  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Get,The following statement contains a magic number: switch(index)  			{  					case 0: case -6: return TypeConverters.Convert<T1' TItem>(this.Item1);  					case 1: case -5: return TypeConverters.Convert<T2' TItem>(this.Item2);  					case 2: case -4: return TypeConverters.Convert<T3' TItem>(this.Item3);  					case 3: case -3: return TypeConverters.Convert<T4' TItem>(this.Item4);  					case 4: case -2: return TypeConverters.Convert<T5' TItem>(this.Item5);  					case 5: case -1: return TypeConverters.Convert<T6' TItem>(this.Item6);  					default: return TupleHelpers.FailIndexOutOfRange<TItem>(index' 6);  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Get,The following statement contains a magic number: switch(index)  			{  					case 0: case -6: return TypeConverters.Convert<T1' TItem>(this.Item1);  					case 1: case -5: return TypeConverters.Convert<T2' TItem>(this.Item2);  					case 2: case -4: return TypeConverters.Convert<T3' TItem>(this.Item3);  					case 3: case -3: return TypeConverters.Convert<T4' TItem>(this.Item4);  					case 4: case -2: return TypeConverters.Convert<T5' TItem>(this.Item5);  					case 5: case -1: return TypeConverters.Convert<T6' TItem>(this.Item6);  					default: return TupleHelpers.FailIndexOutOfRange<TItem>(index' 6);  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Get,The following statement contains a magic number: switch(index)  			{  					case 0: case -6: return TypeConverters.Convert<T1' TItem>(this.Item1);  					case 1: case -5: return TypeConverters.Convert<T2' TItem>(this.Item2);  					case 2: case -4: return TypeConverters.Convert<T3' TItem>(this.Item3);  					case 3: case -3: return TypeConverters.Convert<T4' TItem>(this.Item4);  					case 4: case -2: return TypeConverters.Convert<T5' TItem>(this.Item5);  					case 5: case -1: return TypeConverters.Convert<T6' TItem>(this.Item6);  					default: return TupleHelpers.FailIndexOutOfRange<TItem>(index' 6);  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Get,The following statement contains a magic number: switch(index)  			{  					case 0: case -6: return TypeConverters.Convert<T1' TItem>(this.Item1);  					case 1: case -5: return TypeConverters.Convert<T2' TItem>(this.Item2);  					case 2: case -4: return TypeConverters.Convert<T3' TItem>(this.Item3);  					case 3: case -3: return TypeConverters.Convert<T4' TItem>(this.Item4);  					case 4: case -2: return TypeConverters.Convert<T5' TItem>(this.Item5);  					case 5: case -1: return TypeConverters.Convert<T6' TItem>(this.Item6);  					default: return TupleHelpers.FailIndexOutOfRange<TItem>(index' 6);  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Get,The following statement contains a magic number: switch(index)  			{  					case 0: case -6: return TypeConverters.Convert<T1' TItem>(this.Item1);  					case 1: case -5: return TypeConverters.Convert<T2' TItem>(this.Item2);  					case 2: case -4: return TypeConverters.Convert<T3' TItem>(this.Item3);  					case 3: case -3: return TypeConverters.Convert<T4' TItem>(this.Item4);  					case 4: case -2: return TypeConverters.Convert<T5' TItem>(this.Item5);  					case 5: case -1: return TypeConverters.Convert<T6' TItem>(this.Item6);  					default: return TupleHelpers.FailIndexOutOfRange<TItem>(index' 6);  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Get,The following statement contains a magic number: switch(index)  			{  					case 0: case -6: return TypeConverters.Convert<T1' TItem>(this.Item1);  					case 1: case -5: return TypeConverters.Convert<T2' TItem>(this.Item2);  					case 2: case -4: return TypeConverters.Convert<T3' TItem>(this.Item3);  					case 3: case -3: return TypeConverters.Convert<T4' TItem>(this.Item4);  					case 4: case -2: return TypeConverters.Convert<T5' TItem>(this.Item5);  					case 5: case -1: return TypeConverters.Convert<T6' TItem>(this.Item6);  					default: return TupleHelpers.FailIndexOutOfRange<TItem>(index' 6);  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Get,The following statement contains a magic number: switch(index)  			{  					case 0: case -6: return TypeConverters.Convert<T1' TItem>(this.Item1);  					case 1: case -5: return TypeConverters.Convert<T2' TItem>(this.Item2);  					case 2: case -4: return TypeConverters.Convert<T3' TItem>(this.Item3);  					case 3: case -3: return TypeConverters.Convert<T4' TItem>(this.Item4);  					case 4: case -2: return TypeConverters.Convert<T5' TItem>(this.Item5);  					case 5: case -1: return TypeConverters.Convert<T6' TItem>(this.Item6);  					default: return TupleHelpers.FailIndexOutOfRange<TItem>(index' 6);  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Get,The following statement contains a magic number: switch(index)  			{  					case 0: case -6: return TypeConverters.Convert<T1' TItem>(this.Item1);  					case 1: case -5: return TypeConverters.Convert<T2' TItem>(this.Item2);  					case 2: case -4: return TypeConverters.Convert<T3' TItem>(this.Item3);  					case 3: case -3: return TypeConverters.Convert<T4' TItem>(this.Item4);  					case 4: case -2: return TypeConverters.Convert<T5' TItem>(this.Item5);  					case 5: case -1: return TypeConverters.Convert<T6' TItem>(this.Item6);  					default: return TupleHelpers.FailIndexOutOfRange<TItem>(index' 6);  			}
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Append,The following statement contains a magic number: return new ListTuple(new object[7] { this.Item1' this.Item2' this.Item3' this.Item4' this.Item5' this.Item6' value }' 0' 7);
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,Append,The following statement contains a magic number: return new ListTuple(new object[7] { this.Item1' this.Item2' this.Item3' this.Item4' this.Item5' this.Item6' value }' 0' 7);
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,CopyTo,The following statement contains a magic number: array[offset + 2] = this.Item3;
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,CopyTo,The following statement contains a magic number: array[offset + 3] = this.Item4;
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,CopyTo,The following statement contains a magic number: array[offset + 4] = this.Item5;
Magic Number,Doxense.Collections.Tuples,STuple,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,CopyTo,The following statement contains a magic number: array[offset + 5] = this.Item6;
Magic Number,Doxense.Collections.Tuples,Parser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,ReadNumberLiteral,The following statement contains a magic number: x = checked(x * 10 + (ulong) (c - '0'));
Magic Number,Doxense.Collections.Tuples,CompositeComparer<T1;T2;T3>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleComparisons.cs,Compare,The following statement contains a magic number: ny == 2 || nx == 2
Magic Number,Doxense.Collections.Tuples,CompositeComparer<T1;T2;T3>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleComparisons.cs,Compare,The following statement contains a magic number: ny == 2 || nx == 2
Magic Number,Doxense.Collections.Tuples,CompositeComparer<T1;T2;T3>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleComparisons.cs,Compare,The following statement contains a magic number: c = this.Comparer3.Compare(x.Get<T3>(p + 2)' y.Get<T3>(p + 2));
Magic Number,Doxense.Collections.Tuples,CompositeComparer<T1;T2;T3>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleComparisons.cs,Compare,The following statement contains a magic number: c = this.Comparer3.Compare(x.Get<T3>(p + 2)' y.Get<T3>(p + 2));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,As,The following statement contains a magic number: tuple.OfSize(2);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,As,The following statement contains a magic number: tuple.OfSize(3);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,As,The following statement contains a magic number: return (  				tuple.Get<T1>(0)'  				tuple.Get<T2>(1)'  				tuple.Get<T3>(2)  			);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,As,The following statement contains a magic number: tuple.OfSize(4);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,As,The following statement contains a magic number: return (  				tuple.Get<T1>(0)'  				tuple.Get<T2>(1)'  				tuple.Get<T3>(2)'  				tuple.Get<T4>(3)  			);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,As,The following statement contains a magic number: return (  				tuple.Get<T1>(0)'  				tuple.Get<T2>(1)'  				tuple.Get<T3>(2)'  				tuple.Get<T4>(3)  			);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,As,The following statement contains a magic number: tuple.OfSize(5);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,As,The following statement contains a magic number: return (  				tuple.Get<T1>(0)'  				tuple.Get<T2>(1)'  				tuple.Get<T3>(2)'  				tuple.Get<T4>(3)'  				tuple.Get<T5>(4)  			);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,As,The following statement contains a magic number: return (  				tuple.Get<T1>(0)'  				tuple.Get<T2>(1)'  				tuple.Get<T3>(2)'  				tuple.Get<T4>(3)'  				tuple.Get<T5>(4)  			);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,As,The following statement contains a magic number: return (  				tuple.Get<T1>(0)'  				tuple.Get<T2>(1)'  				tuple.Get<T3>(2)'  				tuple.Get<T4>(3)'  				tuple.Get<T5>(4)  			);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,As,The following statement contains a magic number: tuple.OfSize(6);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,As,The following statement contains a magic number: return (  				tuple.Get<T1>(0)'  				tuple.Get<T2>(1)'  				tuple.Get<T3>(2)'  				tuple.Get<T4>(3)'  				tuple.Get<T5>(4)'  				tuple.Get<T6>(5)  			);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,As,The following statement contains a magic number: return (  				tuple.Get<T1>(0)'  				tuple.Get<T2>(1)'  				tuple.Get<T3>(2)'  				tuple.Get<T4>(3)'  				tuple.Get<T5>(4)'  				tuple.Get<T6>(5)  			);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,As,The following statement contains a magic number: return (  				tuple.Get<T1>(0)'  				tuple.Get<T2>(1)'  				tuple.Get<T3>(2)'  				tuple.Get<T4>(3)'  				tuple.Get<T5>(4)'  				tuple.Get<T6>(5)  			);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,As,The following statement contains a magic number: return (  				tuple.Get<T1>(0)'  				tuple.Get<T2>(1)'  				tuple.Get<T3>(2)'  				tuple.Get<T4>(3)'  				tuple.Get<T5>(4)'  				tuple.Get<T6>(5)  			);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: OfSize(tuple' 2);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: OfSize(tuple' 3);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: OfSize(tuple' 4);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: OfSize(tuple' 5);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: OfSize(tuple' 6);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: OfSize(tuple' 7);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5)' tuple.Get<T7>(6));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5)' tuple.Get<T7>(6));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5)' tuple.Get<T7>(6));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5)' tuple.Get<T7>(6));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5)' tuple.Get<T7>(6));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: OfSize(tuple' 8);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5)' tuple.Get<T7>(6)' tuple.Get<T8>(7));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5)' tuple.Get<T7>(6)' tuple.Get<T8>(7));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5)' tuple.Get<T7>(6)' tuple.Get<T8>(7));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5)' tuple.Get<T7>(6)' tuple.Get<T8>(7));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5)' tuple.Get<T7>(6)' tuple.Get<T8>(7));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5)' tuple.Get<T7>(6)' tuple.Get<T8>(7));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: OfSize(tuple' 2);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: OfSize(tuple' 3);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: return lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: OfSize(tuple' 4);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: return lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: return lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: OfSize(tuple' 5);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: return lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: return lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: return lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: OfSize(tuple' 6);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: return lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: return lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: return lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: return lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: OfSize(tuple' 7);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: return lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5)' tuple.Get<T7>(6));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: return lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5)' tuple.Get<T7>(6));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: return lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5)' tuple.Get<T7>(6));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: return lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5)' tuple.Get<T7>(6));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: return lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5)' tuple.Get<T7>(6));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: OfSize(tuple' 8);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: return lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5)' tuple.Get<T7>(6)' tuple.Get<T8>(7));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: return lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5)' tuple.Get<T7>(6)' tuple.Get<T8>(7));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: return lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5)' tuple.Get<T7>(6)' tuple.Get<T8>(7));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: return lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5)' tuple.Get<T7>(6)' tuple.Get<T8>(7));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: return lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5)' tuple.Get<T7>(6)' tuple.Get<T8>(7));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,With,The following statement contains a magic number: return lambda(tuple.Get<T1>(0)' tuple.Get<T2>(1)' tuple.Get<T3>(2)' tuple.Get<T4>(3)' tuple.Get<T5>(4)' tuple.Get<T6>(5)' tuple.Get<T7>(6)' tuple.Get<T8>(7));
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The following statement contains a magic number: value.OfSize(2);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The following statement contains a magic number: value.OfSize(3);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The following statement contains a magic number: item3 = value.Get<T3>(2);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The following statement contains a magic number: value.OfSize(4);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The following statement contains a magic number: item3 = value.Get<T3>(2);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The following statement contains a magic number: item4 = value.Get<T4>(3);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The following statement contains a magic number: value.OfSize(5);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The following statement contains a magic number: item3 = value.Get<T3>(2);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The following statement contains a magic number: item4 = value.Get<T4>(3);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The following statement contains a magic number: item5 = value.Get<T5>(4);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The following statement contains a magic number: value.OfSize(6);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The following statement contains a magic number: item3 = value.Get<T3>(2);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The following statement contains a magic number: item4 = value.Get<T4>(3);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The following statement contains a magic number: item5 = value.Get<T5>(4);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The following statement contains a magic number: item6 = value.Get<T6>(5);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The following statement contains a magic number: value.OfSize(7);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The following statement contains a magic number: item3 = value.Get<T3>(2);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The following statement contains a magic number: item4 = value.Get<T4>(3);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The following statement contains a magic number: item5 = value.Get<T5>(4);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The following statement contains a magic number: item6 = value.Get<T6>(5);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The following statement contains a magic number: item7 = value.Get<T7>(6);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The following statement contains a magic number: value.OfSize(8);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The following statement contains a magic number: item3 = value.Get<T3>(2);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The following statement contains a magic number: item4 = value.Get<T4>(3);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The following statement contains a magic number: item5 = value.Get<T5>(4);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The following statement contains a magic number: item6 = value.Get<T6>(5);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The following statement contains a magic number: item7 = value.Get<T7>(6);
Magic Number,Doxense.Collections.Tuples,TupleExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleExtensions.cs,Deconstruct,The following statement contains a magic number: item8 = value.Get<T8>(7);
Magic Number,Doxense.Collections.Tuples,TupleHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleHelpers.cs,Splice,The following statement contains a magic number: switch (len)  			{  				case 1:  					return new ListTuple(new[] { tuple[start] }' 0' 1);  				case 2:  					return new ListTuple(new[] { tuple[start]' tuple[start + 1] }' 0' 2);  				default:  				{  					var items = new object[len];  					//note: can be slow for tuples using linked-lists' but hopefully they will have their own Slice implementation...  					int q = start;  					for (int p = 0; p < items.Length; p++)  					{  						items[p] = tuple[q++];  					}  					return new ListTuple(items' 0' len);  				}  			}
Magic Number,Doxense.Collections.Tuples,TupleHelpers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\TupleHelpers.cs,Splice,The following statement contains a magic number: switch (len)  			{  				case 1:  					return new ListTuple(new[] { tuple[start] }' 0' 1);  				case 2:  					return new ListTuple(new[] { tuple[start]' tuple[start + 1] }' 0' 2);  				default:  				{  					var items = new object[len];  					//note: can be slow for tuples using linked-lists' but hopefully they will have their own Slice implementation...  					int q = start;  					for (int p = 0; p < items.Length; p++)  					{  						items[p] = tuple[q++];  					}  					return new ListTuple(items' 0' len);  				}  			}
Magic Number,Doxense.Serialization.Encoders,CompositeKeyEncoder<T1;T2>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\ICompositeKeyEncoder.cs,WriteKeyTo,The following statement contains a magic number: WriteKeyPartsTo(ref writer' 2' ref items);
Magic Number,Doxense.Serialization.Encoders,CompositeKeyEncoder<T1;T2>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\ICompositeKeyEncoder.cs,ReadKeyFrom,The following statement contains a magic number: ReadKeyPartsFrom(ref reader' 2' out items);
Magic Number,Doxense.Serialization.Encoders,CompositeKeyEncoder<T1;T2;T3>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\ICompositeKeyEncoder.cs,WriteKeyTo,The following statement contains a magic number: WriteKeyPartsTo(ref writer' 3' ref items);
Magic Number,Doxense.Serialization.Encoders,CompositeKeyEncoder<T1;T2;T3>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\ICompositeKeyEncoder.cs,ReadKeyFrom,The following statement contains a magic number: ReadKeyPartsFrom(ref reader' 3' out items);
Magic Number,Doxense.Serialization.Encoders,CompositeKeyEncoder<T1;T2;T3;T4>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\ICompositeKeyEncoder.cs,WriteKeyTo,The following statement contains a magic number: WriteKeyPartsTo(ref writer' 4' ref items);
Magic Number,Doxense.Serialization.Encoders,CompositeKeyEncoder<T1;T2;T3;T4>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\ICompositeKeyEncoder.cs,ReadKeyFrom,The following statement contains a magic number: ReadKeyPartsFrom(ref reader' 4' out items);
Magic Number,Doxense.Serialization.Encoders,CompositeKeyEncoder<T1;T2;T3;T4;T5>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\ICompositeKeyEncoder.cs,WriteKeyTo,The following statement contains a magic number: WriteKeyPartsTo(ref writer' 5' ref items);
Magic Number,Doxense.Serialization.Encoders,CompositeKeyEncoder<T1;T2;T3;T4;T5>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\ICompositeKeyEncoder.cs,ReadKeyFrom,The following statement contains a magic number: ReadKeyPartsFrom(ref reader' 5' out items);
Magic Number,Doxense.Serialization.Encoders,CompositeKeyEncoder<T1;T2;T3;T4;T5;T6>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\ICompositeKeyEncoder.cs,WriteKeyTo,The following statement contains a magic number: WriteKeyPartsTo(ref writer' 6' ref items);
Magic Number,Doxense.Serialization.Encoders,CompositeKeyEncoder<T1;T2;T3;T4;T5;T6>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\ICompositeKeyEncoder.cs,ReadKeyFrom,The following statement contains a magic number: ReadKeyPartsFrom(ref reader' 6' out items);
Magic Number,Doxense.Serialization.Encoders,KeyEncoderExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\KeyEncoderExtensions.cs,EncodeKey,The following statement contains a magic number: var writer = new SliceWriter(prefix.Count + 16);
Magic Number,Doxense.Serialization.Encoders,KeyEncoderExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\KeyEncoderExtensions.cs,WriteKeyTo,The following statement contains a magic number: encoder.WriteKeyPartsTo(ref writer' 2' ref tuple);
Magic Number,Doxense.Serialization.Encoders,KeyEncoderExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\KeyEncoderExtensions.cs,EncodeKey,The following statement contains a magic number: encoder.WriteKeyPartsTo(ref writer' 2' ref tuple);
Magic Number,Doxense.Serialization.Encoders,KeyEncoderExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\KeyEncoderExtensions.cs,EncodeKey,The following statement contains a magic number: var writer = new SliceWriter(prefix.Count + 24);
Magic Number,Doxense.Serialization.Encoders,KeyEncoderExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\KeyEncoderExtensions.cs,EncodePartialKey,The following statement contains a magic number: var writer = new SliceWriter(prefix.Count + 16);
Magic Number,Doxense.Serialization.Encoders,KeyEncoderExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\KeyEncoderExtensions.cs,WriteKeyTo,The following statement contains a magic number: encoder.WriteKeyPartsTo(ref writer' 3' ref tuple);
Magic Number,Doxense.Serialization.Encoders,KeyEncoderExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\KeyEncoderExtensions.cs,EncodeKey,The following statement contains a magic number: encoder.WriteKeyPartsTo(ref writer' 3' ref tuple);
Magic Number,Doxense.Serialization.Encoders,KeyEncoderExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\KeyEncoderExtensions.cs,EncodeKey,The following statement contains a magic number: var writer = new SliceWriter(prefix.Count + 32);
Magic Number,Doxense.Serialization.Encoders,KeyEncoderExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\KeyEncoderExtensions.cs,WriteKeyTo,The following statement contains a magic number: encoder.WriteKeyPartsTo(ref writer' 4' ref tuple);
Magic Number,Doxense.Serialization.Encoders,KeyEncoderExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\KeyEncoderExtensions.cs,EncodeKey,The following statement contains a magic number: encoder.WriteKeyPartsTo(ref writer' 4' ref tuple);
Magic Number,Doxense.Serialization.Encoders,KeyEncoderExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\KeyEncoderExtensions.cs,EncodeKey,The following statement contains a magic number: var writer = new SliceWriter(prefix.Count + 48);
Magic Number,Doxense.Serialization.Encoders,KeyEncoderExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\KeyEncoderExtensions.cs,WriteKeyTo,The following statement contains a magic number: encoder.WriteKeyPartsTo(ref writer' 5' ref tuple);
Magic Number,Doxense.Serialization.Encoders,KeyEncoderExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\KeyEncoderExtensions.cs,EncodeKey,The following statement contains a magic number: encoder.WriteKeyPartsTo(ref writer' 5' ref tuple);
Magic Number,Doxense.Serialization.Encoders,KeyEncoderExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\KeyEncoderExtensions.cs,EncodeKey,The following statement contains a magic number: var writer = new SliceWriter(prefix.Count + 56);
Magic Number,Doxense.Serialization.Encoders,KeyEncoderExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\KeyEncoderExtensions.cs,EncodeKeys,The following statement contains a magic number: var writer = new SliceWriter(checked((17 + prefix.Count) * values.Length));
Magic Number,Doxense.Serialization.Encoders,KeyEncoderExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\KeyEncoderExtensions.cs,EncodeKeys,The following statement contains a magic number: var writer = new SliceWriter(checked(17 * coll.Count));
Magic Number,Doxense.Serialization.Encoders,KeyEncoderExtensions,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\TypeSystem\Encoders\KeyEncoderExtensions.cs,EncodeKeys,The following statement contains a magic number: writer = new SliceWriter(checked((17 + prefix.Count) * coll.Count));
Magic Number,FoundationDB.Client.Utils,TinyJsonParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Utils\TinyJsonParser.cs,IsWhiteSpace,The following statement contains a magic number: return c <= 32 && (c == ' ' || c == '\t' || c == '\n' || c == '\r');
Magic Number,FoundationDB.Client.Utils,TinyJsonParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Utils\TinyJsonParser.cs,ReadStringLiteral,The following statement contains a magic number: switch (c)  				{  					case '\"':  					{  						m_cursor = cursor;  						return sb.Length == 0 ? String.Empty : sb.ToString();  					}    					case '\\':  					{  						if (cursor >= end) break;  						c = buffer[cursor++];  						switch (c)  						{  							case '\\': sb.Append('\\'); break;  							case 'n': sb.Append('\n'); break;  							case 'r': sb.Append('\r'); break;  							case 't': sb.Append('\t'); break;  							case 'f': sb.Append('\f'); break;  							case 'b': sb.Append('\b'); break;  							case '"': sb.Append('"'); break;  							case 'u':  							{  								if (cursor + 4 >= end) throw SyntaxError("Truncated unicode escape sequence in string literal");  								int x = 0;  								for (int i = 0; i < 4; i++)  								{  									c = buffer[cursor++];  									x <<= 4;  									if (c >= '0' && c <= '9') x |= (c - '0');  									else if (c >= 'A' && c <= 'F') x |= (c - 'A');  									else if (c >= 'a' && c <= 'f') x |= (c - 'a');  									else throw SyntaxError("Invalid unicode escape character '{0}' in string literal"' c);  								}  								sb.Append((char) x);  								break;  							}  							default:  							{  								throw SyntaxError("Invalid escape character '{0}' in string literal"' new string(c' 1));  							}  						}  						break;  					}    					default:  					{  						sb.Append(c);  						break;  					}    				}
Magic Number,FoundationDB.Client.Utils,TinyJsonParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Utils\TinyJsonParser.cs,ReadStringLiteral,The following statement contains a magic number: switch (c)  				{  					case '\"':  					{  						m_cursor = cursor;  						return sb.Length == 0 ? String.Empty : sb.ToString();  					}    					case '\\':  					{  						if (cursor >= end) break;  						c = buffer[cursor++];  						switch (c)  						{  							case '\\': sb.Append('\\'); break;  							case 'n': sb.Append('\n'); break;  							case 'r': sb.Append('\r'); break;  							case 't': sb.Append('\t'); break;  							case 'f': sb.Append('\f'); break;  							case 'b': sb.Append('\b'); break;  							case '"': sb.Append('"'); break;  							case 'u':  							{  								if (cursor + 4 >= end) throw SyntaxError("Truncated unicode escape sequence in string literal");  								int x = 0;  								for (int i = 0; i < 4; i++)  								{  									c = buffer[cursor++];  									x <<= 4;  									if (c >= '0' && c <= '9') x |= (c - '0');  									else if (c >= 'A' && c <= 'F') x |= (c - 'A');  									else if (c >= 'a' && c <= 'f') x |= (c - 'a');  									else throw SyntaxError("Invalid unicode escape character '{0}' in string literal"' c);  								}  								sb.Append((char) x);  								break;  							}  							default:  							{  								throw SyntaxError("Invalid escape character '{0}' in string literal"' new string(c' 1));  							}  						}  						break;  					}    					default:  					{  						sb.Append(c);  						break;  					}    				}
Magic Number,FoundationDB.Client.Utils,TinyJsonParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Utils\TinyJsonParser.cs,ReadStringLiteral,The following statement contains a magic number: switch (c)  				{  					case '\"':  					{  						m_cursor = cursor;  						return sb.Length == 0 ? String.Empty : sb.ToString();  					}    					case '\\':  					{  						if (cursor >= end) break;  						c = buffer[cursor++];  						switch (c)  						{  							case '\\': sb.Append('\\'); break;  							case 'n': sb.Append('\n'); break;  							case 'r': sb.Append('\r'); break;  							case 't': sb.Append('\t'); break;  							case 'f': sb.Append('\f'); break;  							case 'b': sb.Append('\b'); break;  							case '"': sb.Append('"'); break;  							case 'u':  							{  								if (cursor + 4 >= end) throw SyntaxError("Truncated unicode escape sequence in string literal");  								int x = 0;  								for (int i = 0; i < 4; i++)  								{  									c = buffer[cursor++];  									x <<= 4;  									if (c >= '0' && c <= '9') x |= (c - '0');  									else if (c >= 'A' && c <= 'F') x |= (c - 'A');  									else if (c >= 'a' && c <= 'f') x |= (c - 'a');  									else throw SyntaxError("Invalid unicode escape character '{0}' in string literal"' c);  								}  								sb.Append((char) x);  								break;  							}  							default:  							{  								throw SyntaxError("Invalid escape character '{0}' in string literal"' new string(c' 1));  							}  						}  						break;  					}    					default:  					{  						sb.Append(c);  						break;  					}    				}
Missing Default,FoundationDB.Client,Fdb,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Fdb.Bulk.cs,Start,The following switch statement is missing a default case: switch (err)  				{  					case FdbError.ApiVersionNotSupported:  					{ // bad version was selected ?  						// note: we already bound check the values before' so that means that fdb_c.dll is either an older version or an incompatible new version.  						throw new FdbException(err' $"The API version {apiVersion} is not supported by the FoundationDB client library (fdb_c.dll) installed on this system. The binding only supports versions {GetMinApiVersion()} to {bindingVersion}. You either need to upgrade the .NET binding or the FoundationDB client library to a newer version.");  					}  #if DEBUG  					case FdbError.ApiVersionAlreadySet:  					{ // Temporary hack to allow multiple debugging using the cached host process in VS  						Console.Error.WriteLine("FATAL: CANNOT REUSE EXISTING PROCESS! FoundationDB client cannot be restarted once stopped. Current process will be terminated.");  						Environment.FailFast("FATAL: CANNOT REUSE EXISTING PROCESS! FoundationDB client cannot be restarted once stopped. Current process will be terminated.");  						break;  					}  #endif  				}
Missing Default,FoundationDB.Client,FdbKey,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbKey.cs,PrettyPrint,The following switch statement is missing a default case: switch (mode)  							{  								case PrettyPrintMode.End:  								{ // the last byte will either be FF' or incremented  									// for tuples' the really bad cases are for byte[]/strings (which normally end with 00)  									// => pack(("string"'))+\xFF => <02>string<00><FF>  									// => string(("string"')) => <02>string<01>  									switch (key[-1])  									{  										case 0xFF:  										{  											//***README*** if you break under here' see README in the last catch() block  											tuple = TuPack.Unpack(key[0' -1]);  											suffix = ".<FF>";  											break;  										}  										case 0x01:  										{  											var tmp = key[0' -1] + (byte)0;  											//***README*** if you break under here' see README in the last catch() block  											tuple = TuPack.Unpack(tmp);  											suffix = " + 1";  											break;  										}  									}  									break;  								}  								case PrettyPrintMode.Begin:  								{ // the last byte will usually be 00    									// We can't really know if the tuple ended with NULL (serialized to <00>) or if a <00> was added'  									// but since the ToRange() on tuples add a <00> we can bet on the fact that it is not part of the tuple itself.  									// except maybe if we have "00 FF 00" which would be the expected form of a string that ends with a <00>    									if (key.Count > 2 && key[-1] == 0 && key[-2] != 0xFF)  									{  										//***README*** if you break under here' see README in the last catch() block  										tuple = TuPack.Unpack(key[0' -1]);  										suffix = ".<00>";  									}  									break;  								}  							}
Missing Default,FoundationDB.Client,FdbKey,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbKey.cs,PrettyPrint,The following switch statement is missing a default case: switch (key[-1])  									{  										case 0xFF:  										{  											//***README*** if you break under here' see README in the last catch() block  											tuple = TuPack.Unpack(key[0' -1]);  											suffix = ".<FF>";  											break;  										}  										case 0x01:  										{  											var tmp = key[0' -1] + (byte)0;  											//***README*** if you break under here' see README in the last catch() block  											tuple = TuPack.Unpack(tmp);  											suffix = " + 1";  											break;  										}  									}
Missing Default,FoundationDB.Client,FdbKey,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbKey.cs,PrettyPrint,The following switch statement is missing a default case: switch (mode)  							{  								case PrettyPrintMode.End:  								{ // the last byte will either be FF' or incremented  									// for tuples' the really bad cases are for byte[]/strings (which normally end with 00)  									// => pack(("string"'))+\xFF => <02>string<00><FF>  									// => string(("string"')) => <02>string<01>  									switch (key[key.Length - 1])  									{  										case 0xFF:  										{  											//***README*** if you break under here' see README in the last catch() block  											tuple = TuPack.Unpack(key.Slice(0' key.Length - 1));  											suffix = ".<FF>";  											break;  										}  										case 0x01:  										{  											//TODO: HACKHACK: until we find another solution' we have to make a copy :(  											var tmp = key.ToArray();  											tmp[tmp.Length - 1] = 0;  											//***README*** if you break under here' see README in the last catch() block  											tuple = TuPack.Unpack(tmp.AsSlice());  											suffix = " + 1";  											break;  										}  									}  									break;  								}  								case PrettyPrintMode.Begin:  								{ // the last byte will usually be 00    									// We can't really know if the tuple ended with NULL (serialized to <00>) or if a <00> was added'  									// but since the ToRange() on tuples add a <00> we can bet on the fact that it is not part of the tuple itself.  									// except maybe if we have "00 FF 00" which would be the expected form of a string that ends with a <00>    									if (key.Length > 2 && key[-1] == 0 && key[-2] != 0xFF)  									{  										//***README*** if you break under here' see README in the last catch() block  										tuple = TuPack.Unpack(key.Slice(0' key.Length - 1));  										suffix = ".<00>";  									}  									break;  								}  							}
Missing Default,FoundationDB.Client,FdbKey,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbKey.cs,PrettyPrint,The following switch statement is missing a default case: switch (key[key.Length - 1])  									{  										case 0xFF:  										{  											//***README*** if you break under here' see README in the last catch() block  											tuple = TuPack.Unpack(key.Slice(0' key.Length - 1));  											suffix = ".<FF>";  											break;  										}  										case 0x01:  										{  											//TODO: HACKHACK: until we find another solution' we have to make a copy :(  											var tmp = key.ToArray();  											tmp[tmp.Length - 1] = 0;  											//***README*** if you break under here' see README in the last catch() block  											tuple = TuPack.Unpack(tmp.AsSlice());  											suffix = " + 1";  											break;  										}  									}
Missing Default,FoundationDB.Client,FdbOperationContext,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbOperationContext.cs,ExecuteSingleHandler,The following switch statement is missing a default case: switch (del)  			{  				case IHandleTransactionSuccess hts:  				{  					hts.OnTransactionSuccessful();  					return Task.CompletedTask;  				}  				case IHandleTransactionFailure htf:  				{  					htf.OnTransactionFailed();  					return Task.CompletedTask;  				}  				case Action act:  				{  					act();  					return Task.CompletedTask;  				}  				case Func<CancellationToken' Task> fct:  				{  					return fct(ct);  				}  			}
Missing Default,FoundationDB.Client,PagingIterator,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\FdbRangeQuery.PagingIterator.cs,FetchNextPageAsync,The following switch statement is missing a default case: switch(m_mode)  				{  					case AsyncIterationHint.Iterator:  					{  						// the caller is responsible for calling MoveNext(..) and deciding if it wants to continue or not..  						options.Mode = FdbStreamingMode.Iterator;  						break;  					}  					case AsyncIterationHint.All:  					{  						// we are in a ToList or ForEach' we want to read everything in as few chunks as possible  						options.Mode = FdbStreamingMode.WantAll;  						break;  					}  					case AsyncIterationHint.Head:  					{  						// the caller only expect one (or zero) values  						options.Mode = FdbStreamingMode.Iterator;  						break;  					}  				}
Missing Default,FoundationDB.Filters.Logging,FdbTransactionLog,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Filters\Logging\FdbTransactionLog.Commands.cs,GetCommandsReport,The following switch statement is missing a default case: switch (cmd.Mode)  				{  					case FdbTransactionLog.Mode.Read: ++reads; break;  					case FdbTransactionLog.Mode.Write: ++writes; break;  				}
Missing Default,Doxense.Runtime.Converters,ComparisonHelper,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\ComparisonHelper.cs,TryAdaptToString,The following switch statement is missing a default case: switch (value)  			{  				case null:  					return null;  				case string s:  					return s;  				case char c:  					return new string(c' 1);  				case Slice sl:  					return sl.ToStringUtf8(); //BUGBUG: ASCII? Ansi? UTF8?  				case byte[] bstr:  					return bstr.AsSlice().ToStringUtf8(); //BUGBUG: ASCII? Ansi? UTF8?  				case IFormattable fmt:  					return fmt.ToString(null' CultureInfo.InvariantCulture);  			}
Missing Default,Doxense.Runtime.Converters,ComparisonHelper,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\ComparisonHelper.cs,TryAdaptToDecimal,The following switch statement is missing a default case: switch (Type.GetTypeCode(type))  				{  					case TypeCode.Int16: { result = (short)value; return true; }  					case TypeCode.UInt16: { result = (ushort)value; return true; }  					case TypeCode.Int32: { result = (int)value; return true; }  					case TypeCode.UInt32: { result = (uint)value; return true; }  					case TypeCode.Int64: { result = (long)value; return true; }  					case TypeCode.UInt64: { result = (ulong)value; return true; }  					case TypeCode.Single: { result = (float)value; return true; }  					case TypeCode.Double: { result = (double)value; return true; }  					//TODO: string?  				}
Missing Default,Doxense.Runtime.Converters,ComparisonHelper,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\ComparisonHelper.cs,TryAdaptToInteger,The following switch statement is missing a default case: switch (Type.GetTypeCode(type))  				{  					case TypeCode.Int16: { result = (short)value; return true; }  					case TypeCode.UInt16: { result = (ushort)value; return true; }  					case TypeCode.Int32: { result = (int)value; return true; }  					case TypeCode.UInt32: { result = (uint)value; return true; }  					case TypeCode.Int64: { result = (long)value; return true; }  					case TypeCode.UInt64: { result = (long)(ulong)value; return true; }  					case TypeCode.Single: { result = (long)(float)value; return true; }  					case TypeCode.Double: { result = (long)(double)value; return true; }  				}
Missing Default,Doxense.Runtime.Converters,ComparisonHelper,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Converters\ComparisonHelper.cs,CreateTypeComparator,The following switch statement is missing a default case: switch (Type.GetTypeCode(t1))  				{  					case TypeCode.Char: return (x' y) => (char)x == (char)y;  					case TypeCode.Byte: return (x' y) => (byte)x == (byte)y;  					case TypeCode.SByte: return (x' y) => (sbyte)x == (sbyte)y;  					case TypeCode.Int16: return (x' y) => (short)x == (short)y;  					case TypeCode.UInt16: return (x' y) => (ushort)x == (ushort)y;  					case TypeCode.Int32: return (x' y) => (int)x == (int)y;  					case TypeCode.UInt32: return (x' y) => (uint)x == (uint)y;  					case TypeCode.Int64: return (x' y) => (long)x == (long)y;  					case TypeCode.UInt64: return (x' y) => (ulong)x == (ulong)y;  					case TypeCode.Single: return (x' y) => (float)x == (float)y;  					case TypeCode.Double: return (x' y) => (double)x == (double)y;  					case TypeCode.String: return (x' y) => (string)x == (string)y;  				}
Missing Default,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,Equals,The following switch statement is missing a default case: switch (obj)  			{  				case null: return this.Array == null;  				case MutableSlice slice: return Equals(slice);  				case ArraySegment<byte> segment: return Equals(segment);  				case byte[] bytes: return Equals(bytes);  			}
Missing Default,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt24,The following switch statement is missing a default case: switch (count)  					{  						case 1: return *ptr;  						case 2: return UnsafeHelpers.LoadUInt16LE(ptr); // cannot be negative  						case 3: return UnsafeHelpers.LoadInt24LE(ptr);  					}
Missing Default,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToInt24BE,The following switch statement is missing a default case: switch (count)  					{  						case 1: return *ptr;  						case 2: return UnsafeHelpers.LoadUInt16BE(ptr);  						case 3: return UnsafeHelpers.LoadInt24BE(ptr);  					}
Missing Default,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt24,The following switch statement is missing a default case: switch (count)  					{  						case 1: return *ptr;  						case 2: return UnsafeHelpers.LoadUInt16LE(ptr);  						case 3: return UnsafeHelpers.LoadUInt24LE(ptr);  					}
Missing Default,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUInt24BE,The following switch statement is missing a default case: switch (count)  					{  						case 1: return *ptr;  						case 2: return UnsafeHelpers.LoadUInt16BE(ptr);  						case 3: return UnsafeHelpers.LoadUInt24BE(ptr);  					}
Missing Default,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUuid64,The following switch statement is missing a default case: switch (this.Count)  			{  				case 8:  				{ // binary (8 bytes)  					return Uuid64.Read(this);  				}    				case 16: // hex16  				case 17: // hex8-hex8  				case 19: // {hex8-hex8}  				{  					// ReSharper disable once AssignNullToNotNullAttribute  					return Uuid64.Parse(ToByteString());  				}  			}
Missing Default,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUuid80,The following switch statement is missing a default case: switch (this.Count)  			{  				case 10:  				{ // binary (10 bytes)  					return Uuid80.Read(this);  				}    				case 20: // XXXXXXXXXXXXXXXXXXXX  				case 22: // XXXX-XXXXXXXX-XXXXXXXX  				case 24: // {XXXX-XXXXXXXX-XXXXXXXX}  				{  					// ReSharper disable once AssignNullToNotNullAttribute  					return Uuid80.Parse(ToByteString());  				}  			}
Missing Default,System,MutableSlice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\MutableSlice.Comparer.cs,ToUuid96,The following switch statement is missing a default case: switch (this.Count)  			{  				case 12:  				{ // binary (12 bytes)  					return Uuid96.Read(this);  				}    				case 24: // XXXXXXXXXXXXXXXXXXXXXXXX  				case 26: // XXXXXXXX-XXXXXXXX-XXXXXXXX  				case 28: // {XXXXXXXX-XXXXXXXX-XXXXXXXX}  				{  					// ReSharper disable once AssignNullToNotNullAttribute  					return Uuid96.Parse(ToByteString());  				}  			}
Missing Default,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,Equals,The following switch statement is missing a default case: switch (obj)  			{  				case null: return this.Array == null;  				case Slice slice: return Equals(slice);  				case MutableSlice slice: return Equals(slice);  				case ArraySegment<byte> segment: return Equals(segment);  				case byte[] bytes: return Equals(bytes);  			}
Missing Default,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt24,The following switch statement is missing a default case: switch (count)  					{  						case 1: return *ptr;  						case 2: return UnsafeHelpers.LoadUInt16LE(ptr); // cannot be negative  						case 3: return UnsafeHelpers.LoadInt24LE(ptr);  					}
Missing Default,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToInt24BE,The following switch statement is missing a default case: switch (count)  					{  						case 1: return *ptr;  						case 2: return UnsafeHelpers.LoadUInt16BE(ptr);  						case 3: return UnsafeHelpers.LoadInt24BE(ptr);  					}
Missing Default,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt24,The following switch statement is missing a default case: switch (count)  					{  						case 1: return *ptr;  						case 2: return UnsafeHelpers.LoadUInt16LE(ptr);  						case 3: return UnsafeHelpers.LoadUInt24LE(ptr);  					}
Missing Default,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUInt24BE,The following switch statement is missing a default case: switch (count)  					{  						case 1: return *ptr;  						case 2: return UnsafeHelpers.LoadUInt16BE(ptr);  						case 3: return UnsafeHelpers.LoadUInt24BE(ptr);  					}
Missing Default,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUuid64,The following switch statement is missing a default case: switch (this.Count)  			{  				case 8:  				{ // binary (8 bytes)  					return Uuid64.Read(this);  				}    				case 16: // hex16  				case 17: // hex8-hex8  				case 19: // {hex8-hex8}  				{  					// ReSharper disable once AssignNullToNotNullAttribute  					return Uuid64.Parse(ToByteString());  				}  			}
Missing Default,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUuid80,The following switch statement is missing a default case: switch (this.Count)  			{  				case 10:  				{ // binary (10 bytes)  					return Uuid80.Read(this);  				}    				case 20: // XXXXXXXXXXXXXXXXXXXX  				case 22: // XXXX-XXXXXXXX-XXXXXXXX  				case 24: // {XXXX-XXXXXXXX-XXXXXXXX}  				{  					// ReSharper disable once AssignNullToNotNullAttribute  					return Uuid80.Parse(ToByteString());  				}  			}
Missing Default,System,Slice,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Memory\Slice.Comparer.cs,ToUuid96,The following switch statement is missing a default case: switch (this.Count)  			{  				case 12:  				{ // binary (12 bytes)  					return Uuid96.Read(this);  				}    				case 24: // XXXXXXXXXXXXXXXXXXXXXXXX  				case 26: // XXXXXXXX-XXXXXXXX-XXXXXXXX  				case 28: // {XXXXXXXX-XXXXXXXX-XXXXXXXX}  				{  					// ReSharper disable once AssignNullToNotNullAttribute  					return Uuid96.Parse(ToByteString());  				}  			}
Missing Default,System,Uuid128,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid128.cs,CompareTo,The following switch statement is missing a default case: switch (obj)  			{  				case null: return 1;  				case Uuid128 u128: return m_packed.CompareTo(u128.m_packed);  				case Guid g: return m_packed.CompareTo(g);  			}
Missing Default,System,Uuid64,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid64.cs,Equals,The following switch statement is missing a default case: switch (obj)  			{  				case Uuid64 u64: return Equals(u64);  				case ulong ul: return m_value == ul;  				case long l: return m_value == (ulong) l;  				//TODO: string format ? Slice ?  			}
Missing Default,System,Uuid80,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid80.cs,Equals,The following switch statement is missing a default case: switch (obj)  			{  				case Uuid80 uuid: return Equals(uuid);  				//TODO: string format ? Slice ?  			}
Missing Default,System,Uuid96,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Uuid96.cs,Equals,The following switch statement is missing a default case: switch (obj)  			{  				case Uuid96 uuid: return Equals(uuid);  				//TODO: string format ? Slice ?  			}
Missing Default,Doxense.Serialization,StringConverters,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\StringConverters.cs,TryParseDateTime,The following switch statement is missing a default case: switch (date.Length)  					{  						case 4:  						{ // YYYY -> YYYY/01/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							result = new DateTime(y' 1' 1);  							return true;  						}  						case 6:  						{ // YYYYMM -> YYYY/MM/01 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							result = new DateTime(y' m' 1);  							return true;  						}  						case 8:  						{ // YYYYMMDD -> YYYY/MM/DD 00:00:00.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							result = new DateTime(y' m' d);  							return true;  						}  						case 14:  						{ // YYYYMMDDHHMMSS -> YYYY/MM/DD HH:MM:SS.000  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							result = new DateTime(y' m' d' h' n' s);  							return true;  						}  						case 17:  						{ // YYYYMMDDHHMMSSFFF -> YYYY/MM/DD HH:MM:SS.FFF  							int y = ParseDateSegmentUnsafe(date' 0' 4);  							if (y < 1 || y > 9999) break;  							int m = ParseDateSegmentUnsafe(date' 4' 2);  							if (m < 1 || m > 12) break;  							int d = ParseDateSegmentUnsafe(date' 6' 2);  							if (d < 1 || d > 31) break;  							int h = ParseDateSegmentUnsafe(date' 8' 2);  							if (h < 0 || h > 23) break;  							int n = ParseDateSegmentUnsafe(date' 10' 2);  							if (n < 0 || n > 59) break;  							int s = ParseDateSegmentUnsafe(date' 12' 2);  							if (s < 0 || s > 59) break;  							int f = ParseDateSegmentUnsafe(date' 14' 3);  							result = new DateTime(y' m' d' h' n' s' f);  							return true;  						}  					}
Missing Default,Doxense.Collections.Tuples.Encoding,TuPackUserType,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuPackUserType.cs,ToString,The following switch statement is missing a default case: switch (this.Type)  			{  				case 0xFE: return "|Directory|";  				case 0xFF: return "|System|";  			}
Missing Default,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,DeserializeBoxed,The following switch statement is missing a default case: switch (type)  				{  					case TupleTypes.Nil: return null;  					case TupleTypes.Bytes: return TupleParser.ParseBytes(slice);  					case TupleTypes.Utf8: return TupleParser.ParseUnicode(slice);  					case TupleTypes.LegacyTupleStart: throw TupleParser.FailLegacyTupleNotSupported();  					case TupleTypes.EmbeddedTuple: return TupleParser.ParseTuple(slice);  				}
Missing Default,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,DeserializeBoxed,The following switch statement is missing a default case: switch (type)  				{  					case TupleTypes.Single: return TupleParser.ParseSingle(slice);  					case TupleTypes.Double: return TupleParser.ParseDouble(slice);  					//TODO: Triple  					case TupleTypes.Decimal: return TupleParser.ParseDecimal(slice);  					case TupleTypes.False: return false;  					case TupleTypes.True: return true;  					case TupleTypes.Uuid128: return TupleParser.ParseGuid(slice);  					case TupleTypes.Uuid64: return TupleParser.ParseUuid64(slice);  					case TupleTypes.VersionStamp80: return TupleParser.ParseVersionStamp(slice);  					case TupleTypes.VersionStamp96: return TupleParser.ParseVersionStamp(slice);    					case TupleTypes.Directory:  					{  						if (slice.Count == 1) return TuPackUserType.Directory;  						break;  					}  					case TupleTypes.Escape:  					{  						if (slice.Count == 1) return TuPackUserType.System;  						break;  					}  				}
Missing Default,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,DeserializeSlice,The following switch statement is missing a default case: switch(type)  			{  				case TupleTypes.Nil: return Slice.Nil;  				case TupleTypes.Bytes: return TupleParser.ParseBytes(slice);  				case TupleTypes.Utf8: return Slice.FromString(TupleParser.ParseUnicode(slice));    				case TupleTypes.Single: return Slice.FromSingle(TupleParser.ParseSingle(slice));  				case TupleTypes.Double: return Slice.FromDouble(TupleParser.ParseDouble(slice));  				//TODO: triple  				case TupleTypes.Decimal: return Slice.FromDecimal(TupleParser.ParseDecimal(slice));    				case TupleTypes.Uuid128: return Slice.FromGuid(TupleParser.ParseGuid(slice));  				case TupleTypes.Uuid64: return Slice.FromUuid64(TupleParser.ParseUuid64(slice));  			}
Missing Default,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,DeserializeUserType,The following switch statement is missing a default case: switch (type)  				{  					case 0xFE: return TuPackUserType.Directory;  					case 0xFF: return TuPackUserType.System;  				}
Missing Default,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,DeserializeBoolean,The following switch statement is missing a default case: switch (type)  			{  				case TupleTypes.Bytes:  				{ // empty is false' all other is true  					return slice.Count != 2; // <01><00>  				}  				case TupleTypes.Utf8:  				{// empty is false' all other is true  					return slice.Count != 2; // <02><00>  				}  				case TupleTypes.Single:  				{  					//TODO: should NaN considered to be false ?  					//=> it is the "null" of the floats' so if we do' 'null' should also be considered false  					// ReSharper disable once CompareOfFloatsByEqualityOperator  					return 0f != TupleParser.ParseSingle(slice);  				}  				case TupleTypes.Double:  				{  					//TODO: should NaN considered to be false ?  					//=> it is the "null" of the floats' so if we do' 'null' should also be considered false  					// ReSharper disable once CompareOfFloatsByEqualityOperator  					return 0d != TupleParser.ParseDouble(slice);  				}  				//TODO: triple  				case TupleTypes.Decimal:  				{  					return 0m != TupleParser.ParseDecimal(slice);  				}  				case TupleTypes.False:  				{  					return false;  				}  				case TupleTypes.True:  				{  					return true;  				}  			}
Missing Default,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,DeserializeInt64,The following switch statement is missing a default case: switch (type)  				{  					case TupleTypes.Nil: return 0;  					case TupleTypes.Bytes: return long.Parse(TupleParser.ParseAscii(slice)' CultureInfo.InvariantCulture);  					case TupleTypes.Utf8: return long.Parse(TupleParser.ParseUnicode(slice)' CultureInfo.InvariantCulture);  				}
Missing Default,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,DeserializeUInt64,The following switch statement is missing a default case: switch (type)  				{  					case TupleTypes.Nil: return 0;  					case TupleTypes.Bytes: return ulong.Parse(TupleParser.ParseAscii(slice)' CultureInfo.InvariantCulture);  					case TupleTypes.Utf8: return ulong.Parse(TupleParser.ParseUnicode(slice)' CultureInfo.InvariantCulture);  				}
Missing Default,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,DeserializeSingle,The following switch statement is missing a default case: switch (type)  			{  				case TupleTypes.Nil:  				{  					//REVIEW: or should we retourne NaN?  					return 0;  				}  				case TupleTypes.Utf8:  				{  					return float.Parse(TupleParser.ParseUnicode(slice)' CultureInfo.InvariantCulture);  				}  				case TupleTypes.Single:  				{  					return TupleParser.ParseSingle(slice);  				}  				case TupleTypes.Double:  				{  					return (float) TupleParser.ParseDouble(slice);  				}  				case TupleTypes.Decimal:  				{  					return (float) TupleParser.ParseDecimal(slice);  				}  			}
Missing Default,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,DeserializeDouble,The following switch statement is missing a default case: switch(type)  			{  				case TupleTypes.Nil:  				{  					//REVIEW: or should we retourne NaN?  					return 0;  				}  				case TupleTypes.Utf8:  				{  					return double.Parse(TupleParser.ParseUnicode(slice)' CultureInfo.InvariantCulture);  				}  				case TupleTypes.Single:  				{  					return TupleParser.ParseSingle(slice);  				}  				case TupleTypes.Double:  				{  					return TupleParser.ParseDouble(slice);  				}  				case TupleTypes.Decimal:  				{  					return (double) TupleParser.ParseDecimal(slice);  				}  			}
Missing Default,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,DeserializeDateTime,The following switch statement is missing a default case: switch(type)  			{  				case TupleTypes.Nil:  				{  					return DateTime.MinValue;  				}    				case TupleTypes.Utf8:  				{ // we only support ISO 8601 dates. For ex: YYYY-MM-DDTHH:MM:SS.fffff"  					string str = TupleParser.ParseUnicode(slice);  					return DateTime.Parse(str' CultureInfo.InvariantCulture' DateTimeStyles.RoundtripKind);  				}    				case TupleTypes.Double:  				{ // Number of days since Epoch  					const long UNIX_EPOCH_TICKS = 621355968000000000L;  					//note: we can't user TimeSpan.FromDays(...) because it rounds to the nearest millisecond!  					long ticks = UNIX_EPOCH_TICKS + (long)(TupleParser.ParseDouble(slice) * TimeSpan.TicksPerDay);  					return new DateTime(ticks' DateTimeKind.Utc);  				}    				case TupleTypes.Decimal:  				{  					const long UNIX_EPOCH_TICKS = 621355968000000000L;  					//note: we can't user TimeSpan.FromDays(...) because it rounds to the nearest millisecond!  					long ticks = UNIX_EPOCH_TICKS + (long)(TupleParser.ParseDecimal(slice) * TimeSpan.TicksPerDay);  					return new DateTime(ticks' DateTimeKind.Utc);  				}  			}
Missing Default,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,DeserializeTimeSpan,The following switch statement is missing a default case: switch(type)  			{  				case TupleTypes.Nil:  				{  					return TimeSpan.Zero;  				}  				case TupleTypes.Utf8:  				{ // "HH:MM:SS.fffff"  					return TimeSpan.Parse(TupleParser.ParseUnicode(slice)' CultureInfo.InvariantCulture);  				}  				case TupleTypes.Single:  				{ // Number of seconds  					//note: We can't use TimeSpan.FromSeconds(...) because it rounds to the nearest millisecond!  					return new TimeSpan((long) (TupleParser.ParseSingle(slice) * TimeSpan.TicksPerSecond));  				}  				case TupleTypes.Double:  				{ // Number of seconds  					//note: We can't use TimeSpan.FromSeconds(...) because it rounds to the nearest millisecond!  					return new TimeSpan((long) (TupleParser.ParseDouble(slice) * TimeSpan.TicksPerSecond));  				}  				case TupleTypes.Decimal:  				{ // Number of seconds  					//note: We can't use TimeSpan.FromSeconds(...) because it rounds to the nearest millisecond!  					return new TimeSpan((long) (TupleParser.ParseDecimal(slice) * TimeSpan.TicksPerSecond));  				}  			}
Missing Default,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,DeserializeChar,The following switch statement is missing a default case: switch (type)  			{  				case TupleTypes.Nil:  				{  					return '\0';  				}  				case TupleTypes.Bytes:  				{  					var s = TupleParser.ParseBytes(slice);  					if (s.Count == 0) return '\0';  					if (s.Count == 1) return (char) s[0];  					throw new FormatException($"Cannot convert buffer of size {s.Count} into a Char");  				}  				case TupleTypes.Utf8:  				{  					var s = TupleParser.ParseUnicode(slice);  					if (s.Length == 0) return '\0';  					if (s.Length == 1) return s[0];  					throw new FormatException($"Cannot convert string of size {s.Length} into a Char");  				}  			}
Missing Default,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,DeserializeString,The following switch statement is missing a default case: switch (type)  			{  				case TupleTypes.Nil:  				{  					return null;  				}  				case TupleTypes.Bytes:  				{  					return TupleParser.ParseAscii(slice);  				}  				case TupleTypes.Utf8:  				{  					return TupleParser.ParseUnicode(slice);  				}  				case TupleTypes.Single:  				{  					return TupleParser.ParseSingle(slice).ToString(CultureInfo.InvariantCulture);  				}  				case TupleTypes.Double:  				{  					return TupleParser.ParseDouble(slice).ToString(CultureInfo.InvariantCulture);  				}  				case TupleTypes.Decimal:  				{  					return TupleParser.ParseDecimal(slice).ToString(CultureInfo.InvariantCulture);  				}  				case TupleTypes.Uuid128:  				{  					return TupleParser.ParseGuid(slice).ToString();  				}  				case TupleTypes.Uuid64:  				{  					return TupleParser.ParseUuid64(slice).ToString();  				}  			}
Missing Default,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,DeserializeGuid,The following switch statement is missing a default case: switch (type)  			{  				case TupleTypes.Bytes:  				{  					return Guid.Parse(TupleParser.ParseAscii(slice));  				}  				case TupleTypes.Utf8:  				{  					return Guid.Parse(TupleParser.ParseUnicode(slice));  				}  				case TupleTypes.Uuid128:  				{  					return TupleParser.ParseGuid(slice);  				}  				//REVIEW: should we allow converting a Uuid64 into a Guid? This looks more like a bug than an expected behavior...  			}
Missing Default,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,DeserializeUuid128,The following switch statement is missing a default case: switch (type)  			{  				case TupleTypes.Bytes:  				{ // expect binary representation as a 16-byte array  					return new Uuid128(TupleParser.ParseBytes(slice));  				}  				case TupleTypes.Utf8:  				{ // expect text representation  					return new Uuid128(TupleParser.ParseUnicode(slice));  				}  				case TupleTypes.Uuid128:  				{  					return TupleParser.ParseUuid128(slice);  				}  				//REVIEW: should we allow converting a Uuid64 into a Uuid128? This looks more like a bug than an expected behavior...  			}
Missing Default,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,DeserializeUuid96,The following switch statement is missing a default case: switch (type)  			{  				case TupleTypes.Bytes:  				{ // expect binary representation as a 12-byte array  					return Uuid96.Read(TupleParser.ParseBytes(slice));  				}  				case TupleTypes.Utf8:  				{ // expect text representation  					return Uuid96.Parse(TupleParser.ParseUnicode(slice));  				}  				case TupleTypes.VersionStamp96:  				{  					return TupleParser.ParseVersionStamp(slice).ToUuid96();  				}  			}
Missing Default,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,DeserializeUuid80,The following switch statement is missing a default case: switch (type)  			{  				case TupleTypes.Bytes:  				{ // expect binary representation as a 10-byte array  					return Uuid80.Read(TupleParser.ParseBytes(slice));  				}  				case TupleTypes.Utf8:  				{ // expect text representation  					return Uuid80.Parse(TupleParser.ParseUnicode(slice));  				}  				case TupleTypes.VersionStamp80:  				{  					return TupleParser.ParseVersionStamp(slice).ToUuid80();  				}  			}
Missing Default,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,DeserializeUuid64,The following switch statement is missing a default case: switch (type)  			{  				case TupleTypes.Bytes:  				{ // expect binary representation as a 16-byte array  					return Uuid64.Read(TupleParser.ParseBytes(slice));  				}  				case TupleTypes.Utf8:  				{ // expect text representation  					return Uuid64.Parse(TupleParser.ParseUnicode(slice));  				}  				case TupleTypes.Uuid64:  				{  					return TupleParser.ParseUuid64(slice);  				}  			}
Missing Default,Doxense.Collections.Tuples.Encoding,TuplePackers,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TuplePackers.cs,DeserializeIpAddress,The following switch statement is missing a default case: switch (type)  			{  				case TupleTypes.Bytes:  				{  					return new System.Net.IPAddress(TupleParser.ParseBytes(slice).GetBytesOrEmpty());  				}  				case TupleTypes.Utf8:  				{  					return System.Net.IPAddress.Parse(TupleParser.ParseUnicode(slice));  				}  				case TupleTypes.Uuid128:  				{ // could be an IPv6 encoded as a 128-bits UUID  					return new System.Net.IPAddress(slice.GetBytesOrEmpty());  				}  			}
Missing Default,Doxense.Collections.Tuples.Encoding,TupleParser,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleParser.cs,ParseNext,The following switch statement is missing a default case: switch (type)  			{  				case -1:  				{ // End of Stream  					return Slice.Nil;  				}    				case TupleTypes.Nil:  				{ // <00> / <00><FF> => null  					if (reader.Depth > 0)  					{ // must be <00><FF> inside an embedded tuple  						if (reader.Input.PeekByteAt(1) == 0xFF)  						{ // this is a Nil entry  							reader.Input.Skip(2);  							return Slice.Empty;  						}  						else  						{ // this is the end of the embedded tuple  							reader.Input.Skip(1);  							return Slice.Nil;  						}  					}  					else  					{ // can be <00> outside an embedded tuple  						reader.Input.Skip(1);  						return Slice.Empty;  					}  				}    				case TupleTypes.Bytes:  				{ // <01>(bytes)<00>  					return reader.Input.ReadByteString();  				}    				case TupleTypes.Utf8:  				{ // <02>(utf8 bytes)<00>  					return reader.Input.ReadByteString();  				}    				case TupleTypes.LegacyTupleStart:  				{ // <03>(packed tuple)<04>    					//note: this format is NOT SUPPORTED ANYMORE' because it was not compatible with the current spec (<03>...<00> instead of <03>...<04> and is replaced by <05>....<00>)  					//we prefer throwing here instead of still attempting to decode the tuple' because it could silently break layers (if we read an old-style key and update it with the new-style format)  					throw TupleParser.FailLegacyTupleNotSupported();  				}  				case TupleTypes.EmbeddedTuple:  				{ // <05>(packed tuple)<00>  					//PERF: currently' we will first scan to get all the bytes of this tuple' and parse it later.  					// This means that we may need to scan multiple times the bytes' which may not be efficient if there are multiple embedded tuples inside each other  					return ReadEmbeddedTupleBytes(ref reader);  				}    				case TupleTypes.Single:  				{ // <20>(4 bytes)  					return reader.Input.ReadBytes(5);  				}    				case TupleTypes.Double:  				{ // <21>(8 bytes)  					return reader.Input.ReadBytes(9);  				}    				case TupleTypes.Triple:  				{ // <22>(10 bytes)  					return reader.Input.ReadBytes(11);  				}    				case TupleTypes.Decimal:  				{ // <23>(16 bytes)  					return reader.Input.ReadBytes(17);  				}    				case TupleTypes.False:  				{ // <26>  					return reader.Input.ReadBytes(1);  				}  				case TupleTypes.True:  				{ // <27>  					return reader.Input.ReadBytes(1);  				}    				case TupleTypes.Uuid128:  				{ // <30>(16 bytes)  					return reader.Input.ReadBytes(17);  				}    				case TupleTypes.Uuid64:  				{ // <31>(8 bytes)  					return reader.Input.ReadBytes(9);  				}    				case TupleTypes.VersionStamp80:  				{ // <32>(10 bytes)  					return reader.Input.ReadBytes(11);  				}    				case TupleTypes.VersionStamp96:  				{ // <33>(12 bytes)  					return reader.Input.ReadBytes(13);  				}    				case TupleTypes.Directory:  				case TupleTypes.Escape:  				{ // <FE> or <FF>  					return reader.Input.ReadBytes(1);  				}  			}
Missing Default,Doxense.Collections.Tuples.Encoding,TupleTypes,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\Encoding\TupleTypes.cs,DecodeSegmentType,The following switch statement is missing a default case: switch(type)  			{  				case Nil: return TupleSegmentType.Nil;  				case Bytes: return TupleSegmentType.ByteString;  				case Utf8: return TupleSegmentType.UnicodeString;  				case LegacyTupleStart: return TupleSegmentType.Invalid; // not supported anymore  				case EmbeddedTuple: return TupleSegmentType.Tuple;  				case Single: return TupleSegmentType.Single;  				case Double: return TupleSegmentType.Double;  				case Triple: return TupleSegmentType.Triple;  				case Decimal: return TupleSegmentType.Decimal;  				case Uuid128: return TupleSegmentType.Uuid128;  				case Uuid64: return TupleSegmentType.Uuid64;  				case VersionStamp80: return TupleSegmentType.VersionStamp80;  				case VersionStamp96: return TupleSegmentType.VersionStamp96;  			}
Missing Default,Doxense.Collections.Tuples,Formatter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Client\Shared\Tuples\STuple.cs,StringifyBoxed,The following switch statement is missing a default case: switch (item)  				{  					case null:         return TokenNull;  					case string s:     return Stringify(s);  					case int i:        return Stringify(i);  					case long l:       return Stringify(l);  					case uint u:       return Stringify(u);  					case ulong ul:     return Stringify(ul);  					case bool b:       return Stringify(b);  					case char c:       return Stringify(c);  					case Slice sl: return Stringify(sl);  					case MutableSlice sl: return Stringify(sl);  					case double d:     return Stringify(d);  					case float f:      return Stringify(f);  					case Guid guid:    return Stringify(guid);  					case Uuid128 u128: return Stringify(u128);  					case Uuid64 u64:   return Stringify(u64);  				}
