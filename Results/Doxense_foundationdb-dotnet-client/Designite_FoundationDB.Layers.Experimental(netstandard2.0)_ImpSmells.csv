Implementation smell,Namespace,Class,File,Method,Description
Long Method,FoundationDB.Layers.Messaging,FdbWorkerPool,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\FdbWorkerPool.cs,RunWorkerAsync,The method has 140 lines of code.
Long Method,FoundationDB.Layers.Messaging,WorkerPoolTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The method has 121 lines of code.
Complex Method,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,ComputeBounds,Cyclomatic complexity of the method is 12
Complex Method,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBitView,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBitView.cs,GetEnumerator,Cyclomatic complexity of the method is 8
Complex Method,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,Set,Cyclomatic complexity of the method is 13
Complex Method,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,Clear,Cyclomatic complexity of the method is 10
Complex Method,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,ToBooleanArray,Cyclomatic complexity of the method is 8
Complex Method,FoundationDB.Layers.Experimental.Indexing,WordAlignHybridEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,CompressedBinaryExpression,Cyclomatic complexity of the method is 16
Long Parameter List,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,GetStatistics,The method has 5 parameters. Parameters: bits' words' literals' fillers' ratio
Long Parameter List,FoundationDB.Layers.Messaging,WorkerPoolTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The method has 7 parameters. Parameters: db' location' ct' done' N' K' W
Long Statement,FoundationDB.Layers.Blobs,FdbHashSetCollection,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Documents\FdbHashSetCollection.cs,GetKeys,The length of the statement  "			//note: As of Beta2' FDB does not have a fdb_get_range that only return the keys. That means that we will have to also read the values from the db' in order to just get the names of the fields :( " is 195.
Long Statement,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,ComputeBounds,The length of the statement  "				if (highest < 0 && highest != -1) throw new InvalidOperationException("Corrupted bitmap buffer (highest bit underflow)" + highest); " is 131.
Long Statement,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,SplitFiller,The length of the statement  "			//Console.WriteLine("> Splitting 1-filler with repeat count {1} at {0}' with {2} before and {3} after"' offset' count' head' tail); " is 131.
Long Statement,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,SplitFiller,The length of the statement  "					//Console.WriteLine("> INSERT [...] ({0}:{1}) [{2}:0x{3:X8}] ({4}:{5}) [...]"' offset' head' offset + 1' mask' offset + 2' tail); " is 129.
Long Statement,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapWriter,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapWriter.cs,Flush,The length of the statement  "			Contract.Requires(m_counter == 0 ? (m_current == NO_VALUE) : (m_current == CompressedWord.ALL_ZEROES || m_current == CompressedWord.ALL_ONES)); " is 143.
Long Statement,FoundationDB.Layers.Experimental.Indexing,CompressedWord,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedWord.cs,ToString,The length of the statement  "				: String.Format(CultureInfo.InvariantCulture' "[{0}' {1})]"' this.FillCount * 31L' this.FillBit == 1 ? "set" : "clear"); " is 120.
Long Statement,FoundationDB.Layers.Experimental.Indexing,CompressedWord,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedWord.cs,MakeZeroes,The length of the statement  "			return WordAlignHybridEncoder.BIT_TYPE_FILL | WordAlignHybridEncoder.BIT_FILL_ZERO | ((uint)(length - 1) & WordAlignHybridEncoder.LENGTH_MASK); " is 143.
Long Statement,FoundationDB.Layers.Experimental.Indexing,CompressedWord,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedWord.cs,MakeOnes,The length of the statement  "			return WordAlignHybridEncoder.BIT_TYPE_FILL | WordAlignHybridEncoder.BIT_FILL_ONE | ((uint)(length - 1) & WordAlignHybridEncoder.LENGTH_MASK); " is 142.
Long Statement,FoundationDB.Layers.Experimental.Indexing,WordAlignHybridEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,CompressToUnsafe,The length of the statement  "			// 5) output a repeat word' with MSB set to 1' followed by FILL_BIT' and then LENGTH-1 (30 bit)' and jump back to step 1) " is 121.
Long Statement,FoundationDB.Layers.Experimental.Indexing,WordAlignHybridEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,CompressedBinaryExpression,The length of the statement  "			Contract.Requires(left != null && right != null && /*op != LogicalOperation.And &&*/ Enum.IsDefined(typeof(LogicalOperation)' op)); " is 131.
Long Statement,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Read,The length of the statement  "				Contract.Ensures(m_bits >= 0 && m_bits <= 64 - 31 && m_remaining >= 0' "Corrupted state after reading " + m_bits + " " + m_remaining); " is 134.
Long Statement,FoundationDB.Layers.Experimental.Indexing,FdbCompressedBitmapIndex<TValue>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\FdbCompressedBitmapIndex.cs,AddAsync,The length of the statement  "				var builder = data.HasValue ? new CompressedBitmapBuilder(MutableSlice.AsUnsafeMutableSlice(data)) : CompressedBitmapBuilder.Empty; " is 131.
Long Statement,FoundationDB.Layers.Experimental.Indexing,FdbCompressedBitmapIndex<TValue>,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\FdbCompressedBitmapIndex.cs,UpdateAsync,The length of the statement  "					var builder = data.HasValue ? new CompressedBitmapBuilder(MutableSlice.AsUnsafeMutableSlice(data)) : CompressedBitmapBuilder.Empty; " is 131.
Long Statement,FoundationDB.Layers.Messaging,FdbWorkerPool,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\FdbWorkerPool.cs,FindRandomItem,The length of the statement  "			// We want to find the next item in the clockwise direction. If we reach the end of the ring' we "wrap around" by starting again from the start " is 143.
Long Statement,FoundationDB.Layers.Messaging,FdbWorkerPool,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\FdbWorkerPool.cs,FindRandomItem,The length of the statement  "			// When the ring only contains a few items (or is empty)' there is more than 50% change that we wont find anything in the first read. " is 133.
Long Statement,FoundationDB.Layers.Messaging,FdbWorkerPool,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\FdbWorkerPool.cs,FindRandomItem,The length of the statement  "			// To reduce the latency for this case' we will issue both range reads at the same time' and discard the second one if the first returned something. " is 148.
Long Statement,FoundationDB.Layers.Messaging,WorkerPoolTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The length of the statement  "					Console.WriteLine("@@@ T=" + now.Subtract(start) + "' sent: " + msgSent.ToString("N0") + "' recv: " + msgReceived.ToString("N0")); " is 130.
Long Statement,FoundationDB.Layers.Messaging,WorkerPoolTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The length of the statement  "					Console.WriteLine("### Workers: " + workerPool.IdleWorkers + " / " + workerPool.ActiveWorkers + " (" + new string('#'' workerPool.IdleWorkers) + new string('.'' workerPool.ActiveWorkers - workerPool.IdleWorkers) + ")' sent: " + workerPool.MessageScheduled.ToString("N0") + "' recv: " + workerPool.MessageReceived.ToString("N0") + "' delta: " + (workerPool.MessageScheduled - workerPool.MessageReceived).ToString("N0") + "' busy: " + workerPool.WorkerBusyTime + " (avg " + workerPool.WorkerAverageBusyDuration.TotalMilliseconds.ToString("N3") + " ms)"); " is 552.
Magic Number,FoundationDB.Layers.Experimental.Indexing,BitRange,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\BitRange.cs,GetHashCode,The following statement contains a magic number: return unchecked(this.Lowest * 31) ^ this.Highest;
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,CompressedBitmap,The following statement contains a magic number: data.Count > 0 && data.Count < 8
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,CompressedBitmap,The following statement contains a magic number: (data.Count & 3) != 0
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,Test,The following statement contains a magic number: int n = p + word.FillCount * 31;
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,ComputeBounds,The following statement contains a magic number: count > 0 && count < 8
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,ComputeBounds,The following statement contains a magic number: (count & 3) != 0
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,ComputeBounds,The following statement contains a magic number: highest = (int)data.ReadUInt32(0' 4);
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,ComputeBounds,The following statement contains a magic number: lowest += 31;
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,ComputeBounds,The following statement contains a magic number: lowest += 31 * word.FillCount;
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmap,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmap.cs,GetStatistics,The following statement contains a magic number: ratio = (32.0 * words) /  m_bounds.Highest;
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBitView,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBitView.cs,GetEnumerator,The following statement contains a magic number: i < 31
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBitView,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBitView.cs,GetEnumerator,The following statement contains a magic number: offset += 31;
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,CompressedBitmapBuilder,The following statement contains a magic number: (bitmap.Data.Count & 3) != 0
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,DecodeWords,The following statement contains a magic number: Contract.Requires(size >= 0 && data.Count >= 4 && (data.Count & 3) == 0);
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,DecodeWords,The following statement contains a magic number: Contract.Requires(size >= 0 && data.Count >= 4 && (data.Count & 3) == 0);
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,DecodeWords,The following statement contains a magic number: words[i] = new CompressedWord(data.ReadUInt32(p' 4));
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,GetWordIndex,The following statement contains a magic number: mask = 1U << (offset % 31);
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,GetWordIndex,The following statement contains a magic number: return offset / 31;
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,EnsureCapacity,The following statement contains a magic number: newSize = 8;
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,EnsureCapacity,The following statement contains a magic number: newSize < 8
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,Set,The following statement contains a magic number: EnsureCapacity(m_size + 2);
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,SplitFiller,The following statement contains a magic number: int head = ((relativeOffset * 31) / 31);
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,SplitFiller,The following statement contains a magic number: int head = ((relativeOffset * 31) / 31);
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,SplitFiller,The following statement contains a magic number: Shift(offset + 1' 2);
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,SplitFiller,The following statement contains a magic number: m_words[offset + 2] = CompressedWord.MakeFiller(set' tail);
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,Pack,The following statement contains a magic number: var writer = new SliceWriter(checked((size + 1) << 2));
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapBuilder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapBuilder.cs,ToBooleanArray,The following statement contains a magic number: int j = 31;
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapWordIterator,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapWordIterator.cs,CompressedBitmapWordIterator,The following statement contains a magic number: Contract.Requires((buffer.Count & 3) == 0 && (buffer.Count == 0 || buffer.Count >= 8));
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapWordIterator,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapWordIterator.cs,CompressedBitmapWordIterator,The following statement contains a magic number: Contract.Requires((buffer.Count & 3) == 0 && (buffer.Count == 0 || buffer.Count >= 8));
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedBitmapWordIterator,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedBitmapWordIterator.cs,MoveNext,The following statement contains a magic number: m_reader.Remaining < 4
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedWord,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedWord.cs,GetLowestBit,The following statement contains a magic number: i <= 30
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedWord,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedWord.cs,CountBits,The following statement contains a magic number: return IsLiteralWord(r)  				? BitCount(this.Literal)  				: (31 * GetFillBit(r) * GetFillCount(r));
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedWord,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedWord.cs,ToString,The following statement contains a magic number: return IsLiteral  				? String.Format(CultureInfo.InvariantCulture' "[31' 0x{0:X}]"' this.Literal)  				: String.Format(CultureInfo.InvariantCulture' "[{0}' {1})]"' this.FillCount * 31L' this.FillBit == 1 ? "set" : "clear");
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedWord,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedWord.cs,BitCount,The following statement contains a magic number: value = (value & 0x33333333) + ((value >> 2) & 0x33333333);
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedWord,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedWord.cs,BitCount,The following statement contains a magic number: value = ((value + (value >> 4) & 0xF0F0F0F) * 0x1010101) >> (32 - 8);
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedWord,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedWord.cs,BitCount,The following statement contains a magic number: value = ((value + (value >> 4) & 0xF0F0F0F) * 0x1010101) >> (32 - 8);
Magic Number,FoundationDB.Layers.Experimental.Indexing,CompressedWord,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\CompressedWord.cs,BitCount,The following statement contains a magic number: value = ((value + (value >> 4) & 0xF0F0F0F) * 0x1010101) >> (32 - 8);
Magic Number,FoundationDB.Layers.Experimental.Indexing,WordAlignHybridEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,DumpCompressed,The following statement contains a magic number: output.Append($" {(compressed.Count >> 2) - 1} words");
Magic Number,FoundationDB.Layers.Experimental.Indexing,WordAlignHybridEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,DumpCompressed,The following statement contains a magic number: p += 31;
Magic Number,FoundationDB.Layers.Experimental.Indexing,WordAlignHybridEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,DumpCompressed,The following statement contains a magic number: reader.Remaining >= 4
Magic Number,FoundationDB.Layers.Experimental.Indexing,WordAlignHybridEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Not,The following statement contains a magic number: n += 31;
Magic Number,FoundationDB.Layers.Experimental.Indexing,WordAlignHybridEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Not,The following statement contains a magic number: writer.Write(CompressedWord.ALL_ONES' size / 31);
Magic Number,FoundationDB.Layers.Experimental.Indexing,WordAlignHybridEncoder,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Not,The following statement contains a magic number: int r = size % 31;
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,FillRegister,The following statement contains a magic number: Contract.Requires(bits >= 0 && bits < 31' "Bad bits " + bits);
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,FillRegister,The following statement contains a magic number: int freeBits = 64 - bits;
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,FillRegister,The following statement contains a magic number: freeBits -= 8;
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,FillRegister,The following statement contains a magic number: freeBits >= 8 && remaining > 0
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,FillRegister,The following statement contains a magic number: bits = 64 - freeBits;
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,FillRegister,The following statement contains a magic number: Contract.Assert(bits > 0 && bits <= 64' "bits = " + bits + " freebits = " + freeBits);
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Peek,The following statement contains a magic number: Contract.Requires(m_bits >= 0 && m_bits <= 64' "Number of bits is invalid " + m_bits);
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Peek,The following statement contains a magic number: return (uint)(register >> (64 - 31));
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Peek,The following statement contains a magic number: return (uint)(register >> (64 - 31));
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Peek,The following statement contains a magic number: bits == 31
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Peek,The following statement contains a magic number: !FillRegister(ref register' ref bits) || bits < 31
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Peek,The following statement contains a magic number: Contract.Assert(bits > 0 && bits <= 64);
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Peek,The following statement contains a magic number: Contract.Ensures(m_bits > 0 && m_bits <= 64 && m_remaining >= 0' "Corrupted state after peeking");
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Peek,The following statement contains a magic number: bits < 31
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Peek,The following statement contains a magic number: return (uint)(register >> (64 - 31));
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Peek,The following statement contains a magic number: return (uint)(register >> (64 - 31));
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Read,The following statement contains a magic number: Contract.Requires(m_bits >= 0 && m_bits <= 64);
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Read,The following statement contains a magic number: return (uint)(register >> (64 - 31));
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Read,The following statement contains a magic number: return (uint)(register >> (64 - 31));
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Read,The following statement contains a magic number: bits == 31
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Read,The following statement contains a magic number: bits < 31 && (!FillRegister(ref register' ref bits) || bits < 31)
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Read,The following statement contains a magic number: bits < 31 && (!FillRegister(ref register' ref bits) || bits < 31)
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Read,The following statement contains a magic number: Contract.Assert(bits >= 31 && bits <= 64' "bad bits " + bits);
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Read,The following statement contains a magic number: Contract.Assert(bits >= 31 && bits <= 64' "bad bits " + bits);
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Read,The following statement contains a magic number: m_bits = bits - 31;
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Read,The following statement contains a magic number: m_register = register << 31;
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Read,The following statement contains a magic number: Contract.Ensures(m_bits >= 0 && m_bits <= 64 - 31 && m_remaining >= 0' "Corrupted state after reading " + m_bits + " " + m_remaining);
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Read,The following statement contains a magic number: Contract.Ensures(m_bits >= 0 && m_bits <= 64 - 31 && m_remaining >= 0' "Corrupted state after reading " + m_bits + " " + m_remaining);
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Read,The following statement contains a magic number: return (uint)(register >> (64 - 31));
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,Read,The following statement contains a magic number: return (uint)(register >> (64 - 31));
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,ReadIf,The following statement contains a magic number: m_bits < 31 && m_remaining == 0
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,ReadIf,The following statement contains a magic number: m_register <<= 31;
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,ReadIf,The following statement contains a magic number: m_bits -= 31;
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,ReadIf,The following statement contains a magic number: m_bits >= 31
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,ReadLast,The following statement contains a magic number: m_bits >= 31
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,ReadLast,The following statement contains a magic number: var value = (uint)(m_register >> (64 - 31));
Magic Number,FoundationDB.Layers.Experimental.Indexing,UncompressedWordReader,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Indexes\Bitmaps\WordAlignHybridCoding.cs,ReadLast,The following statement contains a magic number: var value = (uint)(m_register >> (64 - 31));
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,Main,The following statement contains a magic number: cts.CancelAfter(TimeSpan.FromSeconds(60));
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,Main,The following statement contains a magic number: const int N = 100;
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,Main,The following statement contains a magic number: const int K = 2;
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,Main,The following statement contains a magic number: const int W = 2;
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: Func<FdbWorkerMessage' CancellationToken' Task> handler = async (msg' _ct) =>  				{  					Interlocked.Increment(ref msgReceived);    					//await Task.Delay(10 + Math.Abs(msg.Id.GetHashCode()) % 50);  					await Task.Delay(10).ConfigureAwait(false);    				};
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: Func<int' Task> client = async (id) =>  				{  					await clientSignal.Task.ConfigureAwait(false);  					await Task.Delay(10).ConfigureAwait(false);    					var rnd = new Random(id * 111);  					for (int i = 0; i < N; i++)  					{  						var taskId = Slice.FromString("T" + Interlocked.Increment(ref taskCounter));  						var taskBody = Slice.FromString("Message " + (i + 1) + " of " + N + " from client #" + id);    						await workerPool.ScheduleTaskAsync(db' taskId' taskBody' ct).ConfigureAwait(false);  						Interlocked.Increment(ref msgSent);    						//if (i > 0 && i % 10 == 0) Console.WriteLine("@@@ Client#" + id + " pushed " + (i + 1) + " / " + N + " messages");    						switch (rnd.Next(5))  						{  							case 0: await Task.Delay(10).ConfigureAwait(false); break;  							case 1: await Task.Delay(100).ConfigureAwait(false); break;  							case 2: await Task.Delay(500).ConfigureAwait(false); break;  						}  					}  					Console.WriteLine("@@@ Client#" + id + " has finished!");  				};
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: Func<int' Task> client = async (id) =>  				{  					await clientSignal.Task.ConfigureAwait(false);  					await Task.Delay(10).ConfigureAwait(false);    					var rnd = new Random(id * 111);  					for (int i = 0; i < N; i++)  					{  						var taskId = Slice.FromString("T" + Interlocked.Increment(ref taskCounter));  						var taskBody = Slice.FromString("Message " + (i + 1) + " of " + N + " from client #" + id);    						await workerPool.ScheduleTaskAsync(db' taskId' taskBody' ct).ConfigureAwait(false);  						Interlocked.Increment(ref msgSent);    						//if (i > 0 && i % 10 == 0) Console.WriteLine("@@@ Client#" + id + " pushed " + (i + 1) + " / " + N + " messages");    						switch (rnd.Next(5))  						{  							case 0: await Task.Delay(10).ConfigureAwait(false); break;  							case 1: await Task.Delay(100).ConfigureAwait(false); break;  							case 2: await Task.Delay(500).ConfigureAwait(false); break;  						}  					}  					Console.WriteLine("@@@ Client#" + id + " has finished!");  				};
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: Func<int' Task> client = async (id) =>  				{  					await clientSignal.Task.ConfigureAwait(false);  					await Task.Delay(10).ConfigureAwait(false);    					var rnd = new Random(id * 111);  					for (int i = 0; i < N; i++)  					{  						var taskId = Slice.FromString("T" + Interlocked.Increment(ref taskCounter));  						var taskBody = Slice.FromString("Message " + (i + 1) + " of " + N + " from client #" + id);    						await workerPool.ScheduleTaskAsync(db' taskId' taskBody' ct).ConfigureAwait(false);  						Interlocked.Increment(ref msgSent);    						//if (i > 0 && i % 10 == 0) Console.WriteLine("@@@ Client#" + id + " pushed " + (i + 1) + " / " + N + " messages");    						switch (rnd.Next(5))  						{  							case 0: await Task.Delay(10).ConfigureAwait(false); break;  							case 1: await Task.Delay(100).ConfigureAwait(false); break;  							case 2: await Task.Delay(500).ConfigureAwait(false); break;  						}  					}  					Console.WriteLine("@@@ Client#" + id + " has finished!");  				};
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: Func<int' Task> client = async (id) =>  				{  					await clientSignal.Task.ConfigureAwait(false);  					await Task.Delay(10).ConfigureAwait(false);    					var rnd = new Random(id * 111);  					for (int i = 0; i < N; i++)  					{  						var taskId = Slice.FromString("T" + Interlocked.Increment(ref taskCounter));  						var taskBody = Slice.FromString("Message " + (i + 1) + " of " + N + " from client #" + id);    						await workerPool.ScheduleTaskAsync(db' taskId' taskBody' ct).ConfigureAwait(false);  						Interlocked.Increment(ref msgSent);    						//if (i > 0 && i % 10 == 0) Console.WriteLine("@@@ Client#" + id + " pushed " + (i + 1) + " / " + N + " messages");    						switch (rnd.Next(5))  						{  							case 0: await Task.Delay(10).ConfigureAwait(false); break;  							case 1: await Task.Delay(100).ConfigureAwait(false); break;  							case 2: await Task.Delay(500).ConfigureAwait(false); break;  						}  					}  					Console.WriteLine("@@@ Client#" + id + " has finished!");  				};
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: Func<int' Task> client = async (id) =>  				{  					await clientSignal.Task.ConfigureAwait(false);  					await Task.Delay(10).ConfigureAwait(false);    					var rnd = new Random(id * 111);  					for (int i = 0; i < N; i++)  					{  						var taskId = Slice.FromString("T" + Interlocked.Increment(ref taskCounter));  						var taskBody = Slice.FromString("Message " + (i + 1) + " of " + N + " from client #" + id);    						await workerPool.ScheduleTaskAsync(db' taskId' taskBody' ct).ConfigureAwait(false);  						Interlocked.Increment(ref msgSent);    						//if (i > 0 && i % 10 == 0) Console.WriteLine("@@@ Client#" + id + " pushed " + (i + 1) + " / " + N + " messages");    						switch (rnd.Next(5))  						{  							case 0: await Task.Delay(10).ConfigureAwait(false); break;  							case 1: await Task.Delay(100).ConfigureAwait(false); break;  							case 2: await Task.Delay(500).ConfigureAwait(false); break;  						}  					}  					Console.WriteLine("@@@ Client#" + id + " has finished!");  				};
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: Func<int' Task> client = async (id) =>  				{  					await clientSignal.Task.ConfigureAwait(false);  					await Task.Delay(10).ConfigureAwait(false);    					var rnd = new Random(id * 111);  					for (int i = 0; i < N; i++)  					{  						var taskId = Slice.FromString("T" + Interlocked.Increment(ref taskCounter));  						var taskBody = Slice.FromString("Message " + (i + 1) + " of " + N + " from client #" + id);    						await workerPool.ScheduleTaskAsync(db' taskId' taskBody' ct).ConfigureAwait(false);  						Interlocked.Increment(ref msgSent);    						//if (i > 0 && i % 10 == 0) Console.WriteLine("@@@ Client#" + id + " pushed " + (i + 1) + " / " + N + " messages");    						switch (rnd.Next(5))  						{  							case 0: await Task.Delay(10).ConfigureAwait(false); break;  							case 1: await Task.Delay(100).ConfigureAwait(false); break;  							case 2: await Task.Delay(500).ConfigureAwait(false); break;  						}  					}  					Console.WriteLine("@@@ Client#" + id + " has finished!");  				};
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: Func<int' Task> client = async (id) =>  				{  					await clientSignal.Task.ConfigureAwait(false);  					await Task.Delay(10).ConfigureAwait(false);    					var rnd = new Random(id * 111);  					for (int i = 0; i < N; i++)  					{  						var taskId = Slice.FromString("T" + Interlocked.Increment(ref taskCounter));  						var taskBody = Slice.FromString("Message " + (i + 1) + " of " + N + " from client #" + id);    						await workerPool.ScheduleTaskAsync(db' taskId' taskBody' ct).ConfigureAwait(false);  						Interlocked.Increment(ref msgSent);    						//if (i > 0 && i % 10 == 0) Console.WriteLine("@@@ Client#" + id + " pushed " + (i + 1) + " / " + N + " messages");    						switch (rnd.Next(5))  						{  							case 0: await Task.Delay(10).ConfigureAwait(false); break;  							case 1: await Task.Delay(100).ConfigureAwait(false); break;  							case 2: await Task.Delay(500).ConfigureAwait(false); break;  						}  					}  					Console.WriteLine("@@@ Client#" + id + " has finished!");  				};
Magic Number,FoundationDB.Layers.Messaging,WorkerPoolTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following statement contains a magic number: await Task.Delay(500);
Missing Default,FoundationDB.Layers.Messaging,WorkerPoolTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Layers.Experimental\Messaging\WorkerPoolTest.cs,RunAsync,The following switch statement is missing a default case: switch (rnd.Next(5))  						{  							case 0: await Task.Delay(10).ConfigureAwait(false); break;  							case 1: await Task.Delay(100).ConfigureAwait(false); break;  							case 2: await Task.Delay(500).ConfigureAwait(false); break;  						}
