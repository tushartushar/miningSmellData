Implementation smell,Namespace,Class,File,Method,Description
Long Method,FoundationDB.Storage.Memory.API,MemoryDatabaseHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabaseHandler.cs,CommitTransaction,The method has 188 lines of code.
Long Method,FoundationDB.Storage.Memory.API,MemoryDatabaseHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabaseHandler.cs,GetRangeAtVersion,The method has 128 lines of code.
Long Method,FoundationDB.Storage.Memory.Core,ColaRangeDictionary,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaRangeDictionary.cs,Remove,The method has 223 lines of code.
Long Method,FoundationDB.Storage.Memory.Core,ColaRangeDictionary,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaRangeDictionary.cs,Mark,The method has 303 lines of code.
Complex Method,FoundationDB.Storage.Memory.API,MemoryDatabaseHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabaseHandler.cs,CommitTransaction,Cyclomatic complexity of the method is 34
Complex Method,FoundationDB.Storage.Memory.API,MemoryDatabaseHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabaseHandler.cs,BulkLoadAsync,Cyclomatic complexity of the method is 12
Complex Method,FoundationDB.Storage.Memory.API,MemoryDatabaseHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabaseHandler.cs,GetValuesAtVersion,Cyclomatic complexity of the method is 9
Complex Method,FoundationDB.Storage.Memory.API,MemoryDatabaseHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabaseHandler.cs,ResolveCursor,Cyclomatic complexity of the method is 10
Complex Method,FoundationDB.Storage.Memory.API,MemoryDatabaseHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabaseHandler.cs,GetRangeAtVersion,Cyclomatic complexity of the method is 17
Complex Method,FoundationDB.Storage.Memory.API,MemoryDatabaseHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabaseHandler.cs,SaveSnapshotAsync,Cyclomatic complexity of the method is 15
Complex Method,FoundationDB.Storage.Memory.API,MemoryDatabaseHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabaseHandler.cs,WriteEventLoop,Cyclomatic complexity of the method is 12
Complex Method,FoundationDB.Storage.Memory.API,MemoryTransactionHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryTransactionHandler.cs,SetOption,Cyclomatic complexity of the method is 18
Complex Method,FoundationDB.Storage.Memory.IO,SnapshotReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\IO\SnapshotReader.cs,ReadHeader,Cyclomatic complexity of the method is 15
Complex Method,FoundationDB.Storage.Memory.IO,SnapshotReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\IO\SnapshotReader.cs,ReadJumpTable,Cyclomatic complexity of the method is 16
Complex Method,FoundationDB.Storage.Memory.IO,SnapshotReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\IO\SnapshotReader.cs,ReadLevel,Cyclomatic complexity of the method is 11
Complex Method,FoundationDB.Storage.Memory.Core,ElasticHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Core\Memory\ElasticHeap`1.cs,Dispose,Cyclomatic complexity of the method is 8
Complex Method,FoundationDB.Storage.Memory.Core,ColaRangeDictionary,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaRangeDictionary.cs,Remove,Cyclomatic complexity of the method is 30
Complex Method,FoundationDB.Storage.Memory.Core,ColaRangeDictionary,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaRangeDictionary.cs,TranslateAfter,Cyclomatic complexity of the method is 8
Complex Method,FoundationDB.Storage.Memory.Core,ColaRangeDictionary,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaRangeDictionary.cs,Mark,Cyclomatic complexity of the method is 43
Complex Method,FoundationDB.Storage.Memory.Core,ColaRangeSet,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaRangeSet.cs,Mark,Cyclomatic complexity of the method is 19
Complex Method,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,InsertItems,Cyclomatic complexity of the method is 13
Complex Method,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,RemoveAt,Cyclomatic complexity of the method is 8
Complex Method,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,GetBounds,Cyclomatic complexity of the method is 12
Complex Method,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,MergeSort,Cyclomatic complexity of the method is 12
Complex Method,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,FindBetween,Cyclomatic complexity of the method is 13
Complex Method,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,IterateOrdered,Cyclomatic complexity of the method is 11
Complex Method,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint32,Cyclomatic complexity of the method is 11
Complex Method,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,Cyclomatic complexity of the method is 21
Complex Method,FoundationDB.Storage.Memory.Utils,UnmanagedSliceStream,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceStream.cs,Seek,Cyclomatic complexity of the method is 11
Long Parameter List,FoundationDB.Storage.Memory.API,MemoryDatabaseHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabaseHandler.cs,CommitTransaction,The method has 6 parameters.
Long Parameter List,FoundationDB.Storage.Memory.API,MemoryDatabaseHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabaseHandler.cs,GetRangeAtVersion,The method has 8 parameters.
Long Parameter List,FoundationDB.Storage.Memory.API,MemoryDatabase,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabase.cs,MemoryDatabase,The method has 7 parameters.
Long Parameter List,FoundationDB.Storage.Memory.API,MemoryTransactionHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryTransactionHandler.cs,GetRangeAsync,The method has 6 parameters.
Long Parameter List,FoundationDB.Storage.Memory.IO,SnapshotWriter,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\IO\SnapshotWriter.cs,WriteHeaderAsync,The method has 6 parameters.
Long Parameter List,FoundationDB.Storage.Memory.IO,UnsafeNativeMethods,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\IO\Win32MemoryMappedFile.cs,CreateFileMapping,The method has 6 parameters.
Long Parameter List,FoundationDB.Storage.Memory.IO,UnsafeNativeMethods,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\IO\Win32MemoryMappedFile.cs,MapViewOfFile,The method has 5 parameters.
Long Parameter List,FoundationDB.Storage.Memory.Core,ValueHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Core\Memory\ValueHeap.cs,AllocateSlow,The method has 5 parameters.
Long Parameter List,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,FindNext,The method has 5 parameters.
Long Parameter List,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,FindPrevious,The method has 5 parameters.
Long Parameter List,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,FindBetween,The method has 5 parameters.
Long Parameter List,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,FindBetween,The method has 6 parameters.
Long Parameter List,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,BinarySearch,The method has 5 parameters.
Long Parameter List,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,FindNext,The method has 7 parameters.
Long Parameter List,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,FindPrevious,The method has 7 parameters.
Long Parameter List,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,FindBetween,The method has 8 parameters.
Long Parameter List,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,IterateFindNext,The method has 6 parameters.
Long Parameter List,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,IterateFindPrevious,The method has 6 parameters.
Long Statement,FoundationDB.Storage.Memory.API,MemoryDatabaseHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabaseHandler.cs,PopulateSystemKeys,The length of the statement  "	var keyServerBlob = Slice.FromFixed16 (1) + Slice.FromFixed32 (0xA22000) + Slice.FromFixed16 (0xFDB) + Slice.FromFixed32 (1) + databaseId + Slice.FromFixed32 (0); " is 162.
Long Statement,FoundationDB.Storage.Memory.API,MemoryDatabaseHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabaseHandler.cs,GetActiveTransactionWindow_NeedsLocking,The length of the statement  "		if (window.Closed || now.Subtract (window.StartedUtc) >= m_transactionHalfLife || window.CommitCount >= m_windowMaxWrites) { " is 124.
Long Statement,FoundationDB.Storage.Memory.API,MemoryDatabaseHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabaseHandler.cs,BulkLoadAsync,The length of the statement  "	// Since we can "only" create a maximum of 28 levels' there is a maximum limit or 2^28 - 1 items that can be loaded in the database (about 268 millions) " is 152.
Long Statement,FoundationDB.Storage.Memory.API,MemoryDatabaseHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabaseHandler.cs,BulkLoadAsync,The length of the statement  "		throw new InvalidOperationException ("Data set is too large. Cannot insert more than 2^28 - 1 items in the memory database"); " is 125.
Long Statement,FoundationDB.Storage.Memory.API,MemoryDatabaseHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabaseHandler.cs,BulkLoadAsync,The length of the statement  "					//TODO: consider pre-sorting the items before inserting them in the heap using m_comparer (maybe faster than doing the same with the key comparer?) " is 147.
Long Statement,FoundationDB.Storage.Memory.API,MemoryDatabaseHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabaseHandler.cs,ResolveValueAtVersion,The length of the statement  "	Contract.Assert (key->Size <= MemoryDatabaseHandler.MAX_KEY_SIZE' "Attempted to read value from a key that is too large"); " is 122.
Long Statement,FoundationDB.Storage.Memory.API,MemoryDatabaseHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabaseHandler.cs,SaveSnapshotAsync,The length of the statement  "			await snapshot.WriteHeaderAsync (headerFlags' new Uuid128 (m_uid)' sequence' count' timestamp' attributes).ConfigureAwait (false); " is 130.
Long Statement,FoundationDB.Storage.Memory.API,MemoryDatabaseHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabaseHandler.cs,EnqueueCommit,The length of the statement  "		// note: we need to set the event BEFORE changing the eventloop state' because the writer thread may be in the process of shutting down " is 135.
Long Statement,FoundationDB.Storage.Memory.API,MemoryDatabaseHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabaseHandler.cs,EnqueueCommit,The length of the statement  "			var _ = Task.Factory.StartNew (() => WriteEventLoop ()' CancellationToken.None' TaskCreationOptions.LongRunning' TaskScheduler.Default); " is 136.
Long Statement,FoundationDB.Storage.Memory.API,MemoryDatabaseHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabaseHandler.cs,WriteEventLoop,The length of the statement  "				if (!m_writerEvent.WaitOne (TimeSpan.Zero' false) || Interlocked.CompareExchange (ref m_eventLoopState' STATE_RUNNNING' STATE_IDLE) == STATE_IDLE) { " is 148.
Long Statement,FoundationDB.Storage.Memory.API,MemoryDatabaseHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabaseHandler.cs,Debug_Dump,The length of the statement  "			Debug.WriteLine ("  > {0} : {1:N0} commits{2}"' window.ToString ()' window.CommitCount' window.Closed ? " [CLOSED]" : ""); " is 122.
Long Statement,FoundationDB.Storage.Memory.API,MemoryTransactionHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryTransactionHandler.cs,GetKeyAsync,The length of the statement  "				AddReadConflict_NeedsLocking (FdbKeyRange.Create (resultRange.Begin' selector.OrEqual ? keyRange.End : keyRange.Begin)); " is 120.
Long Statement,FoundationDB.Storage.Memory.API,MemoryTransactionHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryTransactionHandler.cs,GetRangeAsync,The length of the statement  "	//Trace.WriteLine("## GetRange " + beginInclusive + " <= k < " + endExclusive + "' limit=" + options.Limit + "' reverse=" + options.Reverse + "' snapshot=" + snapshot); " is 168.
Long Statement,FoundationDB.Storage.Memory.API,MemoryTransactionHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryTransactionHandler.cs,GetRangeAsync,The length of the statement  "	var result = await m_db.GetRangeAtVersion (beginInclusive' endExclusive' options.Limit ?? 0' options.TargetBytes ?? 0' options.Mode.Value' iteration' options.Reverse.Value' m_readVersion.Value).ConfigureAwait (false); " is 217.
Long Statement,FoundationDB.Storage.Memory.API,MemoryTransactionHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryTransactionHandler.cs,Atomic,The length of the statement  "	if (mutation != FdbMutationType.Add && mutation != FdbMutationType.BitAnd && mutation != FdbMutationType.BitOr && mutation != FdbMutationType.BitXor && mutation != FdbMutationType.Max && mutation != FdbMutationType.Min) { " is 221.
Long Statement,FoundationDB.Storage.Memory.API,MemoryTransactionHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryTransactionHandler.cs,CommitAsync,The length of the statement  "				Trace.WriteLine(String.Format(CultureInfo.InvariantCulture' " Read  Conflicts: ({0}) => {1}"' m_readConflicts.Count' m_readConflicts.ToString()));" is 146.
Long Statement,FoundationDB.Storage.Memory.API,MemoryTransactionHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryTransactionHandler.cs,CommitAsync,The length of the statement  "				Trace.WriteLine(String.Format(CultureInfo.InvariantCulture' " Write Conflicts: ({0}) => {1}"' m_writeConflicts.Count' m_writeConflicts.ToString()));" is 148.
Long Statement,FoundationDB.Storage.Memory.API,MemoryTransactionHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryTransactionHandler.cs,CommitAsync,The length of the statement  "			Trace.WriteLine(String.Format(CultureInfo.InvariantCulture' " Slice buffer: {0} bytes in {1} pages ({2} allocated' {3:0.00}% wasted)"' m_buffer.Size' pages.Length' m_buffer.Allocated' 100.0 - (m_buffer.Size * 100.0 / m_buffer.Allocated)));" is 239.
Long Statement,FoundationDB.Storage.Memory.API,MemoryTransactionHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryTransactionHandler.cs,CommitAsync,The length of the statement  "	//m_committedVersion = await m_db.CommitTransactionAsync(this' m_readVersion.Value' m_readConflicts' m_writeConflicts' m_clears' m_writes).ConfigureAwait(false); " is 161.
Long Statement,FoundationDB.Storage.Memory.API,MemoryTransactionHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryTransactionHandler.cs,CommitInternal,The length of the statement  "	m_committedVersion = m_db.CommitTransaction (this' m_readVersion.Value' m_readConflicts' m_writeConflicts' m_clears' m_writes); " is 127.
Long Statement,FoundationDB.Storage.Memory.IO,SnapshotWriter,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\IO\SnapshotWriter.cs,WriteHeaderAsync,The length of the statement  "	// The header will be use on ore more "pages"' to simplify the job of loading / peeking at a stream content (no need for fancy buffering' just need to read 4K pages) " is 165.
Long Statement,FoundationDB.Storage.Memory.IO,SnapshotWriter,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\IO\SnapshotWriter.cs,WriteJumpTableAsync,The length of the statement  "	// - it would contain any optional signature or data that is only know after writing the data to disk' and are needed to decode the rest " is 136.
Long Statement,FoundationDB.Storage.Memory.IO,SnapshotReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\IO\SnapshotReader.cs,ReadHeader,The length of the statement  "		throw ParseError ("The header checksum does not match ({0} != {1}). This may be an indication of data corruption"' headerChecksum' actualHeaderChecksum); " is 153.
Long Statement,FoundationDB.Storage.Memory.IO,SnapshotReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\IO\SnapshotReader.cs,ReadJumpTable,The length of the statement  "		throw ParseError ("The file size ({0}) is not a multiple of the page size ({1})' which may be a symptom of truncation"' m_file.Length' m_pageSize); " is 147.
Long Statement,FoundationDB.Storage.Memory.IO,SnapshotReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\IO\SnapshotReader.cs,ReadJumpTable,The length of the statement  "		throw ParseError ("Jump Table checksum does not match ({0} != {1}). This may be an indication of data corruption"' checksum' actualChecksum); " is 141.
Long Statement,FoundationDB.Storage.Memory.IO,Win32MemoryMappedFile,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\IO\Win32MemoryMappedFile.cs,OpenRead,The length of the statement  "		fs = new FileStream (path' FileMode.Open' FileSystemRights.ListDirectory' FileShare.None' 0x1000' FileOptions.SequentialScan); " is 126.
Long Statement,FoundationDB.Storage.Memory.IO,Win32MemoryMappedFile,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\IO\Win32MemoryMappedFile.cs,OpenRead,The length of the statement  "		handle = UnsafeNativeMethods.CreateFileMapping (fs.SafeFileHandle' null/*TODO?*/' UnsafeNativeMethods.FileMapProtection.PageReadonly' dwMaximumSizeHigh' dwMaximumSizeLow' null); " is 177.
Long Statement,FoundationDB.Storage.Memory.IO,Win32SnapshotFile,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\IO\Win32SnapshotFile.cs,ReadExactlyAsync,The length of the statement  "			Contract.Assert (p >= 0 && p < buffer.Length && remaining > 0 && p + remaining <= buffer.Length' "Read buffer overflow"); " is 121.
Long Statement,FoundationDB.Storage.Memory.Core,ValueHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Core\Memory\ValueHeap.cs,AllocateSlow,The length of the statement  "		throw new OutOfMemoryException (String.Format ("Failed to allocate memory from the the value heap ({0})"' m_buckets [bucket].PageSize)); " is 136.
Long Statement,FoundationDB.Storage.Memory.Core,KeyHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Core\Memory\KeyHeap.cs,AppendSlow,The length of the statement  "		throw new OutOfMemoryException (String.Format ("Failed to allocate memory from the key heap ({0})"' m_buckets [bucket].PageSize)); " is 130.
Long Statement,FoundationDB.Storage.Memory.Core,NativeKeyComparer,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Core\NativeKeyComparer.cs,Compare,The length of the statement  "	// - number of calls with left == right will be very small so may not be worth it to optimize (will slow down everything else) " is 126.
Long Statement,FoundationDB.Storage.Memory.Core,NativeKeyComparer,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Core\NativeKeyComparer.cs,Compare,The length of the statement  "	// - for db using the DirectoryLayer' almost all keys will start with 0x15 (prefix for an int in a tuple) so checking the first couple of bytes will not help much (long runs of keys starting with the same 2 or 3 bytes) " is 218.
Long Statement,FoundationDB.Storage.Memory.Core,NativeKeyComparer,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Core\NativeKeyComparer.cs,Compare,The length of the statement  "	int c = UnmanagedHelpers.NativeMethods.memcmp (&(leftKey->Data)' &(rightKey->Data)' new UIntPtr (leftCount < rightCount ? leftCount : rightCount)); " is 147.
Long Statement,FoundationDB.Storage.Memory.Core,NativeKeyComparer,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Core\NativeKeyComparer.cs,Equals,The length of the statement  "	return leftCount == rightCount && 0 == UnmanagedHelpers.NativeMethods.memcmp (&(leftKey->Data)' &(rightKey->Data)' new UIntPtr (leftCount)); " is 140.
Long Statement,FoundationDB.Storage.Memory.Core,TransactionWindow,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Core\TransactionWindow.cs,ToString,The length of the statement  "	return String.Format (System.Globalization.CultureInfo.InvariantCulture' "#{0} [{1}~{2}]"' m_startedUtc.Ticks / TimeSpan.TicksPerMillisecond' m_minVersion' m_maxVersion); " is 170.
Long Statement,FoundationDB.Storage.Memory.Core,ElasticHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Core\Memory\ElasticHeap`1.cs,Debug_Dump,The length of the statement  "	Debug.WriteLine ("# Dumping {0} heap ({1:N0} pages in {2:N0} buckets)"' this.GetType ().Name' m_buckets.Sum (b => (long)b.Pages.Count)' m_buckets.Length); " is 154.
Long Statement,FoundationDB.Storage.Memory.Core,ElasticHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Core\Memory\ElasticHeap`1.cs,Debug_Dump,The length of the statement  "			Debug.WriteLine (" # Bucket #{0}: {1:N0} bytes (allocated: {2:N0} pages' free: {3:N0} pages)"' i' bucket.PageSize' bucket.Pages.Count' bucket.FreeList.Count); " is 158.
Long Statement,FoundationDB.Storage.Memory.Core,ElasticHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Core\Memory\ElasticHeap`1.cs,Debug_Dump,The length of the statement  "	Debug.WriteLine ("# Found a total of {0:N0} entries using {1:N0} bytes out of {2:N0} bytes allocated"' entries' used' allocated); " is 129.
Long Statement,FoundationDB.Storage.Memory.Core,ColaOrderedDictionary,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaOrderedDictionary.cs,Debug_Dump,The length of the statement  "	Trace.WriteLine ("Dumping ColaOrderedDictionary<" + typeof(TKey).Name + "' " + typeof(TValue).Name + "> filled at " + (100.0d * this.Count / this.Capacity).ToString ("N2") + "%"); " is 179.
Long Statement,FoundationDB.Storage.Memory.Core,ColaRangeDictionary,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaRangeDictionary.cs,CheckInvariants,The length of the statement  "						if (c == 0 && m_valueComparer.Compare(previous.Value' item.Value) == 0) Contract.Assert(false' String.Format("Unmerged ranges: {0} and {1}"' previous' item));" is 158.
Long Statement,FoundationDB.Storage.Memory.Core,ColaRangeDictionary,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaRangeDictionary.cs,CheckInvariants,The length of the statement  "				Contract.Assert(EqualityComparer<TKey>.Default.Equals(m_bounds.Begin' first.Begin)' String.Format("Min bound {0} does not match with {1}"' m_bounds.Begin' first.Begin));" is 169.
Long Statement,FoundationDB.Storage.Memory.Core,ColaRangeDictionary,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaRangeDictionary.cs,CheckInvariants,The length of the statement  "				Contract.Assert(EqualityComparer<TKey>.Default.Equals(m_bounds.End' previous.End)' String.Format("Max bound {0} does not match with {1}"' m_bounds.End' previous.End));" is 167.
Long Statement,FoundationDB.Storage.Memory.Core,ColaRangeDictionary,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaRangeDictionary.cs,Mark,The length of the statement  "	// * if the new interval partially overlaps with one or more intervals' they will be split into chunks' and the new interval will be inserted between them " is 154.
Long Statement,FoundationDB.Storage.Memory.Core,ColaRangeDictionary,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaRangeDictionary.cs,Mark,The length of the statement  "			// => we will try to find the first range and last range in the dictionary that would be impacted' mutate them and delete all ranges in between " is 143.
Long Statement,FoundationDB.Storage.Memory.Core,ColaRangeDictionary,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaRangeDictionary.cs,Mark,The length of the statement  "			// => also' if we haven't inserted the entry yet' we will reuse the first deleted range to insert the entry' and only insert at the end if we haven't found a spot " is 162.
Long Statement,FoundationDB.Storage.Memory.Core,ColaRangeDictionary,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaRangeDictionary.cs,Debug_Dump,The length of the statement  "	Debug.WriteLine ("Dumping ColaRangeDictionary<" + typeof(TKey).Name + "> filled at " + (100.0d * this.Count / this.Capacity).ToString ("N2") + "%"); " is 148.
Long Statement,FoundationDB.Storage.Memory.Core,ColaRangeSet,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaRangeSet.cs,Debug_Dump,The length of the statement  "	Console.WriteLine ("Dumping ColaRangeSet<" + typeof(TKey).Name + "> filled at " + (100.0d * this.Count / this.Capacity).ToString ("N2") + "%"); " is 143.
Long Statement,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,CheckInvariants,The length of the statement  "							Contract.Assert(false' String.Format("Non-zero value at offset {0} of unused level {1} : {2}"' j' i' String.Join("' "' segment)));" is 130.
Long Statement,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,CheckInvariants,The length of the statement  "							Contract.Assert(false' String.Format("Unsorted value {3} at offset {0} of allocated level {1} : {2}"' j' i' String.Join("' "' segment)' segment[j]));" is 149.
Long Statement,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,CheckInvariants,The length of the statement  "							Contract.Assert(false' String.Format("Non-zero value at offset {0} of spare level {1} : {2}"' j' i' String.Join("' "' spare)));" is 127.
Long Statement,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,FindBetween,The length of the statement  "	return ColaStore.FindBetween<T> (m_levels' m_count' begin' beginOrEqual' end' endOrEqual' limit' comparer ?? m_comparer); " is 121.
Long Statement,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,Grow,The length of the statement  "	// note: we want m_segments[level] to not be empty' which means there must be at least (level + 1) entries in the level array " is 125.
Long Statement,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,Debug_Dump,The length of the statement  "				Trace.WriteLine(String.Format(CultureInfo.InvariantCulture' "> {0'2}: {1}"' i' spare == null ? "<unallocated>" : String.Join("' "' spare)));" is 140.
Long Statement,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,ThrowDuplicateKey,The length of the statement  "	throw new InvalidOperationException (String.Format ("Cannot insert '{0}' because the key already exists in the set"' value)); " is 125.
Long Statement,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,BinarySearch,The length of the statement  "	// Instead of starting from the midle we will exploit the fact that' since items are usually inserted in order' the value is probably either to the left or the right of the segment. " is 181.
Long Statement,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,ThrowStoreVersionChanged,The length of the statement  "	throw new InvalidOperationException ("The version of the store has changed. This usually means that the collection has been modified while it was being enumerated"); " is 165.
Long Statement,FoundationDB.Storage.Memory.Core,ColaOrderedSet,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaOrderedSet.cs,Debug_Dump,The length of the statement  "	Trace.WriteLine ("Dumping ColaOrderedSet<" + typeof(T).Name + "> filled at " + (100.0d * this.Count / this.Capacity).ToString ("N2") + "%"); " is 140.
Long Statement,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadFixed64,The length of the statement  "	return p [0] | (ulong)p [1] << 8 | (ulong)p [2] << 16 | (ulong)p [3] << 24 | (ulong)p [4] << 32 | (ulong)p [5] << 40 | (ulong)p [6] << 48 | (ulong)p [7] << 56; " is 159.
Long Statement,FoundationDB.Storage.Memory.Utils,TaskHelpers,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\TaskHelpers.cs,FromCancellation,The length of the statement  "	// The "best" way I've seen to emulate the same behavior' is creating a fake task (with a dummy action) with the same alread-cancelled CancellationToken " is 152.
Long Statement,FoundationDB.Storage.Memory.Utils,UnmanagedHelpers,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedHelpers.cs,CompareUnsafe,The length of the statement  "			// Dés qu'on tombe sur un segment de 8 différent' on backtrack au début du segment' et on poursuit en mode octet par octet" is 122.
Long Statement,FoundationDB.Storage.Memory.Utils,UnmanagedHelpers,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedHelpers.cs,CompareUnsafe,The length of the statement  "			// Si le XOR total n'est pas 0' on regarde a quel endroit se trouve le premier byte non-0' et cela nous donne l'offset de la différence" is 135.
Long Statement,FoundationDB.Storage.Memory.Utils,UnmanagedHelpers,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedHelpers.cs,CompareUnsafe,The length of the statement  "					//System.Diagnostics.Trace.WriteLine("Found mistmatch\n\t\t0x" + k.ToString("x16") + " between\n\t\t0x" + ((ulong*)left)[0].ToString("x16") + " and\n\t\t0x" + ((ulong*)right)[0].ToString("x16"));" is 195.
Long Statement,FoundationDB.Storage.Memory.Utils,UnmanagedHelpers,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedHelpers.cs,ComputeHashCodeUnsafe,The length of the statement  "	// => won't matter much for *ordered* dictionary that will probably use IComparer<T>.Compare(..) instead of the IEqalityComparer<T>.GetHashCode()/Equals() combo " is 160.
Long Statement,FoundationDB.Storage.Memory.Utils,USlice,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\USlice.cs,Substring,The length of the statement  "	Contract.Requires (this.Data != null && startIndex <= this.Count && count <= this.Count && startIndex + count <= this.Count); " is 125.
Long Statement,FoundationDB.Storage.Memory.Utils,UnmanagedMemoryHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedMemoryHeap.cs,Allocate,The length of the statement  "	// even though the caller don't require alignemnt' we still want to align to a multiple of 2 so that at least memory moves/cmps are aligned on a WORD boundary. " is 159.
Long Statement,FoundationDB.Storage.Memory.Utils,UnmanagedMemoryHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedMemoryHeap.cs,Dump,The length of the statement  "		Console.WriteLine ("- Page #" + page.Id + " (Used=" + page.Used + " / " + page.Size + "' " + (page.Remaining * 100.0 / page.Size).ToString ("N1") + "% free)"); " is 159.
Long Statement,FoundationDB.Storage.Memory.Utils,UnmanagedMemoryHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedMemoryHeap.cs,DumpToDisk,The length of the statement  "	using (var fs = new System.IO.FileStream (path' System.IO.FileMode.Create' System.IO.FileAccess.Write' System.IO.FileShare.ReadWrite' 4096' System.IO.FileOptions.None)) { " is 170.
Long Statement,FoundationDB.Storage.Memory.Utils,UnmanagedSliceBuilder,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceBuilder.cs,GrowBuffer,The length of the statement  "	Contract.Ensures (m_buffer != null && m_handle.IsAllocated && m_data != null && m_count >= 0 && m_count <= m_buffer.Length' "GrowBuffer corruption"); " is 149.
Complex Conditional,FoundationDB.Storage.Memory.API,MemoryTransactionHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryTransactionHandler.cs,Atomic,The conditional expression  "mutation != FdbMutationType.Add && mutation != FdbMutationType.BitAnd && mutation != FdbMutationType.BitOr && mutation != FdbMutationType.BitXor && mutation != FdbMutationType.Max && mutation != FdbMutationType.Min"  is complex.
Complex Conditional,FoundationDB.Storage.Memory.IO,SnapshotFormat,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\IO\SnapshotFormat.cs,ComputeChecksum,The conditional expression  "data.Offset < 0 || data.Count < 0 || (data.Array == null && data.Count > 0)"  is complex.
Complex Conditional,FoundationDB.Storage.Memory.IO,SnapshotReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\IO\SnapshotReader.cs,ReadJumpTable,The conditional expression  "(size == 0 && offset != 0) || (size > 0 && offset < m_dataStart)"  is complex.
Magic Number,FoundationDB.Storage.Memory.API,MemoryDatabaseHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabaseHandler.cs,BulkLoadAsync,The following statement contains a magic number: if (count >= 1 << 28)  	throw new InvalidOperationException ("Data set is too large. Cannot insert more than 2^28 - 1 items in the memory database");  
Magic Number,FoundationDB.Storage.Memory.API,MemoryDatabaseHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabaseHandler.cs,BulkLoadAsync,The following statement contains a magic number: try {  	// the fastest way to insert data' is to insert vectors that are a power of 2  	int min = ColaStore.LowestBit (count);  	int max = ColaStore.HighestBit (count);  	Contract.Assert (min <= max && max <= 28);  	if (append) {  		// the appended layers have to be currently free  		for (int level = min; level <= max; level++) {  			if (!m_data.IsFree (level))  				throw new InvalidOperationException (String.Format ("Cannot bulk load level {0} because it is already in use"' level));  		}  	} else {  		// start from scratch  		m_data.Clear ();  		m_estimatedSize = 0;  		//TODO: clear the key and value heaps !  		//TODO: clear the transaction windows !  		//TODO: kill all pending transactions !  	}  	m_data.EnsureCapacity (count);  	ulong sequence = (ulong)Interlocked.Increment (ref m_currentVersion);  	using (var iter = data.GetEnumerator ())  		using (var writer = new LevelWriter (1 << max' m_keys' m_values)) {  			for (int level = max; level >= min && !cancellationToken.IsCancellationRequested; level--) {  				if (ColaStore.IsFree (level' count))  					continue;  				//TODO: consider pre-sorting the items before inserting them in the heap using m_comparer (maybe faster than doing the same with the key comparer?)  				// take of batch of values  				writer.Reset ();  				int batch = 1 << level;  				while (batch-- > 0) {  					if (!iter.MoveNext ()) {  						throw new InvalidOperationException ("Iterator stopped before reaching the expected number of items");  					}  					writer.Add (sequence' iter.Current);  				}  				// and insert it (should fit nicely in a level without cascading)  				m_data.InsertItems (writer.Data' ordered);  			}  		}  } finally {  	m_dataLock.ExitWriteLock ();  }  
Magic Number,FoundationDB.Storage.Memory.API,MemoryDatabaseHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabaseHandler.cs,BulkLoadAsync,The following statement contains a magic number: Contract.Assert (min <= max && max <= 28);  
Magic Number,FoundationDB.Storage.Memory.API,MemoryDatabaseHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabaseHandler.cs,GetRangeAtVersion,The following statement contains a magic number: if (limit == 0)  	limit = 10000;  
Magic Number,FoundationDB.Storage.Memory.API,MemoryDatabaseHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabaseHandler.cs,GetRangeAtVersion,The following statement contains a magic number: limit = 10000;  
Magic Number,FoundationDB.Storage.Memory.API,MemoryDatabaseHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabaseHandler.cs,SaveSnapshotAsync,The following statement contains a magic number: if (options.Encrypted) {  	// file will be encrypted  	//TODO: specify crypto algo' key sizes' initialization vectors' ...  	headerFlags |= SnapshotFormat.Flags.ENCRYPTED;  	attributes ["encryption"] = FdbTuple.Create (true);  	attributes ["encryption.algorithm"] = FdbTuple.Create ("pkcs1");  	attributes ["encryption.keysize"] = FdbTuple.Create (4096);  	//ex: RSA 4096 ?  }  
Magic Number,FoundationDB.Storage.Memory.API,MemoryDatabaseHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabaseHandler.cs,SaveSnapshotAsync,The following statement contains a magic number: attributes ["encryption.keysize"] = FdbTuple.Create (4096);  
Magic Number,FoundationDB.Storage.Memory.API,MemoryDatabaseHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabaseHandler.cs,StopWriterEventLoop,The following statement contains a magic number: if ((oldState = Interlocked.Exchange (ref m_eventLoopState' STATE_SHUTDOWN)) != STATE_SHUTDOWN) {  	switch (oldState) {  	case STATE_RUNNNING: {  		// need to wake up the thread' if it was waiting for new writes  		m_writerEvent.Set ();  		// and wait for it to finish...  		if (!m_shutdownEvent.WaitOne (TimeSpan.FromSeconds (5))) {  			// what should we do ?  		}  		Log ("WriterEventLoop stopped");  		break;  	}  	default: {  		// not running' or already shutdown ?  		m_shutdownEvent.Set ();  		break;  	}  	}  }  
Magic Number,FoundationDB.Storage.Memory.API,MemoryDatabaseHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabaseHandler.cs,StopWriterEventLoop,The following statement contains a magic number: switch (oldState) {  case STATE_RUNNNING: {  	// need to wake up the thread' if it was waiting for new writes  	m_writerEvent.Set ();  	// and wait for it to finish...  	if (!m_shutdownEvent.WaitOne (TimeSpan.FromSeconds (5))) {  		// what should we do ?  	}  	Log ("WriterEventLoop stopped");  	break;  }  default: {  	// not running' or already shutdown ?  	m_shutdownEvent.Set ();  	break;  }  }  
Magic Number,FoundationDB.Storage.Memory.API,MemoryDatabaseHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryDatabaseHandler.cs,StopWriterEventLoop,The following statement contains a magic number: if (!m_shutdownEvent.WaitOne (TimeSpan.FromSeconds (5))) {  	// what should we do ?  }  
Magic Number,FoundationDB.Storage.Memory.API,MemoryTransactionHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryTransactionHandler.cs,OnErrorAsync,The following statement contains a magic number: switch (code) {  case FdbError.TimedOut:  case FdbError.PastVersion: {  	// wait a bit  	++m_retryCount;  	if (m_retryCount > this.RetryLimit) {  		// max rety limit reached  		throw new FdbException (code);  	}  	//HACKHACK: implement a real back-off delay logic  	await Task.Delay (15' cancellationToken).ConfigureAwait (false);  	this.Reset ();  	return;  }  default: {  	throw new FdbException (code);  }  }  
Magic Number,FoundationDB.Storage.Memory.API,MemoryTransactionHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryTransactionHandler.cs,OnErrorAsync,The following statement contains a magic number: await Task.Delay (15' cancellationToken).ConfigureAwait (false);  
Magic Number,FoundationDB.Storage.Memory.API,MemoryTransactionHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryTransactionHandler.cs,DecodeBooleanOption,The following statement contains a magic number: if (data.Count == 8) {  	// spec says that ints should be passed as 8 bytes integers' so we need to accept all zeroes as "false"  	return data.ToInt64 () != 0;  } else {  	return data.ToBool ();  }  
Magic Number,FoundationDB.Storage.Memory.API,MemoryTransactionHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryTransactionHandler.cs,SetOption,The following statement contains a magic number: switch (option) {  case FdbTransactionOption.AccessSystemKeys: {  	this.AccessSystemKeys = (data.IsNullOrEmpty || DecodeBooleanOption (data)) ? READ_WRITE_ACCESS : NO_ACCESS;  	break;  }  case FdbTransactionOption.ReadSystemKeys: {  	this.AccessSystemKeys = (data.IsNullOrEmpty || DecodeBooleanOption (data)) ? READ_ACCESS : NO_ACCESS;  	break;  }  case FdbTransactionOption.RetryLimit: {  	if (data.Count != 8)  		throw new FdbException (FdbError.InvalidOptionValue);  	long value = data.ToInt64 ();  	if (value < 0 || value >= int.MaxValue)  		throw new FdbException (FdbError.InvalidOptionValue);  	this.RetryLimit = (int)value;  	break;  }  case FdbTransactionOption.Timeout: {  	if (data.Count != 8)  		throw new FdbException (FdbError.InvalidOptionValue);  	long value = data.ToInt64 ();  	if (value < 0 || value >= int.MaxValue)  		throw new FdbException (FdbError.InvalidOptionValue);  	this.Timeout = (int)value;  	break;  }  case FdbTransactionOption.NextWriteNoWriteConflictRange: {  	this.NextWriteNoWriteConflictRange = data.IsNullOrEmpty || DecodeBooleanOption (data);  	break;  }  case FdbTransactionOption.ReadYourWritesDisable: {  	this.ReadYourWritesDisable = data.IsNullOrEmpty || DecodeBooleanOption (data);  	break;  }  default: {  	throw new FdbException (FdbError.InvalidOption);  }  }  
Magic Number,FoundationDB.Storage.Memory.API,MemoryTransactionHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryTransactionHandler.cs,SetOption,The following statement contains a magic number: switch (option) {  case FdbTransactionOption.AccessSystemKeys: {  	this.AccessSystemKeys = (data.IsNullOrEmpty || DecodeBooleanOption (data)) ? READ_WRITE_ACCESS : NO_ACCESS;  	break;  }  case FdbTransactionOption.ReadSystemKeys: {  	this.AccessSystemKeys = (data.IsNullOrEmpty || DecodeBooleanOption (data)) ? READ_ACCESS : NO_ACCESS;  	break;  }  case FdbTransactionOption.RetryLimit: {  	if (data.Count != 8)  		throw new FdbException (FdbError.InvalidOptionValue);  	long value = data.ToInt64 ();  	if (value < 0 || value >= int.MaxValue)  		throw new FdbException (FdbError.InvalidOptionValue);  	this.RetryLimit = (int)value;  	break;  }  case FdbTransactionOption.Timeout: {  	if (data.Count != 8)  		throw new FdbException (FdbError.InvalidOptionValue);  	long value = data.ToInt64 ();  	if (value < 0 || value >= int.MaxValue)  		throw new FdbException (FdbError.InvalidOptionValue);  	this.Timeout = (int)value;  	break;  }  case FdbTransactionOption.NextWriteNoWriteConflictRange: {  	this.NextWriteNoWriteConflictRange = data.IsNullOrEmpty || DecodeBooleanOption (data);  	break;  }  case FdbTransactionOption.ReadYourWritesDisable: {  	this.ReadYourWritesDisable = data.IsNullOrEmpty || DecodeBooleanOption (data);  	break;  }  default: {  	throw new FdbException (FdbError.InvalidOption);  }  }  
Magic Number,FoundationDB.Storage.Memory.API,MemoryTransactionHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryTransactionHandler.cs,SetOption,The following statement contains a magic number: if (data.Count != 8)  	throw new FdbException (FdbError.InvalidOptionValue);  
Magic Number,FoundationDB.Storage.Memory.API,MemoryTransactionHandler,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\API\MemoryTransactionHandler.cs,SetOption,The following statement contains a magic number: if (data.Count != 8)  	throw new FdbException (FdbError.InvalidOptionValue);  
Magic Number,FoundationDB.Storage.Memory.IO,SnapshotFormat,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\IO\SnapshotFormat.cs,ComputeChecksum,The following statement contains a magic number: while (ptr < end) {  	h = (h ^ *ptr) * 16777619;  	// FNV1 32 prime  	++ptr;  }  
Magic Number,FoundationDB.Storage.Memory.IO,SnapshotFormat,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\IO\SnapshotFormat.cs,ComputeChecksum,The following statement contains a magic number: h = (h ^ *ptr) * 16777619;  
Magic Number,FoundationDB.Storage.Memory.IO,SnapshotReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\IO\SnapshotReader.cs,ReadHeader,The following statement contains a magic number: m_uid = new Uuid128 (reader.ReadBytes (16).GetBytes ());  
Magic Number,FoundationDB.Storage.Memory.IO,SnapshotReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\IO\SnapshotReader.cs,ReadHeader,The following statement contains a magic number: if (m_pageSize > 1 << 20)  	throw ParseError ("Page size ({0}) is too big"' m_pageSize);  
Magic Number,FoundationDB.Storage.Memory.IO,SnapshotReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\IO\SnapshotReader.cs,ReadHeader,The following statement contains a magic number: if (m_headerSize < 64 + 4 + 4)  	throw ParseError ("Header size ({0}) is too small"' m_headerSize);  
Magic Number,FoundationDB.Storage.Memory.IO,SnapshotReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\IO\SnapshotReader.cs,ReadHeader,The following statement contains a magic number: if (m_headerSize < 64 + 4 + 4)  	throw ParseError ("Header size ({0}) is too small"' m_headerSize);  
Magic Number,FoundationDB.Storage.Memory.IO,SnapshotReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\IO\SnapshotReader.cs,ReadHeader,The following statement contains a magic number: if (m_headerSize < 64 + 4 + 4)  	throw ParseError ("Header size ({0}) is too small"' m_headerSize);  
Magic Number,FoundationDB.Storage.Memory.IO,SnapshotReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\IO\SnapshotReader.cs,ReadHeader,The following statement contains a magic number: if (m_headerSize > 1 << 10)  	throw ParseError ("Header size ({0}) exceeds the maximum allowed size"' m_headerSize);  
Magic Number,FoundationDB.Storage.Memory.IO,SnapshotReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\IO\SnapshotReader.cs,ReadHeader,The following statement contains a magic number: if (attributeCount < 0 || attributeCount > 1024)  	throw ParseError ("Attributes count is invalid");  
Magic Number,FoundationDB.Storage.Memory.IO,SnapshotReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\IO\SnapshotReader.cs,ReadJumpTable,The following statement contains a magic number: if (levels < 0 || levels > 32)  	throw ParseError ("The number of levels in the snapshot does not appear to be valid");  
Magic Number,FoundationDB.Storage.Memory.IO,Win32MemoryMappedFile,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\IO\Win32MemoryMappedFile.cs,Win32MemoryMappedFile,The following statement contains a magic number: if (IntPtr.Size == 4 && size > uint.MaxValue) {  	// won't work with 32-bit pointers  	throw new InvalidOperationException ("Memory mapped file size is too big to be opened on a 32-bit system.");  }  
Magic Number,FoundationDB.Storage.Memory.IO,Win32MemoryMappedFile,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\IO\Win32MemoryMappedFile.cs,OpenRead,The following statement contains a magic number: try {  	// Open the file  	fs = new FileStream (path' FileMode.Open' FileSystemRights.ListDirectory' FileShare.None' 0x1000' FileOptions.SequentialScan);  	Contract.Assert (fs != null);  	ulong capacity = checked((ulong)fs.Length);  	if (capacity == 0)  		throw new ArgumentException ("Cannot memory map an empty file");  	// Create the memory mapping  	uint dwMaximumSizeLow = (uint)(capacity & 0xffffffffL);  	uint dwMaximumSizeHigh = (uint)(capacity >> 32);  	handle = UnsafeNativeMethods.CreateFileMapping (fs.SafeFileHandle' null/*TODO?*/' UnsafeNativeMethods.FileMapProtection.PageReadonly' dwMaximumSizeHigh' dwMaximumSizeLow' null);  	int errorCode = Marshal.GetLastWin32Error ();  	if (handle.IsInvalid || errorCode == 183) {  		throw Marshal.GetExceptionForHR (errorCode);  	}  	return new Win32MemoryMappedFile (fs' handle' capacity);  } catch {  	if (handle != null)  		handle.Dispose ();  	if (fs != null)  		fs.Dispose ();  	throw;  }  
Magic Number,FoundationDB.Storage.Memory.IO,Win32MemoryMappedFile,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\IO\Win32MemoryMappedFile.cs,OpenRead,The following statement contains a magic number: try {  	// Open the file  	fs = new FileStream (path' FileMode.Open' FileSystemRights.ListDirectory' FileShare.None' 0x1000' FileOptions.SequentialScan);  	Contract.Assert (fs != null);  	ulong capacity = checked((ulong)fs.Length);  	if (capacity == 0)  		throw new ArgumentException ("Cannot memory map an empty file");  	// Create the memory mapping  	uint dwMaximumSizeLow = (uint)(capacity & 0xffffffffL);  	uint dwMaximumSizeHigh = (uint)(capacity >> 32);  	handle = UnsafeNativeMethods.CreateFileMapping (fs.SafeFileHandle' null/*TODO?*/' UnsafeNativeMethods.FileMapProtection.PageReadonly' dwMaximumSizeHigh' dwMaximumSizeLow' null);  	int errorCode = Marshal.GetLastWin32Error ();  	if (handle.IsInvalid || errorCode == 183) {  		throw Marshal.GetExceptionForHR (errorCode);  	}  	return new Win32MemoryMappedFile (fs' handle' capacity);  } catch {  	if (handle != null)  		handle.Dispose ();  	if (fs != null)  		fs.Dispose ();  	throw;  }  
Magic Number,FoundationDB.Storage.Memory.IO,Win32MemoryMappedFile,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\IO\Win32MemoryMappedFile.cs,OpenRead,The following statement contains a magic number: if (handle.IsInvalid || errorCode == 183) {  	throw Marshal.GetExceptionForHR (errorCode);  }  
Magic Number,FoundationDB.Storage.Memory.IO,Win32SnapshotFile,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\IO\Win32SnapshotFile.cs,Win32SnapshotFile,The following statement contains a magic number: if (pageSize < 512)  	throw new ArgumentException ("Page size must be at least 512."' "pageSize");  
Magic Number,FoundationDB.Storage.Memory.Core,ValueHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Core\Memory\ValueHeap.cs,GetBucket,The following statement contains a magic number: if (size <= MEDIUM_VALUES)  	return 2;  
Magic Number,FoundationDB.Storage.Memory.Core,ValueHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Core\Memory\ValueHeap.cs,GetBucket,The following statement contains a magic number: return 2;  
Magic Number,FoundationDB.Storage.Memory.Core,ValueHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Core\Memory\ValueHeap.cs,GetBucket,The following statement contains a magic number: if (size <= LARGE_VALUES)  	return 3;  
Magic Number,FoundationDB.Storage.Memory.Core,ValueHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Core\Memory\ValueHeap.cs,GetBucket,The following statement contains a magic number: return 3;  
Magic Number,FoundationDB.Storage.Memory.Core,ValueHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Core\Memory\ValueHeap.cs,GetBucket,The following statement contains a magic number: return 4;  
Magic Number,FoundationDB.Storage.Memory.Core,KeyHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Core\Memory\KeyHeap.cs,GetBucket,The following statement contains a magic number: if (size <= LARGE_KEYS)  	return 2;  
Magic Number,FoundationDB.Storage.Memory.Core,KeyHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Core\Memory\KeyHeap.cs,GetBucket,The following statement contains a magic number: return 2;  
Magic Number,FoundationDB.Storage.Memory.Core,KeyHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Core\Memory\KeyHeap.cs,GetBucket,The following statement contains a magic number: return 3;  
Magic Number,FoundationDB.Storage.Memory.Core,SequenceComparer,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Core\SequenceComparer.cs,GetHashCode,The following statement contains a magic number: return (((int)x) ^ ((int)(x >> 32)));  
Magic Number,FoundationDB.Storage.Memory.Core,ColaRangeDictionary,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaRangeDictionary.cs,ColaRangeDictionary,The following statement contains a magic number: if (capacity == 0)  	capacity = 15;  
Magic Number,FoundationDB.Storage.Memory.Core,ColaRangeDictionary,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaRangeDictionary.cs,ColaRangeDictionary,The following statement contains a magic number: capacity = 15;  
Magic Number,FoundationDB.Storage.Memory.Core,ColaRangeSet,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaRangeSet.cs,ColaRangeSet,The following statement contains a magic number: if (capacity == 0)  	capacity = 15;  
Magic Number,FoundationDB.Storage.Memory.Core,ColaRangeSet,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaRangeSet.cs,ColaRangeSet,The following statement contains a magic number: capacity = 15;  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,ColaStore,The following statement contains a magic number: if (levels >= 31)  	throw new ArgumentOutOfRangeException (nameof (capacity)' "Cannot allocate more than 30 levels");  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,InsertItems,The following statement contains a magic number: if (IsFree (1)) {  	ColaStore.MergeSimple<T> (m_levels [1]' first' second' m_comparer);  } else {  	//Console.WriteLine("InsertItems([2]) Cascade");  	var spare = GetSpare (1);  	spare [0] = first;  	spare [1] = second;  	var segment = m_levels [1];  	MergeCascade (2' segment' spare);  	segment [0] = default(T);  	segment [1] = default(T);  	PutSpare (1' spare);  }  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,InsertItems,The following statement contains a magic number: MergeCascade (2' segment' spare);  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,InsertItems,The following statement contains a magic number: m_count += 2;  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,InsertItems,The following statement contains a magic number: if (count < 2) {  	if (count == 1) {  		Insert (values [0]);  	}  	return;  }  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,InsertItems,The following statement contains a magic number: if (count == 2) {  	if (IsFree (1)) {  		segment = m_levels [1];  		if (ordered) {  			segment [0] = values [0];  			segment [1] = values [1];  		} else {  			ColaStore.MergeSimple<T> (segment' values [0]' values [1]' m_comparer);  		}  	} else {  		spare = GetSpare (1);  		spare [0] = values [0];  		spare [1] = values [1];  		segment = m_levels [1];  		MergeCascade (2' segment' spare);  		segment [0] = default(T);  		segment [1] = default(T);  		PutSpare (1' spare);  	}  } else {  	// Inserting a size that is a power of 2 is very simple:  	// * either the corresponding level is empty' in that case we just copy the items and do a quicksort  	// * or it is full' then we just need to do a cascade merge  	// For non-power of 2s' we can split decompose them into a suite of power of 2s and insert them one by one  	int min = ColaStore.LowestBit (count);  	int max = ColaStore.HighestBit (count);  	if (max >= m_levels.Length) {  		// we need to allocate new levels  		Grow (max);  	}  	int p = 0;  	for (int i = min; i <= max; i++) {  		if (ColaStore.IsFree (i' count))  			continue;  		segment = m_levels [i];  		if (IsFree (i)) {  			// the target level is free' we can copy and sort in place  			values.CopyTo (p' segment' 0' segment.Length);  			if (!ordered)  				Array.Sort (segment' 0' segment.Length' m_comparer);  			p += segment.Length;  			m_count += segment.Length;  		} else {  			// the target level is used' we will have to do a cascade merge' using a spare  			spare = GetSpare (i);  			values.CopyTo (p' spare' 0' spare.Length);  			if (!ordered)  				Array.Sort (spare' 0' spare.Length' m_comparer);  			p += segment.Length;  			MergeCascade (i + 1' segment' spare);  			Array.Clear (segment' 0' segment.Length);  			PutSpare (i' spare);  			m_count += segment.Length;  		}  	}  	Contract.Assert (p == count);  }  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,InsertItems,The following statement contains a magic number: if (count == 2) {  	if (IsFree (1)) {  		segment = m_levels [1];  		if (ordered) {  			segment [0] = values [0];  			segment [1] = values [1];  		} else {  			ColaStore.MergeSimple<T> (segment' values [0]' values [1]' m_comparer);  		}  	} else {  		spare = GetSpare (1);  		spare [0] = values [0];  		spare [1] = values [1];  		segment = m_levels [1];  		MergeCascade (2' segment' spare);  		segment [0] = default(T);  		segment [1] = default(T);  		PutSpare (1' spare);  	}  } else {  	// Inserting a size that is a power of 2 is very simple:  	// * either the corresponding level is empty' in that case we just copy the items and do a quicksort  	// * or it is full' then we just need to do a cascade merge  	// For non-power of 2s' we can split decompose them into a suite of power of 2s and insert them one by one  	int min = ColaStore.LowestBit (count);  	int max = ColaStore.HighestBit (count);  	if (max >= m_levels.Length) {  		// we need to allocate new levels  		Grow (max);  	}  	int p = 0;  	for (int i = min; i <= max; i++) {  		if (ColaStore.IsFree (i' count))  			continue;  		segment = m_levels [i];  		if (IsFree (i)) {  			// the target level is free' we can copy and sort in place  			values.CopyTo (p' segment' 0' segment.Length);  			if (!ordered)  				Array.Sort (segment' 0' segment.Length' m_comparer);  			p += segment.Length;  			m_count += segment.Length;  		} else {  			// the target level is used' we will have to do a cascade merge' using a spare  			spare = GetSpare (i);  			values.CopyTo (p' spare' 0' spare.Length);  			if (!ordered)  				Array.Sort (spare' 0' spare.Length' m_comparer);  			p += segment.Length;  			MergeCascade (i + 1' segment' spare);  			Array.Clear (segment' 0' segment.Length);  			PutSpare (i' spare);  			m_count += segment.Length;  		}  	}  	Contract.Assert (p == count);  }  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,InsertItems,The following statement contains a magic number: if (IsFree (1)) {  	segment = m_levels [1];  	if (ordered) {  		segment [0] = values [0];  		segment [1] = values [1];  	} else {  		ColaStore.MergeSimple<T> (segment' values [0]' values [1]' m_comparer);  	}  } else {  	spare = GetSpare (1);  	spare [0] = values [0];  	spare [1] = values [1];  	segment = m_levels [1];  	MergeCascade (2' segment' spare);  	segment [0] = default(T);  	segment [1] = default(T);  	PutSpare (1' spare);  }  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,InsertItems,The following statement contains a magic number: MergeCascade (2' segment' spare);  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,PutSpare,The following statement contains a magic number: if (level < m_spares.Length) {  	#if ENFORCE_INVARIANTS  					Contract.Assert(m_spareUsed[level]' "this spare wasn't used"); #endif  	// clear it in case it holds onto dead values that could be garbage collected  	spare [0] = default(T);  	if (level > 0) {  		spare [1] = default(T);  		if (level > 1)  			Array.Clear (spare' 2' spare.Length - 2);  	}  	#if ENFORCE_INVARIANTS  					m_spareUsed[level] = false; #endif  	return true;  }  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,PutSpare,The following statement contains a magic number: if (level < m_spares.Length) {  	#if ENFORCE_INVARIANTS  					Contract.Assert(m_spareUsed[level]' "this spare wasn't used"); #endif  	// clear it in case it holds onto dead values that could be garbage collected  	spare [0] = default(T);  	if (level > 0) {  		spare [1] = default(T);  		if (level > 1)  			Array.Clear (spare' 2' spare.Length - 2);  	}  	#if ENFORCE_INVARIANTS  					m_spareUsed[level] = false; #endif  	return true;  }  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,PutSpare,The following statement contains a magic number: if (level > 0) {  	spare [1] = default(T);  	if (level > 1)  		Array.Clear (spare' 2' spare.Length - 2);  }  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,PutSpare,The following statement contains a magic number: if (level > 0) {  	spare [1] = default(T);  	if (level > 1)  		Array.Clear (spare' 2' spare.Length - 2);  }  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,PutSpare,The following statement contains a magic number: if (level > 1)  	Array.Clear (spare' 2' spare.Length - 2);  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,PutSpare,The following statement contains a magic number: if (level > 1)  	Array.Clear (spare' 2' spare.Length - 2);  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,PutSpare,The following statement contains a magic number: Array.Clear (spare' 2' spare.Length - 2);  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,PutSpare,The following statement contains a magic number: Array.Clear (spare' 2' spare.Length - 2);  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,Min,The following statement contains a magic number: switch (m_count) {  case 0:  	return default(T);  case 1:  	return m_root [0];  case 2:  	return m_levels [1] [0];  default: {  	int level = ColaStore.LowestBit (m_count);  	int end = ColaStore.HighestBit (m_count);  	T min = m_levels [level] [0];  	while (level <= end) {  		if (!IsFree (level) && m_comparer.Compare (min' m_levels [level] [0]) > 0) {  			min = m_levels [level] [0];  		}  		++level;  	}  	return min;  }  }  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,Max,The following statement contains a magic number: switch (m_count) {  case 0:  	return default(T);  case 1:  	return m_root [0];  case 2:  	return m_levels [1] [1];  default: {  	int level = ColaStore.LowestBit (m_count);  	int end = ColaStore.HighestBit (m_count);  	T max = m_levels [level] [0];  	while (level <= end) {  		if (!IsFree (level) && m_comparer.Compare (max' m_levels [level] [0]) < 0) {  			max = m_levels [level] [0];  		}  		++level;  	}  	return max;  }  }  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,GetBounds,The following statement contains a magic number: switch (m_count) {  case 0: {  	min = default(T);  	max = default(T);  	break;  }  case 1: {  	min = m_root [0];  	max = min;  	break;  }  case 2: {  	min = m_levels [1] [0];  	max = m_levels [1] [1];  	break;  }  default: {  	int level = ColaStore.LowestBit (m_count);  	int end = ColaStore.HighestBit (m_count);  	var segment = m_levels [level];  	min = segment [0];  	max = segment [segment.Length - 1];  	while (level <= end) {  		if (IsFree (level))  			continue;  		segment = m_levels [level];  		if (m_comparer.Compare (min' segment [0]) > 0)  			min = segment [0];  		if (m_comparer.Compare (max' segment [segment.Length - 1]) < 0)  			min = segment [segment.Length - 1];  		++level;  	}  	break;  }  }  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,FromIndex,The following statement contains a magic number: Contract.Ensures (level >= 0 && level < 31 && offset >= 0 && offset < (1 << level));  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,ToIndex,The following statement contains a magic number: Contract.Requires (level >= 0 && level < 31 && offset >= 0 && offset < (1 << level));  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,LowestBit,The following statement contains a magic number: return MultiplyDeBruijnLowestBitPosition [v >> 27];  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,HighestBit,The following statement contains a magic number: v |= v >> 2;  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,HighestBit,The following statement contains a magic number: v |= v >> 4;  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,HighestBit,The following statement contains a magic number: v |= v >> 8;  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,HighestBit,The following statement contains a magic number: v |= v >> 16;  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,HighestBit,The following statement contains a magic number: return MultiplyDeBruijnHighestBitPosition [(int)((v * 0x07C4ACDDU) >> 27)];  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,MergeSimple,The following statement contains a magic number: Contract.Requires (segment != null && segment.Length == 2);  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,MergeSort,The following statement contains a magic number: Contract.Requires (left.Length > 0 && output.Length == left.Length * 2 && right.Length == left.Length);  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,MergeSort,The following statement contains a magic number: if (n == 2) {  	// second most frequent case (p=0.25)  	// We are merging 2 pairs of ordered values into an array of size 4  	if (comparer.Compare (left [1]' right [0]) < 0) {  		// left << right  		output [0] = left [0];  		output [1] = left [1];  		output [2] = right [0];  		output [3] = right [1];  		return;  	}  	if (comparer.Compare (right [1]' left [0]) < 0) {  		// right << left  		output [0] = right [0];  		output [1] = right [1];  		output [2] = left [0];  		output [3] = left [1];  		return;  	}  	// left and right intersects  	// => just use the regular merge sort below  }  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,MergeSort,The following statement contains a magic number: if (n == 2) {  	// second most frequent case (p=0.25)  	// We are merging 2 pairs of ordered values into an array of size 4  	if (comparer.Compare (left [1]' right [0]) < 0) {  		// left << right  		output [0] = left [0];  		output [1] = left [1];  		output [2] = right [0];  		output [3] = right [1];  		return;  	}  	if (comparer.Compare (right [1]' left [0]) < 0) {  		// right << left  		output [0] = right [0];  		output [1] = right [1];  		output [2] = left [0];  		output [3] = left [1];  		return;  	}  	// left and right intersects  	// => just use the regular merge sort below  }  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,MergeSort,The following statement contains a magic number: if (n == 2) {  	// second most frequent case (p=0.25)  	// We are merging 2 pairs of ordered values into an array of size 4  	if (comparer.Compare (left [1]' right [0]) < 0) {  		// left << right  		output [0] = left [0];  		output [1] = left [1];  		output [2] = right [0];  		output [3] = right [1];  		return;  	}  	if (comparer.Compare (right [1]' left [0]) < 0) {  		// right << left  		output [0] = right [0];  		output [1] = right [1];  		output [2] = left [0];  		output [3] = left [1];  		return;  	}  	// left and right intersects  	// => just use the regular merge sort below  }  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,MergeSort,The following statement contains a magic number: if (n == 2) {  	// second most frequent case (p=0.25)  	// We are merging 2 pairs of ordered values into an array of size 4  	if (comparer.Compare (left [1]' right [0]) < 0) {  		// left << right  		output [0] = left [0];  		output [1] = left [1];  		output [2] = right [0];  		output [3] = right [1];  		return;  	}  	if (comparer.Compare (right [1]' left [0]) < 0) {  		// right << left  		output [0] = right [0];  		output [1] = right [1];  		output [2] = left [0];  		output [3] = left [1];  		return;  	}  	// left and right intersects  	// => just use the regular merge sort below  }  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,MergeSort,The following statement contains a magic number: if (n == 2) {  	// second most frequent case (p=0.25)  	// We are merging 2 pairs of ordered values into an array of size 4  	if (comparer.Compare (left [1]' right [0]) < 0) {  		// left << right  		output [0] = left [0];  		output [1] = left [1];  		output [2] = right [0];  		output [3] = right [1];  		return;  	}  	if (comparer.Compare (right [1]' left [0]) < 0) {  		// right << left  		output [0] = right [0];  		output [1] = right [1];  		output [2] = left [0];  		output [3] = left [1];  		return;  	}  	// left and right intersects  	// => just use the regular merge sort below  }  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,MergeSort,The following statement contains a magic number: if (comparer.Compare (left [1]' right [0]) < 0) {  	// left << right  	output [0] = left [0];  	output [1] = left [1];  	output [2] = right [0];  	output [3] = right [1];  	return;  }  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,MergeSort,The following statement contains a magic number: if (comparer.Compare (left [1]' right [0]) < 0) {  	// left << right  	output [0] = left [0];  	output [1] = left [1];  	output [2] = right [0];  	output [3] = right [1];  	return;  }  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,MergeSort,The following statement contains a magic number: output [2] = right [0];  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,MergeSort,The following statement contains a magic number: output [3] = right [1];  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,MergeSort,The following statement contains a magic number: if (comparer.Compare (right [1]' left [0]) < 0) {  	// right << left  	output [0] = right [0];  	output [1] = right [1];  	output [2] = left [0];  	output [3] = left [1];  	return;  }  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,MergeSort,The following statement contains a magic number: if (comparer.Compare (right [1]' left [0]) < 0) {  	// right << left  	output [0] = right [0];  	output [1] = right [1];  	output [2] = left [0];  	output [3] = left [1];  	return;  }  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,MergeSort,The following statement contains a magic number: output [2] = left [0];  
Magic Number,FoundationDB.Storage.Memory.Core,ColaStore,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Collections\ColaStore`1.cs,MergeSort,The following statement contains a magic number: output [3] = left [1];  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadFixed16,The following statement contains a magic number: EnsureBytes (2);  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadFixed16,The following statement contains a magic number: this.Position = checked(p + 2);  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadFixed16,The following statement contains a magic number: return (ushort)(p [0] | p [1] << 8);  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadFixed32,The following statement contains a magic number: EnsureBytes (4);  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadFixed32,The following statement contains a magic number: this.Position = checked(p + 4);  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadFixed32,The following statement contains a magic number: return p [0] | (uint)p [1] << 8 | (uint)p [2] << 16 | (uint)p [3] << 24;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadFixed32,The following statement contains a magic number: return p [0] | (uint)p [1] << 8 | (uint)p [2] << 16 | (uint)p [3] << 24;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadFixed32,The following statement contains a magic number: return p [0] | (uint)p [1] << 8 | (uint)p [2] << 16 | (uint)p [3] << 24;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadFixed32,The following statement contains a magic number: return p [0] | (uint)p [1] << 8 | (uint)p [2] << 16 | (uint)p [3] << 24;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadFixed32,The following statement contains a magic number: return p [0] | (uint)p [1] << 8 | (uint)p [2] << 16 | (uint)p [3] << 24;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadFixed64,The following statement contains a magic number: EnsureBytes (8);  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadFixed64,The following statement contains a magic number: this.Position = checked(p + 8);  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadFixed64,The following statement contains a magic number: return p [0] | (ulong)p [1] << 8 | (ulong)p [2] << 16 | (ulong)p [3] << 24 | (ulong)p [4] << 32 | (ulong)p [5] << 40 | (ulong)p [6] << 48 | (ulong)p [7] << 56;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadFixed64,The following statement contains a magic number: return p [0] | (ulong)p [1] << 8 | (ulong)p [2] << 16 | (ulong)p [3] << 24 | (ulong)p [4] << 32 | (ulong)p [5] << 40 | (ulong)p [6] << 48 | (ulong)p [7] << 56;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadFixed64,The following statement contains a magic number: return p [0] | (ulong)p [1] << 8 | (ulong)p [2] << 16 | (ulong)p [3] << 24 | (ulong)p [4] << 32 | (ulong)p [5] << 40 | (ulong)p [6] << 48 | (ulong)p [7] << 56;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadFixed64,The following statement contains a magic number: return p [0] | (ulong)p [1] << 8 | (ulong)p [2] << 16 | (ulong)p [3] << 24 | (ulong)p [4] << 32 | (ulong)p [5] << 40 | (ulong)p [6] << 48 | (ulong)p [7] << 56;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadFixed64,The following statement contains a magic number: return p [0] | (ulong)p [1] << 8 | (ulong)p [2] << 16 | (ulong)p [3] << 24 | (ulong)p [4] << 32 | (ulong)p [5] << 40 | (ulong)p [6] << 48 | (ulong)p [7] << 56;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadFixed64,The following statement contains a magic number: return p [0] | (ulong)p [1] << 8 | (ulong)p [2] << 16 | (ulong)p [3] << 24 | (ulong)p [4] << 32 | (ulong)p [5] << 40 | (ulong)p [6] << 48 | (ulong)p [7] << 56;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadFixed64,The following statement contains a magic number: return p [0] | (ulong)p [1] << 8 | (ulong)p [2] << 16 | (ulong)p [3] << 24 | (ulong)p [4] << 32 | (ulong)p [5] << 40 | (ulong)p [6] << 48 | (ulong)p [7] << 56;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadFixed64,The following statement contains a magic number: return p [0] | (ulong)p [1] << 8 | (ulong)p [2] << 16 | (ulong)p [3] << 24 | (ulong)p [4] << 32 | (ulong)p [5] << 40 | (ulong)p [6] << 48 | (ulong)p [7] << 56;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadFixed64,The following statement contains a magic number: return p [0] | (ulong)p [1] << 8 | (ulong)p [2] << 16 | (ulong)p [3] << 24 | (ulong)p [4] << 32 | (ulong)p [5] << 40 | (ulong)p [6] << 48 | (ulong)p [7] << 56;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadFixed64,The following statement contains a magic number: return p [0] | (ulong)p [1] << 8 | (ulong)p [2] << 16 | (ulong)p [3] << 24 | (ulong)p [4] << 32 | (ulong)p [5] << 40 | (ulong)p [6] << 48 | (ulong)p [7] << 56;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadFixed64,The following statement contains a magic number: return p [0] | (ulong)p [1] << 8 | (ulong)p [2] << 16 | (ulong)p [3] << 24 | (ulong)p [4] << 32 | (ulong)p [5] << 40 | (ulong)p [6] << 48 | (ulong)p [7] << 56;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadFixed64,The following statement contains a magic number: return p [0] | (ulong)p [1] << 8 | (ulong)p [2] << 16 | (ulong)p [3] << 24 | (ulong)p [4] << 32 | (ulong)p [5] << 40 | (ulong)p [6] << 48 | (ulong)p [7] << 56;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadFixed64,The following statement contains a magic number: return p [0] | (ulong)p [1] << 8 | (ulong)p [2] << 16 | (ulong)p [3] << 24 | (ulong)p [4] << 32 | (ulong)p [5] << 40 | (ulong)p [6] << 48 | (ulong)p [7] << 56;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint16,The following statement contains a magic number: res |= (b & 0x7F) << 7;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint16,The following statement contains a magic number: if (b < 0x80) {  	n = 2;  	goto done;  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint16,The following statement contains a magic number: n = 2;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint16,The following statement contains a magic number: b = p [2];  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint16,The following statement contains a magic number: res |= (b & 0x2) << 14;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint16,The following statement contains a magic number: n = 3;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint32,The following statement contains a magic number: res |= (b & 0x7F) << 7;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint32,The following statement contains a magic number: if (b < 0x80) {  	n = 2;  	goto done;  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint32,The following statement contains a magic number: n = 2;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint32,The following statement contains a magic number: b = p [2];  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint32,The following statement contains a magic number: res |= (b & 0x7F) << 14;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint32,The following statement contains a magic number: if (b < 0x80) {  	n = 3;  	goto done;  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint32,The following statement contains a magic number: n = 3;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint32,The following statement contains a magic number: b = p [3];  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint32,The following statement contains a magic number: res |= (b & 0x7F) << 21;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint32,The following statement contains a magic number: if (b < 0x80) {  	n = 4;  	goto done;  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint32,The following statement contains a magic number: n = 4;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint32,The following statement contains a magic number: b = p [4];  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint32,The following statement contains a magic number: res |= (b & 0x1F) << 28;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint32,The following statement contains a magic number: n = 5;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: res |= (b & 0x7F) << 7;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: if (b < 0x80) {  	n = 2;  	goto done;  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: n = 2;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: b = p [2];  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: res |= (b & 0x7F) << 14;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: if (b < 0x80) {  	n = 3;  	goto done;  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: n = 3;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: b = p [3];  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: res |= (b & 0x7F) << 21;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: if (b < 0x80) {  	n = 4;  	goto done;  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: n = 4;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: b = p [4];  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: res |= (b & 0x7F) << 28;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: if (b < 0x80) {  	n = 5;  	goto done;  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: n = 5;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: b = p [5];  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: res |= (b & 0x7F) << 35;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: if (b < 0x80) {  	n = 6;  	goto done;  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: n = 6;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: b = p [6];  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: res |= (b & 0x7F) << 42;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: if (b < 0x80) {  	n = 7;  	goto done;  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: n = 7;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: b = p [7];  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: res |= (b & 0x7F) << 49;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: if (b < 0x80) {  	n = 8;  	goto done;  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: n = 8;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: b = p [8];  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: res |= (b & 0x7F) << 56;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: if (b < 0x80) {  	n = 9;  	goto done;  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: n = 9;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: b = p [4];  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: res |= (b & 0x1) << 63;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceReader,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceReader.cs,ReadVarint64,The following statement contains a magic number: n = 10;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedHelpers,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedHelpers.cs,NextPowerOfTwo,The following statement contains a magic number: x |= (x >> 2);  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedHelpers,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedHelpers.cs,NextPowerOfTwo,The following statement contains a magic number: x |= (x >> 4);  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedHelpers,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedHelpers.cs,NextPowerOfTwo,The following statement contains a magic number: x |= (x >> 8);  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedHelpers,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedHelpers.cs,NextPowerOfTwo,The following statement contains a magic number: x |= (x >> 16);  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedHelpers,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedHelpers.cs,ComputeHashCodeUnsafe,The following statement contains a magic number: while (count-- > 0) {  	h = (h ^ *bytes++) * 16777619;  	// FNV1 32 prime  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedHelpers,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedHelpers.cs,ComputeHashCodeUnsafe,The following statement contains a magic number: h = (h ^ *bytes++) * 16777619;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceBuilderPool,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceBuilderPool.cs,UnmanagedSliceBuilderPool,The following statement contains a magic number: m_initialCapacity = UnmanagedHelpers.NextPowerOfTwo (Math.Min (initialCapacity' 64));  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedSliceBuilderPool,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedSliceBuilderPool.cs,UnmanagedSliceBuilderPool,The following statement contains a magic number: m_buckets = new Stack<UnmanagedSliceBuilder> (Math.Max (m_maxCount' 100));  
Magic Number,FoundationDB.Storage.Memory.Utils,USliceComparer,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\USliceComparer.cs,GetHashCode,The following statement contains a magic number: return 123;  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedMemoryHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedMemoryHeap.cs,UnmanagedMemoryHeap,The following statement contains a magic number: if (pageSize > (1 << 30))  	throw new ArgumentOutOfRangeException ("pageSize"' "Page size cannot be larger than 1 GB");  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedMemoryHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedMemoryHeap.cs,AllocateNewPage,The following statement contains a magic number: try {  } finally {  	var handle = IntPtr.Zero;  	try {  		Contract.Assert (pageSize <= 1 << 30);  		handle = Marshal.AllocHGlobal ((int)pageSize);  		page = new Page (m_pages.Count' handle' pageSize);  	} catch (Exception) {  		if (handle != IntPtr.Zero)  			Marshal.FreeHGlobal (handle);  		throw;  	}  	m_memoryUsage += pageSize;  	m_pages.Add (page);  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedMemoryHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedMemoryHeap.cs,AllocateNewPage,The following statement contains a magic number: try {  	Contract.Assert (pageSize <= 1 << 30);  	handle = Marshal.AllocHGlobal ((int)pageSize);  	page = new Page (m_pages.Count' handle' pageSize);  } catch (Exception) {  	if (handle != IntPtr.Zero)  		Marshal.FreeHGlobal (handle);  	throw;  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedMemoryHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedMemoryHeap.cs,AllocateNewPage,The following statement contains a magic number: Contract.Assert (pageSize <= 1 << 30);  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedMemoryHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedMemoryHeap.cs,Allocate,The following statement contains a magic number: return Allocate (size' 2);  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedMemoryHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedMemoryHeap.cs,Allocate,The following statement contains a magic number: if (size > (m_pageSize >> 2)) {  	// big data go into its own page  	page = AllocateNewPage (size);  } else {  	// use the current page  	page = m_current;  	if (page == null || !page.CanFit (size' align)) {  		// need to allocate a new page  		page = AllocateNewPage (m_pageSize);  		m_current = page;  	}  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedMemoryHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedMemoryHeap.cs,Dump,The following statement contains a magic number: foreach (var page in m_pages) {  	Console.WriteLine ("- Page #" + page.Id + " (Used=" + page.Used + " / " + page.Size + "' " + (page.Remaining * 100.0 / page.Size).ToString ("N1") + "% free)");  	used += page.Used;  	var data = page.GetBytes ();  	if (detailed) {  		var sb = new StringBuilder (">");  		var txt = detailed ? new StringBuilder (32) : null;  		for (int i = 0; i < data.Length; i++) {  			byte b = data [i];  			sb.Append (' ').Append (b.ToString ("X2"));  			if (detailed)  				txt.Append (b < 32 || b >= 254 ? '.' : (char)b);  			if (i % 32 == 31) {  				if (detailed)  					sb.Append ("\t").Append (txt.ToString ());  				txt.Clear ();  				sb.Append ("\r\n>");  			}  		}  		Console.WriteLine (sb.ToString ());  	}  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedMemoryHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedMemoryHeap.cs,Dump,The following statement contains a magic number: foreach (var page in m_pages) {  	Console.WriteLine ("- Page #" + page.Id + " (Used=" + page.Used + " / " + page.Size + "' " + (page.Remaining * 100.0 / page.Size).ToString ("N1") + "% free)");  	used += page.Used;  	var data = page.GetBytes ();  	if (detailed) {  		var sb = new StringBuilder (">");  		var txt = detailed ? new StringBuilder (32) : null;  		for (int i = 0; i < data.Length; i++) {  			byte b = data [i];  			sb.Append (' ').Append (b.ToString ("X2"));  			if (detailed)  				txt.Append (b < 32 || b >= 254 ? '.' : (char)b);  			if (i % 32 == 31) {  				if (detailed)  					sb.Append ("\t").Append (txt.ToString ());  				txt.Clear ();  				sb.Append ("\r\n>");  			}  		}  		Console.WriteLine (sb.ToString ());  	}  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedMemoryHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedMemoryHeap.cs,Dump,The following statement contains a magic number: foreach (var page in m_pages) {  	Console.WriteLine ("- Page #" + page.Id + " (Used=" + page.Used + " / " + page.Size + "' " + (page.Remaining * 100.0 / page.Size).ToString ("N1") + "% free)");  	used += page.Used;  	var data = page.GetBytes ();  	if (detailed) {  		var sb = new StringBuilder (">");  		var txt = detailed ? new StringBuilder (32) : null;  		for (int i = 0; i < data.Length; i++) {  			byte b = data [i];  			sb.Append (' ').Append (b.ToString ("X2"));  			if (detailed)  				txt.Append (b < 32 || b >= 254 ? '.' : (char)b);  			if (i % 32 == 31) {  				if (detailed)  					sb.Append ("\t").Append (txt.ToString ());  				txt.Clear ();  				sb.Append ("\r\n>");  			}  		}  		Console.WriteLine (sb.ToString ());  	}  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedMemoryHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedMemoryHeap.cs,Dump,The following statement contains a magic number: foreach (var page in m_pages) {  	Console.WriteLine ("- Page #" + page.Id + " (Used=" + page.Used + " / " + page.Size + "' " + (page.Remaining * 100.0 / page.Size).ToString ("N1") + "% free)");  	used += page.Used;  	var data = page.GetBytes ();  	if (detailed) {  		var sb = new StringBuilder (">");  		var txt = detailed ? new StringBuilder (32) : null;  		for (int i = 0; i < data.Length; i++) {  			byte b = data [i];  			sb.Append (' ').Append (b.ToString ("X2"));  			if (detailed)  				txt.Append (b < 32 || b >= 254 ? '.' : (char)b);  			if (i % 32 == 31) {  				if (detailed)  					sb.Append ("\t").Append (txt.ToString ());  				txt.Clear ();  				sb.Append ("\r\n>");  			}  		}  		Console.WriteLine (sb.ToString ());  	}  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedMemoryHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedMemoryHeap.cs,Dump,The following statement contains a magic number: foreach (var page in m_pages) {  	Console.WriteLine ("- Page #" + page.Id + " (Used=" + page.Used + " / " + page.Size + "' " + (page.Remaining * 100.0 / page.Size).ToString ("N1") + "% free)");  	used += page.Used;  	var data = page.GetBytes ();  	if (detailed) {  		var sb = new StringBuilder (">");  		var txt = detailed ? new StringBuilder (32) : null;  		for (int i = 0; i < data.Length; i++) {  			byte b = data [i];  			sb.Append (' ').Append (b.ToString ("X2"));  			if (detailed)  				txt.Append (b < 32 || b >= 254 ? '.' : (char)b);  			if (i % 32 == 31) {  				if (detailed)  					sb.Append ("\t").Append (txt.ToString ());  				txt.Clear ();  				sb.Append ("\r\n>");  			}  		}  		Console.WriteLine (sb.ToString ());  	}  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedMemoryHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedMemoryHeap.cs,Dump,The following statement contains a magic number: foreach (var page in m_pages) {  	Console.WriteLine ("- Page #" + page.Id + " (Used=" + page.Used + " / " + page.Size + "' " + (page.Remaining * 100.0 / page.Size).ToString ("N1") + "% free)");  	used += page.Used;  	var data = page.GetBytes ();  	if (detailed) {  		var sb = new StringBuilder (">");  		var txt = detailed ? new StringBuilder (32) : null;  		for (int i = 0; i < data.Length; i++) {  			byte b = data [i];  			sb.Append (' ').Append (b.ToString ("X2"));  			if (detailed)  				txt.Append (b < 32 || b >= 254 ? '.' : (char)b);  			if (i % 32 == 31) {  				if (detailed)  					sb.Append ("\t").Append (txt.ToString ());  				txt.Clear ();  				sb.Append ("\r\n>");  			}  		}  		Console.WriteLine (sb.ToString ());  	}  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedMemoryHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedMemoryHeap.cs,Dump,The following statement contains a magic number: Console.WriteLine ("- Page #" + page.Id + " (Used=" + page.Used + " / " + page.Size + "' " + (page.Remaining * 100.0 / page.Size).ToString ("N1") + "% free)");  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedMemoryHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedMemoryHeap.cs,Dump,The following statement contains a magic number: if (detailed) {  	var sb = new StringBuilder (">");  	var txt = detailed ? new StringBuilder (32) : null;  	for (int i = 0; i < data.Length; i++) {  		byte b = data [i];  		sb.Append (' ').Append (b.ToString ("X2"));  		if (detailed)  			txt.Append (b < 32 || b >= 254 ? '.' : (char)b);  		if (i % 32 == 31) {  			if (detailed)  				sb.Append ("\t").Append (txt.ToString ());  			txt.Clear ();  			sb.Append ("\r\n>");  		}  	}  	Console.WriteLine (sb.ToString ());  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedMemoryHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedMemoryHeap.cs,Dump,The following statement contains a magic number: if (detailed) {  	var sb = new StringBuilder (">");  	var txt = detailed ? new StringBuilder (32) : null;  	for (int i = 0; i < data.Length; i++) {  		byte b = data [i];  		sb.Append (' ').Append (b.ToString ("X2"));  		if (detailed)  			txt.Append (b < 32 || b >= 254 ? '.' : (char)b);  		if (i % 32 == 31) {  			if (detailed)  				sb.Append ("\t").Append (txt.ToString ());  			txt.Clear ();  			sb.Append ("\r\n>");  		}  	}  	Console.WriteLine (sb.ToString ());  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedMemoryHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedMemoryHeap.cs,Dump,The following statement contains a magic number: if (detailed) {  	var sb = new StringBuilder (">");  	var txt = detailed ? new StringBuilder (32) : null;  	for (int i = 0; i < data.Length; i++) {  		byte b = data [i];  		sb.Append (' ').Append (b.ToString ("X2"));  		if (detailed)  			txt.Append (b < 32 || b >= 254 ? '.' : (char)b);  		if (i % 32 == 31) {  			if (detailed)  				sb.Append ("\t").Append (txt.ToString ());  			txt.Clear ();  			sb.Append ("\r\n>");  		}  	}  	Console.WriteLine (sb.ToString ());  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedMemoryHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedMemoryHeap.cs,Dump,The following statement contains a magic number: if (detailed) {  	var sb = new StringBuilder (">");  	var txt = detailed ? new StringBuilder (32) : null;  	for (int i = 0; i < data.Length; i++) {  		byte b = data [i];  		sb.Append (' ').Append (b.ToString ("X2"));  		if (detailed)  			txt.Append (b < 32 || b >= 254 ? '.' : (char)b);  		if (i % 32 == 31) {  			if (detailed)  				sb.Append ("\t").Append (txt.ToString ());  			txt.Clear ();  			sb.Append ("\r\n>");  		}  	}  	Console.WriteLine (sb.ToString ());  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedMemoryHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedMemoryHeap.cs,Dump,The following statement contains a magic number: if (detailed) {  	var sb = new StringBuilder (">");  	var txt = detailed ? new StringBuilder (32) : null;  	for (int i = 0; i < data.Length; i++) {  		byte b = data [i];  		sb.Append (' ').Append (b.ToString ("X2"));  		if (detailed)  			txt.Append (b < 32 || b >= 254 ? '.' : (char)b);  		if (i % 32 == 31) {  			if (detailed)  				sb.Append ("\t").Append (txt.ToString ());  			txt.Clear ();  			sb.Append ("\r\n>");  		}  	}  	Console.WriteLine (sb.ToString ());  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedMemoryHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedMemoryHeap.cs,Dump,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  	byte b = data [i];  	sb.Append (' ').Append (b.ToString ("X2"));  	if (detailed)  		txt.Append (b < 32 || b >= 254 ? '.' : (char)b);  	if (i % 32 == 31) {  		if (detailed)  			sb.Append ("\t").Append (txt.ToString ());  		txt.Clear ();  		sb.Append ("\r\n>");  	}  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedMemoryHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedMemoryHeap.cs,Dump,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  	byte b = data [i];  	sb.Append (' ').Append (b.ToString ("X2"));  	if (detailed)  		txt.Append (b < 32 || b >= 254 ? '.' : (char)b);  	if (i % 32 == 31) {  		if (detailed)  			sb.Append ("\t").Append (txt.ToString ());  		txt.Clear ();  		sb.Append ("\r\n>");  	}  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedMemoryHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedMemoryHeap.cs,Dump,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  	byte b = data [i];  	sb.Append (' ').Append (b.ToString ("X2"));  	if (detailed)  		txt.Append (b < 32 || b >= 254 ? '.' : (char)b);  	if (i % 32 == 31) {  		if (detailed)  			sb.Append ("\t").Append (txt.ToString ());  		txt.Clear ();  		sb.Append ("\r\n>");  	}  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedMemoryHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedMemoryHeap.cs,Dump,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  	byte b = data [i];  	sb.Append (' ').Append (b.ToString ("X2"));  	if (detailed)  		txt.Append (b < 32 || b >= 254 ? '.' : (char)b);  	if (i % 32 == 31) {  		if (detailed)  			sb.Append ("\t").Append (txt.ToString ());  		txt.Clear ();  		sb.Append ("\r\n>");  	}  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedMemoryHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedMemoryHeap.cs,Dump,The following statement contains a magic number: if (detailed)  	txt.Append (b < 32 || b >= 254 ? '.' : (char)b);  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedMemoryHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedMemoryHeap.cs,Dump,The following statement contains a magic number: if (detailed)  	txt.Append (b < 32 || b >= 254 ? '.' : (char)b);  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedMemoryHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedMemoryHeap.cs,Dump,The following statement contains a magic number: txt.Append (b < 32 || b >= 254 ? '.' : (char)b);  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedMemoryHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedMemoryHeap.cs,Dump,The following statement contains a magic number: txt.Append (b < 32 || b >= 254 ? '.' : (char)b);  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedMemoryHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedMemoryHeap.cs,Dump,The following statement contains a magic number: if (i % 32 == 31) {  	if (detailed)  		sb.Append ("\t").Append (txt.ToString ());  	txt.Clear ();  	sb.Append ("\r\n>");  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedMemoryHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedMemoryHeap.cs,Dump,The following statement contains a magic number: if (i % 32 == 31) {  	if (detailed)  		sb.Append ("\t").Append (txt.ToString ());  	txt.Clear ();  	sb.Append ("\r\n>");  }  
Magic Number,FoundationDB.Storage.Memory.Utils,UnmanagedMemoryHeap,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FoundationDB.Storage.Memory\Utils\UnmanagedMemoryHeap.cs,DumpToDisk,The following statement contains a magic number: using (var fs = new System.IO.FileStream (path' System.IO.FileMode.Create' System.IO.FileAccess.Write' System.IO.FileShare.ReadWrite' 4096' System.IO.FileOptions.None)) {  	foreach (var page in m_pages) {  		var data = page.GetBytes ();  		fs.Write (data' 0' data.Length);  	}  }  
