Implementation smell,Namespace,Class,File,Method,Description
Long Method,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The method has 165 lines of code.
Empty Catch Block,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The method has an empty catch block.
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,Main,The following statement contains a magic number: if (Console.LargestWindowHeight > 0 && Console.LargestWindowWidth > 0)  			{  				Console.WindowWidth = 80;  				Console.WindowHeight = 40;  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,Main,The following statement contains a magic number: if (Console.LargestWindowHeight > 0 && Console.LargestWindowWidth > 0)  			{  				Console.WindowWidth = 80;  				Console.WindowHeight = 40;  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following statement contains a magic number: try  			{  				CancellationTokenSource cts = null;  				Task burner = null;    				const int CAPACITY = 4 * 2;  				var history = new Queue<Datum>(CAPACITY);    				using (var db = await Fdb.OpenAsync(ClusterPath' "DB"' cancel))  				{  					db.DefaultTimeout = 10000;    					bool exit = false;  					bool hot = false;  					bool repaint = true;    					var processName = Process.GetCurrentProcess().ProcessName;  					var perCpu = new PerformanceCounter("Process"' "% Processor Time"' processName);  					var perfDiskReads = new PerformanceCounter("PhysicalDisk"' "Disk Read Bytes/sec"' "0 C:");  					var perfDiskWrites = new PerformanceCounter("PhysicalDisk"' "Disk Write Bytes/sec"' "0 C:");  					var perfDiskWriteIops = new PerformanceCounter("PhysicalDisk"' "Disk Writes/sec"' "0 C:");  					var perfDiskReadIops = new PerformanceCounter("PhysicalDisk"' "Disk Reads/sec"' "0 C:");    					const int COL0 = 1;  					const int COL1 = COL0 + 15;  					const int COL2 = COL1 + 15;  					const int COL3 = COL2 + 15;  					const int COL4 = COL3 + 15;    					while (!exit && !cancel.IsCancellationRequested)  					{  						if (Console.KeyAvailable)  						{  							var k = Console.ReadKey();  							switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}  						}    						if (!repaint)  						{  							await Task.Delay(250);  						}    						long curKeys =  Volatile.Read(ref Keys);  						long curTrans = Volatile.Read(ref Transactions);  						long curBytes = Volatile.Read(ref Bytes);  						double curDiskWrites = perfDiskWrites.NextValue();  						double curDiskReads = perfDiskReads.NextValue();  						double curDiskWriteIo = perfDiskWriteIops.NextValue();  						double curDiskReadIo = perfDiskReadIops.NextValue();    						while (history.Count >= CAPACITY) history.Dequeue();    						var now = DateTime.UtcNow;  						history.Enqueue(new Datum  						{  							Date = now'  							Keys = curKeys'  							Commits = curTrans'  							Bytes = curBytes'  							DiskWriteBps = curDiskWrites'  							DiskReadBps = curDiskReads'  							DiskWriteIops = curDiskWriteIo'  							DiskReadIops = curDiskReadIo'  						});    						if (repaint)  						{  							Console.Title = "FdbBurner - " + (!hot ? "ICY COLD" : Randomized ? "HOT HOT HOT" : "HOT HOT");    							Console.BackgroundColor = !hot ? ConsoleColor.DarkCyan : Randomized ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  							Console.Clear();  							Console.ForegroundColor = ConsoleColor.Gray;  							WriteAt(COL0' 1' "Pattern   : {0'10}"' "");  							WriteAt(COL2' 1' "Value Size: {0'6} bytes"' "");  							WriteAt(COL0' 3' "{0'-12}"' "Transactions");  							WriteAt(COL1' 3' "{0'-12}"' "Keys");  							WriteAt(COL2' 3' "{0'-10}"' "Written Bytes");  							WriteAt(COL3' 3' "{0'-10}"' "Disk Writes");  							WriteAt(COL4' 3' "{0'-10}"' "Disk Reads");  							WriteAt(COL3' 7' "{0'-10}"' "Write IOPS");  							WriteAt(COL4' 7' "{0'-10}"' "Read IOPS");    							repaint = false;  						}    						Console.ForegroundColor = ConsoleColor.White;  						WriteAt(COL0 + 12' 1' "{0'-10}"' Randomized ? "Random" : "Sequential");  						WriteAt(COL2 + 12' 1' "{0'6:N0}"' Value.Count);    						WriteAt(COL0' 4' "{0'12:N0}"' curTrans);  						WriteAt(COL1' 4' "{0'12:N0}"' curKeys);  						WriteAt(COL2' 4' "{0'10:N1} MB"' curBytes / 1048576.0);  						WriteAt(COL3' 4' "{0'10:N1} MB/s"' curDiskWrites / 1048576.0);  						WriteAt(COL4' 4' "{0'10:N1} MB/s"' curDiskReads / 1048576.0);    						if (history.Count > 1)  						{  							var old = history.Peek();  							var dur = (now - old.Date).TotalSeconds;  							double speed;    							Console.ForegroundColor = ConsoleColor.White;    							speed = (curTrans - old.Commits) / dur;  							WriteAt(COL0' 5' "{0'12:N0}"' speed);    							speed = (curKeys - old.Keys) / dur;  							WriteAt(COL1' 5' "{0'12:N0}"' speed);    							speed = (curBytes - old.Bytes) / dur;  							WriteAt(COL2' 5' "{0'10:N1} MB/s"' speed / 1048576.0);    							var writeSpeed = history.Average(d => d.DiskWriteBps);  							var readSpeed = history.Average(d => d.DiskReadBps);  							WriteAt(COL3' 5' "{0'10:N1} MB/s"' writeSpeed / 1048576.0);  							WriteAt(COL4' 5' "{0'10:N1} MB/s"' readSpeed / 1048576.0);    							var writeIops = history.Average(d => d.DiskWriteIops);  							var readIops = history.Average(d => d.DiskReadIops);  							WriteAt(COL3' 8' "{0'10:N0} iops"' writeIops);  							WriteAt(COL4' 8' "{0'10:N0} iops"' readIops);    							var factor = speed > 0 ? writeSpeed / speed : 0;  							WriteLarge(0' 16' "{0'8:F3}"' speed / 1048576.0);  							WriteLarge(0' 24' "{0'8:F3}"' writeSpeed / 1048576.0);  							WriteLarge(0' 32' "X{0'5:F1}"' factor);  						}      						Console.SetCursorPosition(0' 0);  					}    				}  			}  			finally  			{  				Console.CursorVisible = true;  				Console.ResetColor();  				Console.Clear();  			}
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,GetScanLine,The following statement contains a magic number: return Font[line].Substring(digit * 10' 10);
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,GetScanLine,The following statement contains a magic number: return Font[line].Substring(digit * 10' 10);
Magic Number,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,WriteLarge,The following statement contains a magic number: for (int i = 0; i < Font.Length; i++)  			{  				sb.Clear();  				foreach (var c in s)  				{  					switch (c)  					{  						case ' ':  							sb.Append(GetScanLine(CHAR_SPACE' i));  							break;  						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						case '8':  						case '9':  							sb.Append(GetScanLine(c - 48' i));  							break;  						case '.':  							sb.Append(GetScanLine(CHAR_DOT' i));  							break;  						case ''':  							sb.Append(GetScanLine(CHAR_COMMA' i));  							break;  						case 'x':  						case 'X':  							sb.Append(GetScanLine(CHAR_X' i));  							break;  					}  				}  				Console.SetCursorPosition(x' y);  				Console.Write(sb.ToString());  				++y;  			}
Missing Default,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,MainAsync,The following switch statement is missing a default case: switch (k.Key)  							{  								case ConsoleKey.Escape:  								{ // [ESC]  									exit = true;  									break;  								}    								case ConsoleKey.C:  								{  									if (k.Modifiers.HasFlag(ConsoleModifiers.Control))  									{ // CTRL-C  										exit = true;  									}  									break;  								}    								case ConsoleKey.R:  								{  									Randomized = !Randomized;  									repaint = true;  									break;  								}    								case ConsoleKey.V:  								{ // Change Value Size  									CurrentSize = (CurrentSize + 1) % VALUE_SIZES.Length;  									Value = Slice.Random(Rnd' VALUE_SIZES[CurrentSize]);  									repaint = true;  									break;  								}    								case ConsoleKey.Spacebar:  								{  									hot = !hot;  									repaint = true;  									if (hot)  									{  										cts = new CancellationTokenSource();  										burner = Task.Run(() => BurnerThread(db' cts.Token)' cts.Token);  									}  									else  									{  										cts.Cancel();  										try { await burner; }  										catch (TaskCanceledException) { }  										cts.Dispose();  									}  									break;  								}    							}
Missing Default,FdbBurner,Program,C:\repos\Doxense_foundationdb-dotnet-client\FdbBurner\Program.cs,WriteLarge,The following switch statement is missing a default case: switch (c)  					{  						case ' ':  							sb.Append(GetScanLine(CHAR_SPACE' i));  							break;  						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						case '8':  						case '9':  							sb.Append(GetScanLine(c - 48' i));  							break;  						case '.':  							sb.Append(GetScanLine(CHAR_DOT' i));  							break;  						case ''':  							sb.Append(GetScanLine(CHAR_COMMA' i));  							break;  						case 'x':  						case 'X':  							sb.Append(GetScanLine(CHAR_X' i));  							break;  					}
