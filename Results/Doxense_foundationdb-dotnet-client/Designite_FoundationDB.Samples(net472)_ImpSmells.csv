Implementation smell,Namespace,Class,File,Method,Description
Long Method,FoundationDB.Samples.Benchmarks,SamplerTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Sampler.cs,Run,The method has 113 lines of code.
Long Method,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,The method has 235 lines of code.
Complex Method,FoundationDB.Samples.Tutorials,ClassScheduling,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Tutorials\ClassScheduling.cs,IndecisiveStudent,Cyclomatic complexity of the method is 8
Complex Method,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,Cyclomatic complexity of the method is 28
Complex Method,Doxense.Mathematics.Statistics,RobustHistogram,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Histogram.cs,FormatHistoBar,Cyclomatic complexity of the method is 13
Long Statement,FoundationDB.Samples.Benchmarks,BenchRunner,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Benchmarks\BenchRunner.cs,Run,The length of the statement  "						Console.WriteLine("T+s | " + RobustHistogram.GetDistributionScale(RobustHistogram.HorizontalScale' 1' 5000 - 1) + " | "); " is 121.
Long Statement,FoundationDB.Samples.Benchmarks,BenchRunner,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Benchmarks\BenchRunner.cs,Run,The length of the statement  "					Console.WriteLine(String.Format(CultureInfo.InvariantCulture' "{0'3} | {1} | {2'6:#'##0.0} ms (+/- {3:#0.000})"' idx' histo.GetDistribution(1' 5000 - 1)' histo.Median' histo.MedianAbsoluteDeviation())); " is 202.
Long Statement,FoundationDB.Samples.Benchmarks,LeakTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Benchmarks\LeakTest.cs,RunWorker,The length of the statement  "				//	return await Task.WhenAll(Enumerable.Range(0' values.Length).Select(x => tr.GetRange(FdbKeyRange.StartsWith(prefix.Pack(x))).LastOrDefaultAsync())); " is 151.
Long Statement,FoundationDB.Samples.Benchmarks,LeakTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Benchmarks\LeakTest.cs,Run,The length of the statement  "				sb.AppendLine("T+" + (now - start).TotalSeconds.ToString("N1") + "s : WS=" + ws.ToString("N0") + " bytes (" + (ws - workingSet).ToString("N0") + ")' NM=" + tm.ToString("N0") + " bytes (" + (tm - totalMemory).ToString("N0") + ")"); " is 230.
Long Statement,FoundationDB.Samples.Benchmarks,LeakTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Benchmarks\LeakTest.cs,Run,The length of the statement  "				sb.AppendLine("  trans: " + DebugCounters.TransactionHandlesTotal.ToString("N0") + " (" + DebugCounters.TransactionHandles + ")' futures: " + DebugCounters.FutureHandlesTotal.ToString("N0") + " (" + DebugCounters.FutureHandles + ")' callbacks: " + DebugCounters.CallbackHandlesTotal.ToString("N0") + "(" + DebugCounters.CallbackHandles + ")"); " is 343.
Long Statement,FoundationDB.Samples.Benchmarks,LeakTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Benchmarks\LeakTest.cs,Run,The length of the statement  "				sb.AppendLine("  cpu: " + PerfCounters.ProcessorTime.NextValue().ToString("N1") + "%' private: " + PerfCounters.PrivateBytes.NextValue().ToString("N0") + "' gen0: " + PerfCounters.ClrGen0Collections.NextValue() + "' gen1: " + PerfCounters.ClrGen1Collections.NextValue() + "' gen2: " + PerfCounters.ClrGen2Collections.NextValue()); " is 330.
Long Statement,FoundationDB.Samples.Benchmarks,SamplerTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Sampler.cs,Run,The length of the statement  "			Console.WriteLine("# > Found " + numNodes + " process(es) on " + numMachines + " machine(s) in " + numDCs + " datacenter(s)"); " is 126.
Long Statement,FoundationDB.Samples.Benchmarks,SamplerTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Sampler.cs,Run,The length of the statement  "			Console.WriteLine("# Sampling " + sz + " out of " + ranges.Count + " shards (" + (100.0 * sz / ranges.Count).ToString("N1") + "%) ..."); " is 136.
Long Statement,FoundationDB.Samples.Benchmarks,SamplerTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Sampler.cs,Run,The length of the statement  "							Console.WriteLine("{0'9}{1'10}{2'10}{3'10} : {4}"' count.ToString("N0")' FormatSize(keySize)' FormatSize(valueSize)' FormatSize(totalSize)' hh.GetDistribution(begin: 1' end: 10000' fold:2)); " is 190.
Long Statement,FoundationDB.Samples.Benchmarks,SamplerTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Sampler.cs,Run,The length of the statement  "			Console.WriteLine("> Sampled " + FormatSize(total) + " (" + total.ToString("N0") + " bytes) in " + sw.Elapsed.TotalSeconds.ToString("N1") + " sec"); " is 148.
Long Statement,FoundationDB.Samples.Tutorials,MessageQueueRunner,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\MessageQueue\MessageQueueRunner.cs,Init,The length of the statement  "			this.Subspace = await db.ReadWriteAsync(tr => db.Directory.CreateOrOpenAsync(tr' new [] { "Samples"' "MessageQueueTest" })' ct); " is 128.
Long Statement,FoundationDB.Samples.Tutorials,MessageQueueRunner,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\MessageQueue\MessageQueueRunner.cs,RunStatus,The length of the statement  "				var counters = await tr.Snapshot.GetRange(countersLocation.Keys.ToRange()).Select(kvp => new KeyValuePair<string' long>(countersLocation.Keys.DecodeLast<string>(kvp.Key)' kvp.Value.ToInt64())).ToListAsync().ConfigureAwait(false); " is 229.
Long Statement,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,GetLogFile,The length of the statement  "			stream.WriteLine("# Local Time: " + DateTime.Now.ToString("O") + " (" + localTime + " local) - Universal Time: " + DateTime.UtcNow.ToString("O") + " ( " + utcTime + " UTC)"); " is 174.
Long Statement,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,GetLoggedDatabase,The length of the statement  "			return new FdbLoggedDatabase(db' false' false' (tr) => { stream.WriteLine(tr.Log.GetTimingsReport(true)); if (autoFlush) stream.Flush(); }); " is 140.
Long Statement,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,The length of the statement  "										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Producer' TimeSpan.FromMilliseconds(50)' TimeSpan.FromMilliseconds(200))' go.Token); " is 212.
Long Statement,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,The length of the statement  "										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Worker' TimeSpan.FromMilliseconds(10)' TimeSpan.FromMilliseconds(10))' go.Token); " is 209.
Long Statement,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,The length of the statement  "										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Clear' TimeSpan.Zero' TimeSpan.Zero)' go.Token); " is 176.
Long Statement,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,The length of the statement  "										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Status' TimeSpan.FromSeconds(2)' TimeSpan.FromSeconds(10))' go.Token); " is 198.
Long Statement,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,The length of the statement  "								Console.WriteLine("- Working Set  : " + PerfCounters.WorkingSet.NextValue().ToString("N0") + " (peak " + PerfCounters.WorkingSetPeak.NextValue().ToString("N0") + ")"); " is 167.
Long Statement,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,The length of the statement  "								Console.WriteLine("- Virtual Bytes: " + PerfCounters.VirtualBytes.NextValue().ToString("N0") + " (peak " + PerfCounters.VirtualBytesPeak.NextValue().ToString("N0") + ")"); " is 171.
Long Statement,Doxense.Mathematics.Statistics,RobustHistogram,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Histogram.cs,MedianAbsoluteDeviation,The length of the statement  "			// I'm using the midpoint of each bucket as the value used to compute the deviation' and the same approximation method used in Percentile(..) to compute the resulting median. " is 174.
Long Statement,Doxense.Mathematics.Statistics,RobustHistogram,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Histogram.cs,GetReport,The length of the statement  "					r.AppendLine("   _____________________________________________________________________________________________________________________"); //_________"); " is 152.
Long Statement,Doxense.Mathematics.Statistics,RobustHistogram,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Histogram.cs,GetReport,The length of the statement  "					r.AppendLine("  |____[ Min ' Max )____|___Count___|__Percent____________________________________________________|___Cumulative________|");//____kOps_|"); " is 153.
Long Statement,Doxense.Mathematics.Statistics,RobustHistogram,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Histogram.cs,GetReport,The length of the statement  "						"  | {0'8:###'##0.###} - {1'-8:###'##0.###} | {2'9:#'###'###} | {3'7:##0.000}% " + (detailed ? "{5'50} " : "{5' 16} ") + "| {4'7:##0.000}%" + (detailed ? " {6'10}"/*" | {7'7:0.0}"*/ : "")' " is 188.
Long Statement,Doxense.Mathematics.Statistics,RobustHistogram,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Histogram.cs,GetReport,The length of the statement  "					r.AppendLine("  `---------------------------------------------------------------------------------------------------------------------'"); // --------- " is 151.
Long Statement,Doxense.Mathematics.Statistics,RobustHistogram,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Histogram.cs,ToString,The length of the statement  "			return String.Format(CultureInfo.InvariantCulture' "Count={0}' Avg={1}' Min={2}' Max={3}"' this.Count' this.Average' this.Count > 0 ? this.Min : 0' this.Max); " is 158.
Magic Number,FoundationDB.Samples.Benchmarks,BenchRunner,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Benchmarks\BenchRunner.cs,Run,The following statement contains a magic number: const int RUN_IN_SECONDS = 100;
Magic Number,FoundationDB.Samples.Benchmarks,BenchRunner,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Benchmarks\BenchRunner.cs,Run,The following statement contains a magic number: var timeline = new RobustTimeLine(  				TimeSpan.FromSeconds(1)'  				RobustHistogram.TimeScale.Milliseconds'  				(histo' idx) =>  				{  					if (idx == 0)  					{  						Console.WriteLine("T+s | " + RobustHistogram.GetDistributionScale(RobustHistogram.HorizontalScale' 1' 5000 - 1) + " | ");  					}  					Console.WriteLine(String.Format(CultureInfo.InvariantCulture' "{0'3} | {1} | {2'6:#'##0.0} ms (+/- {3:#0.000})"' idx' histo.GetDistribution(1' 5000 - 1)' histo.Median' histo.MedianAbsoluteDeviation()));  					if (log != Console.Out) log.WriteLine(histo.GetReport(false));  					return false;  				}  			);
Magic Number,FoundationDB.Samples.Benchmarks,BenchRunner,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Benchmarks\BenchRunner.cs,Run,The following statement contains a magic number: var timeline = new RobustTimeLine(  				TimeSpan.FromSeconds(1)'  				RobustHistogram.TimeScale.Milliseconds'  				(histo' idx) =>  				{  					if (idx == 0)  					{  						Console.WriteLine("T+s | " + RobustHistogram.GetDistributionScale(RobustHistogram.HorizontalScale' 1' 5000 - 1) + " | ");  					}  					Console.WriteLine(String.Format(CultureInfo.InvariantCulture' "{0'3} | {1} | {2'6:#'##0.0} ms (+/- {3:#0.000})"' idx' histo.GetDistribution(1' 5000 - 1)' histo.Median' histo.MedianAbsoluteDeviation()));  					if (log != Console.Out) log.WriteLine(histo.GetReport(false));  					return false;  				}  			);
Magic Number,FoundationDB.Samples.Benchmarks,LeakTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Benchmarks\LeakTest.cs,RunWorker,The following statement contains a magic number: var rnd = new Random(id * 7);
Magic Number,FoundationDB.Samples.Benchmarks,LeakTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Benchmarks\LeakTest.cs,RunWorker,The following statement contains a magic number: var n = rnd.Next(values.Length / 2);
Magic Number,FoundationDB.Samples.Benchmarks,LeakTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Benchmarks\LeakTest.cs,RunWorker,The following statement contains a magic number: await db.WriteAsync((tr) =>  				{  					if (tr.Context.Retries > 0) Console.Write("!");  					for (int j = 0; j < values.Length; j++)  					{  						tr.Set(location.Keys.Encode(j' now)' Slice.FromString(values[j] + new string('A'' 100)));  					}  				}' ct);
Magic Number,FoundationDB.Samples.Benchmarks,LeakTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Benchmarks\LeakTest.cs,Run,The following statement contains a magic number: ThreadPool.SetMinThreads(100' 100);
Magic Number,FoundationDB.Samples.Benchmarks,LeakTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Benchmarks\LeakTest.cs,Run,The following statement contains a magic number: ThreadPool.SetMinThreads(100' 100);
Magic Number,FoundationDB.Samples.Benchmarks,SamplerTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Sampler.cs,FormatSize,The following statement contains a magic number: size < 10000
Magic Number,FoundationDB.Samples.Benchmarks,SamplerTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Sampler.cs,FormatSize,The following statement contains a magic number: double x = size / 1024.0;
Magic Number,FoundationDB.Samples.Benchmarks,SamplerTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Sampler.cs,FormatSize,The following statement contains a magic number: x < 800
Magic Number,FoundationDB.Samples.Benchmarks,SamplerTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Sampler.cs,FormatSize,The following statement contains a magic number: x /= 1024.0;
Magic Number,FoundationDB.Samples.Benchmarks,SamplerTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Sampler.cs,FormatSize,The following statement contains a magic number: x < 800
Magic Number,FoundationDB.Samples.Benchmarks,SamplerTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Sampler.cs,FormatSize,The following statement contains a magic number: x /= 1024.0;
Magic Number,FoundationDB.Samples.Benchmarks,SamplerTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Sampler.cs,Run,The following statement contains a magic number: var servers = await db.QueryAsync(tr => tr  				.WithReadAccessToSystemKeys()  				.GetRange(KeyRange.StartsWith(Fdb.System.ServerList))  				.Select(kvp => new  				{  					Node = kvp.Value.Substring(8' 16).ToHexaString()'  					Machine = kvp.Value.Substring(24' 16).ToHexaString()'  					DataCenter = kvp.Value.Substring(40' 16).ToHexaString()  				})'  				ct  			);
Magic Number,FoundationDB.Samples.Benchmarks,SamplerTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Sampler.cs,Run,The following statement contains a magic number: var servers = await db.QueryAsync(tr => tr  				.WithReadAccessToSystemKeys()  				.GetRange(KeyRange.StartsWith(Fdb.System.ServerList))  				.Select(kvp => new  				{  					Node = kvp.Value.Substring(8' 16).ToHexaString()'  					Machine = kvp.Value.Substring(24' 16).ToHexaString()'  					DataCenter = kvp.Value.Substring(40' 16).ToHexaString()  				})'  				ct  			);
Magic Number,FoundationDB.Samples.Benchmarks,SamplerTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Sampler.cs,Run,The following statement contains a magic number: var servers = await db.QueryAsync(tr => tr  				.WithReadAccessToSystemKeys()  				.GetRange(KeyRange.StartsWith(Fdb.System.ServerList))  				.Select(kvp => new  				{  					Node = kvp.Value.Substring(8' 16).ToHexaString()'  					Machine = kvp.Value.Substring(24' 16).ToHexaString()'  					DataCenter = kvp.Value.Substring(40' 16).ToHexaString()  				})'  				ct  			);
Magic Number,FoundationDB.Samples.Benchmarks,SamplerTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Sampler.cs,Run,The following statement contains a magic number: var servers = await db.QueryAsync(tr => tr  				.WithReadAccessToSystemKeys()  				.GetRange(KeyRange.StartsWith(Fdb.System.ServerList))  				.Select(kvp => new  				{  					Node = kvp.Value.Substring(8' 16).ToHexaString()'  					Machine = kvp.Value.Substring(24' 16).ToHexaString()'  					DataCenter = kvp.Value.Substring(40' 16).ToHexaString()  				})'  				ct  			);
Magic Number,FoundationDB.Samples.Benchmarks,SamplerTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Sampler.cs,Run,The following statement contains a magic number: var servers = await db.QueryAsync(tr => tr  				.WithReadAccessToSystemKeys()  				.GetRange(KeyRange.StartsWith(Fdb.System.ServerList))  				.Select(kvp => new  				{  					Node = kvp.Value.Substring(8' 16).ToHexaString()'  					Machine = kvp.Value.Substring(24' 16).ToHexaString()'  					DataCenter = kvp.Value.Substring(40' 16).ToHexaString()  				})'  				ct  			);
Magic Number,FoundationDB.Samples.Benchmarks,SamplerTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Sampler.cs,Run,The following statement contains a magic number: var servers = await db.QueryAsync(tr => tr  				.WithReadAccessToSystemKeys()  				.GetRange(KeyRange.StartsWith(Fdb.System.ServerList))  				.Select(kvp => new  				{  					Node = kvp.Value.Substring(8' 16).ToHexaString()'  					Machine = kvp.Value.Substring(24' 16).ToHexaString()'  					DataCenter = kvp.Value.Substring(40' 16).ToHexaString()  				})'  				ct  			);
Magic Number,FoundationDB.Samples.Benchmarks,SamplerTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Sampler.cs,Run,The following statement contains a magic number: var rnd = new Random(1234);
Magic Number,FoundationDB.Samples.Benchmarks,SamplerTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Sampler.cs,Run,The following statement contains a magic number: sz = 500;
Magic Number,FoundationDB.Samples.Benchmarks,SamplerTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Sampler.cs,Run,The following statement contains a magic number: sz > 500
Magic Number,FoundationDB.Samples.Benchmarks,SamplerTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Sampler.cs,Run,The following statement contains a magic number: sz = Math.Max(sz' Math.Min(50' ranges.Count));
Magic Number,FoundationDB.Samples.Benchmarks,SamplerTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Sampler.cs,Run,The following statement contains a magic number: sz < 50
Magic Number,FoundationDB.Samples.Benchmarks,SamplerTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Sampler.cs,Run,The following statement contains a magic number: Console.WriteLine("# Sampling " + sz + " out of " + ranges.Count + " shards (" + (100.0 * sz / ranges.Count).ToString("N1") + "%) ...");
Magic Number,FoundationDB.Samples.Benchmarks,SamplerTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Sampler.cs,Run,The following statement contains a magic number: int workers = Math.Min(numMachines' 8);
Magic Number,FoundationDB.Samples.Benchmarks,SamplerTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Sampler.cs,Run,The following statement contains a magic number: tasks.Add(Task.Run(async () =>  					{  						var hh = new RobustHistogram(RobustHistogram.TimeScale.Ticks);    						#region Method 1: get_range everything...    						using (var tr = db.BeginTransaction(ct))  						{  							long keySize = 0;  							long valueSize = 0;  							long count = 0;    							int iter = 0;  							var beginSelector = KeySelector.FirstGreaterOrEqual(range.Begin);  							var endSelector = KeySelector.FirstGreaterOrEqual(range.End);  							while (true)  							{  								FdbRangeChunk data = default(FdbRangeChunk);  								FdbException error = null;  								try  								{  									data = await tr.Snapshot.GetRangeAsync(  										beginSelector'  										endSelector'  										rangeOptions'  										iter  									).ConfigureAwait(false);  								}  								catch (FdbException e)  								{  									error = e;  								}    								if (error != null)  								{  									await tr.OnErrorAsync(error.Code).ConfigureAwait(false);  									continue;  								}    								if (data.Count == 0) break;    								count += data.Count;  								foreach (var kvp in data)  								{  									keySize += kvp.Key.Count;  									valueSize += kvp.Value.Count;    									hh.Add(TimeSpan.FromTicks(kvp.Key.Count + kvp.Value.Count));  								}    								if (!data.HasMore) break;    								beginSelector = KeySelector.FirstGreaterThan(data.Last);  								++iter;  							}    							long totalSize = keySize + valueSize;  							Interlocked.Add(ref total' totalSize);    							Console.WriteLine("{0'9}{1'10}{2'10}{3'10} : {4}"' count.ToString("N0")' FormatSize(keySize)' FormatSize(valueSize)' FormatSize(totalSize)' hh.GetDistribution(begin: 1' end: 10000' fold:2));  						}  						#endregion    						#region Method 2: estimate the count using key selectors...    						//long counter = await Fdb.System.EstimateCountAsync(db' range' ct);  						//Console.WriteLine("COUNT = " + counter.ToString("N0"));    						#endregion  					}' ct));
Magic Number,FoundationDB.Samples.Benchmarks,SamplerTest,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Sampler.cs,Run,The following statement contains a magic number: tasks.Add(Task.Run(async () =>  					{  						var hh = new RobustHistogram(RobustHistogram.TimeScale.Ticks);    						#region Method 1: get_range everything...    						using (var tr = db.BeginTransaction(ct))  						{  							long keySize = 0;  							long valueSize = 0;  							long count = 0;    							int iter = 0;  							var beginSelector = KeySelector.FirstGreaterOrEqual(range.Begin);  							var endSelector = KeySelector.FirstGreaterOrEqual(range.End);  							while (true)  							{  								FdbRangeChunk data = default(FdbRangeChunk);  								FdbException error = null;  								try  								{  									data = await tr.Snapshot.GetRangeAsync(  										beginSelector'  										endSelector'  										rangeOptions'  										iter  									).ConfigureAwait(false);  								}  								catch (FdbException e)  								{  									error = e;  								}    								if (error != null)  								{  									await tr.OnErrorAsync(error.Code).ConfigureAwait(false);  									continue;  								}    								if (data.Count == 0) break;    								count += data.Count;  								foreach (var kvp in data)  								{  									keySize += kvp.Key.Count;  									valueSize += kvp.Value.Count;    									hh.Add(TimeSpan.FromTicks(kvp.Key.Count + kvp.Value.Count));  								}    								if (!data.HasMore) break;    								beginSelector = KeySelector.FirstGreaterThan(data.Last);  								++iter;  							}    							long totalSize = keySize + valueSize;  							Interlocked.Add(ref total' totalSize);    							Console.WriteLine("{0'9}{1'10}{2'10}{3'10} : {4}"' count.ToString("N0")' FormatSize(keySize)' FormatSize(valueSize)' FormatSize(totalSize)' hh.GetDistribution(begin: 1' end: 10000' fold:2));  						}  						#endregion    						#region Method 2: estimate the count using key selectors...    						//long counter = await Fdb.System.EstimateCountAsync(db' range' ct);  						//Console.WriteLine("COUNT = " + counter.ToString("N0"));    						#endregion  					}' ct));
Magic Number,FoundationDB.Samples.Tutorials,MessageQueueRunner,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\MessageQueue\MessageQueueRunner.cs,MessageQueueRunner,The following statement contains a magic number: this.TimeLine = new RobustTimeLine(  				TimeSpan.FromSeconds(5)'  				onCompleted: (histo' idx) =>  				{  					Console.WriteLine(String.Format(CultureInfo.InvariantCulture' "{0'3} | {1} | {2'6:#'##0.0} ms (+/- {3:#0.0})"' idx' histo.GetDistribution(1' 5000 - 1)' histo.Median' histo.MedianAbsoluteDeviation()));  					if (idx % 30 == 29)  					{  						Console.WriteLine(this.TimeLine.MergeResults().GetReport(true));  						return true;  					}  					return false;  				}  			);
Magic Number,FoundationDB.Samples.Tutorials,MessageQueueRunner,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\MessageQueue\MessageQueueRunner.cs,MessageQueueRunner,The following statement contains a magic number: this.TimeLine = new RobustTimeLine(  				TimeSpan.FromSeconds(5)'  				onCompleted: (histo' idx) =>  				{  					Console.WriteLine(String.Format(CultureInfo.InvariantCulture' "{0'3} | {1} | {2'6:#'##0.0} ms (+/- {3:#0.0})"' idx' histo.GetDistribution(1' 5000 - 1)' histo.Median' histo.MedianAbsoluteDeviation()));  					if (idx % 30 == 29)  					{  						Console.WriteLine(this.TimeLine.MergeResults().GetReport(true));  						return true;  					}  					return false;  				}  			);
Magic Number,FoundationDB.Samples.Tutorials,MessageQueueRunner,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\MessageQueue\MessageQueueRunner.cs,MessageQueueRunner,The following statement contains a magic number: this.TimeLine = new RobustTimeLine(  				TimeSpan.FromSeconds(5)'  				onCompleted: (histo' idx) =>  				{  					Console.WriteLine(String.Format(CultureInfo.InvariantCulture' "{0'3} | {1} | {2'6:#'##0.0} ms (+/- {3:#0.0})"' idx' histo.GetDistribution(1' 5000 - 1)' histo.Median' histo.MedianAbsoluteDeviation()));  					if (idx % 30 == 29)  					{  						Console.WriteLine(this.TimeLine.MergeResults().GetReport(true));  						return true;  					}  					return false;  				}  			);
Magic Number,FoundationDB.Samples.Tutorials,MessageQueueRunner,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\MessageQueue\MessageQueueRunner.cs,MessageQueueRunner,The following statement contains a magic number: this.TimeLine = new RobustTimeLine(  				TimeSpan.FromSeconds(5)'  				onCompleted: (histo' idx) =>  				{  					Console.WriteLine(String.Format(CultureInfo.InvariantCulture' "{0'3} | {1} | {2'6:#'##0.0} ms (+/- {3:#0.0})"' idx' histo.GetDistribution(1' 5000 - 1)' histo.Median' histo.MedianAbsoluteDeviation()));  					if (idx % 30 == 29)  					{  						Console.WriteLine(this.TimeLine.MergeResults().GetReport(true));  						return true;  					}  					return false;  				}  			);
Magic Number,FoundationDB.Samples.Tutorials,ClassScheduling,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Tutorials\ClassScheduling.cs,ClassScheduling,The following statement contains a magic number: var times = Enumerable.Range(2' 20).Select(h => h.ToString() + ":00").ToArray();
Magic Number,FoundationDB.Samples.Tutorials,ClassScheduling,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Tutorials\ClassScheduling.cs,ClassScheduling,The following statement contains a magic number: var times = Enumerable.Range(2' 20).Select(h => h.ToString() + ":00").ToArray();
Magic Number,FoundationDB.Samples.Tutorials,ClassScheduling,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Tutorials\ClassScheduling.cs,Signup,The following statement contains a magic number: classes.Count >= 5
Magic Number,FoundationDB.Samples.Tutorials,ClassScheduling,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Tutorials\ClassScheduling.cs,IndecisiveStudent,The following statement contains a magic number: var rnd = new Random(id * 7);
Magic Number,FoundationDB.Samples.Tutorials,ClassScheduling,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Tutorials\ClassScheduling.cs,IndecisiveStudent,The following statement contains a magic number: classCount < 5
Magic Number,FoundationDB.Samples.Tutorials,ClassScheduling,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Tutorials\ClassScheduling.cs,Run,The following statement contains a magic number: const int STUDENTS = 10;
Magic Number,FoundationDB.Samples.Tutorials,ClassScheduling,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Tutorials\ClassScheduling.cs,Run,The following statement contains a magic number: const int OPS_PER_STUDENTS = 10;
Magic Number,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,GetLogFile,The following statement contains a magic number: long localTime = (DateTime.Now.Ticks / TimeSpan.TicksPerMillisecond) - 62135596800000;
Magic Number,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,GetLogFile,The following statement contains a magic number: long utcTime = (DateTime.UtcNow.Ticks / TimeSpan.TicksPerMillisecond) - 62135596800000;
Magic Number,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,The following statement contains a magic number: switch (args[pStart].Substring(1))  					{  						case "C": case "c":  						{  							clusterFile = args[pStart + 1];  							pStart += 2;  							break;  						}  						case "P": case "p":  						{  							partition = args[pStart + 1].Trim().Split("/".ToCharArray()' StringSplitOptions.RemoveEmptyEntries);  							pStart += 2;  							break;  						}  						default:  						{  							Console.WriteLine(string.Format("Unknown option : '{0}'"' args[pStart]));  							pStart++;  							break;  						}  					}
Magic Number,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,The following statement contains a magic number: switch (args[pStart].Substring(1))  					{  						case "C": case "c":  						{  							clusterFile = args[pStart + 1];  							pStart += 2;  							break;  						}  						case "P": case "p":  						{  							partition = args[pStart + 1].Trim().Split("/".ToCharArray()' StringSplitOptions.RemoveEmptyEntries);  							pStart += 2;  							break;  						}  						default:  						{  							Console.WriteLine(string.Format("Unknown option : '{0}'"' args[pStart]));  							pStart++;  							break;  						}  					}
Magic Number,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,The following statement contains a magic number: Db.DefaultTimeout = 30 * 1000;
Magic Number,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,The following statement contains a magic number: Db.DefaultTimeout = 30 * 1000;
Magic Number,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,The following statement contains a magic number: Db.DefaultRetryLimit = 10;
Magic Number,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,The following statement contains a magic number: switch (trimmedCommand)  						{  							case "":  							{  								continue;  							}  							case "1":  							{ // Class Scheduling    								RunAsyncTest(new ClassScheduling()' go.Token);  								break;  							}    							case "log":  							{  								switch(prm.ToLowerInvariant())  								{  									case "on":  									{  										LogEnabled = true;  										Console.WriteLine("# Logging enabled");  										break;  									}  									case "off":  									{  										LogEnabled = false;  										Console.WriteLine("# Logging disabled");  										break;  									}  									default:  									{  										Console.WriteLine("# Logging is {0}"' LogEnabled ? "ON" : "OFF");  										break;  									}  								}  								break;  							}    							case "bench":  							{ // Benchs    								switch(prm.ToLowerInvariant())  								{  									case "read":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.GetReadVersion)' go.Token);  										break;  									}  									case "get":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get)' go.Token);  										break;  									}  									case "get10":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get' 10)' go.Token);  										break;  									}  									case "set":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Set)' go.Token);  										break;  									}  									case "watch":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Watch)' go.Token);  										break;  									}  								}    								break;  							}    							case "msg":  							{  								switch(prm.ToLowerInvariant())  								{  									case "producer":  									{ // Queue Producer  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Producer' TimeSpan.FromMilliseconds(50)' TimeSpan.FromMilliseconds(200))' go.Token);  										break;  									}  									case "worker":  									{ // Queue Worker  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Worker' TimeSpan.FromMilliseconds(10)' TimeSpan.FromMilliseconds(10))' go.Token);  										break;  									}  									case "clear":  									{ // Queue Clear  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Clear' TimeSpan.Zero' TimeSpan.Zero)' go.Token);  										break;  									}  									case "status":  									{ // Queue Status  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Status' TimeSpan.FromSeconds(2)' TimeSpan.FromSeconds(10))' go.Token);  										break;  									}  								}  								break;  							}    							case "leak":  							{ // LeastTest  								switch(prm.ToLowerInvariant())  								{  									case "fast": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(0))' go.Token); break;  									case "slow": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(30))' go.Token); break;  									default: RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(1))' go.Token); break;  								}							  								break;  							}    							case "sampling":  							{ // SamplingTest  								RunAsyncTest(new SamplerTest(0.1)' go.Token);  								break;  							}    							case "q":  							case "x":  							case "quit":  							case "exit":  							{  								stop = true;  								break;  							}    							case "gc":  							{  								long before = GC.GetTotalMemory(false);  								Console.Write("Collecting garbage...");  								GC.Collect();  								GC.WaitForPendingFinalizers();  								GC.Collect();  								Console.WriteLine(" Done");  								long after = GC.GetTotalMemory(false);  								Console.WriteLine("- before = " + before.ToString("N0"));  								Console.WriteLine("- after  = " + after.ToString("N0"));  								Console.WriteLine("- delta  = " + (before - after).ToString("N0"));  								break;  							}    							case "mem":  							{  								Console.WriteLine("Memory usage:");  								Console.WriteLine("- Managed Mem  : " + GC.GetTotalMemory(false).ToString("N0"));  #if !NETCOREAPP  								Console.WriteLine("- Working Set  : " + PerfCounters.WorkingSet.NextValue().ToString("N0") + " (peak " + PerfCounters.WorkingSetPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Virtual Bytes: " + PerfCounters.VirtualBytes.NextValue().ToString("N0") + " (peak " + PerfCounters.VirtualBytesPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Private Bytes: " + PerfCounters.PrivateBytes.NextValue().ToString("N0"));  								Console.WriteLine("- BytesInAlHeap: " + PerfCounters.ClrBytesInAllHeaps.NextValue().ToString("N0"));  #endif  								break;  							}    							default:  							{  								Console.WriteLine(string.Format("Unknown command : '{0}'"' trimmedCommand));  								break;  							}  						}
Magic Number,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,The following statement contains a magic number: switch (trimmedCommand)  						{  							case "":  							{  								continue;  							}  							case "1":  							{ // Class Scheduling    								RunAsyncTest(new ClassScheduling()' go.Token);  								break;  							}    							case "log":  							{  								switch(prm.ToLowerInvariant())  								{  									case "on":  									{  										LogEnabled = true;  										Console.WriteLine("# Logging enabled");  										break;  									}  									case "off":  									{  										LogEnabled = false;  										Console.WriteLine("# Logging disabled");  										break;  									}  									default:  									{  										Console.WriteLine("# Logging is {0}"' LogEnabled ? "ON" : "OFF");  										break;  									}  								}  								break;  							}    							case "bench":  							{ // Benchs    								switch(prm.ToLowerInvariant())  								{  									case "read":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.GetReadVersion)' go.Token);  										break;  									}  									case "get":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get)' go.Token);  										break;  									}  									case "get10":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get' 10)' go.Token);  										break;  									}  									case "set":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Set)' go.Token);  										break;  									}  									case "watch":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Watch)' go.Token);  										break;  									}  								}    								break;  							}    							case "msg":  							{  								switch(prm.ToLowerInvariant())  								{  									case "producer":  									{ // Queue Producer  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Producer' TimeSpan.FromMilliseconds(50)' TimeSpan.FromMilliseconds(200))' go.Token);  										break;  									}  									case "worker":  									{ // Queue Worker  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Worker' TimeSpan.FromMilliseconds(10)' TimeSpan.FromMilliseconds(10))' go.Token);  										break;  									}  									case "clear":  									{ // Queue Clear  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Clear' TimeSpan.Zero' TimeSpan.Zero)' go.Token);  										break;  									}  									case "status":  									{ // Queue Status  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Status' TimeSpan.FromSeconds(2)' TimeSpan.FromSeconds(10))' go.Token);  										break;  									}  								}  								break;  							}    							case "leak":  							{ // LeastTest  								switch(prm.ToLowerInvariant())  								{  									case "fast": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(0))' go.Token); break;  									case "slow": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(30))' go.Token); break;  									default: RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(1))' go.Token); break;  								}							  								break;  							}    							case "sampling":  							{ // SamplingTest  								RunAsyncTest(new SamplerTest(0.1)' go.Token);  								break;  							}    							case "q":  							case "x":  							case "quit":  							case "exit":  							{  								stop = true;  								break;  							}    							case "gc":  							{  								long before = GC.GetTotalMemory(false);  								Console.Write("Collecting garbage...");  								GC.Collect();  								GC.WaitForPendingFinalizers();  								GC.Collect();  								Console.WriteLine(" Done");  								long after = GC.GetTotalMemory(false);  								Console.WriteLine("- before = " + before.ToString("N0"));  								Console.WriteLine("- after  = " + after.ToString("N0"));  								Console.WriteLine("- delta  = " + (before - after).ToString("N0"));  								break;  							}    							case "mem":  							{  								Console.WriteLine("Memory usage:");  								Console.WriteLine("- Managed Mem  : " + GC.GetTotalMemory(false).ToString("N0"));  #if !NETCOREAPP  								Console.WriteLine("- Working Set  : " + PerfCounters.WorkingSet.NextValue().ToString("N0") + " (peak " + PerfCounters.WorkingSetPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Virtual Bytes: " + PerfCounters.VirtualBytes.NextValue().ToString("N0") + " (peak " + PerfCounters.VirtualBytesPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Private Bytes: " + PerfCounters.PrivateBytes.NextValue().ToString("N0"));  								Console.WriteLine("- BytesInAlHeap: " + PerfCounters.ClrBytesInAllHeaps.NextValue().ToString("N0"));  #endif  								break;  							}    							default:  							{  								Console.WriteLine(string.Format("Unknown command : '{0}'"' trimmedCommand));  								break;  							}  						}
Magic Number,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,The following statement contains a magic number: switch (trimmedCommand)  						{  							case "":  							{  								continue;  							}  							case "1":  							{ // Class Scheduling    								RunAsyncTest(new ClassScheduling()' go.Token);  								break;  							}    							case "log":  							{  								switch(prm.ToLowerInvariant())  								{  									case "on":  									{  										LogEnabled = true;  										Console.WriteLine("# Logging enabled");  										break;  									}  									case "off":  									{  										LogEnabled = false;  										Console.WriteLine("# Logging disabled");  										break;  									}  									default:  									{  										Console.WriteLine("# Logging is {0}"' LogEnabled ? "ON" : "OFF");  										break;  									}  								}  								break;  							}    							case "bench":  							{ // Benchs    								switch(prm.ToLowerInvariant())  								{  									case "read":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.GetReadVersion)' go.Token);  										break;  									}  									case "get":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get)' go.Token);  										break;  									}  									case "get10":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get' 10)' go.Token);  										break;  									}  									case "set":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Set)' go.Token);  										break;  									}  									case "watch":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Watch)' go.Token);  										break;  									}  								}    								break;  							}    							case "msg":  							{  								switch(prm.ToLowerInvariant())  								{  									case "producer":  									{ // Queue Producer  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Producer' TimeSpan.FromMilliseconds(50)' TimeSpan.FromMilliseconds(200))' go.Token);  										break;  									}  									case "worker":  									{ // Queue Worker  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Worker' TimeSpan.FromMilliseconds(10)' TimeSpan.FromMilliseconds(10))' go.Token);  										break;  									}  									case "clear":  									{ // Queue Clear  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Clear' TimeSpan.Zero' TimeSpan.Zero)' go.Token);  										break;  									}  									case "status":  									{ // Queue Status  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Status' TimeSpan.FromSeconds(2)' TimeSpan.FromSeconds(10))' go.Token);  										break;  									}  								}  								break;  							}    							case "leak":  							{ // LeastTest  								switch(prm.ToLowerInvariant())  								{  									case "fast": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(0))' go.Token); break;  									case "slow": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(30))' go.Token); break;  									default: RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(1))' go.Token); break;  								}							  								break;  							}    							case "sampling":  							{ // SamplingTest  								RunAsyncTest(new SamplerTest(0.1)' go.Token);  								break;  							}    							case "q":  							case "x":  							case "quit":  							case "exit":  							{  								stop = true;  								break;  							}    							case "gc":  							{  								long before = GC.GetTotalMemory(false);  								Console.Write("Collecting garbage...");  								GC.Collect();  								GC.WaitForPendingFinalizers();  								GC.Collect();  								Console.WriteLine(" Done");  								long after = GC.GetTotalMemory(false);  								Console.WriteLine("- before = " + before.ToString("N0"));  								Console.WriteLine("- after  = " + after.ToString("N0"));  								Console.WriteLine("- delta  = " + (before - after).ToString("N0"));  								break;  							}    							case "mem":  							{  								Console.WriteLine("Memory usage:");  								Console.WriteLine("- Managed Mem  : " + GC.GetTotalMemory(false).ToString("N0"));  #if !NETCOREAPP  								Console.WriteLine("- Working Set  : " + PerfCounters.WorkingSet.NextValue().ToString("N0") + " (peak " + PerfCounters.WorkingSetPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Virtual Bytes: " + PerfCounters.VirtualBytes.NextValue().ToString("N0") + " (peak " + PerfCounters.VirtualBytesPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Private Bytes: " + PerfCounters.PrivateBytes.NextValue().ToString("N0"));  								Console.WriteLine("- BytesInAlHeap: " + PerfCounters.ClrBytesInAllHeaps.NextValue().ToString("N0"));  #endif  								break;  							}    							default:  							{  								Console.WriteLine(string.Format("Unknown command : '{0}'"' trimmedCommand));  								break;  							}  						}
Magic Number,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,The following statement contains a magic number: switch (trimmedCommand)  						{  							case "":  							{  								continue;  							}  							case "1":  							{ // Class Scheduling    								RunAsyncTest(new ClassScheduling()' go.Token);  								break;  							}    							case "log":  							{  								switch(prm.ToLowerInvariant())  								{  									case "on":  									{  										LogEnabled = true;  										Console.WriteLine("# Logging enabled");  										break;  									}  									case "off":  									{  										LogEnabled = false;  										Console.WriteLine("# Logging disabled");  										break;  									}  									default:  									{  										Console.WriteLine("# Logging is {0}"' LogEnabled ? "ON" : "OFF");  										break;  									}  								}  								break;  							}    							case "bench":  							{ // Benchs    								switch(prm.ToLowerInvariant())  								{  									case "read":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.GetReadVersion)' go.Token);  										break;  									}  									case "get":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get)' go.Token);  										break;  									}  									case "get10":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get' 10)' go.Token);  										break;  									}  									case "set":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Set)' go.Token);  										break;  									}  									case "watch":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Watch)' go.Token);  										break;  									}  								}    								break;  							}    							case "msg":  							{  								switch(prm.ToLowerInvariant())  								{  									case "producer":  									{ // Queue Producer  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Producer' TimeSpan.FromMilliseconds(50)' TimeSpan.FromMilliseconds(200))' go.Token);  										break;  									}  									case "worker":  									{ // Queue Worker  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Worker' TimeSpan.FromMilliseconds(10)' TimeSpan.FromMilliseconds(10))' go.Token);  										break;  									}  									case "clear":  									{ // Queue Clear  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Clear' TimeSpan.Zero' TimeSpan.Zero)' go.Token);  										break;  									}  									case "status":  									{ // Queue Status  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Status' TimeSpan.FromSeconds(2)' TimeSpan.FromSeconds(10))' go.Token);  										break;  									}  								}  								break;  							}    							case "leak":  							{ // LeastTest  								switch(prm.ToLowerInvariant())  								{  									case "fast": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(0))' go.Token); break;  									case "slow": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(30))' go.Token); break;  									default: RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(1))' go.Token); break;  								}							  								break;  							}    							case "sampling":  							{ // SamplingTest  								RunAsyncTest(new SamplerTest(0.1)' go.Token);  								break;  							}    							case "q":  							case "x":  							case "quit":  							case "exit":  							{  								stop = true;  								break;  							}    							case "gc":  							{  								long before = GC.GetTotalMemory(false);  								Console.Write("Collecting garbage...");  								GC.Collect();  								GC.WaitForPendingFinalizers();  								GC.Collect();  								Console.WriteLine(" Done");  								long after = GC.GetTotalMemory(false);  								Console.WriteLine("- before = " + before.ToString("N0"));  								Console.WriteLine("- after  = " + after.ToString("N0"));  								Console.WriteLine("- delta  = " + (before - after).ToString("N0"));  								break;  							}    							case "mem":  							{  								Console.WriteLine("Memory usage:");  								Console.WriteLine("- Managed Mem  : " + GC.GetTotalMemory(false).ToString("N0"));  #if !NETCOREAPP  								Console.WriteLine("- Working Set  : " + PerfCounters.WorkingSet.NextValue().ToString("N0") + " (peak " + PerfCounters.WorkingSetPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Virtual Bytes: " + PerfCounters.VirtualBytes.NextValue().ToString("N0") + " (peak " + PerfCounters.VirtualBytesPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Private Bytes: " + PerfCounters.PrivateBytes.NextValue().ToString("N0"));  								Console.WriteLine("- BytesInAlHeap: " + PerfCounters.ClrBytesInAllHeaps.NextValue().ToString("N0"));  #endif  								break;  							}    							default:  							{  								Console.WriteLine(string.Format("Unknown command : '{0}'"' trimmedCommand));  								break;  							}  						}
Magic Number,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,The following statement contains a magic number: switch (trimmedCommand)  						{  							case "":  							{  								continue;  							}  							case "1":  							{ // Class Scheduling    								RunAsyncTest(new ClassScheduling()' go.Token);  								break;  							}    							case "log":  							{  								switch(prm.ToLowerInvariant())  								{  									case "on":  									{  										LogEnabled = true;  										Console.WriteLine("# Logging enabled");  										break;  									}  									case "off":  									{  										LogEnabled = false;  										Console.WriteLine("# Logging disabled");  										break;  									}  									default:  									{  										Console.WriteLine("# Logging is {0}"' LogEnabled ? "ON" : "OFF");  										break;  									}  								}  								break;  							}    							case "bench":  							{ // Benchs    								switch(prm.ToLowerInvariant())  								{  									case "read":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.GetReadVersion)' go.Token);  										break;  									}  									case "get":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get)' go.Token);  										break;  									}  									case "get10":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get' 10)' go.Token);  										break;  									}  									case "set":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Set)' go.Token);  										break;  									}  									case "watch":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Watch)' go.Token);  										break;  									}  								}    								break;  							}    							case "msg":  							{  								switch(prm.ToLowerInvariant())  								{  									case "producer":  									{ // Queue Producer  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Producer' TimeSpan.FromMilliseconds(50)' TimeSpan.FromMilliseconds(200))' go.Token);  										break;  									}  									case "worker":  									{ // Queue Worker  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Worker' TimeSpan.FromMilliseconds(10)' TimeSpan.FromMilliseconds(10))' go.Token);  										break;  									}  									case "clear":  									{ // Queue Clear  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Clear' TimeSpan.Zero' TimeSpan.Zero)' go.Token);  										break;  									}  									case "status":  									{ // Queue Status  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Status' TimeSpan.FromSeconds(2)' TimeSpan.FromSeconds(10))' go.Token);  										break;  									}  								}  								break;  							}    							case "leak":  							{ // LeastTest  								switch(prm.ToLowerInvariant())  								{  									case "fast": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(0))' go.Token); break;  									case "slow": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(30))' go.Token); break;  									default: RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(1))' go.Token); break;  								}							  								break;  							}    							case "sampling":  							{ // SamplingTest  								RunAsyncTest(new SamplerTest(0.1)' go.Token);  								break;  							}    							case "q":  							case "x":  							case "quit":  							case "exit":  							{  								stop = true;  								break;  							}    							case "gc":  							{  								long before = GC.GetTotalMemory(false);  								Console.Write("Collecting garbage...");  								GC.Collect();  								GC.WaitForPendingFinalizers();  								GC.Collect();  								Console.WriteLine(" Done");  								long after = GC.GetTotalMemory(false);  								Console.WriteLine("- before = " + before.ToString("N0"));  								Console.WriteLine("- after  = " + after.ToString("N0"));  								Console.WriteLine("- delta  = " + (before - after).ToString("N0"));  								break;  							}    							case "mem":  							{  								Console.WriteLine("Memory usage:");  								Console.WriteLine("- Managed Mem  : " + GC.GetTotalMemory(false).ToString("N0"));  #if !NETCOREAPP  								Console.WriteLine("- Working Set  : " + PerfCounters.WorkingSet.NextValue().ToString("N0") + " (peak " + PerfCounters.WorkingSetPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Virtual Bytes: " + PerfCounters.VirtualBytes.NextValue().ToString("N0") + " (peak " + PerfCounters.VirtualBytesPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Private Bytes: " + PerfCounters.PrivateBytes.NextValue().ToString("N0"));  								Console.WriteLine("- BytesInAlHeap: " + PerfCounters.ClrBytesInAllHeaps.NextValue().ToString("N0"));  #endif  								break;  							}    							default:  							{  								Console.WriteLine(string.Format("Unknown command : '{0}'"' trimmedCommand));  								break;  							}  						}
Magic Number,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,The following statement contains a magic number: switch (trimmedCommand)  						{  							case "":  							{  								continue;  							}  							case "1":  							{ // Class Scheduling    								RunAsyncTest(new ClassScheduling()' go.Token);  								break;  							}    							case "log":  							{  								switch(prm.ToLowerInvariant())  								{  									case "on":  									{  										LogEnabled = true;  										Console.WriteLine("# Logging enabled");  										break;  									}  									case "off":  									{  										LogEnabled = false;  										Console.WriteLine("# Logging disabled");  										break;  									}  									default:  									{  										Console.WriteLine("# Logging is {0}"' LogEnabled ? "ON" : "OFF");  										break;  									}  								}  								break;  							}    							case "bench":  							{ // Benchs    								switch(prm.ToLowerInvariant())  								{  									case "read":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.GetReadVersion)' go.Token);  										break;  									}  									case "get":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get)' go.Token);  										break;  									}  									case "get10":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get' 10)' go.Token);  										break;  									}  									case "set":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Set)' go.Token);  										break;  									}  									case "watch":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Watch)' go.Token);  										break;  									}  								}    								break;  							}    							case "msg":  							{  								switch(prm.ToLowerInvariant())  								{  									case "producer":  									{ // Queue Producer  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Producer' TimeSpan.FromMilliseconds(50)' TimeSpan.FromMilliseconds(200))' go.Token);  										break;  									}  									case "worker":  									{ // Queue Worker  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Worker' TimeSpan.FromMilliseconds(10)' TimeSpan.FromMilliseconds(10))' go.Token);  										break;  									}  									case "clear":  									{ // Queue Clear  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Clear' TimeSpan.Zero' TimeSpan.Zero)' go.Token);  										break;  									}  									case "status":  									{ // Queue Status  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Status' TimeSpan.FromSeconds(2)' TimeSpan.FromSeconds(10))' go.Token);  										break;  									}  								}  								break;  							}    							case "leak":  							{ // LeastTest  								switch(prm.ToLowerInvariant())  								{  									case "fast": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(0))' go.Token); break;  									case "slow": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(30))' go.Token); break;  									default: RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(1))' go.Token); break;  								}							  								break;  							}    							case "sampling":  							{ // SamplingTest  								RunAsyncTest(new SamplerTest(0.1)' go.Token);  								break;  							}    							case "q":  							case "x":  							case "quit":  							case "exit":  							{  								stop = true;  								break;  							}    							case "gc":  							{  								long before = GC.GetTotalMemory(false);  								Console.Write("Collecting garbage...");  								GC.Collect();  								GC.WaitForPendingFinalizers();  								GC.Collect();  								Console.WriteLine(" Done");  								long after = GC.GetTotalMemory(false);  								Console.WriteLine("- before = " + before.ToString("N0"));  								Console.WriteLine("- after  = " + after.ToString("N0"));  								Console.WriteLine("- delta  = " + (before - after).ToString("N0"));  								break;  							}    							case "mem":  							{  								Console.WriteLine("Memory usage:");  								Console.WriteLine("- Managed Mem  : " + GC.GetTotalMemory(false).ToString("N0"));  #if !NETCOREAPP  								Console.WriteLine("- Working Set  : " + PerfCounters.WorkingSet.NextValue().ToString("N0") + " (peak " + PerfCounters.WorkingSetPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Virtual Bytes: " + PerfCounters.VirtualBytes.NextValue().ToString("N0") + " (peak " + PerfCounters.VirtualBytesPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Private Bytes: " + PerfCounters.PrivateBytes.NextValue().ToString("N0"));  								Console.WriteLine("- BytesInAlHeap: " + PerfCounters.ClrBytesInAllHeaps.NextValue().ToString("N0"));  #endif  								break;  							}    							default:  							{  								Console.WriteLine(string.Format("Unknown command : '{0}'"' trimmedCommand));  								break;  							}  						}
Magic Number,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,The following statement contains a magic number: switch (trimmedCommand)  						{  							case "":  							{  								continue;  							}  							case "1":  							{ // Class Scheduling    								RunAsyncTest(new ClassScheduling()' go.Token);  								break;  							}    							case "log":  							{  								switch(prm.ToLowerInvariant())  								{  									case "on":  									{  										LogEnabled = true;  										Console.WriteLine("# Logging enabled");  										break;  									}  									case "off":  									{  										LogEnabled = false;  										Console.WriteLine("# Logging disabled");  										break;  									}  									default:  									{  										Console.WriteLine("# Logging is {0}"' LogEnabled ? "ON" : "OFF");  										break;  									}  								}  								break;  							}    							case "bench":  							{ // Benchs    								switch(prm.ToLowerInvariant())  								{  									case "read":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.GetReadVersion)' go.Token);  										break;  									}  									case "get":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get)' go.Token);  										break;  									}  									case "get10":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get' 10)' go.Token);  										break;  									}  									case "set":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Set)' go.Token);  										break;  									}  									case "watch":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Watch)' go.Token);  										break;  									}  								}    								break;  							}    							case "msg":  							{  								switch(prm.ToLowerInvariant())  								{  									case "producer":  									{ // Queue Producer  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Producer' TimeSpan.FromMilliseconds(50)' TimeSpan.FromMilliseconds(200))' go.Token);  										break;  									}  									case "worker":  									{ // Queue Worker  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Worker' TimeSpan.FromMilliseconds(10)' TimeSpan.FromMilliseconds(10))' go.Token);  										break;  									}  									case "clear":  									{ // Queue Clear  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Clear' TimeSpan.Zero' TimeSpan.Zero)' go.Token);  										break;  									}  									case "status":  									{ // Queue Status  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Status' TimeSpan.FromSeconds(2)' TimeSpan.FromSeconds(10))' go.Token);  										break;  									}  								}  								break;  							}    							case "leak":  							{ // LeastTest  								switch(prm.ToLowerInvariant())  								{  									case "fast": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(0))' go.Token); break;  									case "slow": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(30))' go.Token); break;  									default: RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(1))' go.Token); break;  								}							  								break;  							}    							case "sampling":  							{ // SamplingTest  								RunAsyncTest(new SamplerTest(0.1)' go.Token);  								break;  							}    							case "q":  							case "x":  							case "quit":  							case "exit":  							{  								stop = true;  								break;  							}    							case "gc":  							{  								long before = GC.GetTotalMemory(false);  								Console.Write("Collecting garbage...");  								GC.Collect();  								GC.WaitForPendingFinalizers();  								GC.Collect();  								Console.WriteLine(" Done");  								long after = GC.GetTotalMemory(false);  								Console.WriteLine("- before = " + before.ToString("N0"));  								Console.WriteLine("- after  = " + after.ToString("N0"));  								Console.WriteLine("- delta  = " + (before - after).ToString("N0"));  								break;  							}    							case "mem":  							{  								Console.WriteLine("Memory usage:");  								Console.WriteLine("- Managed Mem  : " + GC.GetTotalMemory(false).ToString("N0"));  #if !NETCOREAPP  								Console.WriteLine("- Working Set  : " + PerfCounters.WorkingSet.NextValue().ToString("N0") + " (peak " + PerfCounters.WorkingSetPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Virtual Bytes: " + PerfCounters.VirtualBytes.NextValue().ToString("N0") + " (peak " + PerfCounters.VirtualBytesPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Private Bytes: " + PerfCounters.PrivateBytes.NextValue().ToString("N0"));  								Console.WriteLine("- BytesInAlHeap: " + PerfCounters.ClrBytesInAllHeaps.NextValue().ToString("N0"));  #endif  								break;  							}    							default:  							{  								Console.WriteLine(string.Format("Unknown command : '{0}'"' trimmedCommand));  								break;  							}  						}
Magic Number,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,The following statement contains a magic number: switch (trimmedCommand)  						{  							case "":  							{  								continue;  							}  							case "1":  							{ // Class Scheduling    								RunAsyncTest(new ClassScheduling()' go.Token);  								break;  							}    							case "log":  							{  								switch(prm.ToLowerInvariant())  								{  									case "on":  									{  										LogEnabled = true;  										Console.WriteLine("# Logging enabled");  										break;  									}  									case "off":  									{  										LogEnabled = false;  										Console.WriteLine("# Logging disabled");  										break;  									}  									default:  									{  										Console.WriteLine("# Logging is {0}"' LogEnabled ? "ON" : "OFF");  										break;  									}  								}  								break;  							}    							case "bench":  							{ // Benchs    								switch(prm.ToLowerInvariant())  								{  									case "read":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.GetReadVersion)' go.Token);  										break;  									}  									case "get":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get)' go.Token);  										break;  									}  									case "get10":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get' 10)' go.Token);  										break;  									}  									case "set":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Set)' go.Token);  										break;  									}  									case "watch":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Watch)' go.Token);  										break;  									}  								}    								break;  							}    							case "msg":  							{  								switch(prm.ToLowerInvariant())  								{  									case "producer":  									{ // Queue Producer  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Producer' TimeSpan.FromMilliseconds(50)' TimeSpan.FromMilliseconds(200))' go.Token);  										break;  									}  									case "worker":  									{ // Queue Worker  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Worker' TimeSpan.FromMilliseconds(10)' TimeSpan.FromMilliseconds(10))' go.Token);  										break;  									}  									case "clear":  									{ // Queue Clear  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Clear' TimeSpan.Zero' TimeSpan.Zero)' go.Token);  										break;  									}  									case "status":  									{ // Queue Status  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Status' TimeSpan.FromSeconds(2)' TimeSpan.FromSeconds(10))' go.Token);  										break;  									}  								}  								break;  							}    							case "leak":  							{ // LeastTest  								switch(prm.ToLowerInvariant())  								{  									case "fast": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(0))' go.Token); break;  									case "slow": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(30))' go.Token); break;  									default: RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(1))' go.Token); break;  								}							  								break;  							}    							case "sampling":  							{ // SamplingTest  								RunAsyncTest(new SamplerTest(0.1)' go.Token);  								break;  							}    							case "q":  							case "x":  							case "quit":  							case "exit":  							{  								stop = true;  								break;  							}    							case "gc":  							{  								long before = GC.GetTotalMemory(false);  								Console.Write("Collecting garbage...");  								GC.Collect();  								GC.WaitForPendingFinalizers();  								GC.Collect();  								Console.WriteLine(" Done");  								long after = GC.GetTotalMemory(false);  								Console.WriteLine("- before = " + before.ToString("N0"));  								Console.WriteLine("- after  = " + after.ToString("N0"));  								Console.WriteLine("- delta  = " + (before - after).ToString("N0"));  								break;  							}    							case "mem":  							{  								Console.WriteLine("Memory usage:");  								Console.WriteLine("- Managed Mem  : " + GC.GetTotalMemory(false).ToString("N0"));  #if !NETCOREAPP  								Console.WriteLine("- Working Set  : " + PerfCounters.WorkingSet.NextValue().ToString("N0") + " (peak " + PerfCounters.WorkingSetPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Virtual Bytes: " + PerfCounters.VirtualBytes.NextValue().ToString("N0") + " (peak " + PerfCounters.VirtualBytesPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Private Bytes: " + PerfCounters.PrivateBytes.NextValue().ToString("N0"));  								Console.WriteLine("- BytesInAlHeap: " + PerfCounters.ClrBytesInAllHeaps.NextValue().ToString("N0"));  #endif  								break;  							}    							default:  							{  								Console.WriteLine(string.Format("Unknown command : '{0}'"' trimmedCommand));  								break;  							}  						}
Magic Number,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,The following statement contains a magic number: switch (trimmedCommand)  						{  							case "":  							{  								continue;  							}  							case "1":  							{ // Class Scheduling    								RunAsyncTest(new ClassScheduling()' go.Token);  								break;  							}    							case "log":  							{  								switch(prm.ToLowerInvariant())  								{  									case "on":  									{  										LogEnabled = true;  										Console.WriteLine("# Logging enabled");  										break;  									}  									case "off":  									{  										LogEnabled = false;  										Console.WriteLine("# Logging disabled");  										break;  									}  									default:  									{  										Console.WriteLine("# Logging is {0}"' LogEnabled ? "ON" : "OFF");  										break;  									}  								}  								break;  							}    							case "bench":  							{ // Benchs    								switch(prm.ToLowerInvariant())  								{  									case "read":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.GetReadVersion)' go.Token);  										break;  									}  									case "get":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get)' go.Token);  										break;  									}  									case "get10":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get' 10)' go.Token);  										break;  									}  									case "set":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Set)' go.Token);  										break;  									}  									case "watch":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Watch)' go.Token);  										break;  									}  								}    								break;  							}    							case "msg":  							{  								switch(prm.ToLowerInvariant())  								{  									case "producer":  									{ // Queue Producer  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Producer' TimeSpan.FromMilliseconds(50)' TimeSpan.FromMilliseconds(200))' go.Token);  										break;  									}  									case "worker":  									{ // Queue Worker  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Worker' TimeSpan.FromMilliseconds(10)' TimeSpan.FromMilliseconds(10))' go.Token);  										break;  									}  									case "clear":  									{ // Queue Clear  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Clear' TimeSpan.Zero' TimeSpan.Zero)' go.Token);  										break;  									}  									case "status":  									{ // Queue Status  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Status' TimeSpan.FromSeconds(2)' TimeSpan.FromSeconds(10))' go.Token);  										break;  									}  								}  								break;  							}    							case "leak":  							{ // LeastTest  								switch(prm.ToLowerInvariant())  								{  									case "fast": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(0))' go.Token); break;  									case "slow": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(30))' go.Token); break;  									default: RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(1))' go.Token); break;  								}							  								break;  							}    							case "sampling":  							{ // SamplingTest  								RunAsyncTest(new SamplerTest(0.1)' go.Token);  								break;  							}    							case "q":  							case "x":  							case "quit":  							case "exit":  							{  								stop = true;  								break;  							}    							case "gc":  							{  								long before = GC.GetTotalMemory(false);  								Console.Write("Collecting garbage...");  								GC.Collect();  								GC.WaitForPendingFinalizers();  								GC.Collect();  								Console.WriteLine(" Done");  								long after = GC.GetTotalMemory(false);  								Console.WriteLine("- before = " + before.ToString("N0"));  								Console.WriteLine("- after  = " + after.ToString("N0"));  								Console.WriteLine("- delta  = " + (before - after).ToString("N0"));  								break;  							}    							case "mem":  							{  								Console.WriteLine("Memory usage:");  								Console.WriteLine("- Managed Mem  : " + GC.GetTotalMemory(false).ToString("N0"));  #if !NETCOREAPP  								Console.WriteLine("- Working Set  : " + PerfCounters.WorkingSet.NextValue().ToString("N0") + " (peak " + PerfCounters.WorkingSetPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Virtual Bytes: " + PerfCounters.VirtualBytes.NextValue().ToString("N0") + " (peak " + PerfCounters.VirtualBytesPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Private Bytes: " + PerfCounters.PrivateBytes.NextValue().ToString("N0"));  								Console.WriteLine("- BytesInAlHeap: " + PerfCounters.ClrBytesInAllHeaps.NextValue().ToString("N0"));  #endif  								break;  							}    							default:  							{  								Console.WriteLine(string.Format("Unknown command : '{0}'"' trimmedCommand));  								break;  							}  						}
Magic Number,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,The following statement contains a magic number: switch (trimmedCommand)  						{  							case "":  							{  								continue;  							}  							case "1":  							{ // Class Scheduling    								RunAsyncTest(new ClassScheduling()' go.Token);  								break;  							}    							case "log":  							{  								switch(prm.ToLowerInvariant())  								{  									case "on":  									{  										LogEnabled = true;  										Console.WriteLine("# Logging enabled");  										break;  									}  									case "off":  									{  										LogEnabled = false;  										Console.WriteLine("# Logging disabled");  										break;  									}  									default:  									{  										Console.WriteLine("# Logging is {0}"' LogEnabled ? "ON" : "OFF");  										break;  									}  								}  								break;  							}    							case "bench":  							{ // Benchs    								switch(prm.ToLowerInvariant())  								{  									case "read":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.GetReadVersion)' go.Token);  										break;  									}  									case "get":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get)' go.Token);  										break;  									}  									case "get10":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get' 10)' go.Token);  										break;  									}  									case "set":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Set)' go.Token);  										break;  									}  									case "watch":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Watch)' go.Token);  										break;  									}  								}    								break;  							}    							case "msg":  							{  								switch(prm.ToLowerInvariant())  								{  									case "producer":  									{ // Queue Producer  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Producer' TimeSpan.FromMilliseconds(50)' TimeSpan.FromMilliseconds(200))' go.Token);  										break;  									}  									case "worker":  									{ // Queue Worker  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Worker' TimeSpan.FromMilliseconds(10)' TimeSpan.FromMilliseconds(10))' go.Token);  										break;  									}  									case "clear":  									{ // Queue Clear  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Clear' TimeSpan.Zero' TimeSpan.Zero)' go.Token);  										break;  									}  									case "status":  									{ // Queue Status  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Status' TimeSpan.FromSeconds(2)' TimeSpan.FromSeconds(10))' go.Token);  										break;  									}  								}  								break;  							}    							case "leak":  							{ // LeastTest  								switch(prm.ToLowerInvariant())  								{  									case "fast": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(0))' go.Token); break;  									case "slow": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(30))' go.Token); break;  									default: RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(1))' go.Token); break;  								}							  								break;  							}    							case "sampling":  							{ // SamplingTest  								RunAsyncTest(new SamplerTest(0.1)' go.Token);  								break;  							}    							case "q":  							case "x":  							case "quit":  							case "exit":  							{  								stop = true;  								break;  							}    							case "gc":  							{  								long before = GC.GetTotalMemory(false);  								Console.Write("Collecting garbage...");  								GC.Collect();  								GC.WaitForPendingFinalizers();  								GC.Collect();  								Console.WriteLine(" Done");  								long after = GC.GetTotalMemory(false);  								Console.WriteLine("- before = " + before.ToString("N0"));  								Console.WriteLine("- after  = " + after.ToString("N0"));  								Console.WriteLine("- delta  = " + (before - after).ToString("N0"));  								break;  							}    							case "mem":  							{  								Console.WriteLine("Memory usage:");  								Console.WriteLine("- Managed Mem  : " + GC.GetTotalMemory(false).ToString("N0"));  #if !NETCOREAPP  								Console.WriteLine("- Working Set  : " + PerfCounters.WorkingSet.NextValue().ToString("N0") + " (peak " + PerfCounters.WorkingSetPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Virtual Bytes: " + PerfCounters.VirtualBytes.NextValue().ToString("N0") + " (peak " + PerfCounters.VirtualBytesPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Private Bytes: " + PerfCounters.PrivateBytes.NextValue().ToString("N0"));  								Console.WriteLine("- BytesInAlHeap: " + PerfCounters.ClrBytesInAllHeaps.NextValue().ToString("N0"));  #endif  								break;  							}    							default:  							{  								Console.WriteLine(string.Format("Unknown command : '{0}'"' trimmedCommand));  								break;  							}  						}
Magic Number,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,The following statement contains a magic number: switch (trimmedCommand)  						{  							case "":  							{  								continue;  							}  							case "1":  							{ // Class Scheduling    								RunAsyncTest(new ClassScheduling()' go.Token);  								break;  							}    							case "log":  							{  								switch(prm.ToLowerInvariant())  								{  									case "on":  									{  										LogEnabled = true;  										Console.WriteLine("# Logging enabled");  										break;  									}  									case "off":  									{  										LogEnabled = false;  										Console.WriteLine("# Logging disabled");  										break;  									}  									default:  									{  										Console.WriteLine("# Logging is {0}"' LogEnabled ? "ON" : "OFF");  										break;  									}  								}  								break;  							}    							case "bench":  							{ // Benchs    								switch(prm.ToLowerInvariant())  								{  									case "read":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.GetReadVersion)' go.Token);  										break;  									}  									case "get":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get)' go.Token);  										break;  									}  									case "get10":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get' 10)' go.Token);  										break;  									}  									case "set":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Set)' go.Token);  										break;  									}  									case "watch":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Watch)' go.Token);  										break;  									}  								}    								break;  							}    							case "msg":  							{  								switch(prm.ToLowerInvariant())  								{  									case "producer":  									{ // Queue Producer  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Producer' TimeSpan.FromMilliseconds(50)' TimeSpan.FromMilliseconds(200))' go.Token);  										break;  									}  									case "worker":  									{ // Queue Worker  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Worker' TimeSpan.FromMilliseconds(10)' TimeSpan.FromMilliseconds(10))' go.Token);  										break;  									}  									case "clear":  									{ // Queue Clear  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Clear' TimeSpan.Zero' TimeSpan.Zero)' go.Token);  										break;  									}  									case "status":  									{ // Queue Status  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Status' TimeSpan.FromSeconds(2)' TimeSpan.FromSeconds(10))' go.Token);  										break;  									}  								}  								break;  							}    							case "leak":  							{ // LeastTest  								switch(prm.ToLowerInvariant())  								{  									case "fast": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(0))' go.Token); break;  									case "slow": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(30))' go.Token); break;  									default: RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(1))' go.Token); break;  								}							  								break;  							}    							case "sampling":  							{ // SamplingTest  								RunAsyncTest(new SamplerTest(0.1)' go.Token);  								break;  							}    							case "q":  							case "x":  							case "quit":  							case "exit":  							{  								stop = true;  								break;  							}    							case "gc":  							{  								long before = GC.GetTotalMemory(false);  								Console.Write("Collecting garbage...");  								GC.Collect();  								GC.WaitForPendingFinalizers();  								GC.Collect();  								Console.WriteLine(" Done");  								long after = GC.GetTotalMemory(false);  								Console.WriteLine("- before = " + before.ToString("N0"));  								Console.WriteLine("- after  = " + after.ToString("N0"));  								Console.WriteLine("- delta  = " + (before - after).ToString("N0"));  								break;  							}    							case "mem":  							{  								Console.WriteLine("Memory usage:");  								Console.WriteLine("- Managed Mem  : " + GC.GetTotalMemory(false).ToString("N0"));  #if !NETCOREAPP  								Console.WriteLine("- Working Set  : " + PerfCounters.WorkingSet.NextValue().ToString("N0") + " (peak " + PerfCounters.WorkingSetPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Virtual Bytes: " + PerfCounters.VirtualBytes.NextValue().ToString("N0") + " (peak " + PerfCounters.VirtualBytesPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Private Bytes: " + PerfCounters.PrivateBytes.NextValue().ToString("N0"));  								Console.WriteLine("- BytesInAlHeap: " + PerfCounters.ClrBytesInAllHeaps.NextValue().ToString("N0"));  #endif  								break;  							}    							default:  							{  								Console.WriteLine(string.Format("Unknown command : '{0}'"' trimmedCommand));  								break;  							}  						}
Magic Number,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,The following statement contains a magic number: switch (trimmedCommand)  						{  							case "":  							{  								continue;  							}  							case "1":  							{ // Class Scheduling    								RunAsyncTest(new ClassScheduling()' go.Token);  								break;  							}    							case "log":  							{  								switch(prm.ToLowerInvariant())  								{  									case "on":  									{  										LogEnabled = true;  										Console.WriteLine("# Logging enabled");  										break;  									}  									case "off":  									{  										LogEnabled = false;  										Console.WriteLine("# Logging disabled");  										break;  									}  									default:  									{  										Console.WriteLine("# Logging is {0}"' LogEnabled ? "ON" : "OFF");  										break;  									}  								}  								break;  							}    							case "bench":  							{ // Benchs    								switch(prm.ToLowerInvariant())  								{  									case "read":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.GetReadVersion)' go.Token);  										break;  									}  									case "get":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get)' go.Token);  										break;  									}  									case "get10":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get' 10)' go.Token);  										break;  									}  									case "set":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Set)' go.Token);  										break;  									}  									case "watch":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Watch)' go.Token);  										break;  									}  								}    								break;  							}    							case "msg":  							{  								switch(prm.ToLowerInvariant())  								{  									case "producer":  									{ // Queue Producer  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Producer' TimeSpan.FromMilliseconds(50)' TimeSpan.FromMilliseconds(200))' go.Token);  										break;  									}  									case "worker":  									{ // Queue Worker  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Worker' TimeSpan.FromMilliseconds(10)' TimeSpan.FromMilliseconds(10))' go.Token);  										break;  									}  									case "clear":  									{ // Queue Clear  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Clear' TimeSpan.Zero' TimeSpan.Zero)' go.Token);  										break;  									}  									case "status":  									{ // Queue Status  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Status' TimeSpan.FromSeconds(2)' TimeSpan.FromSeconds(10))' go.Token);  										break;  									}  								}  								break;  							}    							case "leak":  							{ // LeastTest  								switch(prm.ToLowerInvariant())  								{  									case "fast": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(0))' go.Token); break;  									case "slow": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(30))' go.Token); break;  									default: RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(1))' go.Token); break;  								}							  								break;  							}    							case "sampling":  							{ // SamplingTest  								RunAsyncTest(new SamplerTest(0.1)' go.Token);  								break;  							}    							case "q":  							case "x":  							case "quit":  							case "exit":  							{  								stop = true;  								break;  							}    							case "gc":  							{  								long before = GC.GetTotalMemory(false);  								Console.Write("Collecting garbage...");  								GC.Collect();  								GC.WaitForPendingFinalizers();  								GC.Collect();  								Console.WriteLine(" Done");  								long after = GC.GetTotalMemory(false);  								Console.WriteLine("- before = " + before.ToString("N0"));  								Console.WriteLine("- after  = " + after.ToString("N0"));  								Console.WriteLine("- delta  = " + (before - after).ToString("N0"));  								break;  							}    							case "mem":  							{  								Console.WriteLine("Memory usage:");  								Console.WriteLine("- Managed Mem  : " + GC.GetTotalMemory(false).ToString("N0"));  #if !NETCOREAPP  								Console.WriteLine("- Working Set  : " + PerfCounters.WorkingSet.NextValue().ToString("N0") + " (peak " + PerfCounters.WorkingSetPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Virtual Bytes: " + PerfCounters.VirtualBytes.NextValue().ToString("N0") + " (peak " + PerfCounters.VirtualBytesPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Private Bytes: " + PerfCounters.PrivateBytes.NextValue().ToString("N0"));  								Console.WriteLine("- BytesInAlHeap: " + PerfCounters.ClrBytesInAllHeaps.NextValue().ToString("N0"));  #endif  								break;  							}    							default:  							{  								Console.WriteLine(string.Format("Unknown command : '{0}'"' trimmedCommand));  								break;  							}  						}
Magic Number,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,The following statement contains a magic number: switch (trimmedCommand)  						{  							case "":  							{  								continue;  							}  							case "1":  							{ // Class Scheduling    								RunAsyncTest(new ClassScheduling()' go.Token);  								break;  							}    							case "log":  							{  								switch(prm.ToLowerInvariant())  								{  									case "on":  									{  										LogEnabled = true;  										Console.WriteLine("# Logging enabled");  										break;  									}  									case "off":  									{  										LogEnabled = false;  										Console.WriteLine("# Logging disabled");  										break;  									}  									default:  									{  										Console.WriteLine("# Logging is {0}"' LogEnabled ? "ON" : "OFF");  										break;  									}  								}  								break;  							}    							case "bench":  							{ // Benchs    								switch(prm.ToLowerInvariant())  								{  									case "read":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.GetReadVersion)' go.Token);  										break;  									}  									case "get":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get)' go.Token);  										break;  									}  									case "get10":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get' 10)' go.Token);  										break;  									}  									case "set":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Set)' go.Token);  										break;  									}  									case "watch":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Watch)' go.Token);  										break;  									}  								}    								break;  							}    							case "msg":  							{  								switch(prm.ToLowerInvariant())  								{  									case "producer":  									{ // Queue Producer  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Producer' TimeSpan.FromMilliseconds(50)' TimeSpan.FromMilliseconds(200))' go.Token);  										break;  									}  									case "worker":  									{ // Queue Worker  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Worker' TimeSpan.FromMilliseconds(10)' TimeSpan.FromMilliseconds(10))' go.Token);  										break;  									}  									case "clear":  									{ // Queue Clear  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Clear' TimeSpan.Zero' TimeSpan.Zero)' go.Token);  										break;  									}  									case "status":  									{ // Queue Status  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Status' TimeSpan.FromSeconds(2)' TimeSpan.FromSeconds(10))' go.Token);  										break;  									}  								}  								break;  							}    							case "leak":  							{ // LeastTest  								switch(prm.ToLowerInvariant())  								{  									case "fast": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(0))' go.Token); break;  									case "slow": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(30))' go.Token); break;  									default: RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(1))' go.Token); break;  								}							  								break;  							}    							case "sampling":  							{ // SamplingTest  								RunAsyncTest(new SamplerTest(0.1)' go.Token);  								break;  							}    							case "q":  							case "x":  							case "quit":  							case "exit":  							{  								stop = true;  								break;  							}    							case "gc":  							{  								long before = GC.GetTotalMemory(false);  								Console.Write("Collecting garbage...");  								GC.Collect();  								GC.WaitForPendingFinalizers();  								GC.Collect();  								Console.WriteLine(" Done");  								long after = GC.GetTotalMemory(false);  								Console.WriteLine("- before = " + before.ToString("N0"));  								Console.WriteLine("- after  = " + after.ToString("N0"));  								Console.WriteLine("- delta  = " + (before - after).ToString("N0"));  								break;  							}    							case "mem":  							{  								Console.WriteLine("Memory usage:");  								Console.WriteLine("- Managed Mem  : " + GC.GetTotalMemory(false).ToString("N0"));  #if !NETCOREAPP  								Console.WriteLine("- Working Set  : " + PerfCounters.WorkingSet.NextValue().ToString("N0") + " (peak " + PerfCounters.WorkingSetPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Virtual Bytes: " + PerfCounters.VirtualBytes.NextValue().ToString("N0") + " (peak " + PerfCounters.VirtualBytesPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Private Bytes: " + PerfCounters.PrivateBytes.NextValue().ToString("N0"));  								Console.WriteLine("- BytesInAlHeap: " + PerfCounters.ClrBytesInAllHeaps.NextValue().ToString("N0"));  #endif  								break;  							}    							default:  							{  								Console.WriteLine(string.Format("Unknown command : '{0}'"' trimmedCommand));  								break;  							}  						}
Magic Number,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,The following statement contains a magic number: switch (trimmedCommand)  						{  							case "":  							{  								continue;  							}  							case "1":  							{ // Class Scheduling    								RunAsyncTest(new ClassScheduling()' go.Token);  								break;  							}    							case "log":  							{  								switch(prm.ToLowerInvariant())  								{  									case "on":  									{  										LogEnabled = true;  										Console.WriteLine("# Logging enabled");  										break;  									}  									case "off":  									{  										LogEnabled = false;  										Console.WriteLine("# Logging disabled");  										break;  									}  									default:  									{  										Console.WriteLine("# Logging is {0}"' LogEnabled ? "ON" : "OFF");  										break;  									}  								}  								break;  							}    							case "bench":  							{ // Benchs    								switch(prm.ToLowerInvariant())  								{  									case "read":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.GetReadVersion)' go.Token);  										break;  									}  									case "get":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get)' go.Token);  										break;  									}  									case "get10":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get' 10)' go.Token);  										break;  									}  									case "set":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Set)' go.Token);  										break;  									}  									case "watch":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Watch)' go.Token);  										break;  									}  								}    								break;  							}    							case "msg":  							{  								switch(prm.ToLowerInvariant())  								{  									case "producer":  									{ // Queue Producer  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Producer' TimeSpan.FromMilliseconds(50)' TimeSpan.FromMilliseconds(200))' go.Token);  										break;  									}  									case "worker":  									{ // Queue Worker  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Worker' TimeSpan.FromMilliseconds(10)' TimeSpan.FromMilliseconds(10))' go.Token);  										break;  									}  									case "clear":  									{ // Queue Clear  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Clear' TimeSpan.Zero' TimeSpan.Zero)' go.Token);  										break;  									}  									case "status":  									{ // Queue Status  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Status' TimeSpan.FromSeconds(2)' TimeSpan.FromSeconds(10))' go.Token);  										break;  									}  								}  								break;  							}    							case "leak":  							{ // LeastTest  								switch(prm.ToLowerInvariant())  								{  									case "fast": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(0))' go.Token); break;  									case "slow": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(30))' go.Token); break;  									default: RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(1))' go.Token); break;  								}							  								break;  							}    							case "sampling":  							{ // SamplingTest  								RunAsyncTest(new SamplerTest(0.1)' go.Token);  								break;  							}    							case "q":  							case "x":  							case "quit":  							case "exit":  							{  								stop = true;  								break;  							}    							case "gc":  							{  								long before = GC.GetTotalMemory(false);  								Console.Write("Collecting garbage...");  								GC.Collect();  								GC.WaitForPendingFinalizers();  								GC.Collect();  								Console.WriteLine(" Done");  								long after = GC.GetTotalMemory(false);  								Console.WriteLine("- before = " + before.ToString("N0"));  								Console.WriteLine("- after  = " + after.ToString("N0"));  								Console.WriteLine("- delta  = " + (before - after).ToString("N0"));  								break;  							}    							case "mem":  							{  								Console.WriteLine("Memory usage:");  								Console.WriteLine("- Managed Mem  : " + GC.GetTotalMemory(false).ToString("N0"));  #if !NETCOREAPP  								Console.WriteLine("- Working Set  : " + PerfCounters.WorkingSet.NextValue().ToString("N0") + " (peak " + PerfCounters.WorkingSetPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Virtual Bytes: " + PerfCounters.VirtualBytes.NextValue().ToString("N0") + " (peak " + PerfCounters.VirtualBytesPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Private Bytes: " + PerfCounters.PrivateBytes.NextValue().ToString("N0"));  								Console.WriteLine("- BytesInAlHeap: " + PerfCounters.ClrBytesInAllHeaps.NextValue().ToString("N0"));  #endif  								break;  							}    							default:  							{  								Console.WriteLine(string.Format("Unknown command : '{0}'"' trimmedCommand));  								break;  							}  						}
Magic Number,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,The following statement contains a magic number: switch (trimmedCommand)  						{  							case "":  							{  								continue;  							}  							case "1":  							{ // Class Scheduling    								RunAsyncTest(new ClassScheduling()' go.Token);  								break;  							}    							case "log":  							{  								switch(prm.ToLowerInvariant())  								{  									case "on":  									{  										LogEnabled = true;  										Console.WriteLine("# Logging enabled");  										break;  									}  									case "off":  									{  										LogEnabled = false;  										Console.WriteLine("# Logging disabled");  										break;  									}  									default:  									{  										Console.WriteLine("# Logging is {0}"' LogEnabled ? "ON" : "OFF");  										break;  									}  								}  								break;  							}    							case "bench":  							{ // Benchs    								switch(prm.ToLowerInvariant())  								{  									case "read":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.GetReadVersion)' go.Token);  										break;  									}  									case "get":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get)' go.Token);  										break;  									}  									case "get10":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get' 10)' go.Token);  										break;  									}  									case "set":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Set)' go.Token);  										break;  									}  									case "watch":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Watch)' go.Token);  										break;  									}  								}    								break;  							}    							case "msg":  							{  								switch(prm.ToLowerInvariant())  								{  									case "producer":  									{ // Queue Producer  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Producer' TimeSpan.FromMilliseconds(50)' TimeSpan.FromMilliseconds(200))' go.Token);  										break;  									}  									case "worker":  									{ // Queue Worker  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Worker' TimeSpan.FromMilliseconds(10)' TimeSpan.FromMilliseconds(10))' go.Token);  										break;  									}  									case "clear":  									{ // Queue Clear  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Clear' TimeSpan.Zero' TimeSpan.Zero)' go.Token);  										break;  									}  									case "status":  									{ // Queue Status  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Status' TimeSpan.FromSeconds(2)' TimeSpan.FromSeconds(10))' go.Token);  										break;  									}  								}  								break;  							}    							case "leak":  							{ // LeastTest  								switch(prm.ToLowerInvariant())  								{  									case "fast": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(0))' go.Token); break;  									case "slow": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(30))' go.Token); break;  									default: RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(1))' go.Token); break;  								}							  								break;  							}    							case "sampling":  							{ // SamplingTest  								RunAsyncTest(new SamplerTest(0.1)' go.Token);  								break;  							}    							case "q":  							case "x":  							case "quit":  							case "exit":  							{  								stop = true;  								break;  							}    							case "gc":  							{  								long before = GC.GetTotalMemory(false);  								Console.Write("Collecting garbage...");  								GC.Collect();  								GC.WaitForPendingFinalizers();  								GC.Collect();  								Console.WriteLine(" Done");  								long after = GC.GetTotalMemory(false);  								Console.WriteLine("- before = " + before.ToString("N0"));  								Console.WriteLine("- after  = " + after.ToString("N0"));  								Console.WriteLine("- delta  = " + (before - after).ToString("N0"));  								break;  							}    							case "mem":  							{  								Console.WriteLine("Memory usage:");  								Console.WriteLine("- Managed Mem  : " + GC.GetTotalMemory(false).ToString("N0"));  #if !NETCOREAPP  								Console.WriteLine("- Working Set  : " + PerfCounters.WorkingSet.NextValue().ToString("N0") + " (peak " + PerfCounters.WorkingSetPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Virtual Bytes: " + PerfCounters.VirtualBytes.NextValue().ToString("N0") + " (peak " + PerfCounters.VirtualBytesPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Private Bytes: " + PerfCounters.PrivateBytes.NextValue().ToString("N0"));  								Console.WriteLine("- BytesInAlHeap: " + PerfCounters.ClrBytesInAllHeaps.NextValue().ToString("N0"));  #endif  								break;  							}    							default:  							{  								Console.WriteLine(string.Format("Unknown command : '{0}'"' trimmedCommand));  								break;  							}  						}
Magic Number,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,The following statement contains a magic number: switch (trimmedCommand)  						{  							case "":  							{  								continue;  							}  							case "1":  							{ // Class Scheduling    								RunAsyncTest(new ClassScheduling()' go.Token);  								break;  							}    							case "log":  							{  								switch(prm.ToLowerInvariant())  								{  									case "on":  									{  										LogEnabled = true;  										Console.WriteLine("# Logging enabled");  										break;  									}  									case "off":  									{  										LogEnabled = false;  										Console.WriteLine("# Logging disabled");  										break;  									}  									default:  									{  										Console.WriteLine("# Logging is {0}"' LogEnabled ? "ON" : "OFF");  										break;  									}  								}  								break;  							}    							case "bench":  							{ // Benchs    								switch(prm.ToLowerInvariant())  								{  									case "read":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.GetReadVersion)' go.Token);  										break;  									}  									case "get":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get)' go.Token);  										break;  									}  									case "get10":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get' 10)' go.Token);  										break;  									}  									case "set":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Set)' go.Token);  										break;  									}  									case "watch":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Watch)' go.Token);  										break;  									}  								}    								break;  							}    							case "msg":  							{  								switch(prm.ToLowerInvariant())  								{  									case "producer":  									{ // Queue Producer  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Producer' TimeSpan.FromMilliseconds(50)' TimeSpan.FromMilliseconds(200))' go.Token);  										break;  									}  									case "worker":  									{ // Queue Worker  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Worker' TimeSpan.FromMilliseconds(10)' TimeSpan.FromMilliseconds(10))' go.Token);  										break;  									}  									case "clear":  									{ // Queue Clear  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Clear' TimeSpan.Zero' TimeSpan.Zero)' go.Token);  										break;  									}  									case "status":  									{ // Queue Status  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Status' TimeSpan.FromSeconds(2)' TimeSpan.FromSeconds(10))' go.Token);  										break;  									}  								}  								break;  							}    							case "leak":  							{ // LeastTest  								switch(prm.ToLowerInvariant())  								{  									case "fast": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(0))' go.Token); break;  									case "slow": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(30))' go.Token); break;  									default: RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(1))' go.Token); break;  								}							  								break;  							}    							case "sampling":  							{ // SamplingTest  								RunAsyncTest(new SamplerTest(0.1)' go.Token);  								break;  							}    							case "q":  							case "x":  							case "quit":  							case "exit":  							{  								stop = true;  								break;  							}    							case "gc":  							{  								long before = GC.GetTotalMemory(false);  								Console.Write("Collecting garbage...");  								GC.Collect();  								GC.WaitForPendingFinalizers();  								GC.Collect();  								Console.WriteLine(" Done");  								long after = GC.GetTotalMemory(false);  								Console.WriteLine("- before = " + before.ToString("N0"));  								Console.WriteLine("- after  = " + after.ToString("N0"));  								Console.WriteLine("- delta  = " + (before - after).ToString("N0"));  								break;  							}    							case "mem":  							{  								Console.WriteLine("Memory usage:");  								Console.WriteLine("- Managed Mem  : " + GC.GetTotalMemory(false).ToString("N0"));  #if !NETCOREAPP  								Console.WriteLine("- Working Set  : " + PerfCounters.WorkingSet.NextValue().ToString("N0") + " (peak " + PerfCounters.WorkingSetPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Virtual Bytes: " + PerfCounters.VirtualBytes.NextValue().ToString("N0") + " (peak " + PerfCounters.VirtualBytesPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Private Bytes: " + PerfCounters.PrivateBytes.NextValue().ToString("N0"));  								Console.WriteLine("- BytesInAlHeap: " + PerfCounters.ClrBytesInAllHeaps.NextValue().ToString("N0"));  #endif  								break;  							}    							default:  							{  								Console.WriteLine(string.Format("Unknown command : '{0}'"' trimmedCommand));  								break;  							}  						}
Magic Number,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,The following statement contains a magic number: switch (trimmedCommand)  						{  							case "":  							{  								continue;  							}  							case "1":  							{ // Class Scheduling    								RunAsyncTest(new ClassScheduling()' go.Token);  								break;  							}    							case "log":  							{  								switch(prm.ToLowerInvariant())  								{  									case "on":  									{  										LogEnabled = true;  										Console.WriteLine("# Logging enabled");  										break;  									}  									case "off":  									{  										LogEnabled = false;  										Console.WriteLine("# Logging disabled");  										break;  									}  									default:  									{  										Console.WriteLine("# Logging is {0}"' LogEnabled ? "ON" : "OFF");  										break;  									}  								}  								break;  							}    							case "bench":  							{ // Benchs    								switch(prm.ToLowerInvariant())  								{  									case "read":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.GetReadVersion)' go.Token);  										break;  									}  									case "get":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get)' go.Token);  										break;  									}  									case "get10":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get' 10)' go.Token);  										break;  									}  									case "set":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Set)' go.Token);  										break;  									}  									case "watch":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Watch)' go.Token);  										break;  									}  								}    								break;  							}    							case "msg":  							{  								switch(prm.ToLowerInvariant())  								{  									case "producer":  									{ // Queue Producer  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Producer' TimeSpan.FromMilliseconds(50)' TimeSpan.FromMilliseconds(200))' go.Token);  										break;  									}  									case "worker":  									{ // Queue Worker  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Worker' TimeSpan.FromMilliseconds(10)' TimeSpan.FromMilliseconds(10))' go.Token);  										break;  									}  									case "clear":  									{ // Queue Clear  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Clear' TimeSpan.Zero' TimeSpan.Zero)' go.Token);  										break;  									}  									case "status":  									{ // Queue Status  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Status' TimeSpan.FromSeconds(2)' TimeSpan.FromSeconds(10))' go.Token);  										break;  									}  								}  								break;  							}    							case "leak":  							{ // LeastTest  								switch(prm.ToLowerInvariant())  								{  									case "fast": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(0))' go.Token); break;  									case "slow": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(30))' go.Token); break;  									default: RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(1))' go.Token); break;  								}							  								break;  							}    							case "sampling":  							{ // SamplingTest  								RunAsyncTest(new SamplerTest(0.1)' go.Token);  								break;  							}    							case "q":  							case "x":  							case "quit":  							case "exit":  							{  								stop = true;  								break;  							}    							case "gc":  							{  								long before = GC.GetTotalMemory(false);  								Console.Write("Collecting garbage...");  								GC.Collect();  								GC.WaitForPendingFinalizers();  								GC.Collect();  								Console.WriteLine(" Done");  								long after = GC.GetTotalMemory(false);  								Console.WriteLine("- before = " + before.ToString("N0"));  								Console.WriteLine("- after  = " + after.ToString("N0"));  								Console.WriteLine("- delta  = " + (before - after).ToString("N0"));  								break;  							}    							case "mem":  							{  								Console.WriteLine("Memory usage:");  								Console.WriteLine("- Managed Mem  : " + GC.GetTotalMemory(false).ToString("N0"));  #if !NETCOREAPP  								Console.WriteLine("- Working Set  : " + PerfCounters.WorkingSet.NextValue().ToString("N0") + " (peak " + PerfCounters.WorkingSetPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Virtual Bytes: " + PerfCounters.VirtualBytes.NextValue().ToString("N0") + " (peak " + PerfCounters.VirtualBytesPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Private Bytes: " + PerfCounters.PrivateBytes.NextValue().ToString("N0"));  								Console.WriteLine("- BytesInAlHeap: " + PerfCounters.ClrBytesInAllHeaps.NextValue().ToString("N0"));  #endif  								break;  							}    							default:  							{  								Console.WriteLine(string.Format("Unknown command : '{0}'"' trimmedCommand));  								break;  							}  						}
Magic Number,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,The following statement contains a magic number: switch (trimmedCommand)  						{  							case "":  							{  								continue;  							}  							case "1":  							{ // Class Scheduling    								RunAsyncTest(new ClassScheduling()' go.Token);  								break;  							}    							case "log":  							{  								switch(prm.ToLowerInvariant())  								{  									case "on":  									{  										LogEnabled = true;  										Console.WriteLine("# Logging enabled");  										break;  									}  									case "off":  									{  										LogEnabled = false;  										Console.WriteLine("# Logging disabled");  										break;  									}  									default:  									{  										Console.WriteLine("# Logging is {0}"' LogEnabled ? "ON" : "OFF");  										break;  									}  								}  								break;  							}    							case "bench":  							{ // Benchs    								switch(prm.ToLowerInvariant())  								{  									case "read":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.GetReadVersion)' go.Token);  										break;  									}  									case "get":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get)' go.Token);  										break;  									}  									case "get10":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get' 10)' go.Token);  										break;  									}  									case "set":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Set)' go.Token);  										break;  									}  									case "watch":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Watch)' go.Token);  										break;  									}  								}    								break;  							}    							case "msg":  							{  								switch(prm.ToLowerInvariant())  								{  									case "producer":  									{ // Queue Producer  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Producer' TimeSpan.FromMilliseconds(50)' TimeSpan.FromMilliseconds(200))' go.Token);  										break;  									}  									case "worker":  									{ // Queue Worker  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Worker' TimeSpan.FromMilliseconds(10)' TimeSpan.FromMilliseconds(10))' go.Token);  										break;  									}  									case "clear":  									{ // Queue Clear  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Clear' TimeSpan.Zero' TimeSpan.Zero)' go.Token);  										break;  									}  									case "status":  									{ // Queue Status  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Status' TimeSpan.FromSeconds(2)' TimeSpan.FromSeconds(10))' go.Token);  										break;  									}  								}  								break;  							}    							case "leak":  							{ // LeastTest  								switch(prm.ToLowerInvariant())  								{  									case "fast": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(0))' go.Token); break;  									case "slow": RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(30))' go.Token); break;  									default: RunAsyncTest(new LeakTest(100' 100' 1000' TimeSpan.FromSeconds(1))' go.Token); break;  								}							  								break;  							}    							case "sampling":  							{ // SamplingTest  								RunAsyncTest(new SamplerTest(0.1)' go.Token);  								break;  							}    							case "q":  							case "x":  							case "quit":  							case "exit":  							{  								stop = true;  								break;  							}    							case "gc":  							{  								long before = GC.GetTotalMemory(false);  								Console.Write("Collecting garbage...");  								GC.Collect();  								GC.WaitForPendingFinalizers();  								GC.Collect();  								Console.WriteLine(" Done");  								long after = GC.GetTotalMemory(false);  								Console.WriteLine("- before = " + before.ToString("N0"));  								Console.WriteLine("- after  = " + after.ToString("N0"));  								Console.WriteLine("- delta  = " + (before - after).ToString("N0"));  								break;  							}    							case "mem":  							{  								Console.WriteLine("Memory usage:");  								Console.WriteLine("- Managed Mem  : " + GC.GetTotalMemory(false).ToString("N0"));  #if !NETCOREAPP  								Console.WriteLine("- Working Set  : " + PerfCounters.WorkingSet.NextValue().ToString("N0") + " (peak " + PerfCounters.WorkingSetPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Virtual Bytes: " + PerfCounters.VirtualBytes.NextValue().ToString("N0") + " (peak " + PerfCounters.VirtualBytesPeak.NextValue().ToString("N0") + ")");  								Console.WriteLine("- Private Bytes: " + PerfCounters.PrivateBytes.NextValue().ToString("N0"));  								Console.WriteLine("- BytesInAlHeap: " + PerfCounters.ClrBytesInAllHeaps.NextValue().ToString("N0"));  #endif  								break;  							}    							default:  							{  								Console.WriteLine(string.Format("Unknown command : '{0}'"' trimmedCommand));  								break;  							}  						}
Magic Number,Doxense.Mathematics.Statistics,RobustHistogram,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Histogram.cs,GetScaleToTicksRatio,The following statement contains a magic number: switch(scale)  			{  				case TimeScale.Ticks: return 1.0d;  				case TimeScale.Nanoseconds: return 1E-2d;  				case TimeScale.Microseconds: return 1E1d;  				case TimeScale.Milliseconds: return 1E4d;  				case TimeScale.Seconds: return 1E7d;  				default: return 1.0d;  			}
Magic Number,Doxense.Mathematics.Statistics,RobustHistogram,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Histogram.cs,GetScaleToTicksRatio,The following statement contains a magic number: switch(scale)  			{  				case TimeScale.Ticks: return 1.0d;  				case TimeScale.Nanoseconds: return 1E-2d;  				case TimeScale.Microseconds: return 1E1d;  				case TimeScale.Milliseconds: return 1E4d;  				case TimeScale.Seconds: return 1E7d;  				default: return 1.0d;  			}
Magic Number,Doxense.Mathematics.Statistics,RobustHistogram,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Histogram.cs,GetScaleToTicksRatio,The following statement contains a magic number: switch(scale)  			{  				case TimeScale.Ticks: return 1.0d;  				case TimeScale.Nanoseconds: return 1E-2d;  				case TimeScale.Microseconds: return 1E1d;  				case TimeScale.Milliseconds: return 1E4d;  				case TimeScale.Seconds: return 1E7d;  				default: return 1.0d;  			}
Magic Number,Doxense.Mathematics.Statistics,RobustHistogram,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Histogram.cs,GetScaleToTicksRatio,The following statement contains a magic number: switch(scale)  			{  				case TimeScale.Ticks: return 1.0d;  				case TimeScale.Nanoseconds: return 1E-2d;  				case TimeScale.Microseconds: return 1E1d;  				case TimeScale.Milliseconds: return 1E4d;  				case TimeScale.Seconds: return 1E7d;  				default: return 1.0d;  			}
Magic Number,Doxense.Mathematics.Statistics,RobustHistogram,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Histogram.cs,Percentile,The following statement contains a magic number: double threshold = this.Count * (p / 100.0d);
Magic Number,Doxense.Mathematics.Statistics,RobustHistogram,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Histogram.cs,MedianAbsoluteDeviation,The following statement contains a magic number: var median = Percentile(50);
Magic Number,Doxense.Mathematics.Statistics,RobustHistogram,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Histogram.cs,MedianAbsoluteDeviation,The following statement contains a magic number: var array = this.Buckets  				.Select((x' i) =>  				{  					double leftPoint = i > 0 ? BucketLimits[i - 1] : 0;  					double rightPoint = BucketLimits[i];  					// on considère qu'on est au millieu  					return new { Count = x' Deviation = Math.Abs(((leftPoint + rightPoint) / 2d) - median) };  				})  				.Where(kvp => kvp.Count > 0)  				.OrderBy((kvp => kvp.Deviation))  				.ToArray();
Magic Number,Doxense.Mathematics.Statistics,RobustHistogram,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Histogram.cs,MedianAbsoluteDeviation,The following statement contains a magic number: double threshold = this.Count * 0.5d;
Magic Number,Doxense.Mathematics.Statistics,RobustHistogram,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Histogram.cs,FormatHistoBar,The following statement contains a magic number: int marks = (int)Math.Round((value * chars * 10)' MidpointRounding.AwayFromZero);
Magic Number,Doxense.Mathematics.Statistics,RobustHistogram,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Histogram.cs,GetDistribution,The following statement contains a magic number: max = (3 * max + this.Count) / 4;
Magic Number,Doxense.Mathematics.Statistics,RobustHistogram,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Histogram.cs,GetDistribution,The following statement contains a magic number: max = (3 * max + this.Count) / 4;
Magic Number,Doxense.Mathematics.Statistics,RobustHistogram,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Histogram.cs,GetDistribution,The following statement contains a magic number: int p = Math.Min((int)Math.Ceiling(rr * data[i])' 10);
Magic Number,Doxense.Mathematics.Statistics,RobustHistogram,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Histogram.cs,GetPercentiles,The following statement contains a magic number: return String.Format(  				CultureInfo.InvariantCulture'  				"{0:5'#'##0.0} --| {1:5'#'##0.0} ==[ {2:5'#'##0.0} ]== {3:5'#'##0.0} |-- {4:5'#'##0.0}"'  				this.Percentile(5)'  				this.Percentile(25)'  				this.Percentile(50)'  				this.Percentile(75)'  				this.Percentile(95)  			);
Magic Number,Doxense.Mathematics.Statistics,RobustHistogram,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Histogram.cs,GetPercentiles,The following statement contains a magic number: return String.Format(  				CultureInfo.InvariantCulture'  				"{0:5'#'##0.0} --| {1:5'#'##0.0} ==[ {2:5'#'##0.0} ]== {3:5'#'##0.0} |-- {4:5'#'##0.0}"'  				this.Percentile(5)'  				this.Percentile(25)'  				this.Percentile(50)'  				this.Percentile(75)'  				this.Percentile(95)  			);
Magic Number,Doxense.Mathematics.Statistics,RobustHistogram,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Histogram.cs,GetPercentiles,The following statement contains a magic number: return String.Format(  				CultureInfo.InvariantCulture'  				"{0:5'#'##0.0} --| {1:5'#'##0.0} ==[ {2:5'#'##0.0} ]== {3:5'#'##0.0} |-- {4:5'#'##0.0}"'  				this.Percentile(5)'  				this.Percentile(25)'  				this.Percentile(50)'  				this.Percentile(75)'  				this.Percentile(95)  			);
Magic Number,Doxense.Mathematics.Statistics,RobustHistogram,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Histogram.cs,GetPercentiles,The following statement contains a magic number: return String.Format(  				CultureInfo.InvariantCulture'  				"{0:5'#'##0.0} --| {1:5'#'##0.0} ==[ {2:5'#'##0.0} ]== {3:5'#'##0.0} |-- {4:5'#'##0.0}"'  				this.Percentile(5)'  				this.Percentile(25)'  				this.Percentile(50)'  				this.Percentile(75)'  				this.Percentile(95)  			);
Magic Number,Doxense.Mathematics.Statistics,RobustHistogram,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Histogram.cs,GetPercentiles,The following statement contains a magic number: return String.Format(  				CultureInfo.InvariantCulture'  				"{0:5'#'##0.0} --| {1:5'#'##0.0} ==[ {2:5'#'##0.0} ]== {3:5'#'##0.0} |-- {4:5'#'##0.0}"'  				this.Percentile(5)'  				this.Percentile(25)'  				this.Percentile(50)'  				this.Percentile(75)'  				this.Percentile(95)  			);
Magic Number,Doxense.Mathematics.Statistics,RobustHistogram,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Histogram.cs,GetReport,The following statement contains a magic number: r.AppendLine(String.Format(CultureInfo.InvariantCulture'  					"- Distrib: ({0:#'##0.0}) - {1:#'##0.0} =[ {2:#'##0.0} ]= {3:#'##0.0} - ({4:#'##0.0})"'  					this.Percentile(5)' this.Percentile(25)' median' this.Percentile(75)' this.Percentile(95)  				));
Magic Number,Doxense.Mathematics.Statistics,RobustHistogram,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Histogram.cs,GetReport,The following statement contains a magic number: r.AppendLine(String.Format(CultureInfo.InvariantCulture'  					"- Distrib: ({0:#'##0.0}) - {1:#'##0.0} =[ {2:#'##0.0} ]= {3:#'##0.0} - ({4:#'##0.0})"'  					this.Percentile(5)' this.Percentile(25)' median' this.Percentile(75)' this.Percentile(95)  				));
Magic Number,Doxense.Mathematics.Statistics,RobustHistogram,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Histogram.cs,GetReport,The following statement contains a magic number: r.AppendLine(String.Format(CultureInfo.InvariantCulture'  					"- Distrib: ({0:#'##0.0}) - {1:#'##0.0} =[ {2:#'##0.0} ]= {3:#'##0.0} - ({4:#'##0.0})"'  					this.Percentile(5)' this.Percentile(25)' median' this.Percentile(75)' this.Percentile(95)  				));
Magic Number,Doxense.Mathematics.Statistics,RobustHistogram,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Histogram.cs,GetReport,The following statement contains a magic number: r.AppendLine(String.Format(CultureInfo.InvariantCulture'  					"- Distrib: ({0:#'##0.0}) - {1:#'##0.0} =[ {2:#'##0.0} ]= {3:#'##0.0} - ({4:#'##0.0})"'  					this.Percentile(5)' this.Percentile(25)' median' this.Percentile(75)' this.Percentile(95)  				));
Magic Number,Doxense.Mathematics.Statistics,RobustHistogram,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Histogram.cs,GetReport,The following statement contains a magic number: double mult = 100.0d / this.Count;
Magic Number,Doxense.Mathematics.Statistics,RobustHistogram,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Histogram.cs,GetReport,The following statement contains a magic number: r.Append(String.Format(CultureInfo.InvariantCulture'  						"  | {0'8:###'##0.###} - {1'-8:###'##0.###} | {2'9:#'###'###} | {3'7:##0.000}% " + (detailed ? "{5'50} " : "{5' 16} ") + "| {4'7:##0.000}%" + (detailed ? " {6'10}"/*" | {7'7:0.0}"*/ : "")'  						/* 0 */ ((b == 0) ? 0.0 : BucketLimits[b - 1])'     // left  						/* 1 */ BucketLimits[b]'							// right  						/* 2 */ this.Buckets[b]'							// count  						/* 3 */ mult * this.Buckets[b]'						// percentage  						/* 4 */ mult * sum'									// cumulative percentage  						/* 5 */ FormatHistoBar((double)this.Buckets[b] / this.Count' detailed ? 50 : 16' pad: ' ')'  						/* 6 */ detailed ? FormatHistoBar(sum / this.Count' 10' pad: '-'' sparse: true) : string.Empty /*'  						(0.001d / ToTimeSpan(BucketLimits[b]).TotalSeconds)*/  					));
Magic Number,Doxense.Mathematics.Statistics,RobustHistogram,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Histogram.cs,GetReport,The following statement contains a magic number: r.Append(String.Format(CultureInfo.InvariantCulture'  						"  | {0'8:###'##0.###} - {1'-8:###'##0.###} | {2'9:#'###'###} | {3'7:##0.000}% " + (detailed ? "{5'50} " : "{5' 16} ") + "| {4'7:##0.000}%" + (detailed ? " {6'10}"/*" | {7'7:0.0}"*/ : "")'  						/* 0 */ ((b == 0) ? 0.0 : BucketLimits[b - 1])'     // left  						/* 1 */ BucketLimits[b]'							// right  						/* 2 */ this.Buckets[b]'							// count  						/* 3 */ mult * this.Buckets[b]'						// percentage  						/* 4 */ mult * sum'									// cumulative percentage  						/* 5 */ FormatHistoBar((double)this.Buckets[b] / this.Count' detailed ? 50 : 16' pad: ' ')'  						/* 6 */ detailed ? FormatHistoBar(sum / this.Count' 10' pad: '-'' sparse: true) : string.Empty /*'  						(0.001d / ToTimeSpan(BucketLimits[b]).TotalSeconds)*/  					));
Magic Number,Doxense.Mathematics.Statistics,RobustHistogram,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Utils\Histogram.cs,GetReport,The following statement contains a magic number: r.Append(String.Format(CultureInfo.InvariantCulture'  						"  | {0'8:###'##0.###} - {1'-8:###'##0.###} | {2'9:#'###'###} | {3'7:##0.000}% " + (detailed ? "{5'50} " : "{5' 16} ") + "| {4'7:##0.000}%" + (detailed ? " {6'10}"/*" | {7'7:0.0}"*/ : "")'  						/* 0 */ ((b == 0) ? 0.0 : BucketLimits[b - 1])'     // left  						/* 1 */ BucketLimits[b]'							// right  						/* 2 */ this.Buckets[b]'							// count  						/* 3 */ mult * this.Buckets[b]'						// percentage  						/* 4 */ mult * sum'									// cumulative percentage  						/* 5 */ FormatHistoBar((double)this.Buckets[b] / this.Count' detailed ? 50 : 16' pad: ' ')'  						/* 6 */ detailed ? FormatHistoBar(sum / this.Count' 10' pad: '-'' sparse: true) : string.Empty /*'  						(0.001d / ToTimeSpan(BucketLimits[b]).TotalSeconds)*/  					));
Missing Default,FoundationDB.Samples.Benchmarks,BenchRunner,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Benchmarks\BenchRunner.cs,Run,The following switch statement is missing a default case: switch(this.Mode)  						{  							case BenchMode.GetReadVersion:  							{  								await db.ReadAsync(tr => tr.GetReadVersionAsync()' ct);  								break;  							}  							case BenchMode.Get:  							{  								if (this.Value <= 1)  								{  									await db.ReadAsync(tr => tr.GetAsync(foo)' ct);  								}  								else  								{  									var foos = TuPack.EncodePrefixedKeys(foo' Enumerable.Range(1' this.Value).ToArray());  									await db.ReadAsync(tr => tr.GetValuesAsync(foos)' ct);  								}  								break;  							}  							case BenchMode.Set:  							{  								await db.WriteAsync(tr => tr.Set(foo' bar)' ct);  								break;  							}  							case BenchMode.Watch:  							{  								(var v' var w) = await db.ReadWriteAsync(async tr => (await tr.GetAsync(foo)' tr.Watch(foo' ct))' ct);    								// swap  								v = (v == bar) ? barf : bar;    								await db.WriteAsync((tr) => tr.Set(foo' v)' ct);    								await w;    								break;  							}  						}
Missing Default,FoundationDB.Samples.Tutorials,MessageQueueRunner,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\MessageQueue\MessageQueueRunner.cs,Run,The following switch statement is missing a default case: switch(this.Role)  			{  				case AgentRole.Worker:  				{  					log.WriteLine("Running as Consumer '" + this.Id + "'");  					await RunConsumer(db' ct);  					break;  				}  				case AgentRole.Producer:  				{  					log.WriteLine("Running as Producer '" + this.Id + "'");  					await RunProducer(db' ct);  					break;  				}  				case AgentRole.Clear:  				{  					log.WriteLine("Running as Clear '" + this.Id + "'");  					await RunClear(db' ct);  					break;  				}  				case AgentRole.Status:  				{  					log.WriteLine("Running as Observer '" + this.Id + "'");  					await RunStatus(db' ct);  					break;  				}  			}
Missing Default,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,The following switch statement is missing a default case: switch(prm.ToLowerInvariant())  								{  									case "read":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.GetReadVersion)' go.Token);  										break;  									}  									case "get":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get)' go.Token);  										break;  									}  									case "get10":  									{  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Get' 10)' go.Token);  										break;  									}  									case "set":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Set)' go.Token);  										break;  									}  									case "watch":  									{ // Bench Set  										RunAsyncTest(new BenchRunner(BenchRunner.BenchMode.Watch)' go.Token);  										break;  									}  								}
Missing Default,FoundationDB.Samples,Program,D:\research\architectureSmells\repos\Doxense_foundationdb-dotnet-client\FoundationDB.Samples\Program.cs,Main,The following switch statement is missing a default case: switch(prm.ToLowerInvariant())  								{  									case "producer":  									{ // Queue Producer  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Producer' TimeSpan.FromMilliseconds(50)' TimeSpan.FromMilliseconds(200))' go.Token);  										break;  									}  									case "worker":  									{ // Queue Worker  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Worker' TimeSpan.FromMilliseconds(10)' TimeSpan.FromMilliseconds(10))' go.Token);  										break;  									}  									case "clear":  									{ // Queue Clear  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Clear' TimeSpan.Zero' TimeSpan.Zero)' go.Token);  										break;  									}  									case "status":  									{ // Queue Status  										RunAsyncTest(new MessageQueueRunner(PerfCounters.ProcessName + "[" + PerfCounters.ProcessId + "]"' MessageQueueRunner.AgentRole.Status' TimeSpan.FromSeconds(2)' TimeSpan.FromSeconds(10))' go.Token);  										break;  									}  								}
