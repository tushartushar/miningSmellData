Implementation smell,Namespace,Class,File,Method,Description
Long Method,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,MainAsync,The method has 159 lines of code.
Long Method,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The method has 101 lines of code.
Complex Method,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,MainAsync,Cyclomatic complexity of the method is 44
Complex Method,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,Cyclomatic complexity of the method is 8
Long Statement,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The length of the statement  "		WriteAt (1' y' "{0} | {1'8} {1'40} | {1'8} {1'40} | {1'10} {1'20} |"' TimeSpan.FromSeconds (Math.Round (metric.LocalTime.TotalSeconds' MidpointRounding.AwayFromZero))' ""); " is 172.
Long Statement,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The length of the statement  "			WriteAt (COL1 + 9' y' metric.ReadsPerSecond == 0 ? "-" : new string (GetBarChar (metric.ReadsPerSecond)' Bar (metric.ReadsPerSecond' scaleRead' MAX_RW_WIDTH))); " is 160.
Long Statement,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The length of the statement  "			WriteAt (COL2 + 9' y' metric.WritesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WritesPerSecond)' Bar (metric.WritesPerSecond' scaleWrite' MAX_RW_WIDTH))); " is 164.
Long Statement,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The length of the statement  "			WriteAt (COL3 + 11' y' metric.WrittenBytesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WrittenBytesPerSecond / 1000)' Bar (metric.WrittenBytesPerSecond' scaleSpeed' MAX_WS_WIDTH))); " is 190.
Long Statement,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The length of the statement  "		WriteAt (1' y' "{0} | {1'8} {1'40} | {1'8} {1'40} | {1'10} {1'20} |"' TimeSpan.FromSeconds (Math.Round (metric.LocalTime.TotalSeconds' MidpointRounding.AwayFromZero))' ""); " is 172.
Long Statement,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The length of the statement  "			WriteAt (COL1 + 9' y' metric.LatencyCommit == 0 ? "-" : new string ('|'' Bar (metric.LatencyCommit' scaleCommit' MAX_RW_WIDTH))); " is 129.
Long Statement,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The length of the statement  "			WriteAt (COL2 + 9' y' metric.LatencyRead == 0 ? "-" : new string ('|'' Bar (metric.LatencyRead' scaleRead' MAX_RW_WIDTH))); " is 123.
Long Statement,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The length of the statement  "			WriteAt (COL3 + 11' y' metric.LatencyStart == 0 ? "-" : new string ('|'' Bar (metric.LatencyStart' scaleStart' MAX_WS_WIDTH))); " is 127.
Long Statement,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The length of the statement  "		WriteAt (1' y' "{0} | {1'8} {1'40} | {1'8} {1'40} | {1'10} {1'20} |"' TimeSpan.FromSeconds (Math.Round (metric.LocalTime.TotalSeconds' MidpointRounding.AwayFromZero))' ""); " is 172.
Long Statement,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The length of the statement  "			WriteAt (COL1 + 9' y' metric.TransStarted == 0 ? "-" : new string ('|'' Bar (metric.TransStarted' scaleStarted' MAX_RW_WIDTH))); " is 128.
Long Statement,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The length of the statement  "			WriteAt (COL2 + 9' y' metric.TransCommitted == 0 ? "-" : new string ('|'' Bar (metric.TransCommitted' scaleComitted' MAX_RW_WIDTH))); " is 133.
Long Statement,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The length of the statement  "			Console.ForegroundColor = metric.TransConflicted > 1000 ? ConsoleColor.Red : metric.TransConflicted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen; " is 151.
Long Statement,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The length of the statement  "			WriteAt (COL3 + 9' y' metric.TransConflicted == 0 ? "-" : new string ('|'' Bar (metric.TransConflicted' scaleConflicted' MAX_WS_WIDTH))); " is 137.
Long Statement,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The length of the statement  "		var procs = status.Cluster.Processes.Values.Where (p => p.MachineId == machine.Id).OrderBy (p => p.Address' StringComparer.Ordinal).ToList (); " is 142.
Long Statement,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The length of the statement  "		//"{0'-15} | net {2'8:N3} in {3'8:N3} out | cpu {4'5:N1}% | mem {5'5:N1} / {7'5:N1} GB {8'-20} | hdd {9'5:N1}% {10'-20}"' " is 121.
Long Statement,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The length of the statement  "		Console.ForegroundColor = machine.Memory.CommittedBytes >= 0.95 * machine.Memory.TotalBytes ? ConsoleColor.Red : ConsoleColor.Green; " is 132.
Long Statement,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The length of the statement  "		WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (machine.Memory.CommittedBytes' machine.Memory.TotalBytes' BARSZ))); " is 122.
Long Statement,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The length of the statement  "			WriteAt (1' y' "{0'7} | {0'5} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'5}% {0'15} | {0'11} |"' ""); " is 126.
Long Statement,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The length of the statement  "			Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen; " is 133.
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,Main,The following statement contains a magic number: if (Console.LargestWindowWidth > 0 && Console.LargestWindowHeight > 0) {  	Console.WindowWidth = 160;  	Console.WindowHeight = 60;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,Main,The following statement contains a magic number: if (Console.LargestWindowWidth > 0 && Console.LargestWindowHeight > 0) {  	Console.WindowWidth = 160;  	Console.WindowHeight = 60;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,Main,The following statement contains a magic number: Console.WindowWidth = 160;  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,Main,The following statement contains a magic number: Console.WindowHeight = 60;  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,MainAsync,The following statement contains a magic number: try {  	DateTime now = DateTime.MinValue;  	DateTime lap = DateTime.MinValue;  	DateTime next = DateTime.MinValue;  	bool repaint = true;  	bool exit = false;  	bool saveNext = false;  	bool updated = false;  	const double FAST = 1;  	const double SLOW = 5;  	double speed = FAST;  	DisplayMode mode = DisplayMode.Metrics;  	using (var db = await Fdb.OpenAsync (ClusterPath' "DB"' cancel)) {  		db.DefaultTimeout = 10000;  		while (!exit && !cancel.IsCancellationRequested) {  			now = DateTime.UtcNow;  			if (Console.KeyAvailable) {  				var k = Console.ReadKey ();  				switch (k.Key) {  				case ConsoleKey.Escape: {  					// [ESC]  					exit = true;  					break;  				}  				case ConsoleKey.C: {  					if (k.Modifiers.HasFlag (ConsoleModifiers.Control)) {  						// CTRL-C  						exit = true;  					}  					break;  				}  				case ConsoleKey.F: {  					// [F]ast (on/off)  					if (speed == FAST)  						speed = SLOW;  					else  						speed = FAST;  					break;  				}  				case ConsoleKey.H:  				case ConsoleKey.F1: {  					mode = DisplayMode.Help;  					updated = repaint = true;  					break;  				}  				case ConsoleKey.L: {  					// [L]atency  					mode = DisplayMode.Latency;  					updated = repaint = true;  					break;  				}  				case ConsoleKey.M: {  					// [M]etrics  					mode = DisplayMode.Metrics;  					updated = repaint = true;  					break;  				}  				case ConsoleKey.P: {  					// [P]rocesses  					mode = DisplayMode.Processes;  					updated = repaint = true;  					break;  				}  				case ConsoleKey.Q: {  					// [Q]uit  					exit = true;  					break;  				}  				case ConsoleKey.R: {  					// [R]eset  					lap = now;  					next = now;  					History.Clear ();  					updated = repaint = true;  					break;  				}  				case ConsoleKey.S: {  					// [S]napshot  					saveNext = true;  					break;  				}  				case ConsoleKey.T: {  					// [T]ransactions  					mode = DisplayMode.Transactions;  					updated = repaint = true;  					break;  				}  				}  			}  			var status = await Fdb.System.GetStatusAsync (db' cancel);  			if (saveNext) {  				System.IO.File.WriteAllText (@".\\status.json"' status.RawText);  				saveNext = false;  			}  			if (lap == DateTime.MinValue) {  				lap = now;  				next = now.AddSeconds (speed);  			}  			if (now >= next) {  				var metric = new HistoryMetric {  					Available = status.ReadVersion > 0'  					LocalTime = now - lap'  					Timestamp = status.Cluster.ClusterControllerTimestamp'  					ReadVersion = status.ReadVersion'  					ReadsPerSecond = status.Cluster.Workload.Operations.Reads.Hz'  					WritesPerSecond = status.Cluster.Workload.Operations.Writes.Hz'  					WrittenBytesPerSecond = status.Cluster.Workload.Bytes.Written.Hz'  					TransStarted = status.Cluster.Workload.Transactions.Started.Hz'  					TransCommitted = status.Cluster.Workload.Transactions.Committed.Hz'  					TransConflicted = status.Cluster.Workload.Transactions.Conflicted.Hz'  					LatencyCommit = status.Cluster.Latency.CommitSeconds'  					LatencyRead = status.Cluster.Latency.ReadSeconds'  					LatencyStart = status.Cluster.Latency.TransactionStartSeconds'  				};  				History.Enqueue (metric);  				updated = true;  				now = DateTime.UtcNow;  				while (next < now)  					next = next.AddSeconds (speed);  			}  			if (updated) {  				var metric = History.LastOrDefault ();  				switch (mode) {  				case DisplayMode.Metrics: {  					ShowMetricsScreen (status' metric' repaint);  					break;  				}  				case DisplayMode.Latency: {  					ShowLatencyScreen (status' metric' repaint);  					break;  				}  				case DisplayMode.Transactions: {  					ShowTransactionScreen (status' metric' repaint);  					break;  				}  				case DisplayMode.Processes: {  					ShowProcessesScreen (status' metric' repaint);  					break;  				}  				case DisplayMode.Help: {  					ShowHelpScreen (repaint);  					break;  				}  				}  				repaint = false;  				updated = false;  			}  			await Task.Delay (100);  		}  	}  } finally {  	Console.CursorVisible = true;  	Console.ResetColor ();  	Console.Clear ();  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,MainAsync,The following statement contains a magic number: try {  	DateTime now = DateTime.MinValue;  	DateTime lap = DateTime.MinValue;  	DateTime next = DateTime.MinValue;  	bool repaint = true;  	bool exit = false;  	bool saveNext = false;  	bool updated = false;  	const double FAST = 1;  	const double SLOW = 5;  	double speed = FAST;  	DisplayMode mode = DisplayMode.Metrics;  	using (var db = await Fdb.OpenAsync (ClusterPath' "DB"' cancel)) {  		db.DefaultTimeout = 10000;  		while (!exit && !cancel.IsCancellationRequested) {  			now = DateTime.UtcNow;  			if (Console.KeyAvailable) {  				var k = Console.ReadKey ();  				switch (k.Key) {  				case ConsoleKey.Escape: {  					// [ESC]  					exit = true;  					break;  				}  				case ConsoleKey.C: {  					if (k.Modifiers.HasFlag (ConsoleModifiers.Control)) {  						// CTRL-C  						exit = true;  					}  					break;  				}  				case ConsoleKey.F: {  					// [F]ast (on/off)  					if (speed == FAST)  						speed = SLOW;  					else  						speed = FAST;  					break;  				}  				case ConsoleKey.H:  				case ConsoleKey.F1: {  					mode = DisplayMode.Help;  					updated = repaint = true;  					break;  				}  				case ConsoleKey.L: {  					// [L]atency  					mode = DisplayMode.Latency;  					updated = repaint = true;  					break;  				}  				case ConsoleKey.M: {  					// [M]etrics  					mode = DisplayMode.Metrics;  					updated = repaint = true;  					break;  				}  				case ConsoleKey.P: {  					// [P]rocesses  					mode = DisplayMode.Processes;  					updated = repaint = true;  					break;  				}  				case ConsoleKey.Q: {  					// [Q]uit  					exit = true;  					break;  				}  				case ConsoleKey.R: {  					// [R]eset  					lap = now;  					next = now;  					History.Clear ();  					updated = repaint = true;  					break;  				}  				case ConsoleKey.S: {  					// [S]napshot  					saveNext = true;  					break;  				}  				case ConsoleKey.T: {  					// [T]ransactions  					mode = DisplayMode.Transactions;  					updated = repaint = true;  					break;  				}  				}  			}  			var status = await Fdb.System.GetStatusAsync (db' cancel);  			if (saveNext) {  				System.IO.File.WriteAllText (@".\\status.json"' status.RawText);  				saveNext = false;  			}  			if (lap == DateTime.MinValue) {  				lap = now;  				next = now.AddSeconds (speed);  			}  			if (now >= next) {  				var metric = new HistoryMetric {  					Available = status.ReadVersion > 0'  					LocalTime = now - lap'  					Timestamp = status.Cluster.ClusterControllerTimestamp'  					ReadVersion = status.ReadVersion'  					ReadsPerSecond = status.Cluster.Workload.Operations.Reads.Hz'  					WritesPerSecond = status.Cluster.Workload.Operations.Writes.Hz'  					WrittenBytesPerSecond = status.Cluster.Workload.Bytes.Written.Hz'  					TransStarted = status.Cluster.Workload.Transactions.Started.Hz'  					TransCommitted = status.Cluster.Workload.Transactions.Committed.Hz'  					TransConflicted = status.Cluster.Workload.Transactions.Conflicted.Hz'  					LatencyCommit = status.Cluster.Latency.CommitSeconds'  					LatencyRead = status.Cluster.Latency.ReadSeconds'  					LatencyStart = status.Cluster.Latency.TransactionStartSeconds'  				};  				History.Enqueue (metric);  				updated = true;  				now = DateTime.UtcNow;  				while (next < now)  					next = next.AddSeconds (speed);  			}  			if (updated) {  				var metric = History.LastOrDefault ();  				switch (mode) {  				case DisplayMode.Metrics: {  					ShowMetricsScreen (status' metric' repaint);  					break;  				}  				case DisplayMode.Latency: {  					ShowLatencyScreen (status' metric' repaint);  					break;  				}  				case DisplayMode.Transactions: {  					ShowTransactionScreen (status' metric' repaint);  					break;  				}  				case DisplayMode.Processes: {  					ShowProcessesScreen (status' metric' repaint);  					break;  				}  				case DisplayMode.Help: {  					ShowHelpScreen (repaint);  					break;  				}  				}  				repaint = false;  				updated = false;  			}  			await Task.Delay (100);  		}  	}  } finally {  	Console.CursorVisible = true;  	Console.ResetColor ();  	Console.Clear ();  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,MainAsync,The following statement contains a magic number: try {  	DateTime now = DateTime.MinValue;  	DateTime lap = DateTime.MinValue;  	DateTime next = DateTime.MinValue;  	bool repaint = true;  	bool exit = false;  	bool saveNext = false;  	bool updated = false;  	const double FAST = 1;  	const double SLOW = 5;  	double speed = FAST;  	DisplayMode mode = DisplayMode.Metrics;  	using (var db = await Fdb.OpenAsync (ClusterPath' "DB"' cancel)) {  		db.DefaultTimeout = 10000;  		while (!exit && !cancel.IsCancellationRequested) {  			now = DateTime.UtcNow;  			if (Console.KeyAvailable) {  				var k = Console.ReadKey ();  				switch (k.Key) {  				case ConsoleKey.Escape: {  					// [ESC]  					exit = true;  					break;  				}  				case ConsoleKey.C: {  					if (k.Modifiers.HasFlag (ConsoleModifiers.Control)) {  						// CTRL-C  						exit = true;  					}  					break;  				}  				case ConsoleKey.F: {  					// [F]ast (on/off)  					if (speed == FAST)  						speed = SLOW;  					else  						speed = FAST;  					break;  				}  				case ConsoleKey.H:  				case ConsoleKey.F1: {  					mode = DisplayMode.Help;  					updated = repaint = true;  					break;  				}  				case ConsoleKey.L: {  					// [L]atency  					mode = DisplayMode.Latency;  					updated = repaint = true;  					break;  				}  				case ConsoleKey.M: {  					// [M]etrics  					mode = DisplayMode.Metrics;  					updated = repaint = true;  					break;  				}  				case ConsoleKey.P: {  					// [P]rocesses  					mode = DisplayMode.Processes;  					updated = repaint = true;  					break;  				}  				case ConsoleKey.Q: {  					// [Q]uit  					exit = true;  					break;  				}  				case ConsoleKey.R: {  					// [R]eset  					lap = now;  					next = now;  					History.Clear ();  					updated = repaint = true;  					break;  				}  				case ConsoleKey.S: {  					// [S]napshot  					saveNext = true;  					break;  				}  				case ConsoleKey.T: {  					// [T]ransactions  					mode = DisplayMode.Transactions;  					updated = repaint = true;  					break;  				}  				}  			}  			var status = await Fdb.System.GetStatusAsync (db' cancel);  			if (saveNext) {  				System.IO.File.WriteAllText (@".\\status.json"' status.RawText);  				saveNext = false;  			}  			if (lap == DateTime.MinValue) {  				lap = now;  				next = now.AddSeconds (speed);  			}  			if (now >= next) {  				var metric = new HistoryMetric {  					Available = status.ReadVersion > 0'  					LocalTime = now - lap'  					Timestamp = status.Cluster.ClusterControllerTimestamp'  					ReadVersion = status.ReadVersion'  					ReadsPerSecond = status.Cluster.Workload.Operations.Reads.Hz'  					WritesPerSecond = status.Cluster.Workload.Operations.Writes.Hz'  					WrittenBytesPerSecond = status.Cluster.Workload.Bytes.Written.Hz'  					TransStarted = status.Cluster.Workload.Transactions.Started.Hz'  					TransCommitted = status.Cluster.Workload.Transactions.Committed.Hz'  					TransConflicted = status.Cluster.Workload.Transactions.Conflicted.Hz'  					LatencyCommit = status.Cluster.Latency.CommitSeconds'  					LatencyRead = status.Cluster.Latency.ReadSeconds'  					LatencyStart = status.Cluster.Latency.TransactionStartSeconds'  				};  				History.Enqueue (metric);  				updated = true;  				now = DateTime.UtcNow;  				while (next < now)  					next = next.AddSeconds (speed);  			}  			if (updated) {  				var metric = History.LastOrDefault ();  				switch (mode) {  				case DisplayMode.Metrics: {  					ShowMetricsScreen (status' metric' repaint);  					break;  				}  				case DisplayMode.Latency: {  					ShowLatencyScreen (status' metric' repaint);  					break;  				}  				case DisplayMode.Transactions: {  					ShowTransactionScreen (status' metric' repaint);  					break;  				}  				case DisplayMode.Processes: {  					ShowProcessesScreen (status' metric' repaint);  					break;  				}  				case DisplayMode.Help: {  					ShowHelpScreen (repaint);  					break;  				}  				}  				repaint = false;  				updated = false;  			}  			await Task.Delay (100);  		}  	}  } finally {  	Console.CursorVisible = true;  	Console.ResetColor ();  	Console.Clear ();  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,MainAsync,The following statement contains a magic number: using (var db = await Fdb.OpenAsync (ClusterPath' "DB"' cancel)) {  	db.DefaultTimeout = 10000;  	while (!exit && !cancel.IsCancellationRequested) {  		now = DateTime.UtcNow;  		if (Console.KeyAvailable) {  			var k = Console.ReadKey ();  			switch (k.Key) {  			case ConsoleKey.Escape: {  				// [ESC]  				exit = true;  				break;  			}  			case ConsoleKey.C: {  				if (k.Modifiers.HasFlag (ConsoleModifiers.Control)) {  					// CTRL-C  					exit = true;  				}  				break;  			}  			case ConsoleKey.F: {  				// [F]ast (on/off)  				if (speed == FAST)  					speed = SLOW;  				else  					speed = FAST;  				break;  			}  			case ConsoleKey.H:  			case ConsoleKey.F1: {  				mode = DisplayMode.Help;  				updated = repaint = true;  				break;  			}  			case ConsoleKey.L: {  				// [L]atency  				mode = DisplayMode.Latency;  				updated = repaint = true;  				break;  			}  			case ConsoleKey.M: {  				// [M]etrics  				mode = DisplayMode.Metrics;  				updated = repaint = true;  				break;  			}  			case ConsoleKey.P: {  				// [P]rocesses  				mode = DisplayMode.Processes;  				updated = repaint = true;  				break;  			}  			case ConsoleKey.Q: {  				// [Q]uit  				exit = true;  				break;  			}  			case ConsoleKey.R: {  				// [R]eset  				lap = now;  				next = now;  				History.Clear ();  				updated = repaint = true;  				break;  			}  			case ConsoleKey.S: {  				// [S]napshot  				saveNext = true;  				break;  			}  			case ConsoleKey.T: {  				// [T]ransactions  				mode = DisplayMode.Transactions;  				updated = repaint = true;  				break;  			}  			}  		}  		var status = await Fdb.System.GetStatusAsync (db' cancel);  		if (saveNext) {  			System.IO.File.WriteAllText (@".\\status.json"' status.RawText);  			saveNext = false;  		}  		if (lap == DateTime.MinValue) {  			lap = now;  			next = now.AddSeconds (speed);  		}  		if (now >= next) {  			var metric = new HistoryMetric {  				Available = status.ReadVersion > 0'  				LocalTime = now - lap'  				Timestamp = status.Cluster.ClusterControllerTimestamp'  				ReadVersion = status.ReadVersion'  				ReadsPerSecond = status.Cluster.Workload.Operations.Reads.Hz'  				WritesPerSecond = status.Cluster.Workload.Operations.Writes.Hz'  				WrittenBytesPerSecond = status.Cluster.Workload.Bytes.Written.Hz'  				TransStarted = status.Cluster.Workload.Transactions.Started.Hz'  				TransCommitted = status.Cluster.Workload.Transactions.Committed.Hz'  				TransConflicted = status.Cluster.Workload.Transactions.Conflicted.Hz'  				LatencyCommit = status.Cluster.Latency.CommitSeconds'  				LatencyRead = status.Cluster.Latency.ReadSeconds'  				LatencyStart = status.Cluster.Latency.TransactionStartSeconds'  			};  			History.Enqueue (metric);  			updated = true;  			now = DateTime.UtcNow;  			while (next < now)  				next = next.AddSeconds (speed);  		}  		if (updated) {  			var metric = History.LastOrDefault ();  			switch (mode) {  			case DisplayMode.Metrics: {  				ShowMetricsScreen (status' metric' repaint);  				break;  			}  			case DisplayMode.Latency: {  				ShowLatencyScreen (status' metric' repaint);  				break;  			}  			case DisplayMode.Transactions: {  				ShowTransactionScreen (status' metric' repaint);  				break;  			}  			case DisplayMode.Processes: {  				ShowProcessesScreen (status' metric' repaint);  				break;  			}  			case DisplayMode.Help: {  				ShowHelpScreen (repaint);  				break;  			}  			}  			repaint = false;  			updated = false;  		}  		await Task.Delay (100);  	}  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,MainAsync,The following statement contains a magic number: using (var db = await Fdb.OpenAsync (ClusterPath' "DB"' cancel)) {  	db.DefaultTimeout = 10000;  	while (!exit && !cancel.IsCancellationRequested) {  		now = DateTime.UtcNow;  		if (Console.KeyAvailable) {  			var k = Console.ReadKey ();  			switch (k.Key) {  			case ConsoleKey.Escape: {  				// [ESC]  				exit = true;  				break;  			}  			case ConsoleKey.C: {  				if (k.Modifiers.HasFlag (ConsoleModifiers.Control)) {  					// CTRL-C  					exit = true;  				}  				break;  			}  			case ConsoleKey.F: {  				// [F]ast (on/off)  				if (speed == FAST)  					speed = SLOW;  				else  					speed = FAST;  				break;  			}  			case ConsoleKey.H:  			case ConsoleKey.F1: {  				mode = DisplayMode.Help;  				updated = repaint = true;  				break;  			}  			case ConsoleKey.L: {  				// [L]atency  				mode = DisplayMode.Latency;  				updated = repaint = true;  				break;  			}  			case ConsoleKey.M: {  				// [M]etrics  				mode = DisplayMode.Metrics;  				updated = repaint = true;  				break;  			}  			case ConsoleKey.P: {  				// [P]rocesses  				mode = DisplayMode.Processes;  				updated = repaint = true;  				break;  			}  			case ConsoleKey.Q: {  				// [Q]uit  				exit = true;  				break;  			}  			case ConsoleKey.R: {  				// [R]eset  				lap = now;  				next = now;  				History.Clear ();  				updated = repaint = true;  				break;  			}  			case ConsoleKey.S: {  				// [S]napshot  				saveNext = true;  				break;  			}  			case ConsoleKey.T: {  				// [T]ransactions  				mode = DisplayMode.Transactions;  				updated = repaint = true;  				break;  			}  			}  		}  		var status = await Fdb.System.GetStatusAsync (db' cancel);  		if (saveNext) {  			System.IO.File.WriteAllText (@".\\status.json"' status.RawText);  			saveNext = false;  		}  		if (lap == DateTime.MinValue) {  			lap = now;  			next = now.AddSeconds (speed);  		}  		if (now >= next) {  			var metric = new HistoryMetric {  				Available = status.ReadVersion > 0'  				LocalTime = now - lap'  				Timestamp = status.Cluster.ClusterControllerTimestamp'  				ReadVersion = status.ReadVersion'  				ReadsPerSecond = status.Cluster.Workload.Operations.Reads.Hz'  				WritesPerSecond = status.Cluster.Workload.Operations.Writes.Hz'  				WrittenBytesPerSecond = status.Cluster.Workload.Bytes.Written.Hz'  				TransStarted = status.Cluster.Workload.Transactions.Started.Hz'  				TransCommitted = status.Cluster.Workload.Transactions.Committed.Hz'  				TransConflicted = status.Cluster.Workload.Transactions.Conflicted.Hz'  				LatencyCommit = status.Cluster.Latency.CommitSeconds'  				LatencyRead = status.Cluster.Latency.ReadSeconds'  				LatencyStart = status.Cluster.Latency.TransactionStartSeconds'  			};  			History.Enqueue (metric);  			updated = true;  			now = DateTime.UtcNow;  			while (next < now)  				next = next.AddSeconds (speed);  		}  		if (updated) {  			var metric = History.LastOrDefault ();  			switch (mode) {  			case DisplayMode.Metrics: {  				ShowMetricsScreen (status' metric' repaint);  				break;  			}  			case DisplayMode.Latency: {  				ShowLatencyScreen (status' metric' repaint);  				break;  			}  			case DisplayMode.Transactions: {  				ShowTransactionScreen (status' metric' repaint);  				break;  			}  			case DisplayMode.Processes: {  				ShowProcessesScreen (status' metric' repaint);  				break;  			}  			case DisplayMode.Help: {  				ShowHelpScreen (repaint);  				break;  			}  			}  			repaint = false;  			updated = false;  		}  		await Task.Delay (100);  	}  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,MainAsync,The following statement contains a magic number: db.DefaultTimeout = 10000;  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,MainAsync,The following statement contains a magic number: while (!exit && !cancel.IsCancellationRequested) {  	now = DateTime.UtcNow;  	if (Console.KeyAvailable) {  		var k = Console.ReadKey ();  		switch (k.Key) {  		case ConsoleKey.Escape: {  			// [ESC]  			exit = true;  			break;  		}  		case ConsoleKey.C: {  			if (k.Modifiers.HasFlag (ConsoleModifiers.Control)) {  				// CTRL-C  				exit = true;  			}  			break;  		}  		case ConsoleKey.F: {  			// [F]ast (on/off)  			if (speed == FAST)  				speed = SLOW;  			else  				speed = FAST;  			break;  		}  		case ConsoleKey.H:  		case ConsoleKey.F1: {  			mode = DisplayMode.Help;  			updated = repaint = true;  			break;  		}  		case ConsoleKey.L: {  			// [L]atency  			mode = DisplayMode.Latency;  			updated = repaint = true;  			break;  		}  		case ConsoleKey.M: {  			// [M]etrics  			mode = DisplayMode.Metrics;  			updated = repaint = true;  			break;  		}  		case ConsoleKey.P: {  			// [P]rocesses  			mode = DisplayMode.Processes;  			updated = repaint = true;  			break;  		}  		case ConsoleKey.Q: {  			// [Q]uit  			exit = true;  			break;  		}  		case ConsoleKey.R: {  			// [R]eset  			lap = now;  			next = now;  			History.Clear ();  			updated = repaint = true;  			break;  		}  		case ConsoleKey.S: {  			// [S]napshot  			saveNext = true;  			break;  		}  		case ConsoleKey.T: {  			// [T]ransactions  			mode = DisplayMode.Transactions;  			updated = repaint = true;  			break;  		}  		}  	}  	var status = await Fdb.System.GetStatusAsync (db' cancel);  	if (saveNext) {  		System.IO.File.WriteAllText (@".\\status.json"' status.RawText);  		saveNext = false;  	}  	if (lap == DateTime.MinValue) {  		lap = now;  		next = now.AddSeconds (speed);  	}  	if (now >= next) {  		var metric = new HistoryMetric {  			Available = status.ReadVersion > 0'  			LocalTime = now - lap'  			Timestamp = status.Cluster.ClusterControllerTimestamp'  			ReadVersion = status.ReadVersion'  			ReadsPerSecond = status.Cluster.Workload.Operations.Reads.Hz'  			WritesPerSecond = status.Cluster.Workload.Operations.Writes.Hz'  			WrittenBytesPerSecond = status.Cluster.Workload.Bytes.Written.Hz'  			TransStarted = status.Cluster.Workload.Transactions.Started.Hz'  			TransCommitted = status.Cluster.Workload.Transactions.Committed.Hz'  			TransConflicted = status.Cluster.Workload.Transactions.Conflicted.Hz'  			LatencyCommit = status.Cluster.Latency.CommitSeconds'  			LatencyRead = status.Cluster.Latency.ReadSeconds'  			LatencyStart = status.Cluster.Latency.TransactionStartSeconds'  		};  		History.Enqueue (metric);  		updated = true;  		now = DateTime.UtcNow;  		while (next < now)  			next = next.AddSeconds (speed);  	}  	if (updated) {  		var metric = History.LastOrDefault ();  		switch (mode) {  		case DisplayMode.Metrics: {  			ShowMetricsScreen (status' metric' repaint);  			break;  		}  		case DisplayMode.Latency: {  			ShowLatencyScreen (status' metric' repaint);  			break;  		}  		case DisplayMode.Transactions: {  			ShowTransactionScreen (status' metric' repaint);  			break;  		}  		case DisplayMode.Processes: {  			ShowProcessesScreen (status' metric' repaint);  			break;  		}  		case DisplayMode.Help: {  			ShowHelpScreen (repaint);  			break;  		}  		}  		repaint = false;  		updated = false;  	}  	await Task.Delay (100);  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,MainAsync,The following statement contains a magic number: await Task.Delay (100);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,GetBarChar,The following statement contains a magic number: if (scale >= 1000000)  	return '@';  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,GetBarChar,The following statement contains a magic number: if (scale >= 100000)  	return '#';  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,GetBarChar,The following statement contains a magic number: if (scale >= 10000)  	return '|';  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,GigaBytes,The following statement contains a magic number: return x / 1073741824.0;  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,MegaBytes,The following statement contains a magic number: return x / 1048576.0;  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,MegaBytes,The following statement contains a magic number: return x / 1048576.0;  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,GetMaxScale,The following statement contains a magic number: return Math.Pow (10' Math.Ceiling (Math.Log10 (max)));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,FrenquencyColor,The following statement contains a magic number: return hz >= 100 ? ConsoleColor.White : hz >= 10 ? ConsoleColor.Gray : ConsoleColor.DarkGray;  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,FrenquencyColor,The following statement contains a magic number: return hz >= 100 ? ConsoleColor.White : hz >= 10 ? ConsoleColor.Gray : ConsoleColor.DarkGray;  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,DiskSpeedColor,The following statement contains a magic number: return bps >= 1048576 ? ConsoleColor.White : bps >= 1024 ? ConsoleColor.Gray : ConsoleColor.DarkGray;  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,DiskSpeedColor,The following statement contains a magic number: return bps >= 1048576 ? ConsoleColor.White : bps >= 1024 ? ConsoleColor.Gray : ConsoleColor.DarkGray;  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,LatencyColor,The following statement contains a magic number: return x >= 1 ? ConsoleColor.Red : x >= 0.1 ? ConsoleColor.Yellow : x >= 0.01 ? ConsoleColor.White : ConsoleColor.Gray;  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,LatencyColor,The following statement contains a magic number: return x >= 1 ? ConsoleColor.Red : x >= 0.1 ? ConsoleColor.Yellow : x >= 0.01 ? ConsoleColor.White : ConsoleColor.Gray;  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,RepaintTopBar,The following statement contains a magic number: WriteAt (TOP_COL0' 2' "Writes : {0'8} Hz"' "");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,RepaintTopBar,The following statement contains a magic number: WriteAt (TOP_COL0' 3' "Written: {0'8} MB/s"' "");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,RepaintTopBar,The following statement contains a magic number: WriteAt (TOP_COL1' 2' "Disk Used: {0'10} MB"' "");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,RepaintTopBar,The following statement contains a magic number: WriteAt (TOP_COL1' 3' "Shards: {0'5} x{0'6} MB"' "");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,RepaintTopBar,The following statement contains a magic number: WriteAt (TOP_COL2' 2' "Client Time : {0'19}"' "");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,RepaintTopBar,The following statement contains a magic number: WriteAt (TOP_COL2' 3' "Read Version: {0'10}"' "");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,RepaintTopBar,The following statement contains a magic number: WriteAt (TOP_COL3' 2' "Storage   : {0'10}"' "");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,RepaintTopBar,The following statement contains a magic number: WriteAt (TOP_COL3' 3' "Redundancy: {0'10}"' "");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,RepaintTopBar,The following statement contains a magic number: WriteAt (TOP_COL4' 2' "Data : {0'20}"' "");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,RepaintTopBar,The following statement contains a magic number: WriteAt (TOP_COL4' 3' "Perf.: {0'20}"' "");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,UpdateTopBar,The following statement contains a magic number: WriteAt (TOP_COL0 + 9' 1' "{0'8:N0}"' current.ReadsPerSecond);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,UpdateTopBar,The following statement contains a magic number: WriteAt (TOP_COL0 + 9' 2' "{0'8:N0}"' current.WritesPerSecond);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,UpdateTopBar,The following statement contains a magic number: WriteAt (TOP_COL0 + 9' 2' "{0'8:N0}"' current.WritesPerSecond);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,UpdateTopBar,The following statement contains a magic number: WriteAt (TOP_COL0 + 9' 3' "{0'8:N2}"' MegaBytes (current.WrittenBytesPerSecond));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,UpdateTopBar,The following statement contains a magic number: WriteAt (TOP_COL0 + 9' 3' "{0'8:N2}"' MegaBytes (current.WrittenBytesPerSecond));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,UpdateTopBar,The following statement contains a magic number: WriteAt (TOP_COL1 + 11' 1' "{0'10:N1}"' MegaBytes (status.Cluster.Data.TotalKVUsedBytes));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,UpdateTopBar,The following statement contains a magic number: WriteAt (TOP_COL1 + 11' 2' "{0'10:N1}"' MegaBytes (status.Cluster.Data.TotalDiskUsedBytes));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,UpdateTopBar,The following statement contains a magic number: WriteAt (TOP_COL1 + 11' 2' "{0'10:N1}"' MegaBytes (status.Cluster.Data.TotalDiskUsedBytes));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,UpdateTopBar,The following statement contains a magic number: WriteAt (TOP_COL1 + 8' 3' "{0'5:N0}"' status.Cluster.Data.PartitionsCount);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,UpdateTopBar,The following statement contains a magic number: WriteAt (TOP_COL1 + 8' 3' "{0'5:N0}"' status.Cluster.Data.PartitionsCount);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,UpdateTopBar,The following statement contains a magic number: WriteAt (TOP_COL1 + 15' 3' "{0'6:N1}"' MegaBytes (status.Cluster.Data.AveragePartitionSizeBytes));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,UpdateTopBar,The following statement contains a magic number: WriteAt (TOP_COL1 + 15' 3' "{0'6:N1}"' MegaBytes (status.Cluster.Data.AveragePartitionSizeBytes));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,UpdateTopBar,The following statement contains a magic number: WriteAt (TOP_COL2 + 14' 1' "{0'19}"' serverTime.ToString ("u"));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,UpdateTopBar,The following statement contains a magic number: if (Math.Abs ((serverTime - clientTime).TotalSeconds) >= 20)  	Console.ForegroundColor = ConsoleColor.Red;  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,UpdateTopBar,The following statement contains a magic number: WriteAt (TOP_COL2 + 14' 2' "{0'19}"' clientTime.ToString ("u"));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,UpdateTopBar,The following statement contains a magic number: WriteAt (TOP_COL2 + 14' 2' "{0'19}"' clientTime.ToString ("u"));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,UpdateTopBar,The following statement contains a magic number: WriteAt (TOP_COL2 + 14' 3' "{0:N0}"' current.ReadVersion);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,UpdateTopBar,The following statement contains a magic number: WriteAt (TOP_COL2 + 14' 3' "{0:N0}"' current.ReadVersion);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,UpdateTopBar,The following statement contains a magic number: WriteAt (TOP_COL3 + 12' 1' "{0'-10}"' status.Cluster.Configuration.CoordinatorsCount);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,UpdateTopBar,The following statement contains a magic number: WriteAt (TOP_COL3 + 12' 2' "{0'-10}"' status.Cluster.Configuration.StorageEngine);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,UpdateTopBar,The following statement contains a magic number: WriteAt (TOP_COL3 + 12' 2' "{0'-10}"' status.Cluster.Configuration.StorageEngine);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,UpdateTopBar,The following statement contains a magic number: WriteAt (TOP_COL3 + 12' 3' "{0'-10}"' status.Cluster.Configuration.RedundancyFactor);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,UpdateTopBar,The following statement contains a magic number: WriteAt (TOP_COL3 + 12' 3' "{0'-10}"' status.Cluster.Configuration.RedundancyFactor);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,UpdateTopBar,The following statement contains a magic number: if (!status.Client.DatabaseAvailable) {  	Console.ForegroundColor = ConsoleColor.Red;  	WriteAt (TOP_COL4 + 7' 1' "UNAVAILABLE");  } else {  	Console.ForegroundColor = ConsoleColor.Green;  	WriteAt (TOP_COL4 + 7' 1' "Available  ");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,UpdateTopBar,The following statement contains a magic number: if (!status.Client.DatabaseAvailable) {  	Console.ForegroundColor = ConsoleColor.Red;  	WriteAt (TOP_COL4 + 7' 1' "UNAVAILABLE");  } else {  	Console.ForegroundColor = ConsoleColor.Green;  	WriteAt (TOP_COL4 + 7' 1' "Available  ");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,UpdateTopBar,The following statement contains a magic number: WriteAt (TOP_COL4 + 7' 1' "UNAVAILABLE");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,UpdateTopBar,The following statement contains a magic number: WriteAt (TOP_COL4 + 7' 1' "Available  ");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,UpdateTopBar,The following statement contains a magic number: WriteAt (TOP_COL4 + 7' 2' "{0'-40}"' status.Cluster.Data.StateName);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,UpdateTopBar,The following statement contains a magic number: WriteAt (TOP_COL4 + 7' 2' "{0'-40}"' status.Cluster.Data.StateName);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,UpdateTopBar,The following statement contains a magic number: WriteAt (TOP_COL4 + 7' 3' "{0'-40}"' status.Cluster.Qos.PerformanceLimitedBy.Name);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,UpdateTopBar,The following statement contains a magic number: WriteAt (TOP_COL4 + 7' 3' "{0'-40}"' status.Cluster.Qos.PerformanceLimitedBy.Name);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: if (repaint) {  	Console.Title = "fdbtop - Metrics";  	RepaintTopBar ();  	Console.ForegroundColor = ConsoleColor.DarkCyan;  	WriteAt (COL0' 5' "Elapsed");  	WriteAt (COL1' 5' "   Reads (Hz)");  	WriteAt (COL2' 5' "  Writes (Hz)");  	WriteAt (COL3' 5' "Disk Speed (MB/s)");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: if (repaint) {  	Console.Title = "fdbtop - Metrics";  	RepaintTopBar ();  	Console.ForegroundColor = ConsoleColor.DarkCyan;  	WriteAt (COL0' 5' "Elapsed");  	WriteAt (COL1' 5' "   Reads (Hz)");  	WriteAt (COL2' 5' "  Writes (Hz)");  	WriteAt (COL3' 5' "Disk Speed (MB/s)");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: if (repaint) {  	Console.Title = "fdbtop - Metrics";  	RepaintTopBar ();  	Console.ForegroundColor = ConsoleColor.DarkCyan;  	WriteAt (COL0' 5' "Elapsed");  	WriteAt (COL1' 5' "   Reads (Hz)");  	WriteAt (COL2' 5' "  Writes (Hz)");  	WriteAt (COL3' 5' "Disk Speed (MB/s)");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: if (repaint) {  	Console.Title = "fdbtop - Metrics";  	RepaintTopBar ();  	Console.ForegroundColor = ConsoleColor.DarkCyan;  	WriteAt (COL0' 5' "Elapsed");  	WriteAt (COL1' 5' "   Reads (Hz)");  	WriteAt (COL2' 5' "  Writes (Hz)");  	WriteAt (COL3' 5' "Disk Speed (MB/s)");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: WriteAt (COL0' 5' "Elapsed");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: WriteAt (COL1' 5' "   Reads (Hz)");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: WriteAt (COL2' 5' "  Writes (Hz)");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: WriteAt (COL3' 5' "Disk Speed (MB/s)");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: WriteAt (COL1 + 14' 5' "{0'35:N0}"' maxRead);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: WriteAt (COL1 + 14' 5' "{0'35:N0}"' maxRead);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: WriteAt (COL2 + 14' 5' "{0'35:N0}"' maxWrite);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: WriteAt (COL2 + 14' 5' "{0'35:N0}"' maxWrite);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: WriteAt (COL3 + 18' 5' "{0'13:N3}"' MegaBytes (maxSpeed));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: WriteAt (COL3 + 18' 5' "{0'13:N3}"' MegaBytes (maxSpeed));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: foreach (var metric in History) {  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0} | {1'8} {1'40} | {1'8} {1'40} | {1'10} {1'20} |"' TimeSpan.FromSeconds (Math.Round (metric.LocalTime.TotalSeconds' MidpointRounding.AwayFromZero))' "");  	if (metric.Available) {  		bool isMaxRead = maxRead > 0 && metric.ReadsPerSecond == maxRead;  		bool isMaxWrite = maxWrite > 0 && metric.WritesPerSecond == maxWrite;  		bool isMaxSpeed = maxSpeed > 0 && metric.WrittenBytesPerSecond == maxSpeed;  		Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : FrenquencyColor (metric.ReadsPerSecond);  		WriteAt (COL1' y' "{0'8:N0}"' metric.ReadsPerSecond);  		Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : FrenquencyColor (metric.WritesPerSecond);  		WriteAt (COL2' y' "{0'8:N0}"' metric.WritesPerSecond);  		Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : DiskSpeedColor (metric.WrittenBytesPerSecond);  		WriteAt (COL3' y' "{0'10:N3}"' MegaBytes (metric.WrittenBytesPerSecond));  		Console.ForegroundColor = metric.ReadsPerSecond > 10 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  		WriteAt (COL1 + 9' y' metric.ReadsPerSecond == 0 ? "-" : new string (GetBarChar (metric.ReadsPerSecond)' Bar (metric.ReadsPerSecond' scaleRead' MAX_RW_WIDTH)));  		Console.ForegroundColor = metric.WritesPerSecond > 10 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  		WriteAt (COL2 + 9' y' metric.WritesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WritesPerSecond)' Bar (metric.WritesPerSecond' scaleWrite' MAX_RW_WIDTH)));  		Console.ForegroundColor = metric.WrittenBytesPerSecond > 1000 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  		WriteAt (COL3 + 11' y' metric.WrittenBytesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WrittenBytesPerSecond / 1000)' Bar (metric.WrittenBytesPerSecond' scaleSpeed' MAX_WS_WIDTH)));  	} else {  		Console.ForegroundColor = ConsoleColor.DarkRed;  		WriteAt (COL1' y' "{0'8}"' "x");  		WriteAt (COL2' y' "{0'8}"' "x");  		WriteAt (COL3' y' "{0'8}"' "x");  	}  	--y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: foreach (var metric in History) {  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0} | {1'8} {1'40} | {1'8} {1'40} | {1'10} {1'20} |"' TimeSpan.FromSeconds (Math.Round (metric.LocalTime.TotalSeconds' MidpointRounding.AwayFromZero))' "");  	if (metric.Available) {  		bool isMaxRead = maxRead > 0 && metric.ReadsPerSecond == maxRead;  		bool isMaxWrite = maxWrite > 0 && metric.WritesPerSecond == maxWrite;  		bool isMaxSpeed = maxSpeed > 0 && metric.WrittenBytesPerSecond == maxSpeed;  		Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : FrenquencyColor (metric.ReadsPerSecond);  		WriteAt (COL1' y' "{0'8:N0}"' metric.ReadsPerSecond);  		Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : FrenquencyColor (metric.WritesPerSecond);  		WriteAt (COL2' y' "{0'8:N0}"' metric.WritesPerSecond);  		Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : DiskSpeedColor (metric.WrittenBytesPerSecond);  		WriteAt (COL3' y' "{0'10:N3}"' MegaBytes (metric.WrittenBytesPerSecond));  		Console.ForegroundColor = metric.ReadsPerSecond > 10 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  		WriteAt (COL1 + 9' y' metric.ReadsPerSecond == 0 ? "-" : new string (GetBarChar (metric.ReadsPerSecond)' Bar (metric.ReadsPerSecond' scaleRead' MAX_RW_WIDTH)));  		Console.ForegroundColor = metric.WritesPerSecond > 10 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  		WriteAt (COL2 + 9' y' metric.WritesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WritesPerSecond)' Bar (metric.WritesPerSecond' scaleWrite' MAX_RW_WIDTH)));  		Console.ForegroundColor = metric.WrittenBytesPerSecond > 1000 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  		WriteAt (COL3 + 11' y' metric.WrittenBytesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WrittenBytesPerSecond / 1000)' Bar (metric.WrittenBytesPerSecond' scaleSpeed' MAX_WS_WIDTH)));  	} else {  		Console.ForegroundColor = ConsoleColor.DarkRed;  		WriteAt (COL1' y' "{0'8}"' "x");  		WriteAt (COL2' y' "{0'8}"' "x");  		WriteAt (COL3' y' "{0'8}"' "x");  	}  	--y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: foreach (var metric in History) {  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0} | {1'8} {1'40} | {1'8} {1'40} | {1'10} {1'20} |"' TimeSpan.FromSeconds (Math.Round (metric.LocalTime.TotalSeconds' MidpointRounding.AwayFromZero))' "");  	if (metric.Available) {  		bool isMaxRead = maxRead > 0 && metric.ReadsPerSecond == maxRead;  		bool isMaxWrite = maxWrite > 0 && metric.WritesPerSecond == maxWrite;  		bool isMaxSpeed = maxSpeed > 0 && metric.WrittenBytesPerSecond == maxSpeed;  		Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : FrenquencyColor (metric.ReadsPerSecond);  		WriteAt (COL1' y' "{0'8:N0}"' metric.ReadsPerSecond);  		Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : FrenquencyColor (metric.WritesPerSecond);  		WriteAt (COL2' y' "{0'8:N0}"' metric.WritesPerSecond);  		Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : DiskSpeedColor (metric.WrittenBytesPerSecond);  		WriteAt (COL3' y' "{0'10:N3}"' MegaBytes (metric.WrittenBytesPerSecond));  		Console.ForegroundColor = metric.ReadsPerSecond > 10 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  		WriteAt (COL1 + 9' y' metric.ReadsPerSecond == 0 ? "-" : new string (GetBarChar (metric.ReadsPerSecond)' Bar (metric.ReadsPerSecond' scaleRead' MAX_RW_WIDTH)));  		Console.ForegroundColor = metric.WritesPerSecond > 10 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  		WriteAt (COL2 + 9' y' metric.WritesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WritesPerSecond)' Bar (metric.WritesPerSecond' scaleWrite' MAX_RW_WIDTH)));  		Console.ForegroundColor = metric.WrittenBytesPerSecond > 1000 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  		WriteAt (COL3 + 11' y' metric.WrittenBytesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WrittenBytesPerSecond / 1000)' Bar (metric.WrittenBytesPerSecond' scaleSpeed' MAX_WS_WIDTH)));  	} else {  		Console.ForegroundColor = ConsoleColor.DarkRed;  		WriteAt (COL1' y' "{0'8}"' "x");  		WriteAt (COL2' y' "{0'8}"' "x");  		WriteAt (COL3' y' "{0'8}"' "x");  	}  	--y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: foreach (var metric in History) {  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0} | {1'8} {1'40} | {1'8} {1'40} | {1'10} {1'20} |"' TimeSpan.FromSeconds (Math.Round (metric.LocalTime.TotalSeconds' MidpointRounding.AwayFromZero))' "");  	if (metric.Available) {  		bool isMaxRead = maxRead > 0 && metric.ReadsPerSecond == maxRead;  		bool isMaxWrite = maxWrite > 0 && metric.WritesPerSecond == maxWrite;  		bool isMaxSpeed = maxSpeed > 0 && metric.WrittenBytesPerSecond == maxSpeed;  		Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : FrenquencyColor (metric.ReadsPerSecond);  		WriteAt (COL1' y' "{0'8:N0}"' metric.ReadsPerSecond);  		Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : FrenquencyColor (metric.WritesPerSecond);  		WriteAt (COL2' y' "{0'8:N0}"' metric.WritesPerSecond);  		Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : DiskSpeedColor (metric.WrittenBytesPerSecond);  		WriteAt (COL3' y' "{0'10:N3}"' MegaBytes (metric.WrittenBytesPerSecond));  		Console.ForegroundColor = metric.ReadsPerSecond > 10 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  		WriteAt (COL1 + 9' y' metric.ReadsPerSecond == 0 ? "-" : new string (GetBarChar (metric.ReadsPerSecond)' Bar (metric.ReadsPerSecond' scaleRead' MAX_RW_WIDTH)));  		Console.ForegroundColor = metric.WritesPerSecond > 10 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  		WriteAt (COL2 + 9' y' metric.WritesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WritesPerSecond)' Bar (metric.WritesPerSecond' scaleWrite' MAX_RW_WIDTH)));  		Console.ForegroundColor = metric.WrittenBytesPerSecond > 1000 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  		WriteAt (COL3 + 11' y' metric.WrittenBytesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WrittenBytesPerSecond / 1000)' Bar (metric.WrittenBytesPerSecond' scaleSpeed' MAX_WS_WIDTH)));  	} else {  		Console.ForegroundColor = ConsoleColor.DarkRed;  		WriteAt (COL1' y' "{0'8}"' "x");  		WriteAt (COL2' y' "{0'8}"' "x");  		WriteAt (COL3' y' "{0'8}"' "x");  	}  	--y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: foreach (var metric in History) {  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0} | {1'8} {1'40} | {1'8} {1'40} | {1'10} {1'20} |"' TimeSpan.FromSeconds (Math.Round (metric.LocalTime.TotalSeconds' MidpointRounding.AwayFromZero))' "");  	if (metric.Available) {  		bool isMaxRead = maxRead > 0 && metric.ReadsPerSecond == maxRead;  		bool isMaxWrite = maxWrite > 0 && metric.WritesPerSecond == maxWrite;  		bool isMaxSpeed = maxSpeed > 0 && metric.WrittenBytesPerSecond == maxSpeed;  		Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : FrenquencyColor (metric.ReadsPerSecond);  		WriteAt (COL1' y' "{0'8:N0}"' metric.ReadsPerSecond);  		Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : FrenquencyColor (metric.WritesPerSecond);  		WriteAt (COL2' y' "{0'8:N0}"' metric.WritesPerSecond);  		Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : DiskSpeedColor (metric.WrittenBytesPerSecond);  		WriteAt (COL3' y' "{0'10:N3}"' MegaBytes (metric.WrittenBytesPerSecond));  		Console.ForegroundColor = metric.ReadsPerSecond > 10 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  		WriteAt (COL1 + 9' y' metric.ReadsPerSecond == 0 ? "-" : new string (GetBarChar (metric.ReadsPerSecond)' Bar (metric.ReadsPerSecond' scaleRead' MAX_RW_WIDTH)));  		Console.ForegroundColor = metric.WritesPerSecond > 10 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  		WriteAt (COL2 + 9' y' metric.WritesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WritesPerSecond)' Bar (metric.WritesPerSecond' scaleWrite' MAX_RW_WIDTH)));  		Console.ForegroundColor = metric.WrittenBytesPerSecond > 1000 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  		WriteAt (COL3 + 11' y' metric.WrittenBytesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WrittenBytesPerSecond / 1000)' Bar (metric.WrittenBytesPerSecond' scaleSpeed' MAX_WS_WIDTH)));  	} else {  		Console.ForegroundColor = ConsoleColor.DarkRed;  		WriteAt (COL1' y' "{0'8}"' "x");  		WriteAt (COL2' y' "{0'8}"' "x");  		WriteAt (COL3' y' "{0'8}"' "x");  	}  	--y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: foreach (var metric in History) {  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0} | {1'8} {1'40} | {1'8} {1'40} | {1'10} {1'20} |"' TimeSpan.FromSeconds (Math.Round (metric.LocalTime.TotalSeconds' MidpointRounding.AwayFromZero))' "");  	if (metric.Available) {  		bool isMaxRead = maxRead > 0 && metric.ReadsPerSecond == maxRead;  		bool isMaxWrite = maxWrite > 0 && metric.WritesPerSecond == maxWrite;  		bool isMaxSpeed = maxSpeed > 0 && metric.WrittenBytesPerSecond == maxSpeed;  		Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : FrenquencyColor (metric.ReadsPerSecond);  		WriteAt (COL1' y' "{0'8:N0}"' metric.ReadsPerSecond);  		Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : FrenquencyColor (metric.WritesPerSecond);  		WriteAt (COL2' y' "{0'8:N0}"' metric.WritesPerSecond);  		Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : DiskSpeedColor (metric.WrittenBytesPerSecond);  		WriteAt (COL3' y' "{0'10:N3}"' MegaBytes (metric.WrittenBytesPerSecond));  		Console.ForegroundColor = metric.ReadsPerSecond > 10 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  		WriteAt (COL1 + 9' y' metric.ReadsPerSecond == 0 ? "-" : new string (GetBarChar (metric.ReadsPerSecond)' Bar (metric.ReadsPerSecond' scaleRead' MAX_RW_WIDTH)));  		Console.ForegroundColor = metric.WritesPerSecond > 10 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  		WriteAt (COL2 + 9' y' metric.WritesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WritesPerSecond)' Bar (metric.WritesPerSecond' scaleWrite' MAX_RW_WIDTH)));  		Console.ForegroundColor = metric.WrittenBytesPerSecond > 1000 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  		WriteAt (COL3 + 11' y' metric.WrittenBytesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WrittenBytesPerSecond / 1000)' Bar (metric.WrittenBytesPerSecond' scaleSpeed' MAX_WS_WIDTH)));  	} else {  		Console.ForegroundColor = ConsoleColor.DarkRed;  		WriteAt (COL1' y' "{0'8}"' "x");  		WriteAt (COL2' y' "{0'8}"' "x");  		WriteAt (COL3' y' "{0'8}"' "x");  	}  	--y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: foreach (var metric in History) {  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0} | {1'8} {1'40} | {1'8} {1'40} | {1'10} {1'20} |"' TimeSpan.FromSeconds (Math.Round (metric.LocalTime.TotalSeconds' MidpointRounding.AwayFromZero))' "");  	if (metric.Available) {  		bool isMaxRead = maxRead > 0 && metric.ReadsPerSecond == maxRead;  		bool isMaxWrite = maxWrite > 0 && metric.WritesPerSecond == maxWrite;  		bool isMaxSpeed = maxSpeed > 0 && metric.WrittenBytesPerSecond == maxSpeed;  		Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : FrenquencyColor (metric.ReadsPerSecond);  		WriteAt (COL1' y' "{0'8:N0}"' metric.ReadsPerSecond);  		Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : FrenquencyColor (metric.WritesPerSecond);  		WriteAt (COL2' y' "{0'8:N0}"' metric.WritesPerSecond);  		Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : DiskSpeedColor (metric.WrittenBytesPerSecond);  		WriteAt (COL3' y' "{0'10:N3}"' MegaBytes (metric.WrittenBytesPerSecond));  		Console.ForegroundColor = metric.ReadsPerSecond > 10 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  		WriteAt (COL1 + 9' y' metric.ReadsPerSecond == 0 ? "-" : new string (GetBarChar (metric.ReadsPerSecond)' Bar (metric.ReadsPerSecond' scaleRead' MAX_RW_WIDTH)));  		Console.ForegroundColor = metric.WritesPerSecond > 10 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  		WriteAt (COL2 + 9' y' metric.WritesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WritesPerSecond)' Bar (metric.WritesPerSecond' scaleWrite' MAX_RW_WIDTH)));  		Console.ForegroundColor = metric.WrittenBytesPerSecond > 1000 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  		WriteAt (COL3 + 11' y' metric.WrittenBytesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WrittenBytesPerSecond / 1000)' Bar (metric.WrittenBytesPerSecond' scaleSpeed' MAX_WS_WIDTH)));  	} else {  		Console.ForegroundColor = ConsoleColor.DarkRed;  		WriteAt (COL1' y' "{0'8}"' "x");  		WriteAt (COL2' y' "{0'8}"' "x");  		WriteAt (COL3' y' "{0'8}"' "x");  	}  	--y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: if (metric.Available) {  	bool isMaxRead = maxRead > 0 && metric.ReadsPerSecond == maxRead;  	bool isMaxWrite = maxWrite > 0 && metric.WritesPerSecond == maxWrite;  	bool isMaxSpeed = maxSpeed > 0 && metric.WrittenBytesPerSecond == maxSpeed;  	Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : FrenquencyColor (metric.ReadsPerSecond);  	WriteAt (COL1' y' "{0'8:N0}"' metric.ReadsPerSecond);  	Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : FrenquencyColor (metric.WritesPerSecond);  	WriteAt (COL2' y' "{0'8:N0}"' metric.WritesPerSecond);  	Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : DiskSpeedColor (metric.WrittenBytesPerSecond);  	WriteAt (COL3' y' "{0'10:N3}"' MegaBytes (metric.WrittenBytesPerSecond));  	Console.ForegroundColor = metric.ReadsPerSecond > 10 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  	WriteAt (COL1 + 9' y' metric.ReadsPerSecond == 0 ? "-" : new string (GetBarChar (metric.ReadsPerSecond)' Bar (metric.ReadsPerSecond' scaleRead' MAX_RW_WIDTH)));  	Console.ForegroundColor = metric.WritesPerSecond > 10 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  	WriteAt (COL2 + 9' y' metric.WritesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WritesPerSecond)' Bar (metric.WritesPerSecond' scaleWrite' MAX_RW_WIDTH)));  	Console.ForegroundColor = metric.WrittenBytesPerSecond > 1000 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  	WriteAt (COL3 + 11' y' metric.WrittenBytesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WrittenBytesPerSecond / 1000)' Bar (metric.WrittenBytesPerSecond' scaleSpeed' MAX_WS_WIDTH)));  } else {  	Console.ForegroundColor = ConsoleColor.DarkRed;  	WriteAt (COL1' y' "{0'8}"' "x");  	WriteAt (COL2' y' "{0'8}"' "x");  	WriteAt (COL3' y' "{0'8}"' "x");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: if (metric.Available) {  	bool isMaxRead = maxRead > 0 && metric.ReadsPerSecond == maxRead;  	bool isMaxWrite = maxWrite > 0 && metric.WritesPerSecond == maxWrite;  	bool isMaxSpeed = maxSpeed > 0 && metric.WrittenBytesPerSecond == maxSpeed;  	Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : FrenquencyColor (metric.ReadsPerSecond);  	WriteAt (COL1' y' "{0'8:N0}"' metric.ReadsPerSecond);  	Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : FrenquencyColor (metric.WritesPerSecond);  	WriteAt (COL2' y' "{0'8:N0}"' metric.WritesPerSecond);  	Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : DiskSpeedColor (metric.WrittenBytesPerSecond);  	WriteAt (COL3' y' "{0'10:N3}"' MegaBytes (metric.WrittenBytesPerSecond));  	Console.ForegroundColor = metric.ReadsPerSecond > 10 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  	WriteAt (COL1 + 9' y' metric.ReadsPerSecond == 0 ? "-" : new string (GetBarChar (metric.ReadsPerSecond)' Bar (metric.ReadsPerSecond' scaleRead' MAX_RW_WIDTH)));  	Console.ForegroundColor = metric.WritesPerSecond > 10 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  	WriteAt (COL2 + 9' y' metric.WritesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WritesPerSecond)' Bar (metric.WritesPerSecond' scaleWrite' MAX_RW_WIDTH)));  	Console.ForegroundColor = metric.WrittenBytesPerSecond > 1000 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  	WriteAt (COL3 + 11' y' metric.WrittenBytesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WrittenBytesPerSecond / 1000)' Bar (metric.WrittenBytesPerSecond' scaleSpeed' MAX_WS_WIDTH)));  } else {  	Console.ForegroundColor = ConsoleColor.DarkRed;  	WriteAt (COL1' y' "{0'8}"' "x");  	WriteAt (COL2' y' "{0'8}"' "x");  	WriteAt (COL3' y' "{0'8}"' "x");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: if (metric.Available) {  	bool isMaxRead = maxRead > 0 && metric.ReadsPerSecond == maxRead;  	bool isMaxWrite = maxWrite > 0 && metric.WritesPerSecond == maxWrite;  	bool isMaxSpeed = maxSpeed > 0 && metric.WrittenBytesPerSecond == maxSpeed;  	Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : FrenquencyColor (metric.ReadsPerSecond);  	WriteAt (COL1' y' "{0'8:N0}"' metric.ReadsPerSecond);  	Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : FrenquencyColor (metric.WritesPerSecond);  	WriteAt (COL2' y' "{0'8:N0}"' metric.WritesPerSecond);  	Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : DiskSpeedColor (metric.WrittenBytesPerSecond);  	WriteAt (COL3' y' "{0'10:N3}"' MegaBytes (metric.WrittenBytesPerSecond));  	Console.ForegroundColor = metric.ReadsPerSecond > 10 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  	WriteAt (COL1 + 9' y' metric.ReadsPerSecond == 0 ? "-" : new string (GetBarChar (metric.ReadsPerSecond)' Bar (metric.ReadsPerSecond' scaleRead' MAX_RW_WIDTH)));  	Console.ForegroundColor = metric.WritesPerSecond > 10 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  	WriteAt (COL2 + 9' y' metric.WritesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WritesPerSecond)' Bar (metric.WritesPerSecond' scaleWrite' MAX_RW_WIDTH)));  	Console.ForegroundColor = metric.WrittenBytesPerSecond > 1000 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  	WriteAt (COL3 + 11' y' metric.WrittenBytesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WrittenBytesPerSecond / 1000)' Bar (metric.WrittenBytesPerSecond' scaleSpeed' MAX_WS_WIDTH)));  } else {  	Console.ForegroundColor = ConsoleColor.DarkRed;  	WriteAt (COL1' y' "{0'8}"' "x");  	WriteAt (COL2' y' "{0'8}"' "x");  	WriteAt (COL3' y' "{0'8}"' "x");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: if (metric.Available) {  	bool isMaxRead = maxRead > 0 && metric.ReadsPerSecond == maxRead;  	bool isMaxWrite = maxWrite > 0 && metric.WritesPerSecond == maxWrite;  	bool isMaxSpeed = maxSpeed > 0 && metric.WrittenBytesPerSecond == maxSpeed;  	Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : FrenquencyColor (metric.ReadsPerSecond);  	WriteAt (COL1' y' "{0'8:N0}"' metric.ReadsPerSecond);  	Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : FrenquencyColor (metric.WritesPerSecond);  	WriteAt (COL2' y' "{0'8:N0}"' metric.WritesPerSecond);  	Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : DiskSpeedColor (metric.WrittenBytesPerSecond);  	WriteAt (COL3' y' "{0'10:N3}"' MegaBytes (metric.WrittenBytesPerSecond));  	Console.ForegroundColor = metric.ReadsPerSecond > 10 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  	WriteAt (COL1 + 9' y' metric.ReadsPerSecond == 0 ? "-" : new string (GetBarChar (metric.ReadsPerSecond)' Bar (metric.ReadsPerSecond' scaleRead' MAX_RW_WIDTH)));  	Console.ForegroundColor = metric.WritesPerSecond > 10 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  	WriteAt (COL2 + 9' y' metric.WritesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WritesPerSecond)' Bar (metric.WritesPerSecond' scaleWrite' MAX_RW_WIDTH)));  	Console.ForegroundColor = metric.WrittenBytesPerSecond > 1000 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  	WriteAt (COL3 + 11' y' metric.WrittenBytesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WrittenBytesPerSecond / 1000)' Bar (metric.WrittenBytesPerSecond' scaleSpeed' MAX_WS_WIDTH)));  } else {  	Console.ForegroundColor = ConsoleColor.DarkRed;  	WriteAt (COL1' y' "{0'8}"' "x");  	WriteAt (COL2' y' "{0'8}"' "x");  	WriteAt (COL3' y' "{0'8}"' "x");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: if (metric.Available) {  	bool isMaxRead = maxRead > 0 && metric.ReadsPerSecond == maxRead;  	bool isMaxWrite = maxWrite > 0 && metric.WritesPerSecond == maxWrite;  	bool isMaxSpeed = maxSpeed > 0 && metric.WrittenBytesPerSecond == maxSpeed;  	Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : FrenquencyColor (metric.ReadsPerSecond);  	WriteAt (COL1' y' "{0'8:N0}"' metric.ReadsPerSecond);  	Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : FrenquencyColor (metric.WritesPerSecond);  	WriteAt (COL2' y' "{0'8:N0}"' metric.WritesPerSecond);  	Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : DiskSpeedColor (metric.WrittenBytesPerSecond);  	WriteAt (COL3' y' "{0'10:N3}"' MegaBytes (metric.WrittenBytesPerSecond));  	Console.ForegroundColor = metric.ReadsPerSecond > 10 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  	WriteAt (COL1 + 9' y' metric.ReadsPerSecond == 0 ? "-" : new string (GetBarChar (metric.ReadsPerSecond)' Bar (metric.ReadsPerSecond' scaleRead' MAX_RW_WIDTH)));  	Console.ForegroundColor = metric.WritesPerSecond > 10 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  	WriteAt (COL2 + 9' y' metric.WritesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WritesPerSecond)' Bar (metric.WritesPerSecond' scaleWrite' MAX_RW_WIDTH)));  	Console.ForegroundColor = metric.WrittenBytesPerSecond > 1000 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  	WriteAt (COL3 + 11' y' metric.WrittenBytesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WrittenBytesPerSecond / 1000)' Bar (metric.WrittenBytesPerSecond' scaleSpeed' MAX_WS_WIDTH)));  } else {  	Console.ForegroundColor = ConsoleColor.DarkRed;  	WriteAt (COL1' y' "{0'8}"' "x");  	WriteAt (COL2' y' "{0'8}"' "x");  	WriteAt (COL3' y' "{0'8}"' "x");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: if (metric.Available) {  	bool isMaxRead = maxRead > 0 && metric.ReadsPerSecond == maxRead;  	bool isMaxWrite = maxWrite > 0 && metric.WritesPerSecond == maxWrite;  	bool isMaxSpeed = maxSpeed > 0 && metric.WrittenBytesPerSecond == maxSpeed;  	Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : FrenquencyColor (metric.ReadsPerSecond);  	WriteAt (COL1' y' "{0'8:N0}"' metric.ReadsPerSecond);  	Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : FrenquencyColor (metric.WritesPerSecond);  	WriteAt (COL2' y' "{0'8:N0}"' metric.WritesPerSecond);  	Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : DiskSpeedColor (metric.WrittenBytesPerSecond);  	WriteAt (COL3' y' "{0'10:N3}"' MegaBytes (metric.WrittenBytesPerSecond));  	Console.ForegroundColor = metric.ReadsPerSecond > 10 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  	WriteAt (COL1 + 9' y' metric.ReadsPerSecond == 0 ? "-" : new string (GetBarChar (metric.ReadsPerSecond)' Bar (metric.ReadsPerSecond' scaleRead' MAX_RW_WIDTH)));  	Console.ForegroundColor = metric.WritesPerSecond > 10 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  	WriteAt (COL2 + 9' y' metric.WritesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WritesPerSecond)' Bar (metric.WritesPerSecond' scaleWrite' MAX_RW_WIDTH)));  	Console.ForegroundColor = metric.WrittenBytesPerSecond > 1000 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  	WriteAt (COL3 + 11' y' metric.WrittenBytesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WrittenBytesPerSecond / 1000)' Bar (metric.WrittenBytesPerSecond' scaleSpeed' MAX_WS_WIDTH)));  } else {  	Console.ForegroundColor = ConsoleColor.DarkRed;  	WriteAt (COL1' y' "{0'8}"' "x");  	WriteAt (COL2' y' "{0'8}"' "x");  	WriteAt (COL3' y' "{0'8}"' "x");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: if (metric.Available) {  	bool isMaxRead = maxRead > 0 && metric.ReadsPerSecond == maxRead;  	bool isMaxWrite = maxWrite > 0 && metric.WritesPerSecond == maxWrite;  	bool isMaxSpeed = maxSpeed > 0 && metric.WrittenBytesPerSecond == maxSpeed;  	Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : FrenquencyColor (metric.ReadsPerSecond);  	WriteAt (COL1' y' "{0'8:N0}"' metric.ReadsPerSecond);  	Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : FrenquencyColor (metric.WritesPerSecond);  	WriteAt (COL2' y' "{0'8:N0}"' metric.WritesPerSecond);  	Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : DiskSpeedColor (metric.WrittenBytesPerSecond);  	WriteAt (COL3' y' "{0'10:N3}"' MegaBytes (metric.WrittenBytesPerSecond));  	Console.ForegroundColor = metric.ReadsPerSecond > 10 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  	WriteAt (COL1 + 9' y' metric.ReadsPerSecond == 0 ? "-" : new string (GetBarChar (metric.ReadsPerSecond)' Bar (metric.ReadsPerSecond' scaleRead' MAX_RW_WIDTH)));  	Console.ForegroundColor = metric.WritesPerSecond > 10 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  	WriteAt (COL2 + 9' y' metric.WritesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WritesPerSecond)' Bar (metric.WritesPerSecond' scaleWrite' MAX_RW_WIDTH)));  	Console.ForegroundColor = metric.WrittenBytesPerSecond > 1000 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  	WriteAt (COL3 + 11' y' metric.WrittenBytesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WrittenBytesPerSecond / 1000)' Bar (metric.WrittenBytesPerSecond' scaleSpeed' MAX_WS_WIDTH)));  } else {  	Console.ForegroundColor = ConsoleColor.DarkRed;  	WriteAt (COL1' y' "{0'8}"' "x");  	WriteAt (COL2' y' "{0'8}"' "x");  	WriteAt (COL3' y' "{0'8}"' "x");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: Console.ForegroundColor = metric.ReadsPerSecond > 10 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: WriteAt (COL1 + 9' y' metric.ReadsPerSecond == 0 ? "-" : new string (GetBarChar (metric.ReadsPerSecond)' Bar (metric.ReadsPerSecond' scaleRead' MAX_RW_WIDTH)));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: Console.ForegroundColor = metric.WritesPerSecond > 10 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: WriteAt (COL2 + 9' y' metric.WritesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WritesPerSecond)' Bar (metric.WritesPerSecond' scaleWrite' MAX_RW_WIDTH)));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: Console.ForegroundColor = metric.WrittenBytesPerSecond > 1000 ? ConsoleColor.Green : ConsoleColor.DarkCyan;  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: WriteAt (COL3 + 11' y' metric.WrittenBytesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WrittenBytesPerSecond / 1000)' Bar (metric.WrittenBytesPerSecond' scaleSpeed' MAX_WS_WIDTH)));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowMetricsScreen,The following statement contains a magic number: WriteAt (COL3 + 11' y' metric.WrittenBytesPerSecond == 0 ? "-" : new string (GetBarChar (metric.WrittenBytesPerSecond / 1000)' Bar (metric.WrittenBytesPerSecond' scaleSpeed' MAX_WS_WIDTH)));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: if (repaint) {  	Console.Title = "fdbtop - Latency";  	RepaintTopBar ();  	Console.ForegroundColor = ConsoleColor.DarkCyan;  	WriteAt (COL0' 5' "Elapsed");  	WriteAt (COL1' 5' "  Commit (ms)");  	WriteAt (COL2' 5' "    Read (ms)");  	WriteAt (COL3' 5' "   Start (ms)");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: if (repaint) {  	Console.Title = "fdbtop - Latency";  	RepaintTopBar ();  	Console.ForegroundColor = ConsoleColor.DarkCyan;  	WriteAt (COL0' 5' "Elapsed");  	WriteAt (COL1' 5' "  Commit (ms)");  	WriteAt (COL2' 5' "    Read (ms)");  	WriteAt (COL3' 5' "   Start (ms)");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: if (repaint) {  	Console.Title = "fdbtop - Latency";  	RepaintTopBar ();  	Console.ForegroundColor = ConsoleColor.DarkCyan;  	WriteAt (COL0' 5' "Elapsed");  	WriteAt (COL1' 5' "  Commit (ms)");  	WriteAt (COL2' 5' "    Read (ms)");  	WriteAt (COL3' 5' "   Start (ms)");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: if (repaint) {  	Console.Title = "fdbtop - Latency";  	RepaintTopBar ();  	Console.ForegroundColor = ConsoleColor.DarkCyan;  	WriteAt (COL0' 5' "Elapsed");  	WriteAt (COL1' 5' "  Commit (ms)");  	WriteAt (COL2' 5' "    Read (ms)");  	WriteAt (COL3' 5' "   Start (ms)");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: WriteAt (COL0' 5' "Elapsed");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: WriteAt (COL1' 5' "  Commit (ms)");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: WriteAt (COL2' 5' "    Read (ms)");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: WriteAt (COL3' 5' "   Start (ms)");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: WriteAt (COL1 + 14' 5' "{0'35:N3}"' maxCommit * 1000);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: WriteAt (COL1 + 14' 5' "{0'35:N3}"' maxCommit * 1000);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: WriteAt (COL1 + 14' 5' "{0'35:N3}"' maxCommit * 1000);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: WriteAt (COL2 + 14' 5' "{0'35:N3}"' maxRead * 1000);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: WriteAt (COL2 + 14' 5' "{0'35:N3}"' maxRead * 1000);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: WriteAt (COL2 + 14' 5' "{0'35:N3}"' maxRead * 1000);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: WriteAt (COL3 + 14' 5' "{0'18:N3}"' maxStart * 1000);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: WriteAt (COL3 + 14' 5' "{0'18:N3}"' maxStart * 1000);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: WriteAt (COL3 + 14' 5' "{0'18:N3}"' maxStart * 1000);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: foreach (var metric in History) {  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0} | {1'8} {1'40} | {1'8} {1'40} | {1'10} {1'20} |"' TimeSpan.FromSeconds (Math.Round (metric.LocalTime.TotalSeconds' MidpointRounding.AwayFromZero))' "");  	if (metric.Available) {  		bool isMaxRead = maxCommit > 0 && metric.LatencyCommit == maxCommit;  		bool isMaxWrite = maxRead > 0 && metric.LatencyRead == maxRead;  		bool isMaxSpeed = maxStart > 0 && metric.LatencyStart == maxStart;  		Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : LatencyColor (metric.LatencyCommit);  		WriteAt (COL1' y' "{0'8:N3}"' metric.LatencyCommit * 1000);  		Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : LatencyColor (metric.LatencyRead);  		WriteAt (COL2' y' "{0'8:N3}"' metric.LatencyRead * 1000);  		Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : LatencyColor (metric.LatencyStart);  		WriteAt (COL3' y' "{0'10:N3}"' metric.LatencyStart * 1000);  		Console.ForegroundColor = ConsoleColor.Green;  		WriteAt (COL1 + 9' y' metric.LatencyCommit == 0 ? "-" : new string ('|'' Bar (metric.LatencyCommit' scaleCommit' MAX_RW_WIDTH)));  		WriteAt (COL2 + 9' y' metric.LatencyRead == 0 ? "-" : new string ('|'' Bar (metric.LatencyRead' scaleRead' MAX_RW_WIDTH)));  		WriteAt (COL3 + 11' y' metric.LatencyStart == 0 ? "-" : new string ('|'' Bar (metric.LatencyStart' scaleStart' MAX_WS_WIDTH)));  	} else {  		Console.ForegroundColor = ConsoleColor.DarkRed;  		WriteAt (COL1' y' "{0'8}"' "x");  		WriteAt (COL2' y' "{0'8}"' "x");  		WriteAt (COL3' y' "{0'8}"' "x");  	}  	--y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: foreach (var metric in History) {  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0} | {1'8} {1'40} | {1'8} {1'40} | {1'10} {1'20} |"' TimeSpan.FromSeconds (Math.Round (metric.LocalTime.TotalSeconds' MidpointRounding.AwayFromZero))' "");  	if (metric.Available) {  		bool isMaxRead = maxCommit > 0 && metric.LatencyCommit == maxCommit;  		bool isMaxWrite = maxRead > 0 && metric.LatencyRead == maxRead;  		bool isMaxSpeed = maxStart > 0 && metric.LatencyStart == maxStart;  		Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : LatencyColor (metric.LatencyCommit);  		WriteAt (COL1' y' "{0'8:N3}"' metric.LatencyCommit * 1000);  		Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : LatencyColor (metric.LatencyRead);  		WriteAt (COL2' y' "{0'8:N3}"' metric.LatencyRead * 1000);  		Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : LatencyColor (metric.LatencyStart);  		WriteAt (COL3' y' "{0'10:N3}"' metric.LatencyStart * 1000);  		Console.ForegroundColor = ConsoleColor.Green;  		WriteAt (COL1 + 9' y' metric.LatencyCommit == 0 ? "-" : new string ('|'' Bar (metric.LatencyCommit' scaleCommit' MAX_RW_WIDTH)));  		WriteAt (COL2 + 9' y' metric.LatencyRead == 0 ? "-" : new string ('|'' Bar (metric.LatencyRead' scaleRead' MAX_RW_WIDTH)));  		WriteAt (COL3 + 11' y' metric.LatencyStart == 0 ? "-" : new string ('|'' Bar (metric.LatencyStart' scaleStart' MAX_WS_WIDTH)));  	} else {  		Console.ForegroundColor = ConsoleColor.DarkRed;  		WriteAt (COL1' y' "{0'8}"' "x");  		WriteAt (COL2' y' "{0'8}"' "x");  		WriteAt (COL3' y' "{0'8}"' "x");  	}  	--y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: foreach (var metric in History) {  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0} | {1'8} {1'40} | {1'8} {1'40} | {1'10} {1'20} |"' TimeSpan.FromSeconds (Math.Round (metric.LocalTime.TotalSeconds' MidpointRounding.AwayFromZero))' "");  	if (metric.Available) {  		bool isMaxRead = maxCommit > 0 && metric.LatencyCommit == maxCommit;  		bool isMaxWrite = maxRead > 0 && metric.LatencyRead == maxRead;  		bool isMaxSpeed = maxStart > 0 && metric.LatencyStart == maxStart;  		Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : LatencyColor (metric.LatencyCommit);  		WriteAt (COL1' y' "{0'8:N3}"' metric.LatencyCommit * 1000);  		Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : LatencyColor (metric.LatencyRead);  		WriteAt (COL2' y' "{0'8:N3}"' metric.LatencyRead * 1000);  		Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : LatencyColor (metric.LatencyStart);  		WriteAt (COL3' y' "{0'10:N3}"' metric.LatencyStart * 1000);  		Console.ForegroundColor = ConsoleColor.Green;  		WriteAt (COL1 + 9' y' metric.LatencyCommit == 0 ? "-" : new string ('|'' Bar (metric.LatencyCommit' scaleCommit' MAX_RW_WIDTH)));  		WriteAt (COL2 + 9' y' metric.LatencyRead == 0 ? "-" : new string ('|'' Bar (metric.LatencyRead' scaleRead' MAX_RW_WIDTH)));  		WriteAt (COL3 + 11' y' metric.LatencyStart == 0 ? "-" : new string ('|'' Bar (metric.LatencyStart' scaleStart' MAX_WS_WIDTH)));  	} else {  		Console.ForegroundColor = ConsoleColor.DarkRed;  		WriteAt (COL1' y' "{0'8}"' "x");  		WriteAt (COL2' y' "{0'8}"' "x");  		WriteAt (COL3' y' "{0'8}"' "x");  	}  	--y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: foreach (var metric in History) {  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0} | {1'8} {1'40} | {1'8} {1'40} | {1'10} {1'20} |"' TimeSpan.FromSeconds (Math.Round (metric.LocalTime.TotalSeconds' MidpointRounding.AwayFromZero))' "");  	if (metric.Available) {  		bool isMaxRead = maxCommit > 0 && metric.LatencyCommit == maxCommit;  		bool isMaxWrite = maxRead > 0 && metric.LatencyRead == maxRead;  		bool isMaxSpeed = maxStart > 0 && metric.LatencyStart == maxStart;  		Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : LatencyColor (metric.LatencyCommit);  		WriteAt (COL1' y' "{0'8:N3}"' metric.LatencyCommit * 1000);  		Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : LatencyColor (metric.LatencyRead);  		WriteAt (COL2' y' "{0'8:N3}"' metric.LatencyRead * 1000);  		Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : LatencyColor (metric.LatencyStart);  		WriteAt (COL3' y' "{0'10:N3}"' metric.LatencyStart * 1000);  		Console.ForegroundColor = ConsoleColor.Green;  		WriteAt (COL1 + 9' y' metric.LatencyCommit == 0 ? "-" : new string ('|'' Bar (metric.LatencyCommit' scaleCommit' MAX_RW_WIDTH)));  		WriteAt (COL2 + 9' y' metric.LatencyRead == 0 ? "-" : new string ('|'' Bar (metric.LatencyRead' scaleRead' MAX_RW_WIDTH)));  		WriteAt (COL3 + 11' y' metric.LatencyStart == 0 ? "-" : new string ('|'' Bar (metric.LatencyStart' scaleStart' MAX_WS_WIDTH)));  	} else {  		Console.ForegroundColor = ConsoleColor.DarkRed;  		WriteAt (COL1' y' "{0'8}"' "x");  		WriteAt (COL2' y' "{0'8}"' "x");  		WriteAt (COL3' y' "{0'8}"' "x");  	}  	--y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: foreach (var metric in History) {  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0} | {1'8} {1'40} | {1'8} {1'40} | {1'10} {1'20} |"' TimeSpan.FromSeconds (Math.Round (metric.LocalTime.TotalSeconds' MidpointRounding.AwayFromZero))' "");  	if (metric.Available) {  		bool isMaxRead = maxCommit > 0 && metric.LatencyCommit == maxCommit;  		bool isMaxWrite = maxRead > 0 && metric.LatencyRead == maxRead;  		bool isMaxSpeed = maxStart > 0 && metric.LatencyStart == maxStart;  		Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : LatencyColor (metric.LatencyCommit);  		WriteAt (COL1' y' "{0'8:N3}"' metric.LatencyCommit * 1000);  		Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : LatencyColor (metric.LatencyRead);  		WriteAt (COL2' y' "{0'8:N3}"' metric.LatencyRead * 1000);  		Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : LatencyColor (metric.LatencyStart);  		WriteAt (COL3' y' "{0'10:N3}"' metric.LatencyStart * 1000);  		Console.ForegroundColor = ConsoleColor.Green;  		WriteAt (COL1 + 9' y' metric.LatencyCommit == 0 ? "-" : new string ('|'' Bar (metric.LatencyCommit' scaleCommit' MAX_RW_WIDTH)));  		WriteAt (COL2 + 9' y' metric.LatencyRead == 0 ? "-" : new string ('|'' Bar (metric.LatencyRead' scaleRead' MAX_RW_WIDTH)));  		WriteAt (COL3 + 11' y' metric.LatencyStart == 0 ? "-" : new string ('|'' Bar (metric.LatencyStart' scaleStart' MAX_WS_WIDTH)));  	} else {  		Console.ForegroundColor = ConsoleColor.DarkRed;  		WriteAt (COL1' y' "{0'8}"' "x");  		WriteAt (COL2' y' "{0'8}"' "x");  		WriteAt (COL3' y' "{0'8}"' "x");  	}  	--y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: foreach (var metric in History) {  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0} | {1'8} {1'40} | {1'8} {1'40} | {1'10} {1'20} |"' TimeSpan.FromSeconds (Math.Round (metric.LocalTime.TotalSeconds' MidpointRounding.AwayFromZero))' "");  	if (metric.Available) {  		bool isMaxRead = maxCommit > 0 && metric.LatencyCommit == maxCommit;  		bool isMaxWrite = maxRead > 0 && metric.LatencyRead == maxRead;  		bool isMaxSpeed = maxStart > 0 && metric.LatencyStart == maxStart;  		Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : LatencyColor (metric.LatencyCommit);  		WriteAt (COL1' y' "{0'8:N3}"' metric.LatencyCommit * 1000);  		Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : LatencyColor (metric.LatencyRead);  		WriteAt (COL2' y' "{0'8:N3}"' metric.LatencyRead * 1000);  		Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : LatencyColor (metric.LatencyStart);  		WriteAt (COL3' y' "{0'10:N3}"' metric.LatencyStart * 1000);  		Console.ForegroundColor = ConsoleColor.Green;  		WriteAt (COL1 + 9' y' metric.LatencyCommit == 0 ? "-" : new string ('|'' Bar (metric.LatencyCommit' scaleCommit' MAX_RW_WIDTH)));  		WriteAt (COL2 + 9' y' metric.LatencyRead == 0 ? "-" : new string ('|'' Bar (metric.LatencyRead' scaleRead' MAX_RW_WIDTH)));  		WriteAt (COL3 + 11' y' metric.LatencyStart == 0 ? "-" : new string ('|'' Bar (metric.LatencyStart' scaleStart' MAX_WS_WIDTH)));  	} else {  		Console.ForegroundColor = ConsoleColor.DarkRed;  		WriteAt (COL1' y' "{0'8}"' "x");  		WriteAt (COL2' y' "{0'8}"' "x");  		WriteAt (COL3' y' "{0'8}"' "x");  	}  	--y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: if (metric.Available) {  	bool isMaxRead = maxCommit > 0 && metric.LatencyCommit == maxCommit;  	bool isMaxWrite = maxRead > 0 && metric.LatencyRead == maxRead;  	bool isMaxSpeed = maxStart > 0 && metric.LatencyStart == maxStart;  	Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : LatencyColor (metric.LatencyCommit);  	WriteAt (COL1' y' "{0'8:N3}"' metric.LatencyCommit * 1000);  	Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : LatencyColor (metric.LatencyRead);  	WriteAt (COL2' y' "{0'8:N3}"' metric.LatencyRead * 1000);  	Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : LatencyColor (metric.LatencyStart);  	WriteAt (COL3' y' "{0'10:N3}"' metric.LatencyStart * 1000);  	Console.ForegroundColor = ConsoleColor.Green;  	WriteAt (COL1 + 9' y' metric.LatencyCommit == 0 ? "-" : new string ('|'' Bar (metric.LatencyCommit' scaleCommit' MAX_RW_WIDTH)));  	WriteAt (COL2 + 9' y' metric.LatencyRead == 0 ? "-" : new string ('|'' Bar (metric.LatencyRead' scaleRead' MAX_RW_WIDTH)));  	WriteAt (COL3 + 11' y' metric.LatencyStart == 0 ? "-" : new string ('|'' Bar (metric.LatencyStart' scaleStart' MAX_WS_WIDTH)));  } else {  	Console.ForegroundColor = ConsoleColor.DarkRed;  	WriteAt (COL1' y' "{0'8}"' "x");  	WriteAt (COL2' y' "{0'8}"' "x");  	WriteAt (COL3' y' "{0'8}"' "x");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: if (metric.Available) {  	bool isMaxRead = maxCommit > 0 && metric.LatencyCommit == maxCommit;  	bool isMaxWrite = maxRead > 0 && metric.LatencyRead == maxRead;  	bool isMaxSpeed = maxStart > 0 && metric.LatencyStart == maxStart;  	Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : LatencyColor (metric.LatencyCommit);  	WriteAt (COL1' y' "{0'8:N3}"' metric.LatencyCommit * 1000);  	Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : LatencyColor (metric.LatencyRead);  	WriteAt (COL2' y' "{0'8:N3}"' metric.LatencyRead * 1000);  	Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : LatencyColor (metric.LatencyStart);  	WriteAt (COL3' y' "{0'10:N3}"' metric.LatencyStart * 1000);  	Console.ForegroundColor = ConsoleColor.Green;  	WriteAt (COL1 + 9' y' metric.LatencyCommit == 0 ? "-" : new string ('|'' Bar (metric.LatencyCommit' scaleCommit' MAX_RW_WIDTH)));  	WriteAt (COL2 + 9' y' metric.LatencyRead == 0 ? "-" : new string ('|'' Bar (metric.LatencyRead' scaleRead' MAX_RW_WIDTH)));  	WriteAt (COL3 + 11' y' metric.LatencyStart == 0 ? "-" : new string ('|'' Bar (metric.LatencyStart' scaleStart' MAX_WS_WIDTH)));  } else {  	Console.ForegroundColor = ConsoleColor.DarkRed;  	WriteAt (COL1' y' "{0'8}"' "x");  	WriteAt (COL2' y' "{0'8}"' "x");  	WriteAt (COL3' y' "{0'8}"' "x");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: if (metric.Available) {  	bool isMaxRead = maxCommit > 0 && metric.LatencyCommit == maxCommit;  	bool isMaxWrite = maxRead > 0 && metric.LatencyRead == maxRead;  	bool isMaxSpeed = maxStart > 0 && metric.LatencyStart == maxStart;  	Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : LatencyColor (metric.LatencyCommit);  	WriteAt (COL1' y' "{0'8:N3}"' metric.LatencyCommit * 1000);  	Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : LatencyColor (metric.LatencyRead);  	WriteAt (COL2' y' "{0'8:N3}"' metric.LatencyRead * 1000);  	Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : LatencyColor (metric.LatencyStart);  	WriteAt (COL3' y' "{0'10:N3}"' metric.LatencyStart * 1000);  	Console.ForegroundColor = ConsoleColor.Green;  	WriteAt (COL1 + 9' y' metric.LatencyCommit == 0 ? "-" : new string ('|'' Bar (metric.LatencyCommit' scaleCommit' MAX_RW_WIDTH)));  	WriteAt (COL2 + 9' y' metric.LatencyRead == 0 ? "-" : new string ('|'' Bar (metric.LatencyRead' scaleRead' MAX_RW_WIDTH)));  	WriteAt (COL3 + 11' y' metric.LatencyStart == 0 ? "-" : new string ('|'' Bar (metric.LatencyStart' scaleStart' MAX_WS_WIDTH)));  } else {  	Console.ForegroundColor = ConsoleColor.DarkRed;  	WriteAt (COL1' y' "{0'8}"' "x");  	WriteAt (COL2' y' "{0'8}"' "x");  	WriteAt (COL3' y' "{0'8}"' "x");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: if (metric.Available) {  	bool isMaxRead = maxCommit > 0 && metric.LatencyCommit == maxCommit;  	bool isMaxWrite = maxRead > 0 && metric.LatencyRead == maxRead;  	bool isMaxSpeed = maxStart > 0 && metric.LatencyStart == maxStart;  	Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : LatencyColor (metric.LatencyCommit);  	WriteAt (COL1' y' "{0'8:N3}"' metric.LatencyCommit * 1000);  	Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : LatencyColor (metric.LatencyRead);  	WriteAt (COL2' y' "{0'8:N3}"' metric.LatencyRead * 1000);  	Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : LatencyColor (metric.LatencyStart);  	WriteAt (COL3' y' "{0'10:N3}"' metric.LatencyStart * 1000);  	Console.ForegroundColor = ConsoleColor.Green;  	WriteAt (COL1 + 9' y' metric.LatencyCommit == 0 ? "-" : new string ('|'' Bar (metric.LatencyCommit' scaleCommit' MAX_RW_WIDTH)));  	WriteAt (COL2 + 9' y' metric.LatencyRead == 0 ? "-" : new string ('|'' Bar (metric.LatencyRead' scaleRead' MAX_RW_WIDTH)));  	WriteAt (COL3 + 11' y' metric.LatencyStart == 0 ? "-" : new string ('|'' Bar (metric.LatencyStart' scaleStart' MAX_WS_WIDTH)));  } else {  	Console.ForegroundColor = ConsoleColor.DarkRed;  	WriteAt (COL1' y' "{0'8}"' "x");  	WriteAt (COL2' y' "{0'8}"' "x");  	WriteAt (COL3' y' "{0'8}"' "x");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: if (metric.Available) {  	bool isMaxRead = maxCommit > 0 && metric.LatencyCommit == maxCommit;  	bool isMaxWrite = maxRead > 0 && metric.LatencyRead == maxRead;  	bool isMaxSpeed = maxStart > 0 && metric.LatencyStart == maxStart;  	Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : LatencyColor (metric.LatencyCommit);  	WriteAt (COL1' y' "{0'8:N3}"' metric.LatencyCommit * 1000);  	Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : LatencyColor (metric.LatencyRead);  	WriteAt (COL2' y' "{0'8:N3}"' metric.LatencyRead * 1000);  	Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : LatencyColor (metric.LatencyStart);  	WriteAt (COL3' y' "{0'10:N3}"' metric.LatencyStart * 1000);  	Console.ForegroundColor = ConsoleColor.Green;  	WriteAt (COL1 + 9' y' metric.LatencyCommit == 0 ? "-" : new string ('|'' Bar (metric.LatencyCommit' scaleCommit' MAX_RW_WIDTH)));  	WriteAt (COL2 + 9' y' metric.LatencyRead == 0 ? "-" : new string ('|'' Bar (metric.LatencyRead' scaleRead' MAX_RW_WIDTH)));  	WriteAt (COL3 + 11' y' metric.LatencyStart == 0 ? "-" : new string ('|'' Bar (metric.LatencyStart' scaleStart' MAX_WS_WIDTH)));  } else {  	Console.ForegroundColor = ConsoleColor.DarkRed;  	WriteAt (COL1' y' "{0'8}"' "x");  	WriteAt (COL2' y' "{0'8}"' "x");  	WriteAt (COL3' y' "{0'8}"' "x");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: if (metric.Available) {  	bool isMaxRead = maxCommit > 0 && metric.LatencyCommit == maxCommit;  	bool isMaxWrite = maxRead > 0 && metric.LatencyRead == maxRead;  	bool isMaxSpeed = maxStart > 0 && metric.LatencyStart == maxStart;  	Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : LatencyColor (metric.LatencyCommit);  	WriteAt (COL1' y' "{0'8:N3}"' metric.LatencyCommit * 1000);  	Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : LatencyColor (metric.LatencyRead);  	WriteAt (COL2' y' "{0'8:N3}"' metric.LatencyRead * 1000);  	Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : LatencyColor (metric.LatencyStart);  	WriteAt (COL3' y' "{0'10:N3}"' metric.LatencyStart * 1000);  	Console.ForegroundColor = ConsoleColor.Green;  	WriteAt (COL1 + 9' y' metric.LatencyCommit == 0 ? "-" : new string ('|'' Bar (metric.LatencyCommit' scaleCommit' MAX_RW_WIDTH)));  	WriteAt (COL2 + 9' y' metric.LatencyRead == 0 ? "-" : new string ('|'' Bar (metric.LatencyRead' scaleRead' MAX_RW_WIDTH)));  	WriteAt (COL3 + 11' y' metric.LatencyStart == 0 ? "-" : new string ('|'' Bar (metric.LatencyStart' scaleStart' MAX_WS_WIDTH)));  } else {  	Console.ForegroundColor = ConsoleColor.DarkRed;  	WriteAt (COL1' y' "{0'8}"' "x");  	WriteAt (COL2' y' "{0'8}"' "x");  	WriteAt (COL3' y' "{0'8}"' "x");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: WriteAt (COL1' y' "{0'8:N3}"' metric.LatencyCommit * 1000);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: WriteAt (COL2' y' "{0'8:N3}"' metric.LatencyRead * 1000);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: WriteAt (COL3' y' "{0'10:N3}"' metric.LatencyStart * 1000);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: WriteAt (COL1 + 9' y' metric.LatencyCommit == 0 ? "-" : new string ('|'' Bar (metric.LatencyCommit' scaleCommit' MAX_RW_WIDTH)));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: WriteAt (COL2 + 9' y' metric.LatencyRead == 0 ? "-" : new string ('|'' Bar (metric.LatencyRead' scaleRead' MAX_RW_WIDTH)));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowLatencyScreen,The following statement contains a magic number: WriteAt (COL3 + 11' y' metric.LatencyStart == 0 ? "-" : new string ('|'' Bar (metric.LatencyStart' scaleStart' MAX_WS_WIDTH)));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: if (repaint) {  	Console.Title = "fdbtop - Transactions";  	RepaintTopBar ();  	Console.ForegroundColor = ConsoleColor.DarkCyan;  	WriteAt (COL0' 5' "Elapsed");  	WriteAt (COL1' 5' "Started (tps)");  	WriteAt (COL2' 5' "Committed (tps)");  	WriteAt (COL3' 5' "Conflicted (tps)");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: if (repaint) {  	Console.Title = "fdbtop - Transactions";  	RepaintTopBar ();  	Console.ForegroundColor = ConsoleColor.DarkCyan;  	WriteAt (COL0' 5' "Elapsed");  	WriteAt (COL1' 5' "Started (tps)");  	WriteAt (COL2' 5' "Committed (tps)");  	WriteAt (COL3' 5' "Conflicted (tps)");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: if (repaint) {  	Console.Title = "fdbtop - Transactions";  	RepaintTopBar ();  	Console.ForegroundColor = ConsoleColor.DarkCyan;  	WriteAt (COL0' 5' "Elapsed");  	WriteAt (COL1' 5' "Started (tps)");  	WriteAt (COL2' 5' "Committed (tps)");  	WriteAt (COL3' 5' "Conflicted (tps)");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: if (repaint) {  	Console.Title = "fdbtop - Transactions";  	RepaintTopBar ();  	Console.ForegroundColor = ConsoleColor.DarkCyan;  	WriteAt (COL0' 5' "Elapsed");  	WriteAt (COL1' 5' "Started (tps)");  	WriteAt (COL2' 5' "Committed (tps)");  	WriteAt (COL3' 5' "Conflicted (tps)");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: WriteAt (COL0' 5' "Elapsed");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: WriteAt (COL1' 5' "Started (tps)");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: WriteAt (COL2' 5' "Committed (tps)");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: WriteAt (COL3' 5' "Conflicted (tps)");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: WriteAt (COL1 + 14' 5' "{0'35:N0}"' maxStarted);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: WriteAt (COL1 + 14' 5' "{0'35:N0}"' maxStarted);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: WriteAt (COL2 + 16' 5' "{0'33:N0}"' maxCommitted);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: WriteAt (COL2 + 16' 5' "{0'33:N0}"' maxCommitted);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: WriteAt (COL3 + 16' 5' "{0'15:N0}"' maxConflicted);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: WriteAt (COL3 + 16' 5' "{0'15:N0}"' maxConflicted);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: foreach (var metric in History) {  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0} | {1'8} {1'40} | {1'8} {1'40} | {1'10} {1'20} |"' TimeSpan.FromSeconds (Math.Round (metric.LocalTime.TotalSeconds' MidpointRounding.AwayFromZero))' "");  	if (metric.Available) {  		bool isMaxRead = maxStarted > 0 && metric.LatencyCommit == maxStarted;  		bool isMaxWrite = maxCommitted > 0 && metric.LatencyRead == maxCommitted;  		bool isMaxSpeed = maxConflicted > 0 && metric.LatencyStart == maxConflicted;  		Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : FrenquencyColor (metric.TransStarted);  		WriteAt (COL1' y' "{0'8:N0}"' metric.TransStarted);  		Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : FrenquencyColor (metric.TransCommitted);  		WriteAt (COL2' y' "{0'8:N0}"' metric.TransCommitted);  		Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : FrenquencyColor (metric.TransConflicted);  		WriteAt (COL3' y' "{0'8:N1}"' metric.TransConflicted);  		Console.ForegroundColor = metric.TransStarted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  		WriteAt (COL1 + 9' y' metric.TransStarted == 0 ? "-" : new string ('|'' Bar (metric.TransStarted' scaleStarted' MAX_RW_WIDTH)));  		Console.ForegroundColor = metric.TransCommitted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  		WriteAt (COL2 + 9' y' metric.TransCommitted == 0 ? "-" : new string ('|'' Bar (metric.TransCommitted' scaleComitted' MAX_RW_WIDTH)));  		Console.ForegroundColor = metric.TransConflicted > 1000 ? ConsoleColor.Red : metric.TransConflicted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  		WriteAt (COL3 + 9' y' metric.TransConflicted == 0 ? "-" : new string ('|'' Bar (metric.TransConflicted' scaleConflicted' MAX_WS_WIDTH)));  	} else {  		Console.ForegroundColor = ConsoleColor.DarkRed;  		WriteAt (COL1' y' "{0'8}"' "x");  		WriteAt (COL2' y' "{0'8}"' "x");  		WriteAt (COL3' y' "{0'8}"' "x");  	}  	--y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: foreach (var metric in History) {  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0} | {1'8} {1'40} | {1'8} {1'40} | {1'10} {1'20} |"' TimeSpan.FromSeconds (Math.Round (metric.LocalTime.TotalSeconds' MidpointRounding.AwayFromZero))' "");  	if (metric.Available) {  		bool isMaxRead = maxStarted > 0 && metric.LatencyCommit == maxStarted;  		bool isMaxWrite = maxCommitted > 0 && metric.LatencyRead == maxCommitted;  		bool isMaxSpeed = maxConflicted > 0 && metric.LatencyStart == maxConflicted;  		Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : FrenquencyColor (metric.TransStarted);  		WriteAt (COL1' y' "{0'8:N0}"' metric.TransStarted);  		Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : FrenquencyColor (metric.TransCommitted);  		WriteAt (COL2' y' "{0'8:N0}"' metric.TransCommitted);  		Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : FrenquencyColor (metric.TransConflicted);  		WriteAt (COL3' y' "{0'8:N1}"' metric.TransConflicted);  		Console.ForegroundColor = metric.TransStarted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  		WriteAt (COL1 + 9' y' metric.TransStarted == 0 ? "-" : new string ('|'' Bar (metric.TransStarted' scaleStarted' MAX_RW_WIDTH)));  		Console.ForegroundColor = metric.TransCommitted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  		WriteAt (COL2 + 9' y' metric.TransCommitted == 0 ? "-" : new string ('|'' Bar (metric.TransCommitted' scaleComitted' MAX_RW_WIDTH)));  		Console.ForegroundColor = metric.TransConflicted > 1000 ? ConsoleColor.Red : metric.TransConflicted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  		WriteAt (COL3 + 9' y' metric.TransConflicted == 0 ? "-" : new string ('|'' Bar (metric.TransConflicted' scaleConflicted' MAX_WS_WIDTH)));  	} else {  		Console.ForegroundColor = ConsoleColor.DarkRed;  		WriteAt (COL1' y' "{0'8}"' "x");  		WriteAt (COL2' y' "{0'8}"' "x");  		WriteAt (COL3' y' "{0'8}"' "x");  	}  	--y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: foreach (var metric in History) {  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0} | {1'8} {1'40} | {1'8} {1'40} | {1'10} {1'20} |"' TimeSpan.FromSeconds (Math.Round (metric.LocalTime.TotalSeconds' MidpointRounding.AwayFromZero))' "");  	if (metric.Available) {  		bool isMaxRead = maxStarted > 0 && metric.LatencyCommit == maxStarted;  		bool isMaxWrite = maxCommitted > 0 && metric.LatencyRead == maxCommitted;  		bool isMaxSpeed = maxConflicted > 0 && metric.LatencyStart == maxConflicted;  		Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : FrenquencyColor (metric.TransStarted);  		WriteAt (COL1' y' "{0'8:N0}"' metric.TransStarted);  		Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : FrenquencyColor (metric.TransCommitted);  		WriteAt (COL2' y' "{0'8:N0}"' metric.TransCommitted);  		Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : FrenquencyColor (metric.TransConflicted);  		WriteAt (COL3' y' "{0'8:N1}"' metric.TransConflicted);  		Console.ForegroundColor = metric.TransStarted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  		WriteAt (COL1 + 9' y' metric.TransStarted == 0 ? "-" : new string ('|'' Bar (metric.TransStarted' scaleStarted' MAX_RW_WIDTH)));  		Console.ForegroundColor = metric.TransCommitted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  		WriteAt (COL2 + 9' y' metric.TransCommitted == 0 ? "-" : new string ('|'' Bar (metric.TransCommitted' scaleComitted' MAX_RW_WIDTH)));  		Console.ForegroundColor = metric.TransConflicted > 1000 ? ConsoleColor.Red : metric.TransConflicted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  		WriteAt (COL3 + 9' y' metric.TransConflicted == 0 ? "-" : new string ('|'' Bar (metric.TransConflicted' scaleConflicted' MAX_WS_WIDTH)));  	} else {  		Console.ForegroundColor = ConsoleColor.DarkRed;  		WriteAt (COL1' y' "{0'8}"' "x");  		WriteAt (COL2' y' "{0'8}"' "x");  		WriteAt (COL3' y' "{0'8}"' "x");  	}  	--y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: foreach (var metric in History) {  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0} | {1'8} {1'40} | {1'8} {1'40} | {1'10} {1'20} |"' TimeSpan.FromSeconds (Math.Round (metric.LocalTime.TotalSeconds' MidpointRounding.AwayFromZero))' "");  	if (metric.Available) {  		bool isMaxRead = maxStarted > 0 && metric.LatencyCommit == maxStarted;  		bool isMaxWrite = maxCommitted > 0 && metric.LatencyRead == maxCommitted;  		bool isMaxSpeed = maxConflicted > 0 && metric.LatencyStart == maxConflicted;  		Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : FrenquencyColor (metric.TransStarted);  		WriteAt (COL1' y' "{0'8:N0}"' metric.TransStarted);  		Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : FrenquencyColor (metric.TransCommitted);  		WriteAt (COL2' y' "{0'8:N0}"' metric.TransCommitted);  		Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : FrenquencyColor (metric.TransConflicted);  		WriteAt (COL3' y' "{0'8:N1}"' metric.TransConflicted);  		Console.ForegroundColor = metric.TransStarted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  		WriteAt (COL1 + 9' y' metric.TransStarted == 0 ? "-" : new string ('|'' Bar (metric.TransStarted' scaleStarted' MAX_RW_WIDTH)));  		Console.ForegroundColor = metric.TransCommitted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  		WriteAt (COL2 + 9' y' metric.TransCommitted == 0 ? "-" : new string ('|'' Bar (metric.TransCommitted' scaleComitted' MAX_RW_WIDTH)));  		Console.ForegroundColor = metric.TransConflicted > 1000 ? ConsoleColor.Red : metric.TransConflicted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  		WriteAt (COL3 + 9' y' metric.TransConflicted == 0 ? "-" : new string ('|'' Bar (metric.TransConflicted' scaleConflicted' MAX_WS_WIDTH)));  	} else {  		Console.ForegroundColor = ConsoleColor.DarkRed;  		WriteAt (COL1' y' "{0'8}"' "x");  		WriteAt (COL2' y' "{0'8}"' "x");  		WriteAt (COL3' y' "{0'8}"' "x");  	}  	--y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: foreach (var metric in History) {  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0} | {1'8} {1'40} | {1'8} {1'40} | {1'10} {1'20} |"' TimeSpan.FromSeconds (Math.Round (metric.LocalTime.TotalSeconds' MidpointRounding.AwayFromZero))' "");  	if (metric.Available) {  		bool isMaxRead = maxStarted > 0 && metric.LatencyCommit == maxStarted;  		bool isMaxWrite = maxCommitted > 0 && metric.LatencyRead == maxCommitted;  		bool isMaxSpeed = maxConflicted > 0 && metric.LatencyStart == maxConflicted;  		Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : FrenquencyColor (metric.TransStarted);  		WriteAt (COL1' y' "{0'8:N0}"' metric.TransStarted);  		Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : FrenquencyColor (metric.TransCommitted);  		WriteAt (COL2' y' "{0'8:N0}"' metric.TransCommitted);  		Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : FrenquencyColor (metric.TransConflicted);  		WriteAt (COL3' y' "{0'8:N1}"' metric.TransConflicted);  		Console.ForegroundColor = metric.TransStarted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  		WriteAt (COL1 + 9' y' metric.TransStarted == 0 ? "-" : new string ('|'' Bar (metric.TransStarted' scaleStarted' MAX_RW_WIDTH)));  		Console.ForegroundColor = metric.TransCommitted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  		WriteAt (COL2 + 9' y' metric.TransCommitted == 0 ? "-" : new string ('|'' Bar (metric.TransCommitted' scaleComitted' MAX_RW_WIDTH)));  		Console.ForegroundColor = metric.TransConflicted > 1000 ? ConsoleColor.Red : metric.TransConflicted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  		WriteAt (COL3 + 9' y' metric.TransConflicted == 0 ? "-" : new string ('|'' Bar (metric.TransConflicted' scaleConflicted' MAX_WS_WIDTH)));  	} else {  		Console.ForegroundColor = ConsoleColor.DarkRed;  		WriteAt (COL1' y' "{0'8}"' "x");  		WriteAt (COL2' y' "{0'8}"' "x");  		WriteAt (COL3' y' "{0'8}"' "x");  	}  	--y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: foreach (var metric in History) {  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0} | {1'8} {1'40} | {1'8} {1'40} | {1'10} {1'20} |"' TimeSpan.FromSeconds (Math.Round (metric.LocalTime.TotalSeconds' MidpointRounding.AwayFromZero))' "");  	if (metric.Available) {  		bool isMaxRead = maxStarted > 0 && metric.LatencyCommit == maxStarted;  		bool isMaxWrite = maxCommitted > 0 && metric.LatencyRead == maxCommitted;  		bool isMaxSpeed = maxConflicted > 0 && metric.LatencyStart == maxConflicted;  		Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : FrenquencyColor (metric.TransStarted);  		WriteAt (COL1' y' "{0'8:N0}"' metric.TransStarted);  		Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : FrenquencyColor (metric.TransCommitted);  		WriteAt (COL2' y' "{0'8:N0}"' metric.TransCommitted);  		Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : FrenquencyColor (metric.TransConflicted);  		WriteAt (COL3' y' "{0'8:N1}"' metric.TransConflicted);  		Console.ForegroundColor = metric.TransStarted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  		WriteAt (COL1 + 9' y' metric.TransStarted == 0 ? "-" : new string ('|'' Bar (metric.TransStarted' scaleStarted' MAX_RW_WIDTH)));  		Console.ForegroundColor = metric.TransCommitted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  		WriteAt (COL2 + 9' y' metric.TransCommitted == 0 ? "-" : new string ('|'' Bar (metric.TransCommitted' scaleComitted' MAX_RW_WIDTH)));  		Console.ForegroundColor = metric.TransConflicted > 1000 ? ConsoleColor.Red : metric.TransConflicted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  		WriteAt (COL3 + 9' y' metric.TransConflicted == 0 ? "-" : new string ('|'' Bar (metric.TransConflicted' scaleConflicted' MAX_WS_WIDTH)));  	} else {  		Console.ForegroundColor = ConsoleColor.DarkRed;  		WriteAt (COL1' y' "{0'8}"' "x");  		WriteAt (COL2' y' "{0'8}"' "x");  		WriteAt (COL3' y' "{0'8}"' "x");  	}  	--y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: foreach (var metric in History) {  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0} | {1'8} {1'40} | {1'8} {1'40} | {1'10} {1'20} |"' TimeSpan.FromSeconds (Math.Round (metric.LocalTime.TotalSeconds' MidpointRounding.AwayFromZero))' "");  	if (metric.Available) {  		bool isMaxRead = maxStarted > 0 && metric.LatencyCommit == maxStarted;  		bool isMaxWrite = maxCommitted > 0 && metric.LatencyRead == maxCommitted;  		bool isMaxSpeed = maxConflicted > 0 && metric.LatencyStart == maxConflicted;  		Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : FrenquencyColor (metric.TransStarted);  		WriteAt (COL1' y' "{0'8:N0}"' metric.TransStarted);  		Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : FrenquencyColor (metric.TransCommitted);  		WriteAt (COL2' y' "{0'8:N0}"' metric.TransCommitted);  		Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : FrenquencyColor (metric.TransConflicted);  		WriteAt (COL3' y' "{0'8:N1}"' metric.TransConflicted);  		Console.ForegroundColor = metric.TransStarted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  		WriteAt (COL1 + 9' y' metric.TransStarted == 0 ? "-" : new string ('|'' Bar (metric.TransStarted' scaleStarted' MAX_RW_WIDTH)));  		Console.ForegroundColor = metric.TransCommitted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  		WriteAt (COL2 + 9' y' metric.TransCommitted == 0 ? "-" : new string ('|'' Bar (metric.TransCommitted' scaleComitted' MAX_RW_WIDTH)));  		Console.ForegroundColor = metric.TransConflicted > 1000 ? ConsoleColor.Red : metric.TransConflicted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  		WriteAt (COL3 + 9' y' metric.TransConflicted == 0 ? "-" : new string ('|'' Bar (metric.TransConflicted' scaleConflicted' MAX_WS_WIDTH)));  	} else {  		Console.ForegroundColor = ConsoleColor.DarkRed;  		WriteAt (COL1' y' "{0'8}"' "x");  		WriteAt (COL2' y' "{0'8}"' "x");  		WriteAt (COL3' y' "{0'8}"' "x");  	}  	--y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: if (metric.Available) {  	bool isMaxRead = maxStarted > 0 && metric.LatencyCommit == maxStarted;  	bool isMaxWrite = maxCommitted > 0 && metric.LatencyRead == maxCommitted;  	bool isMaxSpeed = maxConflicted > 0 && metric.LatencyStart == maxConflicted;  	Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : FrenquencyColor (metric.TransStarted);  	WriteAt (COL1' y' "{0'8:N0}"' metric.TransStarted);  	Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : FrenquencyColor (metric.TransCommitted);  	WriteAt (COL2' y' "{0'8:N0}"' metric.TransCommitted);  	Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : FrenquencyColor (metric.TransConflicted);  	WriteAt (COL3' y' "{0'8:N1}"' metric.TransConflicted);  	Console.ForegroundColor = metric.TransStarted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  	WriteAt (COL1 + 9' y' metric.TransStarted == 0 ? "-" : new string ('|'' Bar (metric.TransStarted' scaleStarted' MAX_RW_WIDTH)));  	Console.ForegroundColor = metric.TransCommitted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  	WriteAt (COL2 + 9' y' metric.TransCommitted == 0 ? "-" : new string ('|'' Bar (metric.TransCommitted' scaleComitted' MAX_RW_WIDTH)));  	Console.ForegroundColor = metric.TransConflicted > 1000 ? ConsoleColor.Red : metric.TransConflicted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  	WriteAt (COL3 + 9' y' metric.TransConflicted == 0 ? "-" : new string ('|'' Bar (metric.TransConflicted' scaleConflicted' MAX_WS_WIDTH)));  } else {  	Console.ForegroundColor = ConsoleColor.DarkRed;  	WriteAt (COL1' y' "{0'8}"' "x");  	WriteAt (COL2' y' "{0'8}"' "x");  	WriteAt (COL3' y' "{0'8}"' "x");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: if (metric.Available) {  	bool isMaxRead = maxStarted > 0 && metric.LatencyCommit == maxStarted;  	bool isMaxWrite = maxCommitted > 0 && metric.LatencyRead == maxCommitted;  	bool isMaxSpeed = maxConflicted > 0 && metric.LatencyStart == maxConflicted;  	Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : FrenquencyColor (metric.TransStarted);  	WriteAt (COL1' y' "{0'8:N0}"' metric.TransStarted);  	Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : FrenquencyColor (metric.TransCommitted);  	WriteAt (COL2' y' "{0'8:N0}"' metric.TransCommitted);  	Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : FrenquencyColor (metric.TransConflicted);  	WriteAt (COL3' y' "{0'8:N1}"' metric.TransConflicted);  	Console.ForegroundColor = metric.TransStarted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  	WriteAt (COL1 + 9' y' metric.TransStarted == 0 ? "-" : new string ('|'' Bar (metric.TransStarted' scaleStarted' MAX_RW_WIDTH)));  	Console.ForegroundColor = metric.TransCommitted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  	WriteAt (COL2 + 9' y' metric.TransCommitted == 0 ? "-" : new string ('|'' Bar (metric.TransCommitted' scaleComitted' MAX_RW_WIDTH)));  	Console.ForegroundColor = metric.TransConflicted > 1000 ? ConsoleColor.Red : metric.TransConflicted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  	WriteAt (COL3 + 9' y' metric.TransConflicted == 0 ? "-" : new string ('|'' Bar (metric.TransConflicted' scaleConflicted' MAX_WS_WIDTH)));  } else {  	Console.ForegroundColor = ConsoleColor.DarkRed;  	WriteAt (COL1' y' "{0'8}"' "x");  	WriteAt (COL2' y' "{0'8}"' "x");  	WriteAt (COL3' y' "{0'8}"' "x");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: if (metric.Available) {  	bool isMaxRead = maxStarted > 0 && metric.LatencyCommit == maxStarted;  	bool isMaxWrite = maxCommitted > 0 && metric.LatencyRead == maxCommitted;  	bool isMaxSpeed = maxConflicted > 0 && metric.LatencyStart == maxConflicted;  	Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : FrenquencyColor (metric.TransStarted);  	WriteAt (COL1' y' "{0'8:N0}"' metric.TransStarted);  	Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : FrenquencyColor (metric.TransCommitted);  	WriteAt (COL2' y' "{0'8:N0}"' metric.TransCommitted);  	Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : FrenquencyColor (metric.TransConflicted);  	WriteAt (COL3' y' "{0'8:N1}"' metric.TransConflicted);  	Console.ForegroundColor = metric.TransStarted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  	WriteAt (COL1 + 9' y' metric.TransStarted == 0 ? "-" : new string ('|'' Bar (metric.TransStarted' scaleStarted' MAX_RW_WIDTH)));  	Console.ForegroundColor = metric.TransCommitted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  	WriteAt (COL2 + 9' y' metric.TransCommitted == 0 ? "-" : new string ('|'' Bar (metric.TransCommitted' scaleComitted' MAX_RW_WIDTH)));  	Console.ForegroundColor = metric.TransConflicted > 1000 ? ConsoleColor.Red : metric.TransConflicted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  	WriteAt (COL3 + 9' y' metric.TransConflicted == 0 ? "-" : new string ('|'' Bar (metric.TransConflicted' scaleConflicted' MAX_WS_WIDTH)));  } else {  	Console.ForegroundColor = ConsoleColor.DarkRed;  	WriteAt (COL1' y' "{0'8}"' "x");  	WriteAt (COL2' y' "{0'8}"' "x");  	WriteAt (COL3' y' "{0'8}"' "x");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: if (metric.Available) {  	bool isMaxRead = maxStarted > 0 && metric.LatencyCommit == maxStarted;  	bool isMaxWrite = maxCommitted > 0 && metric.LatencyRead == maxCommitted;  	bool isMaxSpeed = maxConflicted > 0 && metric.LatencyStart == maxConflicted;  	Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : FrenquencyColor (metric.TransStarted);  	WriteAt (COL1' y' "{0'8:N0}"' metric.TransStarted);  	Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : FrenquencyColor (metric.TransCommitted);  	WriteAt (COL2' y' "{0'8:N0}"' metric.TransCommitted);  	Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : FrenquencyColor (metric.TransConflicted);  	WriteAt (COL3' y' "{0'8:N1}"' metric.TransConflicted);  	Console.ForegroundColor = metric.TransStarted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  	WriteAt (COL1 + 9' y' metric.TransStarted == 0 ? "-" : new string ('|'' Bar (metric.TransStarted' scaleStarted' MAX_RW_WIDTH)));  	Console.ForegroundColor = metric.TransCommitted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  	WriteAt (COL2 + 9' y' metric.TransCommitted == 0 ? "-" : new string ('|'' Bar (metric.TransCommitted' scaleComitted' MAX_RW_WIDTH)));  	Console.ForegroundColor = metric.TransConflicted > 1000 ? ConsoleColor.Red : metric.TransConflicted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  	WriteAt (COL3 + 9' y' metric.TransConflicted == 0 ? "-" : new string ('|'' Bar (metric.TransConflicted' scaleConflicted' MAX_WS_WIDTH)));  } else {  	Console.ForegroundColor = ConsoleColor.DarkRed;  	WriteAt (COL1' y' "{0'8}"' "x");  	WriteAt (COL2' y' "{0'8}"' "x");  	WriteAt (COL3' y' "{0'8}"' "x");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: if (metric.Available) {  	bool isMaxRead = maxStarted > 0 && metric.LatencyCommit == maxStarted;  	bool isMaxWrite = maxCommitted > 0 && metric.LatencyRead == maxCommitted;  	bool isMaxSpeed = maxConflicted > 0 && metric.LatencyStart == maxConflicted;  	Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : FrenquencyColor (metric.TransStarted);  	WriteAt (COL1' y' "{0'8:N0}"' metric.TransStarted);  	Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : FrenquencyColor (metric.TransCommitted);  	WriteAt (COL2' y' "{0'8:N0}"' metric.TransCommitted);  	Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : FrenquencyColor (metric.TransConflicted);  	WriteAt (COL3' y' "{0'8:N1}"' metric.TransConflicted);  	Console.ForegroundColor = metric.TransStarted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  	WriteAt (COL1 + 9' y' metric.TransStarted == 0 ? "-" : new string ('|'' Bar (metric.TransStarted' scaleStarted' MAX_RW_WIDTH)));  	Console.ForegroundColor = metric.TransCommitted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  	WriteAt (COL2 + 9' y' metric.TransCommitted == 0 ? "-" : new string ('|'' Bar (metric.TransCommitted' scaleComitted' MAX_RW_WIDTH)));  	Console.ForegroundColor = metric.TransConflicted > 1000 ? ConsoleColor.Red : metric.TransConflicted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  	WriteAt (COL3 + 9' y' metric.TransConflicted == 0 ? "-" : new string ('|'' Bar (metric.TransConflicted' scaleConflicted' MAX_WS_WIDTH)));  } else {  	Console.ForegroundColor = ConsoleColor.DarkRed;  	WriteAt (COL1' y' "{0'8}"' "x");  	WriteAt (COL2' y' "{0'8}"' "x");  	WriteAt (COL3' y' "{0'8}"' "x");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: if (metric.Available) {  	bool isMaxRead = maxStarted > 0 && metric.LatencyCommit == maxStarted;  	bool isMaxWrite = maxCommitted > 0 && metric.LatencyRead == maxCommitted;  	bool isMaxSpeed = maxConflicted > 0 && metric.LatencyStart == maxConflicted;  	Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : FrenquencyColor (metric.TransStarted);  	WriteAt (COL1' y' "{0'8:N0}"' metric.TransStarted);  	Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : FrenquencyColor (metric.TransCommitted);  	WriteAt (COL2' y' "{0'8:N0}"' metric.TransCommitted);  	Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : FrenquencyColor (metric.TransConflicted);  	WriteAt (COL3' y' "{0'8:N1}"' metric.TransConflicted);  	Console.ForegroundColor = metric.TransStarted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  	WriteAt (COL1 + 9' y' metric.TransStarted == 0 ? "-" : new string ('|'' Bar (metric.TransStarted' scaleStarted' MAX_RW_WIDTH)));  	Console.ForegroundColor = metric.TransCommitted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  	WriteAt (COL2 + 9' y' metric.TransCommitted == 0 ? "-" : new string ('|'' Bar (metric.TransCommitted' scaleComitted' MAX_RW_WIDTH)));  	Console.ForegroundColor = metric.TransConflicted > 1000 ? ConsoleColor.Red : metric.TransConflicted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  	WriteAt (COL3 + 9' y' metric.TransConflicted == 0 ? "-" : new string ('|'' Bar (metric.TransConflicted' scaleConflicted' MAX_WS_WIDTH)));  } else {  	Console.ForegroundColor = ConsoleColor.DarkRed;  	WriteAt (COL1' y' "{0'8}"' "x");  	WriteAt (COL2' y' "{0'8}"' "x");  	WriteAt (COL3' y' "{0'8}"' "x");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: if (metric.Available) {  	bool isMaxRead = maxStarted > 0 && metric.LatencyCommit == maxStarted;  	bool isMaxWrite = maxCommitted > 0 && metric.LatencyRead == maxCommitted;  	bool isMaxSpeed = maxConflicted > 0 && metric.LatencyStart == maxConflicted;  	Console.ForegroundColor = isMaxRead ? ConsoleColor.Cyan : FrenquencyColor (metric.TransStarted);  	WriteAt (COL1' y' "{0'8:N0}"' metric.TransStarted);  	Console.ForegroundColor = isMaxWrite ? ConsoleColor.Cyan : FrenquencyColor (metric.TransCommitted);  	WriteAt (COL2' y' "{0'8:N0}"' metric.TransCommitted);  	Console.ForegroundColor = isMaxSpeed ? ConsoleColor.Cyan : FrenquencyColor (metric.TransConflicted);  	WriteAt (COL3' y' "{0'8:N1}"' metric.TransConflicted);  	Console.ForegroundColor = metric.TransStarted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  	WriteAt (COL1 + 9' y' metric.TransStarted == 0 ? "-" : new string ('|'' Bar (metric.TransStarted' scaleStarted' MAX_RW_WIDTH)));  	Console.ForegroundColor = metric.TransCommitted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  	WriteAt (COL2 + 9' y' metric.TransCommitted == 0 ? "-" : new string ('|'' Bar (metric.TransCommitted' scaleComitted' MAX_RW_WIDTH)));  	Console.ForegroundColor = metric.TransConflicted > 1000 ? ConsoleColor.Red : metric.TransConflicted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  	WriteAt (COL3 + 9' y' metric.TransConflicted == 0 ? "-" : new string ('|'' Bar (metric.TransConflicted' scaleConflicted' MAX_WS_WIDTH)));  } else {  	Console.ForegroundColor = ConsoleColor.DarkRed;  	WriteAt (COL1' y' "{0'8}"' "x");  	WriteAt (COL2' y' "{0'8}"' "x");  	WriteAt (COL3' y' "{0'8}"' "x");  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: Console.ForegroundColor = metric.TransStarted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: WriteAt (COL1 + 9' y' metric.TransStarted == 0 ? "-" : new string ('|'' Bar (metric.TransStarted' scaleStarted' MAX_RW_WIDTH)));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: Console.ForegroundColor = metric.TransCommitted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: WriteAt (COL2 + 9' y' metric.TransCommitted == 0 ? "-" : new string ('|'' Bar (metric.TransCommitted' scaleComitted' MAX_RW_WIDTH)));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: Console.ForegroundColor = metric.TransConflicted > 1000 ? ConsoleColor.Red : metric.TransConflicted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: Console.ForegroundColor = metric.TransConflicted > 1000 ? ConsoleColor.Red : metric.TransConflicted > 10 ? ConsoleColor.Green : ConsoleColor.DarkGreen;  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowTransactionScreen,The following statement contains a magic number: WriteAt (COL3 + 9' y' metric.TransConflicted == 0 ? "-" : new string ('|'' Bar (metric.TransConflicted' scaleConflicted' MAX_WS_WIDTH)));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: if (repaint) {  	Console.Title = "fdbtop - Processes";  	RepaintTopBar ();  	Console.ForegroundColor = ConsoleColor.DarkCyan;  	WriteAt (COL0' 5' "Address (port)");  	WriteAt (COL1' 5' "Network in / out (MB/s)");  	WriteAt (COL3' 5' "CPU (%core)");  	WriteAt (COL4' 5' "Memory Free / Total (GB)");  	WriteAt (COL6' 5' "HDD (%busy)");  	WriteAt (COL7' 5' "Roles");  	#if DEBUG  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (COL0' 6' "0 - - - - - -");  	WriteAt (COL1' 6' "1 - - - - - -");  	WriteAt (COL2' 6' "2 - - - - - -");  	WriteAt (COL3' 6' "3 - - - - - -");  	WriteAt (COL4' 6' "4 - - - - - -");  	WriteAt (COL5' 6' "5 - - - - - -");  	WriteAt (COL6' 6' "6 - - - - - -");  	WriteAt (COL7' 6' "7 - - - - - -");  	#endif  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: if (repaint) {  	Console.Title = "fdbtop - Processes";  	RepaintTopBar ();  	Console.ForegroundColor = ConsoleColor.DarkCyan;  	WriteAt (COL0' 5' "Address (port)");  	WriteAt (COL1' 5' "Network in / out (MB/s)");  	WriteAt (COL3' 5' "CPU (%core)");  	WriteAt (COL4' 5' "Memory Free / Total (GB)");  	WriteAt (COL6' 5' "HDD (%busy)");  	WriteAt (COL7' 5' "Roles");  	#if DEBUG  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (COL0' 6' "0 - - - - - -");  	WriteAt (COL1' 6' "1 - - - - - -");  	WriteAt (COL2' 6' "2 - - - - - -");  	WriteAt (COL3' 6' "3 - - - - - -");  	WriteAt (COL4' 6' "4 - - - - - -");  	WriteAt (COL5' 6' "5 - - - - - -");  	WriteAt (COL6' 6' "6 - - - - - -");  	WriteAt (COL7' 6' "7 - - - - - -");  	#endif  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: if (repaint) {  	Console.Title = "fdbtop - Processes";  	RepaintTopBar ();  	Console.ForegroundColor = ConsoleColor.DarkCyan;  	WriteAt (COL0' 5' "Address (port)");  	WriteAt (COL1' 5' "Network in / out (MB/s)");  	WriteAt (COL3' 5' "CPU (%core)");  	WriteAt (COL4' 5' "Memory Free / Total (GB)");  	WriteAt (COL6' 5' "HDD (%busy)");  	WriteAt (COL7' 5' "Roles");  	#if DEBUG  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (COL0' 6' "0 - - - - - -");  	WriteAt (COL1' 6' "1 - - - - - -");  	WriteAt (COL2' 6' "2 - - - - - -");  	WriteAt (COL3' 6' "3 - - - - - -");  	WriteAt (COL4' 6' "4 - - - - - -");  	WriteAt (COL5' 6' "5 - - - - - -");  	WriteAt (COL6' 6' "6 - - - - - -");  	WriteAt (COL7' 6' "7 - - - - - -");  	#endif  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: if (repaint) {  	Console.Title = "fdbtop - Processes";  	RepaintTopBar ();  	Console.ForegroundColor = ConsoleColor.DarkCyan;  	WriteAt (COL0' 5' "Address (port)");  	WriteAt (COL1' 5' "Network in / out (MB/s)");  	WriteAt (COL3' 5' "CPU (%core)");  	WriteAt (COL4' 5' "Memory Free / Total (GB)");  	WriteAt (COL6' 5' "HDD (%busy)");  	WriteAt (COL7' 5' "Roles");  	#if DEBUG  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (COL0' 6' "0 - - - - - -");  	WriteAt (COL1' 6' "1 - - - - - -");  	WriteAt (COL2' 6' "2 - - - - - -");  	WriteAt (COL3' 6' "3 - - - - - -");  	WriteAt (COL4' 6' "4 - - - - - -");  	WriteAt (COL5' 6' "5 - - - - - -");  	WriteAt (COL6' 6' "6 - - - - - -");  	WriteAt (COL7' 6' "7 - - - - - -");  	#endif  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: if (repaint) {  	Console.Title = "fdbtop - Processes";  	RepaintTopBar ();  	Console.ForegroundColor = ConsoleColor.DarkCyan;  	WriteAt (COL0' 5' "Address (port)");  	WriteAt (COL1' 5' "Network in / out (MB/s)");  	WriteAt (COL3' 5' "CPU (%core)");  	WriteAt (COL4' 5' "Memory Free / Total (GB)");  	WriteAt (COL6' 5' "HDD (%busy)");  	WriteAt (COL7' 5' "Roles");  	#if DEBUG  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (COL0' 6' "0 - - - - - -");  	WriteAt (COL1' 6' "1 - - - - - -");  	WriteAt (COL2' 6' "2 - - - - - -");  	WriteAt (COL3' 6' "3 - - - - - -");  	WriteAt (COL4' 6' "4 - - - - - -");  	WriteAt (COL5' 6' "5 - - - - - -");  	WriteAt (COL6' 6' "6 - - - - - -");  	WriteAt (COL7' 6' "7 - - - - - -");  	#endif  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: if (repaint) {  	Console.Title = "fdbtop - Processes";  	RepaintTopBar ();  	Console.ForegroundColor = ConsoleColor.DarkCyan;  	WriteAt (COL0' 5' "Address (port)");  	WriteAt (COL1' 5' "Network in / out (MB/s)");  	WriteAt (COL3' 5' "CPU (%core)");  	WriteAt (COL4' 5' "Memory Free / Total (GB)");  	WriteAt (COL6' 5' "HDD (%busy)");  	WriteAt (COL7' 5' "Roles");  	#if DEBUG  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (COL0' 6' "0 - - - - - -");  	WriteAt (COL1' 6' "1 - - - - - -");  	WriteAt (COL2' 6' "2 - - - - - -");  	WriteAt (COL3' 6' "3 - - - - - -");  	WriteAt (COL4' 6' "4 - - - - - -");  	WriteAt (COL5' 6' "5 - - - - - -");  	WriteAt (COL6' 6' "6 - - - - - -");  	WriteAt (COL7' 6' "7 - - - - - -");  	#endif  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: if (repaint) {  	Console.Title = "fdbtop - Processes";  	RepaintTopBar ();  	Console.ForegroundColor = ConsoleColor.DarkCyan;  	WriteAt (COL0' 5' "Address (port)");  	WriteAt (COL1' 5' "Network in / out (MB/s)");  	WriteAt (COL3' 5' "CPU (%core)");  	WriteAt (COL4' 5' "Memory Free / Total (GB)");  	WriteAt (COL6' 5' "HDD (%busy)");  	WriteAt (COL7' 5' "Roles");  	#if DEBUG  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (COL0' 6' "0 - - - - - -");  	WriteAt (COL1' 6' "1 - - - - - -");  	WriteAt (COL2' 6' "2 - - - - - -");  	WriteAt (COL3' 6' "3 - - - - - -");  	WriteAt (COL4' 6' "4 - - - - - -");  	WriteAt (COL5' 6' "5 - - - - - -");  	WriteAt (COL6' 6' "6 - - - - - -");  	WriteAt (COL7' 6' "7 - - - - - -");  	#endif  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: if (repaint) {  	Console.Title = "fdbtop - Processes";  	RepaintTopBar ();  	Console.ForegroundColor = ConsoleColor.DarkCyan;  	WriteAt (COL0' 5' "Address (port)");  	WriteAt (COL1' 5' "Network in / out (MB/s)");  	WriteAt (COL3' 5' "CPU (%core)");  	WriteAt (COL4' 5' "Memory Free / Total (GB)");  	WriteAt (COL6' 5' "HDD (%busy)");  	WriteAt (COL7' 5' "Roles");  	#if DEBUG  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (COL0' 6' "0 - - - - - -");  	WriteAt (COL1' 6' "1 - - - - - -");  	WriteAt (COL2' 6' "2 - - - - - -");  	WriteAt (COL3' 6' "3 - - - - - -");  	WriteAt (COL4' 6' "4 - - - - - -");  	WriteAt (COL5' 6' "5 - - - - - -");  	WriteAt (COL6' 6' "6 - - - - - -");  	WriteAt (COL7' 6' "7 - - - - - -");  	#endif  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: if (repaint) {  	Console.Title = "fdbtop - Processes";  	RepaintTopBar ();  	Console.ForegroundColor = ConsoleColor.DarkCyan;  	WriteAt (COL0' 5' "Address (port)");  	WriteAt (COL1' 5' "Network in / out (MB/s)");  	WriteAt (COL3' 5' "CPU (%core)");  	WriteAt (COL4' 5' "Memory Free / Total (GB)");  	WriteAt (COL6' 5' "HDD (%busy)");  	WriteAt (COL7' 5' "Roles");  	#if DEBUG  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (COL0' 6' "0 - - - - - -");  	WriteAt (COL1' 6' "1 - - - - - -");  	WriteAt (COL2' 6' "2 - - - - - -");  	WriteAt (COL3' 6' "3 - - - - - -");  	WriteAt (COL4' 6' "4 - - - - - -");  	WriteAt (COL5' 6' "5 - - - - - -");  	WriteAt (COL6' 6' "6 - - - - - -");  	WriteAt (COL7' 6' "7 - - - - - -");  	#endif  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: if (repaint) {  	Console.Title = "fdbtop - Processes";  	RepaintTopBar ();  	Console.ForegroundColor = ConsoleColor.DarkCyan;  	WriteAt (COL0' 5' "Address (port)");  	WriteAt (COL1' 5' "Network in / out (MB/s)");  	WriteAt (COL3' 5' "CPU (%core)");  	WriteAt (COL4' 5' "Memory Free / Total (GB)");  	WriteAt (COL6' 5' "HDD (%busy)");  	WriteAt (COL7' 5' "Roles");  	#if DEBUG  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (COL0' 6' "0 - - - - - -");  	WriteAt (COL1' 6' "1 - - - - - -");  	WriteAt (COL2' 6' "2 - - - - - -");  	WriteAt (COL3' 6' "3 - - - - - -");  	WriteAt (COL4' 6' "4 - - - - - -");  	WriteAt (COL5' 6' "5 - - - - - -");  	WriteAt (COL6' 6' "6 - - - - - -");  	WriteAt (COL7' 6' "7 - - - - - -");  	#endif  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: if (repaint) {  	Console.Title = "fdbtop - Processes";  	RepaintTopBar ();  	Console.ForegroundColor = ConsoleColor.DarkCyan;  	WriteAt (COL0' 5' "Address (port)");  	WriteAt (COL1' 5' "Network in / out (MB/s)");  	WriteAt (COL3' 5' "CPU (%core)");  	WriteAt (COL4' 5' "Memory Free / Total (GB)");  	WriteAt (COL6' 5' "HDD (%busy)");  	WriteAt (COL7' 5' "Roles");  	#if DEBUG  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (COL0' 6' "0 - - - - - -");  	WriteAt (COL1' 6' "1 - - - - - -");  	WriteAt (COL2' 6' "2 - - - - - -");  	WriteAt (COL3' 6' "3 - - - - - -");  	WriteAt (COL4' 6' "4 - - - - - -");  	WriteAt (COL5' 6' "5 - - - - - -");  	WriteAt (COL6' 6' "6 - - - - - -");  	WriteAt (COL7' 6' "7 - - - - - -");  	#endif  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: if (repaint) {  	Console.Title = "fdbtop - Processes";  	RepaintTopBar ();  	Console.ForegroundColor = ConsoleColor.DarkCyan;  	WriteAt (COL0' 5' "Address (port)");  	WriteAt (COL1' 5' "Network in / out (MB/s)");  	WriteAt (COL3' 5' "CPU (%core)");  	WriteAt (COL4' 5' "Memory Free / Total (GB)");  	WriteAt (COL6' 5' "HDD (%busy)");  	WriteAt (COL7' 5' "Roles");  	#if DEBUG  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (COL0' 6' "0 - - - - - -");  	WriteAt (COL1' 6' "1 - - - - - -");  	WriteAt (COL2' 6' "2 - - - - - -");  	WriteAt (COL3' 6' "3 - - - - - -");  	WriteAt (COL4' 6' "4 - - - - - -");  	WriteAt (COL5' 6' "5 - - - - - -");  	WriteAt (COL6' 6' "6 - - - - - -");  	WriteAt (COL7' 6' "7 - - - - - -");  	#endif  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: if (repaint) {  	Console.Title = "fdbtop - Processes";  	RepaintTopBar ();  	Console.ForegroundColor = ConsoleColor.DarkCyan;  	WriteAt (COL0' 5' "Address (port)");  	WriteAt (COL1' 5' "Network in / out (MB/s)");  	WriteAt (COL3' 5' "CPU (%core)");  	WriteAt (COL4' 5' "Memory Free / Total (GB)");  	WriteAt (COL6' 5' "HDD (%busy)");  	WriteAt (COL7' 5' "Roles");  	#if DEBUG  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (COL0' 6' "0 - - - - - -");  	WriteAt (COL1' 6' "1 - - - - - -");  	WriteAt (COL2' 6' "2 - - - - - -");  	WriteAt (COL3' 6' "3 - - - - - -");  	WriteAt (COL4' 6' "4 - - - - - -");  	WriteAt (COL5' 6' "5 - - - - - -");  	WriteAt (COL6' 6' "6 - - - - - -");  	WriteAt (COL7' 6' "7 - - - - - -");  	#endif  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: if (repaint) {  	Console.Title = "fdbtop - Processes";  	RepaintTopBar ();  	Console.ForegroundColor = ConsoleColor.DarkCyan;  	WriteAt (COL0' 5' "Address (port)");  	WriteAt (COL1' 5' "Network in / out (MB/s)");  	WriteAt (COL3' 5' "CPU (%core)");  	WriteAt (COL4' 5' "Memory Free / Total (GB)");  	WriteAt (COL6' 5' "HDD (%busy)");  	WriteAt (COL7' 5' "Roles");  	#if DEBUG  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (COL0' 6' "0 - - - - - -");  	WriteAt (COL1' 6' "1 - - - - - -");  	WriteAt (COL2' 6' "2 - - - - - -");  	WriteAt (COL3' 6' "3 - - - - - -");  	WriteAt (COL4' 6' "4 - - - - - -");  	WriteAt (COL5' 6' "5 - - - - - -");  	WriteAt (COL6' 6' "6 - - - - - -");  	WriteAt (COL7' 6' "7 - - - - - -");  	#endif  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: WriteAt (COL0' 5' "Address (port)");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: WriteAt (COL1' 5' "Network in / out (MB/s)");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: WriteAt (COL3' 5' "CPU (%core)");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: WriteAt (COL4' 5' "Memory Free / Total (GB)");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: WriteAt (COL6' 5' "HDD (%busy)");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: WriteAt (COL7' 5' "Roles");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: WriteAt (COL0' 6' "0 - - - - - -");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: WriteAt (COL1' 6' "1 - - - - - -");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: WriteAt (COL2' 6' "2 - - - - - -");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: WriteAt (COL3' 6' "3 - - - - - -");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: WriteAt (COL4' 6' "4 - - - - - -");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: WriteAt (COL5' 6' "5 - - - - - -");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: WriteAt (COL6' 6' "6 - - - - - -");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: WriteAt (COL7' 6' "7 - - - - - -");  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: foreach (var machine in status.Cluster.Machines.Values.OrderBy (x => x.Address' StringComparer.Ordinal)) {  	var procs = status.Cluster.Processes.Values.Where (p => p.MachineId == machine.Id).OrderBy (p => p.Address' StringComparer.Ordinal).ToList ();  	var map = new RoleMap ();  	foreach (var proc in procs) {  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  	}  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0'15} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'22} | {0'11} |"' "");  	Console.ForegroundColor = ConsoleColor.White;  	//"{0'-15} | net {2'8:N3} in {3'8:N3} out | cpu {4'5:N1}% | mem {5'5:N1} / {7'5:N1} GB {8'-20} | hdd {9'5:N1}% {10'-20}"'  	WriteAt (COL0' y' machine.Address);  	WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsReceived.Hz * 125000));  	WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsSent.Hz * 125000));  	WriteAt (COL3' y' "{0'6:N1}"' machine.Cpu.LogicalCoreUtilization * 100);  	WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (machine.Memory.CommittedBytes));  	WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (machine.Memory.TotalBytes));  	//WriteAt(COL6' y' "{0'5:N1}"' totalDiskBusy * 100);  	WriteAt (COL7' y' "{0'11}"' map);  	Console.ForegroundColor = machine.Cpu.LogicalCoreUtilization >= 0.9 ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (machine.Cpu.LogicalCoreUtilization' 1' BARSZ)));  	// 1 = all the (logical) cores  	Console.ForegroundColor = machine.Memory.CommittedBytes >= 0.95 * machine.Memory.TotalBytes ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (machine.Memory.CommittedBytes' machine.Memory.TotalBytes' BARSZ)));  	//Console.ForegroundColor = totalDiskBusy >= 0.95 ? ConsoleColor.Red : ConsoleColor.Green;  	//WriteAt(COL6 + 7' y' "{0'-15}"' new string('|'' Bar(totalDiskBusy' 1' BARSZ)));  	++y;  	//TODO: use a set to map procs ot machines? Where(..) will be slow if there are a lot of machines x processes  	foreach (var proc in procs) {  		int p = proc.Address.IndexOf (':');  		string port = p >= 0 ? proc.Address.Substring (p + 1) : proc.Address;  		map = new RoleMap ();  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  		Console.ForegroundColor = ConsoleColor.DarkGray;  		WriteAt (1' y' "{0'7} | {0'5} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'5}% {0'15} | {0'11} |"' "");  		Console.ForegroundColor = proc.Version != maxVersion ? ConsoleColor.DarkCyan : ConsoleColor.Gray;  		WriteAt (1 + 10' y' "{0'5}"' proc.Version);  		Console.ForegroundColor = proc.Excluded ? ConsoleColor.DarkRed : ConsoleColor.Gray;  		WriteAt (COL0' y' "{0'7}"' port);  		Console.ForegroundColor = ConsoleColor.Gray;  		WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsReceived.Hz * 125000));  		WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsSent.Hz * 125000));  		WriteAt (COL3' y' "{0'6:N1}"' proc.Cpu.UsageCores * 100);  		WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (proc.Memory.UsedBytes));  		WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (proc.Memory.AvailableBytes));  		WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  		// 1 == 1 core' but a process can go a little bit higher  		WriteAt (COL7' y' "{0'11}"' map);  		Console.ForegroundColor = proc.Cpu.UsageCores >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (proc.Cpu.UsageCores' 1' BARSZ)));  		Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (proc.Memory.UsedBytes' proc.Memory.AvailableBytes' BARSZ)));  		Console.ForegroundColor = proc.Disk.Busy >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL6 + 7' y' "{0'-15}"' new string ('|'' Bar (proc.Disk.Busy' 1' BARSZ)));  		++y;  	}  	++y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: foreach (var machine in status.Cluster.Machines.Values.OrderBy (x => x.Address' StringComparer.Ordinal)) {  	var procs = status.Cluster.Processes.Values.Where (p => p.MachineId == machine.Id).OrderBy (p => p.Address' StringComparer.Ordinal).ToList ();  	var map = new RoleMap ();  	foreach (var proc in procs) {  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  	}  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0'15} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'22} | {0'11} |"' "");  	Console.ForegroundColor = ConsoleColor.White;  	//"{0'-15} | net {2'8:N3} in {3'8:N3} out | cpu {4'5:N1}% | mem {5'5:N1} / {7'5:N1} GB {8'-20} | hdd {9'5:N1}% {10'-20}"'  	WriteAt (COL0' y' machine.Address);  	WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsReceived.Hz * 125000));  	WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsSent.Hz * 125000));  	WriteAt (COL3' y' "{0'6:N1}"' machine.Cpu.LogicalCoreUtilization * 100);  	WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (machine.Memory.CommittedBytes));  	WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (machine.Memory.TotalBytes));  	//WriteAt(COL6' y' "{0'5:N1}"' totalDiskBusy * 100);  	WriteAt (COL7' y' "{0'11}"' map);  	Console.ForegroundColor = machine.Cpu.LogicalCoreUtilization >= 0.9 ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (machine.Cpu.LogicalCoreUtilization' 1' BARSZ)));  	// 1 = all the (logical) cores  	Console.ForegroundColor = machine.Memory.CommittedBytes >= 0.95 * machine.Memory.TotalBytes ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (machine.Memory.CommittedBytes' machine.Memory.TotalBytes' BARSZ)));  	//Console.ForegroundColor = totalDiskBusy >= 0.95 ? ConsoleColor.Red : ConsoleColor.Green;  	//WriteAt(COL6 + 7' y' "{0'-15}"' new string('|'' Bar(totalDiskBusy' 1' BARSZ)));  	++y;  	//TODO: use a set to map procs ot machines? Where(..) will be slow if there are a lot of machines x processes  	foreach (var proc in procs) {  		int p = proc.Address.IndexOf (':');  		string port = p >= 0 ? proc.Address.Substring (p + 1) : proc.Address;  		map = new RoleMap ();  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  		Console.ForegroundColor = ConsoleColor.DarkGray;  		WriteAt (1' y' "{0'7} | {0'5} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'5}% {0'15} | {0'11} |"' "");  		Console.ForegroundColor = proc.Version != maxVersion ? ConsoleColor.DarkCyan : ConsoleColor.Gray;  		WriteAt (1 + 10' y' "{0'5}"' proc.Version);  		Console.ForegroundColor = proc.Excluded ? ConsoleColor.DarkRed : ConsoleColor.Gray;  		WriteAt (COL0' y' "{0'7}"' port);  		Console.ForegroundColor = ConsoleColor.Gray;  		WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsReceived.Hz * 125000));  		WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsSent.Hz * 125000));  		WriteAt (COL3' y' "{0'6:N1}"' proc.Cpu.UsageCores * 100);  		WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (proc.Memory.UsedBytes));  		WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (proc.Memory.AvailableBytes));  		WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  		// 1 == 1 core' but a process can go a little bit higher  		WriteAt (COL7' y' "{0'11}"' map);  		Console.ForegroundColor = proc.Cpu.UsageCores >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (proc.Cpu.UsageCores' 1' BARSZ)));  		Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (proc.Memory.UsedBytes' proc.Memory.AvailableBytes' BARSZ)));  		Console.ForegroundColor = proc.Disk.Busy >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL6 + 7' y' "{0'-15}"' new string ('|'' Bar (proc.Disk.Busy' 1' BARSZ)));  		++y;  	}  	++y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: foreach (var machine in status.Cluster.Machines.Values.OrderBy (x => x.Address' StringComparer.Ordinal)) {  	var procs = status.Cluster.Processes.Values.Where (p => p.MachineId == machine.Id).OrderBy (p => p.Address' StringComparer.Ordinal).ToList ();  	var map = new RoleMap ();  	foreach (var proc in procs) {  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  	}  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0'15} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'22} | {0'11} |"' "");  	Console.ForegroundColor = ConsoleColor.White;  	//"{0'-15} | net {2'8:N3} in {3'8:N3} out | cpu {4'5:N1}% | mem {5'5:N1} / {7'5:N1} GB {8'-20} | hdd {9'5:N1}% {10'-20}"'  	WriteAt (COL0' y' machine.Address);  	WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsReceived.Hz * 125000));  	WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsSent.Hz * 125000));  	WriteAt (COL3' y' "{0'6:N1}"' machine.Cpu.LogicalCoreUtilization * 100);  	WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (machine.Memory.CommittedBytes));  	WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (machine.Memory.TotalBytes));  	//WriteAt(COL6' y' "{0'5:N1}"' totalDiskBusy * 100);  	WriteAt (COL7' y' "{0'11}"' map);  	Console.ForegroundColor = machine.Cpu.LogicalCoreUtilization >= 0.9 ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (machine.Cpu.LogicalCoreUtilization' 1' BARSZ)));  	// 1 = all the (logical) cores  	Console.ForegroundColor = machine.Memory.CommittedBytes >= 0.95 * machine.Memory.TotalBytes ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (machine.Memory.CommittedBytes' machine.Memory.TotalBytes' BARSZ)));  	//Console.ForegroundColor = totalDiskBusy >= 0.95 ? ConsoleColor.Red : ConsoleColor.Green;  	//WriteAt(COL6 + 7' y' "{0'-15}"' new string('|'' Bar(totalDiskBusy' 1' BARSZ)));  	++y;  	//TODO: use a set to map procs ot machines? Where(..) will be slow if there are a lot of machines x processes  	foreach (var proc in procs) {  		int p = proc.Address.IndexOf (':');  		string port = p >= 0 ? proc.Address.Substring (p + 1) : proc.Address;  		map = new RoleMap ();  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  		Console.ForegroundColor = ConsoleColor.DarkGray;  		WriteAt (1' y' "{0'7} | {0'5} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'5}% {0'15} | {0'11} |"' "");  		Console.ForegroundColor = proc.Version != maxVersion ? ConsoleColor.DarkCyan : ConsoleColor.Gray;  		WriteAt (1 + 10' y' "{0'5}"' proc.Version);  		Console.ForegroundColor = proc.Excluded ? ConsoleColor.DarkRed : ConsoleColor.Gray;  		WriteAt (COL0' y' "{0'7}"' port);  		Console.ForegroundColor = ConsoleColor.Gray;  		WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsReceived.Hz * 125000));  		WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsSent.Hz * 125000));  		WriteAt (COL3' y' "{0'6:N1}"' proc.Cpu.UsageCores * 100);  		WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (proc.Memory.UsedBytes));  		WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (proc.Memory.AvailableBytes));  		WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  		// 1 == 1 core' but a process can go a little bit higher  		WriteAt (COL7' y' "{0'11}"' map);  		Console.ForegroundColor = proc.Cpu.UsageCores >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (proc.Cpu.UsageCores' 1' BARSZ)));  		Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (proc.Memory.UsedBytes' proc.Memory.AvailableBytes' BARSZ)));  		Console.ForegroundColor = proc.Disk.Busy >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL6 + 7' y' "{0'-15}"' new string ('|'' Bar (proc.Disk.Busy' 1' BARSZ)));  		++y;  	}  	++y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: foreach (var machine in status.Cluster.Machines.Values.OrderBy (x => x.Address' StringComparer.Ordinal)) {  	var procs = status.Cluster.Processes.Values.Where (p => p.MachineId == machine.Id).OrderBy (p => p.Address' StringComparer.Ordinal).ToList ();  	var map = new RoleMap ();  	foreach (var proc in procs) {  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  	}  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0'15} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'22} | {0'11} |"' "");  	Console.ForegroundColor = ConsoleColor.White;  	//"{0'-15} | net {2'8:N3} in {3'8:N3} out | cpu {4'5:N1}% | mem {5'5:N1} / {7'5:N1} GB {8'-20} | hdd {9'5:N1}% {10'-20}"'  	WriteAt (COL0' y' machine.Address);  	WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsReceived.Hz * 125000));  	WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsSent.Hz * 125000));  	WriteAt (COL3' y' "{0'6:N1}"' machine.Cpu.LogicalCoreUtilization * 100);  	WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (machine.Memory.CommittedBytes));  	WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (machine.Memory.TotalBytes));  	//WriteAt(COL6' y' "{0'5:N1}"' totalDiskBusy * 100);  	WriteAt (COL7' y' "{0'11}"' map);  	Console.ForegroundColor = machine.Cpu.LogicalCoreUtilization >= 0.9 ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (machine.Cpu.LogicalCoreUtilization' 1' BARSZ)));  	// 1 = all the (logical) cores  	Console.ForegroundColor = machine.Memory.CommittedBytes >= 0.95 * machine.Memory.TotalBytes ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (machine.Memory.CommittedBytes' machine.Memory.TotalBytes' BARSZ)));  	//Console.ForegroundColor = totalDiskBusy >= 0.95 ? ConsoleColor.Red : ConsoleColor.Green;  	//WriteAt(COL6 + 7' y' "{0'-15}"' new string('|'' Bar(totalDiskBusy' 1' BARSZ)));  	++y;  	//TODO: use a set to map procs ot machines? Where(..) will be slow if there are a lot of machines x processes  	foreach (var proc in procs) {  		int p = proc.Address.IndexOf (':');  		string port = p >= 0 ? proc.Address.Substring (p + 1) : proc.Address;  		map = new RoleMap ();  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  		Console.ForegroundColor = ConsoleColor.DarkGray;  		WriteAt (1' y' "{0'7} | {0'5} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'5}% {0'15} | {0'11} |"' "");  		Console.ForegroundColor = proc.Version != maxVersion ? ConsoleColor.DarkCyan : ConsoleColor.Gray;  		WriteAt (1 + 10' y' "{0'5}"' proc.Version);  		Console.ForegroundColor = proc.Excluded ? ConsoleColor.DarkRed : ConsoleColor.Gray;  		WriteAt (COL0' y' "{0'7}"' port);  		Console.ForegroundColor = ConsoleColor.Gray;  		WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsReceived.Hz * 125000));  		WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsSent.Hz * 125000));  		WriteAt (COL3' y' "{0'6:N1}"' proc.Cpu.UsageCores * 100);  		WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (proc.Memory.UsedBytes));  		WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (proc.Memory.AvailableBytes));  		WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  		// 1 == 1 core' but a process can go a little bit higher  		WriteAt (COL7' y' "{0'11}"' map);  		Console.ForegroundColor = proc.Cpu.UsageCores >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (proc.Cpu.UsageCores' 1' BARSZ)));  		Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (proc.Memory.UsedBytes' proc.Memory.AvailableBytes' BARSZ)));  		Console.ForegroundColor = proc.Disk.Busy >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL6 + 7' y' "{0'-15}"' new string ('|'' Bar (proc.Disk.Busy' 1' BARSZ)));  		++y;  	}  	++y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: foreach (var machine in status.Cluster.Machines.Values.OrderBy (x => x.Address' StringComparer.Ordinal)) {  	var procs = status.Cluster.Processes.Values.Where (p => p.MachineId == machine.Id).OrderBy (p => p.Address' StringComparer.Ordinal).ToList ();  	var map = new RoleMap ();  	foreach (var proc in procs) {  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  	}  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0'15} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'22} | {0'11} |"' "");  	Console.ForegroundColor = ConsoleColor.White;  	//"{0'-15} | net {2'8:N3} in {3'8:N3} out | cpu {4'5:N1}% | mem {5'5:N1} / {7'5:N1} GB {8'-20} | hdd {9'5:N1}% {10'-20}"'  	WriteAt (COL0' y' machine.Address);  	WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsReceived.Hz * 125000));  	WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsSent.Hz * 125000));  	WriteAt (COL3' y' "{0'6:N1}"' machine.Cpu.LogicalCoreUtilization * 100);  	WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (machine.Memory.CommittedBytes));  	WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (machine.Memory.TotalBytes));  	//WriteAt(COL6' y' "{0'5:N1}"' totalDiskBusy * 100);  	WriteAt (COL7' y' "{0'11}"' map);  	Console.ForegroundColor = machine.Cpu.LogicalCoreUtilization >= 0.9 ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (machine.Cpu.LogicalCoreUtilization' 1' BARSZ)));  	// 1 = all the (logical) cores  	Console.ForegroundColor = machine.Memory.CommittedBytes >= 0.95 * machine.Memory.TotalBytes ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (machine.Memory.CommittedBytes' machine.Memory.TotalBytes' BARSZ)));  	//Console.ForegroundColor = totalDiskBusy >= 0.95 ? ConsoleColor.Red : ConsoleColor.Green;  	//WriteAt(COL6 + 7' y' "{0'-15}"' new string('|'' Bar(totalDiskBusy' 1' BARSZ)));  	++y;  	//TODO: use a set to map procs ot machines? Where(..) will be slow if there are a lot of machines x processes  	foreach (var proc in procs) {  		int p = proc.Address.IndexOf (':');  		string port = p >= 0 ? proc.Address.Substring (p + 1) : proc.Address;  		map = new RoleMap ();  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  		Console.ForegroundColor = ConsoleColor.DarkGray;  		WriteAt (1' y' "{0'7} | {0'5} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'5}% {0'15} | {0'11} |"' "");  		Console.ForegroundColor = proc.Version != maxVersion ? ConsoleColor.DarkCyan : ConsoleColor.Gray;  		WriteAt (1 + 10' y' "{0'5}"' proc.Version);  		Console.ForegroundColor = proc.Excluded ? ConsoleColor.DarkRed : ConsoleColor.Gray;  		WriteAt (COL0' y' "{0'7}"' port);  		Console.ForegroundColor = ConsoleColor.Gray;  		WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsReceived.Hz * 125000));  		WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsSent.Hz * 125000));  		WriteAt (COL3' y' "{0'6:N1}"' proc.Cpu.UsageCores * 100);  		WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (proc.Memory.UsedBytes));  		WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (proc.Memory.AvailableBytes));  		WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  		// 1 == 1 core' but a process can go a little bit higher  		WriteAt (COL7' y' "{0'11}"' map);  		Console.ForegroundColor = proc.Cpu.UsageCores >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (proc.Cpu.UsageCores' 1' BARSZ)));  		Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (proc.Memory.UsedBytes' proc.Memory.AvailableBytes' BARSZ)));  		Console.ForegroundColor = proc.Disk.Busy >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL6 + 7' y' "{0'-15}"' new string ('|'' Bar (proc.Disk.Busy' 1' BARSZ)));  		++y;  	}  	++y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: foreach (var machine in status.Cluster.Machines.Values.OrderBy (x => x.Address' StringComparer.Ordinal)) {  	var procs = status.Cluster.Processes.Values.Where (p => p.MachineId == machine.Id).OrderBy (p => p.Address' StringComparer.Ordinal).ToList ();  	var map = new RoleMap ();  	foreach (var proc in procs) {  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  	}  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0'15} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'22} | {0'11} |"' "");  	Console.ForegroundColor = ConsoleColor.White;  	//"{0'-15} | net {2'8:N3} in {3'8:N3} out | cpu {4'5:N1}% | mem {5'5:N1} / {7'5:N1} GB {8'-20} | hdd {9'5:N1}% {10'-20}"'  	WriteAt (COL0' y' machine.Address);  	WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsReceived.Hz * 125000));  	WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsSent.Hz * 125000));  	WriteAt (COL3' y' "{0'6:N1}"' machine.Cpu.LogicalCoreUtilization * 100);  	WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (machine.Memory.CommittedBytes));  	WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (machine.Memory.TotalBytes));  	//WriteAt(COL6' y' "{0'5:N1}"' totalDiskBusy * 100);  	WriteAt (COL7' y' "{0'11}"' map);  	Console.ForegroundColor = machine.Cpu.LogicalCoreUtilization >= 0.9 ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (machine.Cpu.LogicalCoreUtilization' 1' BARSZ)));  	// 1 = all the (logical) cores  	Console.ForegroundColor = machine.Memory.CommittedBytes >= 0.95 * machine.Memory.TotalBytes ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (machine.Memory.CommittedBytes' machine.Memory.TotalBytes' BARSZ)));  	//Console.ForegroundColor = totalDiskBusy >= 0.95 ? ConsoleColor.Red : ConsoleColor.Green;  	//WriteAt(COL6 + 7' y' "{0'-15}"' new string('|'' Bar(totalDiskBusy' 1' BARSZ)));  	++y;  	//TODO: use a set to map procs ot machines? Where(..) will be slow if there are a lot of machines x processes  	foreach (var proc in procs) {  		int p = proc.Address.IndexOf (':');  		string port = p >= 0 ? proc.Address.Substring (p + 1) : proc.Address;  		map = new RoleMap ();  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  		Console.ForegroundColor = ConsoleColor.DarkGray;  		WriteAt (1' y' "{0'7} | {0'5} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'5}% {0'15} | {0'11} |"' "");  		Console.ForegroundColor = proc.Version != maxVersion ? ConsoleColor.DarkCyan : ConsoleColor.Gray;  		WriteAt (1 + 10' y' "{0'5}"' proc.Version);  		Console.ForegroundColor = proc.Excluded ? ConsoleColor.DarkRed : ConsoleColor.Gray;  		WriteAt (COL0' y' "{0'7}"' port);  		Console.ForegroundColor = ConsoleColor.Gray;  		WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsReceived.Hz * 125000));  		WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsSent.Hz * 125000));  		WriteAt (COL3' y' "{0'6:N1}"' proc.Cpu.UsageCores * 100);  		WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (proc.Memory.UsedBytes));  		WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (proc.Memory.AvailableBytes));  		WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  		// 1 == 1 core' but a process can go a little bit higher  		WriteAt (COL7' y' "{0'11}"' map);  		Console.ForegroundColor = proc.Cpu.UsageCores >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (proc.Cpu.UsageCores' 1' BARSZ)));  		Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (proc.Memory.UsedBytes' proc.Memory.AvailableBytes' BARSZ)));  		Console.ForegroundColor = proc.Disk.Busy >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL6 + 7' y' "{0'-15}"' new string ('|'' Bar (proc.Disk.Busy' 1' BARSZ)));  		++y;  	}  	++y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: foreach (var machine in status.Cluster.Machines.Values.OrderBy (x => x.Address' StringComparer.Ordinal)) {  	var procs = status.Cluster.Processes.Values.Where (p => p.MachineId == machine.Id).OrderBy (p => p.Address' StringComparer.Ordinal).ToList ();  	var map = new RoleMap ();  	foreach (var proc in procs) {  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  	}  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0'15} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'22} | {0'11} |"' "");  	Console.ForegroundColor = ConsoleColor.White;  	//"{0'-15} | net {2'8:N3} in {3'8:N3} out | cpu {4'5:N1}% | mem {5'5:N1} / {7'5:N1} GB {8'-20} | hdd {9'5:N1}% {10'-20}"'  	WriteAt (COL0' y' machine.Address);  	WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsReceived.Hz * 125000));  	WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsSent.Hz * 125000));  	WriteAt (COL3' y' "{0'6:N1}"' machine.Cpu.LogicalCoreUtilization * 100);  	WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (machine.Memory.CommittedBytes));  	WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (machine.Memory.TotalBytes));  	//WriteAt(COL6' y' "{0'5:N1}"' totalDiskBusy * 100);  	WriteAt (COL7' y' "{0'11}"' map);  	Console.ForegroundColor = machine.Cpu.LogicalCoreUtilization >= 0.9 ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (machine.Cpu.LogicalCoreUtilization' 1' BARSZ)));  	// 1 = all the (logical) cores  	Console.ForegroundColor = machine.Memory.CommittedBytes >= 0.95 * machine.Memory.TotalBytes ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (machine.Memory.CommittedBytes' machine.Memory.TotalBytes' BARSZ)));  	//Console.ForegroundColor = totalDiskBusy >= 0.95 ? ConsoleColor.Red : ConsoleColor.Green;  	//WriteAt(COL6 + 7' y' "{0'-15}"' new string('|'' Bar(totalDiskBusy' 1' BARSZ)));  	++y;  	//TODO: use a set to map procs ot machines? Where(..) will be slow if there are a lot of machines x processes  	foreach (var proc in procs) {  		int p = proc.Address.IndexOf (':');  		string port = p >= 0 ? proc.Address.Substring (p + 1) : proc.Address;  		map = new RoleMap ();  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  		Console.ForegroundColor = ConsoleColor.DarkGray;  		WriteAt (1' y' "{0'7} | {0'5} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'5}% {0'15} | {0'11} |"' "");  		Console.ForegroundColor = proc.Version != maxVersion ? ConsoleColor.DarkCyan : ConsoleColor.Gray;  		WriteAt (1 + 10' y' "{0'5}"' proc.Version);  		Console.ForegroundColor = proc.Excluded ? ConsoleColor.DarkRed : ConsoleColor.Gray;  		WriteAt (COL0' y' "{0'7}"' port);  		Console.ForegroundColor = ConsoleColor.Gray;  		WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsReceived.Hz * 125000));  		WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsSent.Hz * 125000));  		WriteAt (COL3' y' "{0'6:N1}"' proc.Cpu.UsageCores * 100);  		WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (proc.Memory.UsedBytes));  		WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (proc.Memory.AvailableBytes));  		WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  		// 1 == 1 core' but a process can go a little bit higher  		WriteAt (COL7' y' "{0'11}"' map);  		Console.ForegroundColor = proc.Cpu.UsageCores >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (proc.Cpu.UsageCores' 1' BARSZ)));  		Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (proc.Memory.UsedBytes' proc.Memory.AvailableBytes' BARSZ)));  		Console.ForegroundColor = proc.Disk.Busy >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL6 + 7' y' "{0'-15}"' new string ('|'' Bar (proc.Disk.Busy' 1' BARSZ)));  		++y;  	}  	++y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: foreach (var machine in status.Cluster.Machines.Values.OrderBy (x => x.Address' StringComparer.Ordinal)) {  	var procs = status.Cluster.Processes.Values.Where (p => p.MachineId == machine.Id).OrderBy (p => p.Address' StringComparer.Ordinal).ToList ();  	var map = new RoleMap ();  	foreach (var proc in procs) {  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  	}  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0'15} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'22} | {0'11} |"' "");  	Console.ForegroundColor = ConsoleColor.White;  	//"{0'-15} | net {2'8:N3} in {3'8:N3} out | cpu {4'5:N1}% | mem {5'5:N1} / {7'5:N1} GB {8'-20} | hdd {9'5:N1}% {10'-20}"'  	WriteAt (COL0' y' machine.Address);  	WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsReceived.Hz * 125000));  	WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsSent.Hz * 125000));  	WriteAt (COL3' y' "{0'6:N1}"' machine.Cpu.LogicalCoreUtilization * 100);  	WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (machine.Memory.CommittedBytes));  	WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (machine.Memory.TotalBytes));  	//WriteAt(COL6' y' "{0'5:N1}"' totalDiskBusy * 100);  	WriteAt (COL7' y' "{0'11}"' map);  	Console.ForegroundColor = machine.Cpu.LogicalCoreUtilization >= 0.9 ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (machine.Cpu.LogicalCoreUtilization' 1' BARSZ)));  	// 1 = all the (logical) cores  	Console.ForegroundColor = machine.Memory.CommittedBytes >= 0.95 * machine.Memory.TotalBytes ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (machine.Memory.CommittedBytes' machine.Memory.TotalBytes' BARSZ)));  	//Console.ForegroundColor = totalDiskBusy >= 0.95 ? ConsoleColor.Red : ConsoleColor.Green;  	//WriteAt(COL6 + 7' y' "{0'-15}"' new string('|'' Bar(totalDiskBusy' 1' BARSZ)));  	++y;  	//TODO: use a set to map procs ot machines? Where(..) will be slow if there are a lot of machines x processes  	foreach (var proc in procs) {  		int p = proc.Address.IndexOf (':');  		string port = p >= 0 ? proc.Address.Substring (p + 1) : proc.Address;  		map = new RoleMap ();  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  		Console.ForegroundColor = ConsoleColor.DarkGray;  		WriteAt (1' y' "{0'7} | {0'5} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'5}% {0'15} | {0'11} |"' "");  		Console.ForegroundColor = proc.Version != maxVersion ? ConsoleColor.DarkCyan : ConsoleColor.Gray;  		WriteAt (1 + 10' y' "{0'5}"' proc.Version);  		Console.ForegroundColor = proc.Excluded ? ConsoleColor.DarkRed : ConsoleColor.Gray;  		WriteAt (COL0' y' "{0'7}"' port);  		Console.ForegroundColor = ConsoleColor.Gray;  		WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsReceived.Hz * 125000));  		WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsSent.Hz * 125000));  		WriteAt (COL3' y' "{0'6:N1}"' proc.Cpu.UsageCores * 100);  		WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (proc.Memory.UsedBytes));  		WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (proc.Memory.AvailableBytes));  		WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  		// 1 == 1 core' but a process can go a little bit higher  		WriteAt (COL7' y' "{0'11}"' map);  		Console.ForegroundColor = proc.Cpu.UsageCores >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (proc.Cpu.UsageCores' 1' BARSZ)));  		Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (proc.Memory.UsedBytes' proc.Memory.AvailableBytes' BARSZ)));  		Console.ForegroundColor = proc.Disk.Busy >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL6 + 7' y' "{0'-15}"' new string ('|'' Bar (proc.Disk.Busy' 1' BARSZ)));  		++y;  	}  	++y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: foreach (var machine in status.Cluster.Machines.Values.OrderBy (x => x.Address' StringComparer.Ordinal)) {  	var procs = status.Cluster.Processes.Values.Where (p => p.MachineId == machine.Id).OrderBy (p => p.Address' StringComparer.Ordinal).ToList ();  	var map = new RoleMap ();  	foreach (var proc in procs) {  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  	}  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0'15} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'22} | {0'11} |"' "");  	Console.ForegroundColor = ConsoleColor.White;  	//"{0'-15} | net {2'8:N3} in {3'8:N3} out | cpu {4'5:N1}% | mem {5'5:N1} / {7'5:N1} GB {8'-20} | hdd {9'5:N1}% {10'-20}"'  	WriteAt (COL0' y' machine.Address);  	WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsReceived.Hz * 125000));  	WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsSent.Hz * 125000));  	WriteAt (COL3' y' "{0'6:N1}"' machine.Cpu.LogicalCoreUtilization * 100);  	WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (machine.Memory.CommittedBytes));  	WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (machine.Memory.TotalBytes));  	//WriteAt(COL6' y' "{0'5:N1}"' totalDiskBusy * 100);  	WriteAt (COL7' y' "{0'11}"' map);  	Console.ForegroundColor = machine.Cpu.LogicalCoreUtilization >= 0.9 ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (machine.Cpu.LogicalCoreUtilization' 1' BARSZ)));  	// 1 = all the (logical) cores  	Console.ForegroundColor = machine.Memory.CommittedBytes >= 0.95 * machine.Memory.TotalBytes ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (machine.Memory.CommittedBytes' machine.Memory.TotalBytes' BARSZ)));  	//Console.ForegroundColor = totalDiskBusy >= 0.95 ? ConsoleColor.Red : ConsoleColor.Green;  	//WriteAt(COL6 + 7' y' "{0'-15}"' new string('|'' Bar(totalDiskBusy' 1' BARSZ)));  	++y;  	//TODO: use a set to map procs ot machines? Where(..) will be slow if there are a lot of machines x processes  	foreach (var proc in procs) {  		int p = proc.Address.IndexOf (':');  		string port = p >= 0 ? proc.Address.Substring (p + 1) : proc.Address;  		map = new RoleMap ();  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  		Console.ForegroundColor = ConsoleColor.DarkGray;  		WriteAt (1' y' "{0'7} | {0'5} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'5}% {0'15} | {0'11} |"' "");  		Console.ForegroundColor = proc.Version != maxVersion ? ConsoleColor.DarkCyan : ConsoleColor.Gray;  		WriteAt (1 + 10' y' "{0'5}"' proc.Version);  		Console.ForegroundColor = proc.Excluded ? ConsoleColor.DarkRed : ConsoleColor.Gray;  		WriteAt (COL0' y' "{0'7}"' port);  		Console.ForegroundColor = ConsoleColor.Gray;  		WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsReceived.Hz * 125000));  		WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsSent.Hz * 125000));  		WriteAt (COL3' y' "{0'6:N1}"' proc.Cpu.UsageCores * 100);  		WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (proc.Memory.UsedBytes));  		WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (proc.Memory.AvailableBytes));  		WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  		// 1 == 1 core' but a process can go a little bit higher  		WriteAt (COL7' y' "{0'11}"' map);  		Console.ForegroundColor = proc.Cpu.UsageCores >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (proc.Cpu.UsageCores' 1' BARSZ)));  		Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (proc.Memory.UsedBytes' proc.Memory.AvailableBytes' BARSZ)));  		Console.ForegroundColor = proc.Disk.Busy >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL6 + 7' y' "{0'-15}"' new string ('|'' Bar (proc.Disk.Busy' 1' BARSZ)));  		++y;  	}  	++y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: foreach (var machine in status.Cluster.Machines.Values.OrderBy (x => x.Address' StringComparer.Ordinal)) {  	var procs = status.Cluster.Processes.Values.Where (p => p.MachineId == machine.Id).OrderBy (p => p.Address' StringComparer.Ordinal).ToList ();  	var map = new RoleMap ();  	foreach (var proc in procs) {  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  	}  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0'15} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'22} | {0'11} |"' "");  	Console.ForegroundColor = ConsoleColor.White;  	//"{0'-15} | net {2'8:N3} in {3'8:N3} out | cpu {4'5:N1}% | mem {5'5:N1} / {7'5:N1} GB {8'-20} | hdd {9'5:N1}% {10'-20}"'  	WriteAt (COL0' y' machine.Address);  	WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsReceived.Hz * 125000));  	WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsSent.Hz * 125000));  	WriteAt (COL3' y' "{0'6:N1}"' machine.Cpu.LogicalCoreUtilization * 100);  	WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (machine.Memory.CommittedBytes));  	WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (machine.Memory.TotalBytes));  	//WriteAt(COL6' y' "{0'5:N1}"' totalDiskBusy * 100);  	WriteAt (COL7' y' "{0'11}"' map);  	Console.ForegroundColor = machine.Cpu.LogicalCoreUtilization >= 0.9 ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (machine.Cpu.LogicalCoreUtilization' 1' BARSZ)));  	// 1 = all the (logical) cores  	Console.ForegroundColor = machine.Memory.CommittedBytes >= 0.95 * machine.Memory.TotalBytes ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (machine.Memory.CommittedBytes' machine.Memory.TotalBytes' BARSZ)));  	//Console.ForegroundColor = totalDiskBusy >= 0.95 ? ConsoleColor.Red : ConsoleColor.Green;  	//WriteAt(COL6 + 7' y' "{0'-15}"' new string('|'' Bar(totalDiskBusy' 1' BARSZ)));  	++y;  	//TODO: use a set to map procs ot machines? Where(..) will be slow if there are a lot of machines x processes  	foreach (var proc in procs) {  		int p = proc.Address.IndexOf (':');  		string port = p >= 0 ? proc.Address.Substring (p + 1) : proc.Address;  		map = new RoleMap ();  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  		Console.ForegroundColor = ConsoleColor.DarkGray;  		WriteAt (1' y' "{0'7} | {0'5} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'5}% {0'15} | {0'11} |"' "");  		Console.ForegroundColor = proc.Version != maxVersion ? ConsoleColor.DarkCyan : ConsoleColor.Gray;  		WriteAt (1 + 10' y' "{0'5}"' proc.Version);  		Console.ForegroundColor = proc.Excluded ? ConsoleColor.DarkRed : ConsoleColor.Gray;  		WriteAt (COL0' y' "{0'7}"' port);  		Console.ForegroundColor = ConsoleColor.Gray;  		WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsReceived.Hz * 125000));  		WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsSent.Hz * 125000));  		WriteAt (COL3' y' "{0'6:N1}"' proc.Cpu.UsageCores * 100);  		WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (proc.Memory.UsedBytes));  		WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (proc.Memory.AvailableBytes));  		WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  		// 1 == 1 core' but a process can go a little bit higher  		WriteAt (COL7' y' "{0'11}"' map);  		Console.ForegroundColor = proc.Cpu.UsageCores >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (proc.Cpu.UsageCores' 1' BARSZ)));  		Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (proc.Memory.UsedBytes' proc.Memory.AvailableBytes' BARSZ)));  		Console.ForegroundColor = proc.Disk.Busy >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL6 + 7' y' "{0'-15}"' new string ('|'' Bar (proc.Disk.Busy' 1' BARSZ)));  		++y;  	}  	++y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: foreach (var machine in status.Cluster.Machines.Values.OrderBy (x => x.Address' StringComparer.Ordinal)) {  	var procs = status.Cluster.Processes.Values.Where (p => p.MachineId == machine.Id).OrderBy (p => p.Address' StringComparer.Ordinal).ToList ();  	var map = new RoleMap ();  	foreach (var proc in procs) {  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  	}  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0'15} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'22} | {0'11} |"' "");  	Console.ForegroundColor = ConsoleColor.White;  	//"{0'-15} | net {2'8:N3} in {3'8:N3} out | cpu {4'5:N1}% | mem {5'5:N1} / {7'5:N1} GB {8'-20} | hdd {9'5:N1}% {10'-20}"'  	WriteAt (COL0' y' machine.Address);  	WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsReceived.Hz * 125000));  	WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsSent.Hz * 125000));  	WriteAt (COL3' y' "{0'6:N1}"' machine.Cpu.LogicalCoreUtilization * 100);  	WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (machine.Memory.CommittedBytes));  	WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (machine.Memory.TotalBytes));  	//WriteAt(COL6' y' "{0'5:N1}"' totalDiskBusy * 100);  	WriteAt (COL7' y' "{0'11}"' map);  	Console.ForegroundColor = machine.Cpu.LogicalCoreUtilization >= 0.9 ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (machine.Cpu.LogicalCoreUtilization' 1' BARSZ)));  	// 1 = all the (logical) cores  	Console.ForegroundColor = machine.Memory.CommittedBytes >= 0.95 * machine.Memory.TotalBytes ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (machine.Memory.CommittedBytes' machine.Memory.TotalBytes' BARSZ)));  	//Console.ForegroundColor = totalDiskBusy >= 0.95 ? ConsoleColor.Red : ConsoleColor.Green;  	//WriteAt(COL6 + 7' y' "{0'-15}"' new string('|'' Bar(totalDiskBusy' 1' BARSZ)));  	++y;  	//TODO: use a set to map procs ot machines? Where(..) will be slow if there are a lot of machines x processes  	foreach (var proc in procs) {  		int p = proc.Address.IndexOf (':');  		string port = p >= 0 ? proc.Address.Substring (p + 1) : proc.Address;  		map = new RoleMap ();  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  		Console.ForegroundColor = ConsoleColor.DarkGray;  		WriteAt (1' y' "{0'7} | {0'5} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'5}% {0'15} | {0'11} |"' "");  		Console.ForegroundColor = proc.Version != maxVersion ? ConsoleColor.DarkCyan : ConsoleColor.Gray;  		WriteAt (1 + 10' y' "{0'5}"' proc.Version);  		Console.ForegroundColor = proc.Excluded ? ConsoleColor.DarkRed : ConsoleColor.Gray;  		WriteAt (COL0' y' "{0'7}"' port);  		Console.ForegroundColor = ConsoleColor.Gray;  		WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsReceived.Hz * 125000));  		WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsSent.Hz * 125000));  		WriteAt (COL3' y' "{0'6:N1}"' proc.Cpu.UsageCores * 100);  		WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (proc.Memory.UsedBytes));  		WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (proc.Memory.AvailableBytes));  		WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  		// 1 == 1 core' but a process can go a little bit higher  		WriteAt (COL7' y' "{0'11}"' map);  		Console.ForegroundColor = proc.Cpu.UsageCores >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (proc.Cpu.UsageCores' 1' BARSZ)));  		Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (proc.Memory.UsedBytes' proc.Memory.AvailableBytes' BARSZ)));  		Console.ForegroundColor = proc.Disk.Busy >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL6 + 7' y' "{0'-15}"' new string ('|'' Bar (proc.Disk.Busy' 1' BARSZ)));  		++y;  	}  	++y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: foreach (var machine in status.Cluster.Machines.Values.OrderBy (x => x.Address' StringComparer.Ordinal)) {  	var procs = status.Cluster.Processes.Values.Where (p => p.MachineId == machine.Id).OrderBy (p => p.Address' StringComparer.Ordinal).ToList ();  	var map = new RoleMap ();  	foreach (var proc in procs) {  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  	}  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0'15} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'22} | {0'11} |"' "");  	Console.ForegroundColor = ConsoleColor.White;  	//"{0'-15} | net {2'8:N3} in {3'8:N3} out | cpu {4'5:N1}% | mem {5'5:N1} / {7'5:N1} GB {8'-20} | hdd {9'5:N1}% {10'-20}"'  	WriteAt (COL0' y' machine.Address);  	WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsReceived.Hz * 125000));  	WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsSent.Hz * 125000));  	WriteAt (COL3' y' "{0'6:N1}"' machine.Cpu.LogicalCoreUtilization * 100);  	WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (machine.Memory.CommittedBytes));  	WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (machine.Memory.TotalBytes));  	//WriteAt(COL6' y' "{0'5:N1}"' totalDiskBusy * 100);  	WriteAt (COL7' y' "{0'11}"' map);  	Console.ForegroundColor = machine.Cpu.LogicalCoreUtilization >= 0.9 ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (machine.Cpu.LogicalCoreUtilization' 1' BARSZ)));  	// 1 = all the (logical) cores  	Console.ForegroundColor = machine.Memory.CommittedBytes >= 0.95 * machine.Memory.TotalBytes ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (machine.Memory.CommittedBytes' machine.Memory.TotalBytes' BARSZ)));  	//Console.ForegroundColor = totalDiskBusy >= 0.95 ? ConsoleColor.Red : ConsoleColor.Green;  	//WriteAt(COL6 + 7' y' "{0'-15}"' new string('|'' Bar(totalDiskBusy' 1' BARSZ)));  	++y;  	//TODO: use a set to map procs ot machines? Where(..) will be slow if there are a lot of machines x processes  	foreach (var proc in procs) {  		int p = proc.Address.IndexOf (':');  		string port = p >= 0 ? proc.Address.Substring (p + 1) : proc.Address;  		map = new RoleMap ();  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  		Console.ForegroundColor = ConsoleColor.DarkGray;  		WriteAt (1' y' "{0'7} | {0'5} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'5}% {0'15} | {0'11} |"' "");  		Console.ForegroundColor = proc.Version != maxVersion ? ConsoleColor.DarkCyan : ConsoleColor.Gray;  		WriteAt (1 + 10' y' "{0'5}"' proc.Version);  		Console.ForegroundColor = proc.Excluded ? ConsoleColor.DarkRed : ConsoleColor.Gray;  		WriteAt (COL0' y' "{0'7}"' port);  		Console.ForegroundColor = ConsoleColor.Gray;  		WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsReceived.Hz * 125000));  		WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsSent.Hz * 125000));  		WriteAt (COL3' y' "{0'6:N1}"' proc.Cpu.UsageCores * 100);  		WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (proc.Memory.UsedBytes));  		WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (proc.Memory.AvailableBytes));  		WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  		// 1 == 1 core' but a process can go a little bit higher  		WriteAt (COL7' y' "{0'11}"' map);  		Console.ForegroundColor = proc.Cpu.UsageCores >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (proc.Cpu.UsageCores' 1' BARSZ)));  		Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (proc.Memory.UsedBytes' proc.Memory.AvailableBytes' BARSZ)));  		Console.ForegroundColor = proc.Disk.Busy >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL6 + 7' y' "{0'-15}"' new string ('|'' Bar (proc.Disk.Busy' 1' BARSZ)));  		++y;  	}  	++y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: foreach (var machine in status.Cluster.Machines.Values.OrderBy (x => x.Address' StringComparer.Ordinal)) {  	var procs = status.Cluster.Processes.Values.Where (p => p.MachineId == machine.Id).OrderBy (p => p.Address' StringComparer.Ordinal).ToList ();  	var map = new RoleMap ();  	foreach (var proc in procs) {  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  	}  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0'15} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'22} | {0'11} |"' "");  	Console.ForegroundColor = ConsoleColor.White;  	//"{0'-15} | net {2'8:N3} in {3'8:N3} out | cpu {4'5:N1}% | mem {5'5:N1} / {7'5:N1} GB {8'-20} | hdd {9'5:N1}% {10'-20}"'  	WriteAt (COL0' y' machine.Address);  	WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsReceived.Hz * 125000));  	WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsSent.Hz * 125000));  	WriteAt (COL3' y' "{0'6:N1}"' machine.Cpu.LogicalCoreUtilization * 100);  	WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (machine.Memory.CommittedBytes));  	WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (machine.Memory.TotalBytes));  	//WriteAt(COL6' y' "{0'5:N1}"' totalDiskBusy * 100);  	WriteAt (COL7' y' "{0'11}"' map);  	Console.ForegroundColor = machine.Cpu.LogicalCoreUtilization >= 0.9 ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (machine.Cpu.LogicalCoreUtilization' 1' BARSZ)));  	// 1 = all the (logical) cores  	Console.ForegroundColor = machine.Memory.CommittedBytes >= 0.95 * machine.Memory.TotalBytes ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (machine.Memory.CommittedBytes' machine.Memory.TotalBytes' BARSZ)));  	//Console.ForegroundColor = totalDiskBusy >= 0.95 ? ConsoleColor.Red : ConsoleColor.Green;  	//WriteAt(COL6 + 7' y' "{0'-15}"' new string('|'' Bar(totalDiskBusy' 1' BARSZ)));  	++y;  	//TODO: use a set to map procs ot machines? Where(..) will be slow if there are a lot of machines x processes  	foreach (var proc in procs) {  		int p = proc.Address.IndexOf (':');  		string port = p >= 0 ? proc.Address.Substring (p + 1) : proc.Address;  		map = new RoleMap ();  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  		Console.ForegroundColor = ConsoleColor.DarkGray;  		WriteAt (1' y' "{0'7} | {0'5} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'5}% {0'15} | {0'11} |"' "");  		Console.ForegroundColor = proc.Version != maxVersion ? ConsoleColor.DarkCyan : ConsoleColor.Gray;  		WriteAt (1 + 10' y' "{0'5}"' proc.Version);  		Console.ForegroundColor = proc.Excluded ? ConsoleColor.DarkRed : ConsoleColor.Gray;  		WriteAt (COL0' y' "{0'7}"' port);  		Console.ForegroundColor = ConsoleColor.Gray;  		WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsReceived.Hz * 125000));  		WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsSent.Hz * 125000));  		WriteAt (COL3' y' "{0'6:N1}"' proc.Cpu.UsageCores * 100);  		WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (proc.Memory.UsedBytes));  		WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (proc.Memory.AvailableBytes));  		WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  		// 1 == 1 core' but a process can go a little bit higher  		WriteAt (COL7' y' "{0'11}"' map);  		Console.ForegroundColor = proc.Cpu.UsageCores >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (proc.Cpu.UsageCores' 1' BARSZ)));  		Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (proc.Memory.UsedBytes' proc.Memory.AvailableBytes' BARSZ)));  		Console.ForegroundColor = proc.Disk.Busy >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL6 + 7' y' "{0'-15}"' new string ('|'' Bar (proc.Disk.Busy' 1' BARSZ)));  		++y;  	}  	++y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: foreach (var machine in status.Cluster.Machines.Values.OrderBy (x => x.Address' StringComparer.Ordinal)) {  	var procs = status.Cluster.Processes.Values.Where (p => p.MachineId == machine.Id).OrderBy (p => p.Address' StringComparer.Ordinal).ToList ();  	var map = new RoleMap ();  	foreach (var proc in procs) {  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  	}  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0'15} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'22} | {0'11} |"' "");  	Console.ForegroundColor = ConsoleColor.White;  	//"{0'-15} | net {2'8:N3} in {3'8:N3} out | cpu {4'5:N1}% | mem {5'5:N1} / {7'5:N1} GB {8'-20} | hdd {9'5:N1}% {10'-20}"'  	WriteAt (COL0' y' machine.Address);  	WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsReceived.Hz * 125000));  	WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsSent.Hz * 125000));  	WriteAt (COL3' y' "{0'6:N1}"' machine.Cpu.LogicalCoreUtilization * 100);  	WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (machine.Memory.CommittedBytes));  	WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (machine.Memory.TotalBytes));  	//WriteAt(COL6' y' "{0'5:N1}"' totalDiskBusy * 100);  	WriteAt (COL7' y' "{0'11}"' map);  	Console.ForegroundColor = machine.Cpu.LogicalCoreUtilization >= 0.9 ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (machine.Cpu.LogicalCoreUtilization' 1' BARSZ)));  	// 1 = all the (logical) cores  	Console.ForegroundColor = machine.Memory.CommittedBytes >= 0.95 * machine.Memory.TotalBytes ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (machine.Memory.CommittedBytes' machine.Memory.TotalBytes' BARSZ)));  	//Console.ForegroundColor = totalDiskBusy >= 0.95 ? ConsoleColor.Red : ConsoleColor.Green;  	//WriteAt(COL6 + 7' y' "{0'-15}"' new string('|'' Bar(totalDiskBusy' 1' BARSZ)));  	++y;  	//TODO: use a set to map procs ot machines? Where(..) will be slow if there are a lot of machines x processes  	foreach (var proc in procs) {  		int p = proc.Address.IndexOf (':');  		string port = p >= 0 ? proc.Address.Substring (p + 1) : proc.Address;  		map = new RoleMap ();  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  		Console.ForegroundColor = ConsoleColor.DarkGray;  		WriteAt (1' y' "{0'7} | {0'5} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'5}% {0'15} | {0'11} |"' "");  		Console.ForegroundColor = proc.Version != maxVersion ? ConsoleColor.DarkCyan : ConsoleColor.Gray;  		WriteAt (1 + 10' y' "{0'5}"' proc.Version);  		Console.ForegroundColor = proc.Excluded ? ConsoleColor.DarkRed : ConsoleColor.Gray;  		WriteAt (COL0' y' "{0'7}"' port);  		Console.ForegroundColor = ConsoleColor.Gray;  		WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsReceived.Hz * 125000));  		WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsSent.Hz * 125000));  		WriteAt (COL3' y' "{0'6:N1}"' proc.Cpu.UsageCores * 100);  		WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (proc.Memory.UsedBytes));  		WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (proc.Memory.AvailableBytes));  		WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  		// 1 == 1 core' but a process can go a little bit higher  		WriteAt (COL7' y' "{0'11}"' map);  		Console.ForegroundColor = proc.Cpu.UsageCores >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (proc.Cpu.UsageCores' 1' BARSZ)));  		Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (proc.Memory.UsedBytes' proc.Memory.AvailableBytes' BARSZ)));  		Console.ForegroundColor = proc.Disk.Busy >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL6 + 7' y' "{0'-15}"' new string ('|'' Bar (proc.Disk.Busy' 1' BARSZ)));  		++y;  	}  	++y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: foreach (var machine in status.Cluster.Machines.Values.OrderBy (x => x.Address' StringComparer.Ordinal)) {  	var procs = status.Cluster.Processes.Values.Where (p => p.MachineId == machine.Id).OrderBy (p => p.Address' StringComparer.Ordinal).ToList ();  	var map = new RoleMap ();  	foreach (var proc in procs) {  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  	}  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0'15} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'22} | {0'11} |"' "");  	Console.ForegroundColor = ConsoleColor.White;  	//"{0'-15} | net {2'8:N3} in {3'8:N3} out | cpu {4'5:N1}% | mem {5'5:N1} / {7'5:N1} GB {8'-20} | hdd {9'5:N1}% {10'-20}"'  	WriteAt (COL0' y' machine.Address);  	WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsReceived.Hz * 125000));  	WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsSent.Hz * 125000));  	WriteAt (COL3' y' "{0'6:N1}"' machine.Cpu.LogicalCoreUtilization * 100);  	WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (machine.Memory.CommittedBytes));  	WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (machine.Memory.TotalBytes));  	//WriteAt(COL6' y' "{0'5:N1}"' totalDiskBusy * 100);  	WriteAt (COL7' y' "{0'11}"' map);  	Console.ForegroundColor = machine.Cpu.LogicalCoreUtilization >= 0.9 ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (machine.Cpu.LogicalCoreUtilization' 1' BARSZ)));  	// 1 = all the (logical) cores  	Console.ForegroundColor = machine.Memory.CommittedBytes >= 0.95 * machine.Memory.TotalBytes ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (machine.Memory.CommittedBytes' machine.Memory.TotalBytes' BARSZ)));  	//Console.ForegroundColor = totalDiskBusy >= 0.95 ? ConsoleColor.Red : ConsoleColor.Green;  	//WriteAt(COL6 + 7' y' "{0'-15}"' new string('|'' Bar(totalDiskBusy' 1' BARSZ)));  	++y;  	//TODO: use a set to map procs ot machines? Where(..) will be slow if there are a lot of machines x processes  	foreach (var proc in procs) {  		int p = proc.Address.IndexOf (':');  		string port = p >= 0 ? proc.Address.Substring (p + 1) : proc.Address;  		map = new RoleMap ();  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  		Console.ForegroundColor = ConsoleColor.DarkGray;  		WriteAt (1' y' "{0'7} | {0'5} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'5}% {0'15} | {0'11} |"' "");  		Console.ForegroundColor = proc.Version != maxVersion ? ConsoleColor.DarkCyan : ConsoleColor.Gray;  		WriteAt (1 + 10' y' "{0'5}"' proc.Version);  		Console.ForegroundColor = proc.Excluded ? ConsoleColor.DarkRed : ConsoleColor.Gray;  		WriteAt (COL0' y' "{0'7}"' port);  		Console.ForegroundColor = ConsoleColor.Gray;  		WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsReceived.Hz * 125000));  		WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsSent.Hz * 125000));  		WriteAt (COL3' y' "{0'6:N1}"' proc.Cpu.UsageCores * 100);  		WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (proc.Memory.UsedBytes));  		WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (proc.Memory.AvailableBytes));  		WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  		// 1 == 1 core' but a process can go a little bit higher  		WriteAt (COL7' y' "{0'11}"' map);  		Console.ForegroundColor = proc.Cpu.UsageCores >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (proc.Cpu.UsageCores' 1' BARSZ)));  		Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (proc.Memory.UsedBytes' proc.Memory.AvailableBytes' BARSZ)));  		Console.ForegroundColor = proc.Disk.Busy >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL6 + 7' y' "{0'-15}"' new string ('|'' Bar (proc.Disk.Busy' 1' BARSZ)));  		++y;  	}  	++y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: foreach (var machine in status.Cluster.Machines.Values.OrderBy (x => x.Address' StringComparer.Ordinal)) {  	var procs = status.Cluster.Processes.Values.Where (p => p.MachineId == machine.Id).OrderBy (p => p.Address' StringComparer.Ordinal).ToList ();  	var map = new RoleMap ();  	foreach (var proc in procs) {  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  	}  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0'15} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'22} | {0'11} |"' "");  	Console.ForegroundColor = ConsoleColor.White;  	//"{0'-15} | net {2'8:N3} in {3'8:N3} out | cpu {4'5:N1}% | mem {5'5:N1} / {7'5:N1} GB {8'-20} | hdd {9'5:N1}% {10'-20}"'  	WriteAt (COL0' y' machine.Address);  	WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsReceived.Hz * 125000));  	WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsSent.Hz * 125000));  	WriteAt (COL3' y' "{0'6:N1}"' machine.Cpu.LogicalCoreUtilization * 100);  	WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (machine.Memory.CommittedBytes));  	WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (machine.Memory.TotalBytes));  	//WriteAt(COL6' y' "{0'5:N1}"' totalDiskBusy * 100);  	WriteAt (COL7' y' "{0'11}"' map);  	Console.ForegroundColor = machine.Cpu.LogicalCoreUtilization >= 0.9 ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (machine.Cpu.LogicalCoreUtilization' 1' BARSZ)));  	// 1 = all the (logical) cores  	Console.ForegroundColor = machine.Memory.CommittedBytes >= 0.95 * machine.Memory.TotalBytes ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (machine.Memory.CommittedBytes' machine.Memory.TotalBytes' BARSZ)));  	//Console.ForegroundColor = totalDiskBusy >= 0.95 ? ConsoleColor.Red : ConsoleColor.Green;  	//WriteAt(COL6 + 7' y' "{0'-15}"' new string('|'' Bar(totalDiskBusy' 1' BARSZ)));  	++y;  	//TODO: use a set to map procs ot machines? Where(..) will be slow if there are a lot of machines x processes  	foreach (var proc in procs) {  		int p = proc.Address.IndexOf (':');  		string port = p >= 0 ? proc.Address.Substring (p + 1) : proc.Address;  		map = new RoleMap ();  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  		Console.ForegroundColor = ConsoleColor.DarkGray;  		WriteAt (1' y' "{0'7} | {0'5} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'5}% {0'15} | {0'11} |"' "");  		Console.ForegroundColor = proc.Version != maxVersion ? ConsoleColor.DarkCyan : ConsoleColor.Gray;  		WriteAt (1 + 10' y' "{0'5}"' proc.Version);  		Console.ForegroundColor = proc.Excluded ? ConsoleColor.DarkRed : ConsoleColor.Gray;  		WriteAt (COL0' y' "{0'7}"' port);  		Console.ForegroundColor = ConsoleColor.Gray;  		WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsReceived.Hz * 125000));  		WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsSent.Hz * 125000));  		WriteAt (COL3' y' "{0'6:N1}"' proc.Cpu.UsageCores * 100);  		WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (proc.Memory.UsedBytes));  		WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (proc.Memory.AvailableBytes));  		WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  		// 1 == 1 core' but a process can go a little bit higher  		WriteAt (COL7' y' "{0'11}"' map);  		Console.ForegroundColor = proc.Cpu.UsageCores >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (proc.Cpu.UsageCores' 1' BARSZ)));  		Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (proc.Memory.UsedBytes' proc.Memory.AvailableBytes' BARSZ)));  		Console.ForegroundColor = proc.Disk.Busy >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL6 + 7' y' "{0'-15}"' new string ('|'' Bar (proc.Disk.Busy' 1' BARSZ)));  		++y;  	}  	++y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: foreach (var machine in status.Cluster.Machines.Values.OrderBy (x => x.Address' StringComparer.Ordinal)) {  	var procs = status.Cluster.Processes.Values.Where (p => p.MachineId == machine.Id).OrderBy (p => p.Address' StringComparer.Ordinal).ToList ();  	var map = new RoleMap ();  	foreach (var proc in procs) {  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  	}  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0'15} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'22} | {0'11} |"' "");  	Console.ForegroundColor = ConsoleColor.White;  	//"{0'-15} | net {2'8:N3} in {3'8:N3} out | cpu {4'5:N1}% | mem {5'5:N1} / {7'5:N1} GB {8'-20} | hdd {9'5:N1}% {10'-20}"'  	WriteAt (COL0' y' machine.Address);  	WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsReceived.Hz * 125000));  	WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsSent.Hz * 125000));  	WriteAt (COL3' y' "{0'6:N1}"' machine.Cpu.LogicalCoreUtilization * 100);  	WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (machine.Memory.CommittedBytes));  	WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (machine.Memory.TotalBytes));  	//WriteAt(COL6' y' "{0'5:N1}"' totalDiskBusy * 100);  	WriteAt (COL7' y' "{0'11}"' map);  	Console.ForegroundColor = machine.Cpu.LogicalCoreUtilization >= 0.9 ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (machine.Cpu.LogicalCoreUtilization' 1' BARSZ)));  	// 1 = all the (logical) cores  	Console.ForegroundColor = machine.Memory.CommittedBytes >= 0.95 * machine.Memory.TotalBytes ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (machine.Memory.CommittedBytes' machine.Memory.TotalBytes' BARSZ)));  	//Console.ForegroundColor = totalDiskBusy >= 0.95 ? ConsoleColor.Red : ConsoleColor.Green;  	//WriteAt(COL6 + 7' y' "{0'-15}"' new string('|'' Bar(totalDiskBusy' 1' BARSZ)));  	++y;  	//TODO: use a set to map procs ot machines? Where(..) will be slow if there are a lot of machines x processes  	foreach (var proc in procs) {  		int p = proc.Address.IndexOf (':');  		string port = p >= 0 ? proc.Address.Substring (p + 1) : proc.Address;  		map = new RoleMap ();  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  		Console.ForegroundColor = ConsoleColor.DarkGray;  		WriteAt (1' y' "{0'7} | {0'5} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'5}% {0'15} | {0'11} |"' "");  		Console.ForegroundColor = proc.Version != maxVersion ? ConsoleColor.DarkCyan : ConsoleColor.Gray;  		WriteAt (1 + 10' y' "{0'5}"' proc.Version);  		Console.ForegroundColor = proc.Excluded ? ConsoleColor.DarkRed : ConsoleColor.Gray;  		WriteAt (COL0' y' "{0'7}"' port);  		Console.ForegroundColor = ConsoleColor.Gray;  		WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsReceived.Hz * 125000));  		WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsSent.Hz * 125000));  		WriteAt (COL3' y' "{0'6:N1}"' proc.Cpu.UsageCores * 100);  		WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (proc.Memory.UsedBytes));  		WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (proc.Memory.AvailableBytes));  		WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  		// 1 == 1 core' but a process can go a little bit higher  		WriteAt (COL7' y' "{0'11}"' map);  		Console.ForegroundColor = proc.Cpu.UsageCores >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (proc.Cpu.UsageCores' 1' BARSZ)));  		Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (proc.Memory.UsedBytes' proc.Memory.AvailableBytes' BARSZ)));  		Console.ForegroundColor = proc.Disk.Busy >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL6 + 7' y' "{0'-15}"' new string ('|'' Bar (proc.Disk.Busy' 1' BARSZ)));  		++y;  	}  	++y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: foreach (var machine in status.Cluster.Machines.Values.OrderBy (x => x.Address' StringComparer.Ordinal)) {  	var procs = status.Cluster.Processes.Values.Where (p => p.MachineId == machine.Id).OrderBy (p => p.Address' StringComparer.Ordinal).ToList ();  	var map = new RoleMap ();  	foreach (var proc in procs) {  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  	}  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0'15} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'22} | {0'11} |"' "");  	Console.ForegroundColor = ConsoleColor.White;  	//"{0'-15} | net {2'8:N3} in {3'8:N3} out | cpu {4'5:N1}% | mem {5'5:N1} / {7'5:N1} GB {8'-20} | hdd {9'5:N1}% {10'-20}"'  	WriteAt (COL0' y' machine.Address);  	WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsReceived.Hz * 125000));  	WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsSent.Hz * 125000));  	WriteAt (COL3' y' "{0'6:N1}"' machine.Cpu.LogicalCoreUtilization * 100);  	WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (machine.Memory.CommittedBytes));  	WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (machine.Memory.TotalBytes));  	//WriteAt(COL6' y' "{0'5:N1}"' totalDiskBusy * 100);  	WriteAt (COL7' y' "{0'11}"' map);  	Console.ForegroundColor = machine.Cpu.LogicalCoreUtilization >= 0.9 ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (machine.Cpu.LogicalCoreUtilization' 1' BARSZ)));  	// 1 = all the (logical) cores  	Console.ForegroundColor = machine.Memory.CommittedBytes >= 0.95 * machine.Memory.TotalBytes ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (machine.Memory.CommittedBytes' machine.Memory.TotalBytes' BARSZ)));  	//Console.ForegroundColor = totalDiskBusy >= 0.95 ? ConsoleColor.Red : ConsoleColor.Green;  	//WriteAt(COL6 + 7' y' "{0'-15}"' new string('|'' Bar(totalDiskBusy' 1' BARSZ)));  	++y;  	//TODO: use a set to map procs ot machines? Where(..) will be slow if there are a lot of machines x processes  	foreach (var proc in procs) {  		int p = proc.Address.IndexOf (':');  		string port = p >= 0 ? proc.Address.Substring (p + 1) : proc.Address;  		map = new RoleMap ();  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  		Console.ForegroundColor = ConsoleColor.DarkGray;  		WriteAt (1' y' "{0'7} | {0'5} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'5}% {0'15} | {0'11} |"' "");  		Console.ForegroundColor = proc.Version != maxVersion ? ConsoleColor.DarkCyan : ConsoleColor.Gray;  		WriteAt (1 + 10' y' "{0'5}"' proc.Version);  		Console.ForegroundColor = proc.Excluded ? ConsoleColor.DarkRed : ConsoleColor.Gray;  		WriteAt (COL0' y' "{0'7}"' port);  		Console.ForegroundColor = ConsoleColor.Gray;  		WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsReceived.Hz * 125000));  		WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsSent.Hz * 125000));  		WriteAt (COL3' y' "{0'6:N1}"' proc.Cpu.UsageCores * 100);  		WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (proc.Memory.UsedBytes));  		WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (proc.Memory.AvailableBytes));  		WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  		// 1 == 1 core' but a process can go a little bit higher  		WriteAt (COL7' y' "{0'11}"' map);  		Console.ForegroundColor = proc.Cpu.UsageCores >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (proc.Cpu.UsageCores' 1' BARSZ)));  		Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (proc.Memory.UsedBytes' proc.Memory.AvailableBytes' BARSZ)));  		Console.ForegroundColor = proc.Disk.Busy >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL6 + 7' y' "{0'-15}"' new string ('|'' Bar (proc.Disk.Busy' 1' BARSZ)));  		++y;  	}  	++y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: foreach (var machine in status.Cluster.Machines.Values.OrderBy (x => x.Address' StringComparer.Ordinal)) {  	var procs = status.Cluster.Processes.Values.Where (p => p.MachineId == machine.Id).OrderBy (p => p.Address' StringComparer.Ordinal).ToList ();  	var map = new RoleMap ();  	foreach (var proc in procs) {  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  	}  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0'15} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'22} | {0'11} |"' "");  	Console.ForegroundColor = ConsoleColor.White;  	//"{0'-15} | net {2'8:N3} in {3'8:N3} out | cpu {4'5:N1}% | mem {5'5:N1} / {7'5:N1} GB {8'-20} | hdd {9'5:N1}% {10'-20}"'  	WriteAt (COL0' y' machine.Address);  	WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsReceived.Hz * 125000));  	WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsSent.Hz * 125000));  	WriteAt (COL3' y' "{0'6:N1}"' machine.Cpu.LogicalCoreUtilization * 100);  	WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (machine.Memory.CommittedBytes));  	WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (machine.Memory.TotalBytes));  	//WriteAt(COL6' y' "{0'5:N1}"' totalDiskBusy * 100);  	WriteAt (COL7' y' "{0'11}"' map);  	Console.ForegroundColor = machine.Cpu.LogicalCoreUtilization >= 0.9 ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (machine.Cpu.LogicalCoreUtilization' 1' BARSZ)));  	// 1 = all the (logical) cores  	Console.ForegroundColor = machine.Memory.CommittedBytes >= 0.95 * machine.Memory.TotalBytes ? ConsoleColor.Red : ConsoleColor.Green;  	WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (machine.Memory.CommittedBytes' machine.Memory.TotalBytes' BARSZ)));  	//Console.ForegroundColor = totalDiskBusy >= 0.95 ? ConsoleColor.Red : ConsoleColor.Green;  	//WriteAt(COL6 + 7' y' "{0'-15}"' new string('|'' Bar(totalDiskBusy' 1' BARSZ)));  	++y;  	//TODO: use a set to map procs ot machines? Where(..) will be slow if there are a lot of machines x processes  	foreach (var proc in procs) {  		int p = proc.Address.IndexOf (':');  		string port = p >= 0 ? proc.Address.Substring (p + 1) : proc.Address;  		map = new RoleMap ();  		foreach (var role in proc.Roles) {  			map.Add (role.Value);  		}  		Console.ForegroundColor = ConsoleColor.DarkGray;  		WriteAt (1' y' "{0'7} | {0'5} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'5}% {0'15} | {0'11} |"' "");  		Console.ForegroundColor = proc.Version != maxVersion ? ConsoleColor.DarkCyan : ConsoleColor.Gray;  		WriteAt (1 + 10' y' "{0'5}"' proc.Version);  		Console.ForegroundColor = proc.Excluded ? ConsoleColor.DarkRed : ConsoleColor.Gray;  		WriteAt (COL0' y' "{0'7}"' port);  		Console.ForegroundColor = ConsoleColor.Gray;  		WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsReceived.Hz * 125000));  		WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsSent.Hz * 125000));  		WriteAt (COL3' y' "{0'6:N1}"' proc.Cpu.UsageCores * 100);  		WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (proc.Memory.UsedBytes));  		WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (proc.Memory.AvailableBytes));  		WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  		// 1 == 1 core' but a process can go a little bit higher  		WriteAt (COL7' y' "{0'11}"' map);  		Console.ForegroundColor = proc.Cpu.UsageCores >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (proc.Cpu.UsageCores' 1' BARSZ)));  		Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (proc.Memory.UsedBytes' proc.Memory.AvailableBytes' BARSZ)));  		Console.ForegroundColor = proc.Disk.Busy >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  		WriteAt (COL6 + 7' y' "{0'-15}"' new string ('|'' Bar (proc.Disk.Busy' 1' BARSZ)));  		++y;  	}  	++y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsReceived.Hz * 125000));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (machine.Network.MegabitsSent.Hz * 125000));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: WriteAt (COL3' y' "{0'6:N1}"' machine.Cpu.LogicalCoreUtilization * 100);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: Console.ForegroundColor = machine.Cpu.LogicalCoreUtilization >= 0.9 ? ConsoleColor.Red : ConsoleColor.Green;  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (machine.Cpu.LogicalCoreUtilization' 1' BARSZ)));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: Console.ForegroundColor = machine.Memory.CommittedBytes >= 0.95 * machine.Memory.TotalBytes ? ConsoleColor.Red : ConsoleColor.Green;  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (machine.Memory.CommittedBytes' machine.Memory.TotalBytes' BARSZ)));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: foreach (var proc in procs) {  	int p = proc.Address.IndexOf (':');  	string port = p >= 0 ? proc.Address.Substring (p + 1) : proc.Address;  	map = new RoleMap ();  	foreach (var role in proc.Roles) {  		map.Add (role.Value);  	}  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0'7} | {0'5} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'5}% {0'15} | {0'11} |"' "");  	Console.ForegroundColor = proc.Version != maxVersion ? ConsoleColor.DarkCyan : ConsoleColor.Gray;  	WriteAt (1 + 10' y' "{0'5}"' proc.Version);  	Console.ForegroundColor = proc.Excluded ? ConsoleColor.DarkRed : ConsoleColor.Gray;  	WriteAt (COL0' y' "{0'7}"' port);  	Console.ForegroundColor = ConsoleColor.Gray;  	WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsReceived.Hz * 125000));  	WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsSent.Hz * 125000));  	WriteAt (COL3' y' "{0'6:N1}"' proc.Cpu.UsageCores * 100);  	WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (proc.Memory.UsedBytes));  	WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (proc.Memory.AvailableBytes));  	WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  	// 1 == 1 core' but a process can go a little bit higher  	WriteAt (COL7' y' "{0'11}"' map);  	Console.ForegroundColor = proc.Cpu.UsageCores >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (proc.Cpu.UsageCores' 1' BARSZ)));  	Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (proc.Memory.UsedBytes' proc.Memory.AvailableBytes' BARSZ)));  	Console.ForegroundColor = proc.Disk.Busy >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL6 + 7' y' "{0'-15}"' new string ('|'' Bar (proc.Disk.Busy' 1' BARSZ)));  	++y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: foreach (var proc in procs) {  	int p = proc.Address.IndexOf (':');  	string port = p >= 0 ? proc.Address.Substring (p + 1) : proc.Address;  	map = new RoleMap ();  	foreach (var role in proc.Roles) {  		map.Add (role.Value);  	}  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0'7} | {0'5} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'5}% {0'15} | {0'11} |"' "");  	Console.ForegroundColor = proc.Version != maxVersion ? ConsoleColor.DarkCyan : ConsoleColor.Gray;  	WriteAt (1 + 10' y' "{0'5}"' proc.Version);  	Console.ForegroundColor = proc.Excluded ? ConsoleColor.DarkRed : ConsoleColor.Gray;  	WriteAt (COL0' y' "{0'7}"' port);  	Console.ForegroundColor = ConsoleColor.Gray;  	WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsReceived.Hz * 125000));  	WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsSent.Hz * 125000));  	WriteAt (COL3' y' "{0'6:N1}"' proc.Cpu.UsageCores * 100);  	WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (proc.Memory.UsedBytes));  	WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (proc.Memory.AvailableBytes));  	WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  	// 1 == 1 core' but a process can go a little bit higher  	WriteAt (COL7' y' "{0'11}"' map);  	Console.ForegroundColor = proc.Cpu.UsageCores >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (proc.Cpu.UsageCores' 1' BARSZ)));  	Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (proc.Memory.UsedBytes' proc.Memory.AvailableBytes' BARSZ)));  	Console.ForegroundColor = proc.Disk.Busy >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL6 + 7' y' "{0'-15}"' new string ('|'' Bar (proc.Disk.Busy' 1' BARSZ)));  	++y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: foreach (var proc in procs) {  	int p = proc.Address.IndexOf (':');  	string port = p >= 0 ? proc.Address.Substring (p + 1) : proc.Address;  	map = new RoleMap ();  	foreach (var role in proc.Roles) {  		map.Add (role.Value);  	}  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0'7} | {0'5} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'5}% {0'15} | {0'11} |"' "");  	Console.ForegroundColor = proc.Version != maxVersion ? ConsoleColor.DarkCyan : ConsoleColor.Gray;  	WriteAt (1 + 10' y' "{0'5}"' proc.Version);  	Console.ForegroundColor = proc.Excluded ? ConsoleColor.DarkRed : ConsoleColor.Gray;  	WriteAt (COL0' y' "{0'7}"' port);  	Console.ForegroundColor = ConsoleColor.Gray;  	WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsReceived.Hz * 125000));  	WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsSent.Hz * 125000));  	WriteAt (COL3' y' "{0'6:N1}"' proc.Cpu.UsageCores * 100);  	WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (proc.Memory.UsedBytes));  	WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (proc.Memory.AvailableBytes));  	WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  	// 1 == 1 core' but a process can go a little bit higher  	WriteAt (COL7' y' "{0'11}"' map);  	Console.ForegroundColor = proc.Cpu.UsageCores >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (proc.Cpu.UsageCores' 1' BARSZ)));  	Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (proc.Memory.UsedBytes' proc.Memory.AvailableBytes' BARSZ)));  	Console.ForegroundColor = proc.Disk.Busy >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL6 + 7' y' "{0'-15}"' new string ('|'' Bar (proc.Disk.Busy' 1' BARSZ)));  	++y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: foreach (var proc in procs) {  	int p = proc.Address.IndexOf (':');  	string port = p >= 0 ? proc.Address.Substring (p + 1) : proc.Address;  	map = new RoleMap ();  	foreach (var role in proc.Roles) {  		map.Add (role.Value);  	}  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0'7} | {0'5} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'5}% {0'15} | {0'11} |"' "");  	Console.ForegroundColor = proc.Version != maxVersion ? ConsoleColor.DarkCyan : ConsoleColor.Gray;  	WriteAt (1 + 10' y' "{0'5}"' proc.Version);  	Console.ForegroundColor = proc.Excluded ? ConsoleColor.DarkRed : ConsoleColor.Gray;  	WriteAt (COL0' y' "{0'7}"' port);  	Console.ForegroundColor = ConsoleColor.Gray;  	WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsReceived.Hz * 125000));  	WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsSent.Hz * 125000));  	WriteAt (COL3' y' "{0'6:N1}"' proc.Cpu.UsageCores * 100);  	WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (proc.Memory.UsedBytes));  	WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (proc.Memory.AvailableBytes));  	WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  	// 1 == 1 core' but a process can go a little bit higher  	WriteAt (COL7' y' "{0'11}"' map);  	Console.ForegroundColor = proc.Cpu.UsageCores >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (proc.Cpu.UsageCores' 1' BARSZ)));  	Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (proc.Memory.UsedBytes' proc.Memory.AvailableBytes' BARSZ)));  	Console.ForegroundColor = proc.Disk.Busy >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL6 + 7' y' "{0'-15}"' new string ('|'' Bar (proc.Disk.Busy' 1' BARSZ)));  	++y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: foreach (var proc in procs) {  	int p = proc.Address.IndexOf (':');  	string port = p >= 0 ? proc.Address.Substring (p + 1) : proc.Address;  	map = new RoleMap ();  	foreach (var role in proc.Roles) {  		map.Add (role.Value);  	}  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0'7} | {0'5} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'5}% {0'15} | {0'11} |"' "");  	Console.ForegroundColor = proc.Version != maxVersion ? ConsoleColor.DarkCyan : ConsoleColor.Gray;  	WriteAt (1 + 10' y' "{0'5}"' proc.Version);  	Console.ForegroundColor = proc.Excluded ? ConsoleColor.DarkRed : ConsoleColor.Gray;  	WriteAt (COL0' y' "{0'7}"' port);  	Console.ForegroundColor = ConsoleColor.Gray;  	WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsReceived.Hz * 125000));  	WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsSent.Hz * 125000));  	WriteAt (COL3' y' "{0'6:N1}"' proc.Cpu.UsageCores * 100);  	WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (proc.Memory.UsedBytes));  	WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (proc.Memory.AvailableBytes));  	WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  	// 1 == 1 core' but a process can go a little bit higher  	WriteAt (COL7' y' "{0'11}"' map);  	Console.ForegroundColor = proc.Cpu.UsageCores >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (proc.Cpu.UsageCores' 1' BARSZ)));  	Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (proc.Memory.UsedBytes' proc.Memory.AvailableBytes' BARSZ)));  	Console.ForegroundColor = proc.Disk.Busy >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL6 + 7' y' "{0'-15}"' new string ('|'' Bar (proc.Disk.Busy' 1' BARSZ)));  	++y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: foreach (var proc in procs) {  	int p = proc.Address.IndexOf (':');  	string port = p >= 0 ? proc.Address.Substring (p + 1) : proc.Address;  	map = new RoleMap ();  	foreach (var role in proc.Roles) {  		map.Add (role.Value);  	}  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0'7} | {0'5} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'5}% {0'15} | {0'11} |"' "");  	Console.ForegroundColor = proc.Version != maxVersion ? ConsoleColor.DarkCyan : ConsoleColor.Gray;  	WriteAt (1 + 10' y' "{0'5}"' proc.Version);  	Console.ForegroundColor = proc.Excluded ? ConsoleColor.DarkRed : ConsoleColor.Gray;  	WriteAt (COL0' y' "{0'7}"' port);  	Console.ForegroundColor = ConsoleColor.Gray;  	WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsReceived.Hz * 125000));  	WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsSent.Hz * 125000));  	WriteAt (COL3' y' "{0'6:N1}"' proc.Cpu.UsageCores * 100);  	WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (proc.Memory.UsedBytes));  	WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (proc.Memory.AvailableBytes));  	WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  	// 1 == 1 core' but a process can go a little bit higher  	WriteAt (COL7' y' "{0'11}"' map);  	Console.ForegroundColor = proc.Cpu.UsageCores >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (proc.Cpu.UsageCores' 1' BARSZ)));  	Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (proc.Memory.UsedBytes' proc.Memory.AvailableBytes' BARSZ)));  	Console.ForegroundColor = proc.Disk.Busy >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL6 + 7' y' "{0'-15}"' new string ('|'' Bar (proc.Disk.Busy' 1' BARSZ)));  	++y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: foreach (var proc in procs) {  	int p = proc.Address.IndexOf (':');  	string port = p >= 0 ? proc.Address.Substring (p + 1) : proc.Address;  	map = new RoleMap ();  	foreach (var role in proc.Roles) {  		map.Add (role.Value);  	}  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0'7} | {0'5} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'5}% {0'15} | {0'11} |"' "");  	Console.ForegroundColor = proc.Version != maxVersion ? ConsoleColor.DarkCyan : ConsoleColor.Gray;  	WriteAt (1 + 10' y' "{0'5}"' proc.Version);  	Console.ForegroundColor = proc.Excluded ? ConsoleColor.DarkRed : ConsoleColor.Gray;  	WriteAt (COL0' y' "{0'7}"' port);  	Console.ForegroundColor = ConsoleColor.Gray;  	WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsReceived.Hz * 125000));  	WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsSent.Hz * 125000));  	WriteAt (COL3' y' "{0'6:N1}"' proc.Cpu.UsageCores * 100);  	WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (proc.Memory.UsedBytes));  	WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (proc.Memory.AvailableBytes));  	WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  	// 1 == 1 core' but a process can go a little bit higher  	WriteAt (COL7' y' "{0'11}"' map);  	Console.ForegroundColor = proc.Cpu.UsageCores >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (proc.Cpu.UsageCores' 1' BARSZ)));  	Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (proc.Memory.UsedBytes' proc.Memory.AvailableBytes' BARSZ)));  	Console.ForegroundColor = proc.Disk.Busy >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL6 + 7' y' "{0'-15}"' new string ('|'' Bar (proc.Disk.Busy' 1' BARSZ)));  	++y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: foreach (var proc in procs) {  	int p = proc.Address.IndexOf (':');  	string port = p >= 0 ? proc.Address.Substring (p + 1) : proc.Address;  	map = new RoleMap ();  	foreach (var role in proc.Roles) {  		map.Add (role.Value);  	}  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0'7} | {0'5} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'5}% {0'15} | {0'11} |"' "");  	Console.ForegroundColor = proc.Version != maxVersion ? ConsoleColor.DarkCyan : ConsoleColor.Gray;  	WriteAt (1 + 10' y' "{0'5}"' proc.Version);  	Console.ForegroundColor = proc.Excluded ? ConsoleColor.DarkRed : ConsoleColor.Gray;  	WriteAt (COL0' y' "{0'7}"' port);  	Console.ForegroundColor = ConsoleColor.Gray;  	WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsReceived.Hz * 125000));  	WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsSent.Hz * 125000));  	WriteAt (COL3' y' "{0'6:N1}"' proc.Cpu.UsageCores * 100);  	WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (proc.Memory.UsedBytes));  	WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (proc.Memory.AvailableBytes));  	WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  	// 1 == 1 core' but a process can go a little bit higher  	WriteAt (COL7' y' "{0'11}"' map);  	Console.ForegroundColor = proc.Cpu.UsageCores >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (proc.Cpu.UsageCores' 1' BARSZ)));  	Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (proc.Memory.UsedBytes' proc.Memory.AvailableBytes' BARSZ)));  	Console.ForegroundColor = proc.Disk.Busy >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL6 + 7' y' "{0'-15}"' new string ('|'' Bar (proc.Disk.Busy' 1' BARSZ)));  	++y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: foreach (var proc in procs) {  	int p = proc.Address.IndexOf (':');  	string port = p >= 0 ? proc.Address.Substring (p + 1) : proc.Address;  	map = new RoleMap ();  	foreach (var role in proc.Roles) {  		map.Add (role.Value);  	}  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0'7} | {0'5} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'5}% {0'15} | {0'11} |"' "");  	Console.ForegroundColor = proc.Version != maxVersion ? ConsoleColor.DarkCyan : ConsoleColor.Gray;  	WriteAt (1 + 10' y' "{0'5}"' proc.Version);  	Console.ForegroundColor = proc.Excluded ? ConsoleColor.DarkRed : ConsoleColor.Gray;  	WriteAt (COL0' y' "{0'7}"' port);  	Console.ForegroundColor = ConsoleColor.Gray;  	WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsReceived.Hz * 125000));  	WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsSent.Hz * 125000));  	WriteAt (COL3' y' "{0'6:N1}"' proc.Cpu.UsageCores * 100);  	WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (proc.Memory.UsedBytes));  	WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (proc.Memory.AvailableBytes));  	WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  	// 1 == 1 core' but a process can go a little bit higher  	WriteAt (COL7' y' "{0'11}"' map);  	Console.ForegroundColor = proc.Cpu.UsageCores >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (proc.Cpu.UsageCores' 1' BARSZ)));  	Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (proc.Memory.UsedBytes' proc.Memory.AvailableBytes' BARSZ)));  	Console.ForegroundColor = proc.Disk.Busy >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL6 + 7' y' "{0'-15}"' new string ('|'' Bar (proc.Disk.Busy' 1' BARSZ)));  	++y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: foreach (var proc in procs) {  	int p = proc.Address.IndexOf (':');  	string port = p >= 0 ? proc.Address.Substring (p + 1) : proc.Address;  	map = new RoleMap ();  	foreach (var role in proc.Roles) {  		map.Add (role.Value);  	}  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0'7} | {0'5} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'5}% {0'15} | {0'11} |"' "");  	Console.ForegroundColor = proc.Version != maxVersion ? ConsoleColor.DarkCyan : ConsoleColor.Gray;  	WriteAt (1 + 10' y' "{0'5}"' proc.Version);  	Console.ForegroundColor = proc.Excluded ? ConsoleColor.DarkRed : ConsoleColor.Gray;  	WriteAt (COL0' y' "{0'7}"' port);  	Console.ForegroundColor = ConsoleColor.Gray;  	WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsReceived.Hz * 125000));  	WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsSent.Hz * 125000));  	WriteAt (COL3' y' "{0'6:N1}"' proc.Cpu.UsageCores * 100);  	WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (proc.Memory.UsedBytes));  	WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (proc.Memory.AvailableBytes));  	WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  	// 1 == 1 core' but a process can go a little bit higher  	WriteAt (COL7' y' "{0'11}"' map);  	Console.ForegroundColor = proc.Cpu.UsageCores >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (proc.Cpu.UsageCores' 1' BARSZ)));  	Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (proc.Memory.UsedBytes' proc.Memory.AvailableBytes' BARSZ)));  	Console.ForegroundColor = proc.Disk.Busy >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL6 + 7' y' "{0'-15}"' new string ('|'' Bar (proc.Disk.Busy' 1' BARSZ)));  	++y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: foreach (var proc in procs) {  	int p = proc.Address.IndexOf (':');  	string port = p >= 0 ? proc.Address.Substring (p + 1) : proc.Address;  	map = new RoleMap ();  	foreach (var role in proc.Roles) {  		map.Add (role.Value);  	}  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0'7} | {0'5} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'5}% {0'15} | {0'11} |"' "");  	Console.ForegroundColor = proc.Version != maxVersion ? ConsoleColor.DarkCyan : ConsoleColor.Gray;  	WriteAt (1 + 10' y' "{0'5}"' proc.Version);  	Console.ForegroundColor = proc.Excluded ? ConsoleColor.DarkRed : ConsoleColor.Gray;  	WriteAt (COL0' y' "{0'7}"' port);  	Console.ForegroundColor = ConsoleColor.Gray;  	WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsReceived.Hz * 125000));  	WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsSent.Hz * 125000));  	WriteAt (COL3' y' "{0'6:N1}"' proc.Cpu.UsageCores * 100);  	WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (proc.Memory.UsedBytes));  	WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (proc.Memory.AvailableBytes));  	WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  	// 1 == 1 core' but a process can go a little bit higher  	WriteAt (COL7' y' "{0'11}"' map);  	Console.ForegroundColor = proc.Cpu.UsageCores >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (proc.Cpu.UsageCores' 1' BARSZ)));  	Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (proc.Memory.UsedBytes' proc.Memory.AvailableBytes' BARSZ)));  	Console.ForegroundColor = proc.Disk.Busy >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL6 + 7' y' "{0'-15}"' new string ('|'' Bar (proc.Disk.Busy' 1' BARSZ)));  	++y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: foreach (var proc in procs) {  	int p = proc.Address.IndexOf (':');  	string port = p >= 0 ? proc.Address.Substring (p + 1) : proc.Address;  	map = new RoleMap ();  	foreach (var role in proc.Roles) {  		map.Add (role.Value);  	}  	Console.ForegroundColor = ConsoleColor.DarkGray;  	WriteAt (1' y' "{0'7} | {0'5} | {0'8} in {0'8} out | {0'6}% {0'15} | {0'5} / {0'5} GB {0'15} | {0'5}% {0'15} | {0'11} |"' "");  	Console.ForegroundColor = proc.Version != maxVersion ? ConsoleColor.DarkCyan : ConsoleColor.Gray;  	WriteAt (1 + 10' y' "{0'5}"' proc.Version);  	Console.ForegroundColor = proc.Excluded ? ConsoleColor.DarkRed : ConsoleColor.Gray;  	WriteAt (COL0' y' "{0'7}"' port);  	Console.ForegroundColor = ConsoleColor.Gray;  	WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsReceived.Hz * 125000));  	WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsSent.Hz * 125000));  	WriteAt (COL3' y' "{0'6:N1}"' proc.Cpu.UsageCores * 100);  	WriteAt (COL4' y' "{0'5:N1}"' GigaBytes (proc.Memory.UsedBytes));  	WriteAt (COL5' y' "{0'5:N1}"' GigaBytes (proc.Memory.AvailableBytes));  	WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  	// 1 == 1 core' but a process can go a little bit higher  	WriteAt (COL7' y' "{0'11}"' map);  	Console.ForegroundColor = proc.Cpu.UsageCores >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (proc.Cpu.UsageCores' 1' BARSZ)));  	Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (proc.Memory.UsedBytes' proc.Memory.AvailableBytes' BARSZ)));  	Console.ForegroundColor = proc.Disk.Busy >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  	WriteAt (COL6 + 7' y' "{0'-15}"' new string ('|'' Bar (proc.Disk.Busy' 1' BARSZ)));  	++y;  }  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: WriteAt (1 + 10' y' "{0'5}"' proc.Version);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: WriteAt (COL1' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsReceived.Hz * 125000));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: WriteAt (COL2' y' "{0'8:N3}"' MegaBytes (proc.Network.MegabitsSent.Hz * 125000));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: WriteAt (COL3' y' "{0'6:N1}"' proc.Cpu.UsageCores * 100);  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: WriteAt (COL6' y' "{0'5:N1}"' Math.Min (proc.Disk.Busy * 100' 100));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: Console.ForegroundColor = proc.Cpu.UsageCores >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: WriteAt (COL3 + 8' y' "{0'-15}"' new string ('|'' Bar (proc.Cpu.UsageCores' 1' BARSZ)));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: Console.ForegroundColor = proc.Memory.UsedBytes >= 0.95 * proc.Memory.AvailableBytes ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: WriteAt (COL5 + 9' y' "{0'-15}"' new string ('|'' Bar (proc.Memory.UsedBytes' proc.Memory.AvailableBytes' BARSZ)));  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: Console.ForegroundColor = proc.Disk.Busy >= 0.95 ? ConsoleColor.DarkRed : ConsoleColor.DarkGreen;  
Magic Number,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,ShowProcessesScreen,The following statement contains a magic number: WriteAt (COL6 + 7' y' "{0'-15}"' new string ('|'' Bar (proc.Disk.Busy' 1' BARSZ)));  
Missing Default,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,MainAsync,The following switch statement is missing a default case: switch (k.Key) {  case ConsoleKey.Escape: {  	// [ESC]  	exit = true;  	break;  }  case ConsoleKey.C: {  	if (k.Modifiers.HasFlag (ConsoleModifiers.Control)) {  		// CTRL-C  		exit = true;  	}  	break;  }  case ConsoleKey.F: {  	// [F]ast (on/off)  	if (speed == FAST)  		speed = SLOW;  	else  		speed = FAST;  	break;  }  case ConsoleKey.H:  case ConsoleKey.F1: {  	mode = DisplayMode.Help;  	updated = repaint = true;  	break;  }  case ConsoleKey.L: {  	// [L]atency  	mode = DisplayMode.Latency;  	updated = repaint = true;  	break;  }  case ConsoleKey.M: {  	// [M]etrics  	mode = DisplayMode.Metrics;  	updated = repaint = true;  	break;  }  case ConsoleKey.P: {  	// [P]rocesses  	mode = DisplayMode.Processes;  	updated = repaint = true;  	break;  }  case ConsoleKey.Q: {  	// [Q]uit  	exit = true;  	break;  }  case ConsoleKey.R: {  	// [R]eset  	lap = now;  	next = now;  	History.Clear ();  	updated = repaint = true;  	break;  }  case ConsoleKey.S: {  	// [S]napshot  	saveNext = true;  	break;  }  case ConsoleKey.T: {  	// [T]ransactions  	mode = DisplayMode.Transactions;  	updated = repaint = true;  	break;  }  }  
Missing Default,FdbTop,Program,F:\newReposMay17\Doxense_foundationdb-dotnet-client\FdbTop\Program.cs,MainAsync,The following switch statement is missing a default case: switch (mode) {  case DisplayMode.Metrics: {  	ShowMetricsScreen (status' metric' repaint);  	break;  }  case DisplayMode.Latency: {  	ShowLatencyScreen (status' metric' repaint);  	break;  }  case DisplayMode.Transactions: {  	ShowTransactionScreen (status' metric' repaint);  	break;  }  case DisplayMode.Processes: {  	ShowProcessesScreen (status' metric' repaint);  	break;  }  case DisplayMode.Help: {  	ShowHelpScreen (repaint);  	break;  }  }  
