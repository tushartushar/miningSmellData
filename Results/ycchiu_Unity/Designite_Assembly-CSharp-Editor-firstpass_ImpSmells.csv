Implementation smell,Namespace,Class,File,Method,Description
Long Method,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateActiveMode,The method has 257 lines of code.
Long Method,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The method has 123 lines of code.
Complex Method,EB.BundleServer,BundleServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,GetContextCallback,Cyclomatic complexity of the method is 15
Complex Method,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,AddConnectionPoints,Cyclomatic complexity of the method is 13
Complex Method,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,RemoveConnectionPoints,Cyclomatic complexity of the method is 13
Complex Method,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,GroupSelectionComplete,Cyclomatic complexity of the method is 8
Complex Method,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,EndGrouping,Cyclomatic complexity of the method is 8
Complex Method,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateActiveMode,Cyclomatic complexity of the method is 91
Complex Method,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,Cyclomatic complexity of the method is 17
Complex Method,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,GetRClickPopupItems,Cyclomatic complexity of the method is 8
Complex Method,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateRect,Cyclomatic complexity of the method is 12
Complex Method,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,DrawNode,Cyclomatic complexity of the method is 10
Complex Method,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,RenderMainView,Cyclomatic complexity of the method is 16
Complex Method,EB,HierarchyTree,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Editors\HierarchyTree.cs,DrawTree,Cyclomatic complexity of the method is 11
Complex Method,UnityEditor.KabamXCodeEditor,PBXParser,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\KabamSODA\KabamXCodeEditor.cs,SkipComments,Cyclomatic complexity of the method is 8
Complex Method,UnityEditor.KabamXCodeEditor,PBXParser,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\KabamSODA\KabamXCodeEditor.cs,ParseDictionary,Cyclomatic complexity of the method is 22
Complex Method,UnityEditor.KabamXCodeEditor,PBXParser,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\KabamSODA\KabamXCodeEditor.cs,ParseArray,Cyclomatic complexity of the method is 14
Complex Method,UnityEditor.KabamXCodeEditor,PBXParser,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\KabamSODA\KabamXCodeEditor.cs,SerializeValue,Cyclomatic complexity of the method is 14
Complex Method,UnityEditor.KabamXCodeEditor,XCProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\KabamSODA\KabamXCodeEditor.cs,AddFile,Cyclomatic complexity of the method is 33
Complex Method,UnityEditor.KabamXCodeEditor,XCProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\KabamSODA\KabamXCodeEditor.cs,AddFolder,Cyclomatic complexity of the method is 8
Complex Method,UnityEditor.KabamXCodeEditor,XCProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\KabamSODA\KabamXCodeEditor.cs,ApplyMod,Cyclomatic complexity of the method is 10
Complex Method,UnityEditor.XCodeEditor,PBXParser,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\XCodeEditor-for-Unity\PBXParser.cs,SkipComments,Cyclomatic complexity of the method is 8
Complex Method,UnityEditor.XCodeEditor,PBXParser,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\XCodeEditor-for-Unity\PBXParser.cs,ParseDictionary,Cyclomatic complexity of the method is 22
Complex Method,UnityEditor.XCodeEditor,PBXParser,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\XCodeEditor-for-Unity\PBXParser.cs,ParseArray,Cyclomatic complexity of the method is 14
Complex Method,UnityEditor.XCodeEditor,PBXParser,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\XCodeEditor-for-Unity\PBXParser.cs,SerializeValue,Cyclomatic complexity of the method is 14
Complex Method,UnityEditor.XCodeEditor,XCProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\XCodeEditor-for-Unity\XCProject.cs,AddFile,Cyclomatic complexity of the method is 33
Complex Method,UnityEditor.XCodeEditor,XCProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\XCodeEditor-for-Unity\XCProject.cs,AddFolder,Cyclomatic complexity of the method is 8
Complex Method,UnityEditor.XCodeEditor,XCProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\XCodeEditor-for-Unity\XCProject.cs,ApplyMod,Cyclomatic complexity of the method is 11
Long Parameter List,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,DrawInLinkTriange,The method has 5 parameters.
Long Parameter List,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,DrawOutLinkTriange,The method has 5 parameters.
Long Parameter List,ExtensionMethods,RectExtensions,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Utils\RectExtensions.cs,Contains,The method has 6 parameters.
Long Parameter List,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,AddFramework,The method has 6 parameters.
Long Parameter List,UnityEditor.KabamXCodeEditor,XCProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\KabamSODA\KabamXCodeEditor.cs,AddFile,The method has 5 parameters.
Long Parameter List,UnityEditor.KabamXCodeEditor,XCProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\KabamSODA\KabamXCodeEditor.cs,AddFolder,The method has 5 parameters.
Long Parameter List,UnityEditor.XCodeEditor,XCProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\XCodeEditor-for-Unity\XCProject.cs,AddFile,The method has 5 parameters.
Long Parameter List,UnityEditor.XCodeEditor,XCProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\XCodeEditor-for-Unity\XCProject.cs,AddFolder,The method has 5 parameters.
Long Statement,EB.BundleServer,BundleServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,GetContextCallback,The length of the statement  "							// need to add a fake header so that unity doesn't detect it's an asset bundle and block us from accessing it via WWW.bytes " is 123.
Long Statement,EB.BundleServer,BundleServerWindow,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,OnGUI,The length of the statement  "	string updatedBundleServerAddress = GUILayout.TextField (BuildSettings.BundleServerAddress' 256' EditorStyles.boldLabel); " is 121.
Long Statement,EB.BundleServer,BundleServerWindow,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,OnGUI,The length of the statement  "	BuildSettings.DevBundleMode = (EB.Assets.DevBundleType)GUILayout.SelectionGrid (prevBundleMode' _bundleModeSelections' 1); " is 122.
Long Statement,EB.BundleServer,BundleServerWindow,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,OnGUI,The length of the statement  "	if ((BuildSettings.BundleServerAddress != bundleServerPrev) || (prevBuildOptions != BuildSettings.Options) || levelsChanged || (prevBundleMode != (int)BuildSettings.DevBundleMode)) { " is 182.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,DoPopulateTexture,The length of the statement  "	if (parent.MainViewRenderedTexture [parent.MainViewRenderTexLoadingIndex] && parent.MainViewRenderedTexture [parent.MainViewRenderTexLoadingIndex].IsCreated ()) { " is 162.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,DoPopulateTexture,The length of the statement  "		parent.MainViewRenderedTexture2D [parent.MainViewRenderTexLoadingIndex].ReadPixels (new Rect (0' 0' parent.MainViewRenderedTextureDimensions.x' parent.MainViewRenderedTextureDimensions.y)' 0' 0); " is 195.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UnGroup,The length of the statement  "		UnityEngine.Debug.Log ("[SequenceEditor] Attempting to UnGroup Nodes when no active sequence is selected in the editor"); " is 121.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateCreateGroup,The length of the statement  "	this.AdjustingInfo.Colour = (AdjustingGroupInfo.GroupingColours)EditorGUILayout.EnumPopup ("Colour"' this.AdjustingInfo.Colour); " is 128.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateActiveMode,The length of the statement  "		if ((this.MouseOverPanel == MousePanels.MainView) && (this.IsSelectingASequence == false) && (this.IsShowingRClickPopup == false) && (this.AdjustingGroupMode == AdjustGroupMode.None)) { " is 185.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateActiveMode,The length of the statement  "						if ((mouseDownConnectionPoint != null) && (mouseDownConnectionPoint.Owner.nodeType != EB.Sequence.Serialization.NodeType.Variable)) { " is 133.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The length of the statement  "	Rect usableMainViewRect = new Rect (mainViewRect.x' mainViewRect.y' mainViewRect.width - SequenceEditor.ScrollbarSize' mainViewRect.height - SequenceEditor.ScrollbarSize); " is 171.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The length of the statement  "		this.BackgroundTexture = AssetDatabase.LoadMainAssetAtPath ("Assets/Editor/EB.Sequence.Editor/Assets/EBG_BG.png") as Texture2D; " is 127.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The length of the statement  "		if (IsRedrawForced || this.MainViewRenderedTexture [MainViewRenderTexLoadingIndex] == null || this.MainViewRenderedTexture [MainViewRenderTexLoadingIndex].width != renderedTextureWidth || this.MainViewRenderedTexture [MainViewRenderTexLoadingIndex].height != renderedTextureHeight) { " is 283.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The length of the statement  "			if (this.MainViewRenderedTexture [MainViewRenderTexLoadingIndex] && this.MainViewRenderedTexture [MainViewRenderTexLoadingIndex].IsCreated ()) " is 142.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The length of the statement  "			this.MainViewRenderedTexture [MainViewRenderTexLoadingIndex] = new RenderTexture (renderedTextureWidth' renderedTextureHeight' 0' RenderTextureFormat.ARGB32' RenderTextureReadWrite.Linear); " is 189.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The length of the statement  "				this.MainViewRenderedTexture2D [MainViewRenderTexLoadingIndex] = new Texture2D (renderedTextureWidth' renderedTextureHeight' TextureFormat.ARGB32' false); " is 154.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The length of the statement  "	this.MainViewsScrollPos = GUI.BeginScrollView (usableMainViewRect' this.MainViewsScrollPos' scaledMainViewScrollRect' true' true); " is 130.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The length of the statement  "	//Rect scrolledView = new Rect( this.MainViewsScrollPos.x' this.MainViewsScrollPos.y' usableMainViewRect.width' usableMainViewRect.height); " is 139.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The length of the statement  "	//			//NOTE: could just draw the part of the texture that will be visible through the viewport. this seemed to work mostly but the gains seemed insubstantial. commenting out for now. " is 182.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The length of the statement  "		GUILayout.Window (10000' new Rect (50' 100' 500' 600)' UpdateSequenceSelectionWindow' "Sequence Select"' GUILayout.MinWidth (100)' GUILayout.MinHeight (100)); " is 158.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The length of the statement  "		GUILayout.Window (10001' new Rect (this.CreateAGroupBoxPosition.x' this.CreateAGroupBoxPosition.y' 200' 100)' UpdateCreateGroup' title' GUILayout.MinWidth (100)' GUILayout.MinHeight (100)); " is 189.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateRect,The length of the statement  "		size.y = (info.nodeNameSize.y) + _rectPadding.y * 2 + _triangleHeight * 2 + _rectPadding.y * 2 + info.ouputLinksSize.y + Mathf.Max (info.nodeNameSize.y' info.varLinksSize.y) + _rectPadding.y * 2; " is 195.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateRect,The length of the statement  "		size.x = Mathf.Max (info.nodeNameSize.x' info.varLinksSize.x' info.inputLinksSize.x + _centerSpace + info.ouputLinksSize.x) + _rectPadding.x * 2; " is 145.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateRect,The length of the statement  "		size.y = (info.nodeNameSize.y) + _rectPadding.y * 2 + _titleSpace + info.varLinksSize.y + _textPadding.y + Mathf.Max (info.inputLinksSize.y' info.ouputLinksSize.y) + _rectPadding.y * 2; " is 185.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,DrawVariableLinks,The length of the statement  "		Rect connectionBox = new Rect (anchor.x - LinkHalfWidth' anchor.y' LinkWidth' LinkHeight).Inflate (LinkInflateSize' LinkInflateSize); " is 133.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,DrawVariableLinks,The length of the statement  "		Rect connectionBox = new Rect (anchor.x - LinkHalfWidth' anchor.y' LinkWidth' LinkHeight).Inflate (LinkInflateSize' LinkInflateSize); " is 133.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,DrawEvent,The length of the statement  "	DrawingUtils.Text (nodeName' DrawingUtils.RectCenter (titleRect)' TextAnchor.MiddleCenter' isSelected ? Color.yellow : Color.white' alpha); " is 139.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,DrawNode,The length of the statement  "	DrawingUtils.Text (info.nodeName' DrawingUtils.RectCenter (titleRect)' TextAnchor.MiddleCenter' isSelected ? Color.yellow : Color.white' alpha); " is 144.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,RenderMainInfoText,The length of the statement  "		DrawingUtils.Text (string.Format ("\tNodes: {0}"' this.Target.Nodes.Count)' infoTextPosition' TextAnchor.LowerLeft' Color.yellow); " is 130.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,RenderMainInfoText,The length of the statement  "		DrawingUtils.Text (string.Format ("\tLinks: {0}"' this.Target.Links.Count)' infoTextPosition' TextAnchor.LowerLeft' Color.yellow); " is 130.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,RenderMainInfoText,The length of the statement  "		DrawingUtils.Text (string.Format ("\tGroups: {0}"' this.Target.Groups.Count)' infoTextPosition' TextAnchor.LowerLeft' Color.yellow); " is 132.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,RenderMainInfoText,The length of the statement  "	DrawingUtils.Text (string.Format ("Editor Mode: {0}"' this.ActiveMode.ToString ())' infoTextPosition' TextAnchor.LowerLeft' Color.yellow); " is 138.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,RenderMainInfoText,The length of the statement  "	DrawingUtils.Text (string.Format ("Scale Factor {0}"' this.CurrentViewScale)' infoTextPosition' TextAnchor.LowerLeft' Color.yellow); " is 132.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,RenderMainInfoText,The length of the statement  "		DrawingUtils.Text (string.Format ("Editor Window {0}"' editorRect)' infoTextPosition' TextAnchor.LowerLeft' Color.yellow); " is 122.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,RenderMainInfoText,The length of the statement  "		DrawingUtils.Text (string.Format ("Main View {0}"' mainViewRect)' infoTextPosition' TextAnchor.LowerLeft' Color.yellow); " is 120.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,RenderMainInfoText,The length of the statement  "		DrawingUtils.Text (string.Format ("Main View Scroll Pos {0}"' this.MainViewsScrollPos)' infoTextPosition' TextAnchor.LowerLeft' Color.yellow); " is 142.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,RenderMainInfoText,The length of the statement  "		DrawingUtils.Text (string.Format ("Editor Mouse Position {0}"' this.EditorMousePosition)' infoTextPosition' TextAnchor.LowerLeft' Color.yellow); " is 144.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,RenderMainInfoText,The length of the statement  "		DrawingUtils.Text (string.Format ("Main View Mouse Position {0}"' this.MainViewMousePosition)' infoTextPosition' TextAnchor.LowerLeft' Color.yellow); " is 149.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,RenderMainInfoText,The length of the statement  "		DrawingUtils.Text (string.Format ("Mouse Over Panel {0}"' this.MouseOverPanel)' infoTextPosition' TextAnchor.LowerLeft' Color.yellow); " is 134.
Long Statement,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,RenderMainView,The length of the statement  "		DrawingUtils.Text (node.comment' new Vector2 (node.rect.xMin' node.rect.yMin - 2)' TextAnchor.LowerLeft' Color.black' false); " is 125.
Long Statement,ExtensionMethods,RectExtensions,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Utils\RectExtensions.cs,Intersect,The length of the statement  "	bool noOverlap = (rect.xMin > candidate.xMax) || (rect.xMax < candidate.xMin) || (rect.yMin > candidate.yMax) || (rect.yMax < candidate.yMin); " is 142.
Long Statement,ExtensionMethods,RectExtensions,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Utils\RectExtensions.cs,Contains,The length of the statement  "		bool allAboveOrBelow = ((topLeft > 0.0f) && (bottomLeft > 0.0f) && (topRight > 0.0f) && (bottomRight > 0.0f)) || ((topLeft < 0.0f) && (bottomLeft < 0.0f) && (topRight < 0.0f) && (bottomRight < 0.0f)); " is 200.
Long Statement,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,AddLibrary,The length of the statement  "	InsertLine ("/* Begin PBXBuildFile section */"' 4' "		" + fileId + " = {isa = PBXBuildFile; fileRef = " + fileRef + "; };"); " is 124.
Long Statement,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,AddLibrary,The length of the statement  "	InsertLine ("1D60588F0D05DD3D006BFB54 /* Frameworks */"' 5' "				" + fileId + " /* " + lib + ".framework in Frameworks */'"); " is 125.
Long Statement,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,AddLibrary,The length of the statement  "	InsertLine ("29B97314FDCFA39411CA2CEA /* CustomTemplate */ "' 4' "				" + fileRef + " /* " + lib + ".framework in Frameworks */'"); " is 131.
Long Statement,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,AddLibrary,The length of the statement  "	InsertLine ("/* Begin PBXFileReference section */"' 1' "		" + fileRef + " = {isa = PBXFileReference; lastKnownFileType = \"compiled.mach-o.dylib\"; name = " + lib + "; path = usr/lib/" + lib + "; sourceTree = SDKROOT; };"); " is 223.
Long Statement,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,LocalizeFile,The length of the statement  "	//1F7CED4C1732E2FE00DB9262 /* InfoPlist.strings in Resources */ = {isa = PBXBuildFile; fileRef = 1F7CED491732E2FE00DB9262 /* InfoPlist.strings */; }; " is 149.
Long Statement,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,LocalizeFile,The length of the statement  "	InsertLine ("/* Begin PBXBuildFile section */"' 4' "		" + fileId + " = {isa = PBXBuildFile; fileRef = " + fileRef + "; };"); " is 124.
Long Statement,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,LocalizeFile,The length of the statement  "		InsertLine ("/* Begin PBXFileReference section */"' 2' "		" + id + " /* " + language + " */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = " + language + "; path = " + language + ".lproj/" + name + "; sourceTree = \"<group>\"; };"); " is 259.
Long Statement,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,AddFramework,The length of the statement  "		InsertLine ("/* Begin PBXBuildFile section */"' 4' "		" + fileId + " /* " + frameworkName + ".framework in Frameworks */ = {isa = PBXBuildFile; fileRef = " + fileRef + " /* " + frameworkName + ".framework */; };"); " is 214.
Long Statement,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,AddFramework,The length of the statement  "		InsertLine ("/* Begin PBXBuildFile section */"' 4' "		" + fileId + " /* " + frameworkName + ".framework in Frameworks */ = {isa = PBXBuildFile; fileRef = " + fileRef + " /* " + frameworkName + ".framework */; settings = {ATTRIBUTES = (" + linkage + "' ); }; };"); " is 263.
Long Statement,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,AddFramework,The length of the statement  "	InsertLine ("1D60588F0D05DD3D006BFB54 /* Frameworks */"' 5' "				" + fileId + " /* " + frameworkName + ".framework in Frameworks */'"); " is 135.
Long Statement,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,AddFramework,The length of the statement  "	InsertLine ("29B97314FDCFA39411CA2CEA /* CustomTemplate */ "' 4' "				" + fileRef + " /* " + frameworkName + ".framework in Frameworks */'"); " is 141.
Long Statement,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,AddFramework,The length of the statement  "		InsertLine ("/* Begin PBXFileReference section */"' 1' "		" + fileRef + " /* " + frameworkName + ".framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = " + frameworkName + ".framework; path = " + baseFolder + frameworkName + ".framework; sourceTree = " + sourceTree + "; };"); " is 309.
Long Statement,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,AddFramework,The length of the statement  "		InsertLine ("/* Begin PBXFileReference section */"' 1' "		" + fileRef + " /* " + frameworkName + ".framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; path = " + baseFolder + frameworkName + ".framework; sourceTree = " + sourceTree + "; };"); " is 269.
Long Statement,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,AddIcon,The length of the statement  "	InsertLine ("56DBF99D15E3CDC9007A4A8D /* iPhone_Sensors.mm in Sources */ = {isa = PBXBuildFile; fileRef = 56DBF99C15E3CDC9007A4A8D /* iPhone_Sensors.mm */; };"' 1' "		" + fileId + " /* " + iconName + " in Sources */ = {isa = PBXBuildFile; fileRef = " + fileRef + " /* " + iconName + " */; };"); " is 294.
Long Statement,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,AddIcon,The length of the statement  "	InsertLine ("8A851BA816FB3AD000E911DB /* UnityAppController.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = UnityAppController.h; sourceTree = \"<group>\"; };"' -1' " " + fileRef + " /* " + iconName + " */ = {isa = PBXFileReference; lastKnownFileType = image.png; path = \"" + iconName + "\"; sourceTree = SOURCE_ROOT; };"); " is 369.
Long Statement,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,AddIcon,The length of the statement  "	InsertLine ("D8A1C7009E80637F000160D4 /* App.mm in Sources */'"' 0' "   " + fileId + " /* " + iconName + " in Sources */'"); " is 124.
Long Statement,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,AddBundle,The length of the statement  "	InsertLine ("/* Begin PBXBuildFile section */"' 10' "   " + fileId + " /* " + bundle + " in Resources */ = {isa = PBXBuildFile; fileRef = " + fileRef + " /* " + bundle + " */; };"); " is 181.
Long Statement,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,AddBundle,The length of the statement  "	InsertLine ("/* Begin PBXFileReference section */"' 10' "   " + fileRef + " /* " + bundle + " */ = { isa = PBXFileReference; lastKnownFileType = \"wrapper.plug-in\"; path = " + bundle + "; sourceTree = SOURCE_ROOT; };"); " is 220.
Long Statement,UnityEditor.KabamXCodeEditor,PBXFileReference,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\KabamSODA\KabamXCodeEditor.cs,GuessFileType,The length of the statement  "		Debug.LogWarning ("Unknown file extension: " + extension + "\nPlease add extension and Xcode type to PBXFileReference.types"); " is 126.
Long Statement,UnityEditor.KabamXCodeEditor,PBXParser,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\KabamSODA\KabamXCodeEditor.cs,CountWhitespace,The length of the statement  "	for (int currPos = pos; currPos < data.Length && Regex.IsMatch (GetDataSubstring (currPos' 1)' @"[;'\s=]"); i++' currPos++) { " is 125.
Long Statement,UnityEditor.XCodeEditor,PBXFileReference,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\XCodeEditor-for-Unity\PBXFileReference.cs,GuessFileType,The length of the statement  "		Debug.LogWarning ("Unknown file extension: " + extension + "\nPlease add extension and Xcode type to PBXFileReference.types"); " is 126.
Long Statement,UnityEditor.XCodeEditor,PBXParser,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\XCodeEditor-for-Unity\PBXParser.cs,CountWhitespace,The length of the statement  "	for (int currPos = pos; currPos < data.Length && Regex.IsMatch (GetDataSubstring (currPos' 1)' @"[;'\s=]"); i++' currPos++) { " is 125.
Complex Conditional,EB.BundleServer,BundleServerWindow,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,OnGUI,The conditional expression  "(BuildSettings.BundleServerAddress != bundleServerPrev) || (prevBuildOptions != BuildSettings.Options) || levelsChanged || (prevBundleMode != (int)BuildSettings.DevBundleMode)"  is complex.
Complex Conditional,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateActiveMode,The conditional expression  "(this.MouseOverPanel == MousePanels.MainView) && (this.IsSelectingASequence == false) && (this.IsShowingRClickPopup == false) && (this.AdjustingGroupMode == AdjustGroupMode.None)"  is complex.
Complex Conditional,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The conditional expression  "IsRedrawForced || this.MainViewRenderedTexture [MainViewRenderTexLoadingIndex] == null || this.MainViewRenderedTexture [MainViewRenderTexLoadingIndex].width != renderedTextureWidth || this.MainViewRenderedTexture [MainViewRenderTexLoadingIndex].height != renderedTextureHeight"  is complex.
Empty Catch Block,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,LocalizeFile,The method has an empty catch block.
Magic Number,EB.BundleServer,BundleServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,GetContextCallback,The following statement contains a magic number: try {  	if (listener != null && listener.IsListening) {  		HttpListenerContext context = listener.EndGetContext (result);  		HttpListenerRequest request = context.Request;  		HttpListenerResponse response = context.Response;  		string localPath = request.Url.LocalPath.ToLower ();  		int startIndex = 0;  		int localPathLength = localPath.Length;  		if (localPath.Length > 0) {  			while (startIndex < localPathLength && localPath [startIndex] == '/') {  				startIndex++;  			}  			if (startIndex > 0) {  				localPath = localPath.Substring (startIndex);  			}  		}  		string buildFolder = BuildSettings.BaseBuildFolder;  		string localFile = Path.Combine (buildFolder' localPath);  		if (File.Exists (localFile)) {  			bool isAssetBundle = localFile.ToLower ().EndsWith ("assetbundle");  			Debug.Log ("BundleServer - sending: " + localPath);  			using (FileStream fs = File.OpenRead (localFile)) {  				//response is HttpListenerContext.Response...  				response.ContentLength64 = fs.Length + (isAssetBundle ? EB.Loader.BundleCacheBlankHeaderSize : 0);  				response.SendChunked = false;  				response.ContentType = System.Net.Mime.MediaTypeNames.Application.Octet;  				response.AddHeader ("Content-disposition"' "attachment; filename=" + localPath);  				response.StatusCode = (int)HttpStatusCode.OK;  				response.StatusDescription = "OK";  				byte[] buffer = new byte[64 * 1024];  				int read;  				using (BinaryWriter bw = new BinaryWriter (response.OutputStream)) {  					if (isAssetBundle) {  						// need to add a fake header so that unity doesn't detect it's an asset bundle and block us from accessing it via WWW.bytes  						if (EB.Loader.BundleCacheBlankHeaderSize < 8 || EB.Loader.BundleCacheBlankHeaderSize % 8 != 0) {  							throw new Exception ("EB.Assets.BundleCacheBlankHeaderSize must be > 8 bytes & divisible by 8");  						}  						for (int i = 0; i < EB.Loader.BundleCacheBlankHeaderSize / 8; i++) {  							bw.Write (0L);  						}  					}  					while ((read = fs.Read (buffer' 0' buffer.Length)) > 0) {  						bw.Write (buffer' 0' read);  						bw.Flush ();  					}  					bw.Close ();  				}  			}  		}  		else {  			Debug.Log ("BundleServer - FILE NOT FOUND: " + localPath);  			response.StatusCode = (int)HttpStatusCode.NotFound;  			response.Close ();  		}  	}  }  catch (Exception e) {  	Debug.LogError ("Exception: " + e.Message);  	throw;  }  finally {  	if (listener != null) {  		listener.BeginGetContext (GetContextCallback' listener);  	}  }  
Magic Number,EB.BundleServer,BundleServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,GetContextCallback,The following statement contains a magic number: try {  	if (listener != null && listener.IsListening) {  		HttpListenerContext context = listener.EndGetContext (result);  		HttpListenerRequest request = context.Request;  		HttpListenerResponse response = context.Response;  		string localPath = request.Url.LocalPath.ToLower ();  		int startIndex = 0;  		int localPathLength = localPath.Length;  		if (localPath.Length > 0) {  			while (startIndex < localPathLength && localPath [startIndex] == '/') {  				startIndex++;  			}  			if (startIndex > 0) {  				localPath = localPath.Substring (startIndex);  			}  		}  		string buildFolder = BuildSettings.BaseBuildFolder;  		string localFile = Path.Combine (buildFolder' localPath);  		if (File.Exists (localFile)) {  			bool isAssetBundle = localFile.ToLower ().EndsWith ("assetbundle");  			Debug.Log ("BundleServer - sending: " + localPath);  			using (FileStream fs = File.OpenRead (localFile)) {  				//response is HttpListenerContext.Response...  				response.ContentLength64 = fs.Length + (isAssetBundle ? EB.Loader.BundleCacheBlankHeaderSize : 0);  				response.SendChunked = false;  				response.ContentType = System.Net.Mime.MediaTypeNames.Application.Octet;  				response.AddHeader ("Content-disposition"' "attachment; filename=" + localPath);  				response.StatusCode = (int)HttpStatusCode.OK;  				response.StatusDescription = "OK";  				byte[] buffer = new byte[64 * 1024];  				int read;  				using (BinaryWriter bw = new BinaryWriter (response.OutputStream)) {  					if (isAssetBundle) {  						// need to add a fake header so that unity doesn't detect it's an asset bundle and block us from accessing it via WWW.bytes  						if (EB.Loader.BundleCacheBlankHeaderSize < 8 || EB.Loader.BundleCacheBlankHeaderSize % 8 != 0) {  							throw new Exception ("EB.Assets.BundleCacheBlankHeaderSize must be > 8 bytes & divisible by 8");  						}  						for (int i = 0; i < EB.Loader.BundleCacheBlankHeaderSize / 8; i++) {  							bw.Write (0L);  						}  					}  					while ((read = fs.Read (buffer' 0' buffer.Length)) > 0) {  						bw.Write (buffer' 0' read);  						bw.Flush ();  					}  					bw.Close ();  				}  			}  		}  		else {  			Debug.Log ("BundleServer - FILE NOT FOUND: " + localPath);  			response.StatusCode = (int)HttpStatusCode.NotFound;  			response.Close ();  		}  	}  }  catch (Exception e) {  	Debug.LogError ("Exception: " + e.Message);  	throw;  }  finally {  	if (listener != null) {  		listener.BeginGetContext (GetContextCallback' listener);  	}  }  
Magic Number,EB.BundleServer,BundleServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,GetContextCallback,The following statement contains a magic number: try {  	if (listener != null && listener.IsListening) {  		HttpListenerContext context = listener.EndGetContext (result);  		HttpListenerRequest request = context.Request;  		HttpListenerResponse response = context.Response;  		string localPath = request.Url.LocalPath.ToLower ();  		int startIndex = 0;  		int localPathLength = localPath.Length;  		if (localPath.Length > 0) {  			while (startIndex < localPathLength && localPath [startIndex] == '/') {  				startIndex++;  			}  			if (startIndex > 0) {  				localPath = localPath.Substring (startIndex);  			}  		}  		string buildFolder = BuildSettings.BaseBuildFolder;  		string localFile = Path.Combine (buildFolder' localPath);  		if (File.Exists (localFile)) {  			bool isAssetBundle = localFile.ToLower ().EndsWith ("assetbundle");  			Debug.Log ("BundleServer - sending: " + localPath);  			using (FileStream fs = File.OpenRead (localFile)) {  				//response is HttpListenerContext.Response...  				response.ContentLength64 = fs.Length + (isAssetBundle ? EB.Loader.BundleCacheBlankHeaderSize : 0);  				response.SendChunked = false;  				response.ContentType = System.Net.Mime.MediaTypeNames.Application.Octet;  				response.AddHeader ("Content-disposition"' "attachment; filename=" + localPath);  				response.StatusCode = (int)HttpStatusCode.OK;  				response.StatusDescription = "OK";  				byte[] buffer = new byte[64 * 1024];  				int read;  				using (BinaryWriter bw = new BinaryWriter (response.OutputStream)) {  					if (isAssetBundle) {  						// need to add a fake header so that unity doesn't detect it's an asset bundle and block us from accessing it via WWW.bytes  						if (EB.Loader.BundleCacheBlankHeaderSize < 8 || EB.Loader.BundleCacheBlankHeaderSize % 8 != 0) {  							throw new Exception ("EB.Assets.BundleCacheBlankHeaderSize must be > 8 bytes & divisible by 8");  						}  						for (int i = 0; i < EB.Loader.BundleCacheBlankHeaderSize / 8; i++) {  							bw.Write (0L);  						}  					}  					while ((read = fs.Read (buffer' 0' buffer.Length)) > 0) {  						bw.Write (buffer' 0' read);  						bw.Flush ();  					}  					bw.Close ();  				}  			}  		}  		else {  			Debug.Log ("BundleServer - FILE NOT FOUND: " + localPath);  			response.StatusCode = (int)HttpStatusCode.NotFound;  			response.Close ();  		}  	}  }  catch (Exception e) {  	Debug.LogError ("Exception: " + e.Message);  	throw;  }  finally {  	if (listener != null) {  		listener.BeginGetContext (GetContextCallback' listener);  	}  }  
Magic Number,EB.BundleServer,BundleServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,GetContextCallback,The following statement contains a magic number: try {  	if (listener != null && listener.IsListening) {  		HttpListenerContext context = listener.EndGetContext (result);  		HttpListenerRequest request = context.Request;  		HttpListenerResponse response = context.Response;  		string localPath = request.Url.LocalPath.ToLower ();  		int startIndex = 0;  		int localPathLength = localPath.Length;  		if (localPath.Length > 0) {  			while (startIndex < localPathLength && localPath [startIndex] == '/') {  				startIndex++;  			}  			if (startIndex > 0) {  				localPath = localPath.Substring (startIndex);  			}  		}  		string buildFolder = BuildSettings.BaseBuildFolder;  		string localFile = Path.Combine (buildFolder' localPath);  		if (File.Exists (localFile)) {  			bool isAssetBundle = localFile.ToLower ().EndsWith ("assetbundle");  			Debug.Log ("BundleServer - sending: " + localPath);  			using (FileStream fs = File.OpenRead (localFile)) {  				//response is HttpListenerContext.Response...  				response.ContentLength64 = fs.Length + (isAssetBundle ? EB.Loader.BundleCacheBlankHeaderSize : 0);  				response.SendChunked = false;  				response.ContentType = System.Net.Mime.MediaTypeNames.Application.Octet;  				response.AddHeader ("Content-disposition"' "attachment; filename=" + localPath);  				response.StatusCode = (int)HttpStatusCode.OK;  				response.StatusDescription = "OK";  				byte[] buffer = new byte[64 * 1024];  				int read;  				using (BinaryWriter bw = new BinaryWriter (response.OutputStream)) {  					if (isAssetBundle) {  						// need to add a fake header so that unity doesn't detect it's an asset bundle and block us from accessing it via WWW.bytes  						if (EB.Loader.BundleCacheBlankHeaderSize < 8 || EB.Loader.BundleCacheBlankHeaderSize % 8 != 0) {  							throw new Exception ("EB.Assets.BundleCacheBlankHeaderSize must be > 8 bytes & divisible by 8");  						}  						for (int i = 0; i < EB.Loader.BundleCacheBlankHeaderSize / 8; i++) {  							bw.Write (0L);  						}  					}  					while ((read = fs.Read (buffer' 0' buffer.Length)) > 0) {  						bw.Write (buffer' 0' read);  						bw.Flush ();  					}  					bw.Close ();  				}  			}  		}  		else {  			Debug.Log ("BundleServer - FILE NOT FOUND: " + localPath);  			response.StatusCode = (int)HttpStatusCode.NotFound;  			response.Close ();  		}  	}  }  catch (Exception e) {  	Debug.LogError ("Exception: " + e.Message);  	throw;  }  finally {  	if (listener != null) {  		listener.BeginGetContext (GetContextCallback' listener);  	}  }  
Magic Number,EB.BundleServer,BundleServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,GetContextCallback,The following statement contains a magic number: try {  	if (listener != null && listener.IsListening) {  		HttpListenerContext context = listener.EndGetContext (result);  		HttpListenerRequest request = context.Request;  		HttpListenerResponse response = context.Response;  		string localPath = request.Url.LocalPath.ToLower ();  		int startIndex = 0;  		int localPathLength = localPath.Length;  		if (localPath.Length > 0) {  			while (startIndex < localPathLength && localPath [startIndex] == '/') {  				startIndex++;  			}  			if (startIndex > 0) {  				localPath = localPath.Substring (startIndex);  			}  		}  		string buildFolder = BuildSettings.BaseBuildFolder;  		string localFile = Path.Combine (buildFolder' localPath);  		if (File.Exists (localFile)) {  			bool isAssetBundle = localFile.ToLower ().EndsWith ("assetbundle");  			Debug.Log ("BundleServer - sending: " + localPath);  			using (FileStream fs = File.OpenRead (localFile)) {  				//response is HttpListenerContext.Response...  				response.ContentLength64 = fs.Length + (isAssetBundle ? EB.Loader.BundleCacheBlankHeaderSize : 0);  				response.SendChunked = false;  				response.ContentType = System.Net.Mime.MediaTypeNames.Application.Octet;  				response.AddHeader ("Content-disposition"' "attachment; filename=" + localPath);  				response.StatusCode = (int)HttpStatusCode.OK;  				response.StatusDescription = "OK";  				byte[] buffer = new byte[64 * 1024];  				int read;  				using (BinaryWriter bw = new BinaryWriter (response.OutputStream)) {  					if (isAssetBundle) {  						// need to add a fake header so that unity doesn't detect it's an asset bundle and block us from accessing it via WWW.bytes  						if (EB.Loader.BundleCacheBlankHeaderSize < 8 || EB.Loader.BundleCacheBlankHeaderSize % 8 != 0) {  							throw new Exception ("EB.Assets.BundleCacheBlankHeaderSize must be > 8 bytes & divisible by 8");  						}  						for (int i = 0; i < EB.Loader.BundleCacheBlankHeaderSize / 8; i++) {  							bw.Write (0L);  						}  					}  					while ((read = fs.Read (buffer' 0' buffer.Length)) > 0) {  						bw.Write (buffer' 0' read);  						bw.Flush ();  					}  					bw.Close ();  				}  			}  		}  		else {  			Debug.Log ("BundleServer - FILE NOT FOUND: " + localPath);  			response.StatusCode = (int)HttpStatusCode.NotFound;  			response.Close ();  		}  	}  }  catch (Exception e) {  	Debug.LogError ("Exception: " + e.Message);  	throw;  }  finally {  	if (listener != null) {  		listener.BeginGetContext (GetContextCallback' listener);  	}  }  
Magic Number,EB.BundleServer,BundleServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,GetContextCallback,The following statement contains a magic number: if (listener != null && listener.IsListening) {  	HttpListenerContext context = listener.EndGetContext (result);  	HttpListenerRequest request = context.Request;  	HttpListenerResponse response = context.Response;  	string localPath = request.Url.LocalPath.ToLower ();  	int startIndex = 0;  	int localPathLength = localPath.Length;  	if (localPath.Length > 0) {  		while (startIndex < localPathLength && localPath [startIndex] == '/') {  			startIndex++;  		}  		if (startIndex > 0) {  			localPath = localPath.Substring (startIndex);  		}  	}  	string buildFolder = BuildSettings.BaseBuildFolder;  	string localFile = Path.Combine (buildFolder' localPath);  	if (File.Exists (localFile)) {  		bool isAssetBundle = localFile.ToLower ().EndsWith ("assetbundle");  		Debug.Log ("BundleServer - sending: " + localPath);  		using (FileStream fs = File.OpenRead (localFile)) {  			//response is HttpListenerContext.Response...  			response.ContentLength64 = fs.Length + (isAssetBundle ? EB.Loader.BundleCacheBlankHeaderSize : 0);  			response.SendChunked = false;  			response.ContentType = System.Net.Mime.MediaTypeNames.Application.Octet;  			response.AddHeader ("Content-disposition"' "attachment; filename=" + localPath);  			response.StatusCode = (int)HttpStatusCode.OK;  			response.StatusDescription = "OK";  			byte[] buffer = new byte[64 * 1024];  			int read;  			using (BinaryWriter bw = new BinaryWriter (response.OutputStream)) {  				if (isAssetBundle) {  					// need to add a fake header so that unity doesn't detect it's an asset bundle and block us from accessing it via WWW.bytes  					if (EB.Loader.BundleCacheBlankHeaderSize < 8 || EB.Loader.BundleCacheBlankHeaderSize % 8 != 0) {  						throw new Exception ("EB.Assets.BundleCacheBlankHeaderSize must be > 8 bytes & divisible by 8");  					}  					for (int i = 0; i < EB.Loader.BundleCacheBlankHeaderSize / 8; i++) {  						bw.Write (0L);  					}  				}  				while ((read = fs.Read (buffer' 0' buffer.Length)) > 0) {  					bw.Write (buffer' 0' read);  					bw.Flush ();  				}  				bw.Close ();  			}  		}  	}  	else {  		Debug.Log ("BundleServer - FILE NOT FOUND: " + localPath);  		response.StatusCode = (int)HttpStatusCode.NotFound;  		response.Close ();  	}  }  
Magic Number,EB.BundleServer,BundleServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,GetContextCallback,The following statement contains a magic number: if (listener != null && listener.IsListening) {  	HttpListenerContext context = listener.EndGetContext (result);  	HttpListenerRequest request = context.Request;  	HttpListenerResponse response = context.Response;  	string localPath = request.Url.LocalPath.ToLower ();  	int startIndex = 0;  	int localPathLength = localPath.Length;  	if (localPath.Length > 0) {  		while (startIndex < localPathLength && localPath [startIndex] == '/') {  			startIndex++;  		}  		if (startIndex > 0) {  			localPath = localPath.Substring (startIndex);  		}  	}  	string buildFolder = BuildSettings.BaseBuildFolder;  	string localFile = Path.Combine (buildFolder' localPath);  	if (File.Exists (localFile)) {  		bool isAssetBundle = localFile.ToLower ().EndsWith ("assetbundle");  		Debug.Log ("BundleServer - sending: " + localPath);  		using (FileStream fs = File.OpenRead (localFile)) {  			//response is HttpListenerContext.Response...  			response.ContentLength64 = fs.Length + (isAssetBundle ? EB.Loader.BundleCacheBlankHeaderSize : 0);  			response.SendChunked = false;  			response.ContentType = System.Net.Mime.MediaTypeNames.Application.Octet;  			response.AddHeader ("Content-disposition"' "attachment; filename=" + localPath);  			response.StatusCode = (int)HttpStatusCode.OK;  			response.StatusDescription = "OK";  			byte[] buffer = new byte[64 * 1024];  			int read;  			using (BinaryWriter bw = new BinaryWriter (response.OutputStream)) {  				if (isAssetBundle) {  					// need to add a fake header so that unity doesn't detect it's an asset bundle and block us from accessing it via WWW.bytes  					if (EB.Loader.BundleCacheBlankHeaderSize < 8 || EB.Loader.BundleCacheBlankHeaderSize % 8 != 0) {  						throw new Exception ("EB.Assets.BundleCacheBlankHeaderSize must be > 8 bytes & divisible by 8");  					}  					for (int i = 0; i < EB.Loader.BundleCacheBlankHeaderSize / 8; i++) {  						bw.Write (0L);  					}  				}  				while ((read = fs.Read (buffer' 0' buffer.Length)) > 0) {  					bw.Write (buffer' 0' read);  					bw.Flush ();  				}  				bw.Close ();  			}  		}  	}  	else {  		Debug.Log ("BundleServer - FILE NOT FOUND: " + localPath);  		response.StatusCode = (int)HttpStatusCode.NotFound;  		response.Close ();  	}  }  
Magic Number,EB.BundleServer,BundleServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,GetContextCallback,The following statement contains a magic number: if (listener != null && listener.IsListening) {  	HttpListenerContext context = listener.EndGetContext (result);  	HttpListenerRequest request = context.Request;  	HttpListenerResponse response = context.Response;  	string localPath = request.Url.LocalPath.ToLower ();  	int startIndex = 0;  	int localPathLength = localPath.Length;  	if (localPath.Length > 0) {  		while (startIndex < localPathLength && localPath [startIndex] == '/') {  			startIndex++;  		}  		if (startIndex > 0) {  			localPath = localPath.Substring (startIndex);  		}  	}  	string buildFolder = BuildSettings.BaseBuildFolder;  	string localFile = Path.Combine (buildFolder' localPath);  	if (File.Exists (localFile)) {  		bool isAssetBundle = localFile.ToLower ().EndsWith ("assetbundle");  		Debug.Log ("BundleServer - sending: " + localPath);  		using (FileStream fs = File.OpenRead (localFile)) {  			//response is HttpListenerContext.Response...  			response.ContentLength64 = fs.Length + (isAssetBundle ? EB.Loader.BundleCacheBlankHeaderSize : 0);  			response.SendChunked = false;  			response.ContentType = System.Net.Mime.MediaTypeNames.Application.Octet;  			response.AddHeader ("Content-disposition"' "attachment; filename=" + localPath);  			response.StatusCode = (int)HttpStatusCode.OK;  			response.StatusDescription = "OK";  			byte[] buffer = new byte[64 * 1024];  			int read;  			using (BinaryWriter bw = new BinaryWriter (response.OutputStream)) {  				if (isAssetBundle) {  					// need to add a fake header so that unity doesn't detect it's an asset bundle and block us from accessing it via WWW.bytes  					if (EB.Loader.BundleCacheBlankHeaderSize < 8 || EB.Loader.BundleCacheBlankHeaderSize % 8 != 0) {  						throw new Exception ("EB.Assets.BundleCacheBlankHeaderSize must be > 8 bytes & divisible by 8");  					}  					for (int i = 0; i < EB.Loader.BundleCacheBlankHeaderSize / 8; i++) {  						bw.Write (0L);  					}  				}  				while ((read = fs.Read (buffer' 0' buffer.Length)) > 0) {  					bw.Write (buffer' 0' read);  					bw.Flush ();  				}  				bw.Close ();  			}  		}  	}  	else {  		Debug.Log ("BundleServer - FILE NOT FOUND: " + localPath);  		response.StatusCode = (int)HttpStatusCode.NotFound;  		response.Close ();  	}  }  
Magic Number,EB.BundleServer,BundleServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,GetContextCallback,The following statement contains a magic number: if (listener != null && listener.IsListening) {  	HttpListenerContext context = listener.EndGetContext (result);  	HttpListenerRequest request = context.Request;  	HttpListenerResponse response = context.Response;  	string localPath = request.Url.LocalPath.ToLower ();  	int startIndex = 0;  	int localPathLength = localPath.Length;  	if (localPath.Length > 0) {  		while (startIndex < localPathLength && localPath [startIndex] == '/') {  			startIndex++;  		}  		if (startIndex > 0) {  			localPath = localPath.Substring (startIndex);  		}  	}  	string buildFolder = BuildSettings.BaseBuildFolder;  	string localFile = Path.Combine (buildFolder' localPath);  	if (File.Exists (localFile)) {  		bool isAssetBundle = localFile.ToLower ().EndsWith ("assetbundle");  		Debug.Log ("BundleServer - sending: " + localPath);  		using (FileStream fs = File.OpenRead (localFile)) {  			//response is HttpListenerContext.Response...  			response.ContentLength64 = fs.Length + (isAssetBundle ? EB.Loader.BundleCacheBlankHeaderSize : 0);  			response.SendChunked = false;  			response.ContentType = System.Net.Mime.MediaTypeNames.Application.Octet;  			response.AddHeader ("Content-disposition"' "attachment; filename=" + localPath);  			response.StatusCode = (int)HttpStatusCode.OK;  			response.StatusDescription = "OK";  			byte[] buffer = new byte[64 * 1024];  			int read;  			using (BinaryWriter bw = new BinaryWriter (response.OutputStream)) {  				if (isAssetBundle) {  					// need to add a fake header so that unity doesn't detect it's an asset bundle and block us from accessing it via WWW.bytes  					if (EB.Loader.BundleCacheBlankHeaderSize < 8 || EB.Loader.BundleCacheBlankHeaderSize % 8 != 0) {  						throw new Exception ("EB.Assets.BundleCacheBlankHeaderSize must be > 8 bytes & divisible by 8");  					}  					for (int i = 0; i < EB.Loader.BundleCacheBlankHeaderSize / 8; i++) {  						bw.Write (0L);  					}  				}  				while ((read = fs.Read (buffer' 0' buffer.Length)) > 0) {  					bw.Write (buffer' 0' read);  					bw.Flush ();  				}  				bw.Close ();  			}  		}  	}  	else {  		Debug.Log ("BundleServer - FILE NOT FOUND: " + localPath);  		response.StatusCode = (int)HttpStatusCode.NotFound;  		response.Close ();  	}  }  
Magic Number,EB.BundleServer,BundleServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,GetContextCallback,The following statement contains a magic number: if (listener != null && listener.IsListening) {  	HttpListenerContext context = listener.EndGetContext (result);  	HttpListenerRequest request = context.Request;  	HttpListenerResponse response = context.Response;  	string localPath = request.Url.LocalPath.ToLower ();  	int startIndex = 0;  	int localPathLength = localPath.Length;  	if (localPath.Length > 0) {  		while (startIndex < localPathLength && localPath [startIndex] == '/') {  			startIndex++;  		}  		if (startIndex > 0) {  			localPath = localPath.Substring (startIndex);  		}  	}  	string buildFolder = BuildSettings.BaseBuildFolder;  	string localFile = Path.Combine (buildFolder' localPath);  	if (File.Exists (localFile)) {  		bool isAssetBundle = localFile.ToLower ().EndsWith ("assetbundle");  		Debug.Log ("BundleServer - sending: " + localPath);  		using (FileStream fs = File.OpenRead (localFile)) {  			//response is HttpListenerContext.Response...  			response.ContentLength64 = fs.Length + (isAssetBundle ? EB.Loader.BundleCacheBlankHeaderSize : 0);  			response.SendChunked = false;  			response.ContentType = System.Net.Mime.MediaTypeNames.Application.Octet;  			response.AddHeader ("Content-disposition"' "attachment; filename=" + localPath);  			response.StatusCode = (int)HttpStatusCode.OK;  			response.StatusDescription = "OK";  			byte[] buffer = new byte[64 * 1024];  			int read;  			using (BinaryWriter bw = new BinaryWriter (response.OutputStream)) {  				if (isAssetBundle) {  					// need to add a fake header so that unity doesn't detect it's an asset bundle and block us from accessing it via WWW.bytes  					if (EB.Loader.BundleCacheBlankHeaderSize < 8 || EB.Loader.BundleCacheBlankHeaderSize % 8 != 0) {  						throw new Exception ("EB.Assets.BundleCacheBlankHeaderSize must be > 8 bytes & divisible by 8");  					}  					for (int i = 0; i < EB.Loader.BundleCacheBlankHeaderSize / 8; i++) {  						bw.Write (0L);  					}  				}  				while ((read = fs.Read (buffer' 0' buffer.Length)) > 0) {  					bw.Write (buffer' 0' read);  					bw.Flush ();  				}  				bw.Close ();  			}  		}  	}  	else {  		Debug.Log ("BundleServer - FILE NOT FOUND: " + localPath);  		response.StatusCode = (int)HttpStatusCode.NotFound;  		response.Close ();  	}  }  
Magic Number,EB.BundleServer,BundleServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,GetContextCallback,The following statement contains a magic number: if (File.Exists (localFile)) {  	bool isAssetBundle = localFile.ToLower ().EndsWith ("assetbundle");  	Debug.Log ("BundleServer - sending: " + localPath);  	using (FileStream fs = File.OpenRead (localFile)) {  		//response is HttpListenerContext.Response...  		response.ContentLength64 = fs.Length + (isAssetBundle ? EB.Loader.BundleCacheBlankHeaderSize : 0);  		response.SendChunked = false;  		response.ContentType = System.Net.Mime.MediaTypeNames.Application.Octet;  		response.AddHeader ("Content-disposition"' "attachment; filename=" + localPath);  		response.StatusCode = (int)HttpStatusCode.OK;  		response.StatusDescription = "OK";  		byte[] buffer = new byte[64 * 1024];  		int read;  		using (BinaryWriter bw = new BinaryWriter (response.OutputStream)) {  			if (isAssetBundle) {  				// need to add a fake header so that unity doesn't detect it's an asset bundle and block us from accessing it via WWW.bytes  				if (EB.Loader.BundleCacheBlankHeaderSize < 8 || EB.Loader.BundleCacheBlankHeaderSize % 8 != 0) {  					throw new Exception ("EB.Assets.BundleCacheBlankHeaderSize must be > 8 bytes & divisible by 8");  				}  				for (int i = 0; i < EB.Loader.BundleCacheBlankHeaderSize / 8; i++) {  					bw.Write (0L);  				}  			}  			while ((read = fs.Read (buffer' 0' buffer.Length)) > 0) {  				bw.Write (buffer' 0' read);  				bw.Flush ();  			}  			bw.Close ();  		}  	}  }  else {  	Debug.Log ("BundleServer - FILE NOT FOUND: " + localPath);  	response.StatusCode = (int)HttpStatusCode.NotFound;  	response.Close ();  }  
Magic Number,EB.BundleServer,BundleServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,GetContextCallback,The following statement contains a magic number: if (File.Exists (localFile)) {  	bool isAssetBundle = localFile.ToLower ().EndsWith ("assetbundle");  	Debug.Log ("BundleServer - sending: " + localPath);  	using (FileStream fs = File.OpenRead (localFile)) {  		//response is HttpListenerContext.Response...  		response.ContentLength64 = fs.Length + (isAssetBundle ? EB.Loader.BundleCacheBlankHeaderSize : 0);  		response.SendChunked = false;  		response.ContentType = System.Net.Mime.MediaTypeNames.Application.Octet;  		response.AddHeader ("Content-disposition"' "attachment; filename=" + localPath);  		response.StatusCode = (int)HttpStatusCode.OK;  		response.StatusDescription = "OK";  		byte[] buffer = new byte[64 * 1024];  		int read;  		using (BinaryWriter bw = new BinaryWriter (response.OutputStream)) {  			if (isAssetBundle) {  				// need to add a fake header so that unity doesn't detect it's an asset bundle and block us from accessing it via WWW.bytes  				if (EB.Loader.BundleCacheBlankHeaderSize < 8 || EB.Loader.BundleCacheBlankHeaderSize % 8 != 0) {  					throw new Exception ("EB.Assets.BundleCacheBlankHeaderSize must be > 8 bytes & divisible by 8");  				}  				for (int i = 0; i < EB.Loader.BundleCacheBlankHeaderSize / 8; i++) {  					bw.Write (0L);  				}  			}  			while ((read = fs.Read (buffer' 0' buffer.Length)) > 0) {  				bw.Write (buffer' 0' read);  				bw.Flush ();  			}  			bw.Close ();  		}  	}  }  else {  	Debug.Log ("BundleServer - FILE NOT FOUND: " + localPath);  	response.StatusCode = (int)HttpStatusCode.NotFound;  	response.Close ();  }  
Magic Number,EB.BundleServer,BundleServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,GetContextCallback,The following statement contains a magic number: if (File.Exists (localFile)) {  	bool isAssetBundle = localFile.ToLower ().EndsWith ("assetbundle");  	Debug.Log ("BundleServer - sending: " + localPath);  	using (FileStream fs = File.OpenRead (localFile)) {  		//response is HttpListenerContext.Response...  		response.ContentLength64 = fs.Length + (isAssetBundle ? EB.Loader.BundleCacheBlankHeaderSize : 0);  		response.SendChunked = false;  		response.ContentType = System.Net.Mime.MediaTypeNames.Application.Octet;  		response.AddHeader ("Content-disposition"' "attachment; filename=" + localPath);  		response.StatusCode = (int)HttpStatusCode.OK;  		response.StatusDescription = "OK";  		byte[] buffer = new byte[64 * 1024];  		int read;  		using (BinaryWriter bw = new BinaryWriter (response.OutputStream)) {  			if (isAssetBundle) {  				// need to add a fake header so that unity doesn't detect it's an asset bundle and block us from accessing it via WWW.bytes  				if (EB.Loader.BundleCacheBlankHeaderSize < 8 || EB.Loader.BundleCacheBlankHeaderSize % 8 != 0) {  					throw new Exception ("EB.Assets.BundleCacheBlankHeaderSize must be > 8 bytes & divisible by 8");  				}  				for (int i = 0; i < EB.Loader.BundleCacheBlankHeaderSize / 8; i++) {  					bw.Write (0L);  				}  			}  			while ((read = fs.Read (buffer' 0' buffer.Length)) > 0) {  				bw.Write (buffer' 0' read);  				bw.Flush ();  			}  			bw.Close ();  		}  	}  }  else {  	Debug.Log ("BundleServer - FILE NOT FOUND: " + localPath);  	response.StatusCode = (int)HttpStatusCode.NotFound;  	response.Close ();  }  
Magic Number,EB.BundleServer,BundleServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,GetContextCallback,The following statement contains a magic number: if (File.Exists (localFile)) {  	bool isAssetBundle = localFile.ToLower ().EndsWith ("assetbundle");  	Debug.Log ("BundleServer - sending: " + localPath);  	using (FileStream fs = File.OpenRead (localFile)) {  		//response is HttpListenerContext.Response...  		response.ContentLength64 = fs.Length + (isAssetBundle ? EB.Loader.BundleCacheBlankHeaderSize : 0);  		response.SendChunked = false;  		response.ContentType = System.Net.Mime.MediaTypeNames.Application.Octet;  		response.AddHeader ("Content-disposition"' "attachment; filename=" + localPath);  		response.StatusCode = (int)HttpStatusCode.OK;  		response.StatusDescription = "OK";  		byte[] buffer = new byte[64 * 1024];  		int read;  		using (BinaryWriter bw = new BinaryWriter (response.OutputStream)) {  			if (isAssetBundle) {  				// need to add a fake header so that unity doesn't detect it's an asset bundle and block us from accessing it via WWW.bytes  				if (EB.Loader.BundleCacheBlankHeaderSize < 8 || EB.Loader.BundleCacheBlankHeaderSize % 8 != 0) {  					throw new Exception ("EB.Assets.BundleCacheBlankHeaderSize must be > 8 bytes & divisible by 8");  				}  				for (int i = 0; i < EB.Loader.BundleCacheBlankHeaderSize / 8; i++) {  					bw.Write (0L);  				}  			}  			while ((read = fs.Read (buffer' 0' buffer.Length)) > 0) {  				bw.Write (buffer' 0' read);  				bw.Flush ();  			}  			bw.Close ();  		}  	}  }  else {  	Debug.Log ("BundleServer - FILE NOT FOUND: " + localPath);  	response.StatusCode = (int)HttpStatusCode.NotFound;  	response.Close ();  }  
Magic Number,EB.BundleServer,BundleServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,GetContextCallback,The following statement contains a magic number: if (File.Exists (localFile)) {  	bool isAssetBundle = localFile.ToLower ().EndsWith ("assetbundle");  	Debug.Log ("BundleServer - sending: " + localPath);  	using (FileStream fs = File.OpenRead (localFile)) {  		//response is HttpListenerContext.Response...  		response.ContentLength64 = fs.Length + (isAssetBundle ? EB.Loader.BundleCacheBlankHeaderSize : 0);  		response.SendChunked = false;  		response.ContentType = System.Net.Mime.MediaTypeNames.Application.Octet;  		response.AddHeader ("Content-disposition"' "attachment; filename=" + localPath);  		response.StatusCode = (int)HttpStatusCode.OK;  		response.StatusDescription = "OK";  		byte[] buffer = new byte[64 * 1024];  		int read;  		using (BinaryWriter bw = new BinaryWriter (response.OutputStream)) {  			if (isAssetBundle) {  				// need to add a fake header so that unity doesn't detect it's an asset bundle and block us from accessing it via WWW.bytes  				if (EB.Loader.BundleCacheBlankHeaderSize < 8 || EB.Loader.BundleCacheBlankHeaderSize % 8 != 0) {  					throw new Exception ("EB.Assets.BundleCacheBlankHeaderSize must be > 8 bytes & divisible by 8");  				}  				for (int i = 0; i < EB.Loader.BundleCacheBlankHeaderSize / 8; i++) {  					bw.Write (0L);  				}  			}  			while ((read = fs.Read (buffer' 0' buffer.Length)) > 0) {  				bw.Write (buffer' 0' read);  				bw.Flush ();  			}  			bw.Close ();  		}  	}  }  else {  	Debug.Log ("BundleServer - FILE NOT FOUND: " + localPath);  	response.StatusCode = (int)HttpStatusCode.NotFound;  	response.Close ();  }  
Magic Number,EB.BundleServer,BundleServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,GetContextCallback,The following statement contains a magic number: using (FileStream fs = File.OpenRead (localFile)) {  	//response is HttpListenerContext.Response...  	response.ContentLength64 = fs.Length + (isAssetBundle ? EB.Loader.BundleCacheBlankHeaderSize : 0);  	response.SendChunked = false;  	response.ContentType = System.Net.Mime.MediaTypeNames.Application.Octet;  	response.AddHeader ("Content-disposition"' "attachment; filename=" + localPath);  	response.StatusCode = (int)HttpStatusCode.OK;  	response.StatusDescription = "OK";  	byte[] buffer = new byte[64 * 1024];  	int read;  	using (BinaryWriter bw = new BinaryWriter (response.OutputStream)) {  		if (isAssetBundle) {  			// need to add a fake header so that unity doesn't detect it's an asset bundle and block us from accessing it via WWW.bytes  			if (EB.Loader.BundleCacheBlankHeaderSize < 8 || EB.Loader.BundleCacheBlankHeaderSize % 8 != 0) {  				throw new Exception ("EB.Assets.BundleCacheBlankHeaderSize must be > 8 bytes & divisible by 8");  			}  			for (int i = 0; i < EB.Loader.BundleCacheBlankHeaderSize / 8; i++) {  				bw.Write (0L);  			}  		}  		while ((read = fs.Read (buffer' 0' buffer.Length)) > 0) {  			bw.Write (buffer' 0' read);  			bw.Flush ();  		}  		bw.Close ();  	}  }  
Magic Number,EB.BundleServer,BundleServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,GetContextCallback,The following statement contains a magic number: using (FileStream fs = File.OpenRead (localFile)) {  	//response is HttpListenerContext.Response...  	response.ContentLength64 = fs.Length + (isAssetBundle ? EB.Loader.BundleCacheBlankHeaderSize : 0);  	response.SendChunked = false;  	response.ContentType = System.Net.Mime.MediaTypeNames.Application.Octet;  	response.AddHeader ("Content-disposition"' "attachment; filename=" + localPath);  	response.StatusCode = (int)HttpStatusCode.OK;  	response.StatusDescription = "OK";  	byte[] buffer = new byte[64 * 1024];  	int read;  	using (BinaryWriter bw = new BinaryWriter (response.OutputStream)) {  		if (isAssetBundle) {  			// need to add a fake header so that unity doesn't detect it's an asset bundle and block us from accessing it via WWW.bytes  			if (EB.Loader.BundleCacheBlankHeaderSize < 8 || EB.Loader.BundleCacheBlankHeaderSize % 8 != 0) {  				throw new Exception ("EB.Assets.BundleCacheBlankHeaderSize must be > 8 bytes & divisible by 8");  			}  			for (int i = 0; i < EB.Loader.BundleCacheBlankHeaderSize / 8; i++) {  				bw.Write (0L);  			}  		}  		while ((read = fs.Read (buffer' 0' buffer.Length)) > 0) {  			bw.Write (buffer' 0' read);  			bw.Flush ();  		}  		bw.Close ();  	}  }  
Magic Number,EB.BundleServer,BundleServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,GetContextCallback,The following statement contains a magic number: using (FileStream fs = File.OpenRead (localFile)) {  	//response is HttpListenerContext.Response...  	response.ContentLength64 = fs.Length + (isAssetBundle ? EB.Loader.BundleCacheBlankHeaderSize : 0);  	response.SendChunked = false;  	response.ContentType = System.Net.Mime.MediaTypeNames.Application.Octet;  	response.AddHeader ("Content-disposition"' "attachment; filename=" + localPath);  	response.StatusCode = (int)HttpStatusCode.OK;  	response.StatusDescription = "OK";  	byte[] buffer = new byte[64 * 1024];  	int read;  	using (BinaryWriter bw = new BinaryWriter (response.OutputStream)) {  		if (isAssetBundle) {  			// need to add a fake header so that unity doesn't detect it's an asset bundle and block us from accessing it via WWW.bytes  			if (EB.Loader.BundleCacheBlankHeaderSize < 8 || EB.Loader.BundleCacheBlankHeaderSize % 8 != 0) {  				throw new Exception ("EB.Assets.BundleCacheBlankHeaderSize must be > 8 bytes & divisible by 8");  			}  			for (int i = 0; i < EB.Loader.BundleCacheBlankHeaderSize / 8; i++) {  				bw.Write (0L);  			}  		}  		while ((read = fs.Read (buffer' 0' buffer.Length)) > 0) {  			bw.Write (buffer' 0' read);  			bw.Flush ();  		}  		bw.Close ();  	}  }  
Magic Number,EB.BundleServer,BundleServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,GetContextCallback,The following statement contains a magic number: using (FileStream fs = File.OpenRead (localFile)) {  	//response is HttpListenerContext.Response...  	response.ContentLength64 = fs.Length + (isAssetBundle ? EB.Loader.BundleCacheBlankHeaderSize : 0);  	response.SendChunked = false;  	response.ContentType = System.Net.Mime.MediaTypeNames.Application.Octet;  	response.AddHeader ("Content-disposition"' "attachment; filename=" + localPath);  	response.StatusCode = (int)HttpStatusCode.OK;  	response.StatusDescription = "OK";  	byte[] buffer = new byte[64 * 1024];  	int read;  	using (BinaryWriter bw = new BinaryWriter (response.OutputStream)) {  		if (isAssetBundle) {  			// need to add a fake header so that unity doesn't detect it's an asset bundle and block us from accessing it via WWW.bytes  			if (EB.Loader.BundleCacheBlankHeaderSize < 8 || EB.Loader.BundleCacheBlankHeaderSize % 8 != 0) {  				throw new Exception ("EB.Assets.BundleCacheBlankHeaderSize must be > 8 bytes & divisible by 8");  			}  			for (int i = 0; i < EB.Loader.BundleCacheBlankHeaderSize / 8; i++) {  				bw.Write (0L);  			}  		}  		while ((read = fs.Read (buffer' 0' buffer.Length)) > 0) {  			bw.Write (buffer' 0' read);  			bw.Flush ();  		}  		bw.Close ();  	}  }  
Magic Number,EB.BundleServer,BundleServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,GetContextCallback,The following statement contains a magic number: using (FileStream fs = File.OpenRead (localFile)) {  	//response is HttpListenerContext.Response...  	response.ContentLength64 = fs.Length + (isAssetBundle ? EB.Loader.BundleCacheBlankHeaderSize : 0);  	response.SendChunked = false;  	response.ContentType = System.Net.Mime.MediaTypeNames.Application.Octet;  	response.AddHeader ("Content-disposition"' "attachment; filename=" + localPath);  	response.StatusCode = (int)HttpStatusCode.OK;  	response.StatusDescription = "OK";  	byte[] buffer = new byte[64 * 1024];  	int read;  	using (BinaryWriter bw = new BinaryWriter (response.OutputStream)) {  		if (isAssetBundle) {  			// need to add a fake header so that unity doesn't detect it's an asset bundle and block us from accessing it via WWW.bytes  			if (EB.Loader.BundleCacheBlankHeaderSize < 8 || EB.Loader.BundleCacheBlankHeaderSize % 8 != 0) {  				throw new Exception ("EB.Assets.BundleCacheBlankHeaderSize must be > 8 bytes & divisible by 8");  			}  			for (int i = 0; i < EB.Loader.BundleCacheBlankHeaderSize / 8; i++) {  				bw.Write (0L);  			}  		}  		while ((read = fs.Read (buffer' 0' buffer.Length)) > 0) {  			bw.Write (buffer' 0' read);  			bw.Flush ();  		}  		bw.Close ();  	}  }  
Magic Number,EB.BundleServer,BundleServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,GetContextCallback,The following statement contains a magic number: using (BinaryWriter bw = new BinaryWriter (response.OutputStream)) {  	if (isAssetBundle) {  		// need to add a fake header so that unity doesn't detect it's an asset bundle and block us from accessing it via WWW.bytes  		if (EB.Loader.BundleCacheBlankHeaderSize < 8 || EB.Loader.BundleCacheBlankHeaderSize % 8 != 0) {  			throw new Exception ("EB.Assets.BundleCacheBlankHeaderSize must be > 8 bytes & divisible by 8");  		}  		for (int i = 0; i < EB.Loader.BundleCacheBlankHeaderSize / 8; i++) {  			bw.Write (0L);  		}  	}  	while ((read = fs.Read (buffer' 0' buffer.Length)) > 0) {  		bw.Write (buffer' 0' read);  		bw.Flush ();  	}  	bw.Close ();  }  
Magic Number,EB.BundleServer,BundleServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,GetContextCallback,The following statement contains a magic number: using (BinaryWriter bw = new BinaryWriter (response.OutputStream)) {  	if (isAssetBundle) {  		// need to add a fake header so that unity doesn't detect it's an asset bundle and block us from accessing it via WWW.bytes  		if (EB.Loader.BundleCacheBlankHeaderSize < 8 || EB.Loader.BundleCacheBlankHeaderSize % 8 != 0) {  			throw new Exception ("EB.Assets.BundleCacheBlankHeaderSize must be > 8 bytes & divisible by 8");  		}  		for (int i = 0; i < EB.Loader.BundleCacheBlankHeaderSize / 8; i++) {  			bw.Write (0L);  		}  	}  	while ((read = fs.Read (buffer' 0' buffer.Length)) > 0) {  		bw.Write (buffer' 0' read);  		bw.Flush ();  	}  	bw.Close ();  }  
Magic Number,EB.BundleServer,BundleServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,GetContextCallback,The following statement contains a magic number: using (BinaryWriter bw = new BinaryWriter (response.OutputStream)) {  	if (isAssetBundle) {  		// need to add a fake header so that unity doesn't detect it's an asset bundle and block us from accessing it via WWW.bytes  		if (EB.Loader.BundleCacheBlankHeaderSize < 8 || EB.Loader.BundleCacheBlankHeaderSize % 8 != 0) {  			throw new Exception ("EB.Assets.BundleCacheBlankHeaderSize must be > 8 bytes & divisible by 8");  		}  		for (int i = 0; i < EB.Loader.BundleCacheBlankHeaderSize / 8; i++) {  			bw.Write (0L);  		}  	}  	while ((read = fs.Read (buffer' 0' buffer.Length)) > 0) {  		bw.Write (buffer' 0' read);  		bw.Flush ();  	}  	bw.Close ();  }  
Magic Number,EB.BundleServer,BundleServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,GetContextCallback,The following statement contains a magic number: if (isAssetBundle) {  	// need to add a fake header so that unity doesn't detect it's an asset bundle and block us from accessing it via WWW.bytes  	if (EB.Loader.BundleCacheBlankHeaderSize < 8 || EB.Loader.BundleCacheBlankHeaderSize % 8 != 0) {  		throw new Exception ("EB.Assets.BundleCacheBlankHeaderSize must be > 8 bytes & divisible by 8");  	}  	for (int i = 0; i < EB.Loader.BundleCacheBlankHeaderSize / 8; i++) {  		bw.Write (0L);  	}  }  
Magic Number,EB.BundleServer,BundleServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,GetContextCallback,The following statement contains a magic number: if (isAssetBundle) {  	// need to add a fake header so that unity doesn't detect it's an asset bundle and block us from accessing it via WWW.bytes  	if (EB.Loader.BundleCacheBlankHeaderSize < 8 || EB.Loader.BundleCacheBlankHeaderSize % 8 != 0) {  		throw new Exception ("EB.Assets.BundleCacheBlankHeaderSize must be > 8 bytes & divisible by 8");  	}  	for (int i = 0; i < EB.Loader.BundleCacheBlankHeaderSize / 8; i++) {  		bw.Write (0L);  	}  }  
Magic Number,EB.BundleServer,BundleServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,GetContextCallback,The following statement contains a magic number: if (isAssetBundle) {  	// need to add a fake header so that unity doesn't detect it's an asset bundle and block us from accessing it via WWW.bytes  	if (EB.Loader.BundleCacheBlankHeaderSize < 8 || EB.Loader.BundleCacheBlankHeaderSize % 8 != 0) {  		throw new Exception ("EB.Assets.BundleCacheBlankHeaderSize must be > 8 bytes & divisible by 8");  	}  	for (int i = 0; i < EB.Loader.BundleCacheBlankHeaderSize / 8; i++) {  		bw.Write (0L);  	}  }  
Magic Number,EB.BundleServer,BundleServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,GetContextCallback,The following statement contains a magic number: if (EB.Loader.BundleCacheBlankHeaderSize < 8 || EB.Loader.BundleCacheBlankHeaderSize % 8 != 0) {  	throw new Exception ("EB.Assets.BundleCacheBlankHeaderSize must be > 8 bytes & divisible by 8");  }  
Magic Number,EB.BundleServer,BundleServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,GetContextCallback,The following statement contains a magic number: if (EB.Loader.BundleCacheBlankHeaderSize < 8 || EB.Loader.BundleCacheBlankHeaderSize % 8 != 0) {  	throw new Exception ("EB.Assets.BundleCacheBlankHeaderSize must be > 8 bytes & divisible by 8");  }  
Magic Number,EB.BundleServer,BundleServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Bundles\BundleServer.cs,GetContextCallback,The following statement contains a magic number: for (int i = 0; i < EB.Loader.BundleCacheBlankHeaderSize / 8; i++) {  	bw.Write (0L);  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,DoPopulateTexture,The following statement contains a magic number: if (parent.MainViewRenderedTexture [parent.MainViewRenderTexLoadingIndex] && parent.MainViewRenderedTexture [parent.MainViewRenderTexLoadingIndex].IsCreated ()) {  	RenderTexture prevRenderTexture = RenderTexture.active;  	RenderTexture.active = parent.MainViewRenderedTexture [parent.MainViewRenderTexLoadingIndex];  	parent.MainViewRenderedTexture2D [parent.MainViewRenderTexLoadingIndex].ReadPixels (new Rect (0' 0' parent.MainViewRenderedTextureDimensions.x' parent.MainViewRenderedTextureDimensions.y)' 0' 0);  	parent.MainViewRenderedTexture2D [parent.MainViewRenderTexLoadingIndex].Apply ();  	RenderTexture.active = prevRenderTexture;  	parent.MainViewRenderTexLoadingIndex = (parent.MainViewRenderTexLoadingIndex + 1) % 2;  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,DoPopulateTexture,The following statement contains a magic number: parent.MainViewRenderTexLoadingIndex = (parent.MainViewRenderTexLoadingIndex + 1) % 2;  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,GroupSelectionComplete,The following statement contains a magic number: if (intersectingNodes.Count > 0) {  	//If we are intersecting node then select then  	this.SelectObjects (intersectingNodes' null' mode);  }  else {  	//Not intersecting any nodes so check to see if we are intersecting any links  	List<EB.Sequence.Serialization.Link> containedLinks = new List<EB.Sequence.Serialization.Link> ();  	foreach (EB.Sequence.Serialization.Link link in Target.Links) {  		ConnectionPoint start = this.GetConnectionPoint (link.outId' link.outName);  		ConnectionPoint end = this.GetConnectionPoint (link.inId' link.inName);  		if ((start != null) && (end != null)) {  			if (groupBox.Contains (start.Position' start.Tangent' end.Position' end.Tangent' 5) == true) {  				containedLinks.Add (link);  			}  		}  	}  	if (containedLinks.Count > 0) {  		this.SelectObjects (null' containedLinks' mode);  	}  	else {  		this.SelectObjects (null' null' SelectObjectOperation.Replace);  	}  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,GroupSelectionComplete,The following statement contains a magic number: foreach (EB.Sequence.Serialization.Link link in Target.Links) {  	ConnectionPoint start = this.GetConnectionPoint (link.outId' link.outName);  	ConnectionPoint end = this.GetConnectionPoint (link.inId' link.inName);  	if ((start != null) && (end != null)) {  		if (groupBox.Contains (start.Position' start.Tangent' end.Position' end.Tangent' 5) == true) {  			containedLinks.Add (link);  		}  	}  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,GroupSelectionComplete,The following statement contains a magic number: if ((start != null) && (end != null)) {  	if (groupBox.Contains (start.Position' start.Tangent' end.Position' end.Tangent' 5) == true) {  		containedLinks.Add (link);  	}  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,GroupSelectionComplete,The following statement contains a magic number: if (groupBox.Contains (start.Position' start.Tangent' end.Position' end.Tangent' 5) == true) {  	containedLinks.Add (link);  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateCreateGroup,The following statement contains a magic number: this.AdjustingInfo.Description = GUILayout.TextArea (this.AdjustingInfo.Description' GUILayout.MinHeight (100));  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateActiveMode,The following statement contains a magic number: switch (this.ActiveMode) {  case MainViewMode.Default: {  	//We don't want to move out of the Default unless the mouse is in the mainview  	if ((this.MouseOverPanel == MousePanels.MainView) && (this.IsSelectingASequence == false) && (this.IsShowingRClickPopup == false) && (this.AdjustingGroupMode == AdjustGroupMode.None)) {  		if (e.type == EventType.MouseDown) {  			switch ((MouseButton)e.button) {  			case MouseButton.Middle: {  				if (e.alt == true) {  					this.ActiveMode = MainViewMode.Panning;  				}  				else if (e.control == true) {  					this.ActiveMode = MainViewMode.Zooming;  				}  				break;  			}  			case MouseButton.Left: {  				//Check to see if we are starting a click on a connection point  				ConnectionPoint mouseDownConnectionPoint = null;  				foreach (ConnectionPoint connectionPoint in this.ConnectionPoints.Values) {  					if (connectionPoint.BoundingBox.Contains (MainViewMousePosition) == true) {  						mouseDownConnectionPoint = connectionPoint;  						break;  					}  				}  				//Check to see if we are starting a click on a node  				Stack<Serialization.Node> mouseDownNodes = new Stack<Serialization.Node> ();  				foreach (Serialization.Node candidate in this.Target.Nodes) {  					if (candidate.rect.Contains (MainViewMousePosition) == true) {  						mouseDownNodes.Push (candidate);  					}  				}  				if ((mouseDownConnectionPoint == null) && (mouseDownNodes.Count == 0)) {  					//If we aren't selecting a connection point or a node then go into group select  					this.GroupSelectionBegin (MainViewMousePosition);  					this.ActiveMode = MainViewMode.SelectingNodes;  				}  				else {  					//We need a special case becase the connection point for the variable is the same sizes as the variable  					if ((mouseDownConnectionPoint != null) && (mouseDownConnectionPoint.Owner.nodeType != EB.Sequence.Serialization.NodeType.Variable)) {  						//If we have a valid connection point then move into Linking  						this.LinkingBegin (mouseDownConnectionPoint);  						this.ActiveMode = MainViewMode.Linking;  					}  					else {  						//Check to see if we are double-clicking  						bool executingDoubleClick = false;  						if (e.clickCount == 2) {  							Serialization.Node mouseDownNode = mouseDownNodes.Peek ();  							foreach (var prop in mouseDownNode.properties) {  								if (prop.stringValue.Length > 0) {  									var attribute = mouseDownNode.GetPropertyAttribute (prop.name);  									if (attribute.Hint == "Sequence") {  										ConfirmSave ();  										GotoSequence (prop.stringValue);  										executingDoubleClick = true;  									}  								}  							}  						}  						if (executingDoubleClick == false) {  							SelectObjectOperation operation = TranslateSelectObjectOperation (e);  							//Check to see if any of the mouseDownNodes are selected  							bool alreadySelected = false;  							foreach (Serialization.Node mouseDownNode in mouseDownNodes) {  								if (this.SelectedNodes.Contains (mouseDownNode) == true) {  									alreadySelected = true;  									break;  								}  							}  							//If we are going to be replace the item in the list and it is already in there then we just want to move the list  							if ((operation == SelectObjectOperation.Replace) && (alreadySelected == true)) {  								this.ActiveMode = MainViewMode.MovingNodes;  							}  							else {  								this.SelectObjects (mouseDownNodes.Peek ().ToEnumerable ()' null' operation);  								this.ActiveMode = MainViewMode.MovingNodes;  							}  						}  					}  				}  				break;  			}  			}  		}  		else if (e.type == EventType.KeyDown) {  			if ((e.keyCode == KeyCode.G) && ((e.control == true) || (e.command == true))) {  				if (this.SelectedNodes.Count > 0) {  					this.StartGrouping (this.SelectedNodes);  				}  			}  			else if ((e.keyCode == KeyCode.U) && ((e.control == true) || (e.command == true))) {  				if (this.SelectedNodes.Count > 0) {  					this.UnGroup (this.SelectedNodes);  				}  			}  		}  	}  	break;  }  case MainViewMode.Linking: {  	if ((e.type == EventType.MouseUp) && ((MouseButton)e.button == MouseButton.Left)) {  		ConnectionPoint mouseUpConnectionPoint = null;  		foreach (ConnectionPoint connectionPoint in this.ConnectionPoints.Values) {  			if (connectionPoint.BoundingBox.Contains (MainViewMousePosition) == true) {  				mouseUpConnectionPoint = connectionPoint;  				break;  			}  		}  		this.LinkingComplete (mouseUpConnectionPoint);  		this.ActiveMode = MainViewMode.Default;  	}  	break;  }  case MainViewMode.Panning: {  	//Check to see if we should be leaving panning move.  	bool leavePanning = false;  	//Not pressing alt anymore  	if (e.alt == false) {  		leavePanning = true;  	}  	else if ((e.type == EventType.MouseUp) && ((MouseButton)e.button == MouseButton.Middle)) {  		leavePanning = true;  	}  	if (leavePanning == true) {  		this.ActiveMode = MainViewMode.Default;  	}  	break;  }  case MainViewMode.Zooming: {  	// Check to see if we should be leaving zooming mode.  	bool leaveZooming = false;  	//Not pressing ctrl anymore  	if (e.control == false) {  		leaveZooming = true;  	}  	else if ((e.type == EventType.MouseUp) && ((MouseButton)e.button == MouseButton.Middle)) {  		leaveZooming = true;  	}  	if (leaveZooming == true) {  		this.ActiveMode = MainViewMode.Default;  	}  	break;  }  case MainViewMode.SelectingNodes: {  	bool endSelecting = false;  	if ((e.type == EventType.MouseUp) && ((MouseButton)e.button == MouseButton.Left)) {  		endSelecting = true;  	}  	else if (e.type == EventType.MouseMove) {  		endSelecting = true;  	}  	if (endSelecting == true) {  		SelectObjectOperation mode = this.TranslateSelectObjectOperation (e);  		this.GroupSelectionComplete (MainViewMousePosition' mode);  		this.ActiveMode = MainViewMode.Default;  	}  	break;  }  case MainViewMode.MovingNodes: {  	if ((e.type == EventType.MouseUp) && ((MouseButton)e.button == MouseButton.Left)) {  		this.ActiveMode = MainViewMode.Default;  	}  	break;  }  case MainViewMode.CreationPlacement: {  	bool endPlacement = false;  	if ((e.type == EventType.MouseUp) && ((MouseButton)e.button == MouseButton.Left)) {  		endPlacement = true;  	}  	else if (e.type == EventType.MouseMove) {  		endPlacement = true;  	}  	if (endPlacement == true) {  		this.EndCreationPlacement (this.MouseOverPanel == MousePanels.MainView);  	}  	break;  }  default: {  	break;  }  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateActiveMode,The following statement contains a magic number: if ((this.MouseOverPanel == MousePanels.MainView) && (this.IsSelectingASequence == false) && (this.IsShowingRClickPopup == false) && (this.AdjustingGroupMode == AdjustGroupMode.None)) {  	if (e.type == EventType.MouseDown) {  		switch ((MouseButton)e.button) {  		case MouseButton.Middle: {  			if (e.alt == true) {  				this.ActiveMode = MainViewMode.Panning;  			}  			else if (e.control == true) {  				this.ActiveMode = MainViewMode.Zooming;  			}  			break;  		}  		case MouseButton.Left: {  			//Check to see if we are starting a click on a connection point  			ConnectionPoint mouseDownConnectionPoint = null;  			foreach (ConnectionPoint connectionPoint in this.ConnectionPoints.Values) {  				if (connectionPoint.BoundingBox.Contains (MainViewMousePosition) == true) {  					mouseDownConnectionPoint = connectionPoint;  					break;  				}  			}  			//Check to see if we are starting a click on a node  			Stack<Serialization.Node> mouseDownNodes = new Stack<Serialization.Node> ();  			foreach (Serialization.Node candidate in this.Target.Nodes) {  				if (candidate.rect.Contains (MainViewMousePosition) == true) {  					mouseDownNodes.Push (candidate);  				}  			}  			if ((mouseDownConnectionPoint == null) && (mouseDownNodes.Count == 0)) {  				//If we aren't selecting a connection point or a node then go into group select  				this.GroupSelectionBegin (MainViewMousePosition);  				this.ActiveMode = MainViewMode.SelectingNodes;  			}  			else {  				//We need a special case becase the connection point for the variable is the same sizes as the variable  				if ((mouseDownConnectionPoint != null) && (mouseDownConnectionPoint.Owner.nodeType != EB.Sequence.Serialization.NodeType.Variable)) {  					//If we have a valid connection point then move into Linking  					this.LinkingBegin (mouseDownConnectionPoint);  					this.ActiveMode = MainViewMode.Linking;  				}  				else {  					//Check to see if we are double-clicking  					bool executingDoubleClick = false;  					if (e.clickCount == 2) {  						Serialization.Node mouseDownNode = mouseDownNodes.Peek ();  						foreach (var prop in mouseDownNode.properties) {  							if (prop.stringValue.Length > 0) {  								var attribute = mouseDownNode.GetPropertyAttribute (prop.name);  								if (attribute.Hint == "Sequence") {  									ConfirmSave ();  									GotoSequence (prop.stringValue);  									executingDoubleClick = true;  								}  							}  						}  					}  					if (executingDoubleClick == false) {  						SelectObjectOperation operation = TranslateSelectObjectOperation (e);  						//Check to see if any of the mouseDownNodes are selected  						bool alreadySelected = false;  						foreach (Serialization.Node mouseDownNode in mouseDownNodes) {  							if (this.SelectedNodes.Contains (mouseDownNode) == true) {  								alreadySelected = true;  								break;  							}  						}  						//If we are going to be replace the item in the list and it is already in there then we just want to move the list  						if ((operation == SelectObjectOperation.Replace) && (alreadySelected == true)) {  							this.ActiveMode = MainViewMode.MovingNodes;  						}  						else {  							this.SelectObjects (mouseDownNodes.Peek ().ToEnumerable ()' null' operation);  							this.ActiveMode = MainViewMode.MovingNodes;  						}  					}  				}  			}  			break;  		}  		}  	}  	else if (e.type == EventType.KeyDown) {  		if ((e.keyCode == KeyCode.G) && ((e.control == true) || (e.command == true))) {  			if (this.SelectedNodes.Count > 0) {  				this.StartGrouping (this.SelectedNodes);  			}  		}  		else if ((e.keyCode == KeyCode.U) && ((e.control == true) || (e.command == true))) {  			if (this.SelectedNodes.Count > 0) {  				this.UnGroup (this.SelectedNodes);  			}  		}  	}  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateActiveMode,The following statement contains a magic number: if (e.type == EventType.MouseDown) {  	switch ((MouseButton)e.button) {  	case MouseButton.Middle: {  		if (e.alt == true) {  			this.ActiveMode = MainViewMode.Panning;  		}  		else if (e.control == true) {  			this.ActiveMode = MainViewMode.Zooming;  		}  		break;  	}  	case MouseButton.Left: {  		//Check to see if we are starting a click on a connection point  		ConnectionPoint mouseDownConnectionPoint = null;  		foreach (ConnectionPoint connectionPoint in this.ConnectionPoints.Values) {  			if (connectionPoint.BoundingBox.Contains (MainViewMousePosition) == true) {  				mouseDownConnectionPoint = connectionPoint;  				break;  			}  		}  		//Check to see if we are starting a click on a node  		Stack<Serialization.Node> mouseDownNodes = new Stack<Serialization.Node> ();  		foreach (Serialization.Node candidate in this.Target.Nodes) {  			if (candidate.rect.Contains (MainViewMousePosition) == true) {  				mouseDownNodes.Push (candidate);  			}  		}  		if ((mouseDownConnectionPoint == null) && (mouseDownNodes.Count == 0)) {  			//If we aren't selecting a connection point or a node then go into group select  			this.GroupSelectionBegin (MainViewMousePosition);  			this.ActiveMode = MainViewMode.SelectingNodes;  		}  		else {  			//We need a special case becase the connection point for the variable is the same sizes as the variable  			if ((mouseDownConnectionPoint != null) && (mouseDownConnectionPoint.Owner.nodeType != EB.Sequence.Serialization.NodeType.Variable)) {  				//If we have a valid connection point then move into Linking  				this.LinkingBegin (mouseDownConnectionPoint);  				this.ActiveMode = MainViewMode.Linking;  			}  			else {  				//Check to see if we are double-clicking  				bool executingDoubleClick = false;  				if (e.clickCount == 2) {  					Serialization.Node mouseDownNode = mouseDownNodes.Peek ();  					foreach (var prop in mouseDownNode.properties) {  						if (prop.stringValue.Length > 0) {  							var attribute = mouseDownNode.GetPropertyAttribute (prop.name);  							if (attribute.Hint == "Sequence") {  								ConfirmSave ();  								GotoSequence (prop.stringValue);  								executingDoubleClick = true;  							}  						}  					}  				}  				if (executingDoubleClick == false) {  					SelectObjectOperation operation = TranslateSelectObjectOperation (e);  					//Check to see if any of the mouseDownNodes are selected  					bool alreadySelected = false;  					foreach (Serialization.Node mouseDownNode in mouseDownNodes) {  						if (this.SelectedNodes.Contains (mouseDownNode) == true) {  							alreadySelected = true;  							break;  						}  					}  					//If we are going to be replace the item in the list and it is already in there then we just want to move the list  					if ((operation == SelectObjectOperation.Replace) && (alreadySelected == true)) {  						this.ActiveMode = MainViewMode.MovingNodes;  					}  					else {  						this.SelectObjects (mouseDownNodes.Peek ().ToEnumerable ()' null' operation);  						this.ActiveMode = MainViewMode.MovingNodes;  					}  				}  			}  		}  		break;  	}  	}  }  else if (e.type == EventType.KeyDown) {  	if ((e.keyCode == KeyCode.G) && ((e.control == true) || (e.command == true))) {  		if (this.SelectedNodes.Count > 0) {  			this.StartGrouping (this.SelectedNodes);  		}  	}  	else if ((e.keyCode == KeyCode.U) && ((e.control == true) || (e.command == true))) {  		if (this.SelectedNodes.Count > 0) {  			this.UnGroup (this.SelectedNodes);  		}  	}  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateActiveMode,The following statement contains a magic number: switch ((MouseButton)e.button) {  case MouseButton.Middle: {  	if (e.alt == true) {  		this.ActiveMode = MainViewMode.Panning;  	}  	else if (e.control == true) {  		this.ActiveMode = MainViewMode.Zooming;  	}  	break;  }  case MouseButton.Left: {  	//Check to see if we are starting a click on a connection point  	ConnectionPoint mouseDownConnectionPoint = null;  	foreach (ConnectionPoint connectionPoint in this.ConnectionPoints.Values) {  		if (connectionPoint.BoundingBox.Contains (MainViewMousePosition) == true) {  			mouseDownConnectionPoint = connectionPoint;  			break;  		}  	}  	//Check to see if we are starting a click on a node  	Stack<Serialization.Node> mouseDownNodes = new Stack<Serialization.Node> ();  	foreach (Serialization.Node candidate in this.Target.Nodes) {  		if (candidate.rect.Contains (MainViewMousePosition) == true) {  			mouseDownNodes.Push (candidate);  		}  	}  	if ((mouseDownConnectionPoint == null) && (mouseDownNodes.Count == 0)) {  		//If we aren't selecting a connection point or a node then go into group select  		this.GroupSelectionBegin (MainViewMousePosition);  		this.ActiveMode = MainViewMode.SelectingNodes;  	}  	else {  		//We need a special case becase the connection point for the variable is the same sizes as the variable  		if ((mouseDownConnectionPoint != null) && (mouseDownConnectionPoint.Owner.nodeType != EB.Sequence.Serialization.NodeType.Variable)) {  			//If we have a valid connection point then move into Linking  			this.LinkingBegin (mouseDownConnectionPoint);  			this.ActiveMode = MainViewMode.Linking;  		}  		else {  			//Check to see if we are double-clicking  			bool executingDoubleClick = false;  			if (e.clickCount == 2) {  				Serialization.Node mouseDownNode = mouseDownNodes.Peek ();  				foreach (var prop in mouseDownNode.properties) {  					if (prop.stringValue.Length > 0) {  						var attribute = mouseDownNode.GetPropertyAttribute (prop.name);  						if (attribute.Hint == "Sequence") {  							ConfirmSave ();  							GotoSequence (prop.stringValue);  							executingDoubleClick = true;  						}  					}  				}  			}  			if (executingDoubleClick == false) {  				SelectObjectOperation operation = TranslateSelectObjectOperation (e);  				//Check to see if any of the mouseDownNodes are selected  				bool alreadySelected = false;  				foreach (Serialization.Node mouseDownNode in mouseDownNodes) {  					if (this.SelectedNodes.Contains (mouseDownNode) == true) {  						alreadySelected = true;  						break;  					}  				}  				//If we are going to be replace the item in the list and it is already in there then we just want to move the list  				if ((operation == SelectObjectOperation.Replace) && (alreadySelected == true)) {  					this.ActiveMode = MainViewMode.MovingNodes;  				}  				else {  					this.SelectObjects (mouseDownNodes.Peek ().ToEnumerable ()' null' operation);  					this.ActiveMode = MainViewMode.MovingNodes;  				}  			}  		}  	}  	break;  }  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateActiveMode,The following statement contains a magic number: if ((mouseDownConnectionPoint == null) && (mouseDownNodes.Count == 0)) {  	//If we aren't selecting a connection point or a node then go into group select  	this.GroupSelectionBegin (MainViewMousePosition);  	this.ActiveMode = MainViewMode.SelectingNodes;  }  else {  	//We need a special case becase the connection point for the variable is the same sizes as the variable  	if ((mouseDownConnectionPoint != null) && (mouseDownConnectionPoint.Owner.nodeType != EB.Sequence.Serialization.NodeType.Variable)) {  		//If we have a valid connection point then move into Linking  		this.LinkingBegin (mouseDownConnectionPoint);  		this.ActiveMode = MainViewMode.Linking;  	}  	else {  		//Check to see if we are double-clicking  		bool executingDoubleClick = false;  		if (e.clickCount == 2) {  			Serialization.Node mouseDownNode = mouseDownNodes.Peek ();  			foreach (var prop in mouseDownNode.properties) {  				if (prop.stringValue.Length > 0) {  					var attribute = mouseDownNode.GetPropertyAttribute (prop.name);  					if (attribute.Hint == "Sequence") {  						ConfirmSave ();  						GotoSequence (prop.stringValue);  						executingDoubleClick = true;  					}  				}  			}  		}  		if (executingDoubleClick == false) {  			SelectObjectOperation operation = TranslateSelectObjectOperation (e);  			//Check to see if any of the mouseDownNodes are selected  			bool alreadySelected = false;  			foreach (Serialization.Node mouseDownNode in mouseDownNodes) {  				if (this.SelectedNodes.Contains (mouseDownNode) == true) {  					alreadySelected = true;  					break;  				}  			}  			//If we are going to be replace the item in the list and it is already in there then we just want to move the list  			if ((operation == SelectObjectOperation.Replace) && (alreadySelected == true)) {  				this.ActiveMode = MainViewMode.MovingNodes;  			}  			else {  				this.SelectObjects (mouseDownNodes.Peek ().ToEnumerable ()' null' operation);  				this.ActiveMode = MainViewMode.MovingNodes;  			}  		}  	}  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateActiveMode,The following statement contains a magic number: if ((mouseDownConnectionPoint != null) && (mouseDownConnectionPoint.Owner.nodeType != EB.Sequence.Serialization.NodeType.Variable)) {  	//If we have a valid connection point then move into Linking  	this.LinkingBegin (mouseDownConnectionPoint);  	this.ActiveMode = MainViewMode.Linking;  }  else {  	//Check to see if we are double-clicking  	bool executingDoubleClick = false;  	if (e.clickCount == 2) {  		Serialization.Node mouseDownNode = mouseDownNodes.Peek ();  		foreach (var prop in mouseDownNode.properties) {  			if (prop.stringValue.Length > 0) {  				var attribute = mouseDownNode.GetPropertyAttribute (prop.name);  				if (attribute.Hint == "Sequence") {  					ConfirmSave ();  					GotoSequence (prop.stringValue);  					executingDoubleClick = true;  				}  			}  		}  	}  	if (executingDoubleClick == false) {  		SelectObjectOperation operation = TranslateSelectObjectOperation (e);  		//Check to see if any of the mouseDownNodes are selected  		bool alreadySelected = false;  		foreach (Serialization.Node mouseDownNode in mouseDownNodes) {  			if (this.SelectedNodes.Contains (mouseDownNode) == true) {  				alreadySelected = true;  				break;  			}  		}  		//If we are going to be replace the item in the list and it is already in there then we just want to move the list  		if ((operation == SelectObjectOperation.Replace) && (alreadySelected == true)) {  			this.ActiveMode = MainViewMode.MovingNodes;  		}  		else {  			this.SelectObjects (mouseDownNodes.Peek ().ToEnumerable ()' null' operation);  			this.ActiveMode = MainViewMode.MovingNodes;  		}  	}  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateActiveMode,The following statement contains a magic number: if (e.clickCount == 2) {  	Serialization.Node mouseDownNode = mouseDownNodes.Peek ();  	foreach (var prop in mouseDownNode.properties) {  		if (prop.stringValue.Length > 0) {  			var attribute = mouseDownNode.GetPropertyAttribute (prop.name);  			if (attribute.Hint == "Sequence") {  				ConfirmSave ();  				GotoSequence (prop.stringValue);  				executingDoubleClick = true;  			}  		}  	}  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The following statement contains a magic number: if (this.IsSelectingASequence == true) {  	// SR THis garbage need to move it to new window!  	GUILayout.Window (10000' new Rect (50' 100' 500' 600)' UpdateSequenceSelectionWindow' "Sequence Select"' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  }  else if (this.AdjustingGroupMode != AdjustGroupMode.None) {  	string title = "Create a new Group";  	switch (this.AdjustingGroupMode) {  	case AdjustGroupMode.Editing: {  		title = "Editing existing Group";  		break;  	}  	default: {  		break;  	}  	}  	GUILayout.Window (10001' new Rect (this.CreateAGroupBoxPosition.x' this.CreateAGroupBoxPosition.y' 200' 100)' UpdateCreateGroup' title' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The following statement contains a magic number: if (this.IsSelectingASequence == true) {  	// SR THis garbage need to move it to new window!  	GUILayout.Window (10000' new Rect (50' 100' 500' 600)' UpdateSequenceSelectionWindow' "Sequence Select"' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  }  else if (this.AdjustingGroupMode != AdjustGroupMode.None) {  	string title = "Create a new Group";  	switch (this.AdjustingGroupMode) {  	case AdjustGroupMode.Editing: {  		title = "Editing existing Group";  		break;  	}  	default: {  		break;  	}  	}  	GUILayout.Window (10001' new Rect (this.CreateAGroupBoxPosition.x' this.CreateAGroupBoxPosition.y' 200' 100)' UpdateCreateGroup' title' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The following statement contains a magic number: if (this.IsSelectingASequence == true) {  	// SR THis garbage need to move it to new window!  	GUILayout.Window (10000' new Rect (50' 100' 500' 600)' UpdateSequenceSelectionWindow' "Sequence Select"' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  }  else if (this.AdjustingGroupMode != AdjustGroupMode.None) {  	string title = "Create a new Group";  	switch (this.AdjustingGroupMode) {  	case AdjustGroupMode.Editing: {  		title = "Editing existing Group";  		break;  	}  	default: {  		break;  	}  	}  	GUILayout.Window (10001' new Rect (this.CreateAGroupBoxPosition.x' this.CreateAGroupBoxPosition.y' 200' 100)' UpdateCreateGroup' title' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The following statement contains a magic number: if (this.IsSelectingASequence == true) {  	// SR THis garbage need to move it to new window!  	GUILayout.Window (10000' new Rect (50' 100' 500' 600)' UpdateSequenceSelectionWindow' "Sequence Select"' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  }  else if (this.AdjustingGroupMode != AdjustGroupMode.None) {  	string title = "Create a new Group";  	switch (this.AdjustingGroupMode) {  	case AdjustGroupMode.Editing: {  		title = "Editing existing Group";  		break;  	}  	default: {  		break;  	}  	}  	GUILayout.Window (10001' new Rect (this.CreateAGroupBoxPosition.x' this.CreateAGroupBoxPosition.y' 200' 100)' UpdateCreateGroup' title' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The following statement contains a magic number: if (this.IsSelectingASequence == true) {  	// SR THis garbage need to move it to new window!  	GUILayout.Window (10000' new Rect (50' 100' 500' 600)' UpdateSequenceSelectionWindow' "Sequence Select"' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  }  else if (this.AdjustingGroupMode != AdjustGroupMode.None) {  	string title = "Create a new Group";  	switch (this.AdjustingGroupMode) {  	case AdjustGroupMode.Editing: {  		title = "Editing existing Group";  		break;  	}  	default: {  		break;  	}  	}  	GUILayout.Window (10001' new Rect (this.CreateAGroupBoxPosition.x' this.CreateAGroupBoxPosition.y' 200' 100)' UpdateCreateGroup' title' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The following statement contains a magic number: if (this.IsSelectingASequence == true) {  	// SR THis garbage need to move it to new window!  	GUILayout.Window (10000' new Rect (50' 100' 500' 600)' UpdateSequenceSelectionWindow' "Sequence Select"' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  }  else if (this.AdjustingGroupMode != AdjustGroupMode.None) {  	string title = "Create a new Group";  	switch (this.AdjustingGroupMode) {  	case AdjustGroupMode.Editing: {  		title = "Editing existing Group";  		break;  	}  	default: {  		break;  	}  	}  	GUILayout.Window (10001' new Rect (this.CreateAGroupBoxPosition.x' this.CreateAGroupBoxPosition.y' 200' 100)' UpdateCreateGroup' title' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The following statement contains a magic number: if (this.IsSelectingASequence == true) {  	// SR THis garbage need to move it to new window!  	GUILayout.Window (10000' new Rect (50' 100' 500' 600)' UpdateSequenceSelectionWindow' "Sequence Select"' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  }  else if (this.AdjustingGroupMode != AdjustGroupMode.None) {  	string title = "Create a new Group";  	switch (this.AdjustingGroupMode) {  	case AdjustGroupMode.Editing: {  		title = "Editing existing Group";  		break;  	}  	default: {  		break;  	}  	}  	GUILayout.Window (10001' new Rect (this.CreateAGroupBoxPosition.x' this.CreateAGroupBoxPosition.y' 200' 100)' UpdateCreateGroup' title' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The following statement contains a magic number: if (this.IsSelectingASequence == true) {  	// SR THis garbage need to move it to new window!  	GUILayout.Window (10000' new Rect (50' 100' 500' 600)' UpdateSequenceSelectionWindow' "Sequence Select"' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  }  else if (this.AdjustingGroupMode != AdjustGroupMode.None) {  	string title = "Create a new Group";  	switch (this.AdjustingGroupMode) {  	case AdjustGroupMode.Editing: {  		title = "Editing existing Group";  		break;  	}  	default: {  		break;  	}  	}  	GUILayout.Window (10001' new Rect (this.CreateAGroupBoxPosition.x' this.CreateAGroupBoxPosition.y' 200' 100)' UpdateCreateGroup' title' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The following statement contains a magic number: if (this.IsSelectingASequence == true) {  	// SR THis garbage need to move it to new window!  	GUILayout.Window (10000' new Rect (50' 100' 500' 600)' UpdateSequenceSelectionWindow' "Sequence Select"' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  }  else if (this.AdjustingGroupMode != AdjustGroupMode.None) {  	string title = "Create a new Group";  	switch (this.AdjustingGroupMode) {  	case AdjustGroupMode.Editing: {  		title = "Editing existing Group";  		break;  	}  	default: {  		break;  	}  	}  	GUILayout.Window (10001' new Rect (this.CreateAGroupBoxPosition.x' this.CreateAGroupBoxPosition.y' 200' 100)' UpdateCreateGroup' title' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The following statement contains a magic number: if (this.IsSelectingASequence == true) {  	// SR THis garbage need to move it to new window!  	GUILayout.Window (10000' new Rect (50' 100' 500' 600)' UpdateSequenceSelectionWindow' "Sequence Select"' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  }  else if (this.AdjustingGroupMode != AdjustGroupMode.None) {  	string title = "Create a new Group";  	switch (this.AdjustingGroupMode) {  	case AdjustGroupMode.Editing: {  		title = "Editing existing Group";  		break;  	}  	default: {  		break;  	}  	}  	GUILayout.Window (10001' new Rect (this.CreateAGroupBoxPosition.x' this.CreateAGroupBoxPosition.y' 200' 100)' UpdateCreateGroup' title' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The following statement contains a magic number: if (this.IsSelectingASequence == true) {  	// SR THis garbage need to move it to new window!  	GUILayout.Window (10000' new Rect (50' 100' 500' 600)' UpdateSequenceSelectionWindow' "Sequence Select"' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  }  else if (this.AdjustingGroupMode != AdjustGroupMode.None) {  	string title = "Create a new Group";  	switch (this.AdjustingGroupMode) {  	case AdjustGroupMode.Editing: {  		title = "Editing existing Group";  		break;  	}  	default: {  		break;  	}  	}  	GUILayout.Window (10001' new Rect (this.CreateAGroupBoxPosition.x' this.CreateAGroupBoxPosition.y' 200' 100)' UpdateCreateGroup' title' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The following statement contains a magic number: if (this.IsSelectingASequence == true) {  	// SR THis garbage need to move it to new window!  	GUILayout.Window (10000' new Rect (50' 100' 500' 600)' UpdateSequenceSelectionWindow' "Sequence Select"' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  }  else if (this.AdjustingGroupMode != AdjustGroupMode.None) {  	string title = "Create a new Group";  	switch (this.AdjustingGroupMode) {  	case AdjustGroupMode.Editing: {  		title = "Editing existing Group";  		break;  	}  	default: {  		break;  	}  	}  	GUILayout.Window (10001' new Rect (this.CreateAGroupBoxPosition.x' this.CreateAGroupBoxPosition.y' 200' 100)' UpdateCreateGroup' title' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The following statement contains a magic number: GUILayout.Window (10000' new Rect (50' 100' 500' 600)' UpdateSequenceSelectionWindow' "Sequence Select"' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The following statement contains a magic number: GUILayout.Window (10000' new Rect (50' 100' 500' 600)' UpdateSequenceSelectionWindow' "Sequence Select"' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The following statement contains a magic number: GUILayout.Window (10000' new Rect (50' 100' 500' 600)' UpdateSequenceSelectionWindow' "Sequence Select"' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The following statement contains a magic number: GUILayout.Window (10000' new Rect (50' 100' 500' 600)' UpdateSequenceSelectionWindow' "Sequence Select"' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The following statement contains a magic number: GUILayout.Window (10000' new Rect (50' 100' 500' 600)' UpdateSequenceSelectionWindow' "Sequence Select"' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The following statement contains a magic number: GUILayout.Window (10000' new Rect (50' 100' 500' 600)' UpdateSequenceSelectionWindow' "Sequence Select"' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The following statement contains a magic number: GUILayout.Window (10000' new Rect (50' 100' 500' 600)' UpdateSequenceSelectionWindow' "Sequence Select"' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The following statement contains a magic number: if (this.AdjustingGroupMode != AdjustGroupMode.None) {  	string title = "Create a new Group";  	switch (this.AdjustingGroupMode) {  	case AdjustGroupMode.Editing: {  		title = "Editing existing Group";  		break;  	}  	default: {  		break;  	}  	}  	GUILayout.Window (10001' new Rect (this.CreateAGroupBoxPosition.x' this.CreateAGroupBoxPosition.y' 200' 100)' UpdateCreateGroup' title' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The following statement contains a magic number: if (this.AdjustingGroupMode != AdjustGroupMode.None) {  	string title = "Create a new Group";  	switch (this.AdjustingGroupMode) {  	case AdjustGroupMode.Editing: {  		title = "Editing existing Group";  		break;  	}  	default: {  		break;  	}  	}  	GUILayout.Window (10001' new Rect (this.CreateAGroupBoxPosition.x' this.CreateAGroupBoxPosition.y' 200' 100)' UpdateCreateGroup' title' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The following statement contains a magic number: if (this.AdjustingGroupMode != AdjustGroupMode.None) {  	string title = "Create a new Group";  	switch (this.AdjustingGroupMode) {  	case AdjustGroupMode.Editing: {  		title = "Editing existing Group";  		break;  	}  	default: {  		break;  	}  	}  	GUILayout.Window (10001' new Rect (this.CreateAGroupBoxPosition.x' this.CreateAGroupBoxPosition.y' 200' 100)' UpdateCreateGroup' title' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The following statement contains a magic number: if (this.AdjustingGroupMode != AdjustGroupMode.None) {  	string title = "Create a new Group";  	switch (this.AdjustingGroupMode) {  	case AdjustGroupMode.Editing: {  		title = "Editing existing Group";  		break;  	}  	default: {  		break;  	}  	}  	GUILayout.Window (10001' new Rect (this.CreateAGroupBoxPosition.x' this.CreateAGroupBoxPosition.y' 200' 100)' UpdateCreateGroup' title' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The following statement contains a magic number: if (this.AdjustingGroupMode != AdjustGroupMode.None) {  	string title = "Create a new Group";  	switch (this.AdjustingGroupMode) {  	case AdjustGroupMode.Editing: {  		title = "Editing existing Group";  		break;  	}  	default: {  		break;  	}  	}  	GUILayout.Window (10001' new Rect (this.CreateAGroupBoxPosition.x' this.CreateAGroupBoxPosition.y' 200' 100)' UpdateCreateGroup' title' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The following statement contains a magic number: GUILayout.Window (10001' new Rect (this.CreateAGroupBoxPosition.x' this.CreateAGroupBoxPosition.y' 200' 100)' UpdateCreateGroup' title' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The following statement contains a magic number: GUILayout.Window (10001' new Rect (this.CreateAGroupBoxPosition.x' this.CreateAGroupBoxPosition.y' 200' 100)' UpdateCreateGroup' title' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The following statement contains a magic number: GUILayout.Window (10001' new Rect (this.CreateAGroupBoxPosition.x' this.CreateAGroupBoxPosition.y' 200' 100)' UpdateCreateGroup' title' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The following statement contains a magic number: GUILayout.Window (10001' new Rect (this.CreateAGroupBoxPosition.x' this.CreateAGroupBoxPosition.y' 200' 100)' UpdateCreateGroup' title' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateMainView,The following statement contains a magic number: GUILayout.Window (10001' new Rect (this.CreateAGroupBoxPosition.x' this.CreateAGroupBoxPosition.y' 200' 100)' UpdateCreateGroup' title' GUILayout.MinWidth (100)' GUILayout.MinHeight (100));  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateRect,The following statement contains a magic number: switch (info.Owner.nodeType) {  case EB.Sequence.Serialization.NodeType.Variable:  	float radius = Mathf.Max (_minVarSize' info.nodeNameSize.magnitude + _textPadding.x);  	size.x = size.y = radius;  	break;  case EB.Sequence.Serialization.NodeType.Event:  	size.x = Mathf.Max (info.nodeNameSize.x' info.varLinksSize.x) + _rectPadding.x * 2;  	size.y = (info.nodeNameSize.y) + _rectPadding.y * 2 + _triangleHeight * 2 + _rectPadding.y * 2 + info.ouputLinksSize.y + Mathf.Max (info.nodeNameSize.y' info.varLinksSize.y) + _rectPadding.y * 2;  	break;  default:  	size.x = Mathf.Max (info.nodeNameSize.x' info.varLinksSize.x' info.inputLinksSize.x + _centerSpace + info.ouputLinksSize.x) + _rectPadding.x * 2;  	size.y = (info.nodeNameSize.y) + _rectPadding.y * 2 + _titleSpace + info.varLinksSize.y + _textPadding.y + Mathf.Max (info.inputLinksSize.y' info.ouputLinksSize.y) + _rectPadding.y * 2;  	break;  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateRect,The following statement contains a magic number: switch (info.Owner.nodeType) {  case EB.Sequence.Serialization.NodeType.Variable:  	float radius = Mathf.Max (_minVarSize' info.nodeNameSize.magnitude + _textPadding.x);  	size.x = size.y = radius;  	break;  case EB.Sequence.Serialization.NodeType.Event:  	size.x = Mathf.Max (info.nodeNameSize.x' info.varLinksSize.x) + _rectPadding.x * 2;  	size.y = (info.nodeNameSize.y) + _rectPadding.y * 2 + _triangleHeight * 2 + _rectPadding.y * 2 + info.ouputLinksSize.y + Mathf.Max (info.nodeNameSize.y' info.varLinksSize.y) + _rectPadding.y * 2;  	break;  default:  	size.x = Mathf.Max (info.nodeNameSize.x' info.varLinksSize.x' info.inputLinksSize.x + _centerSpace + info.ouputLinksSize.x) + _rectPadding.x * 2;  	size.y = (info.nodeNameSize.y) + _rectPadding.y * 2 + _titleSpace + info.varLinksSize.y + _textPadding.y + Mathf.Max (info.inputLinksSize.y' info.ouputLinksSize.y) + _rectPadding.y * 2;  	break;  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateRect,The following statement contains a magic number: switch (info.Owner.nodeType) {  case EB.Sequence.Serialization.NodeType.Variable:  	float radius = Mathf.Max (_minVarSize' info.nodeNameSize.magnitude + _textPadding.x);  	size.x = size.y = radius;  	break;  case EB.Sequence.Serialization.NodeType.Event:  	size.x = Mathf.Max (info.nodeNameSize.x' info.varLinksSize.x) + _rectPadding.x * 2;  	size.y = (info.nodeNameSize.y) + _rectPadding.y * 2 + _triangleHeight * 2 + _rectPadding.y * 2 + info.ouputLinksSize.y + Mathf.Max (info.nodeNameSize.y' info.varLinksSize.y) + _rectPadding.y * 2;  	break;  default:  	size.x = Mathf.Max (info.nodeNameSize.x' info.varLinksSize.x' info.inputLinksSize.x + _centerSpace + info.ouputLinksSize.x) + _rectPadding.x * 2;  	size.y = (info.nodeNameSize.y) + _rectPadding.y * 2 + _titleSpace + info.varLinksSize.y + _textPadding.y + Mathf.Max (info.inputLinksSize.y' info.ouputLinksSize.y) + _rectPadding.y * 2;  	break;  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateRect,The following statement contains a magic number: switch (info.Owner.nodeType) {  case EB.Sequence.Serialization.NodeType.Variable:  	float radius = Mathf.Max (_minVarSize' info.nodeNameSize.magnitude + _textPadding.x);  	size.x = size.y = radius;  	break;  case EB.Sequence.Serialization.NodeType.Event:  	size.x = Mathf.Max (info.nodeNameSize.x' info.varLinksSize.x) + _rectPadding.x * 2;  	size.y = (info.nodeNameSize.y) + _rectPadding.y * 2 + _triangleHeight * 2 + _rectPadding.y * 2 + info.ouputLinksSize.y + Mathf.Max (info.nodeNameSize.y' info.varLinksSize.y) + _rectPadding.y * 2;  	break;  default:  	size.x = Mathf.Max (info.nodeNameSize.x' info.varLinksSize.x' info.inputLinksSize.x + _centerSpace + info.ouputLinksSize.x) + _rectPadding.x * 2;  	size.y = (info.nodeNameSize.y) + _rectPadding.y * 2 + _titleSpace + info.varLinksSize.y + _textPadding.y + Mathf.Max (info.inputLinksSize.y' info.ouputLinksSize.y) + _rectPadding.y * 2;  	break;  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateRect,The following statement contains a magic number: switch (info.Owner.nodeType) {  case EB.Sequence.Serialization.NodeType.Variable:  	float radius = Mathf.Max (_minVarSize' info.nodeNameSize.magnitude + _textPadding.x);  	size.x = size.y = radius;  	break;  case EB.Sequence.Serialization.NodeType.Event:  	size.x = Mathf.Max (info.nodeNameSize.x' info.varLinksSize.x) + _rectPadding.x * 2;  	size.y = (info.nodeNameSize.y) + _rectPadding.y * 2 + _triangleHeight * 2 + _rectPadding.y * 2 + info.ouputLinksSize.y + Mathf.Max (info.nodeNameSize.y' info.varLinksSize.y) + _rectPadding.y * 2;  	break;  default:  	size.x = Mathf.Max (info.nodeNameSize.x' info.varLinksSize.x' info.inputLinksSize.x + _centerSpace + info.ouputLinksSize.x) + _rectPadding.x * 2;  	size.y = (info.nodeNameSize.y) + _rectPadding.y * 2 + _titleSpace + info.varLinksSize.y + _textPadding.y + Mathf.Max (info.inputLinksSize.y' info.ouputLinksSize.y) + _rectPadding.y * 2;  	break;  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateRect,The following statement contains a magic number: switch (info.Owner.nodeType) {  case EB.Sequence.Serialization.NodeType.Variable:  	float radius = Mathf.Max (_minVarSize' info.nodeNameSize.magnitude + _textPadding.x);  	size.x = size.y = radius;  	break;  case EB.Sequence.Serialization.NodeType.Event:  	size.x = Mathf.Max (info.nodeNameSize.x' info.varLinksSize.x) + _rectPadding.x * 2;  	size.y = (info.nodeNameSize.y) + _rectPadding.y * 2 + _triangleHeight * 2 + _rectPadding.y * 2 + info.ouputLinksSize.y + Mathf.Max (info.nodeNameSize.y' info.varLinksSize.y) + _rectPadding.y * 2;  	break;  default:  	size.x = Mathf.Max (info.nodeNameSize.x' info.varLinksSize.x' info.inputLinksSize.x + _centerSpace + info.ouputLinksSize.x) + _rectPadding.x * 2;  	size.y = (info.nodeNameSize.y) + _rectPadding.y * 2 + _titleSpace + info.varLinksSize.y + _textPadding.y + Mathf.Max (info.inputLinksSize.y' info.ouputLinksSize.y) + _rectPadding.y * 2;  	break;  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateRect,The following statement contains a magic number: switch (info.Owner.nodeType) {  case EB.Sequence.Serialization.NodeType.Variable:  	float radius = Mathf.Max (_minVarSize' info.nodeNameSize.magnitude + _textPadding.x);  	size.x = size.y = radius;  	break;  case EB.Sequence.Serialization.NodeType.Event:  	size.x = Mathf.Max (info.nodeNameSize.x' info.varLinksSize.x) + _rectPadding.x * 2;  	size.y = (info.nodeNameSize.y) + _rectPadding.y * 2 + _triangleHeight * 2 + _rectPadding.y * 2 + info.ouputLinksSize.y + Mathf.Max (info.nodeNameSize.y' info.varLinksSize.y) + _rectPadding.y * 2;  	break;  default:  	size.x = Mathf.Max (info.nodeNameSize.x' info.varLinksSize.x' info.inputLinksSize.x + _centerSpace + info.ouputLinksSize.x) + _rectPadding.x * 2;  	size.y = (info.nodeNameSize.y) + _rectPadding.y * 2 + _titleSpace + info.varLinksSize.y + _textPadding.y + Mathf.Max (info.inputLinksSize.y' info.ouputLinksSize.y) + _rectPadding.y * 2;  	break;  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateRect,The following statement contains a magic number: switch (info.Owner.nodeType) {  case EB.Sequence.Serialization.NodeType.Variable:  	float radius = Mathf.Max (_minVarSize' info.nodeNameSize.magnitude + _textPadding.x);  	size.x = size.y = radius;  	break;  case EB.Sequence.Serialization.NodeType.Event:  	size.x = Mathf.Max (info.nodeNameSize.x' info.varLinksSize.x) + _rectPadding.x * 2;  	size.y = (info.nodeNameSize.y) + _rectPadding.y * 2 + _triangleHeight * 2 + _rectPadding.y * 2 + info.ouputLinksSize.y + Mathf.Max (info.nodeNameSize.y' info.varLinksSize.y) + _rectPadding.y * 2;  	break;  default:  	size.x = Mathf.Max (info.nodeNameSize.x' info.varLinksSize.x' info.inputLinksSize.x + _centerSpace + info.ouputLinksSize.x) + _rectPadding.x * 2;  	size.y = (info.nodeNameSize.y) + _rectPadding.y * 2 + _titleSpace + info.varLinksSize.y + _textPadding.y + Mathf.Max (info.inputLinksSize.y' info.ouputLinksSize.y) + _rectPadding.y * 2;  	break;  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateRect,The following statement contains a magic number: size.x = Mathf.Max (info.nodeNameSize.x' info.varLinksSize.x) + _rectPadding.x * 2;  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateRect,The following statement contains a magic number: size.y = (info.nodeNameSize.y) + _rectPadding.y * 2 + _triangleHeight * 2 + _rectPadding.y * 2 + info.ouputLinksSize.y + Mathf.Max (info.nodeNameSize.y' info.varLinksSize.y) + _rectPadding.y * 2;  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateRect,The following statement contains a magic number: size.y = (info.nodeNameSize.y) + _rectPadding.y * 2 + _triangleHeight * 2 + _rectPadding.y * 2 + info.ouputLinksSize.y + Mathf.Max (info.nodeNameSize.y' info.varLinksSize.y) + _rectPadding.y * 2;  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateRect,The following statement contains a magic number: size.y = (info.nodeNameSize.y) + _rectPadding.y * 2 + _triangleHeight * 2 + _rectPadding.y * 2 + info.ouputLinksSize.y + Mathf.Max (info.nodeNameSize.y' info.varLinksSize.y) + _rectPadding.y * 2;  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateRect,The following statement contains a magic number: size.y = (info.nodeNameSize.y) + _rectPadding.y * 2 + _triangleHeight * 2 + _rectPadding.y * 2 + info.ouputLinksSize.y + Mathf.Max (info.nodeNameSize.y' info.varLinksSize.y) + _rectPadding.y * 2;  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateRect,The following statement contains a magic number: size.x = Mathf.Max (info.nodeNameSize.x' info.varLinksSize.x' info.inputLinksSize.x + _centerSpace + info.ouputLinksSize.x) + _rectPadding.x * 2;  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateRect,The following statement contains a magic number: size.y = (info.nodeNameSize.y) + _rectPadding.y * 2 + _titleSpace + info.varLinksSize.y + _textPadding.y + Mathf.Max (info.inputLinksSize.y' info.ouputLinksSize.y) + _rectPadding.y * 2;  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateRect,The following statement contains a magic number: size.y = (info.nodeNameSize.y) + _rectPadding.y * 2 + _titleSpace + info.varLinksSize.y + _textPadding.y + Mathf.Max (info.inputLinksSize.y' info.ouputLinksSize.y) + _rectPadding.y * 2;  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,RenderMainView,The following statement contains a magic number: foreach (EB.Sequence.Serialization.Node node in Target.Nodes) {  	DrawingUtils.Text (node.comment' new Vector2 (node.rect.xMin' node.rect.yMin - 2)' TextAnchor.LowerLeft' Color.black' false);  	this.DrawNode (node' false);  }  
Magic Number,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,RenderMainView,The following statement contains a magic number: DrawingUtils.Text (node.comment' new Vector2 (node.rect.xMin' node.rect.yMin - 2)' TextAnchor.LowerLeft' Color.black' false);  
Magic Number,EB,HierarchyTree,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Editors\HierarchyTree.cs,DrawTree,The following statement contains a magic number: for (int i = 0; i < length; i++) {  	y += yOffset;  	if (treeitems [i].mList.Count > 0) {  		if (treeitems [i].IsHeader == true) {  			GUI.color = treeitems [i].color;  			treeitems [i].IsOpen = EditorGUI.Foldout (new Rect (x' y' 200' 15)' treeitems [i].IsOpen' treeitems [i].Label);  			GUI.color = Color.white;  			if (treeitems [i].IsOpen) {  				y = DrawTree (e' treeitems [i].mList' x' y);  			}  		}  	}  	else {  		Color original = GUI.color;  		Color col = treeitems [i].color;  		bool bOverLabel = false;  		if (e.mousePosition.x >= x && e.mousePosition.x < x + 150) {  			if (e.mousePosition.y >= y && e.mousePosition.y < y + yOffset) {  				bOverLabel = true;  				col = highlightColor;  			}  		}  		GUI.color = col;  		if (e.type == EventType.MouseDown) {  			if (bOverLabel) {  				if (selectCallback != null) {  					selectCallback (treeitems [i]);  				}  			}  		}  		GUIContent c = new GUIContent ();  		c.text = treeitems [i].Label;  		c.tooltip = treeitems [i].Tooltip;  		GUI.Label (new Rect (x' y' 300' 20)' c);  		GUI.color = original;  	}  }  
Magic Number,EB,HierarchyTree,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Editors\HierarchyTree.cs,DrawTree,The following statement contains a magic number: for (int i = 0; i < length; i++) {  	y += yOffset;  	if (treeitems [i].mList.Count > 0) {  		if (treeitems [i].IsHeader == true) {  			GUI.color = treeitems [i].color;  			treeitems [i].IsOpen = EditorGUI.Foldout (new Rect (x' y' 200' 15)' treeitems [i].IsOpen' treeitems [i].Label);  			GUI.color = Color.white;  			if (treeitems [i].IsOpen) {  				y = DrawTree (e' treeitems [i].mList' x' y);  			}  		}  	}  	else {  		Color original = GUI.color;  		Color col = treeitems [i].color;  		bool bOverLabel = false;  		if (e.mousePosition.x >= x && e.mousePosition.x < x + 150) {  			if (e.mousePosition.y >= y && e.mousePosition.y < y + yOffset) {  				bOverLabel = true;  				col = highlightColor;  			}  		}  		GUI.color = col;  		if (e.type == EventType.MouseDown) {  			if (bOverLabel) {  				if (selectCallback != null) {  					selectCallback (treeitems [i]);  				}  			}  		}  		GUIContent c = new GUIContent ();  		c.text = treeitems [i].Label;  		c.tooltip = treeitems [i].Tooltip;  		GUI.Label (new Rect (x' y' 300' 20)' c);  		GUI.color = original;  	}  }  
Magic Number,EB,HierarchyTree,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Editors\HierarchyTree.cs,DrawTree,The following statement contains a magic number: for (int i = 0; i < length; i++) {  	y += yOffset;  	if (treeitems [i].mList.Count > 0) {  		if (treeitems [i].IsHeader == true) {  			GUI.color = treeitems [i].color;  			treeitems [i].IsOpen = EditorGUI.Foldout (new Rect (x' y' 200' 15)' treeitems [i].IsOpen' treeitems [i].Label);  			GUI.color = Color.white;  			if (treeitems [i].IsOpen) {  				y = DrawTree (e' treeitems [i].mList' x' y);  			}  		}  	}  	else {  		Color original = GUI.color;  		Color col = treeitems [i].color;  		bool bOverLabel = false;  		if (e.mousePosition.x >= x && e.mousePosition.x < x + 150) {  			if (e.mousePosition.y >= y && e.mousePosition.y < y + yOffset) {  				bOverLabel = true;  				col = highlightColor;  			}  		}  		GUI.color = col;  		if (e.type == EventType.MouseDown) {  			if (bOverLabel) {  				if (selectCallback != null) {  					selectCallback (treeitems [i]);  				}  			}  		}  		GUIContent c = new GUIContent ();  		c.text = treeitems [i].Label;  		c.tooltip = treeitems [i].Tooltip;  		GUI.Label (new Rect (x' y' 300' 20)' c);  		GUI.color = original;  	}  }  
Magic Number,EB,HierarchyTree,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Editors\HierarchyTree.cs,DrawTree,The following statement contains a magic number: for (int i = 0; i < length; i++) {  	y += yOffset;  	if (treeitems [i].mList.Count > 0) {  		if (treeitems [i].IsHeader == true) {  			GUI.color = treeitems [i].color;  			treeitems [i].IsOpen = EditorGUI.Foldout (new Rect (x' y' 200' 15)' treeitems [i].IsOpen' treeitems [i].Label);  			GUI.color = Color.white;  			if (treeitems [i].IsOpen) {  				y = DrawTree (e' treeitems [i].mList' x' y);  			}  		}  	}  	else {  		Color original = GUI.color;  		Color col = treeitems [i].color;  		bool bOverLabel = false;  		if (e.mousePosition.x >= x && e.mousePosition.x < x + 150) {  			if (e.mousePosition.y >= y && e.mousePosition.y < y + yOffset) {  				bOverLabel = true;  				col = highlightColor;  			}  		}  		GUI.color = col;  		if (e.type == EventType.MouseDown) {  			if (bOverLabel) {  				if (selectCallback != null) {  					selectCallback (treeitems [i]);  				}  			}  		}  		GUIContent c = new GUIContent ();  		c.text = treeitems [i].Label;  		c.tooltip = treeitems [i].Tooltip;  		GUI.Label (new Rect (x' y' 300' 20)' c);  		GUI.color = original;  	}  }  
Magic Number,EB,HierarchyTree,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Editors\HierarchyTree.cs,DrawTree,The following statement contains a magic number: for (int i = 0; i < length; i++) {  	y += yOffset;  	if (treeitems [i].mList.Count > 0) {  		if (treeitems [i].IsHeader == true) {  			GUI.color = treeitems [i].color;  			treeitems [i].IsOpen = EditorGUI.Foldout (new Rect (x' y' 200' 15)' treeitems [i].IsOpen' treeitems [i].Label);  			GUI.color = Color.white;  			if (treeitems [i].IsOpen) {  				y = DrawTree (e' treeitems [i].mList' x' y);  			}  		}  	}  	else {  		Color original = GUI.color;  		Color col = treeitems [i].color;  		bool bOverLabel = false;  		if (e.mousePosition.x >= x && e.mousePosition.x < x + 150) {  			if (e.mousePosition.y >= y && e.mousePosition.y < y + yOffset) {  				bOverLabel = true;  				col = highlightColor;  			}  		}  		GUI.color = col;  		if (e.type == EventType.MouseDown) {  			if (bOverLabel) {  				if (selectCallback != null) {  					selectCallback (treeitems [i]);  				}  			}  		}  		GUIContent c = new GUIContent ();  		c.text = treeitems [i].Label;  		c.tooltip = treeitems [i].Tooltip;  		GUI.Label (new Rect (x' y' 300' 20)' c);  		GUI.color = original;  	}  }  
Magic Number,EB,HierarchyTree,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Editors\HierarchyTree.cs,DrawTree,The following statement contains a magic number: if (treeitems [i].mList.Count > 0) {  	if (treeitems [i].IsHeader == true) {  		GUI.color = treeitems [i].color;  		treeitems [i].IsOpen = EditorGUI.Foldout (new Rect (x' y' 200' 15)' treeitems [i].IsOpen' treeitems [i].Label);  		GUI.color = Color.white;  		if (treeitems [i].IsOpen) {  			y = DrawTree (e' treeitems [i].mList' x' y);  		}  	}  }  else {  	Color original = GUI.color;  	Color col = treeitems [i].color;  	bool bOverLabel = false;  	if (e.mousePosition.x >= x && e.mousePosition.x < x + 150) {  		if (e.mousePosition.y >= y && e.mousePosition.y < y + yOffset) {  			bOverLabel = true;  			col = highlightColor;  		}  	}  	GUI.color = col;  	if (e.type == EventType.MouseDown) {  		if (bOverLabel) {  			if (selectCallback != null) {  				selectCallback (treeitems [i]);  			}  		}  	}  	GUIContent c = new GUIContent ();  	c.text = treeitems [i].Label;  	c.tooltip = treeitems [i].Tooltip;  	GUI.Label (new Rect (x' y' 300' 20)' c);  	GUI.color = original;  }  
Magic Number,EB,HierarchyTree,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Editors\HierarchyTree.cs,DrawTree,The following statement contains a magic number: if (treeitems [i].mList.Count > 0) {  	if (treeitems [i].IsHeader == true) {  		GUI.color = treeitems [i].color;  		treeitems [i].IsOpen = EditorGUI.Foldout (new Rect (x' y' 200' 15)' treeitems [i].IsOpen' treeitems [i].Label);  		GUI.color = Color.white;  		if (treeitems [i].IsOpen) {  			y = DrawTree (e' treeitems [i].mList' x' y);  		}  	}  }  else {  	Color original = GUI.color;  	Color col = treeitems [i].color;  	bool bOverLabel = false;  	if (e.mousePosition.x >= x && e.mousePosition.x < x + 150) {  		if (e.mousePosition.y >= y && e.mousePosition.y < y + yOffset) {  			bOverLabel = true;  			col = highlightColor;  		}  	}  	GUI.color = col;  	if (e.type == EventType.MouseDown) {  		if (bOverLabel) {  			if (selectCallback != null) {  				selectCallback (treeitems [i]);  			}  		}  	}  	GUIContent c = new GUIContent ();  	c.text = treeitems [i].Label;  	c.tooltip = treeitems [i].Tooltip;  	GUI.Label (new Rect (x' y' 300' 20)' c);  	GUI.color = original;  }  
Magic Number,EB,HierarchyTree,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Editors\HierarchyTree.cs,DrawTree,The following statement contains a magic number: if (treeitems [i].mList.Count > 0) {  	if (treeitems [i].IsHeader == true) {  		GUI.color = treeitems [i].color;  		treeitems [i].IsOpen = EditorGUI.Foldout (new Rect (x' y' 200' 15)' treeitems [i].IsOpen' treeitems [i].Label);  		GUI.color = Color.white;  		if (treeitems [i].IsOpen) {  			y = DrawTree (e' treeitems [i].mList' x' y);  		}  	}  }  else {  	Color original = GUI.color;  	Color col = treeitems [i].color;  	bool bOverLabel = false;  	if (e.mousePosition.x >= x && e.mousePosition.x < x + 150) {  		if (e.mousePosition.y >= y && e.mousePosition.y < y + yOffset) {  			bOverLabel = true;  			col = highlightColor;  		}  	}  	GUI.color = col;  	if (e.type == EventType.MouseDown) {  		if (bOverLabel) {  			if (selectCallback != null) {  				selectCallback (treeitems [i]);  			}  		}  	}  	GUIContent c = new GUIContent ();  	c.text = treeitems [i].Label;  	c.tooltip = treeitems [i].Tooltip;  	GUI.Label (new Rect (x' y' 300' 20)' c);  	GUI.color = original;  }  
Magic Number,EB,HierarchyTree,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Editors\HierarchyTree.cs,DrawTree,The following statement contains a magic number: if (treeitems [i].mList.Count > 0) {  	if (treeitems [i].IsHeader == true) {  		GUI.color = treeitems [i].color;  		treeitems [i].IsOpen = EditorGUI.Foldout (new Rect (x' y' 200' 15)' treeitems [i].IsOpen' treeitems [i].Label);  		GUI.color = Color.white;  		if (treeitems [i].IsOpen) {  			y = DrawTree (e' treeitems [i].mList' x' y);  		}  	}  }  else {  	Color original = GUI.color;  	Color col = treeitems [i].color;  	bool bOverLabel = false;  	if (e.mousePosition.x >= x && e.mousePosition.x < x + 150) {  		if (e.mousePosition.y >= y && e.mousePosition.y < y + yOffset) {  			bOverLabel = true;  			col = highlightColor;  		}  	}  	GUI.color = col;  	if (e.type == EventType.MouseDown) {  		if (bOverLabel) {  			if (selectCallback != null) {  				selectCallback (treeitems [i]);  			}  		}  	}  	GUIContent c = new GUIContent ();  	c.text = treeitems [i].Label;  	c.tooltip = treeitems [i].Tooltip;  	GUI.Label (new Rect (x' y' 300' 20)' c);  	GUI.color = original;  }  
Magic Number,EB,HierarchyTree,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Editors\HierarchyTree.cs,DrawTree,The following statement contains a magic number: if (treeitems [i].mList.Count > 0) {  	if (treeitems [i].IsHeader == true) {  		GUI.color = treeitems [i].color;  		treeitems [i].IsOpen = EditorGUI.Foldout (new Rect (x' y' 200' 15)' treeitems [i].IsOpen' treeitems [i].Label);  		GUI.color = Color.white;  		if (treeitems [i].IsOpen) {  			y = DrawTree (e' treeitems [i].mList' x' y);  		}  	}  }  else {  	Color original = GUI.color;  	Color col = treeitems [i].color;  	bool bOverLabel = false;  	if (e.mousePosition.x >= x && e.mousePosition.x < x + 150) {  		if (e.mousePosition.y >= y && e.mousePosition.y < y + yOffset) {  			bOverLabel = true;  			col = highlightColor;  		}  	}  	GUI.color = col;  	if (e.type == EventType.MouseDown) {  		if (bOverLabel) {  			if (selectCallback != null) {  				selectCallback (treeitems [i]);  			}  		}  	}  	GUIContent c = new GUIContent ();  	c.text = treeitems [i].Label;  	c.tooltip = treeitems [i].Tooltip;  	GUI.Label (new Rect (x' y' 300' 20)' c);  	GUI.color = original;  }  
Magic Number,EB,HierarchyTree,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Editors\HierarchyTree.cs,DrawTree,The following statement contains a magic number: if (treeitems [i].IsHeader == true) {  	GUI.color = treeitems [i].color;  	treeitems [i].IsOpen = EditorGUI.Foldout (new Rect (x' y' 200' 15)' treeitems [i].IsOpen' treeitems [i].Label);  	GUI.color = Color.white;  	if (treeitems [i].IsOpen) {  		y = DrawTree (e' treeitems [i].mList' x' y);  	}  }  
Magic Number,EB,HierarchyTree,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Editors\HierarchyTree.cs,DrawTree,The following statement contains a magic number: if (treeitems [i].IsHeader == true) {  	GUI.color = treeitems [i].color;  	treeitems [i].IsOpen = EditorGUI.Foldout (new Rect (x' y' 200' 15)' treeitems [i].IsOpen' treeitems [i].Label);  	GUI.color = Color.white;  	if (treeitems [i].IsOpen) {  		y = DrawTree (e' treeitems [i].mList' x' y);  	}  }  
Magic Number,EB,HierarchyTree,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Editors\HierarchyTree.cs,DrawTree,The following statement contains a magic number: treeitems [i].IsOpen = EditorGUI.Foldout (new Rect (x' y' 200' 15)' treeitems [i].IsOpen' treeitems [i].Label);  
Magic Number,EB,HierarchyTree,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Editors\HierarchyTree.cs,DrawTree,The following statement contains a magic number: treeitems [i].IsOpen = EditorGUI.Foldout (new Rect (x' y' 200' 15)' treeitems [i].IsOpen' treeitems [i].Label);  
Magic Number,EB,HierarchyTree,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Editors\HierarchyTree.cs,DrawTree,The following statement contains a magic number: if (e.mousePosition.x >= x && e.mousePosition.x < x + 150) {  	if (e.mousePosition.y >= y && e.mousePosition.y < y + yOffset) {  		bOverLabel = true;  		col = highlightColor;  	}  }  
Magic Number,EB,HierarchyTree,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Editors\HierarchyTree.cs,DrawTree,The following statement contains a magic number: GUI.Label (new Rect (x' y' 300' 20)' c);  
Magic Number,EB,HierarchyTree,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Editors\HierarchyTree.cs,DrawTree,The following statement contains a magic number: GUI.Label (new Rect (x' y' 300' 20)' c);  
Magic Number,ExtensionMethods,RectExtensions,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Utils\RectExtensions.cs,Transform,The following statement contains a magic number: for (int i = 0; i < 2; i++) {  	points [i] = mat.MultiplyPoint3x4 (points [i]);  }  
Magic Number,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,AddLibrary,The following statement contains a magic number: InsertLine ("/* Begin PBXBuildFile section */"' 4' "		" + fileId + " = {isa = PBXBuildFile; fileRef = " + fileRef + "; };");  
Magic Number,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,AddLibrary,The following statement contains a magic number: InsertLine ("1D60588F0D05DD3D006BFB54 /* Frameworks */"' 5' "				" + fileId + " /* " + lib + ".framework in Frameworks */'");  
Magic Number,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,AddLibrary,The following statement contains a magic number: InsertLine ("29B97314FDCFA39411CA2CEA /* CustomTemplate */ "' 4' "				" + fileRef + " /* " + lib + ".framework in Frameworks */'");  
Magic Number,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,GenId,The following statement contains a magic number: for (int i = 0; i < 24; ++i) {  	fr += hex [Random.Range (0' hex.Length)];  }  
Magic Number,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,LocalizeFile,The following statement contains a magic number: InsertLine ("/* Begin PBXBuildFile section */"' 4' "		" + fileId + " = {isa = PBXBuildFile; fileRef = " + fileRef + "; };");  
Magic Number,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,LocalizeFile,The following statement contains a magic number: InsertLine ("/* Begin PBXResourcesBuildPhase section */"' 5' "			" + fileId + "'");  
Magic Number,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,LocalizeFile,The following statement contains a magic number: InsertLine ("29B97314FDCFA39411CA2CEA /* CustomTemplate */ = {"' 4' "				" + fileRef + "'");  
Magic Number,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,LocalizeFile,The following statement contains a magic number: foreach (var dir in dirInfo.GetDirectories ("*.lproj")) {  	EB.Debug.Log ("dir:" + dir.Name);  	var language = dir.Name.Split ('.') [0];  	var id = GenId ();  	lines.Add ("				" + id + " /* " + language + " */'");  	InsertLine ("/* Begin PBXFileReference section */"' 2' "		" + id + " /* " + language + " */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = " + language + "; path = " + language + ".lproj/" + name + "; sourceTree = \"<group>\"; };");  	try {  		File.Delete (Path.Combine (dir.FullName' name + ".meta"));  	}  	catch {  	}  }  
Magic Number,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,LocalizeFile,The following statement contains a magic number: InsertLine ("/* Begin PBXFileReference section */"' 2' "		" + id + " /* " + language + " */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = " + language + "; path = " + language + ".lproj/" + name + "; sourceTree = \"<group>\"; };");  
Magic Number,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,AddFramework,The following statement contains a magic number: if (linkage == Linkage.None) {  	InsertLine ("/* Begin PBXBuildFile section */"' 4' "		" + fileId + " /* " + frameworkName + ".framework in Frameworks */ = {isa = PBXBuildFile; fileRef = " + fileRef + " /* " + frameworkName + ".framework */; };");  }  else {  	InsertLine ("/* Begin PBXBuildFile section */"' 4' "		" + fileId + " /* " + frameworkName + ".framework in Frameworks */ = {isa = PBXBuildFile; fileRef = " + fileRef + " /* " + frameworkName + ".framework */; settings = {ATTRIBUTES = (" + linkage + "' ); }; };");  }  
Magic Number,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,AddFramework,The following statement contains a magic number: if (linkage == Linkage.None) {  	InsertLine ("/* Begin PBXBuildFile section */"' 4' "		" + fileId + " /* " + frameworkName + ".framework in Frameworks */ = {isa = PBXBuildFile; fileRef = " + fileRef + " /* " + frameworkName + ".framework */; };");  }  else {  	InsertLine ("/* Begin PBXBuildFile section */"' 4' "		" + fileId + " /* " + frameworkName + ".framework in Frameworks */ = {isa = PBXBuildFile; fileRef = " + fileRef + " /* " + frameworkName + ".framework */; settings = {ATTRIBUTES = (" + linkage + "' ); }; };");  }  
Magic Number,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,AddFramework,The following statement contains a magic number: InsertLine ("/* Begin PBXBuildFile section */"' 4' "		" + fileId + " /* " + frameworkName + ".framework in Frameworks */ = {isa = PBXBuildFile; fileRef = " + fileRef + " /* " + frameworkName + ".framework */; };");  
Magic Number,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,AddFramework,The following statement contains a magic number: InsertLine ("/* Begin PBXBuildFile section */"' 4' "		" + fileId + " /* " + frameworkName + ".framework in Frameworks */ = {isa = PBXBuildFile; fileRef = " + fileRef + " /* " + frameworkName + ".framework */; settings = {ATTRIBUTES = (" + linkage + "' ); }; };");  
Magic Number,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,AddFramework,The following statement contains a magic number: InsertLine ("1D60588F0D05DD3D006BFB54 /* Frameworks */"' 5' "				" + fileId + " /* " + frameworkName + ".framework in Frameworks */'");  
Magic Number,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,AddFramework,The following statement contains a magic number: InsertLine ("29B97314FDCFA39411CA2CEA /* CustomTemplate */ "' 4' "				" + fileRef + " /* " + frameworkName + ".framework in Frameworks */'");  
Magic Number,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,AddIcon,The following statement contains a magic number: InsertLine (" /* Libraries */ = {"' 4' "				" + fileRef + "'");  
Magic Number,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,AddBundle,The following statement contains a magic number: InsertLine ("/* Begin PBXBuildFile section */"' 10' "   " + fileId + " /* " + bundle + " in Resources */ = {isa = PBXBuildFile; fileRef = " + fileRef + " /* " + bundle + " */; };");  
Magic Number,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,AddBundle,The following statement contains a magic number: InsertLine ("/* Begin PBXFileReference section */"' 10' "   " + fileRef + " /* " + bundle + " */ = { isa = PBXFileReference; lastKnownFileType = \"wrapper.plug-in\"; path = " + bundle + "; sourceTree = SOURCE_ROOT; };");  
Magic Number,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,AddBundle,The following statement contains a magic number: InsertLine ("/* Libraries */ = {"' 4' "				" + fileRef + " /* " + bundle + " */'");  
Magic Number,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,AddBundle,The following statement contains a magic number: InsertLine ("/* Begin PBXResourcesBuildPhase section */"' 6' "				" + fileId + " /* " + bundle + " in Resources */'");  
Magic Number,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,EnableObjC_Exceptions,The following statement contains a magic number: InsertLine ("1D6058940D05DD3E006BFB54 /* Debug */ = {"' 3' "				GCC_ENABLE_OBJC_EXCEPTIONS = YES;");  
Magic Number,EB.Editor,XcodeProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\iOS\XcodeProject.cs,EnableObjC_Exceptions,The following statement contains a magic number: InsertLine ("1D6058950D05DD3E006BFB54 /* Release */ = {"' 3' "				GCC_ENABLE_OBJC_EXCEPTIONS = YES;");  
Magic Number,UnityEditor.KabamXCodeEditor,PBXObject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\KabamSODA\KabamXCodeEditor.cs,GenerateGuid,The following statement contains a magic number: return System.Guid.NewGuid ().ToString ("N").Substring (8).ToUpper ();  
Magic Number,UnityEditor.KabamXCodeEditor,PBXParser,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\KabamSODA\KabamXCodeEditor.cs,Decode,The following statement contains a magic number: data = data.Substring (13);  
Magic Number,UnityEditor.KabamXCodeEditor,PBXParser,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\KabamSODA\KabamXCodeEditor.cs,SkipComments,The following statement contains a magic number: switch (tag) {  case COMMENT_BEGIN_TOKEN: {  	while (Peek (2).CompareTo (COMMENT_END_TOKEN) != 0) {  		s += StepForeward ();  	}  	s += StepForeward (2);  	break;  }  case COMMENT_LINE_TOKEN: {  	while (!Regex.IsMatch (StepForeward ().ToString ()' @"\n"))  		continue;  	break;  }  default:  	return false;  }  
Magic Number,UnityEditor.KabamXCodeEditor,PBXParser,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\KabamSODA\KabamXCodeEditor.cs,SkipComments,The following statement contains a magic number: switch (tag) {  case COMMENT_BEGIN_TOKEN: {  	while (Peek (2).CompareTo (COMMENT_END_TOKEN) != 0) {  		s += StepForeward ();  	}  	s += StepForeward (2);  	break;  }  case COMMENT_LINE_TOKEN: {  	while (!Regex.IsMatch (StepForeward ().ToString ()' @"\n"))  		continue;  	break;  }  default:  	return false;  }  
Magic Number,UnityEditor.KabamXCodeEditor,PBXParser,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\KabamSODA\KabamXCodeEditor.cs,SkipComments,The following statement contains a magic number: while (Peek (2).CompareTo (COMMENT_END_TOKEN) != 0) {  	s += StepForeward ();  }  
Magic Number,UnityEditor.KabamXCodeEditor,PBXParser,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\KabamSODA\KabamXCodeEditor.cs,SkipComments,The following statement contains a magic number: s += StepForeward (2);  
Magic Number,UnityEditor.KabamXCodeEditor,PBXParser,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\KabamSODA\KabamXCodeEditor.cs,ParseCommentFollowingWhitespace,The following statement contains a magic number: if (data [currIdx] == '/' && data [currIdx + 1] == '*') {  	while (!GetDataSubstring (currIdx' 2).Equals (COMMENT_END_TOKEN)) {  		if (currIdx >= data.Length) {  			Debug.LogError ("Unterminated comment found in .pbxproj file.  Bad things are probably going to start happening");  			return "";  		}  		currIdx++;  	}  	return GetDataSubstring (index + 1' (currIdx - index + 1));  }  else {  	return "";  }  
Magic Number,UnityEditor.KabamXCodeEditor,PBXParser,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\KabamSODA\KabamXCodeEditor.cs,ParseCommentFollowingWhitespace,The following statement contains a magic number: while (!GetDataSubstring (currIdx' 2).Equals (COMMENT_END_TOKEN)) {  	if (currIdx >= data.Length) {  		Debug.LogError ("Unterminated comment found in .pbxproj file.  Bad things are probably going to start happening");  		return "";  	}  	currIdx++;  }  
Magic Number,UnityEditor.KabamXCodeEditor,PBXParser,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\KabamSODA\KabamXCodeEditor.cs,ParseEntity,The following statement contains a magic number: if (word.Length != 24 && Regex.IsMatch (word' @"^\d+$")) {  	return Int32.Parse (word);  }  
Magic Number,UnityEditor.KabamXCodeEditor,XCProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\KabamSODA\KabamXCodeEditor.cs,Save,The following statement contains a magic number: result.Add ("objectVersion"' 46);  
Magic Number,UnityEditor.XCodeEditor,PBXObject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\XCodeEditor-for-Unity\PBXObject.cs,GenerateGuid,The following statement contains a magic number: return System.Guid.NewGuid ().ToString ("N").Substring (8).ToUpper ();  
Magic Number,UnityEditor.XCodeEditor,PBXParser,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\XCodeEditor-for-Unity\PBXParser.cs,Decode,The following statement contains a magic number: data = data.Substring (13);  
Magic Number,UnityEditor.XCodeEditor,PBXParser,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\XCodeEditor-for-Unity\PBXParser.cs,SkipComments,The following statement contains a magic number: switch (tag) {  case COMMENT_BEGIN_TOKEN: {  	while (Peek (2).CompareTo (COMMENT_END_TOKEN) != 0) {  		s += StepForeward ();  	}  	s += StepForeward (2);  	break;  }  case COMMENT_LINE_TOKEN: {  	while (!Regex.IsMatch (StepForeward ().ToString ()' @"\n"))  		continue;  	break;  }  default:  	return false;  }  
Magic Number,UnityEditor.XCodeEditor,PBXParser,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\XCodeEditor-for-Unity\PBXParser.cs,SkipComments,The following statement contains a magic number: switch (tag) {  case COMMENT_BEGIN_TOKEN: {  	while (Peek (2).CompareTo (COMMENT_END_TOKEN) != 0) {  		s += StepForeward ();  	}  	s += StepForeward (2);  	break;  }  case COMMENT_LINE_TOKEN: {  	while (!Regex.IsMatch (StepForeward ().ToString ()' @"\n"))  		continue;  	break;  }  default:  	return false;  }  
Magic Number,UnityEditor.XCodeEditor,PBXParser,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\XCodeEditor-for-Unity\PBXParser.cs,SkipComments,The following statement contains a magic number: while (Peek (2).CompareTo (COMMENT_END_TOKEN) != 0) {  	s += StepForeward ();  }  
Magic Number,UnityEditor.XCodeEditor,PBXParser,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\XCodeEditor-for-Unity\PBXParser.cs,SkipComments,The following statement contains a magic number: s += StepForeward (2);  
Magic Number,UnityEditor.XCodeEditor,PBXParser,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\XCodeEditor-for-Unity\PBXParser.cs,ParseCommentFollowingWhitespace,The following statement contains a magic number: if (data [currIdx] == '/' && data [currIdx + 1] == '*') {  	while (!GetDataSubstring (currIdx' 2).Equals (COMMENT_END_TOKEN)) {  		if (currIdx >= data.Length) {  			Debug.LogError ("Unterminated comment found in .pbxproj file.  Bad things are probably going to start happening");  			return "";  		}  		currIdx++;  	}  	return GetDataSubstring (index + 1' (currIdx - index + 1));  }  else {  	return "";  }  
Magic Number,UnityEditor.XCodeEditor,PBXParser,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\XCodeEditor-for-Unity\PBXParser.cs,ParseCommentFollowingWhitespace,The following statement contains a magic number: while (!GetDataSubstring (currIdx' 2).Equals (COMMENT_END_TOKEN)) {  	if (currIdx >= data.Length) {  		Debug.LogError ("Unterminated comment found in .pbxproj file.  Bad things are probably going to start happening");  		return "";  	}  	currIdx++;  }  
Magic Number,UnityEditor.XCodeEditor,PBXParser,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\XCodeEditor-for-Unity\PBXParser.cs,ParseEntity,The following statement contains a magic number: if (word.Length != 24 && Regex.IsMatch (word' @"^\d+$")) {  	return Int32.Parse (word);  }  
Magic Number,UnityEditor.XCodeEditor,XCProject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\XCodeEditor-for-Unity\XCProject.cs,Save,The following statement contains a magic number: result.Add ("objectVersion"' 46);  
Missing Default,EB.Sequence.Editor,SequenceEditor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Editor\Fuse\Sequence\SequenceEditor.MainView.cs,UpdateActiveMode,The following switch statement is missing a default case: switch ((MouseButton)e.button) {  case MouseButton.Middle: {  	if (e.alt == true) {  		this.ActiveMode = MainViewMode.Panning;  	}  	else if (e.control == true) {  		this.ActiveMode = MainViewMode.Zooming;  	}  	break;  }  case MouseButton.Left: {  	//Check to see if we are starting a click on a connection point  	ConnectionPoint mouseDownConnectionPoint = null;  	foreach (ConnectionPoint connectionPoint in this.ConnectionPoints.Values) {  		if (connectionPoint.BoundingBox.Contains (MainViewMousePosition) == true) {  			mouseDownConnectionPoint = connectionPoint;  			break;  		}  	}  	//Check to see if we are starting a click on a node  	Stack<Serialization.Node> mouseDownNodes = new Stack<Serialization.Node> ();  	foreach (Serialization.Node candidate in this.Target.Nodes) {  		if (candidate.rect.Contains (MainViewMousePosition) == true) {  			mouseDownNodes.Push (candidate);  		}  	}  	if ((mouseDownConnectionPoint == null) && (mouseDownNodes.Count == 0)) {  		//If we aren't selecting a connection point or a node then go into group select  		this.GroupSelectionBegin (MainViewMousePosition);  		this.ActiveMode = MainViewMode.SelectingNodes;  	}  	else {  		//We need a special case becase the connection point for the variable is the same sizes as the variable  		if ((mouseDownConnectionPoint != null) && (mouseDownConnectionPoint.Owner.nodeType != EB.Sequence.Serialization.NodeType.Variable)) {  			//If we have a valid connection point then move into Linking  			this.LinkingBegin (mouseDownConnectionPoint);  			this.ActiveMode = MainViewMode.Linking;  		}  		else {  			//Check to see if we are double-clicking  			bool executingDoubleClick = false;  			if (e.clickCount == 2) {  				Serialization.Node mouseDownNode = mouseDownNodes.Peek ();  				foreach (var prop in mouseDownNode.properties) {  					if (prop.stringValue.Length > 0) {  						var attribute = mouseDownNode.GetPropertyAttribute (prop.name);  						if (attribute.Hint == "Sequence") {  							ConfirmSave ();  							GotoSequence (prop.stringValue);  							executingDoubleClick = true;  						}  					}  				}  			}  			if (executingDoubleClick == false) {  				SelectObjectOperation operation = TranslateSelectObjectOperation (e);  				//Check to see if any of the mouseDownNodes are selected  				bool alreadySelected = false;  				foreach (Serialization.Node mouseDownNode in mouseDownNodes) {  					if (this.SelectedNodes.Contains (mouseDownNode) == true) {  						alreadySelected = true;  						break;  					}  				}  				//If we are going to be replace the item in the list and it is already in there then we just want to move the list  				if ((operation == SelectObjectOperation.Replace) && (alreadySelected == true)) {  					this.ActiveMode = MainViewMode.MovingNodes;  				}  				else {  					this.SelectObjects (mouseDownNodes.Peek ().ToEnumerable ()' null' operation);  					this.ActiveMode = MainViewMode.MovingNodes;  				}  			}  		}  	}  	break;  }  }  
