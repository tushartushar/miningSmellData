Implementation smell,Namespace,Class,File,Method,Description
Long Method,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initQuantTables,The method has 174 lines of code.
Long Method,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The method has 104 lines of code.
Long Method,EB.Director.Runtime,TransformTrackInstance,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Director\Runtime\DirectorTracks.cs,Apply,The method has 102 lines of code.
Long Method,EB.Replication,Manager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Replication\ReplicationManager.cs,SerializeVarAgs,The method has 299 lines of code.
Long Method,EB.Replication,View,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Replication\ReplicationView.cs,Serialize,The method has 104 lines of code.
Long Method,EB.Sequence,Component,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sequence\Components\SequenceComponent.cs,LinkNodes,The method has 100 lines of code.
Long Method,EB.Rendering,ShaderCompositor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\ShaderCompositor\ShaderCompositor.cs,Composite,The method has 183 lines of code.
Long Method,Kabam.SimpleJSON,JSONNode,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\KabamSODA\KabamSimpleJSON.cs,Parse,The method has 140 lines of code.
Complex Method,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseValue,Cyclomatic complexity of the method is 12
Complex Method,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,Cyclomatic complexity of the method is 16
Complex Method,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,nextToken,Cyclomatic complexity of the method is 25
Complex Method,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeValue,Cyclomatic complexity of the method is 13
Complex Method,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,Cyclomatic complexity of the method is 10
Complex Method,Facebook,AndroidFacebook,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Facebook\AndroidFacebook.cs,Init,Cyclomatic complexity of the method is 9
Complex Method,Facebook,AndroidFacebook,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Facebook\AndroidFacebook.cs,AppRequest,Cyclomatic complexity of the method is 11
Complex Method,Facebook,AndroidFacebook,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Facebook\AndroidFacebook.cs,FeedRequest,Cyclomatic complexity of the method is 15
Complex Method,EB,Assets,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreAssets.cs,DoReadBuildConfig,Cyclomatic complexity of the method is 9
Complex Method,EB,Assets,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreAssets.cs,DoLoadPack,Cyclomatic complexity of the method is 12
Complex Method,EB,Assets,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreAssets.cs,DoLoadBundles,Cyclomatic complexity of the method is 15
Complex Method,EB,Assets,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreAssets.cs,_LoadScene,Cyclomatic complexity of the method is 11
Complex Method,EB,Assets,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreAssets.cs,Load,Cyclomatic complexity of the method is 10
Complex Method,EB,Assets,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreAssets.cs,DoLoadAsync,Cyclomatic complexity of the method is 10
Complex Method,EB,Dot,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreDot.cs,Find,Cyclomatic complexity of the method is 14
Complex Method,EB,Dot,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreDot.cs,_FlattenInternal,Cyclomatic complexity of the method is 9
Complex Method,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initQuantTables,Cyclomatic complexity of the method is 9
Complex Method,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,writeDHT,Cyclomatic complexity of the method is 9
Complex Method,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,processDU,Cyclomatic complexity of the method is 10
Complex Method,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseObject,Cyclomatic complexity of the method is 8
Complex Method,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseValue,Cyclomatic complexity of the method is 12
Complex Method,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,Cyclomatic complexity of the method is 24
Complex Method,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,NextToken,Cyclomatic complexity of the method is 25
Complex Method,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,SerializeValue,Cyclomatic complexity of the method is 9
Complex Method,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,SerializeString,Cyclomatic complexity of the method is 10
Complex Method,EB,Localizer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreLocalizer.cs,FormatDuration,Cyclomatic complexity of the method is 9
Complex Method,EB,Serialization,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreSerialization.cs,InternalDeserialize,Cyclomatic complexity of the method is 18
Complex Method,EB,Serialization,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreSerialization.cs,InternalSerialize,Cyclomatic complexity of the method is 11
Complex Method,EB,Uri,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUri.cs,Parse,Cyclomatic complexity of the method is 12
Complex Method,EB,Util,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUtil.cs,GetObjectBreadthFirst,Cyclomatic complexity of the method is 8
Complex Method,EB,Util,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUtil.cs,GetObject,Cyclomatic complexity of the method is 9
Complex Method,EB,Util,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUtil.cs,GatherMaterials,Cyclomatic complexity of the method is 9
Complex Method,EB.Director,Utils,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Director\DirectorUtils.cs,ApplyVariable,Cyclomatic complexity of the method is 15
Complex Method,EB.Director.Runtime,GroupInstance,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Director\Runtime\DirectorRuntime.cs,GroupInstance,Cyclomatic complexity of the method is 37
Complex Method,EB.Director.Runtime,BlendableTrackInstance,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Director\Runtime\DirectorTracks.cs,Blend,Cyclomatic complexity of the method is 29
Complex Method,EB.Director.Runtime,TransformTrackInstance,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Director\Runtime\DirectorTracks.cs,Apply,Cyclomatic complexity of the method is 16
Complex Method,EB.Director.Runtime,DirectorTrackInstance,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Director\Runtime\DirectorTracks.cs,SaveState,Cyclomatic complexity of the method is 8
Complex Method,EB.Sparx,NetworkENet,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.ENet\SparxNetworkENet.cs,Update,Cyclomatic complexity of the method is 17
Complex Method,EB.Sparx,EventsAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxEventsAPI.cs,OnEventsData,Cyclomatic complexity of the method is 9
Complex Method,EB.Sparx,GachaBox,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxGachaAPI.cs,GachaBox,Cyclomatic complexity of the method is 14
Complex Method,EB.Sparx,GachaSet,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxGachaAPI.cs,GachaSet,Cyclomatic complexity of the method is 9
Complex Method,EB.Sparx,Hub,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Core\SparxHub.cs,SubSystemConnecting,Cyclomatic complexity of the method is 13
Complex Method,EB.Sparx,GachaManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxGachaManager.cs,Async,Cyclomatic complexity of the method is 8
Complex Method,EB.Sparx,GachaManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxGachaManager.cs,OnGachaGroups,Cyclomatic complexity of the method is 12
Complex Method,EB.Sparx,GachaManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxGachaManager.cs,OnGachaFreeTimeChanges,Cyclomatic complexity of the method is 8
Complex Method,EB.Sparx,InventoryManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxInventoryManager.cs,Async,Cyclomatic complexity of the method is 8
Complex Method,EB.Sparx,LevelRewardsManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxLevelRewardsManager.cs,Async,Cyclomatic complexity of the method is 8
Complex Method,EB.Sparx,LoginManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxLoginManager.cs,_PostInit,Cyclomatic complexity of the method is 9
Complex Method,EB.Sparx,LoginRewardsBoard,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxLoginRewardsManager.cs,LoginRewardsBoard,Cyclomatic complexity of the method is 8
Complex Method,EB.Sparx,LoginRewardsStatus,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxLoginRewardsManager.cs,LoginRewardsStatus,Cyclomatic complexity of the method is 13
Complex Method,EB.Sparx,LoginRewardsManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxLoginRewardsManager.cs,Async,Cyclomatic complexity of the method is 8
Complex Method,EB.Sparx,PaymentsManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxPaymentsManager.cs,OnFetchedPayouts,Cyclomatic complexity of the method is 9
Complex Method,EB.Sparx,ResourcesManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxResourcesManager.cs,Async,Cyclomatic complexity of the method is 9
Complex Method,EB.Sparx,SaveLoadManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxSaveLoadManager.cs,DoLoad,Cyclomatic complexity of the method is 11
Complex Method,EB.Sparx,TuningManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxTuningManager.cs,Apply,Cyclomatic complexity of the method is 21
Complex Method,EB.Sparx,HttpEndPoint,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\EndPoints\SparxHttpEndPoint.cs,Fetch,Cyclomatic complexity of the method is 10
Complex Method,EB.Sparx,Game,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\GameManager\SparxGame.cs,OnReceiveGameCommand,Cyclomatic complexity of the method is 28
Complex Method,EB.Sparx,Game,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\GameManager\SparxGame.cs,OnNetworkReceive,Cyclomatic complexity of the method is 9
Complex Method,EB.Sparx,NetworkNull,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\GameManager\SparxNetworkNull.cs,HandleGameCommand,Cyclomatic complexity of the method is 12
Complex Method,EB.Sparx,QosProbe,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Util\SparxQoSProbe.cs,_Send,Cyclomatic complexity of the method is 11
Complex Method,EB.Net,DNS,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetDNS.cs,Lookup,Cyclomatic complexity of the method is 8
Complex Method,EB.Net,TalkWebSocket,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetTalkWebSocket.cs,MessageHandler,Cyclomatic complexity of the method is 8
Complex Method,EB.Net,WebRequest,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetWebRequest.cs,ReadResponse,Cyclomatic complexity of the method is 9
Complex Method,EB.Net,WebRequest,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetWebRequest.cs,ReadBody,Cyclomatic complexity of the method is 10
Complex Method,EB.Replication,Manager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Replication\ReplicationManager.cs,OnPlayerLeft,Cyclomatic complexity of the method is 14
Complex Method,EB.Replication,Manager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Replication\ReplicationManager.cs,RPC,Cyclomatic complexity of the method is 16
Complex Method,EB.Replication,Manager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Replication\ReplicationManager.cs,ViewRPC,Cyclomatic complexity of the method is 16
Complex Method,EB.Replication,Manager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Replication\ReplicationManager.cs,SerializeVarAgs,Cyclomatic complexity of the method is 84
Complex Method,EB.Replication,Manager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Replication\ReplicationManager.cs,_LoadLevelCoroutine,Cyclomatic complexity of the method is 12
Complex Method,EB.Replication,View,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Replication\ReplicationView.cs,Serialize,Cyclomatic complexity of the method is 24
Complex Method,EB.Sequence,Component,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sequence\Components\SequenceComponent.cs,LinkNodes,Cyclomatic complexity of the method is 19
Complex Method,EB.Sequence,Utils,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sequence\Utils\SequenceUtils.cs,GetPropertyType,Cyclomatic complexity of the method is 11
Complex Method,EB.Sequence,Utils,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sequence\Utils\SequenceUtils.cs,UpdateSerializationNode,Cyclomatic complexity of the method is 12
Complex Method,EB.Sequence,Utils,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sequence\Utils\SequenceUtils.cs,GetVariableType,Cyclomatic complexity of the method is 8
Complex Method,EB.Sequence,Utils,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sequence\Utils\SequenceUtils.cs,ValidateLink,Cyclomatic complexity of the method is 11
Complex Method,EB.UI,BlockingMode,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.UI\BusyBlockers\BlockingMode.cs,Hide,Cyclomatic complexity of the method is 8
Complex Method,EB.UI,BlockingMode,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.UI\BusyBlockers\BlockingMode.cs,AnimateIn,Cyclomatic complexity of the method is 8
Complex Method,EB.UI,BlockingMode,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.UI\BusyBlockers\BlockingMode.cs,Update,Cyclomatic complexity of the method is 8
Complex Method,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,UVData,Cyclomatic complexity of the method is 27
Complex Method,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,Cyclomatic complexity of the method is 11
Complex Method,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,Update,Cyclomatic complexity of the method is 18
Complex Method,EB.Rendering,ParticlePal,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\ParticlePal\ParticlePal.cs,Update,Cyclomatic complexity of the method is 30
Complex Method,EB.Rendering,ParticlePal,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\ParticlePal\ParticlePal.cs,SetParameter,Cyclomatic complexity of the method is 24
Complex Method,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,Init,Cyclomatic complexity of the method is 11
Complex Method,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,InitEffect,Cyclomatic complexity of the method is 15
Complex Method,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,DestroyEffect,Cyclomatic complexity of the method is 15
Complex Method,EB.Rendering,ShaderCompositor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\ShaderCompositor\ShaderCompositor.cs,Composite,Cyclomatic complexity of the method is 54
Complex Method,EB.Rendering,ShaderCompositor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\ShaderCompositor\ShaderCompositor.cs,CompositeMaterial,Cyclomatic complexity of the method is 9
Complex Method,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,Cyclomatic complexity of the method is 24
Complex Method,Kabam,KabamSODABomb,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\KabamSODA\KabamSODABomb.cs,SODACheckForClick,Cyclomatic complexity of the method is 8
Complex Method,Kabam.SimpleJSON,JSONNode,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\KabamSODA\KabamSimpleJSON.cs,Escape,Cyclomatic complexity of the method is 25
Complex Method,Kabam.SimpleJSON,JSONNode,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\KabamSODA\KabamSimpleJSON.cs,Parse,Cyclomatic complexity of the method is 96
Complex Method,Kabam.SimpleJSON,JSONNode,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\KabamSODA\KabamSimpleJSON.cs,Deserialize,Cyclomatic complexity of the method is 19
Long Parameter List,Facebook,AndroidFacebook,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Facebook\AndroidFacebook.cs,Init,The method has 10 parameters.
Long Parameter List,Facebook,AndroidFacebook,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Facebook\AndroidFacebook.cs,AppRequest,The method has 10 parameters.
Long Parameter List,Facebook,AndroidFacebook,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Facebook\AndroidFacebook.cs,FeedRequest,The method has 12 parameters.
Long Parameter List,Facebook,AndroidFacebook,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Facebook\AndroidFacebook.cs,Pay,The method has 9 parameters.
Long Parameter List,Facebook,EditorFacebook,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Facebook\EditorFacebook.cs,Init,The method has 10 parameters.
Long Parameter List,Facebook,EditorFacebook,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Facebook\EditorFacebook.cs,OnInit,The method has 10 parameters.
Long Parameter List,Facebook,EditorFacebook,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Facebook\EditorFacebook.cs,AppRequest,The method has 10 parameters.
Long Parameter List,Facebook,EditorFacebook,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Facebook\EditorFacebook.cs,FeedRequest,The method has 12 parameters.
Long Parameter List,Facebook,EditorFacebook,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Facebook\EditorFacebook.cs,Pay,The method has 9 parameters.
Long Parameter List,Facebook,IOSFacebook,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Facebook\IOSFacebook.cs,iosInit,The method has 5 parameters.
Long Parameter List,Facebook,IOSFacebook,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Facebook\IOSFacebook.cs,iosFeedRequest,The method has 11 parameters.
Long Parameter List,Facebook,IOSFacebook,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Facebook\IOSFacebook.cs,iosAppRequest,The method has 13 parameters.
Long Parameter List,Facebook,IOSFacebook,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Facebook\IOSFacebook.cs,iosFBAppEventsLogEvent,The method has 5 parameters.
Long Parameter List,Facebook,IOSFacebook,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Facebook\IOSFacebook.cs,iosFBAppEventsLogPurchase,The method has 5 parameters.
Long Parameter List,Facebook,IOSFacebook,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Facebook\IOSFacebook.cs,Init,The method has 10 parameters.
Long Parameter List,Facebook,IOSFacebook,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Facebook\IOSFacebook.cs,AppRequest,The method has 10 parameters.
Long Parameter List,Facebook,IOSFacebook,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Facebook\IOSFacebook.cs,FeedRequest,The method has 12 parameters.
Long Parameter List,Facebook,IOSFacebook,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Facebook\IOSFacebook.cs,Pay,The method has 9 parameters.
Long Parameter List,EB,Assets,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreAssets.cs,DoLoadMultiAsync,The method has 5 parameters.
Long Parameter List,EB,EventEmitter,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreEventEmitter.cs,Once,The method has 5 parameters.
Long Parameter List,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,processDU,The method has 5 parameters.
Long Parameter List,EB,SafeAction,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreSafeValue.cs,Wrap,The method has 5 parameters.
Long Parameter List,EB,Util,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUtil.cs,TransformPoint,The method has 5 parameters.
Long Parameter List,EB,Util,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUtil.cs,InverseTransformPoint,The method has 5 parameters.
Long Parameter List,EB.Director,Utils,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Director\DirectorUtils.cs,ApplyVariable,The method has 6 parameters.
Long Parameter List,EB.ENet,Plugin,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.ENet\ENetPlugin.cs,enet_host_create,The method has 5 parameters.
Long Parameter List,EB.ENet,Plugin,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.ENet\ENetPlugin.cs,CreateHost,The method has 5 parameters.
Long Parameter List,EB.Sparx,AutoRefreshAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxAutoRefreshAPI.cs,Refresh,The method has 9 parameters.
Long Parameter List,EB.Sparx,EventsAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxEventsAPI.cs,Refresh,The method has 6 parameters.
Long Parameter List,EB.Sparx,GachaAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxGachaAPI.cs,PickFromBox,The method has 8 parameters.
Long Parameter List,EB.Sparx,GachaAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxGachaAPI.cs,ClaimFreeBox,The method has 6 parameters.
Long Parameter List,EB.Sparx,GameManagerAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxGameManagerAPI.cs,JoinGame,The method has 6 parameters.
Long Parameter List,EB.Sparx,GameManagerAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxGameManagerAPI.cs,ResetServer,The method has 8 parameters.
Long Parameter List,EB.Sparx,GameManagerAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxGameManagerAPI.cs,ListGames,The method has 5 parameters.
Long Parameter List,EB.Sparx,GameManagerAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxGameManagerAPI.cs,FindGame,The method has 6 parameters.
Long Parameter List,EB.Sparx,GameManagerAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxGameManagerAPI.cs,FindOrCreateGame,The method has 8 parameters.
Long Parameter List,EB.Sparx,InventoryAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxInventoryAPI.cs,_Call,The method has 5 parameters.
Long Parameter List,EB.Sparx,LoginAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxLoginAPI.cs,Login,The method has 5 parameters.
Long Parameter List,EB.Sparx,MatchAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxMatchAPI.cs,ActivateMatch,The method has 5 parameters.
Long Parameter List,EB.Sparx,MatchAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxMatchAPI.cs,ResolveMatch,The method has 8 parameters.
Long Parameter List,EB.Sparx,PerformanceAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxPerformanceAPI.cs,Fetch,The method has 6 parameters.
Long Parameter List,EB.Sparx,PrizesAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxPrizesAPI.cs,Refresh,The method has 6 parameters.
Long Parameter List,EB.Sparx,PrizesAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxPrizesAPI.cs,Claim,The method has 5 parameters.
Long Parameter List,EB.Sparx,PrizesAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxPrizesAPI.cs,ClaimBox,The method has 5 parameters.
Long Parameter List,EB.Sparx,RedeemerAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxRedeemerAPI.cs,Refresh,The method has 6 parameters.
Long Parameter List,EB.Sparx,WalletAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxWalletAPI.cs,_Call,The method has 5 parameters.
Long Parameter List,EB.Sparx,AutoRefreshingManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxAutoRefreshingManager.cs,Refresh,The method has 6 parameters.
Long Parameter List,EB.Sparx,AutoRefreshingManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxAutoRefreshingManager.cs,Connect,The method has 6 parameters.
Long Parameter List,EB.Sparx,ChatManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxChatManager.cs,Send,The method has 6 parameters.
Long Parameter List,EB.Sparx,DataManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxDataManager.cs,Load,The method has 6 parameters.
Long Parameter List,EB.Sparx,GachaManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxGachaManager.cs,PickFromBox,The method has 5 parameters.
Long Parameter List,EB.Sparx,GachaManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxGachaManager.cs,PickFromBox,The method has 6 parameters.
Long Parameter List,EB.Sparx,GachaManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxGachaManager.cs,OnData,The method has 5 parameters.
Long Parameter List,EB.Sparx,GameManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxGameManager.cs,ListGames,The method has 5 parameters.
Long Parameter List,EB.Sparx,GameManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxGameManager.cs,CreateOrJoinPrivateGame,The method has 5 parameters.
Long Parameter List,EB.Sparx,GameStoreManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxGameStoreManager.cs,UseItem,The method has 5 parameters.
Long Parameter List,EB.Sparx,LeaderboardManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxLeaderboardManager.cs,ReportScore,The method has 6 parameters.
Long Parameter List,EB.Sparx,LoginManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxLoginManager.cs,_Login,The method has 5 parameters.
Long Parameter List,EB.Sparx,LoginRewardsManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxLoginRewardsManager.cs,PickReward,The method has 5 parameters.
Long Parameter List,EB.Sparx,MatchManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxMatchManager.cs,ActivateMatch,The method has 6 parameters.
Long Parameter List,EB.Sparx,MatchManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxMatchManager.cs,ResolveMatch,The method has 9 parameters.
Long Parameter List,EB.Sparx,PerformanceManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxPerformanceManager.cs,Fetch,The method has 7 parameters.
Long Parameter List,EB.Sparx,RedeemerStaticDisplayMapping,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxRedeemerManager.cs,RedeemerStaticDisplayMapping,The method has 5 parameters.
Long Parameter List,EB.Sparx,RedeemerStaticDisplayMapping,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxRedeemerManager.cs,RedeemerStaticDisplayMapping,The method has 7 parameters.
Long Parameter List,EB.Sparx,RedeemerDynamicDisplayMapping,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxRedeemerManager.cs,RedeemerDynamicDisplayMapping,The method has 7 parameters.
Long Parameter List,EB.Sparx,RedeemerManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxRedeemerManager.cs,Refresh,The method has 5 parameters.
Long Parameter List,EB.Sparx,ResourcesManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxResourcesManager.cs,DebugAddResource,The method has 5 parameters.
Long Parameter List,EB.Sparx,TutorialManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxTutorialManager.cs,EarlyStartBranch,The method has 5 parameters.
Long Parameter List,EB.Sparx,TutorialManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxTutorialManager.cs,StartBranch,The method has 5 parameters.
Long Parameter List,EB.Sparx,WebViewManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxWebViewManager.cs,OpenWebPopup,The method has 5 parameters.
Long Parameter List,EB.Sparx,WebSocketEndPoint,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\EndPoints\SparxWebSocketEndPoint.cs,RPC,The method has 5 parameters.
Long Parameter List,EB.Sparx,QosProbe,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Util\SparxQoSProbe.cs,QosProbe,The method has 5 parameters.
Long Parameter List,EB.GameTalk,Manager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.GameTalk\EBGameTalkManager.cs,RPC,The method has 5 parameters.
Long Parameter List,EB.Replication,Manager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Replication\ReplicationManager.cs,WriteViewRPC,The method has 5 parameters.
Long Parameter List,EB.Replication,Manager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Replication\ReplicationManager.cs,CallViewRPC,The method has 5 parameters.
Long Parameter List,EB.Replication,Manager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Replication\ReplicationManager.cs,_Instantiate,The method has 5 parameters.
Long Parameter List,EB.Replication,Manager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Replication\ReplicationManager.cs,_InstantiateRPC,The method has 5 parameters.
Long Parameter List,EB.Replication,Manager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Replication\ReplicationManager.cs,_LoadLevelRPC,The method has 5 parameters.
Long Parameter List,EB.Replication,Manager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Replication\ReplicationManager.cs,_LoadLevelCoroutine,The method has 5 parameters.
Long Parameter List,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,GaussianBlur,The method has 6 parameters.
Long Parameter List,EB.Rendering,ShaderCompositor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\ShaderCompositor\ShaderCompositor.cs,Composite,The method has 7 parameters.
Long Parameter List,EB.Rendering,ShaderCompositor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\ShaderCompositor\ShaderCompositor.cs,Composite,The method has 8 parameters.
Long Parameter List,EB.Rendering,ShaderCompositor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\ShaderCompositor\ShaderCompositor.cs,Composite,The method has 8 parameters.
Long Parameter List,EB.Rendering,ShaderCompositor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\ShaderCompositor\ShaderCompositor.cs,Composite,The method has 11 parameters.
Long Parameter List,EB.Rendering,ShaderCompositor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\ShaderCompositor\ShaderCompositor.cs,CompositeMaterial,The method has 5 parameters.
Long Parameter List,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateHigh,The method has 8 parameters.
Long Parameter List,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMedium,The method has 8 parameters.
Long Parameter List,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateLow,The method has 8 parameters.
Long Parameter List,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,InterpolateHermite,The method has 5 parameters.
Long Statement,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,nextToken,The length of the statement  "		if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') { " is 134.
Long Statement,Facebook,AndroidFacebook,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Facebook\AndroidFacebook.cs,OnAppRequestsComplete,The length of the statement  "			OnFacebookResponse (callbackId' new FBResult (MiniJSON.Json.Serialize (result)' "Malformed request response.  Please file a bug with facebook here: https://developers.facebook.com/bugs/create")); " is 195.
Long Statement,Facebook,AndroidFacebook,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Facebook\AndroidFacebook.cs,OnFeedRequestComplete,The length of the statement  "			OnFacebookResponse (callbackId' new FBResult (MiniJSON.Json.Serialize (result)' "Malformed request response.  Please file a bug with facebook here: https://developers.facebook.com/bugs/create")); " is 195.
Long Statement,Facebook,EditorFacebook,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Facebook\EditorFacebook.cs,Init,The length of the statement  "	StartCoroutine (OnInit (onInitComplete' appId' cookie' logging' status' xfbml' channelUrl' authResponse' frictionlessRequests' hideUnityDelegate)); " is 147.
Long Statement,Facebook,EditorFacebook,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Facebook\EditorFacebook.cs,OnInit,The length of the statement  "	fb.Init (onInitComplete' appId' cookie' logging' status' xfbml' channelUrl' authResponse' frictionlessRequests' hideUnityDelegate); " is 131.
Long Statement,Facebook,EditorFacebook,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Facebook\EditorFacebook.cs,FeedRequest,The length of the statement  "	fb.FeedRequest (toId' link' linkName' linkCaption' linkDescription' picture' mediaSource' actionName' actionLink' reference' properties' callback); " is 147.
Long Statement,Facebook,IOSFacebook,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Facebook\IOSFacebook.cs,AppRequest,The length of the statement  "	iosAppRequest (Convert.ToInt32 (AddFacebookDelegate (callback))' message' (actionType != null) ? actionType.ToString () : null' objectId' to' to != null ? to.Length : 0' filters' excludeIds' excludeIds != null ? excludeIds.Length : 0' maxRecipients.HasValue' maxRecipients.HasValue ? maxRecipients.Value : 0' data' title); " is 322.
Long Statement,Facebook,IOSFacebook,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Facebook\IOSFacebook.cs,FeedRequest,The length of the statement  "	iosFeedRequest (System.Convert.ToInt32 (AddFacebookDelegate (callback))' toId' link' linkName' linkCaption' linkDescription' picture' mediaSource' actionName' actionLink' reference); " is 182.
Long Statement,Facebook,IOSFacebook,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Facebook\IOSFacebook.cs,OnRequestComplete,The length of the statement  "		FbDebug.Error ("Malformed callback from ios.  I expected the form id:message but couldn't find either the ':' character or the id."); " is 133.
Long Statement,EB,Assets,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreAssets.cs,ReadBuildConfig,The length of the statement  "	// Bit of a hack to use DoReadBuildConfig w/ WWW to extract the BuildConfig.txt from the apk/package... WWW doesn't seem to work correctly this way w/ IOS though " is 161.
Long Statement,EB,Assets,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreAssets.cs,GatherBundleLoadList,The length of the statement  "		EB.Debug.LogError ("********************** WARNING: skipping unload of " + info.id + " because it was requested to load again"); " is 128.
Long Statement,EB,Assets,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreAssets.cs,_LoadScene,The length of the statement  "		Loader.CachedLoadHandler loader = new Loader.CachedLoadHandler (Loader.GetBundlePath (sceneInfo.pack.id' Loader.GetSceneBundleName (sceneInfo.id))' true' 0' sceneInfo.ts); " is 171.
Long Statement,EB,Assets,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreAssets.cs,_LoadScene,The length of the statement  "		/* GA : ADDED BEGIN */// Assumption: if the callback parameter is specified' we are to delay the activation of the new scene " is 124.
Long Statement,EB,Assets,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreAssets.cs,Load,The length of the statement  "	if (isPlaying && EB.Assets.CurrentBundleMode != EB.Assets.DevBundleType.NoBundles && path_lower.StartsWith ("bundles")) { " is 121.
Long Statement,EB,Assets,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreAssets.cs,Load,The length of the statement  "		Debug.LogError ("Failed to find bundled file: " + path + " in a bundle. Make sure it's included in the bundled data specified in Assets/Config/..."); " is 149.
Long Statement,EB,Assets,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreAssets.cs,DoLoadAsync,The length of the statement  "		if (isPlaying && EB.Assets.CurrentBundleMode != EB.Assets.DevBundleType.NoBundles && path_lower.StartsWith ("bundles")) { " is 121.
Long Statement,EB,Assets,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreAssets.cs,DoLoadAsync,The length of the statement  "			EB.Debug.LogError ("Failed to find bundled file: " + path + " in a bundle. Make sure it's included in the bundled data specified in Assets/Config/..."); " is 152.
Long Statement,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,WriteBytes,The length of the statement  "		throw new System.ArgumentOutOfRangeException ("WriteBytes buffer overflow length: " + Length + " count:" + count + " capacity" + _capacity); " is 140.
Long Statement,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadBytes,The length of the statement  "		throw new System.ArgumentOutOfRangeException ("ReadBytes buffer underun length: " + Length + " count:" + count + " capacity" + _capacity); " is 138.
Long Statement,EB,Dot,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreDot.cs,Find,The length of the statement  "				EB.Debug.LogWarning ("EB.Dot.Find > out of array bounds [index " + index + " vs. arr size " + arr.Count + "]' stopping"); " is 121.
Long Statement,EB,Dot,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreDot.cs,Colour,The length of the statement  "			if (int.TryParse (parts [0]' out r) && int.TryParse (parts [1]' out g) && int.TryParse (parts [2]' out b) && float.TryParse (parts [3]' out a)) { " is 145.
Long Statement,EB,FileSystem,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreFileSystem.cs,GetAvailableSpaceInBytes,The length of the statement  "				EB.Debug.LogError("Function not implemented! This class works specifically on Android platform. Implementations on other platforms are not available.");" is 152.
Long Statement,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,NextToken,The length of the statement  "		if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') { " is 134.
Long Statement,EB,Localizer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreLocalizer.cs,FormatTimeHundredthsSeconds,The length of the statement  "	string timeString = (minutes < 10 && minutes >= 0 ? "0" : "") + (minutes > 0 ? minutes.ToString () + "+" : "") + ((seconds < 10 && seconds >= 0 && minutes > 0) ? "0" : "") + seconds.ToString () + ":" + (totalHundredthsSeconds % 100 < 10 ? "0" : "" + totalHundredthsSeconds % 100).ToString (); " is 292.
Long Statement,EB,Localizer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreLocalizer.cs,FormatTime,The length of the statement  "	string timeString = (hours > 0 ? hours.ToString () + ":" : "") + ((minutes < 10 && minutes >= 0 && hours > 0) ? "0" : "") + minutes.ToString (); " is 144.
Long Statement,EB,Memory,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreMemory.cs,Update,The length of the statement  "						EB.Debug.LogError ("Breach detected! for object " + locked.instance + " " + EB.Encoding.ToHexString (hash) + " != " + EB.Encoding.ToHexString (locked.hash)); " is 157.
Long Statement,EB,ProfanityFilter,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreProfanityFilter.cs,IsOk,The length of the statement  "		if (text.IndexOf (word' System.StringComparison.OrdinalIgnoreCase) >= 0 || text.IndexOf (wordNoSpaces' System.StringComparison.OrdinalIgnoreCase) >= 0) { " is 153.
Long Statement,EB,QueryString,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreQueryString.cs,Escape,The length of the statement  "		if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9') || (c == '-') || (c == '_') || (c == '.') || (c == '!') || (c == '~') || (c == '*') || (c == '\'') || (c == '(') || (c == ')')) { " is 208.
Long Statement,EB,Serialization,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreSerialization.cs,CopyFields,The length of the statement  "		if (field.GetCustomAttributes (typeof(NoSerializeAttribute)' true).Length > 0 || field.IsPublic == false || field.IsStatic) { " is 125.
Long Statement,EB,Serialization,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreSerialization.cs,CopyFields,The length of the statement  "		//EB.Debug.Log("Copying field " + field.Name + " before=" + value.ToString() + " after=" + field.GetValue(dest).ToString() ); " is 125.
Long Statement,EB,Uri,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUri.cs,Parse,The length of the statement  "		// if it's a filepath there's not going to be a username/password or port... I think. Remove the drive ("C:/") for windows machines " is 131.
Long Statement,EB,Util,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUtil.cs,ColourFromString,The length of the statement  "			if (int.TryParse (parts [0]' out r) && int.TryParse (parts [1]' out g) && int.TryParse (parts [2]' out b) && float.TryParse (parts [3]' out a)) { " is 145.
Long Statement,EB,Util,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUtil.cs,InverseTransformPoint,The length of the statement  "	return Vector3.Scale (new Vector3 (1.0f / lossyScale.x' 1.0f / lossyScale.y' 1.0f / lossyScale.z)' (Quaternion.Inverse (rotation) * (worldPosition - startingPosition))); " is 169.
Long Statement,EB.Director.Runtime,CameraShakeInstance,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Director\Runtime\DirectorTracks.cs,Apply,The length of the statement  "	//					_target.transform.localPosition += new Vector3(Random.Range(-v.pos.x'v.pos.x)' Random.Range(-v.pos.y'v.pos.y)' Random.Range(-v.pos.z'v.pos.z)); " is 150.
Long Statement,EB.Director.Runtime,CameraShakeInstance,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Director\Runtime\DirectorTracks.cs,Apply,The length of the statement  "	//					_target.transform.localEulerAngles += new Vector3(Random.Range(-v.quat.x'v.quat.x)' Random.Range(-v.quat.y'v.quat.y)' Random.Range(-v.quat.z'v.quat.z)); " is 159.
Long Statement,EB.Director.Runtime,CameraShakeInstance,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Director\Runtime\DirectorTracks.cs,Apply,The length of the statement  "	//					_target.transform.position += new Vector3(Random.Range(-v.pos.x'v.pos.x)' Random.Range(-v.pos.y'v.pos.y)' Random.Range(-v.pos.z'v.pos.z)); " is 145.
Long Statement,EB.Director.Runtime,CameraShakeInstance,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Director\Runtime\DirectorTracks.cs,Apply,The length of the statement  "	//					_target.transform.eulerAngles += new Vector3(Random.Range(-v.quat.x'v.quat.x)' Random.Range(-v.quat.y'v.quat.y)' Random.Range(-v.quat.z'v.quat.z)); " is 154.
Long Statement,EB.Director.Runtime,TransformTrackInstance,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Director\Runtime\DirectorTracks.cs,Apply,The length of the statement  "			//EB.Debug.Log("LERPING CAMERA: " + _parent.name + " --- TIMER: " + timer + " --- Parent: " + _target.transform.parent.name); " is 125.
Long Statement,EB.Director.Runtime,TransformTrackInstance,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Director\Runtime\DirectorTracks.cs,Apply,The length of the statement  "		//EB.Debug.Log("BLENDING CAMERA: " + _parent.name + " --- BLEND: " + blend + " --- Parent: " + _target.transform.parent.name); " is 126.
Long Statement,EB.Sparx,AutoRefreshAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxAutoRefreshAPI.cs,Refresh,The length of the statement  "			this.OnRefreshData (name' response.hashtable' delegate (string err' string updatedCheck' int nextRefresh' Hashtable data) { " is 123.
Long Statement,EB.Sparx,EventsAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxEventsAPI.cs,OnEventsData,The length of the statement  "							if ((string.IsNullOrEmpty (evt.Description.CDN) == false) && (string.IsNullOrEmpty (evt.Description.Banner) == false)) { " is 120.
Long Statement,EB.Sparx,GachaPickResult,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxGachaAPI.cs,ToString,The length of the statement  "	return string.Format ("SoftCurrentToPay:{0} XpToGive:{1} Items #:{2}"' this.SoftCurrentToPay' this.XpToGive' this.Items.Count); " is 127.
Long Statement,EB.Sparx,LoginAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxLoginAPI.cs,AddData,The length of the statement  "	request.AddData ("cellular"' Application.internetReachability == NetworkReachability.ReachableViaCarrierDataNetwork ? 1 : 0); " is 125.
Long Statement,EB.Sparx,MessengerMessage,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxMessageAPI.cs,ToString,The length of the statement  "	return string.Format ("Prefab:{0} ID:{1} Subject:{2} Title:{3} Read:{4} Gift:{5}"' this.Prefab' this.MessageID' this.Subject' this.Title' this.Read' this.Gift); " is 160.
Long Statement,EB.Sparx,PrizeBox,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxPrizesAPI.cs,ToString,The length of the statement  "	return string.Format ("Id:{0} Received:{1} Expiry:{2} Items:{3}"' this.Id' this.Received' this.Expiry' string.Join ("\n"' items.ToArray ())); " is 141.
Long Statement,EB.Sparx,RedeemerAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxRedeemerAPI.cs,Refresh,The length of the statement  "			this.OnRedeemerData (result.hashtable' delegate (List<ServerRedeemerTranslation> translations' string updatedCheckHash' int nextRefresh) { " is 138.
Long Statement,EB.Sparx,AppiraterManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxAppiraterManager.cs,Initialize,The length of the statement  "			var listener = new GameObject("appirater_callbacks"' typeof(SparxAppiraterManager)).GetComponent<SparxAppiraterManager>();" is 122.
Long Statement,EB.Sparx,AutoRefreshingManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxAutoRefreshingManager.cs,Refresh,The length of the statement  "	this.Api.Refresh (this.Name' this.APIVersion' this.CheckHash' delegate (string err' string updatedCheckHash' int nextRefresh' Hashtable data) { " is 143.
Long Statement,EB.Sparx,AutoRefreshingManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxAutoRefreshingManager.cs,Update,The length of the statement  "	if ((this.State == SubSystemState.Connected) && (this.NextRefresh >= 0) && (EB.Time.Now > this.NextRefresh) && (this.IsRefreshing == false)) { " is 142.
Long Statement,EB.Sparx,AutoRefreshingManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxAutoRefreshingManager.cs,Connect,The length of the statement  "		this.Api.OnRefreshData (this.Name' refreshData' delegate (string err' string updatedCheckHash' int nextRefresh' Hashtable data) { " is 129.
Long Statement,EB.Sparx,FacebookManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxFacebookManager.cs,DoMe,The length of the statement  "	FB.API ("/me?fields=first_name'last_name'name'email'birthday'name'permissions"' Facebook.HttpMethod.GET' delegate (FBResult result) { " is 133.
Long Statement,EB.Sparx,GachaManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxGachaManager.cs,PickFromBox,The length of the statement  "		this._api.PickFromBox (box.Group' box.Version' box.PickSet' box.Name' payment' spins' delegate (string error' Hashtable data) { " is 127.
Long Statement,EB.Sparx,GameManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxGameManager.cs,FindOrCreateGame,The length of the statement  "		_api.FindOrCreateGame (walk.Server' pars.SearchAttributes' pars.MaxPlayers' pars.ResetAttributes' pars.PlayerAttributes' walk.OnResult); " is 136.
Long Statement,EB.Sparx,LevelRewardsManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxLevelRewardsManager.cs,GetMilestoneRedeemerLevel,The length of the statement  "				if ((m.category == category) && (m.redeemer.Type == redeemerType) && (m.redeemer.Data == dataType) && (m.redeemer.Quantity == quanity)) { " is 137.
Long Statement,EB.Sparx,LoginRewardsTile,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxLoginRewardsManager.cs,ToString,The length of the statement  "	return string.Format ("({0}'{1}) : {2} -> {3}"' this.X' this.Y' this.Type' (this.Prizes.Count > 0 ? string.Join ("'"' this.Prizes.ConvertAll (p => p.ToString ()).ToArray ()) : this.Data)); " is 188.
Long Statement,EB.Sparx,MatchManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxMatchManager.cs,ResolveMatch,The length of the statement  "	_api.ResolveMatch (matchType' matchID' matchResults' convertMatchResults' matchStats' converMatchStats' delegate (string err' Hashtable result) { " is 145.
Long Statement,EB.Sparx,PayoutSale,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxPaymentsManager.cs,ToString,The length of the statement  "	return string.Format ("{0}:{1} Chevron:{7} Image:{2} Flash:{3} Colour:{4} Notification:{5} Banner:{6}"' this.Title' this.Description' this.Image' this.Flash' this.Colour' this.Notification' this.Banner' this.Chevron); " is 217.
Long Statement,EB.Sparx,PushManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxPushManager.cs,Connect,The length of the statement  "			NotificationServices.RegisterForRemoteNotificationTypes( RemoteNotificationType.Alert | RemoteNotificationType.Badge | RemoteNotificationType.Sound );" is 150.
Long Statement,EB.Sparx,RedeemerManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxRedeemerManager.cs,Refresh,The length of the statement  "	this.API.Refresh (this.CheckHash' delegate (string err' List<ServerRedeemerTranslation> translations' string updatedCheckHash' int nextRefresh) { " is 145.
Long Statement,EB.Sparx,RedeemerManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxRedeemerManager.cs,ToString,The length of the statement  "	buffer += "ServerTranslations:" + ((this.ServerRedeemerTranslator != null) ? this.ServerRedeemerTranslator.ToString () : "None"); " is 129.
Long Statement,EB.Sparx,RedeemerManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxRedeemerManager.cs,Connect,The length of the statement  "		this.API.OnRedeemerData (redeemersData' delegate (List<ServerRedeemerTranslation> translations' string updatedCheckHash' int nextRefresh) { " is 139.
Long Statement,EB.Sparx,RedeemerManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxRedeemerManager.cs,Update,The length of the statement  "		this.API.Refresh (this.CheckHash' delegate (string err' List<ServerRedeemerTranslation> translations' string updatedCheckHash' int nextRefresh) { " is 145.
Long Statement,EB.Sparx,ResourcesType,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxResourcesManager.cs,ToString,The length of the statement  "	string data = "[" + this.Name + "] Amount=" + this.Amount + " Max=" + this.Max + " NextGrowthTime=" + this.GetNextGrowthTime_Local ().ToString () + " NextGrowthAmount=" + this.NextGrowthAmount; " is 193.
Long Statement,EB.Sparx,SodaManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxSodaManager.cs,Connect,The length of the statement  "			_plugin.Init (Dot.String ("clientId"' data' string.Empty)' Dot.String ("mobileKey"' data' string.Empty)' Dot.String ("wskeUrl"' data' string.Empty)); " is 149.
Long Statement,EB.Sparx,MasterServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\MasterServer\SparxMasterServer.cs,ToString,The length of the statement  "	return Debug.Format ("[MasterServer: EndPoint={0}' Players={1}' Name={2}' Ping={3}]"' EndPoint' PlayerCount' Name' Ping); " is 121.
Long Statement,EB.Sparx,MasterServerGame,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\MasterServer\SparxMasterServerGame.cs,ToString,The length of the statement  "	return Debug.Format ("[MasterServerGame: Id={0}' PlayerCount={1}' MaxPlayers={2}' Attributes={3}]"' Id' PlayerCount' MaxPlayers' Attributes); " is 141.
Long Statement,EB.Sparx,FacebookUser,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\SparxFacebookUser.cs,GetImageUrlForUser,The length of the statement  "	return "https://graph.facebook.com/" + fbId + "/picture?return_ssl_resources=1&width=" + width.ToString () + "&height=" + height.ToString (); " is 141.
Long Statement,EB.Sparx,Protect,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Util\SparxProtect.cs,CalculateSha1,The length of the statement  "			yield return Coroutines.Run( APKSignature.SyncGenerateSHA1SignatureFromAPK( jarPath' delegate(string sha1) { _sha1 = sha1; } ) );" is 129.
Long Statement,EB.Sparx,Protect,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Util\SparxProtect.cs,CalculateHmac,The length of the statement  "			yield return Coroutines.Run( APKSignature.SyncGenerateHMACSignatureFromAPK( jarPath' salt' delegate(string hmac) { chal = hmac; } ) );" is 134.
Long Statement,EB.GameTalk,Manager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.GameTalk\EBGameTalkManager.cs,Bind,The length of the statement  "				instance.GetType ().InvokeMember (method.Name' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.InvokeMethod' null' instance' new object[] { " is 175.
Long Statement,EB.GameTalk,Manager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.GameTalk\EBGameTalkManager.cs,Bind,The length of the statement  "				//method.Invoke( instance' BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic|BindingFlags.InvokeMethod' null' ' null); " is 133.
Long Statement,EB.Net,WebRequest,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetWebRequest.cs,ReturnClient,The length of the statement  "		if (statusCode == 200 && client.Connected && GetResponseHeader ("Connection") != "close" && string.IsNullOrEmpty (_error)) { " is 124.
Long Statement,EB.Perforce,Perforce,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Perforce\Perforce.cs,P4Command,The length of the statement  "	if (File.Exists (globalP4cmd) && ((File.GetAttributes (globalP4cmd) & FileAttributes.Normal) == FileAttributes.Normal)) { " is 121.
Long Statement,EB.Perforce,Perforce,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Perforce\Perforce.cs,P4AddDirectory,The length of the statement  "	if (Application.platform == UnityEngine.RuntimePlatform.OSXEditor || Application.platform == UnityEngine.RuntimePlatform.OSXPlayer) { " is 133.
Long Statement,EB.Perforce,Perforce,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Perforce\Perforce.cs,CreateChangelist,The length of the statement  "	if (Application.platform == UnityEngine.RuntimePlatform.OSXEditor || Application.platform == UnityEngine.RuntimePlatform.OSXPlayer) { " is 133.
Long Statement,EB.Perforce,Perforce,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Perforce\Perforce.cs,CreateChangelist,The length of the statement  "		command = "-c \"(p4 change -o | grep '^\\(Change\\|Client\\|User\\|Description\\)'; echo ' " + description + "') | p4 change -i\""; " is 131.
Long Statement,EB.Perforce,Perforce,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Perforce\Perforce.cs,CreateChangelist,The length of the statement  "		command = "/C p4 change -o | findstr /R /B \"Change Client User Description\" > p4.txt & echo     " + description + " >> p4.txt & type p4.txt | p4 change -i"; " is 158.
Long Statement,EB.Perforce,Perforce,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Perforce\Perforce.cs,GetCurrentClient,The length of the statement  "	if (Application.platform == UnityEngine.RuntimePlatform.OSXEditor || Application.platform == UnityEngine.RuntimePlatform.OSXPlayer) { " is 133.
Long Statement,EB.Perforce,Perforce,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Perforce\Perforce.cs,GetChangelist,The length of the statement  "	if (Application.platform == UnityEngine.RuntimePlatform.OSXEditor || Application.platform == UnityEngine.RuntimePlatform.OSXPlayer) { " is 133.
Long Statement,EB.Replication,Manager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Replication\ReplicationManager.cs,SerializeViews,The length of the statement  "			if (view.enabled && view.gameObject.activeSelf && view.observed != null && view.stateSynchronization != NetworkStateSynchronization.Off) { " is 138.
Long Statement,EB.Replication,Manager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Replication\ReplicationManager.cs,ReadViewUpdate,The length of the statement  "			EB.Debug.LogError ("Exception while deserializing view {0}' buffer {1}' {2}' ex: {3}"' viewId' bytes.Length' Encoding.ToHexString (bytes' 1)' e); " is 145.
Long Statement,EB.Replication,Manager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Replication\ReplicationManager.cs,CallViewRPC,The length of the statement  "			observered.GetType ().InvokeMember (name' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.InvokeMethod' null' observered' args); " is 164.
Long Statement,EB.Replication,View,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Replication\ReplicationView.cs,AllocateId,The length of the statement  "	// TODO: Temporarily wrap this in a try-catch block to prevent the game from crashing when a Replication View is used outside a Sparx game. --NWF " is 145.
Long Statement,EB.Replication,View,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Replication\ReplicationView.cs,Serialize,The length of the statement  "		behaviour.GetType ().InvokeMember ("OnSerializeView"' BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance' null' behaviour' new object[] { " is 183.
Long Statement,EB.UI,BlockingMode,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.UI\BusyBlockers\BlockingMode.cs,UpdateRootObjectAndCollider,The length of the statement  "		bool isInvisibleBlockerUp = (!blockingState.IsBlockerVisual && !blockingState.IsNonBlocking && blockingState.IsBlockerActive); " is 126.
Long Statement,EB.UI,BlockingMode,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.UI\BusyBlockers\BlockingMode.cs,Report,The length of the statement  "	UILogger.Instance.Log (string.Format ("[{0}] BlockingMode({1}) > {2}"' UnityEngine.Time.frameCount' (IsBlockingState ? "Blocking" : "Non-Blocking")' msg)); " is 155.
Long Statement,EB.UI,TrackedObject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.UI\Core\TrackedObject.cs,GetRelativePath,The length of the statement  "		EB.Debug.LogError (string.Format ("Tracked Object Path did not start with the owner path!\nownerPath:{0}\ntrackedObjPath:{1}\n"' ownerPath' trackedObjPath)); " is 157.
Long Statement,EB.UI,TrackedObject,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.UI\Core\TrackedObject.cs,ToString,The length of the statement  "	string result = string.Format ("[TrackedObject: obj='{0}'' type='{1}']\n"' uiObject.obj.name' uiObject.type.ToString ()); " is 121.
Long Statement,EB.UI,TrackedProperty,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.UI\Core\TrackedProperty.cs,Deserialize,The length of the statement  "			EB.Debug.LogWarning ("Tracked Property was unable to find Property '{0}' on type '{1}'."' propName' owner.GetType ().Name); " is 123.
Long Statement,EB.Rendering,DynamicPointLightInstance,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\DynamicLights\Scripts\DynamicPointLightInstance.cs,Sim,The length of the statement  "	//Debug.Log("Life Time " +Lifetime+ " CYCLE "+CycleTime+" DELTA " + tick + " prev " + _PrevTick + " delta " +deltaTick); " is 120.
Long Statement,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,Update,The length of the statement  "		if ((!OnScreen (screenSunPos) || hit.collider == null || hit.collider != _camera.collider) && !hit.collider.isTrigger)// HIDE FLARE " is 131.
Long Statement,EB.Rendering,GeneratePostFXShaders,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\GeneratePostFXShaders.cs,CompositePostFX,The length of the statement  "		new ShaderCompositor.ShaderProperty ("_MainTex"' ""' ShaderCompositor.ePROPERTY_TYPE.Texture2D' ShaderCompositor.eDEFAULT_VALUE.Black)' " is 135.
Long Statement,EB.Rendering,GeneratePostFXShaders,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\GeneratePostFXShaders.cs,CompositePostFX,The length of the statement  "		new ShaderCompositor.ShaderProperty ("_BloomTex"' "Bloom"' ShaderCompositor.ePROPERTY_TYPE.Texture2D' ShaderCompositor.eDEFAULT_VALUE.Black)' " is 141.
Long Statement,EB.Rendering,GeneratePostFXShaders,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\GeneratePostFXShaders.cs,CompositePostFX,The length of the statement  "		new ShaderCompositor.ShaderProperty ("_VignetteTex"' "Vignette"' ShaderCompositor.ePROPERTY_TYPE.Texture2D' ShaderCompositor.eDEFAULT_VALUE.Black)' " is 147.
Long Statement,EB.Rendering,GeneratePostFXShaders,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\GeneratePostFXShaders.cs,CompositePostFX,The length of the statement  "		new ShaderCompositor.ShaderProperty ("_WarpTex"' "Warp"' ShaderCompositor.ePROPERTY_TYPE.Texture2D' ShaderCompositor.eDEFAULT_VALUE.White)' " is 139.
Long Statement,EB.Rendering,GeneratePostFXShaders,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\GeneratePostFXShaders.cs,CompositePostFX,The length of the statement  "	string dir = Application.dataPath + slash + "Plugins" + slash + "Fuse_Rendering" + slash + "PostFX" + slash + "Resources" + slash; " is 130.
Long Statement,EB.Rendering,GeneratePostFXShaders,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\GeneratePostFXShaders.cs,CompositePostFX,The length of the statement  "	Shader composited = ShaderCompositor.Composite (shaderName' material' dir' include' "EBG_"' properties' categoryBlock' lods); " is 125.
Long Statement,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,InitBloom,The length of the statement  "		_BloomBlurTextures [i] = new RenderTexture (_BloomBlurWidth [(int)Quality] [i]' _BloomBlurHeight [(int)Quality] [i]' 0' RenderTextureFormat.ARGB32); " is 148.
Long Statement,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,Bloom,The length of the statement  "				_BloomBlurTextures[i] = RenderTexture.GetTemporary(_BloomBlurWidth[(int)Quality][i]' _BloomBlurHeight[(int)Quality][i]' 0' RenderTextureFormat.ARGB32);" is 151.
Long Statement,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,Bloom,The length of the statement  "	GaussianBlur (POSTFX_GAUSSIAN_BLUR_DIRECTION.VERTICAL' POSTFX_GUASSIAN_BLUR_MODE.TAP_3_RAMP' src' _BloomBlurTextures [0]' _BloomBlurSigma' _BloomRamp); " is 151.
Long Statement,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,Bloom,The length of the statement  "	GaussianBlur (POSTFX_GAUSSIAN_BLUR_DIRECTION.HORIZONTAL' POSTFX_GUASSIAN_BLUR_MODE.TAP_3' _BloomBlurTextures [0]' _BloomBlurTextures [1]' _BloomBlurSigma); " is 155.
Long Statement,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,Bloom,The length of the statement  "		GaussianBlur (POSTFX_GAUSSIAN_BLUR_DIRECTION.VERTICAL' POSTFX_GUASSIAN_BLUR_MODE.TAP_7' _BloomBlurTextures [i - 1]' _BloomBlurTextures [i]' _BloomBlurSigma); " is 157.
Long Statement,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,Bloom,The length of the statement  "		GaussianBlur (POSTFX_GAUSSIAN_BLUR_DIRECTION.HORIZONTAL' POSTFX_GUASSIAN_BLUR_MODE.TAP_7' _BloomBlurTextures [i]' _BloomBlurTextures [i + 1]' _BloomBlurSigma); " is 159.
Long Statement,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,InitWarp,The length of the statement  "	_WarpRenderTexture = new RenderTexture (_WarpRenderTextureWidth [(int)Quality]' _WarpRenderTextureHeight [(int)Quality]' 24' _WarpRenderTextureFormat); " is 151.
Long Statement,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,Warp,The length of the statement  "				_WarpRenderTexture = RenderTexture.GetTemporary(_WarpRenderTextureWidth[(int)Quality]' _WarpRenderTextureHeight[(int)Quality]' 24' _WarpRenderTextureFormat);" is 157.
Long Statement,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,Warp,The length of the statement  "	_WarpCamera.cullingMask = (1 << LayerMask.NameToLayer (_WarpLayerName)) | (1 << LayerMask.NameToLayer (_WarpAndSceneLayerName)); " is 128.
Long Statement,EB.Rendering,ShaderCompositor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\ShaderCompositor\ShaderCompositor.cs,Composite,The length of the statement  "	return Composite (shaderName' material' dir' includeFile' keywordPrefix' properties' categoryBlock' lods' out filePath); " is 120.
Long Statement,EB.Rendering,ShaderCompositor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\ShaderCompositor\ShaderCompositor.cs,Composite,The length of the statement  "	return Composite (shaderName' material' dir' includeFile' keywordPrefix' properties' categoryBlock' lods' out filePath); " is 120.
Long Statement,EB.Rendering,ShaderCompositor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\ShaderCompositor\ShaderCompositor.cs,Composite,The length of the statement  "	if ((categoryBlock.SrcBlendMode == UnityEngine.Rendering.BlendMode.One) && (categoryBlock.DstBlendMode == UnityEngine.Rendering.BlendMode.Zero)) { " is 146.
Long Statement,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,Update,The length of the statement  "		UpdateSections (_Point1.transform.TransformPoint (_Offset1)' _Point2.transform.TransformPoint (_Offset2)' UnityEngine.Time.time - timeOffset); " is 142.
Long Statement,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,Update,The length of the statement  "		UpdateSections (_Point1.transform.position + _Offset1' _Point2.transform.position + _Offset2' UnityEngine.Time.time - timeOffset); " is 130.
Long Statement,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,InterpolateHermite,The length of the statement  "	return p1 * Vector4.Dot (s' _HermiteBasis [0]) + p2 * Vector4.Dot (s' _HermiteBasis [1]) + t1 * Vector4.Dot (s' _HermiteBasis [2]) + t2 * Vector4.Dot (s' _HermiteBasis [3]); " is 173.
Long Statement,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,DeterminantTop,The length of the statement  "	return m.m12 * m.m21 * m.m30 - m.m13 * m.m21 * m.m30 - m.m11 * m.m22 * m.m30 + m.m13 * m.m22 * m.m30 + m.m11 * m.m23 * m.m30 - m.m12 * m.m23 * m.m30 - m.m12 * m.m20 * m.m31 + m.m13 * m.m20 * m.m31 + m.m10 * m.m22 * m.m31 - m.m13 * m.m22 * m.m31 - m.m10 * m.m23 * m.m31 + m.m12 * m.m23 * m.m31 + m.m11 * m.m20 * m.m32 - m.m13 * m.m20 * m.m32 - m.m10 * m.m21 * m.m32 + m.m13 * m.m21 * m.m32 + m.m10 * m.m23 * m.m32 - m.m11 * m.m23 * m.m32 - m.m11 * m.m20 * m.m33 + m.m12 * m.m20 * m.m33 + m.m10 * m.m21 * m.m33 - m.m12 * m.m21 * m.m33 - m.m10 * m.m22 * m.m33 + m.m11 * m.m22 * m.m33; " is 581.
Long Statement,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,DeterminantBottom,The length of the statement  "	return -m.m13 * m.m21 * m.m30 + m.m13 * m.m22 * m.m30 + m.m11 * m.m23 * m.m30 - m.m12 * m.m23 * m.m30 + m.m13 * m.m20 * m.m31 + -m.m13 * m.m22 * m.m31 - m.m10 * m.m23 * m.m31 + m.m12 * m.m23 * m.m31 + -m.m13 * m.m20 * m.m32 + m.m13 * m.m21 * m.m32 + m.m10 * m.m23 * m.m32 - m.m11 * m.m23 * m.m32 - m.m11 * m.m20 * m.m33 + m.m12 * m.m20 * m.m33 + m.m10 * m.m21 * m.m33 - m.m12 * m.m21 * m.m33 - m.m10 * m.m22 * m.m33 + m.m11 * m.m22 * m.m33; " is 440.
Long Statement,Kabam,KabamSODA,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\KabamSODA\KabamSODA.cs,SODALogin,The length of the statement  "	Debug.Log ("Logging Player In To Kabam SODA.  Player Id: " + playerId + "' Player Certificate: " + playerCertificate + "' Locale: " + languageCode + "_" + countryCode); " is 168.
Long Statement,Kabam.SimpleJSON,JSONNode,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\KabamSODA\KabamSimpleJSON.cs,SaveToCompressedStream,The length of the statement  "	throw new Exception ("Can't use compressed functions. You need include the SharpZipLib and uncomment the define at the top of SimpleJSON"); " is 139.
Long Statement,Kabam.SimpleJSON,JSONNode,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\KabamSODA\KabamSimpleJSON.cs,SaveToCompressedFile,The length of the statement  "	throw new Exception ("Can't use compressed functions. You need include the SharpZipLib and uncomment the define at the top of SimpleJSON"); " is 139.
Long Statement,Kabam.SimpleJSON,JSONNode,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\KabamSODA\KabamSimpleJSON.cs,SaveToCompressedBase64,The length of the statement  "	throw new Exception ("Can't use compressed functions. You need include the SharpZipLib and uncomment the define at the top of SimpleJSON"); " is 139.
Long Statement,Kabam.SimpleJSON,JSONNode,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\KabamSODA\KabamSimpleJSON.cs,LoadFromCompressedFile,The length of the statement  "	throw new Exception ("Can't use compressed functions. You need include the SharpZipLib and uncomment the define at the top of SimpleJSON"); " is 139.
Long Statement,Kabam.SimpleJSON,JSONNode,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\KabamSODA\KabamSimpleJSON.cs,LoadFromCompressedStream,The length of the statement  "	throw new Exception ("Can't use compressed functions. You need include the SharpZipLib and uncomment the define at the top of SimpleJSON"); " is 139.
Long Statement,Kabam.SimpleJSON,JSONNode,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\KabamSODA\KabamSimpleJSON.cs,LoadFromCompressedBase64,The length of the statement  "	throw new Exception ("Can't use compressed functions. You need include the SharpZipLib and uncomment the define at the top of SimpleJSON"); " is 139.
Long Statement,Kabam.Soda.PlatformStrategies,Editor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\KabamSODA\PlatformStrategies\Editor.cs,Configure,The length of the statement  "	Debug.Log (string.Format ("SODA Configure:\n\tclientId: {0}\n\tmobileKey: {1}\n\twskeUrl: {2}\n\tunityVersion: {3}"' clientId' mobileKey' wskeUrl' unityVersion)); " is 162.
Long Statement,Kabam.Soda.PlatformStrategies,Editor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\KabamSODA\PlatformStrategies\Editor.cs,Login,The length of the statement  "	Debug.Log (string.Format ("SODA Login:\n\tplayerId: {0}\n\tplayerCertificate: {1}\n\tlanguageCode: {2}\n\tcountryCode: {3}"' playerId' playerCertificate' languageCode' countryCode)); " is 182.
Complex Conditional,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,nextToken,The conditional expression  "json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e'"  is complex.
Complex Conditional,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,nextToken,The conditional expression  "json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e'"  is complex.
Complex Conditional,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,nextToken,The conditional expression  "json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l'"  is complex.
Complex Conditional,EB,Dot,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreDot.cs,Colour,The conditional expression  "int.TryParse (parts [0]' out r) && int.TryParse (parts [1]' out g) && int.TryParse (parts [2]' out b) && float.TryParse (parts [3]' out a)"  is complex.
Complex Conditional,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,NextToken,The conditional expression  "json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e'"  is complex.
Complex Conditional,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,NextToken,The conditional expression  "json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e'"  is complex.
Complex Conditional,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,NextToken,The conditional expression  "json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l'"  is complex.
Complex Conditional,EB,QueryString,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreQueryString.cs,Escape,The conditional expression  "(c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9') || (c == '-') || (c == '_') || (c == '.') || (c == '!') || (c == '~') || (c == '*') || (c == '\'') || (c == '(') || (c == ')')"  is complex.
Complex Conditional,EB,Util,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUtil.cs,ColourFromString,The conditional expression  "int.TryParse (parts [0]' out r) && int.TryParse (parts [1]' out g) && int.TryParse (parts [2]' out b) && float.TryParse (parts [3]' out a)"  is complex.
Complex Conditional,EB.Sparx,AutoRefreshingManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxAutoRefreshingManager.cs,Update,The conditional expression  "(this.State == SubSystemState.Connected) && (this.NextRefresh >= 0) && (EB.Time.Now > this.NextRefresh) && (this.IsRefreshing == false)"  is complex.
Complex Conditional,EB.Sparx,LevelRewardsManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxLevelRewardsManager.cs,GetMilestoneRedeemerLevel,The conditional expression  "(m.category == category) && (m.redeemer.Type == redeemerType) && (m.redeemer.Data == dataType) && (m.redeemer.Quantity == quanity)"  is complex.
Complex Conditional,EB.Net,WebRequest,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetWebRequest.cs,ReturnClient,The conditional expression  "statusCode == 200 && client.Connected && GetResponseHeader ("Connection") != "close" && string.IsNullOrEmpty (_error)"  is complex.
Complex Conditional,EB.Replication,Manager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Replication\ReplicationManager.cs,SerializeViews,The conditional expression  "view.enabled && view.gameObject.activeSelf && view.observed != null && view.stateSynchronization != NetworkStateSynchronization.Off"  is complex.
Complex Conditional,EB.Sequence,Component,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sequence\Components\SequenceComponent.cs,FindLink,The conditional expression  "link.outId == outId && link.inId == inId && link.outName == outName && link.inName == inName"  is complex.
Complex Conditional,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,UVData,The conditional expression  "index == 2 || index == 3 || index == 4 || index == 5"  is complex.
Complex Conditional,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,UVData,The conditional expression  "index == 6 || index == 7 || index == 8 || index == 9"  is complex.
Complex Conditional,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,UpdateMesh,The conditional expression  "_TextureFlare && _MaterialFlare && _FlareQuality != eFLARE_QUALITY.Off && _MeshFilterFlare != null"  is complex.
Complex Conditional,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,Update,The conditional expression  "(!OnScreen (screenSunPos) || hit.collider == null || hit.collider != _camera.collider) && !hit.collider.isTrigger"  is complex.
Complex Conditional,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,OnScreen,The conditional expression  "screenSunPos.x < 0 || screenSunPos.x > Screen.width || screenSunPos.y < 0 || screenSunPos.y > Screen.height"  is complex.
Virtual Method Call from Constructor,EB.Director.Runtime,GroupInstance,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Director\Runtime\DirectorRuntime.cs,GroupInstance,The constructor "GroupInstance" calls a virtual method "SaveState".
Empty Catch Block,EB,AOT,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreAOT.cs,GetEnumerator,The method has an empty catch block.
Empty Catch Block,EB,AOT,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreAOT.cs,GetDictionaryEnumerator,The method has an empty catch block.
Empty Catch Block,EB,BugReport,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBugReport.cs,SendBugReport,The method has an empty catch block.
Empty Catch Block,EB,Cache,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreCache.cs,SaveToCache,The method has an empty catch block.
Empty Catch Block,EB,Debug,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreDebug.cs,Log,The method has an empty catch block.
Empty Catch Block,EB,Debug,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreDebug.cs,LogWarning,The method has an empty catch block.
Empty Catch Block,EB,Debug,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreDebug.cs,LogError,The method has an empty catch block.
Empty Catch Block,EB,ThreadPool,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreThreadPool.cs,_Thread,The method has an empty catch block.
Empty Catch Block,EB,ThreadPool,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreThreadPool.cs,Wakeup,The method has an empty catch block.
Empty Catch Block,EB.Director,Utils,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Director\DirectorUtils.cs,SetValue,The method has an empty catch block.
Empty Catch Block,EB.Sparx,FacebookAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxFacebookAPI.cs,_Graph,The method has an empty catch block.
Empty Catch Block,EB.Sparx,GameManagerAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxGameManagerAPI.cs,PingMasterServer,The method has an empty catch block.
Empty Catch Block,EB.Sparx,ChatManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxChatManager.cs,_OnJoin,The method has an empty catch block.
Empty Catch Block,EB.Sparx,FacebookManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxFacebookManager.cs,InitializeSDK,The method has an empty catch block.
Empty Catch Block,EB.Sparx,NetworkNull,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\GameManager\SparxNetworkNull.cs,SendTo,The method has an empty catch block.
Empty Catch Block,EB.Sparx,EndPoint,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\SparxEndPoint.cs,Dispose,The method has an empty catch block.
Empty Catch Block,EB.Sparx,Discovery,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Util\SparxDiscovery.cs,Recieve,The method has an empty catch block.
Empty Catch Block,EB.Sparx,QosProbe,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Util\SparxQoSProbe.cs,Dispose,The method has an empty catch block.
Empty Catch Block,EB.Sparx,QosProbe,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Util\SparxQoSProbe.cs,_Send,The method has an empty catch block.
Empty Catch Block,EB.Net,TcpClientBouncy,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\Clients\NetTcpClientBouncy.cs,Close,The method has an empty catch block.
Empty Catch Block,EB.Net,TcpClientMono,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\Clients\NetTcpClientMono.cs,Close,The method has an empty catch block.
Empty Catch Block,EB.Net,TcpClientMono,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\Clients\NetTcpClientMono.cs,Close,The method has an empty catch block.
Empty Catch Block,EB.Net,WebRequest,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetWebRequest.cs,ReturnClient,The method has an empty catch block.
Empty Catch Block,EB.Sequence.Serialization,Node,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sequence\Serialization\SequenceSerialization.cs,GetPropertyAttribute,The method has an empty catch block.
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,getLastErrorSnippet,The following statement contains a magic number: if (MiniJSON.lastErrorIndex == -1) {  	return "";  }  else {  	int startIndex = MiniJSON.lastErrorIndex - 5;  	int endIndex = MiniJSON.lastErrorIndex + 15;  	if (startIndex < 0)  		startIndex = 0;  	if (endIndex >= MiniJSON.lastDecode.Length)  		endIndex = MiniJSON.lastDecode.Length - 1;  	return MiniJSON.lastDecode.Substring (startIndex' endIndex - startIndex + 1);  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,getLastErrorSnippet,The following statement contains a magic number: if (MiniJSON.lastErrorIndex == -1) {  	return "";  }  else {  	int startIndex = MiniJSON.lastErrorIndex - 5;  	int endIndex = MiniJSON.lastErrorIndex + 15;  	if (startIndex < 0)  		startIndex = 0;  	if (endIndex >= MiniJSON.lastDecode.Length)  		endIndex = MiniJSON.lastDecode.Length - 1;  	return MiniJSON.lastDecode.Substring (startIndex' endIndex - startIndex + 1);  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: while (!complete) {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"') {  		complete = true;  		break;  	}  	else if (c == '\\') {  		if (index == json.Length)  			break;  		c = json [index++];  		if (c == '"') {  			s += '"';  		}  		else if (c == '\\') {  			s += '\\';  		}  		else if (c == '/') {  			s += '/';  		}  		else if (c == 'b') {  			s += '\b';  		}  		else if (c == 'f') {  			s += '\f';  		}  		else if (c == 'n') {  			s += '\n';  		}  		else if (c == 'r') {  			s += '\r';  		}  		else if (c == 't') {  			s += '\t';  		}  		else if (c == 'u') {  			int remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				char[] unicodeCharArray = new char[4];  				Array.Copy (json' index' unicodeCharArray' 0' 4);  				uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  				// convert the integer codepoint to a unicode char and add to string  				s += Char.ConvertFromUtf32 ((int)codePoint);  				// skip 4 chars  				index += 4;  			}  			else {  				break;  			}  		}  	}  	else {  		s += c;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: while (!complete) {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"') {  		complete = true;  		break;  	}  	else if (c == '\\') {  		if (index == json.Length)  			break;  		c = json [index++];  		if (c == '"') {  			s += '"';  		}  		else if (c == '\\') {  			s += '\\';  		}  		else if (c == '/') {  			s += '/';  		}  		else if (c == 'b') {  			s += '\b';  		}  		else if (c == 'f') {  			s += '\f';  		}  		else if (c == 'n') {  			s += '\n';  		}  		else if (c == 'r') {  			s += '\r';  		}  		else if (c == 't') {  			s += '\t';  		}  		else if (c == 'u') {  			int remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				char[] unicodeCharArray = new char[4];  				Array.Copy (json' index' unicodeCharArray' 0' 4);  				uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  				// convert the integer codepoint to a unicode char and add to string  				s += Char.ConvertFromUtf32 ((int)codePoint);  				// skip 4 chars  				index += 4;  			}  			else {  				break;  			}  		}  	}  	else {  		s += c;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: while (!complete) {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"') {  		complete = true;  		break;  	}  	else if (c == '\\') {  		if (index == json.Length)  			break;  		c = json [index++];  		if (c == '"') {  			s += '"';  		}  		else if (c == '\\') {  			s += '\\';  		}  		else if (c == '/') {  			s += '/';  		}  		else if (c == 'b') {  			s += '\b';  		}  		else if (c == 'f') {  			s += '\f';  		}  		else if (c == 'n') {  			s += '\n';  		}  		else if (c == 'r') {  			s += '\r';  		}  		else if (c == 't') {  			s += '\t';  		}  		else if (c == 'u') {  			int remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				char[] unicodeCharArray = new char[4];  				Array.Copy (json' index' unicodeCharArray' 0' 4);  				uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  				// convert the integer codepoint to a unicode char and add to string  				s += Char.ConvertFromUtf32 ((int)codePoint);  				// skip 4 chars  				index += 4;  			}  			else {  				break;  			}  		}  	}  	else {  		s += c;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: while (!complete) {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"') {  		complete = true;  		break;  	}  	else if (c == '\\') {  		if (index == json.Length)  			break;  		c = json [index++];  		if (c == '"') {  			s += '"';  		}  		else if (c == '\\') {  			s += '\\';  		}  		else if (c == '/') {  			s += '/';  		}  		else if (c == 'b') {  			s += '\b';  		}  		else if (c == 'f') {  			s += '\f';  		}  		else if (c == 'n') {  			s += '\n';  		}  		else if (c == 'r') {  			s += '\r';  		}  		else if (c == 't') {  			s += '\t';  		}  		else if (c == 'u') {  			int remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				char[] unicodeCharArray = new char[4];  				Array.Copy (json' index' unicodeCharArray' 0' 4);  				uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  				// convert the integer codepoint to a unicode char and add to string  				s += Char.ConvertFromUtf32 ((int)codePoint);  				// skip 4 chars  				index += 4;  			}  			else {  				break;  			}  		}  	}  	else {  		s += c;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == '"') {  	complete = true;  	break;  }  else if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"') {  		s += '"';  	}  	else if (c == '\\') {  		s += '\\';  	}  	else if (c == '/') {  		s += '/';  	}  	else if (c == 'b') {  		s += '\b';  	}  	else if (c == 'f') {  		s += '\f';  	}  	else if (c == 'n') {  		s += '\n';  	}  	else if (c == 'r') {  		s += '\r';  	}  	else if (c == 't') {  		s += '\t';  	}  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			char[] unicodeCharArray = new char[4];  			Array.Copy (json' index' unicodeCharArray' 0' 4);  			uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  			// convert the integer codepoint to a unicode char and add to string  			s += Char.ConvertFromUtf32 ((int)codePoint);  			// skip 4 chars  			index += 4;  		}  		else {  			break;  		}  	}  }  else {  	s += c;  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == '"') {  	complete = true;  	break;  }  else if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"') {  		s += '"';  	}  	else if (c == '\\') {  		s += '\\';  	}  	else if (c == '/') {  		s += '/';  	}  	else if (c == 'b') {  		s += '\b';  	}  	else if (c == 'f') {  		s += '\f';  	}  	else if (c == 'n') {  		s += '\n';  	}  	else if (c == 'r') {  		s += '\r';  	}  	else if (c == 't') {  		s += '\t';  	}  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			char[] unicodeCharArray = new char[4];  			Array.Copy (json' index' unicodeCharArray' 0' 4);  			uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  			// convert the integer codepoint to a unicode char and add to string  			s += Char.ConvertFromUtf32 ((int)codePoint);  			// skip 4 chars  			index += 4;  		}  		else {  			break;  		}  	}  }  else {  	s += c;  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == '"') {  	complete = true;  	break;  }  else if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"') {  		s += '"';  	}  	else if (c == '\\') {  		s += '\\';  	}  	else if (c == '/') {  		s += '/';  	}  	else if (c == 'b') {  		s += '\b';  	}  	else if (c == 'f') {  		s += '\f';  	}  	else if (c == 'n') {  		s += '\n';  	}  	else if (c == 'r') {  		s += '\r';  	}  	else if (c == 't') {  		s += '\t';  	}  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			char[] unicodeCharArray = new char[4];  			Array.Copy (json' index' unicodeCharArray' 0' 4);  			uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  			// convert the integer codepoint to a unicode char and add to string  			s += Char.ConvertFromUtf32 ((int)codePoint);  			// skip 4 chars  			index += 4;  		}  		else {  			break;  		}  	}  }  else {  	s += c;  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == '"') {  	complete = true;  	break;  }  else if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"') {  		s += '"';  	}  	else if (c == '\\') {  		s += '\\';  	}  	else if (c == '/') {  		s += '/';  	}  	else if (c == 'b') {  		s += '\b';  	}  	else if (c == 'f') {  		s += '\f';  	}  	else if (c == 'n') {  		s += '\n';  	}  	else if (c == 'r') {  		s += '\r';  	}  	else if (c == 't') {  		s += '\t';  	}  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			char[] unicodeCharArray = new char[4];  			Array.Copy (json' index' unicodeCharArray' 0' 4);  			uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  			// convert the integer codepoint to a unicode char and add to string  			s += Char.ConvertFromUtf32 ((int)codePoint);  			// skip 4 chars  			index += 4;  		}  		else {  			break;  		}  	}  }  else {  	s += c;  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"') {  		s += '"';  	}  	else if (c == '\\') {  		s += '\\';  	}  	else if (c == '/') {  		s += '/';  	}  	else if (c == 'b') {  		s += '\b';  	}  	else if (c == 'f') {  		s += '\f';  	}  	else if (c == 'n') {  		s += '\n';  	}  	else if (c == 'r') {  		s += '\r';  	}  	else if (c == 't') {  		s += '\t';  	}  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			char[] unicodeCharArray = new char[4];  			Array.Copy (json' index' unicodeCharArray' 0' 4);  			uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  			// convert the integer codepoint to a unicode char and add to string  			s += Char.ConvertFromUtf32 ((int)codePoint);  			// skip 4 chars  			index += 4;  		}  		else {  			break;  		}  	}  }  else {  	s += c;  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"') {  		s += '"';  	}  	else if (c == '\\') {  		s += '\\';  	}  	else if (c == '/') {  		s += '/';  	}  	else if (c == 'b') {  		s += '\b';  	}  	else if (c == 'f') {  		s += '\f';  	}  	else if (c == 'n') {  		s += '\n';  	}  	else if (c == 'r') {  		s += '\r';  	}  	else if (c == 't') {  		s += '\t';  	}  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			char[] unicodeCharArray = new char[4];  			Array.Copy (json' index' unicodeCharArray' 0' 4);  			uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  			// convert the integer codepoint to a unicode char and add to string  			s += Char.ConvertFromUtf32 ((int)codePoint);  			// skip 4 chars  			index += 4;  		}  		else {  			break;  		}  	}  }  else {  	s += c;  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"') {  		s += '"';  	}  	else if (c == '\\') {  		s += '\\';  	}  	else if (c == '/') {  		s += '/';  	}  	else if (c == 'b') {  		s += '\b';  	}  	else if (c == 'f') {  		s += '\f';  	}  	else if (c == 'n') {  		s += '\n';  	}  	else if (c == 'r') {  		s += '\r';  	}  	else if (c == 't') {  		s += '\t';  	}  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			char[] unicodeCharArray = new char[4];  			Array.Copy (json' index' unicodeCharArray' 0' 4);  			uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  			// convert the integer codepoint to a unicode char and add to string  			s += Char.ConvertFromUtf32 ((int)codePoint);  			// skip 4 chars  			index += 4;  		}  		else {  			break;  		}  	}  }  else {  	s += c;  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"') {  		s += '"';  	}  	else if (c == '\\') {  		s += '\\';  	}  	else if (c == '/') {  		s += '/';  	}  	else if (c == 'b') {  		s += '\b';  	}  	else if (c == 'f') {  		s += '\f';  	}  	else if (c == 'n') {  		s += '\n';  	}  	else if (c == 'r') {  		s += '\r';  	}  	else if (c == 't') {  		s += '\t';  	}  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			char[] unicodeCharArray = new char[4];  			Array.Copy (json' index' unicodeCharArray' 0' 4);  			uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  			// convert the integer codepoint to a unicode char and add to string  			s += Char.ConvertFromUtf32 ((int)codePoint);  			// skip 4 chars  			index += 4;  		}  		else {  			break;  		}  	}  }  else {  	s += c;  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == '"') {  	s += '"';  }  else if (c == '\\') {  	s += '\\';  }  else if (c == '/') {  	s += '/';  }  else if (c == 'b') {  	s += '\b';  }  else if (c == 'f') {  	s += '\f';  }  else if (c == 'n') {  	s += '\n';  }  else if (c == 'r') {  	s += '\r';  }  else if (c == 't') {  	s += '\t';  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == '"') {  	s += '"';  }  else if (c == '\\') {  	s += '\\';  }  else if (c == '/') {  	s += '/';  }  else if (c == 'b') {  	s += '\b';  }  else if (c == 'f') {  	s += '\f';  }  else if (c == 'n') {  	s += '\n';  }  else if (c == 'r') {  	s += '\r';  }  else if (c == 't') {  	s += '\t';  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == '"') {  	s += '"';  }  else if (c == '\\') {  	s += '\\';  }  else if (c == '/') {  	s += '/';  }  else if (c == 'b') {  	s += '\b';  }  else if (c == 'f') {  	s += '\f';  }  else if (c == 'n') {  	s += '\n';  }  else if (c == 'r') {  	s += '\r';  }  else if (c == 't') {  	s += '\t';  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == '"') {  	s += '"';  }  else if (c == '\\') {  	s += '\\';  }  else if (c == '/') {  	s += '/';  }  else if (c == 'b') {  	s += '\b';  }  else if (c == 'f') {  	s += '\f';  }  else if (c == 'n') {  	s += '\n';  }  else if (c == 'r') {  	s += '\r';  }  else if (c == 't') {  	s += '\t';  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == '\\') {  	s += '\\';  }  else if (c == '/') {  	s += '/';  }  else if (c == 'b') {  	s += '\b';  }  else if (c == 'f') {  	s += '\f';  }  else if (c == 'n') {  	s += '\n';  }  else if (c == 'r') {  	s += '\r';  }  else if (c == 't') {  	s += '\t';  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == '\\') {  	s += '\\';  }  else if (c == '/') {  	s += '/';  }  else if (c == 'b') {  	s += '\b';  }  else if (c == 'f') {  	s += '\f';  }  else if (c == 'n') {  	s += '\n';  }  else if (c == 'r') {  	s += '\r';  }  else if (c == 't') {  	s += '\t';  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == '\\') {  	s += '\\';  }  else if (c == '/') {  	s += '/';  }  else if (c == 'b') {  	s += '\b';  }  else if (c == 'f') {  	s += '\f';  }  else if (c == 'n') {  	s += '\n';  }  else if (c == 'r') {  	s += '\r';  }  else if (c == 't') {  	s += '\t';  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == '\\') {  	s += '\\';  }  else if (c == '/') {  	s += '/';  }  else if (c == 'b') {  	s += '\b';  }  else if (c == 'f') {  	s += '\f';  }  else if (c == 'n') {  	s += '\n';  }  else if (c == 'r') {  	s += '\r';  }  else if (c == 't') {  	s += '\t';  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == '/') {  	s += '/';  }  else if (c == 'b') {  	s += '\b';  }  else if (c == 'f') {  	s += '\f';  }  else if (c == 'n') {  	s += '\n';  }  else if (c == 'r') {  	s += '\r';  }  else if (c == 't') {  	s += '\t';  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == '/') {  	s += '/';  }  else if (c == 'b') {  	s += '\b';  }  else if (c == 'f') {  	s += '\f';  }  else if (c == 'n') {  	s += '\n';  }  else if (c == 'r') {  	s += '\r';  }  else if (c == 't') {  	s += '\t';  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == '/') {  	s += '/';  }  else if (c == 'b') {  	s += '\b';  }  else if (c == 'f') {  	s += '\f';  }  else if (c == 'n') {  	s += '\n';  }  else if (c == 'r') {  	s += '\r';  }  else if (c == 't') {  	s += '\t';  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == '/') {  	s += '/';  }  else if (c == 'b') {  	s += '\b';  }  else if (c == 'f') {  	s += '\f';  }  else if (c == 'n') {  	s += '\n';  }  else if (c == 'r') {  	s += '\r';  }  else if (c == 't') {  	s += '\t';  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == 'b') {  	s += '\b';  }  else if (c == 'f') {  	s += '\f';  }  else if (c == 'n') {  	s += '\n';  }  else if (c == 'r') {  	s += '\r';  }  else if (c == 't') {  	s += '\t';  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == 'b') {  	s += '\b';  }  else if (c == 'f') {  	s += '\f';  }  else if (c == 'n') {  	s += '\n';  }  else if (c == 'r') {  	s += '\r';  }  else if (c == 't') {  	s += '\t';  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == 'b') {  	s += '\b';  }  else if (c == 'f') {  	s += '\f';  }  else if (c == 'n') {  	s += '\n';  }  else if (c == 'r') {  	s += '\r';  }  else if (c == 't') {  	s += '\t';  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == 'b') {  	s += '\b';  }  else if (c == 'f') {  	s += '\f';  }  else if (c == 'n') {  	s += '\n';  }  else if (c == 'r') {  	s += '\r';  }  else if (c == 't') {  	s += '\t';  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == 'f') {  	s += '\f';  }  else if (c == 'n') {  	s += '\n';  }  else if (c == 'r') {  	s += '\r';  }  else if (c == 't') {  	s += '\t';  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == 'f') {  	s += '\f';  }  else if (c == 'n') {  	s += '\n';  }  else if (c == 'r') {  	s += '\r';  }  else if (c == 't') {  	s += '\t';  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == 'f') {  	s += '\f';  }  else if (c == 'n') {  	s += '\n';  }  else if (c == 'r') {  	s += '\r';  }  else if (c == 't') {  	s += '\t';  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == 'f') {  	s += '\f';  }  else if (c == 'n') {  	s += '\n';  }  else if (c == 'r') {  	s += '\r';  }  else if (c == 't') {  	s += '\t';  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == 'n') {  	s += '\n';  }  else if (c == 'r') {  	s += '\r';  }  else if (c == 't') {  	s += '\t';  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == 'n') {  	s += '\n';  }  else if (c == 'r') {  	s += '\r';  }  else if (c == 't') {  	s += '\t';  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == 'n') {  	s += '\n';  }  else if (c == 'r') {  	s += '\r';  }  else if (c == 't') {  	s += '\t';  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == 'n') {  	s += '\n';  }  else if (c == 'r') {  	s += '\r';  }  else if (c == 't') {  	s += '\t';  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == 'r') {  	s += '\r';  }  else if (c == 't') {  	s += '\t';  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == 'r') {  	s += '\r';  }  else if (c == 't') {  	s += '\t';  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == 'r') {  	s += '\r';  }  else if (c == 't') {  	s += '\t';  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == 'r') {  	s += '\r';  }  else if (c == 't') {  	s += '\t';  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == 't') {  	s += '\t';  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == 't') {  	s += '\t';  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == 't') {  	s += '\t';  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == 't') {  	s += '\t';  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		char[] unicodeCharArray = new char[4];  		Array.Copy (json' index' unicodeCharArray' 0' 4);  		uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  		// convert the integer codepoint to a unicode char and add to string  		s += Char.ConvertFromUtf32 ((int)codePoint);  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (remainingLength >= 4) {  	char[] unicodeCharArray = new char[4];  	Array.Copy (json' index' unicodeCharArray' 0' 4);  	uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  	// convert the integer codepoint to a unicode char and add to string  	s += Char.ConvertFromUtf32 ((int)codePoint);  	// skip 4 chars  	index += 4;  }  else {  	break;  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (remainingLength >= 4) {  	char[] unicodeCharArray = new char[4];  	Array.Copy (json' index' unicodeCharArray' 0' 4);  	uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  	// convert the integer codepoint to a unicode char and add to string  	s += Char.ConvertFromUtf32 ((int)codePoint);  	// skip 4 chars  	index += 4;  }  else {  	break;  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (remainingLength >= 4) {  	char[] unicodeCharArray = new char[4];  	Array.Copy (json' index' unicodeCharArray' 0' 4);  	uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  	// convert the integer codepoint to a unicode char and add to string  	s += Char.ConvertFromUtf32 ((int)codePoint);  	// skip 4 chars  	index += 4;  }  else {  	break;  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: if (remainingLength >= 4) {  	char[] unicodeCharArray = new char[4];  	Array.Copy (json' index' unicodeCharArray' 0' 4);  	uint codePoint = UInt32.Parse (new string (unicodeCharArray)' System.Globalization.NumberStyles.HexNumber);  	// convert the integer codepoint to a unicode char and add to string  	s += Char.ConvertFromUtf32 ((int)codePoint);  	// skip 4 chars  	index += 4;  }  else {  	break;  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: Array.Copy (json' index' unicodeCharArray' 0' 4);  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseString,The following statement contains a magic number: index += 4;  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,nextToken,The following statement contains a magic number: if (remainingLength >= 5) {  	if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  		index += 5;  		return MiniJSON.TOKEN_FALSE;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,nextToken,The following statement contains a magic number: if (remainingLength >= 5) {  	if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  		index += 5;  		return MiniJSON.TOKEN_FALSE;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,nextToken,The following statement contains a magic number: if (remainingLength >= 5) {  	if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  		index += 5;  		return MiniJSON.TOKEN_FALSE;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,nextToken,The following statement contains a magic number: if (remainingLength >= 5) {  	if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  		index += 5;  		return MiniJSON.TOKEN_FALSE;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,nextToken,The following statement contains a magic number: if (remainingLength >= 5) {  	if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  		index += 5;  		return MiniJSON.TOKEN_FALSE;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,nextToken,The following statement contains a magic number: if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  	index += 5;  	return MiniJSON.TOKEN_FALSE;  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,nextToken,The following statement contains a magic number: if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  	index += 5;  	return MiniJSON.TOKEN_FALSE;  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,nextToken,The following statement contains a magic number: if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  	index += 5;  	return MiniJSON.TOKEN_FALSE;  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,nextToken,The following statement contains a magic number: if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  	index += 5;  	return MiniJSON.TOKEN_FALSE;  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,nextToken,The following statement contains a magic number: index += 5;  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,nextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  		index += 4;  		return MiniJSON.TOKEN_TRUE;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,nextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  		index += 4;  		return MiniJSON.TOKEN_TRUE;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,nextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  		index += 4;  		return MiniJSON.TOKEN_TRUE;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,nextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  		index += 4;  		return MiniJSON.TOKEN_TRUE;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,nextToken,The following statement contains a magic number: if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  	index += 4;  	return MiniJSON.TOKEN_TRUE;  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,nextToken,The following statement contains a magic number: if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  	index += 4;  	return MiniJSON.TOKEN_TRUE;  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,nextToken,The following statement contains a magic number: if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  	index += 4;  	return MiniJSON.TOKEN_TRUE;  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,nextToken,The following statement contains a magic number: index += 4;  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,nextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  		index += 4;  		return MiniJSON.TOKEN_NULL;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,nextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  		index += 4;  		return MiniJSON.TOKEN_NULL;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,nextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  		index += 4;  		return MiniJSON.TOKEN_NULL;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,nextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  		index += 4;  		return MiniJSON.TOKEN_NULL;  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,nextToken,The following statement contains a magic number: if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  	index += 4;  	return MiniJSON.TOKEN_NULL;  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,nextToken,The following statement contains a magic number: if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  	index += 4;  	return MiniJSON.TOKEN_NULL;  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,nextToken,The following statement contains a magic number: if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  	index += 4;  	return MiniJSON.TOKEN_NULL;  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,nextToken,The following statement contains a magic number: index += 4;  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: for (int i = 0; i < charArray.Length; i++) {  	char c = charArray [i];  	if (c == '"') {  		builder.Append ("\\\"");  	}  	else if (c == '\\') {  		builder.Append ("\\\\");  	}  	else if (c == '\b') {  		builder.Append ("\\b");  	}  	else if (c == '\f') {  		builder.Append ("\\f");  	}  	else if (c == '\n') {  		builder.Append ("\\n");  	}  	else if (c == '\r') {  		builder.Append ("\\r");  	}  	else if (c == '\t') {  		builder.Append ("\\t");  	}  	else {  		int codepoint = Convert.ToInt32 (c);  		if ((codepoint >= 32) && (codepoint <= 126)) {  			builder.Append (c);  		}  		else {  			builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  		}  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: for (int i = 0; i < charArray.Length; i++) {  	char c = charArray [i];  	if (c == '"') {  		builder.Append ("\\\"");  	}  	else if (c == '\\') {  		builder.Append ("\\\\");  	}  	else if (c == '\b') {  		builder.Append ("\\b");  	}  	else if (c == '\f') {  		builder.Append ("\\f");  	}  	else if (c == '\n') {  		builder.Append ("\\n");  	}  	else if (c == '\r') {  		builder.Append ("\\r");  	}  	else if (c == '\t') {  		builder.Append ("\\t");  	}  	else {  		int codepoint = Convert.ToInt32 (c);  		if ((codepoint >= 32) && (codepoint <= 126)) {  			builder.Append (c);  		}  		else {  			builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  		}  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: for (int i = 0; i < charArray.Length; i++) {  	char c = charArray [i];  	if (c == '"') {  		builder.Append ("\\\"");  	}  	else if (c == '\\') {  		builder.Append ("\\\\");  	}  	else if (c == '\b') {  		builder.Append ("\\b");  	}  	else if (c == '\f') {  		builder.Append ("\\f");  	}  	else if (c == '\n') {  		builder.Append ("\\n");  	}  	else if (c == '\r') {  		builder.Append ("\\r");  	}  	else if (c == '\t') {  		builder.Append ("\\t");  	}  	else {  		int codepoint = Convert.ToInt32 (c);  		if ((codepoint >= 32) && (codepoint <= 126)) {  			builder.Append (c);  		}  		else {  			builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  		}  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: for (int i = 0; i < charArray.Length; i++) {  	char c = charArray [i];  	if (c == '"') {  		builder.Append ("\\\"");  	}  	else if (c == '\\') {  		builder.Append ("\\\\");  	}  	else if (c == '\b') {  		builder.Append ("\\b");  	}  	else if (c == '\f') {  		builder.Append ("\\f");  	}  	else if (c == '\n') {  		builder.Append ("\\n");  	}  	else if (c == '\r') {  		builder.Append ("\\r");  	}  	else if (c == '\t') {  		builder.Append ("\\t");  	}  	else {  		int codepoint = Convert.ToInt32 (c);  		if ((codepoint >= 32) && (codepoint <= 126)) {  			builder.Append (c);  		}  		else {  			builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  		}  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: if (c == '"') {  	builder.Append ("\\\"");  }  else if (c == '\\') {  	builder.Append ("\\\\");  }  else if (c == '\b') {  	builder.Append ("\\b");  }  else if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: if (c == '"') {  	builder.Append ("\\\"");  }  else if (c == '\\') {  	builder.Append ("\\\\");  }  else if (c == '\b') {  	builder.Append ("\\b");  }  else if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: if (c == '"') {  	builder.Append ("\\\"");  }  else if (c == '\\') {  	builder.Append ("\\\\");  }  else if (c == '\b') {  	builder.Append ("\\b");  }  else if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: if (c == '"') {  	builder.Append ("\\\"");  }  else if (c == '\\') {  	builder.Append ("\\\\");  }  else if (c == '\b') {  	builder.Append ("\\b");  }  else if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: if (c == '\\') {  	builder.Append ("\\\\");  }  else if (c == '\b') {  	builder.Append ("\\b");  }  else if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: if (c == '\\') {  	builder.Append ("\\\\");  }  else if (c == '\b') {  	builder.Append ("\\b");  }  else if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: if (c == '\\') {  	builder.Append ("\\\\");  }  else if (c == '\b') {  	builder.Append ("\\b");  }  else if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: if (c == '\\') {  	builder.Append ("\\\\");  }  else if (c == '\b') {  	builder.Append ("\\b");  }  else if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: if (c == '\b') {  	builder.Append ("\\b");  }  else if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: if (c == '\b') {  	builder.Append ("\\b");  }  else if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: if (c == '\b') {  	builder.Append ("\\b");  }  else if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: if (c == '\b') {  	builder.Append ("\\b");  }  else if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: if ((codepoint >= 32) && (codepoint <= 126)) {  	builder.Append (c);  }  else {  	builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: if ((codepoint >= 32) && (codepoint <= 126)) {  	builder.Append (c);  }  else {  	builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: if ((codepoint >= 32) && (codepoint <= 126)) {  	builder.Append (c);  }  else {  	builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: if ((codepoint >= 32) && (codepoint <= 126)) {  	builder.Append (c);  }  else {  	builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  }  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  
Magic Number,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,serializeString,The following statement contains a magic number: builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  
Magic Number,Facebook,AndroidFacebook,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Facebook\AndroidFacebook.cs,FromTimestamp,The following statement contains a magic number: return new DateTime (1970' 1' 1' 0' 0' 0' 0).AddSeconds (timestamp);  
Magic Number,Facebook,IOSFacebook,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Facebook\IOSFacebook.cs,FromTimestamp,The following statement contains a magic number: return new DateTime (1970' 1' 1' 0' 0' 0' 0).AddSeconds (timestamp);  
Magic Number,EB,Assets,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreAssets.cs,DoReadBuildConfig,The following statement contains a magic number: if (!UnityEngine.Debug.isDebugBuild) {  	_currentBundleMode = DevBundleType.NoBundles;  	_bundleCacheServerAddress = "";  }  else {  	string path = Path.Combine (Loader.DataPath' "BuildConfig.txt");  	#if UNITY_EDITOR  	if (UnityEditor.EditorApplication.isPlaying) {  		path = Path.Combine (Loader.DataPath' "../BuildConfig.txt");  	}  	#endif  	EB.Debug.Log ("Loading buildconfig from " + path);  	#if UNITY_IOS  					// Using www didn't seem to work for IOS when we call it w/ the MoveNext() method in ReadBuildConfig 				string urlMatcher = "://"; 				int urlIndex = path.IndexOf(urlMatcher); 				if (urlIndex != -1) 				{ 					path = path.Substring(urlIndex + urlMatcher.Length); 				} 				 				string text = null; 				if (File.Exists(path)) 				{ 					text = File.ReadAllText(path);	 				} 				else 				{ 					EB.Debug.LogError("Didn't find BuildConfig.txt!"); 				} 				yield return 1; // needed to satisfy IEnumerator method signature #else  	WWW textAssetLoader = new WWW (path);  	int count = 0;  	while (!textAssetLoader.isDone && string.IsNullOrEmpty (textAssetLoader.error)) {  		count++;  		if (count > 100) {  			EB.Debug.LogError ("***** FAILED TO READ BuildConfig.txt *****");  		}  		yield return textAssetLoader;  	}  	string text = null;  	if (!string.IsNullOrEmpty (textAssetLoader.error)) {  		EB.Debug.LogError ("Error loading build config.txt");  	}  	else {  		text = textAssetLoader.text;  	}  	#endif  	EB.Debug.Log ("FINISHED Loading buildconfig from " + path);  	if (!string.IsNullOrEmpty (text)) {  		Hashtable bcConfig = (Hashtable)EB.JSON.Parse (text);  		_currentBundleMode = (DevBundleType)EB.Dot.Integer ("BundleMode"' bcConfig' (int)DevBundleType.NoBundles);  		if (UnityEngine.Debug.isDebugBuild && (_currentBundleMode == DevBundleType.BundleServer)) {  			_bundleCacheServerAddress = EB.Dot.String ("BundleServerAddress"' bcConfig' "");  		}  		else {  			_bundleCacheServerAddress = "";  		}  	}  	else {  		Debug.LogWarning ("Wasn't able to read bundle mode. Defaulting to NoBundles' No BundleServerAddress");  		_currentBundleMode = DevBundleType.NoBundles;  		_bundleCacheServerAddress = "";  	}  	#if UNITY_EDITOR  	if (_currentBundleMode == DevBundleType.BundleServer) {  		_currentBundleMode = DevBundleType.StandardBundles;  	}  	#endif  	EB.Debug.Log ("Current bundlemode: " + _currentBundleMode.ToString ());  }  
Magic Number,EB,Assets,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreAssets.cs,DoReadBuildConfig,The following statement contains a magic number: while (!textAssetLoader.isDone && string.IsNullOrEmpty (textAssetLoader.error)) {  	count++;  	if (count > 100) {  		EB.Debug.LogError ("***** FAILED TO READ BuildConfig.txt *****");  	}  	yield return textAssetLoader;  }  
Magic Number,EB,Assets,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreAssets.cs,DoReadBuildConfig,The following statement contains a magic number: if (count > 100) {  	EB.Debug.LogError ("***** FAILED TO READ BuildConfig.txt *****");  }  
Magic Number,EB,Assets,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreAssets.cs,GetWWW,The following statement contains a magic number: if (_www.TryGetValue (info.id' out www)) {  	if (www.isDone) {  		if (www.error != null) {  			// there was a error  			EB.Debug.LogError ("WWW error: " + www.error);  			// don't use the cache anymore  			info.retry++;  			www.Dispose ();  			www = null;  			if (info.retry == 5) {  				// give up  				FatalLoadError (info);  			}  		}  	}  }  
Magic Number,EB,Assets,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreAssets.cs,GetWWW,The following statement contains a magic number: if (www.isDone) {  	if (www.error != null) {  		// there was a error  		EB.Debug.LogError ("WWW error: " + www.error);  		// don't use the cache anymore  		info.retry++;  		www.Dispose ();  		www = null;  		if (info.retry == 5) {  			// give up  			FatalLoadError (info);  		}  	}  }  
Magic Number,EB,Assets,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreAssets.cs,GetWWW,The following statement contains a magic number: if (www.error != null) {  	// there was a error  	EB.Debug.LogError ("WWW error: " + www.error);  	// don't use the cache anymore  	info.retry++;  	www.Dispose ();  	www = null;  	if (info.retry == 5) {  		// give up  		FatalLoadError (info);  	}  }  
Magic Number,EB,Assets,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreAssets.cs,GetWWW,The following statement contains a magic number: if (info.retry == 5) {  	// give up  	FatalLoadError (info);  }  
Magic Number,EB,BitStream,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBitStream.cs,Serialize,The following statement contains a magic number: if (isReading) {  	if (_bitIndex == -1) {  		_bitIndex = _buffer.Length;  		_buffer.ReadByte ();  		_bitShift = 0;  	}  	var b = _buffer [_bitIndex];  	var m = 1 << _bitShift;  	data = (b & m) != 0;  	_bitShift++;  	if (_bitShift == 8) {  		_bitIndex = -1;  	}  }  else {  	// see if we can use the current bit  	if (_bitIndex == -1) {  		_bitIndex = _buffer.Length;  		_buffer.WriteByte (0);  		_bitShift = 0;  	}  	var b = _buffer [_bitIndex];  	if (data) {  		b |= (byte)(1 << _bitShift);  	}  	_buffer [_bitIndex] = b;  	_bitShift++;  	if (_bitShift == 8) {  		//Debug.Log("wrapping bit mask");  		_bitIndex = -1;  	}  }  
Magic Number,EB,BitStream,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBitStream.cs,Serialize,The following statement contains a magic number: if (isReading) {  	if (_bitIndex == -1) {  		_bitIndex = _buffer.Length;  		_buffer.ReadByte ();  		_bitShift = 0;  	}  	var b = _buffer [_bitIndex];  	var m = 1 << _bitShift;  	data = (b & m) != 0;  	_bitShift++;  	if (_bitShift == 8) {  		_bitIndex = -1;  	}  }  else {  	// see if we can use the current bit  	if (_bitIndex == -1) {  		_bitIndex = _buffer.Length;  		_buffer.WriteByte (0);  		_bitShift = 0;  	}  	var b = _buffer [_bitIndex];  	if (data) {  		b |= (byte)(1 << _bitShift);  	}  	_buffer [_bitIndex] = b;  	_bitShift++;  	if (_bitShift == 8) {  		//Debug.Log("wrapping bit mask");  		_bitIndex = -1;  	}  }  
Magic Number,EB,BitStream,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBitStream.cs,Serialize,The following statement contains a magic number: if (_bitShift == 8) {  	_bitIndex = -1;  }  
Magic Number,EB,BitStream,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBitStream.cs,Serialize,The following statement contains a magic number: if (_bitShift == 8) {  	//Debug.Log("wrapping bit mask");  	_bitIndex = -1;  }  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadUInt16LE,The following statement contains a magic number: if (!BitConverter.IsLittleEndian) {  	Array.Reverse (_buffer' _offset + _length' 2);  }  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadUInt16LE,The following statement contains a magic number: Array.Reverse (_buffer' _offset + _length' 2);  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadUInt16LE,The following statement contains a magic number: _length += 2;  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadUInt16BE,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	Array.Reverse (_buffer' _offset + _length' 2);  }  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadUInt16BE,The following statement contains a magic number: Array.Reverse (_buffer' _offset + _length' 2);  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadUInt16BE,The following statement contains a magic number: _length += 2;  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadInt16LE,The following statement contains a magic number: if (!BitConverter.IsLittleEndian) {  	Array.Reverse (_buffer' _offset + _length' 2);  }  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadInt16LE,The following statement contains a magic number: Array.Reverse (_buffer' _offset + _length' 2);  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadInt16LE,The following statement contains a magic number: _length += 2;  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadInt16BE,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	Array.Reverse (_buffer' _offset + _length' 2);  }  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadInt16BE,The following statement contains a magic number: Array.Reverse (_buffer' _offset + _length' 2);  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadInt16BE,The following statement contains a magic number: _length += 2;  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadUInt32LE,The following statement contains a magic number: if (!BitConverter.IsLittleEndian) {  	Array.Reverse (_buffer' _offset + _length' 4);  }  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadUInt32LE,The following statement contains a magic number: Array.Reverse (_buffer' _offset + _length' 4);  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadUInt32LE,The following statement contains a magic number: _length += 4;  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadUInt32BE,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	Array.Reverse (_buffer' _offset + _length' 4);  }  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadUInt32BE,The following statement contains a magic number: Array.Reverse (_buffer' _offset + _length' 4);  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadUInt32BE,The following statement contains a magic number: _length += 4;  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadInt32LE,The following statement contains a magic number: if (!BitConverter.IsLittleEndian) {  	Array.Reverse (_buffer' _offset + _length' 4);  }  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadInt32LE,The following statement contains a magic number: Array.Reverse (_buffer' _offset + _length' 4);  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadInt32LE,The following statement contains a magic number: _length += 4;  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadInt32BE,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	Array.Reverse (_buffer' _offset + _length' 4);  }  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadInt32BE,The following statement contains a magic number: Array.Reverse (_buffer' _offset + _length' 4);  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadInt32BE,The following statement contains a magic number: _length += 4;  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadUInt64LE,The following statement contains a magic number: if (!BitConverter.IsLittleEndian) {  	Array.Reverse (_buffer' _offset + _length' 8);  }  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadUInt64LE,The following statement contains a magic number: Array.Reverse (_buffer' _offset + _length' 8);  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadUInt64LE,The following statement contains a magic number: _length += 8;  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadUInt64BE,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	Array.Reverse (_buffer' _offset + _length' 8);  }  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadUInt64BE,The following statement contains a magic number: Array.Reverse (_buffer' _offset + _length' 8);  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadUInt64BE,The following statement contains a magic number: _length += 8;  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadInt64LE,The following statement contains a magic number: if (!BitConverter.IsLittleEndian) {  	Array.Reverse (_buffer' _offset + _length' 8);  }  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadInt64LE,The following statement contains a magic number: Array.Reverse (_buffer' _offset + _length' 8);  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadInt64LE,The following statement contains a magic number: _length += 8;  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadInt64BE,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	Array.Reverse (_buffer' _offset + _length' 8);  }  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadInt64BE,The following statement contains a magic number: Array.Reverse (_buffer' _offset + _length' 8);  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadInt64BE,The following statement contains a magic number: _length += 8;  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadFloatLE,The following statement contains a magic number: if (!BitConverter.IsLittleEndian) {  	Array.Reverse (_buffer' _offset + _length' 4);  }  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadFloatLE,The following statement contains a magic number: Array.Reverse (_buffer' _offset + _length' 4);  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadFloatLE,The following statement contains a magic number: _length += 4;  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadFloatBE,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	Array.Reverse (_buffer' _offset + _length' 4);  }  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadFloatBE,The following statement contains a magic number: Array.Reverse (_buffer' _offset + _length' 4);  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadFloatBE,The following statement contains a magic number: _length += 4;  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadDoubleLE,The following statement contains a magic number: if (!BitConverter.IsLittleEndian) {  	Array.Reverse (_buffer' _offset + _length' 8);  }  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadDoubleLE,The following statement contains a magic number: Array.Reverse (_buffer' _offset + _length' 8);  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadDoubleLE,The following statement contains a magic number: _length += 8;  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadDoubleBE,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	Array.Reverse (_buffer' _offset + _length' 8);  }  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadDoubleBE,The following statement contains a magic number: Array.Reverse (_buffer' _offset + _length' 8);  
Magic Number,EB,Buffer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBuffer.cs,ReadDoubleBE,The following statement contains a magic number: _length += 8;  
Magic Number,EB,BugReport,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBugReport.cs,TakeScreenShot,The following statement contains a magic number: try {  	if (Camera.main != null) {  		var tex = new Texture2D (Screen.width' Screen.height' TextureFormat.ARGB32' false);  		tex.ReadPixels (new Rect (0' 0' Screen.width' Screen.height)' 0' 0);  		tex.Apply ();  		var scale = 360.0f / (float)Screen.width;  		var encoder = new JPGEncoder (tex' 25' scale);  		var bytes = encoder.GetBytes ();  		Texture2D.Destroy (tex);  		AddData ("screen"' Encoding.ToBase64String (bytes));  	}  }  catch (System.Exception ex) {  	UnityEngine.Debug.LogWarning ("Failed to create screenshot " + ex);  }  
Magic Number,EB,BugReport,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreBugReport.cs,TakeScreenShot,The following statement contains a magic number: if (Camera.main != null) {  	var tex = new Texture2D (Screen.width' Screen.height' TextureFormat.ARGB32' false);  	tex.ReadPixels (new Rect (0' 0' Screen.width' Screen.height)' 0' 0);  	tex.Apply ();  	var scale = 360.0f / (float)Screen.width;  	var encoder = new JPGEncoder (tex' 25' scale);  	var bytes = encoder.GetBytes ();  	Texture2D.Destroy (tex);  	AddData ("screen"' Encoding.ToBase64String (bytes));  }  
Magic Number,EB,FNV64_Digest,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreCrypto.cs,GetDigestSize,The following statement contains a magic number: return 8;  
Magic Number,EB,FNV32_Digest,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreCrypto.cs,GetDigestSize,The following statement contains a magic number: return 4;  
Magic Number,EB,Dot,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreDot.cs,Colour,The following statement contains a magic number: if (value != null) {  	UnityEngine.Color c = UnityEngine.Color.white;  	c.r = EB.Dot.Integer ("r"' value' 255) / 255.0f;  	c.g = EB.Dot.Integer ("g"' value' 255) / 255.0f;  	c.b = EB.Dot.Integer ("b"' value' 255) / 255.0f;  	c.a = EB.Dot.Single ("a"' value' 1.0f);  	return c;  }  
Magic Number,EB,Dot,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreDot.cs,Colour,The following statement contains a magic number: if (value != null) {  	UnityEngine.Color c = UnityEngine.Color.white;  	c.r = EB.Dot.Integer ("r"' value' 255) / 255.0f;  	c.g = EB.Dot.Integer ("g"' value' 255) / 255.0f;  	c.b = EB.Dot.Integer ("b"' value' 255) / 255.0f;  	c.a = EB.Dot.Single ("a"' value' 1.0f);  	return c;  }  
Magic Number,EB,Dot,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreDot.cs,Colour,The following statement contains a magic number: if (value != null) {  	UnityEngine.Color c = UnityEngine.Color.white;  	c.r = EB.Dot.Integer ("r"' value' 255) / 255.0f;  	c.g = EB.Dot.Integer ("g"' value' 255) / 255.0f;  	c.b = EB.Dot.Integer ("b"' value' 255) / 255.0f;  	c.a = EB.Dot.Single ("a"' value' 1.0f);  	return c;  }  
Magic Number,EB,Dot,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreDot.cs,Colour,The following statement contains a magic number: c.r = EB.Dot.Integer ("r"' value' 255) / 255.0f;  
Magic Number,EB,Dot,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreDot.cs,Colour,The following statement contains a magic number: c.g = EB.Dot.Integer ("g"' value' 255) / 255.0f;  
Magic Number,EB,Dot,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreDot.cs,Colour,The following statement contains a magic number: c.b = EB.Dot.Integer ("b"' value' 255) / 255.0f;  
Magic Number,EB,Dot,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreDot.cs,Colour,The following statement contains a magic number: if ((colourString != null) && (colourString.StartsWith ("rgba(") == true) && (colourString.EndsWith (")") == true)) {  	string inner = colourString.Substring (5' colourString.Length - 6);  	var parts = inner.Split (''');  	if (parts.Length == 4) {  		int r' g' b;  		float a;  		if (int.TryParse (parts [0]' out r) && int.TryParse (parts [1]' out g) && int.TryParse (parts [2]' out b) && float.TryParse (parts [3]' out a)) {  			UnityEngine.Color c = UnityEngine.Color.white;  			c.r = r / 255.0f;  			c.g = g / 255.0f;  			c.b = b / 255.0f;  			c.a = a;  			return c;  		}  	}  }  
Magic Number,EB,Dot,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreDot.cs,Colour,The following statement contains a magic number: if ((colourString != null) && (colourString.StartsWith ("rgba(") == true) && (colourString.EndsWith (")") == true)) {  	string inner = colourString.Substring (5' colourString.Length - 6);  	var parts = inner.Split (''');  	if (parts.Length == 4) {  		int r' g' b;  		float a;  		if (int.TryParse (parts [0]' out r) && int.TryParse (parts [1]' out g) && int.TryParse (parts [2]' out b) && float.TryParse (parts [3]' out a)) {  			UnityEngine.Color c = UnityEngine.Color.white;  			c.r = r / 255.0f;  			c.g = g / 255.0f;  			c.b = b / 255.0f;  			c.a = a;  			return c;  		}  	}  }  
Magic Number,EB,Dot,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreDot.cs,Colour,The following statement contains a magic number: if ((colourString != null) && (colourString.StartsWith ("rgba(") == true) && (colourString.EndsWith (")") == true)) {  	string inner = colourString.Substring (5' colourString.Length - 6);  	var parts = inner.Split (''');  	if (parts.Length == 4) {  		int r' g' b;  		float a;  		if (int.TryParse (parts [0]' out r) && int.TryParse (parts [1]' out g) && int.TryParse (parts [2]' out b) && float.TryParse (parts [3]' out a)) {  			UnityEngine.Color c = UnityEngine.Color.white;  			c.r = r / 255.0f;  			c.g = g / 255.0f;  			c.b = b / 255.0f;  			c.a = a;  			return c;  		}  	}  }  
Magic Number,EB,Dot,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreDot.cs,Colour,The following statement contains a magic number: if ((colourString != null) && (colourString.StartsWith ("rgba(") == true) && (colourString.EndsWith (")") == true)) {  	string inner = colourString.Substring (5' colourString.Length - 6);  	var parts = inner.Split (''');  	if (parts.Length == 4) {  		int r' g' b;  		float a;  		if (int.TryParse (parts [0]' out r) && int.TryParse (parts [1]' out g) && int.TryParse (parts [2]' out b) && float.TryParse (parts [3]' out a)) {  			UnityEngine.Color c = UnityEngine.Color.white;  			c.r = r / 255.0f;  			c.g = g / 255.0f;  			c.b = b / 255.0f;  			c.a = a;  			return c;  		}  	}  }  
Magic Number,EB,Dot,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreDot.cs,Colour,The following statement contains a magic number: if ((colourString != null) && (colourString.StartsWith ("rgba(") == true) && (colourString.EndsWith (")") == true)) {  	string inner = colourString.Substring (5' colourString.Length - 6);  	var parts = inner.Split (''');  	if (parts.Length == 4) {  		int r' g' b;  		float a;  		if (int.TryParse (parts [0]' out r) && int.TryParse (parts [1]' out g) && int.TryParse (parts [2]' out b) && float.TryParse (parts [3]' out a)) {  			UnityEngine.Color c = UnityEngine.Color.white;  			c.r = r / 255.0f;  			c.g = g / 255.0f;  			c.b = b / 255.0f;  			c.a = a;  			return c;  		}  	}  }  
Magic Number,EB,Dot,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreDot.cs,Colour,The following statement contains a magic number: if (parts.Length == 4) {  	int r' g' b;  	float a;  	if (int.TryParse (parts [0]' out r) && int.TryParse (parts [1]' out g) && int.TryParse (parts [2]' out b) && float.TryParse (parts [3]' out a)) {  		UnityEngine.Color c = UnityEngine.Color.white;  		c.r = r / 255.0f;  		c.g = g / 255.0f;  		c.b = b / 255.0f;  		c.a = a;  		return c;  	}  }  
Magic Number,EB,Dot,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreDot.cs,Colour,The following statement contains a magic number: if (parts.Length == 4) {  	int r' g' b;  	float a;  	if (int.TryParse (parts [0]' out r) && int.TryParse (parts [1]' out g) && int.TryParse (parts [2]' out b) && float.TryParse (parts [3]' out a)) {  		UnityEngine.Color c = UnityEngine.Color.white;  		c.r = r / 255.0f;  		c.g = g / 255.0f;  		c.b = b / 255.0f;  		c.a = a;  		return c;  	}  }  
Magic Number,EB,Dot,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreDot.cs,Colour,The following statement contains a magic number: if (parts.Length == 4) {  	int r' g' b;  	float a;  	if (int.TryParse (parts [0]' out r) && int.TryParse (parts [1]' out g) && int.TryParse (parts [2]' out b) && float.TryParse (parts [3]' out a)) {  		UnityEngine.Color c = UnityEngine.Color.white;  		c.r = r / 255.0f;  		c.g = g / 255.0f;  		c.b = b / 255.0f;  		c.a = a;  		return c;  	}  }  
Magic Number,EB,Dot,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreDot.cs,Colour,The following statement contains a magic number: if (int.TryParse (parts [0]' out r) && int.TryParse (parts [1]' out g) && int.TryParse (parts [2]' out b) && float.TryParse (parts [3]' out a)) {  	UnityEngine.Color c = UnityEngine.Color.white;  	c.r = r / 255.0f;  	c.g = g / 255.0f;  	c.b = b / 255.0f;  	c.a = a;  	return c;  }  
Magic Number,EB,Dot,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreDot.cs,Colour,The following statement contains a magic number: if (int.TryParse (parts [0]' out r) && int.TryParse (parts [1]' out g) && int.TryParse (parts [2]' out b) && float.TryParse (parts [3]' out a)) {  	UnityEngine.Color c = UnityEngine.Color.white;  	c.r = r / 255.0f;  	c.g = g / 255.0f;  	c.b = b / 255.0f;  	c.a = a;  	return c;  }  
Magic Number,EB,Encoding,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreEncoding.cs,BytesFromBase64Url,The following statement contains a magic number: while ((base64.Length % 4) != 0) {  	base64 += '=';  }  
Magic Number,EB,Encoding,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreEncoding.cs,FromHexString,The following statement contains a magic number: for (int i = 0; i < len; ++i) {  	bytes [i] = System.Convert.ToByte (str.Substring (i * 2' 2)' 16);  }  
Magic Number,EB,Encoding,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreEncoding.cs,FromHexString,The following statement contains a magic number: for (int i = 0; i < len; ++i) {  	bytes [i] = System.Convert.ToByte (str.Substring (i * 2' 2)' 16);  }  
Magic Number,EB,Encoding,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreEncoding.cs,FromHexString,The following statement contains a magic number: for (int i = 0; i < len; ++i) {  	bytes [i] = System.Convert.ToByte (str.Substring (i * 2' 2)' 16);  }  
Magic Number,EB,Encoding,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreEncoding.cs,FromHexString,The following statement contains a magic number: bytes [i] = System.Convert.ToByte (str.Substring (i * 2' 2)' 16);  
Magic Number,EB,Encoding,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreEncoding.cs,FromHexString,The following statement contains a magic number: bytes [i] = System.Convert.ToByte (str.Substring (i * 2' 2)' 16);  
Magic Number,EB,Encoding,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreEncoding.cs,FromHexString,The following statement contains a magic number: bytes [i] = System.Convert.ToByte (str.Substring (i * 2' 2)' 16);  
Magic Number,EB,ByteArray,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,ByteArray,The following statement contains a magic number: _bytes = new ArrayList (40 * 1024);  
Magic Number,EB,ByteArray,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,ByteArray,The following statement contains a magic number: _bytes = new ArrayList (40 * 1024);  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initQuantTables,The following statement contains a magic number: for (i = 0; i < 64; i++) {  	t = Mathf.Floor ((YQT [i] * sf + 50) / 100);  	if (t < 1) {  		t = 1;  	}  	else if (t > 255) {  		t = 255;  	}  	YTable [ZigZag [i]] = (int)t;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initQuantTables,The following statement contains a magic number: for (i = 0; i < 64; i++) {  	t = Mathf.Floor ((YQT [i] * sf + 50) / 100);  	if (t < 1) {  		t = 1;  	}  	else if (t > 255) {  		t = 255;  	}  	YTable [ZigZag [i]] = (int)t;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initQuantTables,The following statement contains a magic number: for (i = 0; i < 64; i++) {  	t = Mathf.Floor ((YQT [i] * sf + 50) / 100);  	if (t < 1) {  		t = 1;  	}  	else if (t > 255) {  		t = 255;  	}  	YTable [ZigZag [i]] = (int)t;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initQuantTables,The following statement contains a magic number: for (i = 0; i < 64; i++) {  	t = Mathf.Floor ((YQT [i] * sf + 50) / 100);  	if (t < 1) {  		t = 1;  	}  	else if (t > 255) {  		t = 255;  	}  	YTable [ZigZag [i]] = (int)t;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initQuantTables,The following statement contains a magic number: for (i = 0; i < 64; i++) {  	t = Mathf.Floor ((YQT [i] * sf + 50) / 100);  	if (t < 1) {  		t = 1;  	}  	else if (t > 255) {  		t = 255;  	}  	YTable [ZigZag [i]] = (int)t;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initQuantTables,The following statement contains a magic number: t = Mathf.Floor ((YQT [i] * sf + 50) / 100);  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initQuantTables,The following statement contains a magic number: t = Mathf.Floor ((YQT [i] * sf + 50) / 100);  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initQuantTables,The following statement contains a magic number: if (t < 1) {  	t = 1;  }  else if (t > 255) {  	t = 255;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initQuantTables,The following statement contains a magic number: if (t < 1) {  	t = 1;  }  else if (t > 255) {  	t = 255;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initQuantTables,The following statement contains a magic number: if (t > 255) {  	t = 255;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initQuantTables,The following statement contains a magic number: if (t > 255) {  	t = 255;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initQuantTables,The following statement contains a magic number: t = 255;  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initQuantTables,The following statement contains a magic number: for (i = 0; i < 64; i++) {  	t = Mathf.Floor ((UVQT [i] * sf + 50) / 100);  	if (t < 1) {  		t = 1;  	}  	else if (t > 255) {  		t = 255;  	}  	UVTable [ZigZag [i]] = (int)t;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initQuantTables,The following statement contains a magic number: for (i = 0; i < 64; i++) {  	t = Mathf.Floor ((UVQT [i] * sf + 50) / 100);  	if (t < 1) {  		t = 1;  	}  	else if (t > 255) {  		t = 255;  	}  	UVTable [ZigZag [i]] = (int)t;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initQuantTables,The following statement contains a magic number: for (i = 0; i < 64; i++) {  	t = Mathf.Floor ((UVQT [i] * sf + 50) / 100);  	if (t < 1) {  		t = 1;  	}  	else if (t > 255) {  		t = 255;  	}  	UVTable [ZigZag [i]] = (int)t;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initQuantTables,The following statement contains a magic number: for (i = 0; i < 64; i++) {  	t = Mathf.Floor ((UVQT [i] * sf + 50) / 100);  	if (t < 1) {  		t = 1;  	}  	else if (t > 255) {  		t = 255;  	}  	UVTable [ZigZag [i]] = (int)t;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initQuantTables,The following statement contains a magic number: for (i = 0; i < 64; i++) {  	t = Mathf.Floor ((UVQT [i] * sf + 50) / 100);  	if (t < 1) {  		t = 1;  	}  	else if (t > 255) {  		t = 255;  	}  	UVTable [ZigZag [i]] = (int)t;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initQuantTables,The following statement contains a magic number: t = Mathf.Floor ((UVQT [i] * sf + 50) / 100);  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initQuantTables,The following statement contains a magic number: t = Mathf.Floor ((UVQT [i] * sf + 50) / 100);  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initQuantTables,The following statement contains a magic number: if (t < 1) {  	t = 1;  }  else if (t > 255) {  	t = 255;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initQuantTables,The following statement contains a magic number: if (t < 1) {  	t = 1;  }  else if (t > 255) {  	t = 255;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initQuantTables,The following statement contains a magic number: if (t > 255) {  	t = 255;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initQuantTables,The following statement contains a magic number: if (t > 255) {  	t = 255;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initQuantTables,The following statement contains a magic number: t = 255;  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initQuantTables,The following statement contains a magic number: for (int row = 0; row < 8; row++) {  	for (int col = 0; col < 8; col++) {  		fdtbl_Y [i] = (1.0f / (YTable [ZigZag [i]] * aasf [row] * aasf [col] * 8.0f));  		fdtbl_UV [i] = (1.0f / (UVTable [ZigZag [i]] * aasf [row] * aasf [col] * 8.0f));  		i++;  	}  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initQuantTables,The following statement contains a magic number: for (int row = 0; row < 8; row++) {  	for (int col = 0; col < 8; col++) {  		fdtbl_Y [i] = (1.0f / (YTable [ZigZag [i]] * aasf [row] * aasf [col] * 8.0f));  		fdtbl_UV [i] = (1.0f / (UVTable [ZigZag [i]] * aasf [row] * aasf [col] * 8.0f));  		i++;  	}  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initQuantTables,The following statement contains a magic number: for (int col = 0; col < 8; col++) {  	fdtbl_Y [i] = (1.0f / (YTable [ZigZag [i]] * aasf [row] * aasf [col] * 8.0f));  	fdtbl_UV [i] = (1.0f / (UVTable [ZigZag [i]] * aasf [row] * aasf [col] * 8.0f));  	i++;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,computeHuffmanTbl,The following statement contains a magic number: for (int k = 1; k <= 16; k++) {  	for (int j = 1; j <= nrcodes [k]; j++) {  		HT [std_table [pos_in_table]] = new BitString ();  		HT [std_table [pos_in_table]].val = codevalue;  		HT [std_table [pos_in_table]].len = k;  		pos_in_table++;  		codevalue++;  	}  	codevalue *= 2;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,computeHuffmanTbl,The following statement contains a magic number: for (int k = 1; k <= 16; k++) {  	for (int j = 1; j <= nrcodes [k]; j++) {  		HT [std_table [pos_in_table]] = new BitString ();  		HT [std_table [pos_in_table]].val = codevalue;  		HT [std_table [pos_in_table]].len = k;  		pos_in_table++;  		codevalue++;  	}  	codevalue *= 2;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,computeHuffmanTbl,The following statement contains a magic number: codevalue *= 2;  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initCategoryfloat,The following statement contains a magic number: for (int cat = 1; cat <= 15; cat++) {  	//Positive numbers  	for (nr = nrlower; nr < nrupper; nr++) {  		category [32767 + nr] = cat;  		bs = new BitString ();  		bs.len = cat;  		bs.val = nr;  		bitcode [32767 + nr] = bs;  	}  	//Negative numbers  	for (nr = -(nrupper - 1); nr <= -nrlower; nr++) {  		category [32767 + nr] = cat;  		bs = new BitString ();  		bs.len = cat;  		bs.val = nrupper - 1 + nr;  		bitcode [32767 + nr] = bs;  	}  	nrlower <<= 1;  	nrupper <<= 1;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initCategoryfloat,The following statement contains a magic number: for (int cat = 1; cat <= 15; cat++) {  	//Positive numbers  	for (nr = nrlower; nr < nrupper; nr++) {  		category [32767 + nr] = cat;  		bs = new BitString ();  		bs.len = cat;  		bs.val = nr;  		bitcode [32767 + nr] = bs;  	}  	//Negative numbers  	for (nr = -(nrupper - 1); nr <= -nrlower; nr++) {  		category [32767 + nr] = cat;  		bs = new BitString ();  		bs.len = cat;  		bs.val = nrupper - 1 + nr;  		bitcode [32767 + nr] = bs;  	}  	nrlower <<= 1;  	nrupper <<= 1;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initCategoryfloat,The following statement contains a magic number: for (int cat = 1; cat <= 15; cat++) {  	//Positive numbers  	for (nr = nrlower; nr < nrupper; nr++) {  		category [32767 + nr] = cat;  		bs = new BitString ();  		bs.len = cat;  		bs.val = nr;  		bitcode [32767 + nr] = bs;  	}  	//Negative numbers  	for (nr = -(nrupper - 1); nr <= -nrlower; nr++) {  		category [32767 + nr] = cat;  		bs = new BitString ();  		bs.len = cat;  		bs.val = nrupper - 1 + nr;  		bitcode [32767 + nr] = bs;  	}  	nrlower <<= 1;  	nrupper <<= 1;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initCategoryfloat,The following statement contains a magic number: for (int cat = 1; cat <= 15; cat++) {  	//Positive numbers  	for (nr = nrlower; nr < nrupper; nr++) {  		category [32767 + nr] = cat;  		bs = new BitString ();  		bs.len = cat;  		bs.val = nr;  		bitcode [32767 + nr] = bs;  	}  	//Negative numbers  	for (nr = -(nrupper - 1); nr <= -nrlower; nr++) {  		category [32767 + nr] = cat;  		bs = new BitString ();  		bs.len = cat;  		bs.val = nrupper - 1 + nr;  		bitcode [32767 + nr] = bs;  	}  	nrlower <<= 1;  	nrupper <<= 1;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initCategoryfloat,The following statement contains a magic number: for (int cat = 1; cat <= 15; cat++) {  	//Positive numbers  	for (nr = nrlower; nr < nrupper; nr++) {  		category [32767 + nr] = cat;  		bs = new BitString ();  		bs.len = cat;  		bs.val = nr;  		bitcode [32767 + nr] = bs;  	}  	//Negative numbers  	for (nr = -(nrupper - 1); nr <= -nrlower; nr++) {  		category [32767 + nr] = cat;  		bs = new BitString ();  		bs.len = cat;  		bs.val = nrupper - 1 + nr;  		bitcode [32767 + nr] = bs;  	}  	nrlower <<= 1;  	nrupper <<= 1;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initCategoryfloat,The following statement contains a magic number: for (nr = nrlower; nr < nrupper; nr++) {  	category [32767 + nr] = cat;  	bs = new BitString ();  	bs.len = cat;  	bs.val = nr;  	bitcode [32767 + nr] = bs;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initCategoryfloat,The following statement contains a magic number: for (nr = nrlower; nr < nrupper; nr++) {  	category [32767 + nr] = cat;  	bs = new BitString ();  	bs.len = cat;  	bs.val = nr;  	bitcode [32767 + nr] = bs;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initCategoryfloat,The following statement contains a magic number: category [32767 + nr] = cat;  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initCategoryfloat,The following statement contains a magic number: bitcode [32767 + nr] = bs;  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initCategoryfloat,The following statement contains a magic number: for (nr = -(nrupper - 1); nr <= -nrlower; nr++) {  	category [32767 + nr] = cat;  	bs = new BitString ();  	bs.len = cat;  	bs.val = nrupper - 1 + nr;  	bitcode [32767 + nr] = bs;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initCategoryfloat,The following statement contains a magic number: for (nr = -(nrupper - 1); nr <= -nrlower; nr++) {  	category [32767 + nr] = cat;  	bs = new BitString ();  	bs.len = cat;  	bs.val = nrupper - 1 + nr;  	bitcode [32767 + nr] = bs;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initCategoryfloat,The following statement contains a magic number: category [32767 + nr] = cat;  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initCategoryfloat,The following statement contains a magic number: bitcode [32767 + nr] = bs;  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,writeBits,The following statement contains a magic number: while (posval >= 0) {  	if ((value & (int)(1 << posval)) != 0) {  		bytenew |= (int)(1 << bytepos);  	}  	posval--;  	bytepos--;  	if (bytepos < 0) {  		if (bytenew == 0xFF) {  			writeByte (0xFF);  			writeByte (0);  		}  		else {  			writeByte ((byte)bytenew);  		}  		bytepos = 7;  		bytenew = 0;  	}  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,writeBits,The following statement contains a magic number: if (bytepos < 0) {  	if (bytenew == 0xFF) {  		writeByte (0xFF);  		writeByte (0);  	}  	else {  		writeByte ((byte)bytenew);  	}  	bytepos = 7;  	bytenew = 0;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,writeBits,The following statement contains a magic number: bytepos = 7;  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,writeWord,The following statement contains a magic number: writeByte ((value >> 8) & 0xFF);  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 7];  	tmp7 = data [dataOff + 0] - data [dataOff + 7];  	tmp1 = data [dataOff + 1] + data [dataOff + 6];  	tmp6 = data [dataOff + 1] - data [dataOff + 6];  	tmp2 = data [dataOff + 2] + data [dataOff + 5];  	tmp5 = data [dataOff + 2] - data [dataOff + 5];  	tmp3 = data [dataOff + 3] + data [dataOff + 4];  	tmp4 = data [dataOff + 3] - data [dataOff + 4];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 4] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 2] = tmp13 + z1;  	/* phase 5 */data [dataOff + 6] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 5] = z13 + z2;  	/* phase 6 */data [dataOff + 3] = z13 - z2;  	data [dataOff + 1] = z11 + z4;  	data [dataOff + 7] = z11 - z4;  	dataOff += 8;  	/* advance pointer to next row */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 7];  	tmp7 = data [dataOff + 0] - data [dataOff + 7];  	tmp1 = data [dataOff + 1] + data [dataOff + 6];  	tmp6 = data [dataOff + 1] - data [dataOff + 6];  	tmp2 = data [dataOff + 2] + data [dataOff + 5];  	tmp5 = data [dataOff + 2] - data [dataOff + 5];  	tmp3 = data [dataOff + 3] + data [dataOff + 4];  	tmp4 = data [dataOff + 3] - data [dataOff + 4];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 4] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 2] = tmp13 + z1;  	/* phase 5 */data [dataOff + 6] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 5] = z13 + z2;  	/* phase 6 */data [dataOff + 3] = z13 - z2;  	data [dataOff + 1] = z11 + z4;  	data [dataOff + 7] = z11 - z4;  	dataOff += 8;  	/* advance pointer to next row */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 7];  	tmp7 = data [dataOff + 0] - data [dataOff + 7];  	tmp1 = data [dataOff + 1] + data [dataOff + 6];  	tmp6 = data [dataOff + 1] - data [dataOff + 6];  	tmp2 = data [dataOff + 2] + data [dataOff + 5];  	tmp5 = data [dataOff + 2] - data [dataOff + 5];  	tmp3 = data [dataOff + 3] + data [dataOff + 4];  	tmp4 = data [dataOff + 3] - data [dataOff + 4];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 4] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 2] = tmp13 + z1;  	/* phase 5 */data [dataOff + 6] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 5] = z13 + z2;  	/* phase 6 */data [dataOff + 3] = z13 - z2;  	data [dataOff + 1] = z11 + z4;  	data [dataOff + 7] = z11 - z4;  	dataOff += 8;  	/* advance pointer to next row */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 7];  	tmp7 = data [dataOff + 0] - data [dataOff + 7];  	tmp1 = data [dataOff + 1] + data [dataOff + 6];  	tmp6 = data [dataOff + 1] - data [dataOff + 6];  	tmp2 = data [dataOff + 2] + data [dataOff + 5];  	tmp5 = data [dataOff + 2] - data [dataOff + 5];  	tmp3 = data [dataOff + 3] + data [dataOff + 4];  	tmp4 = data [dataOff + 3] - data [dataOff + 4];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 4] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 2] = tmp13 + z1;  	/* phase 5 */data [dataOff + 6] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 5] = z13 + z2;  	/* phase 6 */data [dataOff + 3] = z13 - z2;  	data [dataOff + 1] = z11 + z4;  	data [dataOff + 7] = z11 - z4;  	dataOff += 8;  	/* advance pointer to next row */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 7];  	tmp7 = data [dataOff + 0] - data [dataOff + 7];  	tmp1 = data [dataOff + 1] + data [dataOff + 6];  	tmp6 = data [dataOff + 1] - data [dataOff + 6];  	tmp2 = data [dataOff + 2] + data [dataOff + 5];  	tmp5 = data [dataOff + 2] - data [dataOff + 5];  	tmp3 = data [dataOff + 3] + data [dataOff + 4];  	tmp4 = data [dataOff + 3] - data [dataOff + 4];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 4] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 2] = tmp13 + z1;  	/* phase 5 */data [dataOff + 6] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 5] = z13 + z2;  	/* phase 6 */data [dataOff + 3] = z13 - z2;  	data [dataOff + 1] = z11 + z4;  	data [dataOff + 7] = z11 - z4;  	dataOff += 8;  	/* advance pointer to next row */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 7];  	tmp7 = data [dataOff + 0] - data [dataOff + 7];  	tmp1 = data [dataOff + 1] + data [dataOff + 6];  	tmp6 = data [dataOff + 1] - data [dataOff + 6];  	tmp2 = data [dataOff + 2] + data [dataOff + 5];  	tmp5 = data [dataOff + 2] - data [dataOff + 5];  	tmp3 = data [dataOff + 3] + data [dataOff + 4];  	tmp4 = data [dataOff + 3] - data [dataOff + 4];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 4] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 2] = tmp13 + z1;  	/* phase 5 */data [dataOff + 6] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 5] = z13 + z2;  	/* phase 6 */data [dataOff + 3] = z13 - z2;  	data [dataOff + 1] = z11 + z4;  	data [dataOff + 7] = z11 - z4;  	dataOff += 8;  	/* advance pointer to next row */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 7];  	tmp7 = data [dataOff + 0] - data [dataOff + 7];  	tmp1 = data [dataOff + 1] + data [dataOff + 6];  	tmp6 = data [dataOff + 1] - data [dataOff + 6];  	tmp2 = data [dataOff + 2] + data [dataOff + 5];  	tmp5 = data [dataOff + 2] - data [dataOff + 5];  	tmp3 = data [dataOff + 3] + data [dataOff + 4];  	tmp4 = data [dataOff + 3] - data [dataOff + 4];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 4] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 2] = tmp13 + z1;  	/* phase 5 */data [dataOff + 6] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 5] = z13 + z2;  	/* phase 6 */data [dataOff + 3] = z13 - z2;  	data [dataOff + 1] = z11 + z4;  	data [dataOff + 7] = z11 - z4;  	dataOff += 8;  	/* advance pointer to next row */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 7];  	tmp7 = data [dataOff + 0] - data [dataOff + 7];  	tmp1 = data [dataOff + 1] + data [dataOff + 6];  	tmp6 = data [dataOff + 1] - data [dataOff + 6];  	tmp2 = data [dataOff + 2] + data [dataOff + 5];  	tmp5 = data [dataOff + 2] - data [dataOff + 5];  	tmp3 = data [dataOff + 3] + data [dataOff + 4];  	tmp4 = data [dataOff + 3] - data [dataOff + 4];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 4] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 2] = tmp13 + z1;  	/* phase 5 */data [dataOff + 6] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 5] = z13 + z2;  	/* phase 6 */data [dataOff + 3] = z13 - z2;  	data [dataOff + 1] = z11 + z4;  	data [dataOff + 7] = z11 - z4;  	dataOff += 8;  	/* advance pointer to next row */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 7];  	tmp7 = data [dataOff + 0] - data [dataOff + 7];  	tmp1 = data [dataOff + 1] + data [dataOff + 6];  	tmp6 = data [dataOff + 1] - data [dataOff + 6];  	tmp2 = data [dataOff + 2] + data [dataOff + 5];  	tmp5 = data [dataOff + 2] - data [dataOff + 5];  	tmp3 = data [dataOff + 3] + data [dataOff + 4];  	tmp4 = data [dataOff + 3] - data [dataOff + 4];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 4] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 2] = tmp13 + z1;  	/* phase 5 */data [dataOff + 6] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 5] = z13 + z2;  	/* phase 6 */data [dataOff + 3] = z13 - z2;  	data [dataOff + 1] = z11 + z4;  	data [dataOff + 7] = z11 - z4;  	dataOff += 8;  	/* advance pointer to next row */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 7];  	tmp7 = data [dataOff + 0] - data [dataOff + 7];  	tmp1 = data [dataOff + 1] + data [dataOff + 6];  	tmp6 = data [dataOff + 1] - data [dataOff + 6];  	tmp2 = data [dataOff + 2] + data [dataOff + 5];  	tmp5 = data [dataOff + 2] - data [dataOff + 5];  	tmp3 = data [dataOff + 3] + data [dataOff + 4];  	tmp4 = data [dataOff + 3] - data [dataOff + 4];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 4] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 2] = tmp13 + z1;  	/* phase 5 */data [dataOff + 6] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 5] = z13 + z2;  	/* phase 6 */data [dataOff + 3] = z13 - z2;  	data [dataOff + 1] = z11 + z4;  	data [dataOff + 7] = z11 - z4;  	dataOff += 8;  	/* advance pointer to next row */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 7];  	tmp7 = data [dataOff + 0] - data [dataOff + 7];  	tmp1 = data [dataOff + 1] + data [dataOff + 6];  	tmp6 = data [dataOff + 1] - data [dataOff + 6];  	tmp2 = data [dataOff + 2] + data [dataOff + 5];  	tmp5 = data [dataOff + 2] - data [dataOff + 5];  	tmp3 = data [dataOff + 3] + data [dataOff + 4];  	tmp4 = data [dataOff + 3] - data [dataOff + 4];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 4] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 2] = tmp13 + z1;  	/* phase 5 */data [dataOff + 6] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 5] = z13 + z2;  	/* phase 6 */data [dataOff + 3] = z13 - z2;  	data [dataOff + 1] = z11 + z4;  	data [dataOff + 7] = z11 - z4;  	dataOff += 8;  	/* advance pointer to next row */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 7];  	tmp7 = data [dataOff + 0] - data [dataOff + 7];  	tmp1 = data [dataOff + 1] + data [dataOff + 6];  	tmp6 = data [dataOff + 1] - data [dataOff + 6];  	tmp2 = data [dataOff + 2] + data [dataOff + 5];  	tmp5 = data [dataOff + 2] - data [dataOff + 5];  	tmp3 = data [dataOff + 3] + data [dataOff + 4];  	tmp4 = data [dataOff + 3] - data [dataOff + 4];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 4] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 2] = tmp13 + z1;  	/* phase 5 */data [dataOff + 6] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 5] = z13 + z2;  	/* phase 6 */data [dataOff + 3] = z13 - z2;  	data [dataOff + 1] = z11 + z4;  	data [dataOff + 7] = z11 - z4;  	dataOff += 8;  	/* advance pointer to next row */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 7];  	tmp7 = data [dataOff + 0] - data [dataOff + 7];  	tmp1 = data [dataOff + 1] + data [dataOff + 6];  	tmp6 = data [dataOff + 1] - data [dataOff + 6];  	tmp2 = data [dataOff + 2] + data [dataOff + 5];  	tmp5 = data [dataOff + 2] - data [dataOff + 5];  	tmp3 = data [dataOff + 3] + data [dataOff + 4];  	tmp4 = data [dataOff + 3] - data [dataOff + 4];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 4] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 2] = tmp13 + z1;  	/* phase 5 */data [dataOff + 6] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 5] = z13 + z2;  	/* phase 6 */data [dataOff + 3] = z13 - z2;  	data [dataOff + 1] = z11 + z4;  	data [dataOff + 7] = z11 - z4;  	dataOff += 8;  	/* advance pointer to next row */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 7];  	tmp7 = data [dataOff + 0] - data [dataOff + 7];  	tmp1 = data [dataOff + 1] + data [dataOff + 6];  	tmp6 = data [dataOff + 1] - data [dataOff + 6];  	tmp2 = data [dataOff + 2] + data [dataOff + 5];  	tmp5 = data [dataOff + 2] - data [dataOff + 5];  	tmp3 = data [dataOff + 3] + data [dataOff + 4];  	tmp4 = data [dataOff + 3] - data [dataOff + 4];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 4] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 2] = tmp13 + z1;  	/* phase 5 */data [dataOff + 6] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 5] = z13 + z2;  	/* phase 6 */data [dataOff + 3] = z13 - z2;  	data [dataOff + 1] = z11 + z4;  	data [dataOff + 7] = z11 - z4;  	dataOff += 8;  	/* advance pointer to next row */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 7];  	tmp7 = data [dataOff + 0] - data [dataOff + 7];  	tmp1 = data [dataOff + 1] + data [dataOff + 6];  	tmp6 = data [dataOff + 1] - data [dataOff + 6];  	tmp2 = data [dataOff + 2] + data [dataOff + 5];  	tmp5 = data [dataOff + 2] - data [dataOff + 5];  	tmp3 = data [dataOff + 3] + data [dataOff + 4];  	tmp4 = data [dataOff + 3] - data [dataOff + 4];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 4] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 2] = tmp13 + z1;  	/* phase 5 */data [dataOff + 6] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 5] = z13 + z2;  	/* phase 6 */data [dataOff + 3] = z13 - z2;  	data [dataOff + 1] = z11 + z4;  	data [dataOff + 7] = z11 - z4;  	dataOff += 8;  	/* advance pointer to next row */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 7];  	tmp7 = data [dataOff + 0] - data [dataOff + 7];  	tmp1 = data [dataOff + 1] + data [dataOff + 6];  	tmp6 = data [dataOff + 1] - data [dataOff + 6];  	tmp2 = data [dataOff + 2] + data [dataOff + 5];  	tmp5 = data [dataOff + 2] - data [dataOff + 5];  	tmp3 = data [dataOff + 3] + data [dataOff + 4];  	tmp4 = data [dataOff + 3] - data [dataOff + 4];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 4] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 2] = tmp13 + z1;  	/* phase 5 */data [dataOff + 6] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 5] = z13 + z2;  	/* phase 6 */data [dataOff + 3] = z13 - z2;  	data [dataOff + 1] = z11 + z4;  	data [dataOff + 7] = z11 - z4;  	dataOff += 8;  	/* advance pointer to next row */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 7];  	tmp7 = data [dataOff + 0] - data [dataOff + 7];  	tmp1 = data [dataOff + 1] + data [dataOff + 6];  	tmp6 = data [dataOff + 1] - data [dataOff + 6];  	tmp2 = data [dataOff + 2] + data [dataOff + 5];  	tmp5 = data [dataOff + 2] - data [dataOff + 5];  	tmp3 = data [dataOff + 3] + data [dataOff + 4];  	tmp4 = data [dataOff + 3] - data [dataOff + 4];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 4] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 2] = tmp13 + z1;  	/* phase 5 */data [dataOff + 6] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 5] = z13 + z2;  	/* phase 6 */data [dataOff + 3] = z13 - z2;  	data [dataOff + 1] = z11 + z4;  	data [dataOff + 7] = z11 - z4;  	dataOff += 8;  	/* advance pointer to next row */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 7];  	tmp7 = data [dataOff + 0] - data [dataOff + 7];  	tmp1 = data [dataOff + 1] + data [dataOff + 6];  	tmp6 = data [dataOff + 1] - data [dataOff + 6];  	tmp2 = data [dataOff + 2] + data [dataOff + 5];  	tmp5 = data [dataOff + 2] - data [dataOff + 5];  	tmp3 = data [dataOff + 3] + data [dataOff + 4];  	tmp4 = data [dataOff + 3] - data [dataOff + 4];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 4] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 2] = tmp13 + z1;  	/* phase 5 */data [dataOff + 6] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 5] = z13 + z2;  	/* phase 6 */data [dataOff + 3] = z13 - z2;  	data [dataOff + 1] = z11 + z4;  	data [dataOff + 7] = z11 - z4;  	dataOff += 8;  	/* advance pointer to next row */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 7];  	tmp7 = data [dataOff + 0] - data [dataOff + 7];  	tmp1 = data [dataOff + 1] + data [dataOff + 6];  	tmp6 = data [dataOff + 1] - data [dataOff + 6];  	tmp2 = data [dataOff + 2] + data [dataOff + 5];  	tmp5 = data [dataOff + 2] - data [dataOff + 5];  	tmp3 = data [dataOff + 3] + data [dataOff + 4];  	tmp4 = data [dataOff + 3] - data [dataOff + 4];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 4] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 2] = tmp13 + z1;  	/* phase 5 */data [dataOff + 6] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 5] = z13 + z2;  	/* phase 6 */data [dataOff + 3] = z13 - z2;  	data [dataOff + 1] = z11 + z4;  	data [dataOff + 7] = z11 - z4;  	dataOff += 8;  	/* advance pointer to next row */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 7];  	tmp7 = data [dataOff + 0] - data [dataOff + 7];  	tmp1 = data [dataOff + 1] + data [dataOff + 6];  	tmp6 = data [dataOff + 1] - data [dataOff + 6];  	tmp2 = data [dataOff + 2] + data [dataOff + 5];  	tmp5 = data [dataOff + 2] - data [dataOff + 5];  	tmp3 = data [dataOff + 3] + data [dataOff + 4];  	tmp4 = data [dataOff + 3] - data [dataOff + 4];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 4] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 2] = tmp13 + z1;  	/* phase 5 */data [dataOff + 6] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 5] = z13 + z2;  	/* phase 6 */data [dataOff + 3] = z13 - z2;  	data [dataOff + 1] = z11 + z4;  	data [dataOff + 7] = z11 - z4;  	dataOff += 8;  	/* advance pointer to next row */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: tmp0 = data [dataOff + 0] + data [dataOff + 7];  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: tmp7 = data [dataOff + 0] - data [dataOff + 7];  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: tmp1 = data [dataOff + 1] + data [dataOff + 6];  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: tmp6 = data [dataOff + 1] - data [dataOff + 6];  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: tmp2 = data [dataOff + 2] + data [dataOff + 5];  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: tmp2 = data [dataOff + 2] + data [dataOff + 5];  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: tmp5 = data [dataOff + 2] - data [dataOff + 5];  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: tmp5 = data [dataOff + 2] - data [dataOff + 5];  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: tmp3 = data [dataOff + 3] + data [dataOff + 4];  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: tmp3 = data [dataOff + 3] + data [dataOff + 4];  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: tmp4 = data [dataOff + 3] - data [dataOff + 4];  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: tmp4 = data [dataOff + 3] - data [dataOff + 4];  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: data [dataOff + 4] = tmp10 - tmp11;  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: data [dataOff + 2] = tmp13 + z1;  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: data [dataOff + 6] = tmp13 - z1;  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: data [dataOff + 5] = z13 + z2;  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: data [dataOff + 3] = z13 - z2;  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: data [dataOff + 7] = z11 - z4;  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: dataOff += 8;  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 56];  	tmp7 = data [dataOff + 0] - data [dataOff + 56];  	tmp1 = data [dataOff + 8] + data [dataOff + 48];  	tmp6 = data [dataOff + 8] - data [dataOff + 48];  	tmp2 = data [dataOff + 16] + data [dataOff + 40];  	tmp5 = data [dataOff + 16] - data [dataOff + 40];  	tmp3 = data [dataOff + 24] + data [dataOff + 32];  	tmp4 = data [dataOff + 24] - data [dataOff + 32];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 32] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 16] = tmp13 + z1;  	/* phase 5 */data [dataOff + 48] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 40] = z13 + z2;  	/* phase 6 */data [dataOff + 24] = z13 - z2;  	data [dataOff + 8] = z11 + z4;  	data [dataOff + 56] = z11 - z4;  	dataOff++;  	/* advance pointer to next column */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 56];  	tmp7 = data [dataOff + 0] - data [dataOff + 56];  	tmp1 = data [dataOff + 8] + data [dataOff + 48];  	tmp6 = data [dataOff + 8] - data [dataOff + 48];  	tmp2 = data [dataOff + 16] + data [dataOff + 40];  	tmp5 = data [dataOff + 16] - data [dataOff + 40];  	tmp3 = data [dataOff + 24] + data [dataOff + 32];  	tmp4 = data [dataOff + 24] - data [dataOff + 32];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 32] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 16] = tmp13 + z1;  	/* phase 5 */data [dataOff + 48] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 40] = z13 + z2;  	/* phase 6 */data [dataOff + 24] = z13 - z2;  	data [dataOff + 8] = z11 + z4;  	data [dataOff + 56] = z11 - z4;  	dataOff++;  	/* advance pointer to next column */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 56];  	tmp7 = data [dataOff + 0] - data [dataOff + 56];  	tmp1 = data [dataOff + 8] + data [dataOff + 48];  	tmp6 = data [dataOff + 8] - data [dataOff + 48];  	tmp2 = data [dataOff + 16] + data [dataOff + 40];  	tmp5 = data [dataOff + 16] - data [dataOff + 40];  	tmp3 = data [dataOff + 24] + data [dataOff + 32];  	tmp4 = data [dataOff + 24] - data [dataOff + 32];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 32] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 16] = tmp13 + z1;  	/* phase 5 */data [dataOff + 48] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 40] = z13 + z2;  	/* phase 6 */data [dataOff + 24] = z13 - z2;  	data [dataOff + 8] = z11 + z4;  	data [dataOff + 56] = z11 - z4;  	dataOff++;  	/* advance pointer to next column */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 56];  	tmp7 = data [dataOff + 0] - data [dataOff + 56];  	tmp1 = data [dataOff + 8] + data [dataOff + 48];  	tmp6 = data [dataOff + 8] - data [dataOff + 48];  	tmp2 = data [dataOff + 16] + data [dataOff + 40];  	tmp5 = data [dataOff + 16] - data [dataOff + 40];  	tmp3 = data [dataOff + 24] + data [dataOff + 32];  	tmp4 = data [dataOff + 24] - data [dataOff + 32];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 32] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 16] = tmp13 + z1;  	/* phase 5 */data [dataOff + 48] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 40] = z13 + z2;  	/* phase 6 */data [dataOff + 24] = z13 - z2;  	data [dataOff + 8] = z11 + z4;  	data [dataOff + 56] = z11 - z4;  	dataOff++;  	/* advance pointer to next column */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 56];  	tmp7 = data [dataOff + 0] - data [dataOff + 56];  	tmp1 = data [dataOff + 8] + data [dataOff + 48];  	tmp6 = data [dataOff + 8] - data [dataOff + 48];  	tmp2 = data [dataOff + 16] + data [dataOff + 40];  	tmp5 = data [dataOff + 16] - data [dataOff + 40];  	tmp3 = data [dataOff + 24] + data [dataOff + 32];  	tmp4 = data [dataOff + 24] - data [dataOff + 32];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 32] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 16] = tmp13 + z1;  	/* phase 5 */data [dataOff + 48] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 40] = z13 + z2;  	/* phase 6 */data [dataOff + 24] = z13 - z2;  	data [dataOff + 8] = z11 + z4;  	data [dataOff + 56] = z11 - z4;  	dataOff++;  	/* advance pointer to next column */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 56];  	tmp7 = data [dataOff + 0] - data [dataOff + 56];  	tmp1 = data [dataOff + 8] + data [dataOff + 48];  	tmp6 = data [dataOff + 8] - data [dataOff + 48];  	tmp2 = data [dataOff + 16] + data [dataOff + 40];  	tmp5 = data [dataOff + 16] - data [dataOff + 40];  	tmp3 = data [dataOff + 24] + data [dataOff + 32];  	tmp4 = data [dataOff + 24] - data [dataOff + 32];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 32] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 16] = tmp13 + z1;  	/* phase 5 */data [dataOff + 48] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 40] = z13 + z2;  	/* phase 6 */data [dataOff + 24] = z13 - z2;  	data [dataOff + 8] = z11 + z4;  	data [dataOff + 56] = z11 - z4;  	dataOff++;  	/* advance pointer to next column */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 56];  	tmp7 = data [dataOff + 0] - data [dataOff + 56];  	tmp1 = data [dataOff + 8] + data [dataOff + 48];  	tmp6 = data [dataOff + 8] - data [dataOff + 48];  	tmp2 = data [dataOff + 16] + data [dataOff + 40];  	tmp5 = data [dataOff + 16] - data [dataOff + 40];  	tmp3 = data [dataOff + 24] + data [dataOff + 32];  	tmp4 = data [dataOff + 24] - data [dataOff + 32];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 32] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 16] = tmp13 + z1;  	/* phase 5 */data [dataOff + 48] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 40] = z13 + z2;  	/* phase 6 */data [dataOff + 24] = z13 - z2;  	data [dataOff + 8] = z11 + z4;  	data [dataOff + 56] = z11 - z4;  	dataOff++;  	/* advance pointer to next column */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 56];  	tmp7 = data [dataOff + 0] - data [dataOff + 56];  	tmp1 = data [dataOff + 8] + data [dataOff + 48];  	tmp6 = data [dataOff + 8] - data [dataOff + 48];  	tmp2 = data [dataOff + 16] + data [dataOff + 40];  	tmp5 = data [dataOff + 16] - data [dataOff + 40];  	tmp3 = data [dataOff + 24] + data [dataOff + 32];  	tmp4 = data [dataOff + 24] - data [dataOff + 32];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 32] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 16] = tmp13 + z1;  	/* phase 5 */data [dataOff + 48] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 40] = z13 + z2;  	/* phase 6 */data [dataOff + 24] = z13 - z2;  	data [dataOff + 8] = z11 + z4;  	data [dataOff + 56] = z11 - z4;  	dataOff++;  	/* advance pointer to next column */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 56];  	tmp7 = data [dataOff + 0] - data [dataOff + 56];  	tmp1 = data [dataOff + 8] + data [dataOff + 48];  	tmp6 = data [dataOff + 8] - data [dataOff + 48];  	tmp2 = data [dataOff + 16] + data [dataOff + 40];  	tmp5 = data [dataOff + 16] - data [dataOff + 40];  	tmp3 = data [dataOff + 24] + data [dataOff + 32];  	tmp4 = data [dataOff + 24] - data [dataOff + 32];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 32] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 16] = tmp13 + z1;  	/* phase 5 */data [dataOff + 48] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 40] = z13 + z2;  	/* phase 6 */data [dataOff + 24] = z13 - z2;  	data [dataOff + 8] = z11 + z4;  	data [dataOff + 56] = z11 - z4;  	dataOff++;  	/* advance pointer to next column */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 56];  	tmp7 = data [dataOff + 0] - data [dataOff + 56];  	tmp1 = data [dataOff + 8] + data [dataOff + 48];  	tmp6 = data [dataOff + 8] - data [dataOff + 48];  	tmp2 = data [dataOff + 16] + data [dataOff + 40];  	tmp5 = data [dataOff + 16] - data [dataOff + 40];  	tmp3 = data [dataOff + 24] + data [dataOff + 32];  	tmp4 = data [dataOff + 24] - data [dataOff + 32];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 32] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 16] = tmp13 + z1;  	/* phase 5 */data [dataOff + 48] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 40] = z13 + z2;  	/* phase 6 */data [dataOff + 24] = z13 - z2;  	data [dataOff + 8] = z11 + z4;  	data [dataOff + 56] = z11 - z4;  	dataOff++;  	/* advance pointer to next column */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 56];  	tmp7 = data [dataOff + 0] - data [dataOff + 56];  	tmp1 = data [dataOff + 8] + data [dataOff + 48];  	tmp6 = data [dataOff + 8] - data [dataOff + 48];  	tmp2 = data [dataOff + 16] + data [dataOff + 40];  	tmp5 = data [dataOff + 16] - data [dataOff + 40];  	tmp3 = data [dataOff + 24] + data [dataOff + 32];  	tmp4 = data [dataOff + 24] - data [dataOff + 32];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 32] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 16] = tmp13 + z1;  	/* phase 5 */data [dataOff + 48] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 40] = z13 + z2;  	/* phase 6 */data [dataOff + 24] = z13 - z2;  	data [dataOff + 8] = z11 + z4;  	data [dataOff + 56] = z11 - z4;  	dataOff++;  	/* advance pointer to next column */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 56];  	tmp7 = data [dataOff + 0] - data [dataOff + 56];  	tmp1 = data [dataOff + 8] + data [dataOff + 48];  	tmp6 = data [dataOff + 8] - data [dataOff + 48];  	tmp2 = data [dataOff + 16] + data [dataOff + 40];  	tmp5 = data [dataOff + 16] - data [dataOff + 40];  	tmp3 = data [dataOff + 24] + data [dataOff + 32];  	tmp4 = data [dataOff + 24] - data [dataOff + 32];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 32] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 16] = tmp13 + z1;  	/* phase 5 */data [dataOff + 48] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 40] = z13 + z2;  	/* phase 6 */data [dataOff + 24] = z13 - z2;  	data [dataOff + 8] = z11 + z4;  	data [dataOff + 56] = z11 - z4;  	dataOff++;  	/* advance pointer to next column */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 56];  	tmp7 = data [dataOff + 0] - data [dataOff + 56];  	tmp1 = data [dataOff + 8] + data [dataOff + 48];  	tmp6 = data [dataOff + 8] - data [dataOff + 48];  	tmp2 = data [dataOff + 16] + data [dataOff + 40];  	tmp5 = data [dataOff + 16] - data [dataOff + 40];  	tmp3 = data [dataOff + 24] + data [dataOff + 32];  	tmp4 = data [dataOff + 24] - data [dataOff + 32];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 32] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 16] = tmp13 + z1;  	/* phase 5 */data [dataOff + 48] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 40] = z13 + z2;  	/* phase 6 */data [dataOff + 24] = z13 - z2;  	data [dataOff + 8] = z11 + z4;  	data [dataOff + 56] = z11 - z4;  	dataOff++;  	/* advance pointer to next column */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 56];  	tmp7 = data [dataOff + 0] - data [dataOff + 56];  	tmp1 = data [dataOff + 8] + data [dataOff + 48];  	tmp6 = data [dataOff + 8] - data [dataOff + 48];  	tmp2 = data [dataOff + 16] + data [dataOff + 40];  	tmp5 = data [dataOff + 16] - data [dataOff + 40];  	tmp3 = data [dataOff + 24] + data [dataOff + 32];  	tmp4 = data [dataOff + 24] - data [dataOff + 32];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 32] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 16] = tmp13 + z1;  	/* phase 5 */data [dataOff + 48] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 40] = z13 + z2;  	/* phase 6 */data [dataOff + 24] = z13 - z2;  	data [dataOff + 8] = z11 + z4;  	data [dataOff + 56] = z11 - z4;  	dataOff++;  	/* advance pointer to next column */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 56];  	tmp7 = data [dataOff + 0] - data [dataOff + 56];  	tmp1 = data [dataOff + 8] + data [dataOff + 48];  	tmp6 = data [dataOff + 8] - data [dataOff + 48];  	tmp2 = data [dataOff + 16] + data [dataOff + 40];  	tmp5 = data [dataOff + 16] - data [dataOff + 40];  	tmp3 = data [dataOff + 24] + data [dataOff + 32];  	tmp4 = data [dataOff + 24] - data [dataOff + 32];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 32] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 16] = tmp13 + z1;  	/* phase 5 */data [dataOff + 48] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 40] = z13 + z2;  	/* phase 6 */data [dataOff + 24] = z13 - z2;  	data [dataOff + 8] = z11 + z4;  	data [dataOff + 56] = z11 - z4;  	dataOff++;  	/* advance pointer to next column */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 56];  	tmp7 = data [dataOff + 0] - data [dataOff + 56];  	tmp1 = data [dataOff + 8] + data [dataOff + 48];  	tmp6 = data [dataOff + 8] - data [dataOff + 48];  	tmp2 = data [dataOff + 16] + data [dataOff + 40];  	tmp5 = data [dataOff + 16] - data [dataOff + 40];  	tmp3 = data [dataOff + 24] + data [dataOff + 32];  	tmp4 = data [dataOff + 24] - data [dataOff + 32];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 32] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 16] = tmp13 + z1;  	/* phase 5 */data [dataOff + 48] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 40] = z13 + z2;  	/* phase 6 */data [dataOff + 24] = z13 - z2;  	data [dataOff + 8] = z11 + z4;  	data [dataOff + 56] = z11 - z4;  	dataOff++;  	/* advance pointer to next column */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 56];  	tmp7 = data [dataOff + 0] - data [dataOff + 56];  	tmp1 = data [dataOff + 8] + data [dataOff + 48];  	tmp6 = data [dataOff + 8] - data [dataOff + 48];  	tmp2 = data [dataOff + 16] + data [dataOff + 40];  	tmp5 = data [dataOff + 16] - data [dataOff + 40];  	tmp3 = data [dataOff + 24] + data [dataOff + 32];  	tmp4 = data [dataOff + 24] - data [dataOff + 32];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 32] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 16] = tmp13 + z1;  	/* phase 5 */data [dataOff + 48] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 40] = z13 + z2;  	/* phase 6 */data [dataOff + 24] = z13 - z2;  	data [dataOff + 8] = z11 + z4;  	data [dataOff + 56] = z11 - z4;  	dataOff++;  	/* advance pointer to next column */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 56];  	tmp7 = data [dataOff + 0] - data [dataOff + 56];  	tmp1 = data [dataOff + 8] + data [dataOff + 48];  	tmp6 = data [dataOff + 8] - data [dataOff + 48];  	tmp2 = data [dataOff + 16] + data [dataOff + 40];  	tmp5 = data [dataOff + 16] - data [dataOff + 40];  	tmp3 = data [dataOff + 24] + data [dataOff + 32];  	tmp4 = data [dataOff + 24] - data [dataOff + 32];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 32] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 16] = tmp13 + z1;  	/* phase 5 */data [dataOff + 48] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 40] = z13 + z2;  	/* phase 6 */data [dataOff + 24] = z13 - z2;  	data [dataOff + 8] = z11 + z4;  	data [dataOff + 56] = z11 - z4;  	dataOff++;  	/* advance pointer to next column */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 56];  	tmp7 = data [dataOff + 0] - data [dataOff + 56];  	tmp1 = data [dataOff + 8] + data [dataOff + 48];  	tmp6 = data [dataOff + 8] - data [dataOff + 48];  	tmp2 = data [dataOff + 16] + data [dataOff + 40];  	tmp5 = data [dataOff + 16] - data [dataOff + 40];  	tmp3 = data [dataOff + 24] + data [dataOff + 32];  	tmp4 = data [dataOff + 24] - data [dataOff + 32];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 32] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 16] = tmp13 + z1;  	/* phase 5 */data [dataOff + 48] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 40] = z13 + z2;  	/* phase 6 */data [dataOff + 24] = z13 - z2;  	data [dataOff + 8] = z11 + z4;  	data [dataOff + 56] = z11 - z4;  	dataOff++;  	/* advance pointer to next column */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 56];  	tmp7 = data [dataOff + 0] - data [dataOff + 56];  	tmp1 = data [dataOff + 8] + data [dataOff + 48];  	tmp6 = data [dataOff + 8] - data [dataOff + 48];  	tmp2 = data [dataOff + 16] + data [dataOff + 40];  	tmp5 = data [dataOff + 16] - data [dataOff + 40];  	tmp3 = data [dataOff + 24] + data [dataOff + 32];  	tmp4 = data [dataOff + 24] - data [dataOff + 32];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 32] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 16] = tmp13 + z1;  	/* phase 5 */data [dataOff + 48] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 40] = z13 + z2;  	/* phase 6 */data [dataOff + 24] = z13 - z2;  	data [dataOff + 8] = z11 + z4;  	data [dataOff + 56] = z11 - z4;  	dataOff++;  	/* advance pointer to next column */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 56];  	tmp7 = data [dataOff + 0] - data [dataOff + 56];  	tmp1 = data [dataOff + 8] + data [dataOff + 48];  	tmp6 = data [dataOff + 8] - data [dataOff + 48];  	tmp2 = data [dataOff + 16] + data [dataOff + 40];  	tmp5 = data [dataOff + 16] - data [dataOff + 40];  	tmp3 = data [dataOff + 24] + data [dataOff + 32];  	tmp4 = data [dataOff + 24] - data [dataOff + 32];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 32] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 16] = tmp13 + z1;  	/* phase 5 */data [dataOff + 48] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 40] = z13 + z2;  	/* phase 6 */data [dataOff + 24] = z13 - z2;  	data [dataOff + 8] = z11 + z4;  	data [dataOff + 56] = z11 - z4;  	dataOff++;  	/* advance pointer to next column */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp0 = data [dataOff + 0] + data [dataOff + 56];  	tmp7 = data [dataOff + 0] - data [dataOff + 56];  	tmp1 = data [dataOff + 8] + data [dataOff + 48];  	tmp6 = data [dataOff + 8] - data [dataOff + 48];  	tmp2 = data [dataOff + 16] + data [dataOff + 40];  	tmp5 = data [dataOff + 16] - data [dataOff + 40];  	tmp3 = data [dataOff + 24] + data [dataOff + 32];  	tmp4 = data [dataOff + 24] - data [dataOff + 32];  	/* Even part */tmp10 = tmp0 + tmp3;  	/* phase 2 */tmp13 = tmp0 - tmp3;  	tmp11 = tmp1 + tmp2;  	tmp12 = tmp1 - tmp2;  	data [dataOff + 0] = tmp10 + tmp11;  	/* phase 3 */data [dataOff + 32] = tmp10 - tmp11;  	z1 = (tmp12 + tmp13) * 0.707106781f;  	/* c4 */data [dataOff + 16] = tmp13 + z1;  	/* phase 5 */data [dataOff + 48] = tmp13 - z1;  	/* Odd part */tmp10 = tmp4 + tmp5;  	/* phase 2 */tmp11 = tmp5 + tmp6;  	tmp12 = tmp6 + tmp7;  	/* The rotator is modified from fig 4-8 to avoid extra negations. */z5 = (tmp10 - tmp12) * 0.382683433f;  	/* c6 */z2 = 0.541196100f * tmp10 + z5;  	/* c2-c6 */z4 = 1.306562965f * tmp12 + z5;  	/* c2+c6 */z3 = tmp11 * 0.707106781f;  	/* c4 */z11 = tmp7 + z3;  	/* phase 5 */z13 = tmp7 - z3;  	data [dataOff + 40] = z13 + z2;  	/* phase 6 */data [dataOff + 24] = z13 - z2;  	data [dataOff + 8] = z11 + z4;  	data [dataOff + 56] = z11 - z4;  	dataOff++;  	/* advance pointer to next column */}  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: tmp0 = data [dataOff + 0] + data [dataOff + 56];  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: tmp7 = data [dataOff + 0] - data [dataOff + 56];  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: tmp1 = data [dataOff + 8] + data [dataOff + 48];  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: tmp1 = data [dataOff + 8] + data [dataOff + 48];  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: tmp6 = data [dataOff + 8] - data [dataOff + 48];  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: tmp6 = data [dataOff + 8] - data [dataOff + 48];  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: tmp2 = data [dataOff + 16] + data [dataOff + 40];  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: tmp2 = data [dataOff + 16] + data [dataOff + 40];  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: tmp5 = data [dataOff + 16] - data [dataOff + 40];  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: tmp5 = data [dataOff + 16] - data [dataOff + 40];  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: tmp3 = data [dataOff + 24] + data [dataOff + 32];  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: tmp3 = data [dataOff + 24] + data [dataOff + 32];  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: tmp4 = data [dataOff + 24] - data [dataOff + 32];  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: tmp4 = data [dataOff + 24] - data [dataOff + 32];  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: data [dataOff + 32] = tmp10 - tmp11;  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: data [dataOff + 16] = tmp13 + z1;  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: data [dataOff + 48] = tmp13 - z1;  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: data [dataOff + 40] = z13 + z2;  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: data [dataOff + 24] = z13 - z2;  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: data [dataOff + 8] = z11 + z4;  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: data [dataOff + 56] = z11 - z4;  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,fDCTQuant,The following statement contains a magic number: for (i = 0; i < 64; i++) {  	// Apply the quantization and scaling factor & Round to nearest integer  	data [i] = Mathf.Round ((data [i] * fdtbl [i]));  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,writeAPP0,The following statement contains a magic number: writeWord (16);  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,writeSOF0,The following statement contains a magic number: writeWord (17);  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,writeSOF0,The following statement contains a magic number: writeByte (8);  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,writeSOF0,The following statement contains a magic number: writeByte (3);  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,writeSOF0,The following statement contains a magic number: writeByte (2);  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,writeSOF0,The following statement contains a magic number: writeByte (3);  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,writeDQT,The following statement contains a magic number: writeWord (132);  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,writeDQT,The following statement contains a magic number: for (i = 0; i < 64; i++) {  	writeByte (YTable [i]);  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,writeDQT,The following statement contains a magic number: for (i = 0; i < 64; i++) {  	writeByte (UVTable [i]);  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,writeDHT,The following statement contains a magic number: for (i = 0; i < 16; i++) {  	writeByte (std_dc_luminance_nrcodes [i + 1]);  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,writeDHT,The following statement contains a magic number: for (i = 0; i <= 11; i++) {  	writeByte (std_dc_luminance_values [i]);  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,writeDHT,The following statement contains a magic number: for (i = 0; i < 16; i++) {  	writeByte (std_ac_luminance_nrcodes [i + 1]);  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,writeDHT,The following statement contains a magic number: for (i = 0; i <= 161; i++) {  	writeByte (std_ac_luminance_values [i]);  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,writeDHT,The following statement contains a magic number: for (i = 0; i < 16; i++) {  	writeByte (std_dc_chrominance_nrcodes [i + 1]);  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,writeDHT,The following statement contains a magic number: for (i = 0; i <= 11; i++) {  	writeByte (std_dc_chrominance_values [i]);  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,writeDHT,The following statement contains a magic number: for (i = 0; i < 16; i++) {  	writeByte (std_ac_chrominance_nrcodes [i + 1]);  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,writeDHT,The following statement contains a magic number: for (i = 0; i <= 161; i++) {  	writeByte (std_ac_chrominance_values [i]);  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,writeSOS,The following statement contains a magic number: writeWord (12);  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,writeSOS,The following statement contains a magic number: writeByte (3);  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,writeSOS,The following statement contains a magic number: writeByte (2);  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,writeSOS,The following statement contains a magic number: writeByte (3);  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,processDU,The following statement contains a magic number: for (i = 0; i < 64; i++) {  	DU [ZigZag [i]] = (int)DU_DCT [i];  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,processDU,The following statement contains a magic number: if (Diff == 0) {  	writeBits (HTDC [0]);  	// Diff might be 0  }  else {  	writeBits (HTDC [category [32767 + Diff]]);  	writeBits (bitcode [32767 + Diff]);  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,processDU,The following statement contains a magic number: if (Diff == 0) {  	writeBits (HTDC [0]);  	// Diff might be 0  }  else {  	writeBits (HTDC [category [32767 + Diff]]);  	writeBits (bitcode [32767 + Diff]);  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,processDU,The following statement contains a magic number: writeBits (HTDC [category [32767 + Diff]]);  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,processDU,The following statement contains a magic number: writeBits (bitcode [32767 + Diff]);  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,processDU,The following statement contains a magic number: while (i <= end0pos) {  	int startpos = i;  	for (; (DU [i] == 0) && (i <= end0pos); i++) {  	}  	int nrzeroes = i - startpos;  	if (nrzeroes >= 16) {  		for (int nrmarker = 1; nrmarker <= nrzeroes / 16; nrmarker++) {  			writeBits (M16zeroes);  		}  		nrzeroes = (nrzeroes & 0xF);  	}  	writeBits (HTAC [nrzeroes * 16 + category [32767 + DU [i]]]);  	writeBits (bitcode [32767 + DU [i]]);  	i++;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,processDU,The following statement contains a magic number: while (i <= end0pos) {  	int startpos = i;  	for (; (DU [i] == 0) && (i <= end0pos); i++) {  	}  	int nrzeroes = i - startpos;  	if (nrzeroes >= 16) {  		for (int nrmarker = 1; nrmarker <= nrzeroes / 16; nrmarker++) {  			writeBits (M16zeroes);  		}  		nrzeroes = (nrzeroes & 0xF);  	}  	writeBits (HTAC [nrzeroes * 16 + category [32767 + DU [i]]]);  	writeBits (bitcode [32767 + DU [i]]);  	i++;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,processDU,The following statement contains a magic number: while (i <= end0pos) {  	int startpos = i;  	for (; (DU [i] == 0) && (i <= end0pos); i++) {  	}  	int nrzeroes = i - startpos;  	if (nrzeroes >= 16) {  		for (int nrmarker = 1; nrmarker <= nrzeroes / 16; nrmarker++) {  			writeBits (M16zeroes);  		}  		nrzeroes = (nrzeroes & 0xF);  	}  	writeBits (HTAC [nrzeroes * 16 + category [32767 + DU [i]]]);  	writeBits (bitcode [32767 + DU [i]]);  	i++;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,processDU,The following statement contains a magic number: while (i <= end0pos) {  	int startpos = i;  	for (; (DU [i] == 0) && (i <= end0pos); i++) {  	}  	int nrzeroes = i - startpos;  	if (nrzeroes >= 16) {  		for (int nrmarker = 1; nrmarker <= nrzeroes / 16; nrmarker++) {  			writeBits (M16zeroes);  		}  		nrzeroes = (nrzeroes & 0xF);  	}  	writeBits (HTAC [nrzeroes * 16 + category [32767 + DU [i]]]);  	writeBits (bitcode [32767 + DU [i]]);  	i++;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,processDU,The following statement contains a magic number: while (i <= end0pos) {  	int startpos = i;  	for (; (DU [i] == 0) && (i <= end0pos); i++) {  	}  	int nrzeroes = i - startpos;  	if (nrzeroes >= 16) {  		for (int nrmarker = 1; nrmarker <= nrzeroes / 16; nrmarker++) {  			writeBits (M16zeroes);  		}  		nrzeroes = (nrzeroes & 0xF);  	}  	writeBits (HTAC [nrzeroes * 16 + category [32767 + DU [i]]]);  	writeBits (bitcode [32767 + DU [i]]);  	i++;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,processDU,The following statement contains a magic number: if (nrzeroes >= 16) {  	for (int nrmarker = 1; nrmarker <= nrzeroes / 16; nrmarker++) {  		writeBits (M16zeroes);  	}  	nrzeroes = (nrzeroes & 0xF);  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,processDU,The following statement contains a magic number: if (nrzeroes >= 16) {  	for (int nrmarker = 1; nrmarker <= nrzeroes / 16; nrmarker++) {  		writeBits (M16zeroes);  	}  	nrzeroes = (nrzeroes & 0xF);  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,processDU,The following statement contains a magic number: for (int nrmarker = 1; nrmarker <= nrzeroes / 16; nrmarker++) {  	writeBits (M16zeroes);  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,processDU,The following statement contains a magic number: writeBits (HTAC [nrzeroes * 16 + category [32767 + DU [i]]]);  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,processDU,The following statement contains a magic number: writeBits (HTAC [nrzeroes * 16 + category [32767 + DU [i]]]);  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,processDU,The following statement contains a magic number: writeBits (bitcode [32767 + DU [i]]);  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,processDU,The following statement contains a magic number: if (end0pos != 63) {  	writeBits (EOB);  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,RGB2YUV,The following statement contains a magic number: for (int y = 0; y < 8; y++) {  	for (int x = 0; x < 8; x++) {  		Color C = img.getPixelColor (xpos + x' img.height - (ypos + y));  		float R = C.r * 255;  		float G = C.g * 255;  		float B = C.b * 255;  		YDU [pos] = (((0.29900f) * R + (0.58700f) * G + (0.11400f) * B)) - 128;  		UDU [pos] = (((-0.16874f) * R + (-0.33126f) * G + (0.50000f) * B));  		VDU [pos] = (((0.50000f) * R + (-0.41869f) * G + (-0.08131f) * B));  		pos++;  	}  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,RGB2YUV,The following statement contains a magic number: for (int y = 0; y < 8; y++) {  	for (int x = 0; x < 8; x++) {  		Color C = img.getPixelColor (xpos + x' img.height - (ypos + y));  		float R = C.r * 255;  		float G = C.g * 255;  		float B = C.b * 255;  		YDU [pos] = (((0.29900f) * R + (0.58700f) * G + (0.11400f) * B)) - 128;  		UDU [pos] = (((-0.16874f) * R + (-0.33126f) * G + (0.50000f) * B));  		VDU [pos] = (((0.50000f) * R + (-0.41869f) * G + (-0.08131f) * B));  		pos++;  	}  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,RGB2YUV,The following statement contains a magic number: for (int y = 0; y < 8; y++) {  	for (int x = 0; x < 8; x++) {  		Color C = img.getPixelColor (xpos + x' img.height - (ypos + y));  		float R = C.r * 255;  		float G = C.g * 255;  		float B = C.b * 255;  		YDU [pos] = (((0.29900f) * R + (0.58700f) * G + (0.11400f) * B)) - 128;  		UDU [pos] = (((-0.16874f) * R + (-0.33126f) * G + (0.50000f) * B));  		VDU [pos] = (((0.50000f) * R + (-0.41869f) * G + (-0.08131f) * B));  		pos++;  	}  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,RGB2YUV,The following statement contains a magic number: for (int y = 0; y < 8; y++) {  	for (int x = 0; x < 8; x++) {  		Color C = img.getPixelColor (xpos + x' img.height - (ypos + y));  		float R = C.r * 255;  		float G = C.g * 255;  		float B = C.b * 255;  		YDU [pos] = (((0.29900f) * R + (0.58700f) * G + (0.11400f) * B)) - 128;  		UDU [pos] = (((-0.16874f) * R + (-0.33126f) * G + (0.50000f) * B));  		VDU [pos] = (((0.50000f) * R + (-0.41869f) * G + (-0.08131f) * B));  		pos++;  	}  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,RGB2YUV,The following statement contains a magic number: for (int y = 0; y < 8; y++) {  	for (int x = 0; x < 8; x++) {  		Color C = img.getPixelColor (xpos + x' img.height - (ypos + y));  		float R = C.r * 255;  		float G = C.g * 255;  		float B = C.b * 255;  		YDU [pos] = (((0.29900f) * R + (0.58700f) * G + (0.11400f) * B)) - 128;  		UDU [pos] = (((-0.16874f) * R + (-0.33126f) * G + (0.50000f) * B));  		VDU [pos] = (((0.50000f) * R + (-0.41869f) * G + (-0.08131f) * B));  		pos++;  	}  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,RGB2YUV,The following statement contains a magic number: for (int y = 0; y < 8; y++) {  	for (int x = 0; x < 8; x++) {  		Color C = img.getPixelColor (xpos + x' img.height - (ypos + y));  		float R = C.r * 255;  		float G = C.g * 255;  		float B = C.b * 255;  		YDU [pos] = (((0.29900f) * R + (0.58700f) * G + (0.11400f) * B)) - 128;  		UDU [pos] = (((-0.16874f) * R + (-0.33126f) * G + (0.50000f) * B));  		VDU [pos] = (((0.50000f) * R + (-0.41869f) * G + (-0.08131f) * B));  		pos++;  	}  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,RGB2YUV,The following statement contains a magic number: for (int x = 0; x < 8; x++) {  	Color C = img.getPixelColor (xpos + x' img.height - (ypos + y));  	float R = C.r * 255;  	float G = C.g * 255;  	float B = C.b * 255;  	YDU [pos] = (((0.29900f) * R + (0.58700f) * G + (0.11400f) * B)) - 128;  	UDU [pos] = (((-0.16874f) * R + (-0.33126f) * G + (0.50000f) * B));  	VDU [pos] = (((0.50000f) * R + (-0.41869f) * G + (-0.08131f) * B));  	pos++;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,RGB2YUV,The following statement contains a magic number: for (int x = 0; x < 8; x++) {  	Color C = img.getPixelColor (xpos + x' img.height - (ypos + y));  	float R = C.r * 255;  	float G = C.g * 255;  	float B = C.b * 255;  	YDU [pos] = (((0.29900f) * R + (0.58700f) * G + (0.11400f) * B)) - 128;  	UDU [pos] = (((-0.16874f) * R + (-0.33126f) * G + (0.50000f) * B));  	VDU [pos] = (((0.50000f) * R + (-0.41869f) * G + (-0.08131f) * B));  	pos++;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,RGB2YUV,The following statement contains a magic number: for (int x = 0; x < 8; x++) {  	Color C = img.getPixelColor (xpos + x' img.height - (ypos + y));  	float R = C.r * 255;  	float G = C.g * 255;  	float B = C.b * 255;  	YDU [pos] = (((0.29900f) * R + (0.58700f) * G + (0.11400f) * B)) - 128;  	UDU [pos] = (((-0.16874f) * R + (-0.33126f) * G + (0.50000f) * B));  	VDU [pos] = (((0.50000f) * R + (-0.41869f) * G + (-0.08131f) * B));  	pos++;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,RGB2YUV,The following statement contains a magic number: for (int x = 0; x < 8; x++) {  	Color C = img.getPixelColor (xpos + x' img.height - (ypos + y));  	float R = C.r * 255;  	float G = C.g * 255;  	float B = C.b * 255;  	YDU [pos] = (((0.29900f) * R + (0.58700f) * G + (0.11400f) * B)) - 128;  	UDU [pos] = (((-0.16874f) * R + (-0.33126f) * G + (0.50000f) * B));  	VDU [pos] = (((0.50000f) * R + (-0.41869f) * G + (-0.08131f) * B));  	pos++;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,RGB2YUV,The following statement contains a magic number: for (int x = 0; x < 8; x++) {  	Color C = img.getPixelColor (xpos + x' img.height - (ypos + y));  	float R = C.r * 255;  	float G = C.g * 255;  	float B = C.b * 255;  	YDU [pos] = (((0.29900f) * R + (0.58700f) * G + (0.11400f) * B)) - 128;  	UDU [pos] = (((-0.16874f) * R + (-0.33126f) * G + (0.50000f) * B));  	VDU [pos] = (((0.50000f) * R + (-0.41869f) * G + (-0.08131f) * B));  	pos++;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,RGB2YUV,The following statement contains a magic number: YDU [pos] = (((0.29900f) * R + (0.58700f) * G + (0.11400f) * B)) - 128;  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,JPGEncoder,The following statement contains a magic number: if (quality > 100) {  	quality = 100;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,JPGEncoder,The following statement contains a magic number: if (quality > 100) {  	quality = 100;  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,JPGEncoder,The following statement contains a magic number: quality = 100;  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,JPGEncoder,The following statement contains a magic number: if (quality < 50) {  	sf = (int)(5000 / quality);  }  else {  	sf = (int)(200 - quality * 2);  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,JPGEncoder,The following statement contains a magic number: if (quality < 50) {  	sf = (int)(5000 / quality);  }  else {  	sf = (int)(200 - quality * 2);  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,JPGEncoder,The following statement contains a magic number: if (quality < 50) {  	sf = (int)(5000 / quality);  }  else {  	sf = (int)(200 - quality * 2);  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,JPGEncoder,The following statement contains a magic number: if (quality < 50) {  	sf = (int)(5000 / quality);  }  else {  	sf = (int)(200 - quality * 2);  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,JPGEncoder,The following statement contains a magic number: sf = (int)(5000 / quality);  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,JPGEncoder,The following statement contains a magic number: sf = (int)(200 - quality * 2);  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,JPGEncoder,The following statement contains a magic number: sf = (int)(200 - quality * 2);  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,encode,The following statement contains a magic number: bytepos = 7;  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,encode,The following statement contains a magic number: bytepos = 7;  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,encode,The following statement contains a magic number: for (int ypos = 0; ypos < image.height; ypos += 8) {  	for (int xpos = 0; xpos < image.width; xpos += 8) {  		RGB2YUV (image' xpos' ypos);  		DCY = processDU (YDU' fdtbl_Y' DCY' YDC_HT' YAC_HT);  		DCU = processDU (UDU' fdtbl_UV' DCU' UVDC_HT' UVAC_HT);  		DCV = processDU (VDU' fdtbl_UV' DCV' UVDC_HT' UVAC_HT);  	}  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,encode,The following statement contains a magic number: for (int ypos = 0; ypos < image.height; ypos += 8) {  	for (int xpos = 0; xpos < image.width; xpos += 8) {  		RGB2YUV (image' xpos' ypos);  		DCY = processDU (YDU' fdtbl_Y' DCY' YDC_HT' YAC_HT);  		DCU = processDU (UDU' fdtbl_UV' DCU' UVDC_HT' UVAC_HT);  		DCV = processDU (VDU' fdtbl_UV' DCV' UVDC_HT' UVAC_HT);  	}  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,encode,The following statement contains a magic number: ypos += 8
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,encode,The following statement contains a magic number: for (int xpos = 0; xpos < image.width; xpos += 8) {  	RGB2YUV (image' xpos' ypos);  	DCY = processDU (YDU' fdtbl_Y' DCY' YDC_HT' YAC_HT);  	DCU = processDU (UDU' fdtbl_UV' DCU' UVDC_HT' UVAC_HT);  	DCV = processDU (VDU' fdtbl_UV' DCV' UVDC_HT' UVAC_HT);  }  
Magic Number,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,encode,The following statement contains a magic number: xpos += 8
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: while (!complete) {  	if (index == json.Length) {  		break;  	}  	c = json [index];  	index += 1;  	if (c == '"') {  		complete = true;  		break;  	}  	else if (c == '\\') {  		if (index == json.Length) {  			break;  		}  		c = json [index];  		index += 1;  		if (c == '"') {  			tmp.Add ('"');  		}  		else if (c == '\\') {  			tmp.Add ('\\');  		}  		else if (c == '/') {  			tmp.Add ('/');  		}  		else if (c == 'b') {  			tmp.Add ('\b');  		}  		else if (c == 'f') {  			tmp.Add ('\f');  		}  		else if (c == 'n') {  			tmp.Add ('\n');  		}  		else if (c == 'r') {  			tmp.Add ('\r');  		}  		else if (c == 't') {  			tmp.Add ('\t');  		}  		else if (c == 'u') {  			int remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				// fetch the next 4 chars  				char[] unicodeCharArray = new char[4];  				System.Array.Copy (json' index' unicodeCharArray' 0' 4);  				// parse the 32 bit hex into an integer codepoint  				int codePoint = 0;  				for (int i = 0; i < unicodeCharArray.Length; ++i) {  					codePoint *= 16;  					var v = unicodeCharArray [i];  					if (v >= 'A' && v <= 'F') {  						codePoint += 10 + (v - 'A');  					}  					else if (v >= 'a' && v <= 'f') {  						codePoint += 10 + (v - 'a');  					}  					else if (v >= '0' && v <= '9') {  						codePoint += (v - '0');  					}  				}  				// convert the integer codepoint to a unicode char and add to string  				if (codePoint < 0xD7FF || codePoint >= 0xE000) {  					tmp.Add ((char)codePoint);  					surrogate = 0;  				}  				else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  					tmp.Add ((char)surrogate);  					tmp.Add ((char)codePoint);  					surrogate = 0;  				}  				else if (char.IsHighSurrogate ((char)codePoint)) {  					surrogate = codePoint;  				}  				else {  					// crap  					surrogate = 0;  				}  				// skip 4 chars  				index += 4;  			}  			else {  				break;  			}  		}  	}  	else {  		tmp.Add (c);  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: while (!complete) {  	if (index == json.Length) {  		break;  	}  	c = json [index];  	index += 1;  	if (c == '"') {  		complete = true;  		break;  	}  	else if (c == '\\') {  		if (index == json.Length) {  			break;  		}  		c = json [index];  		index += 1;  		if (c == '"') {  			tmp.Add ('"');  		}  		else if (c == '\\') {  			tmp.Add ('\\');  		}  		else if (c == '/') {  			tmp.Add ('/');  		}  		else if (c == 'b') {  			tmp.Add ('\b');  		}  		else if (c == 'f') {  			tmp.Add ('\f');  		}  		else if (c == 'n') {  			tmp.Add ('\n');  		}  		else if (c == 'r') {  			tmp.Add ('\r');  		}  		else if (c == 't') {  			tmp.Add ('\t');  		}  		else if (c == 'u') {  			int remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				// fetch the next 4 chars  				char[] unicodeCharArray = new char[4];  				System.Array.Copy (json' index' unicodeCharArray' 0' 4);  				// parse the 32 bit hex into an integer codepoint  				int codePoint = 0;  				for (int i = 0; i < unicodeCharArray.Length; ++i) {  					codePoint *= 16;  					var v = unicodeCharArray [i];  					if (v >= 'A' && v <= 'F') {  						codePoint += 10 + (v - 'A');  					}  					else if (v >= 'a' && v <= 'f') {  						codePoint += 10 + (v - 'a');  					}  					else if (v >= '0' && v <= '9') {  						codePoint += (v - '0');  					}  				}  				// convert the integer codepoint to a unicode char and add to string  				if (codePoint < 0xD7FF || codePoint >= 0xE000) {  					tmp.Add ((char)codePoint);  					surrogate = 0;  				}  				else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  					tmp.Add ((char)surrogate);  					tmp.Add ((char)codePoint);  					surrogate = 0;  				}  				else if (char.IsHighSurrogate ((char)codePoint)) {  					surrogate = codePoint;  				}  				else {  					// crap  					surrogate = 0;  				}  				// skip 4 chars  				index += 4;  			}  			else {  				break;  			}  		}  	}  	else {  		tmp.Add (c);  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: while (!complete) {  	if (index == json.Length) {  		break;  	}  	c = json [index];  	index += 1;  	if (c == '"') {  		complete = true;  		break;  	}  	else if (c == '\\') {  		if (index == json.Length) {  			break;  		}  		c = json [index];  		index += 1;  		if (c == '"') {  			tmp.Add ('"');  		}  		else if (c == '\\') {  			tmp.Add ('\\');  		}  		else if (c == '/') {  			tmp.Add ('/');  		}  		else if (c == 'b') {  			tmp.Add ('\b');  		}  		else if (c == 'f') {  			tmp.Add ('\f');  		}  		else if (c == 'n') {  			tmp.Add ('\n');  		}  		else if (c == 'r') {  			tmp.Add ('\r');  		}  		else if (c == 't') {  			tmp.Add ('\t');  		}  		else if (c == 'u') {  			int remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				// fetch the next 4 chars  				char[] unicodeCharArray = new char[4];  				System.Array.Copy (json' index' unicodeCharArray' 0' 4);  				// parse the 32 bit hex into an integer codepoint  				int codePoint = 0;  				for (int i = 0; i < unicodeCharArray.Length; ++i) {  					codePoint *= 16;  					var v = unicodeCharArray [i];  					if (v >= 'A' && v <= 'F') {  						codePoint += 10 + (v - 'A');  					}  					else if (v >= 'a' && v <= 'f') {  						codePoint += 10 + (v - 'a');  					}  					else if (v >= '0' && v <= '9') {  						codePoint += (v - '0');  					}  				}  				// convert the integer codepoint to a unicode char and add to string  				if (codePoint < 0xD7FF || codePoint >= 0xE000) {  					tmp.Add ((char)codePoint);  					surrogate = 0;  				}  				else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  					tmp.Add ((char)surrogate);  					tmp.Add ((char)codePoint);  					surrogate = 0;  				}  				else if (char.IsHighSurrogate ((char)codePoint)) {  					surrogate = codePoint;  				}  				else {  					// crap  					surrogate = 0;  				}  				// skip 4 chars  				index += 4;  			}  			else {  				break;  			}  		}  	}  	else {  		tmp.Add (c);  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: while (!complete) {  	if (index == json.Length) {  		break;  	}  	c = json [index];  	index += 1;  	if (c == '"') {  		complete = true;  		break;  	}  	else if (c == '\\') {  		if (index == json.Length) {  			break;  		}  		c = json [index];  		index += 1;  		if (c == '"') {  			tmp.Add ('"');  		}  		else if (c == '\\') {  			tmp.Add ('\\');  		}  		else if (c == '/') {  			tmp.Add ('/');  		}  		else if (c == 'b') {  			tmp.Add ('\b');  		}  		else if (c == 'f') {  			tmp.Add ('\f');  		}  		else if (c == 'n') {  			tmp.Add ('\n');  		}  		else if (c == 'r') {  			tmp.Add ('\r');  		}  		else if (c == 't') {  			tmp.Add ('\t');  		}  		else if (c == 'u') {  			int remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				// fetch the next 4 chars  				char[] unicodeCharArray = new char[4];  				System.Array.Copy (json' index' unicodeCharArray' 0' 4);  				// parse the 32 bit hex into an integer codepoint  				int codePoint = 0;  				for (int i = 0; i < unicodeCharArray.Length; ++i) {  					codePoint *= 16;  					var v = unicodeCharArray [i];  					if (v >= 'A' && v <= 'F') {  						codePoint += 10 + (v - 'A');  					}  					else if (v >= 'a' && v <= 'f') {  						codePoint += 10 + (v - 'a');  					}  					else if (v >= '0' && v <= '9') {  						codePoint += (v - '0');  					}  				}  				// convert the integer codepoint to a unicode char and add to string  				if (codePoint < 0xD7FF || codePoint >= 0xE000) {  					tmp.Add ((char)codePoint);  					surrogate = 0;  				}  				else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  					tmp.Add ((char)surrogate);  					tmp.Add ((char)codePoint);  					surrogate = 0;  				}  				else if (char.IsHighSurrogate ((char)codePoint)) {  					surrogate = codePoint;  				}  				else {  					// crap  					surrogate = 0;  				}  				// skip 4 chars  				index += 4;  			}  			else {  				break;  			}  		}  	}  	else {  		tmp.Add (c);  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: while (!complete) {  	if (index == json.Length) {  		break;  	}  	c = json [index];  	index += 1;  	if (c == '"') {  		complete = true;  		break;  	}  	else if (c == '\\') {  		if (index == json.Length) {  			break;  		}  		c = json [index];  		index += 1;  		if (c == '"') {  			tmp.Add ('"');  		}  		else if (c == '\\') {  			tmp.Add ('\\');  		}  		else if (c == '/') {  			tmp.Add ('/');  		}  		else if (c == 'b') {  			tmp.Add ('\b');  		}  		else if (c == 'f') {  			tmp.Add ('\f');  		}  		else if (c == 'n') {  			tmp.Add ('\n');  		}  		else if (c == 'r') {  			tmp.Add ('\r');  		}  		else if (c == 't') {  			tmp.Add ('\t');  		}  		else if (c == 'u') {  			int remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				// fetch the next 4 chars  				char[] unicodeCharArray = new char[4];  				System.Array.Copy (json' index' unicodeCharArray' 0' 4);  				// parse the 32 bit hex into an integer codepoint  				int codePoint = 0;  				for (int i = 0; i < unicodeCharArray.Length; ++i) {  					codePoint *= 16;  					var v = unicodeCharArray [i];  					if (v >= 'A' && v <= 'F') {  						codePoint += 10 + (v - 'A');  					}  					else if (v >= 'a' && v <= 'f') {  						codePoint += 10 + (v - 'a');  					}  					else if (v >= '0' && v <= '9') {  						codePoint += (v - '0');  					}  				}  				// convert the integer codepoint to a unicode char and add to string  				if (codePoint < 0xD7FF || codePoint >= 0xE000) {  					tmp.Add ((char)codePoint);  					surrogate = 0;  				}  				else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  					tmp.Add ((char)surrogate);  					tmp.Add ((char)codePoint);  					surrogate = 0;  				}  				else if (char.IsHighSurrogate ((char)codePoint)) {  					surrogate = codePoint;  				}  				else {  					// crap  					surrogate = 0;  				}  				// skip 4 chars  				index += 4;  			}  			else {  				break;  			}  		}  	}  	else {  		tmp.Add (c);  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: while (!complete) {  	if (index == json.Length) {  		break;  	}  	c = json [index];  	index += 1;  	if (c == '"') {  		complete = true;  		break;  	}  	else if (c == '\\') {  		if (index == json.Length) {  			break;  		}  		c = json [index];  		index += 1;  		if (c == '"') {  			tmp.Add ('"');  		}  		else if (c == '\\') {  			tmp.Add ('\\');  		}  		else if (c == '/') {  			tmp.Add ('/');  		}  		else if (c == 'b') {  			tmp.Add ('\b');  		}  		else if (c == 'f') {  			tmp.Add ('\f');  		}  		else if (c == 'n') {  			tmp.Add ('\n');  		}  		else if (c == 'r') {  			tmp.Add ('\r');  		}  		else if (c == 't') {  			tmp.Add ('\t');  		}  		else if (c == 'u') {  			int remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				// fetch the next 4 chars  				char[] unicodeCharArray = new char[4];  				System.Array.Copy (json' index' unicodeCharArray' 0' 4);  				// parse the 32 bit hex into an integer codepoint  				int codePoint = 0;  				for (int i = 0; i < unicodeCharArray.Length; ++i) {  					codePoint *= 16;  					var v = unicodeCharArray [i];  					if (v >= 'A' && v <= 'F') {  						codePoint += 10 + (v - 'A');  					}  					else if (v >= 'a' && v <= 'f') {  						codePoint += 10 + (v - 'a');  					}  					else if (v >= '0' && v <= '9') {  						codePoint += (v - '0');  					}  				}  				// convert the integer codepoint to a unicode char and add to string  				if (codePoint < 0xD7FF || codePoint >= 0xE000) {  					tmp.Add ((char)codePoint);  					surrogate = 0;  				}  				else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  					tmp.Add ((char)surrogate);  					tmp.Add ((char)codePoint);  					surrogate = 0;  				}  				else if (char.IsHighSurrogate ((char)codePoint)) {  					surrogate = codePoint;  				}  				else {  					// crap  					surrogate = 0;  				}  				// skip 4 chars  				index += 4;  			}  			else {  				break;  			}  		}  	}  	else {  		tmp.Add (c);  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: while (!complete) {  	if (index == json.Length) {  		break;  	}  	c = json [index];  	index += 1;  	if (c == '"') {  		complete = true;  		break;  	}  	else if (c == '\\') {  		if (index == json.Length) {  			break;  		}  		c = json [index];  		index += 1;  		if (c == '"') {  			tmp.Add ('"');  		}  		else if (c == '\\') {  			tmp.Add ('\\');  		}  		else if (c == '/') {  			tmp.Add ('/');  		}  		else if (c == 'b') {  			tmp.Add ('\b');  		}  		else if (c == 'f') {  			tmp.Add ('\f');  		}  		else if (c == 'n') {  			tmp.Add ('\n');  		}  		else if (c == 'r') {  			tmp.Add ('\r');  		}  		else if (c == 't') {  			tmp.Add ('\t');  		}  		else if (c == 'u') {  			int remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				// fetch the next 4 chars  				char[] unicodeCharArray = new char[4];  				System.Array.Copy (json' index' unicodeCharArray' 0' 4);  				// parse the 32 bit hex into an integer codepoint  				int codePoint = 0;  				for (int i = 0; i < unicodeCharArray.Length; ++i) {  					codePoint *= 16;  					var v = unicodeCharArray [i];  					if (v >= 'A' && v <= 'F') {  						codePoint += 10 + (v - 'A');  					}  					else if (v >= 'a' && v <= 'f') {  						codePoint += 10 + (v - 'a');  					}  					else if (v >= '0' && v <= '9') {  						codePoint += (v - '0');  					}  				}  				// convert the integer codepoint to a unicode char and add to string  				if (codePoint < 0xD7FF || codePoint >= 0xE000) {  					tmp.Add ((char)codePoint);  					surrogate = 0;  				}  				else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  					tmp.Add ((char)surrogate);  					tmp.Add ((char)codePoint);  					surrogate = 0;  				}  				else if (char.IsHighSurrogate ((char)codePoint)) {  					surrogate = codePoint;  				}  				else {  					// crap  					surrogate = 0;  				}  				// skip 4 chars  				index += 4;  			}  			else {  				break;  			}  		}  	}  	else {  		tmp.Add (c);  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	complete = true;  	break;  }  else if (c == '\\') {  	if (index == json.Length) {  		break;  	}  	c = json [index];  	index += 1;  	if (c == '"') {  		tmp.Add ('"');  	}  	else if (c == '\\') {  		tmp.Add ('\\');  	}  	else if (c == '/') {  		tmp.Add ('/');  	}  	else if (c == 'b') {  		tmp.Add ('\b');  	}  	else if (c == 'f') {  		tmp.Add ('\f');  	}  	else if (c == 'n') {  		tmp.Add ('\n');  	}  	else if (c == 'r') {  		tmp.Add ('\r');  	}  	else if (c == 't') {  		tmp.Add ('\t');  	}  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// fetch the next 4 chars  			char[] unicodeCharArray = new char[4];  			System.Array.Copy (json' index' unicodeCharArray' 0' 4);  			// parse the 32 bit hex into an integer codepoint  			int codePoint = 0;  			for (int i = 0; i < unicodeCharArray.Length; ++i) {  				codePoint *= 16;  				var v = unicodeCharArray [i];  				if (v >= 'A' && v <= 'F') {  					codePoint += 10 + (v - 'A');  				}  				else if (v >= 'a' && v <= 'f') {  					codePoint += 10 + (v - 'a');  				}  				else if (v >= '0' && v <= '9') {  					codePoint += (v - '0');  				}  			}  			// convert the integer codepoint to a unicode char and add to string  			if (codePoint < 0xD7FF || codePoint >= 0xE000) {  				tmp.Add ((char)codePoint);  				surrogate = 0;  			}  			else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  				tmp.Add ((char)surrogate);  				tmp.Add ((char)codePoint);  				surrogate = 0;  			}  			else if (char.IsHighSurrogate ((char)codePoint)) {  				surrogate = codePoint;  			}  			else {  				// crap  				surrogate = 0;  			}  			// skip 4 chars  			index += 4;  		}  		else {  			break;  		}  	}  }  else {  	tmp.Add (c);  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	complete = true;  	break;  }  else if (c == '\\') {  	if (index == json.Length) {  		break;  	}  	c = json [index];  	index += 1;  	if (c == '"') {  		tmp.Add ('"');  	}  	else if (c == '\\') {  		tmp.Add ('\\');  	}  	else if (c == '/') {  		tmp.Add ('/');  	}  	else if (c == 'b') {  		tmp.Add ('\b');  	}  	else if (c == 'f') {  		tmp.Add ('\f');  	}  	else if (c == 'n') {  		tmp.Add ('\n');  	}  	else if (c == 'r') {  		tmp.Add ('\r');  	}  	else if (c == 't') {  		tmp.Add ('\t');  	}  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// fetch the next 4 chars  			char[] unicodeCharArray = new char[4];  			System.Array.Copy (json' index' unicodeCharArray' 0' 4);  			// parse the 32 bit hex into an integer codepoint  			int codePoint = 0;  			for (int i = 0; i < unicodeCharArray.Length; ++i) {  				codePoint *= 16;  				var v = unicodeCharArray [i];  				if (v >= 'A' && v <= 'F') {  					codePoint += 10 + (v - 'A');  				}  				else if (v >= 'a' && v <= 'f') {  					codePoint += 10 + (v - 'a');  				}  				else if (v >= '0' && v <= '9') {  					codePoint += (v - '0');  				}  			}  			// convert the integer codepoint to a unicode char and add to string  			if (codePoint < 0xD7FF || codePoint >= 0xE000) {  				tmp.Add ((char)codePoint);  				surrogate = 0;  			}  			else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  				tmp.Add ((char)surrogate);  				tmp.Add ((char)codePoint);  				surrogate = 0;  			}  			else if (char.IsHighSurrogate ((char)codePoint)) {  				surrogate = codePoint;  			}  			else {  				// crap  				surrogate = 0;  			}  			// skip 4 chars  			index += 4;  		}  		else {  			break;  		}  	}  }  else {  	tmp.Add (c);  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	complete = true;  	break;  }  else if (c == '\\') {  	if (index == json.Length) {  		break;  	}  	c = json [index];  	index += 1;  	if (c == '"') {  		tmp.Add ('"');  	}  	else if (c == '\\') {  		tmp.Add ('\\');  	}  	else if (c == '/') {  		tmp.Add ('/');  	}  	else if (c == 'b') {  		tmp.Add ('\b');  	}  	else if (c == 'f') {  		tmp.Add ('\f');  	}  	else if (c == 'n') {  		tmp.Add ('\n');  	}  	else if (c == 'r') {  		tmp.Add ('\r');  	}  	else if (c == 't') {  		tmp.Add ('\t');  	}  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// fetch the next 4 chars  			char[] unicodeCharArray = new char[4];  			System.Array.Copy (json' index' unicodeCharArray' 0' 4);  			// parse the 32 bit hex into an integer codepoint  			int codePoint = 0;  			for (int i = 0; i < unicodeCharArray.Length; ++i) {  				codePoint *= 16;  				var v = unicodeCharArray [i];  				if (v >= 'A' && v <= 'F') {  					codePoint += 10 + (v - 'A');  				}  				else if (v >= 'a' && v <= 'f') {  					codePoint += 10 + (v - 'a');  				}  				else if (v >= '0' && v <= '9') {  					codePoint += (v - '0');  				}  			}  			// convert the integer codepoint to a unicode char and add to string  			if (codePoint < 0xD7FF || codePoint >= 0xE000) {  				tmp.Add ((char)codePoint);  				surrogate = 0;  			}  			else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  				tmp.Add ((char)surrogate);  				tmp.Add ((char)codePoint);  				surrogate = 0;  			}  			else if (char.IsHighSurrogate ((char)codePoint)) {  				surrogate = codePoint;  			}  			else {  				// crap  				surrogate = 0;  			}  			// skip 4 chars  			index += 4;  		}  		else {  			break;  		}  	}  }  else {  	tmp.Add (c);  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	complete = true;  	break;  }  else if (c == '\\') {  	if (index == json.Length) {  		break;  	}  	c = json [index];  	index += 1;  	if (c == '"') {  		tmp.Add ('"');  	}  	else if (c == '\\') {  		tmp.Add ('\\');  	}  	else if (c == '/') {  		tmp.Add ('/');  	}  	else if (c == 'b') {  		tmp.Add ('\b');  	}  	else if (c == 'f') {  		tmp.Add ('\f');  	}  	else if (c == 'n') {  		tmp.Add ('\n');  	}  	else if (c == 'r') {  		tmp.Add ('\r');  	}  	else if (c == 't') {  		tmp.Add ('\t');  	}  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// fetch the next 4 chars  			char[] unicodeCharArray = new char[4];  			System.Array.Copy (json' index' unicodeCharArray' 0' 4);  			// parse the 32 bit hex into an integer codepoint  			int codePoint = 0;  			for (int i = 0; i < unicodeCharArray.Length; ++i) {  				codePoint *= 16;  				var v = unicodeCharArray [i];  				if (v >= 'A' && v <= 'F') {  					codePoint += 10 + (v - 'A');  				}  				else if (v >= 'a' && v <= 'f') {  					codePoint += 10 + (v - 'a');  				}  				else if (v >= '0' && v <= '9') {  					codePoint += (v - '0');  				}  			}  			// convert the integer codepoint to a unicode char and add to string  			if (codePoint < 0xD7FF || codePoint >= 0xE000) {  				tmp.Add ((char)codePoint);  				surrogate = 0;  			}  			else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  				tmp.Add ((char)surrogate);  				tmp.Add ((char)codePoint);  				surrogate = 0;  			}  			else if (char.IsHighSurrogate ((char)codePoint)) {  				surrogate = codePoint;  			}  			else {  				// crap  				surrogate = 0;  			}  			// skip 4 chars  			index += 4;  		}  		else {  			break;  		}  	}  }  else {  	tmp.Add (c);  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	complete = true;  	break;  }  else if (c == '\\') {  	if (index == json.Length) {  		break;  	}  	c = json [index];  	index += 1;  	if (c == '"') {  		tmp.Add ('"');  	}  	else if (c == '\\') {  		tmp.Add ('\\');  	}  	else if (c == '/') {  		tmp.Add ('/');  	}  	else if (c == 'b') {  		tmp.Add ('\b');  	}  	else if (c == 'f') {  		tmp.Add ('\f');  	}  	else if (c == 'n') {  		tmp.Add ('\n');  	}  	else if (c == 'r') {  		tmp.Add ('\r');  	}  	else if (c == 't') {  		tmp.Add ('\t');  	}  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// fetch the next 4 chars  			char[] unicodeCharArray = new char[4];  			System.Array.Copy (json' index' unicodeCharArray' 0' 4);  			// parse the 32 bit hex into an integer codepoint  			int codePoint = 0;  			for (int i = 0; i < unicodeCharArray.Length; ++i) {  				codePoint *= 16;  				var v = unicodeCharArray [i];  				if (v >= 'A' && v <= 'F') {  					codePoint += 10 + (v - 'A');  				}  				else if (v >= 'a' && v <= 'f') {  					codePoint += 10 + (v - 'a');  				}  				else if (v >= '0' && v <= '9') {  					codePoint += (v - '0');  				}  			}  			// convert the integer codepoint to a unicode char and add to string  			if (codePoint < 0xD7FF || codePoint >= 0xE000) {  				tmp.Add ((char)codePoint);  				surrogate = 0;  			}  			else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  				tmp.Add ((char)surrogate);  				tmp.Add ((char)codePoint);  				surrogate = 0;  			}  			else if (char.IsHighSurrogate ((char)codePoint)) {  				surrogate = codePoint;  			}  			else {  				// crap  				surrogate = 0;  			}  			// skip 4 chars  			index += 4;  		}  		else {  			break;  		}  	}  }  else {  	tmp.Add (c);  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	complete = true;  	break;  }  else if (c == '\\') {  	if (index == json.Length) {  		break;  	}  	c = json [index];  	index += 1;  	if (c == '"') {  		tmp.Add ('"');  	}  	else if (c == '\\') {  		tmp.Add ('\\');  	}  	else if (c == '/') {  		tmp.Add ('/');  	}  	else if (c == 'b') {  		tmp.Add ('\b');  	}  	else if (c == 'f') {  		tmp.Add ('\f');  	}  	else if (c == 'n') {  		tmp.Add ('\n');  	}  	else if (c == 'r') {  		tmp.Add ('\r');  	}  	else if (c == 't') {  		tmp.Add ('\t');  	}  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// fetch the next 4 chars  			char[] unicodeCharArray = new char[4];  			System.Array.Copy (json' index' unicodeCharArray' 0' 4);  			// parse the 32 bit hex into an integer codepoint  			int codePoint = 0;  			for (int i = 0; i < unicodeCharArray.Length; ++i) {  				codePoint *= 16;  				var v = unicodeCharArray [i];  				if (v >= 'A' && v <= 'F') {  					codePoint += 10 + (v - 'A');  				}  				else if (v >= 'a' && v <= 'f') {  					codePoint += 10 + (v - 'a');  				}  				else if (v >= '0' && v <= '9') {  					codePoint += (v - '0');  				}  			}  			// convert the integer codepoint to a unicode char and add to string  			if (codePoint < 0xD7FF || codePoint >= 0xE000) {  				tmp.Add ((char)codePoint);  				surrogate = 0;  			}  			else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  				tmp.Add ((char)surrogate);  				tmp.Add ((char)codePoint);  				surrogate = 0;  			}  			else if (char.IsHighSurrogate ((char)codePoint)) {  				surrogate = codePoint;  			}  			else {  				// crap  				surrogate = 0;  			}  			// skip 4 chars  			index += 4;  		}  		else {  			break;  		}  	}  }  else {  	tmp.Add (c);  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	complete = true;  	break;  }  else if (c == '\\') {  	if (index == json.Length) {  		break;  	}  	c = json [index];  	index += 1;  	if (c == '"') {  		tmp.Add ('"');  	}  	else if (c == '\\') {  		tmp.Add ('\\');  	}  	else if (c == '/') {  		tmp.Add ('/');  	}  	else if (c == 'b') {  		tmp.Add ('\b');  	}  	else if (c == 'f') {  		tmp.Add ('\f');  	}  	else if (c == 'n') {  		tmp.Add ('\n');  	}  	else if (c == 'r') {  		tmp.Add ('\r');  	}  	else if (c == 't') {  		tmp.Add ('\t');  	}  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// fetch the next 4 chars  			char[] unicodeCharArray = new char[4];  			System.Array.Copy (json' index' unicodeCharArray' 0' 4);  			// parse the 32 bit hex into an integer codepoint  			int codePoint = 0;  			for (int i = 0; i < unicodeCharArray.Length; ++i) {  				codePoint *= 16;  				var v = unicodeCharArray [i];  				if (v >= 'A' && v <= 'F') {  					codePoint += 10 + (v - 'A');  				}  				else if (v >= 'a' && v <= 'f') {  					codePoint += 10 + (v - 'a');  				}  				else if (v >= '0' && v <= '9') {  					codePoint += (v - '0');  				}  			}  			// convert the integer codepoint to a unicode char and add to string  			if (codePoint < 0xD7FF || codePoint >= 0xE000) {  				tmp.Add ((char)codePoint);  				surrogate = 0;  			}  			else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  				tmp.Add ((char)surrogate);  				tmp.Add ((char)codePoint);  				surrogate = 0;  			}  			else if (char.IsHighSurrogate ((char)codePoint)) {  				surrogate = codePoint;  			}  			else {  				// crap  				surrogate = 0;  			}  			// skip 4 chars  			index += 4;  		}  		else {  			break;  		}  	}  }  else {  	tmp.Add (c);  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length) {  		break;  	}  	c = json [index];  	index += 1;  	if (c == '"') {  		tmp.Add ('"');  	}  	else if (c == '\\') {  		tmp.Add ('\\');  	}  	else if (c == '/') {  		tmp.Add ('/');  	}  	else if (c == 'b') {  		tmp.Add ('\b');  	}  	else if (c == 'f') {  		tmp.Add ('\f');  	}  	else if (c == 'n') {  		tmp.Add ('\n');  	}  	else if (c == 'r') {  		tmp.Add ('\r');  	}  	else if (c == 't') {  		tmp.Add ('\t');  	}  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// fetch the next 4 chars  			char[] unicodeCharArray = new char[4];  			System.Array.Copy (json' index' unicodeCharArray' 0' 4);  			// parse the 32 bit hex into an integer codepoint  			int codePoint = 0;  			for (int i = 0; i < unicodeCharArray.Length; ++i) {  				codePoint *= 16;  				var v = unicodeCharArray [i];  				if (v >= 'A' && v <= 'F') {  					codePoint += 10 + (v - 'A');  				}  				else if (v >= 'a' && v <= 'f') {  					codePoint += 10 + (v - 'a');  				}  				else if (v >= '0' && v <= '9') {  					codePoint += (v - '0');  				}  			}  			// convert the integer codepoint to a unicode char and add to string  			if (codePoint < 0xD7FF || codePoint >= 0xE000) {  				tmp.Add ((char)codePoint);  				surrogate = 0;  			}  			else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  				tmp.Add ((char)surrogate);  				tmp.Add ((char)codePoint);  				surrogate = 0;  			}  			else if (char.IsHighSurrogate ((char)codePoint)) {  				surrogate = codePoint;  			}  			else {  				// crap  				surrogate = 0;  			}  			// skip 4 chars  			index += 4;  		}  		else {  			break;  		}  	}  }  else {  	tmp.Add (c);  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length) {  		break;  	}  	c = json [index];  	index += 1;  	if (c == '"') {  		tmp.Add ('"');  	}  	else if (c == '\\') {  		tmp.Add ('\\');  	}  	else if (c == '/') {  		tmp.Add ('/');  	}  	else if (c == 'b') {  		tmp.Add ('\b');  	}  	else if (c == 'f') {  		tmp.Add ('\f');  	}  	else if (c == 'n') {  		tmp.Add ('\n');  	}  	else if (c == 'r') {  		tmp.Add ('\r');  	}  	else if (c == 't') {  		tmp.Add ('\t');  	}  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// fetch the next 4 chars  			char[] unicodeCharArray = new char[4];  			System.Array.Copy (json' index' unicodeCharArray' 0' 4);  			// parse the 32 bit hex into an integer codepoint  			int codePoint = 0;  			for (int i = 0; i < unicodeCharArray.Length; ++i) {  				codePoint *= 16;  				var v = unicodeCharArray [i];  				if (v >= 'A' && v <= 'F') {  					codePoint += 10 + (v - 'A');  				}  				else if (v >= 'a' && v <= 'f') {  					codePoint += 10 + (v - 'a');  				}  				else if (v >= '0' && v <= '9') {  					codePoint += (v - '0');  				}  			}  			// convert the integer codepoint to a unicode char and add to string  			if (codePoint < 0xD7FF || codePoint >= 0xE000) {  				tmp.Add ((char)codePoint);  				surrogate = 0;  			}  			else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  				tmp.Add ((char)surrogate);  				tmp.Add ((char)codePoint);  				surrogate = 0;  			}  			else if (char.IsHighSurrogate ((char)codePoint)) {  				surrogate = codePoint;  			}  			else {  				// crap  				surrogate = 0;  			}  			// skip 4 chars  			index += 4;  		}  		else {  			break;  		}  	}  }  else {  	tmp.Add (c);  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length) {  		break;  	}  	c = json [index];  	index += 1;  	if (c == '"') {  		tmp.Add ('"');  	}  	else if (c == '\\') {  		tmp.Add ('\\');  	}  	else if (c == '/') {  		tmp.Add ('/');  	}  	else if (c == 'b') {  		tmp.Add ('\b');  	}  	else if (c == 'f') {  		tmp.Add ('\f');  	}  	else if (c == 'n') {  		tmp.Add ('\n');  	}  	else if (c == 'r') {  		tmp.Add ('\r');  	}  	else if (c == 't') {  		tmp.Add ('\t');  	}  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// fetch the next 4 chars  			char[] unicodeCharArray = new char[4];  			System.Array.Copy (json' index' unicodeCharArray' 0' 4);  			// parse the 32 bit hex into an integer codepoint  			int codePoint = 0;  			for (int i = 0; i < unicodeCharArray.Length; ++i) {  				codePoint *= 16;  				var v = unicodeCharArray [i];  				if (v >= 'A' && v <= 'F') {  					codePoint += 10 + (v - 'A');  				}  				else if (v >= 'a' && v <= 'f') {  					codePoint += 10 + (v - 'a');  				}  				else if (v >= '0' && v <= '9') {  					codePoint += (v - '0');  				}  			}  			// convert the integer codepoint to a unicode char and add to string  			if (codePoint < 0xD7FF || codePoint >= 0xE000) {  				tmp.Add ((char)codePoint);  				surrogate = 0;  			}  			else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  				tmp.Add ((char)surrogate);  				tmp.Add ((char)codePoint);  				surrogate = 0;  			}  			else if (char.IsHighSurrogate ((char)codePoint)) {  				surrogate = codePoint;  			}  			else {  				// crap  				surrogate = 0;  			}  			// skip 4 chars  			index += 4;  		}  		else {  			break;  		}  	}  }  else {  	tmp.Add (c);  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length) {  		break;  	}  	c = json [index];  	index += 1;  	if (c == '"') {  		tmp.Add ('"');  	}  	else if (c == '\\') {  		tmp.Add ('\\');  	}  	else if (c == '/') {  		tmp.Add ('/');  	}  	else if (c == 'b') {  		tmp.Add ('\b');  	}  	else if (c == 'f') {  		tmp.Add ('\f');  	}  	else if (c == 'n') {  		tmp.Add ('\n');  	}  	else if (c == 'r') {  		tmp.Add ('\r');  	}  	else if (c == 't') {  		tmp.Add ('\t');  	}  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// fetch the next 4 chars  			char[] unicodeCharArray = new char[4];  			System.Array.Copy (json' index' unicodeCharArray' 0' 4);  			// parse the 32 bit hex into an integer codepoint  			int codePoint = 0;  			for (int i = 0; i < unicodeCharArray.Length; ++i) {  				codePoint *= 16;  				var v = unicodeCharArray [i];  				if (v >= 'A' && v <= 'F') {  					codePoint += 10 + (v - 'A');  				}  				else if (v >= 'a' && v <= 'f') {  					codePoint += 10 + (v - 'a');  				}  				else if (v >= '0' && v <= '9') {  					codePoint += (v - '0');  				}  			}  			// convert the integer codepoint to a unicode char and add to string  			if (codePoint < 0xD7FF || codePoint >= 0xE000) {  				tmp.Add ((char)codePoint);  				surrogate = 0;  			}  			else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  				tmp.Add ((char)surrogate);  				tmp.Add ((char)codePoint);  				surrogate = 0;  			}  			else if (char.IsHighSurrogate ((char)codePoint)) {  				surrogate = codePoint;  			}  			else {  				// crap  				surrogate = 0;  			}  			// skip 4 chars  			index += 4;  		}  		else {  			break;  		}  	}  }  else {  	tmp.Add (c);  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length) {  		break;  	}  	c = json [index];  	index += 1;  	if (c == '"') {  		tmp.Add ('"');  	}  	else if (c == '\\') {  		tmp.Add ('\\');  	}  	else if (c == '/') {  		tmp.Add ('/');  	}  	else if (c == 'b') {  		tmp.Add ('\b');  	}  	else if (c == 'f') {  		tmp.Add ('\f');  	}  	else if (c == 'n') {  		tmp.Add ('\n');  	}  	else if (c == 'r') {  		tmp.Add ('\r');  	}  	else if (c == 't') {  		tmp.Add ('\t');  	}  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// fetch the next 4 chars  			char[] unicodeCharArray = new char[4];  			System.Array.Copy (json' index' unicodeCharArray' 0' 4);  			// parse the 32 bit hex into an integer codepoint  			int codePoint = 0;  			for (int i = 0; i < unicodeCharArray.Length; ++i) {  				codePoint *= 16;  				var v = unicodeCharArray [i];  				if (v >= 'A' && v <= 'F') {  					codePoint += 10 + (v - 'A');  				}  				else if (v >= 'a' && v <= 'f') {  					codePoint += 10 + (v - 'a');  				}  				else if (v >= '0' && v <= '9') {  					codePoint += (v - '0');  				}  			}  			// convert the integer codepoint to a unicode char and add to string  			if (codePoint < 0xD7FF || codePoint >= 0xE000) {  				tmp.Add ((char)codePoint);  				surrogate = 0;  			}  			else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  				tmp.Add ((char)surrogate);  				tmp.Add ((char)codePoint);  				surrogate = 0;  			}  			else if (char.IsHighSurrogate ((char)codePoint)) {  				surrogate = codePoint;  			}  			else {  				// crap  				surrogate = 0;  			}  			// skip 4 chars  			index += 4;  		}  		else {  			break;  		}  	}  }  else {  	tmp.Add (c);  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length) {  		break;  	}  	c = json [index];  	index += 1;  	if (c == '"') {  		tmp.Add ('"');  	}  	else if (c == '\\') {  		tmp.Add ('\\');  	}  	else if (c == '/') {  		tmp.Add ('/');  	}  	else if (c == 'b') {  		tmp.Add ('\b');  	}  	else if (c == 'f') {  		tmp.Add ('\f');  	}  	else if (c == 'n') {  		tmp.Add ('\n');  	}  	else if (c == 'r') {  		tmp.Add ('\r');  	}  	else if (c == 't') {  		tmp.Add ('\t');  	}  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// fetch the next 4 chars  			char[] unicodeCharArray = new char[4];  			System.Array.Copy (json' index' unicodeCharArray' 0' 4);  			// parse the 32 bit hex into an integer codepoint  			int codePoint = 0;  			for (int i = 0; i < unicodeCharArray.Length; ++i) {  				codePoint *= 16;  				var v = unicodeCharArray [i];  				if (v >= 'A' && v <= 'F') {  					codePoint += 10 + (v - 'A');  				}  				else if (v >= 'a' && v <= 'f') {  					codePoint += 10 + (v - 'a');  				}  				else if (v >= '0' && v <= '9') {  					codePoint += (v - '0');  				}  			}  			// convert the integer codepoint to a unicode char and add to string  			if (codePoint < 0xD7FF || codePoint >= 0xE000) {  				tmp.Add ((char)codePoint);  				surrogate = 0;  			}  			else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  				tmp.Add ((char)surrogate);  				tmp.Add ((char)codePoint);  				surrogate = 0;  			}  			else if (char.IsHighSurrogate ((char)codePoint)) {  				surrogate = codePoint;  			}  			else {  				// crap  				surrogate = 0;  			}  			// skip 4 chars  			index += 4;  		}  		else {  			break;  		}  	}  }  else {  	tmp.Add (c);  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length) {  		break;  	}  	c = json [index];  	index += 1;  	if (c == '"') {  		tmp.Add ('"');  	}  	else if (c == '\\') {  		tmp.Add ('\\');  	}  	else if (c == '/') {  		tmp.Add ('/');  	}  	else if (c == 'b') {  		tmp.Add ('\b');  	}  	else if (c == 'f') {  		tmp.Add ('\f');  	}  	else if (c == 'n') {  		tmp.Add ('\n');  	}  	else if (c == 'r') {  		tmp.Add ('\r');  	}  	else if (c == 't') {  		tmp.Add ('\t');  	}  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// fetch the next 4 chars  			char[] unicodeCharArray = new char[4];  			System.Array.Copy (json' index' unicodeCharArray' 0' 4);  			// parse the 32 bit hex into an integer codepoint  			int codePoint = 0;  			for (int i = 0; i < unicodeCharArray.Length; ++i) {  				codePoint *= 16;  				var v = unicodeCharArray [i];  				if (v >= 'A' && v <= 'F') {  					codePoint += 10 + (v - 'A');  				}  				else if (v >= 'a' && v <= 'f') {  					codePoint += 10 + (v - 'a');  				}  				else if (v >= '0' && v <= '9') {  					codePoint += (v - '0');  				}  			}  			// convert the integer codepoint to a unicode char and add to string  			if (codePoint < 0xD7FF || codePoint >= 0xE000) {  				tmp.Add ((char)codePoint);  				surrogate = 0;  			}  			else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  				tmp.Add ((char)surrogate);  				tmp.Add ((char)codePoint);  				surrogate = 0;  			}  			else if (char.IsHighSurrogate ((char)codePoint)) {  				surrogate = codePoint;  			}  			else {  				// crap  				surrogate = 0;  			}  			// skip 4 chars  			index += 4;  		}  		else {  			break;  		}  	}  }  else {  	tmp.Add (c);  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	tmp.Add ('"');  }  else if (c == '\\') {  	tmp.Add ('\\');  }  else if (c == '/') {  	tmp.Add ('/');  }  else if (c == 'b') {  	tmp.Add ('\b');  }  else if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	tmp.Add ('"');  }  else if (c == '\\') {  	tmp.Add ('\\');  }  else if (c == '/') {  	tmp.Add ('/');  }  else if (c == 'b') {  	tmp.Add ('\b');  }  else if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	tmp.Add ('"');  }  else if (c == '\\') {  	tmp.Add ('\\');  }  else if (c == '/') {  	tmp.Add ('/');  }  else if (c == 'b') {  	tmp.Add ('\b');  }  else if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	tmp.Add ('"');  }  else if (c == '\\') {  	tmp.Add ('\\');  }  else if (c == '/') {  	tmp.Add ('/');  }  else if (c == 'b') {  	tmp.Add ('\b');  }  else if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	tmp.Add ('"');  }  else if (c == '\\') {  	tmp.Add ('\\');  }  else if (c == '/') {  	tmp.Add ('/');  }  else if (c == 'b') {  	tmp.Add ('\b');  }  else if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	tmp.Add ('"');  }  else if (c == '\\') {  	tmp.Add ('\\');  }  else if (c == '/') {  	tmp.Add ('/');  }  else if (c == 'b') {  	tmp.Add ('\b');  }  else if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	tmp.Add ('"');  }  else if (c == '\\') {  	tmp.Add ('\\');  }  else if (c == '/') {  	tmp.Add ('/');  }  else if (c == 'b') {  	tmp.Add ('\b');  }  else if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	tmp.Add ('\\');  }  else if (c == '/') {  	tmp.Add ('/');  }  else if (c == 'b') {  	tmp.Add ('\b');  }  else if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	tmp.Add ('\\');  }  else if (c == '/') {  	tmp.Add ('/');  }  else if (c == 'b') {  	tmp.Add ('\b');  }  else if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	tmp.Add ('\\');  }  else if (c == '/') {  	tmp.Add ('/');  }  else if (c == 'b') {  	tmp.Add ('\b');  }  else if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	tmp.Add ('\\');  }  else if (c == '/') {  	tmp.Add ('/');  }  else if (c == 'b') {  	tmp.Add ('\b');  }  else if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	tmp.Add ('\\');  }  else if (c == '/') {  	tmp.Add ('/');  }  else if (c == 'b') {  	tmp.Add ('\b');  }  else if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	tmp.Add ('\\');  }  else if (c == '/') {  	tmp.Add ('/');  }  else if (c == 'b') {  	tmp.Add ('\b');  }  else if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	tmp.Add ('\\');  }  else if (c == '/') {  	tmp.Add ('/');  }  else if (c == 'b') {  	tmp.Add ('\b');  }  else if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '/') {  	tmp.Add ('/');  }  else if (c == 'b') {  	tmp.Add ('\b');  }  else if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '/') {  	tmp.Add ('/');  }  else if (c == 'b') {  	tmp.Add ('\b');  }  else if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '/') {  	tmp.Add ('/');  }  else if (c == 'b') {  	tmp.Add ('\b');  }  else if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '/') {  	tmp.Add ('/');  }  else if (c == 'b') {  	tmp.Add ('\b');  }  else if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '/') {  	tmp.Add ('/');  }  else if (c == 'b') {  	tmp.Add ('\b');  }  else if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '/') {  	tmp.Add ('/');  }  else if (c == 'b') {  	tmp.Add ('\b');  }  else if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == '/') {  	tmp.Add ('/');  }  else if (c == 'b') {  	tmp.Add ('\b');  }  else if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'b') {  	tmp.Add ('\b');  }  else if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'b') {  	tmp.Add ('\b');  }  else if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'b') {  	tmp.Add ('\b');  }  else if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'b') {  	tmp.Add ('\b');  }  else if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'b') {  	tmp.Add ('\b');  }  else if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'b') {  	tmp.Add ('\b');  }  else if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'b') {  	tmp.Add ('\b');  }  else if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'f') {  	tmp.Add ('\f');  }  else if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'n') {  	tmp.Add ('\n');  }  else if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'r') {  	tmp.Add ('\r');  }  else if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 't') {  	tmp.Add ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// fetch the next 4 chars  		char[] unicodeCharArray = new char[4];  		System.Array.Copy (json' index' unicodeCharArray' 0' 4);  		// parse the 32 bit hex into an integer codepoint  		int codePoint = 0;  		for (int i = 0; i < unicodeCharArray.Length; ++i) {  			codePoint *= 16;  			var v = unicodeCharArray [i];  			if (v >= 'A' && v <= 'F') {  				codePoint += 10 + (v - 'A');  			}  			else if (v >= 'a' && v <= 'f') {  				codePoint += 10 + (v - 'a');  			}  			else if (v >= '0' && v <= '9') {  				codePoint += (v - '0');  			}  		}  		// convert the integer codepoint to a unicode char and add to string  		if (codePoint < 0xD7FF || codePoint >= 0xE000) {  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  			tmp.Add ((char)surrogate);  			tmp.Add ((char)codePoint);  			surrogate = 0;  		}  		else if (char.IsHighSurrogate ((char)codePoint)) {  			surrogate = codePoint;  		}  		else {  			// crap  			surrogate = 0;  		}  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 4) {  	// fetch the next 4 chars  	char[] unicodeCharArray = new char[4];  	System.Array.Copy (json' index' unicodeCharArray' 0' 4);  	// parse the 32 bit hex into an integer codepoint  	int codePoint = 0;  	for (int i = 0; i < unicodeCharArray.Length; ++i) {  		codePoint *= 16;  		var v = unicodeCharArray [i];  		if (v >= 'A' && v <= 'F') {  			codePoint += 10 + (v - 'A');  		}  		else if (v >= 'a' && v <= 'f') {  			codePoint += 10 + (v - 'a');  		}  		else if (v >= '0' && v <= '9') {  			codePoint += (v - '0');  		}  	}  	// convert the integer codepoint to a unicode char and add to string  	if (codePoint < 0xD7FF || codePoint >= 0xE000) {  		tmp.Add ((char)codePoint);  		surrogate = 0;  	}  	else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  		tmp.Add ((char)surrogate);  		tmp.Add ((char)codePoint);  		surrogate = 0;  	}  	else if (char.IsHighSurrogate ((char)codePoint)) {  		surrogate = codePoint;  	}  	else {  		// crap  		surrogate = 0;  	}  	// skip 4 chars  	index += 4;  }  else {  	break;  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 4) {  	// fetch the next 4 chars  	char[] unicodeCharArray = new char[4];  	System.Array.Copy (json' index' unicodeCharArray' 0' 4);  	// parse the 32 bit hex into an integer codepoint  	int codePoint = 0;  	for (int i = 0; i < unicodeCharArray.Length; ++i) {  		codePoint *= 16;  		var v = unicodeCharArray [i];  		if (v >= 'A' && v <= 'F') {  			codePoint += 10 + (v - 'A');  		}  		else if (v >= 'a' && v <= 'f') {  			codePoint += 10 + (v - 'a');  		}  		else if (v >= '0' && v <= '9') {  			codePoint += (v - '0');  		}  	}  	// convert the integer codepoint to a unicode char and add to string  	if (codePoint < 0xD7FF || codePoint >= 0xE000) {  		tmp.Add ((char)codePoint);  		surrogate = 0;  	}  	else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  		tmp.Add ((char)surrogate);  		tmp.Add ((char)codePoint);  		surrogate = 0;  	}  	else if (char.IsHighSurrogate ((char)codePoint)) {  		surrogate = codePoint;  	}  	else {  		// crap  		surrogate = 0;  	}  	// skip 4 chars  	index += 4;  }  else {  	break;  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 4) {  	// fetch the next 4 chars  	char[] unicodeCharArray = new char[4];  	System.Array.Copy (json' index' unicodeCharArray' 0' 4);  	// parse the 32 bit hex into an integer codepoint  	int codePoint = 0;  	for (int i = 0; i < unicodeCharArray.Length; ++i) {  		codePoint *= 16;  		var v = unicodeCharArray [i];  		if (v >= 'A' && v <= 'F') {  			codePoint += 10 + (v - 'A');  		}  		else if (v >= 'a' && v <= 'f') {  			codePoint += 10 + (v - 'a');  		}  		else if (v >= '0' && v <= '9') {  			codePoint += (v - '0');  		}  	}  	// convert the integer codepoint to a unicode char and add to string  	if (codePoint < 0xD7FF || codePoint >= 0xE000) {  		tmp.Add ((char)codePoint);  		surrogate = 0;  	}  	else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  		tmp.Add ((char)surrogate);  		tmp.Add ((char)codePoint);  		surrogate = 0;  	}  	else if (char.IsHighSurrogate ((char)codePoint)) {  		surrogate = codePoint;  	}  	else {  		// crap  		surrogate = 0;  	}  	// skip 4 chars  	index += 4;  }  else {  	break;  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 4) {  	// fetch the next 4 chars  	char[] unicodeCharArray = new char[4];  	System.Array.Copy (json' index' unicodeCharArray' 0' 4);  	// parse the 32 bit hex into an integer codepoint  	int codePoint = 0;  	for (int i = 0; i < unicodeCharArray.Length; ++i) {  		codePoint *= 16;  		var v = unicodeCharArray [i];  		if (v >= 'A' && v <= 'F') {  			codePoint += 10 + (v - 'A');  		}  		else if (v >= 'a' && v <= 'f') {  			codePoint += 10 + (v - 'a');  		}  		else if (v >= '0' && v <= '9') {  			codePoint += (v - '0');  		}  	}  	// convert the integer codepoint to a unicode char and add to string  	if (codePoint < 0xD7FF || codePoint >= 0xE000) {  		tmp.Add ((char)codePoint);  		surrogate = 0;  	}  	else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  		tmp.Add ((char)surrogate);  		tmp.Add ((char)codePoint);  		surrogate = 0;  	}  	else if (char.IsHighSurrogate ((char)codePoint)) {  		surrogate = codePoint;  	}  	else {  		// crap  		surrogate = 0;  	}  	// skip 4 chars  	index += 4;  }  else {  	break;  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 4) {  	// fetch the next 4 chars  	char[] unicodeCharArray = new char[4];  	System.Array.Copy (json' index' unicodeCharArray' 0' 4);  	// parse the 32 bit hex into an integer codepoint  	int codePoint = 0;  	for (int i = 0; i < unicodeCharArray.Length; ++i) {  		codePoint *= 16;  		var v = unicodeCharArray [i];  		if (v >= 'A' && v <= 'F') {  			codePoint += 10 + (v - 'A');  		}  		else if (v >= 'a' && v <= 'f') {  			codePoint += 10 + (v - 'a');  		}  		else if (v >= '0' && v <= '9') {  			codePoint += (v - '0');  		}  	}  	// convert the integer codepoint to a unicode char and add to string  	if (codePoint < 0xD7FF || codePoint >= 0xE000) {  		tmp.Add ((char)codePoint);  		surrogate = 0;  	}  	else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  		tmp.Add ((char)surrogate);  		tmp.Add ((char)codePoint);  		surrogate = 0;  	}  	else if (char.IsHighSurrogate ((char)codePoint)) {  		surrogate = codePoint;  	}  	else {  		// crap  		surrogate = 0;  	}  	// skip 4 chars  	index += 4;  }  else {  	break;  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 4) {  	// fetch the next 4 chars  	char[] unicodeCharArray = new char[4];  	System.Array.Copy (json' index' unicodeCharArray' 0' 4);  	// parse the 32 bit hex into an integer codepoint  	int codePoint = 0;  	for (int i = 0; i < unicodeCharArray.Length; ++i) {  		codePoint *= 16;  		var v = unicodeCharArray [i];  		if (v >= 'A' && v <= 'F') {  			codePoint += 10 + (v - 'A');  		}  		else if (v >= 'a' && v <= 'f') {  			codePoint += 10 + (v - 'a');  		}  		else if (v >= '0' && v <= '9') {  			codePoint += (v - '0');  		}  	}  	// convert the integer codepoint to a unicode char and add to string  	if (codePoint < 0xD7FF || codePoint >= 0xE000) {  		tmp.Add ((char)codePoint);  		surrogate = 0;  	}  	else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  		tmp.Add ((char)surrogate);  		tmp.Add ((char)codePoint);  		surrogate = 0;  	}  	else if (char.IsHighSurrogate ((char)codePoint)) {  		surrogate = codePoint;  	}  	else {  		// crap  		surrogate = 0;  	}  	// skip 4 chars  	index += 4;  }  else {  	break;  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 4) {  	// fetch the next 4 chars  	char[] unicodeCharArray = new char[4];  	System.Array.Copy (json' index' unicodeCharArray' 0' 4);  	// parse the 32 bit hex into an integer codepoint  	int codePoint = 0;  	for (int i = 0; i < unicodeCharArray.Length; ++i) {  		codePoint *= 16;  		var v = unicodeCharArray [i];  		if (v >= 'A' && v <= 'F') {  			codePoint += 10 + (v - 'A');  		}  		else if (v >= 'a' && v <= 'f') {  			codePoint += 10 + (v - 'a');  		}  		else if (v >= '0' && v <= '9') {  			codePoint += (v - '0');  		}  	}  	// convert the integer codepoint to a unicode char and add to string  	if (codePoint < 0xD7FF || codePoint >= 0xE000) {  		tmp.Add ((char)codePoint);  		surrogate = 0;  	}  	else if (surrogate != 0 && char.IsLowSurrogate ((char)codePoint)) {  		tmp.Add ((char)surrogate);  		tmp.Add ((char)codePoint);  		surrogate = 0;  	}  	else if (char.IsHighSurrogate ((char)codePoint)) {  		surrogate = codePoint;  	}  	else {  		// crap  		surrogate = 0;  	}  	// skip 4 chars  	index += 4;  }  else {  	break;  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: System.Array.Copy (json' index' unicodeCharArray' 0' 4);  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: for (int i = 0; i < unicodeCharArray.Length; ++i) {  	codePoint *= 16;  	var v = unicodeCharArray [i];  	if (v >= 'A' && v <= 'F') {  		codePoint += 10 + (v - 'A');  	}  	else if (v >= 'a' && v <= 'f') {  		codePoint += 10 + (v - 'a');  	}  	else if (v >= '0' && v <= '9') {  		codePoint += (v - '0');  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: for (int i = 0; i < unicodeCharArray.Length; ++i) {  	codePoint *= 16;  	var v = unicodeCharArray [i];  	if (v >= 'A' && v <= 'F') {  		codePoint += 10 + (v - 'A');  	}  	else if (v >= 'a' && v <= 'f') {  		codePoint += 10 + (v - 'a');  	}  	else if (v >= '0' && v <= '9') {  		codePoint += (v - '0');  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: for (int i = 0; i < unicodeCharArray.Length; ++i) {  	codePoint *= 16;  	var v = unicodeCharArray [i];  	if (v >= 'A' && v <= 'F') {  		codePoint += 10 + (v - 'A');  	}  	else if (v >= 'a' && v <= 'f') {  		codePoint += 10 + (v - 'a');  	}  	else if (v >= '0' && v <= '9') {  		codePoint += (v - '0');  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: codePoint *= 16;  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (v >= 'A' && v <= 'F') {  	codePoint += 10 + (v - 'A');  }  else if (v >= 'a' && v <= 'f') {  	codePoint += 10 + (v - 'a');  }  else if (v >= '0' && v <= '9') {  	codePoint += (v - '0');  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (v >= 'A' && v <= 'F') {  	codePoint += 10 + (v - 'A');  }  else if (v >= 'a' && v <= 'f') {  	codePoint += 10 + (v - 'a');  }  else if (v >= '0' && v <= '9') {  	codePoint += (v - '0');  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: codePoint += 10 + (v - 'A');  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: if (v >= 'a' && v <= 'f') {  	codePoint += 10 + (v - 'a');  }  else if (v >= '0' && v <= '9') {  	codePoint += (v - '0');  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: codePoint += 10 + (v - 'a');  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseString,The following statement contains a magic number: index += 4;  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5) {  	if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  		index += 5;  		return Token.False;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5) {  	if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  		index += 5;  		return Token.False;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5) {  	if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  		index += 5;  		return Token.False;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5) {  	if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  		index += 5;  		return Token.False;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5) {  	if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  		index += 5;  		return Token.False;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,NextToken,The following statement contains a magic number: if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  	index += 5;  	return Token.False;  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,NextToken,The following statement contains a magic number: if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  	index += 5;  	return Token.False;  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,NextToken,The following statement contains a magic number: if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  	index += 5;  	return Token.False;  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,NextToken,The following statement contains a magic number: if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  	index += 5;  	return Token.False;  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,NextToken,The following statement contains a magic number: index += 5;  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  		index += 4;  		return Token.True;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  		index += 4;  		return Token.True;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  		index += 4;  		return Token.True;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  		index += 4;  		return Token.True;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,NextToken,The following statement contains a magic number: if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  	index += 4;  	return Token.True;  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,NextToken,The following statement contains a magic number: if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  	index += 4;  	return Token.True;  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,NextToken,The following statement contains a magic number: if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  	index += 4;  	return Token.True;  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,NextToken,The following statement contains a magic number: index += 4;  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  		index += 4;  		return Token.Null;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  		index += 4;  		return Token.Null;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  		index += 4;  		return Token.Null;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  		index += 4;  		return Token.Null;  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,NextToken,The following statement contains a magic number: if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  	index += 4;  	return Token.Null;  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,NextToken,The following statement contains a magic number: if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  	index += 4;  	return Token.Null;  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,NextToken,The following statement contains a magic number: if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  	index += 4;  	return Token.Null;  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,NextToken,The following statement contains a magic number: index += 4;  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,SerializeString,The following statement contains a magic number: for (int i = 0; i < charArray.Length; ++i) {  	char c = charArray [i];  	if (c == '"') {  		builder.Append ("\\\"");  	}  	else if (c == '\\') {  		builder.Append ("\\\\");  	}  	else if (c == '\b') {  		builder.Append ("\\b");  	}  	else if (c == '\f') {  		builder.Append ("\\f");  	}  	else if (c == '\n') {  		builder.Append ("\\n");  	}  	else if (c == '\r') {  		builder.Append ("\\r");  	}  	else if (c == '\t') {  		builder.Append ("\\t");  	}  	else {  		var codepoint = (int)c;  		if ((codepoint >= 32) && (codepoint <= 126)) {  			builder.Append (c);  		}  		else {  			builder.AppendFormat ("\\u{0:X4}"' codepoint);  		}  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,SerializeString,The following statement contains a magic number: for (int i = 0; i < charArray.Length; ++i) {  	char c = charArray [i];  	if (c == '"') {  		builder.Append ("\\\"");  	}  	else if (c == '\\') {  		builder.Append ("\\\\");  	}  	else if (c == '\b') {  		builder.Append ("\\b");  	}  	else if (c == '\f') {  		builder.Append ("\\f");  	}  	else if (c == '\n') {  		builder.Append ("\\n");  	}  	else if (c == '\r') {  		builder.Append ("\\r");  	}  	else if (c == '\t') {  		builder.Append ("\\t");  	}  	else {  		var codepoint = (int)c;  		if ((codepoint >= 32) && (codepoint <= 126)) {  			builder.Append (c);  		}  		else {  			builder.AppendFormat ("\\u{0:X4}"' codepoint);  		}  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,SerializeString,The following statement contains a magic number: if (c == '"') {  	builder.Append ("\\\"");  }  else if (c == '\\') {  	builder.Append ("\\\\");  }  else if (c == '\b') {  	builder.Append ("\\b");  }  else if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	var codepoint = (int)c;  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.AppendFormat ("\\u{0:X4}"' codepoint);  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,SerializeString,The following statement contains a magic number: if (c == '"') {  	builder.Append ("\\\"");  }  else if (c == '\\') {  	builder.Append ("\\\\");  }  else if (c == '\b') {  	builder.Append ("\\b");  }  else if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	var codepoint = (int)c;  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.AppendFormat ("\\u{0:X4}"' codepoint);  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,SerializeString,The following statement contains a magic number: if (c == '\\') {  	builder.Append ("\\\\");  }  else if (c == '\b') {  	builder.Append ("\\b");  }  else if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	var codepoint = (int)c;  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.AppendFormat ("\\u{0:X4}"' codepoint);  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,SerializeString,The following statement contains a magic number: if (c == '\\') {  	builder.Append ("\\\\");  }  else if (c == '\b') {  	builder.Append ("\\b");  }  else if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	var codepoint = (int)c;  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.AppendFormat ("\\u{0:X4}"' codepoint);  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,SerializeString,The following statement contains a magic number: if (c == '\b') {  	builder.Append ("\\b");  }  else if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	var codepoint = (int)c;  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.AppendFormat ("\\u{0:X4}"' codepoint);  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,SerializeString,The following statement contains a magic number: if (c == '\b') {  	builder.Append ("\\b");  }  else if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	var codepoint = (int)c;  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.AppendFormat ("\\u{0:X4}"' codepoint);  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,SerializeString,The following statement contains a magic number: if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	var codepoint = (int)c;  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.AppendFormat ("\\u{0:X4}"' codepoint);  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,SerializeString,The following statement contains a magic number: if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	var codepoint = (int)c;  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.AppendFormat ("\\u{0:X4}"' codepoint);  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,SerializeString,The following statement contains a magic number: if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	var codepoint = (int)c;  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.AppendFormat ("\\u{0:X4}"' codepoint);  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,SerializeString,The following statement contains a magic number: if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	var codepoint = (int)c;  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.AppendFormat ("\\u{0:X4}"' codepoint);  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,SerializeString,The following statement contains a magic number: if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	var codepoint = (int)c;  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.AppendFormat ("\\u{0:X4}"' codepoint);  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,SerializeString,The following statement contains a magic number: if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	var codepoint = (int)c;  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.AppendFormat ("\\u{0:X4}"' codepoint);  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,SerializeString,The following statement contains a magic number: if (c == '\t') {  	builder.Append ("\\t");  }  else {  	var codepoint = (int)c;  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.AppendFormat ("\\u{0:X4}"' codepoint);  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,SerializeString,The following statement contains a magic number: if (c == '\t') {  	builder.Append ("\\t");  }  else {  	var codepoint = (int)c;  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.AppendFormat ("\\u{0:X4}"' codepoint);  	}  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,SerializeString,The following statement contains a magic number: if ((codepoint >= 32) && (codepoint <= 126)) {  	builder.Append (c);  }  else {  	builder.AppendFormat ("\\u{0:X4}"' codepoint);  }  
Magic Number,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,SerializeString,The following statement contains a magic number: if ((codepoint >= 32) && (codepoint <= 126)) {  	builder.Append (c);  }  else {  	builder.AppendFormat ("\\u{0:X4}"' codepoint);  }  
Magic Number,EB,Localizer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreLocalizer.cs,FormatTimeHundredthsSeconds,The following statement contains a magic number: seconds = Mathf.FloorToInt (hundredths / 100);  
Magic Number,EB,Localizer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreLocalizer.cs,FormatTimeHundredthsSeconds,The following statement contains a magic number: hundredths -= hundredths * 100;  
Magic Number,EB,Localizer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreLocalizer.cs,FormatTimeHundredthsSeconds,The following statement contains a magic number: minutes = Mathf.FloorToInt (seconds / 60);  
Magic Number,EB,Localizer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreLocalizer.cs,FormatTime,The following statement contains a magic number: hours = Mathf.FloorToInt (seconds / 3600);  
Magic Number,EB,Localizer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreLocalizer.cs,FormatTime,The following statement contains a magic number: seconds -= hours * 3600;  
Magic Number,EB,Localizer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreLocalizer.cs,FormatTime,The following statement contains a magic number: minutes = Mathf.FloorToInt (seconds / 60);  
Magic Number,EB,Localizer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreLocalizer.cs,FormatTime,The following statement contains a magic number: if (showSeconds) {  	timeString += ":" + ((totalSeconds % 60 < 10) ? "0" : "") + (totalSeconds % 60).ToString ();  }  
Magic Number,EB,Localizer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreLocalizer.cs,FormatTime,The following statement contains a magic number: if (showSeconds) {  	timeString += ":" + ((totalSeconds % 60 < 10) ? "0" : "") + (totalSeconds % 60).ToString ();  }  
Magic Number,EB,Localizer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreLocalizer.cs,FormatTime,The following statement contains a magic number: if (showSeconds) {  	timeString += ":" + ((totalSeconds % 60 < 10) ? "0" : "") + (totalSeconds % 60).ToString ();  }  
Magic Number,EB,Localizer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreLocalizer.cs,FormatTime,The following statement contains a magic number: timeString += ":" + ((totalSeconds % 60 < 10) ? "0" : "") + (totalSeconds % 60).ToString ();  
Magic Number,EB,Localizer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreLocalizer.cs,FormatTime,The following statement contains a magic number: timeString += ":" + ((totalSeconds % 60 < 10) ? "0" : "") + (totalSeconds % 60).ToString ();  
Magic Number,EB,Localizer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreLocalizer.cs,FormatTime,The following statement contains a magic number: timeString += ":" + ((totalSeconds % 60 < 10) ? "0" : "") + (totalSeconds % 60).ToString ();  
Magic Number,EB,QueryString,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreQueryString.cs,Parse,The following statement contains a magic number: foreach (string pair in query.Split (new char[] {  	'&'  }' System.StringSplitOptions.RemoveEmptyEntries)) {  	string[] parts = pair.Split ('=');  	var key = WWW.UnEscapeURL (parts [0]);  	if (parts.Length == 1) {  		pars [key] = string.Empty;  	}  	else if (parts.Length == 2) {  		pars [key] = WWW.UnEscapeURL (parts [1]);  	}  }  
Magic Number,EB,QueryString,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreQueryString.cs,Parse,The following statement contains a magic number: if (parts.Length == 1) {  	pars [key] = string.Empty;  }  else if (parts.Length == 2) {  	pars [key] = WWW.UnEscapeURL (parts [1]);  }  
Magic Number,EB,QueryString,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreQueryString.cs,Parse,The following statement contains a magic number: if (parts.Length == 2) {  	pars [key] = WWW.UnEscapeURL (parts [1]);  }  
Magic Number,EB,Serialization,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreSerialization.cs,DeserializeColor,The following statement contains a magic number: c.r = EB.Dot.Integer ("r"' obj' 255) / 255f;  
Magic Number,EB,Serialization,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreSerialization.cs,DeserializeColor,The following statement contains a magic number: c.g = EB.Dot.Integer ("g"' obj' 255) / 255f;  
Magic Number,EB,Serialization,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreSerialization.cs,DeserializeColor,The following statement contains a magic number: c.b = EB.Dot.Integer ("b"' obj' 255) / 255f;  
Magic Number,EB,Serialization,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreSerialization.cs,DeserializeColor,The following statement contains a magic number: c.a = EB.Dot.Integer ("a"' obj' 255) / 255f;  
Magic Number,EB,Serialization,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreSerialization.cs,CopyArray,The following statement contains a magic number: if (arrayType.IsArray) {  	if (arrayType.GetArrayRank () == 2) {  		int rank0 = int.Parse (counts [0].ToString ());  		int rank1 = int.Parse (counts [1].ToString ());  		System.Array list = System.Array.CreateInstance (arrayType.GetElementType ()' rank0' rank1);  		int size = rank0 * rank1;  		if (size != items.Count) {  			EB.Debug.Log ("Bad!!! size= " + size + " count=" + items.Count);  		}  		int x = 0;  		int y = 0;  		for (int i = 0; i < items.Count; ++i) {  			list.SetValue (items [i]' x' y);  			++y;  			if (y == rank1) {  				y = 0;  				++x;  			}  		}  		return list;  	}  	else {  		System.Array list = System.Array.CreateInstance (arrayType.GetElementType ()' items.Count);  		System.Array.Copy (items.ToArray ()' list' items.Count);  		return list;  	}  }  else {  	IList list = (IList)System.Activator.CreateInstance (arrayType);  	foreach (object item in items) {  		list.Add (item);  	}  	return list;  }  
Magic Number,EB,Serialization,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreSerialization.cs,CopyArray,The following statement contains a magic number: if (arrayType.GetArrayRank () == 2) {  	int rank0 = int.Parse (counts [0].ToString ());  	int rank1 = int.Parse (counts [1].ToString ());  	System.Array list = System.Array.CreateInstance (arrayType.GetElementType ()' rank0' rank1);  	int size = rank0 * rank1;  	if (size != items.Count) {  		EB.Debug.Log ("Bad!!! size= " + size + " count=" + items.Count);  	}  	int x = 0;  	int y = 0;  	for (int i = 0; i < items.Count; ++i) {  		list.SetValue (items [i]' x' y);  		++y;  		if (y == rank1) {  			y = 0;  			++x;  		}  	}  	return list;  }  else {  	System.Array list = System.Array.CreateInstance (arrayType.GetElementType ()' items.Count);  	System.Array.Copy (items.ToArray ()' list' items.Count);  	return list;  }  
Magic Number,EB,SignedRequest,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreSignedRequest.cs,Parse,The following statement contains a magic number: if (parts.Length != 2) {  	return null;  }  
Magic Number,EB,ThreadPool,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreThreadPool.cs,ThreadPool,The following statement contains a magic number: _queue = new Queue<AsyncTask> (16);  
Magic Number,EB,ThreadPool,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreThreadPool.cs,Start,The following statement contains a magic number: if (_running == false) {  	_running = true;  	for (int i = 0; i < _maxThreads; ++i) {  		var thread = new System.Threading.Thread (this._Thread' 256 * 1024);  		thread.Start ();  	}  }  
Magic Number,EB,ThreadPool,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreThreadPool.cs,Start,The following statement contains a magic number: if (_running == false) {  	_running = true;  	for (int i = 0; i < _maxThreads; ++i) {  		var thread = new System.Threading.Thread (this._Thread' 256 * 1024);  		thread.Start ();  	}  }  
Magic Number,EB,ThreadPool,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreThreadPool.cs,Start,The following statement contains a magic number: for (int i = 0; i < _maxThreads; ++i) {  	var thread = new System.Threading.Thread (this._Thread' 256 * 1024);  	thread.Start ();  }  
Magic Number,EB,ThreadPool,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreThreadPool.cs,Start,The following statement contains a magic number: for (int i = 0; i < _maxThreads; ++i) {  	var thread = new System.Threading.Thread (this._Thread' 256 * 1024);  	thread.Start ();  }  
Magic Number,EB,Uri,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUri.cs,Parse,The following statement contains a magic number: url = url.Substring (3);  
Magic Number,EB,Uri,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUri.cs,GetDefaultPort,The following statement contains a magic number: switch (Protocol) {  case "http":  case "ws":  	return 80;  case "https":  case "wss":  	return 443;  case "ssh":  	return 22;  case "ftp":  	return 21;  }  
Magic Number,EB,Uri,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUri.cs,GetDefaultPort,The following statement contains a magic number: switch (Protocol) {  case "http":  case "ws":  	return 80;  case "https":  case "wss":  	return 443;  case "ssh":  	return 22;  case "ftp":  	return 21;  }  
Magic Number,EB,Uri,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUri.cs,GetDefaultPort,The following statement contains a magic number: switch (Protocol) {  case "http":  case "ws":  	return 80;  case "https":  case "wss":  	return 443;  case "ssh":  	return 22;  case "ftp":  	return 21;  }  
Magic Number,EB,Uri,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUri.cs,GetDefaultPort,The following statement contains a magic number: switch (Protocol) {  case "http":  case "ws":  	return 80;  case "https":  case "wss":  	return 443;  case "ssh":  	return 22;  case "ftp":  	return 21;  }  
Magic Number,EB,Uri,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUri.cs,GetDefaultPort,The following statement contains a magic number: return 80;  
Magic Number,EB,Uri,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUri.cs,GetDefaultPort,The following statement contains a magic number: return 443;  
Magic Number,EB,Uri,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUri.cs,GetDefaultPort,The following statement contains a magic number: return 22;  
Magic Number,EB,Uri,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUri.cs,GetDefaultPort,The following statement contains a magic number: return 21;  
Magic Number,EB,Util,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUtil.cs,FromList,The following statement contains a magic number: for (var i = 0; i < count; ++i) {  	ht.Add (list [i * 2]' list [i * 2 + 1]);  }  
Magic Number,EB,Util,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUtil.cs,FromList,The following statement contains a magic number: for (var i = 0; i < count; ++i) {  	ht.Add (list [i * 2]' list [i * 2 + 1]);  }  
Magic Number,EB,Util,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUtil.cs,FromList,The following statement contains a magic number: ht.Add (list [i * 2]' list [i * 2 + 1]);  
Magic Number,EB,Util,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUtil.cs,FromList,The following statement contains a magic number: ht.Add (list [i * 2]' list [i * 2 + 1]);  
Magic Number,EB,Util,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUtil.cs,ColourFromString,The following statement contains a magic number: if ((rgba != null) && (rgba.StartsWith ("rgba(") == true) && (rgba.EndsWith (")") == true)) {  	string inner = rgba.Substring (5' rgba.Length - 6);  	var parts = inner.Split (''');  	if (parts.Length == 4) {  		int r' g' b;  		float a;  		if (int.TryParse (parts [0]' out r) && int.TryParse (parts [1]' out g) && int.TryParse (parts [2]' out b) && float.TryParse (parts [3]' out a)) {  			UnityEngine.Color c = UnityEngine.Color.white;  			c.r = r / 255.0f;  			c.g = g / 255.0f;  			c.b = b / 255.0f;  			c.a = a;  			return c;  		}  	}  }  
Magic Number,EB,Util,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUtil.cs,ColourFromString,The following statement contains a magic number: if ((rgba != null) && (rgba.StartsWith ("rgba(") == true) && (rgba.EndsWith (")") == true)) {  	string inner = rgba.Substring (5' rgba.Length - 6);  	var parts = inner.Split (''');  	if (parts.Length == 4) {  		int r' g' b;  		float a;  		if (int.TryParse (parts [0]' out r) && int.TryParse (parts [1]' out g) && int.TryParse (parts [2]' out b) && float.TryParse (parts [3]' out a)) {  			UnityEngine.Color c = UnityEngine.Color.white;  			c.r = r / 255.0f;  			c.g = g / 255.0f;  			c.b = b / 255.0f;  			c.a = a;  			return c;  		}  	}  }  
Magic Number,EB,Util,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUtil.cs,ColourFromString,The following statement contains a magic number: if ((rgba != null) && (rgba.StartsWith ("rgba(") == true) && (rgba.EndsWith (")") == true)) {  	string inner = rgba.Substring (5' rgba.Length - 6);  	var parts = inner.Split (''');  	if (parts.Length == 4) {  		int r' g' b;  		float a;  		if (int.TryParse (parts [0]' out r) && int.TryParse (parts [1]' out g) && int.TryParse (parts [2]' out b) && float.TryParse (parts [3]' out a)) {  			UnityEngine.Color c = UnityEngine.Color.white;  			c.r = r / 255.0f;  			c.g = g / 255.0f;  			c.b = b / 255.0f;  			c.a = a;  			return c;  		}  	}  }  
Magic Number,EB,Util,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUtil.cs,ColourFromString,The following statement contains a magic number: if ((rgba != null) && (rgba.StartsWith ("rgba(") == true) && (rgba.EndsWith (")") == true)) {  	string inner = rgba.Substring (5' rgba.Length - 6);  	var parts = inner.Split (''');  	if (parts.Length == 4) {  		int r' g' b;  		float a;  		if (int.TryParse (parts [0]' out r) && int.TryParse (parts [1]' out g) && int.TryParse (parts [2]' out b) && float.TryParse (parts [3]' out a)) {  			UnityEngine.Color c = UnityEngine.Color.white;  			c.r = r / 255.0f;  			c.g = g / 255.0f;  			c.b = b / 255.0f;  			c.a = a;  			return c;  		}  	}  }  
Magic Number,EB,Util,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUtil.cs,ColourFromString,The following statement contains a magic number: if ((rgba != null) && (rgba.StartsWith ("rgba(") == true) && (rgba.EndsWith (")") == true)) {  	string inner = rgba.Substring (5' rgba.Length - 6);  	var parts = inner.Split (''');  	if (parts.Length == 4) {  		int r' g' b;  		float a;  		if (int.TryParse (parts [0]' out r) && int.TryParse (parts [1]' out g) && int.TryParse (parts [2]' out b) && float.TryParse (parts [3]' out a)) {  			UnityEngine.Color c = UnityEngine.Color.white;  			c.r = r / 255.0f;  			c.g = g / 255.0f;  			c.b = b / 255.0f;  			c.a = a;  			return c;  		}  	}  }  
Magic Number,EB,Util,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUtil.cs,ColourFromString,The following statement contains a magic number: if (parts.Length == 4) {  	int r' g' b;  	float a;  	if (int.TryParse (parts [0]' out r) && int.TryParse (parts [1]' out g) && int.TryParse (parts [2]' out b) && float.TryParse (parts [3]' out a)) {  		UnityEngine.Color c = UnityEngine.Color.white;  		c.r = r / 255.0f;  		c.g = g / 255.0f;  		c.b = b / 255.0f;  		c.a = a;  		return c;  	}  }  
Magic Number,EB,Util,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUtil.cs,ColourFromString,The following statement contains a magic number: if (parts.Length == 4) {  	int r' g' b;  	float a;  	if (int.TryParse (parts [0]' out r) && int.TryParse (parts [1]' out g) && int.TryParse (parts [2]' out b) && float.TryParse (parts [3]' out a)) {  		UnityEngine.Color c = UnityEngine.Color.white;  		c.r = r / 255.0f;  		c.g = g / 255.0f;  		c.b = b / 255.0f;  		c.a = a;  		return c;  	}  }  
Magic Number,EB,Util,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUtil.cs,ColourFromString,The following statement contains a magic number: if (parts.Length == 4) {  	int r' g' b;  	float a;  	if (int.TryParse (parts [0]' out r) && int.TryParse (parts [1]' out g) && int.TryParse (parts [2]' out b) && float.TryParse (parts [3]' out a)) {  		UnityEngine.Color c = UnityEngine.Color.white;  		c.r = r / 255.0f;  		c.g = g / 255.0f;  		c.b = b / 255.0f;  		c.a = a;  		return c;  	}  }  
Magic Number,EB,Util,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUtil.cs,ColourFromString,The following statement contains a magic number: if (int.TryParse (parts [0]' out r) && int.TryParse (parts [1]' out g) && int.TryParse (parts [2]' out b) && float.TryParse (parts [3]' out a)) {  	UnityEngine.Color c = UnityEngine.Color.white;  	c.r = r / 255.0f;  	c.g = g / 255.0f;  	c.b = b / 255.0f;  	c.a = a;  	return c;  }  
Magic Number,EB,Util,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUtil.cs,ColourFromString,The following statement contains a magic number: if (int.TryParse (parts [0]' out r) && int.TryParse (parts [1]' out g) && int.TryParse (parts [2]' out b) && float.TryParse (parts [3]' out a)) {  	UnityEngine.Color c = UnityEngine.Color.white;  	c.r = r / 255.0f;  	c.g = g / 255.0f;  	c.b = b / 255.0f;  	c.a = a;  	return c;  }  
Magic Number,EB,UIUtils,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.UI\Core\EBUI_Utils.cs,GetLabelWorldCorners,The following statement contains a magic number: worldCorners [2] = wt.TransformPoint (x1' y1' 0f);  
Magic Number,EB,UIUtils,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.UI\Core\EBUI_Utils.cs,GetLabelWorldCorners,The following statement contains a magic number: worldCorners [3] = wt.TransformPoint (x1' y0' 0f);  
Magic Number,EB.Director,CameraData,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Director\DirectorUtils.cs,Lerp,The following statement contains a magic number: lerp.SetRow (2' Vector4.Lerp (a.GetRow (2)' b.GetRow (2)' t));  
Magic Number,EB.Director,CameraData,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Director\DirectorUtils.cs,Lerp,The following statement contains a magic number: lerp.SetRow (2' Vector4.Lerp (a.GetRow (2)' b.GetRow (2)' t));  
Magic Number,EB.Director,CameraData,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Director\DirectorUtils.cs,Lerp,The following statement contains a magic number: lerp.SetRow (2' Vector4.Lerp (a.GetRow (2)' b.GetRow (2)' t));  
Magic Number,EB.Director,CameraData,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Director\DirectorUtils.cs,Lerp,The following statement contains a magic number: lerp.SetRow (3' Vector4.Lerp (a.GetRow (3)' b.GetRow (3)' t));  
Magic Number,EB.Director,CameraData,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Director\DirectorUtils.cs,Lerp,The following statement contains a magic number: lerp.SetRow (3' Vector4.Lerp (a.GetRow (3)' b.GetRow (3)' t));  
Magic Number,EB.Director,CameraData,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Director\DirectorUtils.cs,Lerp,The following statement contains a magic number: lerp.SetRow (3' Vector4.Lerp (a.GetRow (3)' b.GetRow (3)' t));  
Magic Number,EB.Sparx,NetworkENet,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.ENet\SparxNetworkENet.cs,NetworkENet,The following statement contains a magic number: _sendBuffer = new Buffer (64 * 1024);  
Magic Number,EB.Sparx,NetworkENet,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.ENet\SparxNetworkENet.cs,NetworkENet,The following statement contains a magic number: _sendBuffer = new Buffer (64 * 1024);  
Magic Number,EB.Sparx,NetworkENet,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.ENet\SparxNetworkENet.cs,Connect,The following statement contains a magic number: _host = ENet.Plugin.CreateHost (local' 1' 4' 0' 0);  
Magic Number,EB.Sparx,NetworkENet,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.ENet\SparxNetworkENet.cs,Connect,The following statement contains a magic number: _peer = ENet.Plugin.Connect (_host' remote' 4' connId);  
Magic Number,EB.Sparx,FacebookAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxFacebookAPI.cs,GetStatusCode,The following statement contains a magic number: if (www.responseHeaders.TryGetValue ("STATUS"' out header)) {  	var parts = header.Split (' ');  	if (parts.Length > 2) {  		int value = 0;  		int.TryParse (parts [1]' out value);  		return value;  	}  }  
Magic Number,EB.Sparx,FacebookAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxFacebookAPI.cs,GetStatusCode,The following statement contains a magic number: if (parts.Length > 2) {  	int value = 0;  	int.TryParse (parts [1]' out value);  	return value;  }  
Magic Number,EB.Sparx,FacebookAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxFacebookAPI.cs,_Graph,The following statement contains a magic number: for (int i = 0; i < _numRetries; ++i) {  	WWW www = null;  	if (method == "POST") {  		var form = BuildForm (parameters);  		www = new WWW (url + "?access_token=" + _accessToken' form);  	}  	else {  		parameters ["access_token"] = _accessToken;  		www = new WWW (url + "?" + QueryString.Stringify (parameters));  	}  	EB.Debug.Log ("url: " + www.url);  	yield return www;  	var status = GetStatusCode (www);  	if (string.IsNullOrEmpty (www.error)) {  		var text = www.text;  		try {  			EB.Debug.Log ("FbResult: " + text);  			var result = JSON.Parse (text);  			callback (null' result);  			yield break;  		}  		catch {  		}  	}  	else if (status >= 400 && status <= 499) {  		// client error  		lastError = www.error;  		break;  	}  	else {  		EB.Debug.Log ("Error headers: {0}"' www.responseHeaders);  		// facebook error  		lastError = www.error;  		yield return new WaitForSeconds (0.5f);  	}  }  
Magic Number,EB.Sparx,FacebookAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxFacebookAPI.cs,_Graph,The following statement contains a magic number: for (int i = 0; i < _numRetries; ++i) {  	WWW www = null;  	if (method == "POST") {  		var form = BuildForm (parameters);  		www = new WWW (url + "?access_token=" + _accessToken' form);  	}  	else {  		parameters ["access_token"] = _accessToken;  		www = new WWW (url + "?" + QueryString.Stringify (parameters));  	}  	EB.Debug.Log ("url: " + www.url);  	yield return www;  	var status = GetStatusCode (www);  	if (string.IsNullOrEmpty (www.error)) {  		var text = www.text;  		try {  			EB.Debug.Log ("FbResult: " + text);  			var result = JSON.Parse (text);  			callback (null' result);  			yield break;  		}  		catch {  		}  	}  	else if (status >= 400 && status <= 499) {  		// client error  		lastError = www.error;  		break;  	}  	else {  		EB.Debug.Log ("Error headers: {0}"' www.responseHeaders);  		// facebook error  		lastError = www.error;  		yield return new WaitForSeconds (0.5f);  	}  }  
Magic Number,EB.Sparx,FacebookAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxFacebookAPI.cs,_Graph,The following statement contains a magic number: if (string.IsNullOrEmpty (www.error)) {  	var text = www.text;  	try {  		EB.Debug.Log ("FbResult: " + text);  		var result = JSON.Parse (text);  		callback (null' result);  		yield break;  	}  	catch {  	}  }  else if (status >= 400 && status <= 499) {  	// client error  	lastError = www.error;  	break;  }  else {  	EB.Debug.Log ("Error headers: {0}"' www.responseHeaders);  	// facebook error  	lastError = www.error;  	yield return new WaitForSeconds (0.5f);  }  
Magic Number,EB.Sparx,FacebookAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxFacebookAPI.cs,_Graph,The following statement contains a magic number: if (string.IsNullOrEmpty (www.error)) {  	var text = www.text;  	try {  		EB.Debug.Log ("FbResult: " + text);  		var result = JSON.Parse (text);  		callback (null' result);  		yield break;  	}  	catch {  	}  }  else if (status >= 400 && status <= 499) {  	// client error  	lastError = www.error;  	break;  }  else {  	EB.Debug.Log ("Error headers: {0}"' www.responseHeaders);  	// facebook error  	lastError = www.error;  	yield return new WaitForSeconds (0.5f);  }  
Magic Number,EB.Sparx,FacebookAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxFacebookAPI.cs,_Graph,The following statement contains a magic number: if (status >= 400 && status <= 499) {  	// client error  	lastError = www.error;  	break;  }  else {  	EB.Debug.Log ("Error headers: {0}"' www.responseHeaders);  	// facebook error  	lastError = www.error;  	yield return new WaitForSeconds (0.5f);  }  
Magic Number,EB.Sparx,FacebookAPI,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\API\SparxFacebookAPI.cs,_Graph,The following statement contains a magic number: if (status >= 400 && status <= 499) {  	// client error  	lastError = www.error;  	break;  }  else {  	EB.Debug.Log ("Error headers: {0}"' www.responseHeaders);  	// facebook error  	lastError = www.error;  	yield return new WaitForSeconds (0.5f);  }  
Magic Number,EB.Sparx,ChatManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxChatManager.cs,Initialize,The following statement contains a magic number: _deffered = new Deferred (4);  
Magic Number,EB.Sparx,ChatManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxChatManager.cs,_OnError,The following statement contains a magic number: _deffered.Defer ((Action)delegate () {  	Coroutines.SetTimeout (delegate () {  		EB.Debug.Log ("Reconnecting to chat server: " + err);  		Reconnect ();  	}' (int)Mathf.Pow (2' _retry) * 1000);  });  
Magic Number,EB.Sparx,ChatManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxChatManager.cs,_OnError,The following statement contains a magic number: _deffered.Defer ((Action)delegate () {  	Coroutines.SetTimeout (delegate () {  		EB.Debug.Log ("Reconnecting to chat server: " + err);  		Reconnect ();  	}' (int)Mathf.Pow (2' _retry) * 1000);  });  
Magic Number,EB.Sparx,ChatManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxChatManager.cs,_OnError,The following statement contains a magic number: Coroutines.SetTimeout (delegate () {  	EB.Debug.Log ("Reconnecting to chat server: " + err);  	Reconnect ();  }' (int)Mathf.Pow (2' _retry) * 1000);  
Magic Number,EB.Sparx,ChatManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxChatManager.cs,_OnError,The following statement contains a magic number: Coroutines.SetTimeout (delegate () {  	EB.Debug.Log ("Reconnecting to chat server: " + err);  	Reconnect ();  }' (int)Mathf.Pow (2' _retry) * 1000);  
Magic Number,EB.Sparx,GameCenterManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxGameCenterManager.cs,ReportProgress,The following statement contains a magic number: if (!string.IsNullOrEmpty (_config.AchievementPrefix)) {  	if (progress > 100) {  		progress = 100;  	}  	if (progress < 0) {  		progress = 0;  	}  	EB.Debug.Log ("Report progress: " + achievementId + " " + progress);  	#if UNITY_IPHONE && !UNITY_EDITOR  					Social.ReportProgress(_config.AchievementPrefix +achievementId' progress' OnReportProgress);  #endif  }  
Magic Number,EB.Sparx,GameCenterManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxGameCenterManager.cs,ReportProgress,The following statement contains a magic number: if (!string.IsNullOrEmpty (_config.AchievementPrefix)) {  	if (progress > 100) {  		progress = 100;  	}  	if (progress < 0) {  		progress = 0;  	}  	EB.Debug.Log ("Report progress: " + achievementId + " " + progress);  	#if UNITY_IPHONE && !UNITY_EDITOR  					Social.ReportProgress(_config.AchievementPrefix +achievementId' progress' OnReportProgress);  #endif  }  
Magic Number,EB.Sparx,GameCenterManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxGameCenterManager.cs,ReportProgress,The following statement contains a magic number: if (progress > 100) {  	progress = 100;  }  
Magic Number,EB.Sparx,GameCenterManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxGameCenterManager.cs,ReportProgress,The following statement contains a magic number: if (progress > 100) {  	progress = 100;  }  
Magic Number,EB.Sparx,GameCenterManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxGameCenterManager.cs,ReportProgress,The following statement contains a magic number: progress = 100;  
Magic Number,EB.Sparx,GameCenterManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxGameCenterManager.cs,OnLeaderboardTitle,The following statement contains a magic number: if (_leaderboardTitleCallback != null && elements.Length == 2) {  	_leaderboardTitleCallback (elements [0]' elements [1]);  }  
Magic Number,EB.Sparx,PushManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxPushManager.cs,Initialize,The following statement contains a magic number: _deffered = new Deferred (4);  
Magic Number,EB.Sparx,PushManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxPushManager.cs,OnError,The following statement contains a magic number: _deffered.Defer ((Action)delegate () {  	EB.Debug.Log ("Lost connect to push server: " + error);  	if (OnDisconnected != null) {  		OnDisconnected ();  	}  	Coroutines.SetTimeout (delegate () {  		ConnectWebsocket ();  	}' 1000);  });  
Magic Number,EB.Sparx,PushManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxPushManager.cs,OnError,The following statement contains a magic number: Coroutines.SetTimeout (delegate () {  	ConnectWebsocket ();  }' 1000);  
Magic Number,EB.Sparx,HttpEndPoint,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\EndPoints\SparxHttpEndPoint.cs,HttpEndPoint,The following statement contains a magic number: AddData (string.Empty' "sver"' 2);  
Magic Number,EB.Sparx,HttpEndPoint,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\EndPoints\SparxHttpEndPoint.cs,StartKeepAlive,The following statement contains a magic number: if (Options.KeepAlive && Options.KeepAliveInterval > 0 && !string.IsNullOrEmpty (Options.KeepAliveUrl)) {  	_interval = Coroutines.SetInterval (OnInterval' (Options.KeepAliveInterval * 1000) / 4);  }  
Magic Number,EB.Sparx,HttpEndPoint,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\EndPoints\SparxHttpEndPoint.cs,StartKeepAlive,The following statement contains a magic number: if (Options.KeepAlive && Options.KeepAliveInterval > 0 && !string.IsNullOrEmpty (Options.KeepAliveUrl)) {  	_interval = Coroutines.SetInterval (OnInterval' (Options.KeepAliveInterval * 1000) / 4);  }  
Magic Number,EB.Sparx,HttpEndPoint,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\EndPoints\SparxHttpEndPoint.cs,StartKeepAlive,The following statement contains a magic number: _interval = Coroutines.SetInterval (OnInterval' (Options.KeepAliveInterval * 1000) / 4);  
Magic Number,EB.Sparx,HttpEndPoint,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\EndPoints\SparxHttpEndPoint.cs,StartKeepAlive,The following statement contains a magic number: _interval = Coroutines.SetInterval (OnInterval' (Options.KeepAliveInterval * 1000) / 4);  
Magic Number,EB.Sparx,HttpEndPoint,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\EndPoints\SparxHttpEndPoint.cs,Sign,The following statement contains a magic number: if (Options.Key != null) {  	var sb = new System.Text.StringBuilder (2048);  	sb.Append (method);  	sb.Append ("\n");  	sb.Append (r.uri.HostAndPort);  	sb.Append ("\n");  	sb.Append (r.uri.Path);  	sb.Append ("\n");  	sb.Append (data);  	sb.Append ("\n");  	//EB.Debug.Log("String to sign: " + sb);  	var digest = _hmac.Hash (Encoding.GetBytes (sb.ToString ()));  	return Encoding.ToBase64String (digest);  }  
Magic Number,EB.Sparx,HttpEndPoint,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\EndPoints\SparxHttpEndPoint.cs,Fetch,The following statement contains a magic number: if ((System.DateTime.Now - _lastMemoryCheck).TotalSeconds > 2) {  	EB.Memory.Update (10000);  	_lastMemoryCheck = System.DateTime.Now;  }  
Magic Number,EB.Sparx,HttpEndPoint,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\EndPoints\SparxHttpEndPoint.cs,Fetch,The following statement contains a magic number: if ((System.DateTime.Now - _lastMemoryCheck).TotalSeconds > 2) {  	EB.Memory.Update (10000);  	_lastMemoryCheck = System.DateTime.Now;  }  
Magic Number,EB.Sparx,HttpEndPoint,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\EndPoints\SparxHttpEndPoint.cs,Fetch,The following statement contains a magic number: EB.Memory.Update (10000);  
Magic Number,EB.Sparx,WebSocketEndPoint,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\EndPoints\SparxWebSocketEndPoint.cs,OnError,The following statement contains a magic number: if (Options.KeepAlive) {  	// reconnect if there's a error  	_deferred.Defer ((Action)delegate () {  		Coroutines.SetTimeout (delegate () {  			EB.Debug.Log ("Reconnecting");  			ConnectIfNeeded ();  		}' 1000);  	});  }  
Magic Number,EB.Sparx,WebSocketEndPoint,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\EndPoints\SparxWebSocketEndPoint.cs,OnError,The following statement contains a magic number: _deferred.Defer ((Action)delegate () {  	Coroutines.SetTimeout (delegate () {  		EB.Debug.Log ("Reconnecting");  		ConnectIfNeeded ();  	}' 1000);  });  
Magic Number,EB.Sparx,WebSocketEndPoint,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\EndPoints\SparxWebSocketEndPoint.cs,OnError,The following statement contains a magic number: Coroutines.SetTimeout (delegate () {  	EB.Debug.Log ("Reconnecting");  	ConnectIfNeeded ();  }' 1000);  
Magic Number,EB.Sparx,NetworkWS,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\GameManager\SparxNetworkWS.cs,NetworkWS,The following statement contains a magic number: _deferred = new Deferred (4);  
Magic Number,EB.Sparx,NetworkWS,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\GameManager\SparxNetworkWS.cs,NetworkWS,The following statement contains a magic number: _sendBuffer = new Buffer (64 * 1024);  
Magic Number,EB.Sparx,NetworkWS,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\GameManager\SparxNetworkWS.cs,NetworkWS,The following statement contains a magic number: _sendBuffer = new Buffer (64 * 1024);  
Magic Number,EB.Sparx,NetworkWS,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\GameManager\SparxNetworkWS.cs,Connect,The following statement contains a magic number: _socket.PingTimeout = 5 * 1000;  
Magic Number,EB.Sparx,NetworkWS,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\GameManager\SparxNetworkWS.cs,Connect,The following statement contains a magic number: _socket.PingTimeout = 5 * 1000;  
Magic Number,EB.Sparx,MasterServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\MasterServer\SparxMasterServer.cs,CreateEndPoint,The following statement contains a magic number: return EndPointFactory.Create (EndPoint' new EndPointOptions {  	Key = Encoding.GetBytes (Token)'  	Protocol = "io.sparx.master-client"'  	ActivityTimeout = 30 * 1000  });  
Magic Number,EB.Sparx,MasterServer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\MasterServer\SparxMasterServer.cs,CreateEndPoint,The following statement contains a magic number: return EndPointFactory.Create (EndPoint' new EndPointOptions {  	Key = Encoding.GetBytes (Token)'  	Protocol = "io.sparx.master-client"'  	ActivityTimeout = 30 * 1000  });  
Magic Number,EB.Sparx,Request,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\SparxRequest.cs,Request,The following statement contains a magic number: numRetries = 5;  
Magic Number,EB.Sparx,Response,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\SparxRequest.cs,Parse,The following statement contains a magic number: if (string.IsNullOrEmpty (www.error) && !string.IsNullOrEmpty (www.text)) {  	res.text = www.text ?? string.Empty;  	res.result = null;  	res.error = null;  	try {  		object obj = JSON.Parse (www.text);  		if (obj == null) {  			res.error = "Failed to decode json: " + www.text;  		}  		else {  			if (obj is Hashtable) {  				Hashtable response = obj as Hashtable;  				res.result = response ["result"];  				res.async = (ArrayList)response ["async"];  				res.error = response ["err"];  				res.ts = Dot.Integer ("ts"' response' 0);  			}  			else {  				res.error = "Obj is " + obj.ToString ();  			}  		}  	}  	catch (System.Exception ex) {  		EB.Debug.LogWarning ("failed to decode www " + ex);  		res.error = ex;  	}  	if (res.error == null) {  		res.sucessful = true;  		res.fatal = false;  		res.sessionError = false;  		return;  	}  	res.fatal = Dot.Bool ("fatal"' res.hashtable' true);  	res.sessionError = Dot.Bool ("invalid_session"' res.hashtable' false);  	res.retry = Dot.Bool ("retry"' res.hashtable' true);  }  else {  	res.error = www.error ?? "unknown";  	res.fatal = true;  	res.retry = true;  	// if this is a client error' then don't retry  	if (www.statusCode >= 400 && www.statusCode <= 499) {  		res.retry = false;  	}  }  
Magic Number,EB.Sparx,Response,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\SparxRequest.cs,Parse,The following statement contains a magic number: if (string.IsNullOrEmpty (www.error) && !string.IsNullOrEmpty (www.text)) {  	res.text = www.text ?? string.Empty;  	res.result = null;  	res.error = null;  	try {  		object obj = JSON.Parse (www.text);  		if (obj == null) {  			res.error = "Failed to decode json: " + www.text;  		}  		else {  			if (obj is Hashtable) {  				Hashtable response = obj as Hashtable;  				res.result = response ["result"];  				res.async = (ArrayList)response ["async"];  				res.error = response ["err"];  				res.ts = Dot.Integer ("ts"' response' 0);  			}  			else {  				res.error = "Obj is " + obj.ToString ();  			}  		}  	}  	catch (System.Exception ex) {  		EB.Debug.LogWarning ("failed to decode www " + ex);  		res.error = ex;  	}  	if (res.error == null) {  		res.sucessful = true;  		res.fatal = false;  		res.sessionError = false;  		return;  	}  	res.fatal = Dot.Bool ("fatal"' res.hashtable' true);  	res.sessionError = Dot.Bool ("invalid_session"' res.hashtable' false);  	res.retry = Dot.Bool ("retry"' res.hashtable' true);  }  else {  	res.error = www.error ?? "unknown";  	res.fatal = true;  	res.retry = true;  	// if this is a client error' then don't retry  	if (www.statusCode >= 400 && www.statusCode <= 499) {  		res.retry = false;  	}  }  
Magic Number,EB.Sparx,Response,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\SparxRequest.cs,Parse,The following statement contains a magic number: if (www.statusCode >= 400 && www.statusCode <= 499) {  	res.retry = false;  }  
Magic Number,EB.Sparx,Response,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\SparxRequest.cs,Parse,The following statement contains a magic number: if (www.statusCode >= 400 && www.statusCode <= 499) {  	res.retry = false;  }  
Magic Number,EB.Sparx,Discovery,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Util\SparxDiscovery.cs,Start,The following statement contains a magic number: _receive = Coroutines.SetInterval (this.Recieve' 10);  
Magic Number,EB.Sparx,Discovery,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Util\SparxDiscovery.cs,Start,The following statement contains a magic number: _send = Coroutines.SetInterval (this.Send' 1000);  
Magic Number,EB.Sparx,Discovery,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Util\SparxDiscovery.cs,Recieve,The following statement contains a magic number: if (_client.Available > 0) {  	try {  		IPEndPoint from = null;  		var data = _client.Receive (ref from);  		var str = EB.Encoding.GetString (data);  		var obj = (Hashtable)JSON.Parse (str);  		var name = EB.Dot.String ("name"' obj' "");  		var port = EB.Dot.Integer ("port"' obj' 443);  		var ssl = EB.Dot.Bool ("ssl"' obj' true);  		var url = (ssl ? "https" : "http") + "://" + from.Address.ToString () + ":" + port;  		AddServer (new Server (name' url));  	}  	catch {  	}  }  
Magic Number,EB.Sparx,Discovery,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Util\SparxDiscovery.cs,Recieve,The following statement contains a magic number: try {  	IPEndPoint from = null;  	var data = _client.Receive (ref from);  	var str = EB.Encoding.GetString (data);  	var obj = (Hashtable)JSON.Parse (str);  	var name = EB.Dot.String ("name"' obj' "");  	var port = EB.Dot.Integer ("port"' obj' 443);  	var ssl = EB.Dot.Bool ("ssl"' obj' true);  	var url = (ssl ? "https" : "http") + "://" + from.Address.ToString () + ":" + port;  	AddServer (new Server (name' url));  }  catch {  }  
Magic Number,EB.GameTalk,Manager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.GameTalk\EBGameTalkManager.cs,Manager,The following statement contains a magic number: if (Enabled == true) {  	_config = config;  	_rpcs = new Hashtable ();  	_deferred = new EB.Deferred (8);  	_updateHandle = EB.Coroutines.SetUpdate (_deferred.Dispatch);  	// load certs  	EB.Net.TcpClientFactory.LoadCertStore ("Certs");  	// make the signed request  	Hashtable data = new Hashtable ();  	data ["_id"] = EB.Version.GetMACAddress ();  	data ["type"] = Application.platform.ToString ();  	data ["game"] = _config.game;  	data ["last"] = EB.Time.Now;  	data ["algorithm"] = "hmac-sha1";  	var json = EB.JSON.Stringify (data);  	var key = SignedRequest.Stringify (Encoding.GetBytes (json)' Hmac.Sha1 (Encoding.GetBytes (_config.serverKey)));  	var url = _config.serverUrl + "?access_token=" + key;  	_wsUrl = new EB.Uri (url);  	Debug.Log ("GameTalk Url: " + url);  	_socket = new EB.Net.TalkWebSocket ();  	_socket.OnError += this.OnError;  	_socket.OnRPC += this.OnRPC;  	Bind (string.Empty' new RPC.Global ());  	ConnectIfNeeded ();  }  
Magic Number,EB.GameTalk,Manager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.GameTalk\EBGameTalkManager.cs,Manager,The following statement contains a magic number: _deferred = new EB.Deferred (8);  
Magic Number,EB.IAP,Item,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.IAP\IAPManager.cs,Item,The following statement contains a magic number: cents = UnityEngine.Mathf.RoundToInt (cost * 100);  
Magic Number,EB.IAP.Internal,DebugProvider,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.IAP\Internal\IAPDebugProvider.cs,PurchaseItem,The following statement contains a magic number: data ["orderId"] = EB.Encoding.ToHexString (EB.Crypto.RandomBytes (32));  
Magic Number,EB.Net,TcpClientBouncy,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\Clients\NetTcpClientBouncy.cs,TcpClientBouncy,The following statement contains a magic number: _readBuffer = new byte[4 * 1024];  
Magic Number,EB.Net,TcpClientBouncy,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\Clients\NetTcpClientBouncy.cs,TcpClientBouncy,The following statement contains a magic number: _readBuffer = new byte[4 * 1024];  
Magic Number,EB.Net,TcpClientBouncy,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\Clients\NetTcpClientBouncy.cs,TryConnect,The following statement contains a magic number: while (async.IsCompleted == false && System.DateTime.Now < timeout) {  	System.Threading.Thread.Sleep (100);  }  
Magic Number,EB.Net,TcpClientBouncy,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\Clients\NetTcpClientBouncy.cs,TryConnect,The following statement contains a magic number: System.Threading.Thread.Sleep (100);  
Magic Number,EB.Net,TcpClientBouncy,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\Clients\NetTcpClientBouncy.cs,TryConnect,The following statement contains a magic number: if (_secure) {  	EB.Debug.Log ("doing ssl connect");  	try {  		var random = new System.Random ();  		var bytes = new byte[20];  		random.NextBytes (bytes);  		var secureRandom = new SecureRandom (bytes);  		_auth = new MyTlsAuthentication ();  		_tlsClient = new MyTlsClient (_auth);  		_handler = new TlsProtocolHandler (_net' secureRandom);  		_handler.Connect (_tlsClient);  		_stream = _handler.Stream;  		if (_stream == null) {  			EB.Debug.LogError ("stream is null");  			_error = NetworkFailure.SecureConnectionFailed;  			return false;  		}  	}  	catch (System.Exception ex) {  		EB.Debug.LogError ("ssl connect failed " + ex);  		_error = NetworkFailure.SecureConnectionFailed;  		return false;  	}  }  
Magic Number,EB.Net,TcpClientBouncy,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\Clients\NetTcpClientBouncy.cs,TryConnect,The following statement contains a magic number: try {  	var random = new System.Random ();  	var bytes = new byte[20];  	random.NextBytes (bytes);  	var secureRandom = new SecureRandom (bytes);  	_auth = new MyTlsAuthentication ();  	_tlsClient = new MyTlsClient (_auth);  	_handler = new TlsProtocolHandler (_net' secureRandom);  	_handler.Connect (_tlsClient);  	_stream = _handler.Stream;  	if (_stream == null) {  		EB.Debug.LogError ("stream is null");  		_error = NetworkFailure.SecureConnectionFailed;  		return false;  	}  }  catch (System.Exception ex) {  	EB.Debug.LogError ("ssl connect failed " + ex);  	_error = NetworkFailure.SecureConnectionFailed;  	return false;  }  
Magic Number,EB.Net,TcpClientMono,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\Clients\NetTcpClientMono.cs,TcpClientMono,The following statement contains a magic number: _readBuffer = new byte[4096];  
Magic Number,EB.Net,TcpClientMono,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\Clients\NetTcpClientMono.cs,TryConnect,The following statement contains a magic number: while (async.IsCompleted == false && System.DateTime.Now < timeout) {  	System.Threading.Thread.Sleep (100);  }  
Magic Number,EB.Net,TcpClientMono,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\Clients\NetTcpClientMono.cs,TryConnect,The following statement contains a magic number: System.Threading.Thread.Sleep (100);  
Magic Number,EB.Net,DNS,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetDNS.cs,Lookup,The following statement contains a magic number: try {  	var async = DnsBase.BeginGetHostAddresses (hostname' null' null);  	var timeout = System.DateTime.Now + System.TimeSpan.FromSeconds (5);  	while (System.DateTime.Now < timeout) {  		if (async.IsCompleted) {  			var tmp = DnsBase.EndGetHostAddresses (async);  			if (tmp != null) {  				foreach (var ip in tmp) {  					if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork) {  						//Debug.Log("addr " + ip);  						addresses.Add (ip);  					}  				}  			}  			break;  		}  	}  }  catch (System.Exception ex) {  	// failure'   	EB.Debug.LogError ("failed to lookup " + hostname + " " + ex);  }  
Magic Number,EB.Net,TalkWebSocket,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetTalkWebSocket.cs,MessageHandler,The following statement contains a magic number: try {  	var data = JSON.Parse (message);  	if (data is ArrayList) {  		var list = data as ArrayList;  		if (list.Count != 4) {  			throw new System.IO.IOException ("Invalid message: " + message);  		}  		EB.Debug.Log ("<-N " + message);  		// stupid json casting...  		int type = (int)(double)list [0];  		int id = (int)(double)list [1];  		if (type == TYPE_CALL || type == TYPE_ASYNC) {  			// call here  			var rpc = list [2] as string;  			var args = list [3] as ArrayList;  			var callback = (EB.Action<string' object>)delegate (string error' object result) {  				if (type == TYPE_CALL) {  					SendMsg (new object[] {  						TYPE_RESULT'  						id'  						error'  						result  					});  				}  			};  			if (OnRPC != null) {  				OnRPC (rpc' args' callback);  			}  			else {  				callback ("no handler for rpc"' null);  			}  		}  		else if (type == TYPE_RESULT) {  			// got back a result  			var error = list [2];  			var errStr = error != null ? error.ToString () : null;  			var result = list [3];  			object cbObj = null;  			lock (_callbacks) {  				cbObj = _callbacks [id];  				_callbacks.Remove (id);  			}  			if (cbObj != null) {  				// make the callback  				((EB.Action<string' object>)cbObj) (errStr' result);  			}  			else {  				EB.Debug.LogError ("Callback missing for id " + id);  			}  		}  		else {  			Debug.LogError ("Unknown message type " + type);  		}  	}  }  catch (System.Exception e) {  	Error ("wstalk exception: " + e);  }  
Magic Number,EB.Net,TalkWebSocket,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetTalkWebSocket.cs,MessageHandler,The following statement contains a magic number: try {  	var data = JSON.Parse (message);  	if (data is ArrayList) {  		var list = data as ArrayList;  		if (list.Count != 4) {  			throw new System.IO.IOException ("Invalid message: " + message);  		}  		EB.Debug.Log ("<-N " + message);  		// stupid json casting...  		int type = (int)(double)list [0];  		int id = (int)(double)list [1];  		if (type == TYPE_CALL || type == TYPE_ASYNC) {  			// call here  			var rpc = list [2] as string;  			var args = list [3] as ArrayList;  			var callback = (EB.Action<string' object>)delegate (string error' object result) {  				if (type == TYPE_CALL) {  					SendMsg (new object[] {  						TYPE_RESULT'  						id'  						error'  						result  					});  				}  			};  			if (OnRPC != null) {  				OnRPC (rpc' args' callback);  			}  			else {  				callback ("no handler for rpc"' null);  			}  		}  		else if (type == TYPE_RESULT) {  			// got back a result  			var error = list [2];  			var errStr = error != null ? error.ToString () : null;  			var result = list [3];  			object cbObj = null;  			lock (_callbacks) {  				cbObj = _callbacks [id];  				_callbacks.Remove (id);  			}  			if (cbObj != null) {  				// make the callback  				((EB.Action<string' object>)cbObj) (errStr' result);  			}  			else {  				EB.Debug.LogError ("Callback missing for id " + id);  			}  		}  		else {  			Debug.LogError ("Unknown message type " + type);  		}  	}  }  catch (System.Exception e) {  	Error ("wstalk exception: " + e);  }  
Magic Number,EB.Net,TalkWebSocket,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetTalkWebSocket.cs,MessageHandler,The following statement contains a magic number: try {  	var data = JSON.Parse (message);  	if (data is ArrayList) {  		var list = data as ArrayList;  		if (list.Count != 4) {  			throw new System.IO.IOException ("Invalid message: " + message);  		}  		EB.Debug.Log ("<-N " + message);  		// stupid json casting...  		int type = (int)(double)list [0];  		int id = (int)(double)list [1];  		if (type == TYPE_CALL || type == TYPE_ASYNC) {  			// call here  			var rpc = list [2] as string;  			var args = list [3] as ArrayList;  			var callback = (EB.Action<string' object>)delegate (string error' object result) {  				if (type == TYPE_CALL) {  					SendMsg (new object[] {  						TYPE_RESULT'  						id'  						error'  						result  					});  				}  			};  			if (OnRPC != null) {  				OnRPC (rpc' args' callback);  			}  			else {  				callback ("no handler for rpc"' null);  			}  		}  		else if (type == TYPE_RESULT) {  			// got back a result  			var error = list [2];  			var errStr = error != null ? error.ToString () : null;  			var result = list [3];  			object cbObj = null;  			lock (_callbacks) {  				cbObj = _callbacks [id];  				_callbacks.Remove (id);  			}  			if (cbObj != null) {  				// make the callback  				((EB.Action<string' object>)cbObj) (errStr' result);  			}  			else {  				EB.Debug.LogError ("Callback missing for id " + id);  			}  		}  		else {  			Debug.LogError ("Unknown message type " + type);  		}  	}  }  catch (System.Exception e) {  	Error ("wstalk exception: " + e);  }  
Magic Number,EB.Net,TalkWebSocket,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetTalkWebSocket.cs,MessageHandler,The following statement contains a magic number: try {  	var data = JSON.Parse (message);  	if (data is ArrayList) {  		var list = data as ArrayList;  		if (list.Count != 4) {  			throw new System.IO.IOException ("Invalid message: " + message);  		}  		EB.Debug.Log ("<-N " + message);  		// stupid json casting...  		int type = (int)(double)list [0];  		int id = (int)(double)list [1];  		if (type == TYPE_CALL || type == TYPE_ASYNC) {  			// call here  			var rpc = list [2] as string;  			var args = list [3] as ArrayList;  			var callback = (EB.Action<string' object>)delegate (string error' object result) {  				if (type == TYPE_CALL) {  					SendMsg (new object[] {  						TYPE_RESULT'  						id'  						error'  						result  					});  				}  			};  			if (OnRPC != null) {  				OnRPC (rpc' args' callback);  			}  			else {  				callback ("no handler for rpc"' null);  			}  		}  		else if (type == TYPE_RESULT) {  			// got back a result  			var error = list [2];  			var errStr = error != null ? error.ToString () : null;  			var result = list [3];  			object cbObj = null;  			lock (_callbacks) {  				cbObj = _callbacks [id];  				_callbacks.Remove (id);  			}  			if (cbObj != null) {  				// make the callback  				((EB.Action<string' object>)cbObj) (errStr' result);  			}  			else {  				EB.Debug.LogError ("Callback missing for id " + id);  			}  		}  		else {  			Debug.LogError ("Unknown message type " + type);  		}  	}  }  catch (System.Exception e) {  	Error ("wstalk exception: " + e);  }  
Magic Number,EB.Net,TalkWebSocket,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetTalkWebSocket.cs,MessageHandler,The following statement contains a magic number: try {  	var data = JSON.Parse (message);  	if (data is ArrayList) {  		var list = data as ArrayList;  		if (list.Count != 4) {  			throw new System.IO.IOException ("Invalid message: " + message);  		}  		EB.Debug.Log ("<-N " + message);  		// stupid json casting...  		int type = (int)(double)list [0];  		int id = (int)(double)list [1];  		if (type == TYPE_CALL || type == TYPE_ASYNC) {  			// call here  			var rpc = list [2] as string;  			var args = list [3] as ArrayList;  			var callback = (EB.Action<string' object>)delegate (string error' object result) {  				if (type == TYPE_CALL) {  					SendMsg (new object[] {  						TYPE_RESULT'  						id'  						error'  						result  					});  				}  			};  			if (OnRPC != null) {  				OnRPC (rpc' args' callback);  			}  			else {  				callback ("no handler for rpc"' null);  			}  		}  		else if (type == TYPE_RESULT) {  			// got back a result  			var error = list [2];  			var errStr = error != null ? error.ToString () : null;  			var result = list [3];  			object cbObj = null;  			lock (_callbacks) {  				cbObj = _callbacks [id];  				_callbacks.Remove (id);  			}  			if (cbObj != null) {  				// make the callback  				((EB.Action<string' object>)cbObj) (errStr' result);  			}  			else {  				EB.Debug.LogError ("Callback missing for id " + id);  			}  		}  		else {  			Debug.LogError ("Unknown message type " + type);  		}  	}  }  catch (System.Exception e) {  	Error ("wstalk exception: " + e);  }  
Magic Number,EB.Net,TalkWebSocket,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetTalkWebSocket.cs,MessageHandler,The following statement contains a magic number: if (data is ArrayList) {  	var list = data as ArrayList;  	if (list.Count != 4) {  		throw new System.IO.IOException ("Invalid message: " + message);  	}  	EB.Debug.Log ("<-N " + message);  	// stupid json casting...  	int type = (int)(double)list [0];  	int id = (int)(double)list [1];  	if (type == TYPE_CALL || type == TYPE_ASYNC) {  		// call here  		var rpc = list [2] as string;  		var args = list [3] as ArrayList;  		var callback = (EB.Action<string' object>)delegate (string error' object result) {  			if (type == TYPE_CALL) {  				SendMsg (new object[] {  					TYPE_RESULT'  					id'  					error'  					result  				});  			}  		};  		if (OnRPC != null) {  			OnRPC (rpc' args' callback);  		}  		else {  			callback ("no handler for rpc"' null);  		}  	}  	else if (type == TYPE_RESULT) {  		// got back a result  		var error = list [2];  		var errStr = error != null ? error.ToString () : null;  		var result = list [3];  		object cbObj = null;  		lock (_callbacks) {  			cbObj = _callbacks [id];  			_callbacks.Remove (id);  		}  		if (cbObj != null) {  			// make the callback  			((EB.Action<string' object>)cbObj) (errStr' result);  		}  		else {  			EB.Debug.LogError ("Callback missing for id " + id);  		}  	}  	else {  		Debug.LogError ("Unknown message type " + type);  	}  }  
Magic Number,EB.Net,TalkWebSocket,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetTalkWebSocket.cs,MessageHandler,The following statement contains a magic number: if (data is ArrayList) {  	var list = data as ArrayList;  	if (list.Count != 4) {  		throw new System.IO.IOException ("Invalid message: " + message);  	}  	EB.Debug.Log ("<-N " + message);  	// stupid json casting...  	int type = (int)(double)list [0];  	int id = (int)(double)list [1];  	if (type == TYPE_CALL || type == TYPE_ASYNC) {  		// call here  		var rpc = list [2] as string;  		var args = list [3] as ArrayList;  		var callback = (EB.Action<string' object>)delegate (string error' object result) {  			if (type == TYPE_CALL) {  				SendMsg (new object[] {  					TYPE_RESULT'  					id'  					error'  					result  				});  			}  		};  		if (OnRPC != null) {  			OnRPC (rpc' args' callback);  		}  		else {  			callback ("no handler for rpc"' null);  		}  	}  	else if (type == TYPE_RESULT) {  		// got back a result  		var error = list [2];  		var errStr = error != null ? error.ToString () : null;  		var result = list [3];  		object cbObj = null;  		lock (_callbacks) {  			cbObj = _callbacks [id];  			_callbacks.Remove (id);  		}  		if (cbObj != null) {  			// make the callback  			((EB.Action<string' object>)cbObj) (errStr' result);  		}  		else {  			EB.Debug.LogError ("Callback missing for id " + id);  		}  	}  	else {  		Debug.LogError ("Unknown message type " + type);  	}  }  
Magic Number,EB.Net,TalkWebSocket,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetTalkWebSocket.cs,MessageHandler,The following statement contains a magic number: if (data is ArrayList) {  	var list = data as ArrayList;  	if (list.Count != 4) {  		throw new System.IO.IOException ("Invalid message: " + message);  	}  	EB.Debug.Log ("<-N " + message);  	// stupid json casting...  	int type = (int)(double)list [0];  	int id = (int)(double)list [1];  	if (type == TYPE_CALL || type == TYPE_ASYNC) {  		// call here  		var rpc = list [2] as string;  		var args = list [3] as ArrayList;  		var callback = (EB.Action<string' object>)delegate (string error' object result) {  			if (type == TYPE_CALL) {  				SendMsg (new object[] {  					TYPE_RESULT'  					id'  					error'  					result  				});  			}  		};  		if (OnRPC != null) {  			OnRPC (rpc' args' callback);  		}  		else {  			callback ("no handler for rpc"' null);  		}  	}  	else if (type == TYPE_RESULT) {  		// got back a result  		var error = list [2];  		var errStr = error != null ? error.ToString () : null;  		var result = list [3];  		object cbObj = null;  		lock (_callbacks) {  			cbObj = _callbacks [id];  			_callbacks.Remove (id);  		}  		if (cbObj != null) {  			// make the callback  			((EB.Action<string' object>)cbObj) (errStr' result);  		}  		else {  			EB.Debug.LogError ("Callback missing for id " + id);  		}  	}  	else {  		Debug.LogError ("Unknown message type " + type);  	}  }  
Magic Number,EB.Net,TalkWebSocket,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetTalkWebSocket.cs,MessageHandler,The following statement contains a magic number: if (data is ArrayList) {  	var list = data as ArrayList;  	if (list.Count != 4) {  		throw new System.IO.IOException ("Invalid message: " + message);  	}  	EB.Debug.Log ("<-N " + message);  	// stupid json casting...  	int type = (int)(double)list [0];  	int id = (int)(double)list [1];  	if (type == TYPE_CALL || type == TYPE_ASYNC) {  		// call here  		var rpc = list [2] as string;  		var args = list [3] as ArrayList;  		var callback = (EB.Action<string' object>)delegate (string error' object result) {  			if (type == TYPE_CALL) {  				SendMsg (new object[] {  					TYPE_RESULT'  					id'  					error'  					result  				});  			}  		};  		if (OnRPC != null) {  			OnRPC (rpc' args' callback);  		}  		else {  			callback ("no handler for rpc"' null);  		}  	}  	else if (type == TYPE_RESULT) {  		// got back a result  		var error = list [2];  		var errStr = error != null ? error.ToString () : null;  		var result = list [3];  		object cbObj = null;  		lock (_callbacks) {  			cbObj = _callbacks [id];  			_callbacks.Remove (id);  		}  		if (cbObj != null) {  			// make the callback  			((EB.Action<string' object>)cbObj) (errStr' result);  		}  		else {  			EB.Debug.LogError ("Callback missing for id " + id);  		}  	}  	else {  		Debug.LogError ("Unknown message type " + type);  	}  }  
Magic Number,EB.Net,TalkWebSocket,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetTalkWebSocket.cs,MessageHandler,The following statement contains a magic number: if (data is ArrayList) {  	var list = data as ArrayList;  	if (list.Count != 4) {  		throw new System.IO.IOException ("Invalid message: " + message);  	}  	EB.Debug.Log ("<-N " + message);  	// stupid json casting...  	int type = (int)(double)list [0];  	int id = (int)(double)list [1];  	if (type == TYPE_CALL || type == TYPE_ASYNC) {  		// call here  		var rpc = list [2] as string;  		var args = list [3] as ArrayList;  		var callback = (EB.Action<string' object>)delegate (string error' object result) {  			if (type == TYPE_CALL) {  				SendMsg (new object[] {  					TYPE_RESULT'  					id'  					error'  					result  				});  			}  		};  		if (OnRPC != null) {  			OnRPC (rpc' args' callback);  		}  		else {  			callback ("no handler for rpc"' null);  		}  	}  	else if (type == TYPE_RESULT) {  		// got back a result  		var error = list [2];  		var errStr = error != null ? error.ToString () : null;  		var result = list [3];  		object cbObj = null;  		lock (_callbacks) {  			cbObj = _callbacks [id];  			_callbacks.Remove (id);  		}  		if (cbObj != null) {  			// make the callback  			((EB.Action<string' object>)cbObj) (errStr' result);  		}  		else {  			EB.Debug.LogError ("Callback missing for id " + id);  		}  	}  	else {  		Debug.LogError ("Unknown message type " + type);  	}  }  
Magic Number,EB.Net,TalkWebSocket,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetTalkWebSocket.cs,MessageHandler,The following statement contains a magic number: if (list.Count != 4) {  	throw new System.IO.IOException ("Invalid message: " + message);  }  
Magic Number,EB.Net,TalkWebSocket,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetTalkWebSocket.cs,MessageHandler,The following statement contains a magic number: if (type == TYPE_CALL || type == TYPE_ASYNC) {  	// call here  	var rpc = list [2] as string;  	var args = list [3] as ArrayList;  	var callback = (EB.Action<string' object>)delegate (string error' object result) {  		if (type == TYPE_CALL) {  			SendMsg (new object[] {  				TYPE_RESULT'  				id'  				error'  				result  			});  		}  	};  	if (OnRPC != null) {  		OnRPC (rpc' args' callback);  	}  	else {  		callback ("no handler for rpc"' null);  	}  }  else if (type == TYPE_RESULT) {  	// got back a result  	var error = list [2];  	var errStr = error != null ? error.ToString () : null;  	var result = list [3];  	object cbObj = null;  	lock (_callbacks) {  		cbObj = _callbacks [id];  		_callbacks.Remove (id);  	}  	if (cbObj != null) {  		// make the callback  		((EB.Action<string' object>)cbObj) (errStr' result);  	}  	else {  		EB.Debug.LogError ("Callback missing for id " + id);  	}  }  else {  	Debug.LogError ("Unknown message type " + type);  }  
Magic Number,EB.Net,TalkWebSocket,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetTalkWebSocket.cs,MessageHandler,The following statement contains a magic number: if (type == TYPE_CALL || type == TYPE_ASYNC) {  	// call here  	var rpc = list [2] as string;  	var args = list [3] as ArrayList;  	var callback = (EB.Action<string' object>)delegate (string error' object result) {  		if (type == TYPE_CALL) {  			SendMsg (new object[] {  				TYPE_RESULT'  				id'  				error'  				result  			});  		}  	};  	if (OnRPC != null) {  		OnRPC (rpc' args' callback);  	}  	else {  		callback ("no handler for rpc"' null);  	}  }  else if (type == TYPE_RESULT) {  	// got back a result  	var error = list [2];  	var errStr = error != null ? error.ToString () : null;  	var result = list [3];  	object cbObj = null;  	lock (_callbacks) {  		cbObj = _callbacks [id];  		_callbacks.Remove (id);  	}  	if (cbObj != null) {  		// make the callback  		((EB.Action<string' object>)cbObj) (errStr' result);  	}  	else {  		EB.Debug.LogError ("Callback missing for id " + id);  	}  }  else {  	Debug.LogError ("Unknown message type " + type);  }  
Magic Number,EB.Net,TalkWebSocket,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetTalkWebSocket.cs,MessageHandler,The following statement contains a magic number: if (type == TYPE_CALL || type == TYPE_ASYNC) {  	// call here  	var rpc = list [2] as string;  	var args = list [3] as ArrayList;  	var callback = (EB.Action<string' object>)delegate (string error' object result) {  		if (type == TYPE_CALL) {  			SendMsg (new object[] {  				TYPE_RESULT'  				id'  				error'  				result  			});  		}  	};  	if (OnRPC != null) {  		OnRPC (rpc' args' callback);  	}  	else {  		callback ("no handler for rpc"' null);  	}  }  else if (type == TYPE_RESULT) {  	// got back a result  	var error = list [2];  	var errStr = error != null ? error.ToString () : null;  	var result = list [3];  	object cbObj = null;  	lock (_callbacks) {  		cbObj = _callbacks [id];  		_callbacks.Remove (id);  	}  	if (cbObj != null) {  		// make the callback  		((EB.Action<string' object>)cbObj) (errStr' result);  	}  	else {  		EB.Debug.LogError ("Callback missing for id " + id);  	}  }  else {  	Debug.LogError ("Unknown message type " + type);  }  
Magic Number,EB.Net,TalkWebSocket,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetTalkWebSocket.cs,MessageHandler,The following statement contains a magic number: if (type == TYPE_CALL || type == TYPE_ASYNC) {  	// call here  	var rpc = list [2] as string;  	var args = list [3] as ArrayList;  	var callback = (EB.Action<string' object>)delegate (string error' object result) {  		if (type == TYPE_CALL) {  			SendMsg (new object[] {  				TYPE_RESULT'  				id'  				error'  				result  			});  		}  	};  	if (OnRPC != null) {  		OnRPC (rpc' args' callback);  	}  	else {  		callback ("no handler for rpc"' null);  	}  }  else if (type == TYPE_RESULT) {  	// got back a result  	var error = list [2];  	var errStr = error != null ? error.ToString () : null;  	var result = list [3];  	object cbObj = null;  	lock (_callbacks) {  		cbObj = _callbacks [id];  		_callbacks.Remove (id);  	}  	if (cbObj != null) {  		// make the callback  		((EB.Action<string' object>)cbObj) (errStr' result);  	}  	else {  		EB.Debug.LogError ("Callback missing for id " + id);  	}  }  else {  	Debug.LogError ("Unknown message type " + type);  }  
Magic Number,EB.Net,TalkWebSocket,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetTalkWebSocket.cs,MessageHandler,The following statement contains a magic number: if (type == TYPE_RESULT) {  	// got back a result  	var error = list [2];  	var errStr = error != null ? error.ToString () : null;  	var result = list [3];  	object cbObj = null;  	lock (_callbacks) {  		cbObj = _callbacks [id];  		_callbacks.Remove (id);  	}  	if (cbObj != null) {  		// make the callback  		((EB.Action<string' object>)cbObj) (errStr' result);  	}  	else {  		EB.Debug.LogError ("Callback missing for id " + id);  	}  }  else {  	Debug.LogError ("Unknown message type " + type);  }  
Magic Number,EB.Net,TalkWebSocket,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetTalkWebSocket.cs,MessageHandler,The following statement contains a magic number: if (type == TYPE_RESULT) {  	// got back a result  	var error = list [2];  	var errStr = error != null ? error.ToString () : null;  	var result = list [3];  	object cbObj = null;  	lock (_callbacks) {  		cbObj = _callbacks [id];  		_callbacks.Remove (id);  	}  	if (cbObj != null) {  		// make the callback  		((EB.Action<string' object>)cbObj) (errStr' result);  	}  	else {  		EB.Debug.LogError ("Callback missing for id " + id);  	}  }  else {  	Debug.LogError ("Unknown message type " + type);  }  
Magic Number,EB.Net,WebRequest,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetWebRequest.cs,ReturnClient,The following statement contains a magic number: try {  	if (statusCode == 200 && client.Connected && GetResponseHeader ("Connection") != "close" && string.IsNullOrEmpty (_error)) {  		lock (_connections) {  			List<ITcpClient> clients = null;  			if (!_connections.TryGetValue (connectionKey' out clients)) {  				clients = new List<ITcpClient> ();  				_connections [connectionKey] = clients;  			}  			clients.Add (client);  		}  	}  	else {  		// dispose   		client.Close ();  	}  }  catch {  }  
Magic Number,EB.Net,WebRequest,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetWebRequest.cs,ReturnClient,The following statement contains a magic number: if (statusCode == 200 && client.Connected && GetResponseHeader ("Connection") != "close" && string.IsNullOrEmpty (_error)) {  	lock (_connections) {  		List<ITcpClient> clients = null;  		if (!_connections.TryGetValue (connectionKey' out clients)) {  			clients = new List<ITcpClient> ();  			_connections [connectionKey] = clients;  		}  		clients.Add (client);  	}  }  else {  	// dispose   	client.Close ();  }  
Magic Number,EB.Net,WebRequest,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetWebRequest.cs,Connect,The following statement contains a magic number: if (!client.Connect (_uri.Host' _uri.Port' 5 * 1000)) {  	client.Close ();  	Error ("Connect failed"' client.Error);  	return false;  }  
Magic Number,EB.Net,WebRequest,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetWebRequest.cs,Connect,The following statement contains a magic number: if (!client.Connect (_uri.Host' _uri.Port' 5 * 1000)) {  	client.Close ();  	Error ("Connect failed"' client.Error);  	return false;  }  
Magic Number,EB.Net,WebRequest,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetWebRequest.cs,Connect,The following statement contains a magic number: client.ReadTimeout = kReadTimeout * 1000;  
Magic Number,EB.Net,WebRequest,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetWebRequest.cs,Connect,The following statement contains a magic number: client.WriteTimeout = 10 * 1000;  
Magic Number,EB.Net,WebRequest,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetWebRequest.cs,Connect,The following statement contains a magic number: client.WriteTimeout = 10 * 1000;  
Magic Number,EB.Net,WebRequest,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetWebRequest.cs,ReadResponse,The following statement contains a magic number: if (result && GetResponseHeader ("Content-Encoding") == "gzip") {  	var src = _data.ToArray ();  	_data = new List<byte> (src.Length * 5);  	foreach (var b in Decompress (src)) {  		_data.Add (b);  	}  }  
Magic Number,EB.Net,WebRequest,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetWebRequest.cs,ReadResponse,The following statement contains a magic number: _data = new List<byte> (src.Length * 5);  
Magic Number,EB.Net,WebRequest,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetWebRequest.cs,ReadBody,The following statement contains a magic number: if (string.IsNullOrEmpty (contentLength)) {  	// check for connect close' then read to end of the stream.  	if (GetResponseHeader ("Connection") == "close") {  		var data = new List<byte> ();  		var buffer = new byte[1024];  		while (true) {  			// read until its closed  			try {  				int read = stream.Read (buffer' 0' buffer.Length);  				if (read > 0) {  					for (int i = 0; i < read; ++i) {  						data.Add (buffer [i]);  					}  				}  			}  			catch {  				break;  			}  		}  	}  	else {  		Error ("Missing Content-Length header!"' Net.NetworkFailure.BadServerResponse);  		return false;  	}  }  
Magic Number,EB.Net,WebRequest,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetWebRequest.cs,ReadBody,The following statement contains a magic number: if (GetResponseHeader ("Connection") == "close") {  	var data = new List<byte> ();  	var buffer = new byte[1024];  	while (true) {  		// read until its closed  		try {  			int read = stream.Read (buffer' 0' buffer.Length);  			if (read > 0) {  				for (int i = 0; i < read; ++i) {  					data.Add (buffer [i]);  				}  			}  		}  		catch {  			break;  		}  	}  }  else {  	Error ("Missing Content-Length header!"' Net.NetworkFailure.BadServerResponse);  	return false;  }  
Magic Number,EB.Net,WebRequest,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetWebRequest.cs,ReadLine,The following statement contains a magic number: while (true) {  	var buffer = Read (s' 1);  	byte b = buffer [0];  	if (b == 10)// LF  	 {  		break;  	}  	else if (b != 13)// CR  	 {  		data.Add (b);  	}  }  
Magic Number,EB.Net,WebRequest,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetWebRequest.cs,ReadLine,The following statement contains a magic number: while (true) {  	var buffer = Read (s' 1);  	byte b = buffer [0];  	if (b == 10)// LF  	 {  		break;  	}  	else if (b != 13)// CR  	 {  		data.Add (b);  	}  }  
Magic Number,EB.Net,WebRequest,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetWebRequest.cs,ReadLine,The following statement contains a magic number: if (b == 10)// LF   {  	break;  }  else if (b != 13)// CR   {  	data.Add (b);  }  
Magic Number,EB.Net,WebRequest,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetWebRequest.cs,ReadLine,The following statement contains a magic number: if (b == 10)// LF   {  	break;  }  else if (b != 13)// CR   {  	data.Add (b);  }  
Magic Number,EB.Net,WebRequest,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetWebRequest.cs,ReadLine,The following statement contains a magic number: if (b != 13)// CR   {  	data.Add (b);  }  
Magic Number,EB.Net,WebRequest,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetWebRequest.cs,ParseStatus,The following statement contains a magic number: if (parts.Length < 3) {  	return false;  }  
Magic Number,EB.Net,WebRequest,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetWebRequest.cs,ParseStatus,The following statement contains a magic number: statusText = parts [2];  
Magic Number,EB.Net,WebRequest,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetWebRequest.cs,ParseStatus,The following statement contains a magic number: for (int i = 3; i < parts.Length; ++i) {  	statusText += " " + parts [3];  }  
Magic Number,EB.Net,WebRequest,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetWebRequest.cs,ParseStatus,The following statement contains a magic number: for (int i = 3; i < parts.Length; ++i) {  	statusText += " " + parts [3];  }  
Magic Number,EB.Net,WebRequest,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetWebRequest.cs,ParseStatus,The following statement contains a magic number: statusText += " " + parts [3];  
Magic Number,EB.Net,WebSocket,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetWebSocket.cs,WebSocket,The following statement contains a magic number: PingTimeout = 10 * 1000;  
Magic Number,EB.Net,WebSocket,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Net\NetWebSocket.cs,WebSocket,The following statement contains a magic number: PingTimeout = 10 * 1000;  
Magic Number,EB.Perforce,Perforce,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Perforce\Perforce.cs,P4GetDirectory,The following statement contains a magic number: if (result.resultCode == 0) {  	if (result.stderr == "") {  		StringReader strReader = new System.IO.StringReader (result.stdout);  		string pathString = strReader.ReadLine ();  		string[] splitPaths = pathString.Split (' ');  		if (splitPaths.Length == 3) {  			path = splitPaths [2];  			path = path.Trim (new char[] {  				' ''  				'.'  			});  		}  	}  	else {  		//TODO: add some error output here e.g. -- files not in client view  	}  }  
Magic Number,EB.Perforce,Perforce,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Perforce\Perforce.cs,P4GetDirectory,The following statement contains a magic number: if (result.resultCode == 0) {  	if (result.stderr == "") {  		StringReader strReader = new System.IO.StringReader (result.stdout);  		string pathString = strReader.ReadLine ();  		string[] splitPaths = pathString.Split (' ');  		if (splitPaths.Length == 3) {  			path = splitPaths [2];  			path = path.Trim (new char[] {  				' ''  				'.'  			});  		}  	}  	else {  		//TODO: add some error output here e.g. -- files not in client view  	}  }  
Magic Number,EB.Perforce,Perforce,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Perforce\Perforce.cs,P4GetDirectory,The following statement contains a magic number: if (result.stderr == "") {  	StringReader strReader = new System.IO.StringReader (result.stdout);  	string pathString = strReader.ReadLine ();  	string[] splitPaths = pathString.Split (' ');  	if (splitPaths.Length == 3) {  		path = splitPaths [2];  		path = path.Trim (new char[] {  			' ''  			'.'  		});  	}  }  else {  	//TODO: add some error output here e.g. -- files not in client view  }  
Magic Number,EB.Perforce,Perforce,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Perforce\Perforce.cs,P4GetDirectory,The following statement contains a magic number: if (result.stderr == "") {  	StringReader strReader = new System.IO.StringReader (result.stdout);  	string pathString = strReader.ReadLine ();  	string[] splitPaths = pathString.Split (' ');  	if (splitPaths.Length == 3) {  		path = splitPaths [2];  		path = path.Trim (new char[] {  			' ''  			'.'  		});  	}  }  else {  	//TODO: add some error output here e.g. -- files not in client view  }  
Magic Number,EB.Perforce,Perforce,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Perforce\Perforce.cs,P4GetDirectory,The following statement contains a magic number: if (splitPaths.Length == 3) {  	path = splitPaths [2];  	path = path.Trim (new char[] {  		' ''  		'.'  	});  }  
Magic Number,EB.Perforce,Perforce,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Perforce\Perforce.cs,P4GetDirectory,The following statement contains a magic number: if (splitPaths.Length == 3) {  	path = splitPaths [2];  	path = path.Trim (new char[] {  		' ''  		'.'  	});  }  
Magic Number,EB.Perforce,Perforce,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Perforce\Perforce.cs,P4GetDirectory,The following statement contains a magic number: path = splitPaths [2];  
Magic Number,EB.Replication,Manager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Replication\ReplicationManager.cs,Manager,The following statement contains a magic number: UpdateRate = 15;  
Magic Number,EB.Rendering,DynamicPointLightManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\DynamicLights\Scripts\DynamicPointLightManager.cs,Init,The following statement contains a magic number: lights = new List<DynamicPointLightInstance> (4);  
Magic Number,EB.Rendering,DynamicPointLightManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\DynamicLights\Scripts\DynamicPointLightManager.cs,Sim,The following statement contains a magic number: for (int i = lights.Count; i < 4; ++i) {  	position.SetRow (i' Vector4.zero);  	lighting.SetColumn (i' Vector4.zero);  	multiplier [i] = 0;  	intensity [i] = 1;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,Init,The following statement contains a magic number: _LensFlare.transform.localPosition = new Vector3 (0' 0' 10);  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,UVData,The following statement contains a magic number: if (index == 2 || index == 3 || index == 4 || index == 5) {  	offsetY = 0.25f;  }  else if (index == 6 || index == 7 || index == 8 || index == 9) {  	offsetY = 0f;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,UVData,The following statement contains a magic number: if (index == 2 || index == 3 || index == 4 || index == 5) {  	offsetY = 0.25f;  }  else if (index == 6 || index == 7 || index == 8 || index == 9) {  	offsetY = 0f;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,UVData,The following statement contains a magic number: if (index == 2 || index == 3 || index == 4 || index == 5) {  	offsetY = 0.25f;  }  else if (index == 6 || index == 7 || index == 8 || index == 9) {  	offsetY = 0f;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,UVData,The following statement contains a magic number: if (index == 2 || index == 3 || index == 4 || index == 5) {  	offsetY = 0.25f;  }  else if (index == 6 || index == 7 || index == 8 || index == 9) {  	offsetY = 0f;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,UVData,The following statement contains a magic number: if (index == 2 || index == 3 || index == 4 || index == 5) {  	offsetY = 0.25f;  }  else if (index == 6 || index == 7 || index == 8 || index == 9) {  	offsetY = 0f;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,UVData,The following statement contains a magic number: if (index == 2 || index == 3 || index == 4 || index == 5) {  	offsetY = 0.25f;  }  else if (index == 6 || index == 7 || index == 8 || index == 9) {  	offsetY = 0f;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,UVData,The following statement contains a magic number: if (index == 2 || index == 3 || index == 4 || index == 5) {  	offsetY = 0.25f;  }  else if (index == 6 || index == 7 || index == 8 || index == 9) {  	offsetY = 0f;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,UVData,The following statement contains a magic number: if (index == 2 || index == 3 || index == 4 || index == 5) {  	offsetY = 0.25f;  }  else if (index == 6 || index == 7 || index == 8 || index == 9) {  	offsetY = 0f;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,UVData,The following statement contains a magic number: if (index == 6 || index == 7 || index == 8 || index == 9) {  	offsetY = 0f;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,UVData,The following statement contains a magic number: if (index == 6 || index == 7 || index == 8 || index == 9) {  	offsetY = 0f;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,UVData,The following statement contains a magic number: if (index == 6 || index == 7 || index == 8 || index == 9) {  	offsetY = 0f;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,UVData,The following statement contains a magic number: if (index == 6 || index == 7 || index == 8 || index == 9) {  	offsetY = 0f;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,UVData,The following statement contains a magic number: switch (index) {  case 0:  	{  		offsetX = 0f;  		offsetY = 0.5f;  	}  	break;  case 1:  	{  		offsetX = 0.5f;  		offsetY = 0.5f;  	}  	break;  case 2:  case 6:  	{  		offsetX = 0f;  	}  	break;  case 3:  case 7:  	{  		offsetX = 0.25f;  	}  	break;  case 4:  case 8:  	{  		offsetX = 0.5f;  	}  	break;  case 5:  case 9:  	{  		offsetX = 0.75f;  	}  	break;  default:  	break;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,UVData,The following statement contains a magic number: switch (index) {  case 0:  	{  		offsetX = 0f;  		offsetY = 0.5f;  	}  	break;  case 1:  	{  		offsetX = 0.5f;  		offsetY = 0.5f;  	}  	break;  case 2:  case 6:  	{  		offsetX = 0f;  	}  	break;  case 3:  case 7:  	{  		offsetX = 0.25f;  	}  	break;  case 4:  case 8:  	{  		offsetX = 0.5f;  	}  	break;  case 5:  case 9:  	{  		offsetX = 0.75f;  	}  	break;  default:  	break;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,UVData,The following statement contains a magic number: switch (index) {  case 0:  	{  		offsetX = 0f;  		offsetY = 0.5f;  	}  	break;  case 1:  	{  		offsetX = 0.5f;  		offsetY = 0.5f;  	}  	break;  case 2:  case 6:  	{  		offsetX = 0f;  	}  	break;  case 3:  case 7:  	{  		offsetX = 0.25f;  	}  	break;  case 4:  case 8:  	{  		offsetX = 0.5f;  	}  	break;  case 5:  case 9:  	{  		offsetX = 0.75f;  	}  	break;  default:  	break;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,UVData,The following statement contains a magic number: switch (index) {  case 0:  	{  		offsetX = 0f;  		offsetY = 0.5f;  	}  	break;  case 1:  	{  		offsetX = 0.5f;  		offsetY = 0.5f;  	}  	break;  case 2:  case 6:  	{  		offsetX = 0f;  	}  	break;  case 3:  case 7:  	{  		offsetX = 0.25f;  	}  	break;  case 4:  case 8:  	{  		offsetX = 0.5f;  	}  	break;  case 5:  case 9:  	{  		offsetX = 0.75f;  	}  	break;  default:  	break;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,UVData,The following statement contains a magic number: switch (index) {  case 0:  	{  		offsetX = 0f;  		offsetY = 0.5f;  	}  	break;  case 1:  	{  		offsetX = 0.5f;  		offsetY = 0.5f;  	}  	break;  case 2:  case 6:  	{  		offsetX = 0f;  	}  	break;  case 3:  case 7:  	{  		offsetX = 0.25f;  	}  	break;  case 4:  case 8:  	{  		offsetX = 0.5f;  	}  	break;  case 5:  case 9:  	{  		offsetX = 0.75f;  	}  	break;  default:  	break;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,UVData,The following statement contains a magic number: switch (index) {  case 0:  	{  		offsetX = 0f;  		offsetY = 0.5f;  	}  	break;  case 1:  	{  		offsetX = 0.5f;  		offsetY = 0.5f;  	}  	break;  case 2:  case 6:  	{  		offsetX = 0f;  	}  	break;  case 3:  case 7:  	{  		offsetX = 0.25f;  	}  	break;  case 4:  case 8:  	{  		offsetX = 0.5f;  	}  	break;  case 5:  case 9:  	{  		offsetX = 0.75f;  	}  	break;  default:  	break;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,UVData,The following statement contains a magic number: switch (index) {  case 0:  	{  		offsetX = 0f;  		offsetY = 0.5f;  	}  	break;  case 1:  	{  		offsetX = 0.5f;  		offsetY = 0.5f;  	}  	break;  case 2:  case 6:  	{  		offsetX = 0f;  	}  	break;  case 3:  case 7:  	{  		offsetX = 0.25f;  	}  	break;  case 4:  case 8:  	{  		offsetX = 0.5f;  	}  	break;  case 5:  case 9:  	{  		offsetX = 0.75f;  	}  	break;  default:  	break;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,UVData,The following statement contains a magic number: switch (index) {  case 0:  	{  		offsetX = 0f;  		offsetY = 0.5f;  	}  	break;  case 1:  	{  		offsetX = 0.5f;  		offsetY = 0.5f;  	}  	break;  case 2:  case 6:  	{  		offsetX = 0f;  	}  	break;  case 3:  case 7:  	{  		offsetX = 0.25f;  	}  	break;  case 4:  case 8:  	{  		offsetX = 0.5f;  	}  	break;  case 5:  case 9:  	{  		offsetX = 0.75f;  	}  	break;  default:  	break;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: for (int i = 0; i < flares.Count; i++)// gets the counts of all verts and indicies   {  	EB_Flare flare = flares [i];  	if (flare.mesh) {  		vertCount += flare.mesh.vertexCount;  		for (int j = 0; j < flare.mesh.subMeshCount; j++) {  			indCount += flare.mesh.GetIndices (j).Length;  		}  	}  	else {  		vertCount += 4;  		indCount += 6;  	}  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: for (int i = 0; i < flares.Count; i++)// gets the counts of all verts and indicies   {  	EB_Flare flare = flares [i];  	if (flare.mesh) {  		vertCount += flare.mesh.vertexCount;  		for (int j = 0; j < flare.mesh.subMeshCount; j++) {  			indCount += flare.mesh.GetIndices (j).Length;  		}  	}  	else {  		vertCount += 4;  		indCount += 6;  	}  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: if (flare.mesh) {  	vertCount += flare.mesh.vertexCount;  	for (int j = 0; j < flare.mesh.subMeshCount; j++) {  		indCount += flare.mesh.GetIndices (j).Length;  	}  }  else {  	vertCount += 4;  	indCount += 6;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: if (flare.mesh) {  	vertCount += flare.mesh.vertexCount;  	for (int j = 0; j < flare.mesh.subMeshCount; j++) {  		indCount += flare.mesh.GetIndices (j).Length;  	}  }  else {  	vertCount += 4;  	indCount += 6;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: vertCount += 4;  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: indCount += 6;  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: for (int i = 0; i < flareCount; i++) {  	EB_Flare flare = flares [i];  	float scale = flares [i].scale;  	Vector4 uvData = UVData (flare.imageIndex);  	if (flare.mesh != null)// HAS A MESH  	 {  		int vertexCount = flare.mesh.vertexCount;  		float centerX = 0;  		float centerY = 0;  		for (int j = 0; j < vertexCount; j++) {  			Vector3 v = flare.mesh.vertices [j];  			centerX += v.x;  			centerY += v.y;  			Vector2 uv = flare.mesh.uv [j];  			Vector2 s = new Vector2 (uvData.x' uvData.y);  			Vector2 o = new Vector2 (uvData.z' uvData.w);  			uvs [vertOffset + j] = Vector2.Scale (uv' s) + o;  			colors [vertOffset + j] = flare.color;  		}  		centerX = centerX / vertexCount;  		centerY = centerY / vertexCount;  		for (int j = 0; j < vertexCount; j++) {  			Vector3 v = flare.mesh.vertices [j];  			float x = v.x - centerX;  			float y = v.y - centerY;  			verticies [vertOffset + j] = new Vector3 (x * scale' y * scale' i);  		}  		for (int j = 0; j < flare.mesh.subMeshCount; j++) {  			int[] flareIndicies = flare.mesh.GetIndices (j);  			for (int k = 0; k < flareIndicies.Length; k++) {  				indicies [indOffset + k] = vertOffset + flareIndicies [k];  			}  			indOffset += flareIndicies.Length;  		}  		vertOffset += vertexCount;  	}  	else// NO MESH MAKE A QUAD  	 {  		colors [vertOffset + 0] = flare.color;  		colors [vertOffset + 1] = flare.color;  		colors [vertOffset + 2] = flare.color;  		colors [vertOffset + 3] = flare.color;  		verticies [vertOffset + 0] = new Vector3 (-scale' -scale' i);  		verticies [vertOffset + 1] = new Vector3 (-scale' scale' i);  		verticies [vertOffset + 2] = new Vector3 (scale' -scale' i);  		verticies [vertOffset + 3] = new Vector3 (scale' scale' i);  		uvs [vertOffset + 0] = new Vector2 (0 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  		uvs [vertOffset + 1] = new Vector2 (0 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  		uvs [vertOffset + 2] = new Vector2 (1 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  		uvs [vertOffset + 3] = new Vector2 (1 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  		indicies [indOffset + 0] = vertOffset + 0;  		indicies [indOffset + 1] = vertOffset + 1;  		indicies [indOffset + 2] = vertOffset + 2;  		indicies [indOffset + 3] = vertOffset + 2;  		indicies [indOffset + 4] = vertOffset + 1;  		indicies [indOffset + 5] = vertOffset + 3;  		vertOffset += 4;  		indOffset += 6;  	}  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: for (int i = 0; i < flareCount; i++) {  	EB_Flare flare = flares [i];  	float scale = flares [i].scale;  	Vector4 uvData = UVData (flare.imageIndex);  	if (flare.mesh != null)// HAS A MESH  	 {  		int vertexCount = flare.mesh.vertexCount;  		float centerX = 0;  		float centerY = 0;  		for (int j = 0; j < vertexCount; j++) {  			Vector3 v = flare.mesh.vertices [j];  			centerX += v.x;  			centerY += v.y;  			Vector2 uv = flare.mesh.uv [j];  			Vector2 s = new Vector2 (uvData.x' uvData.y);  			Vector2 o = new Vector2 (uvData.z' uvData.w);  			uvs [vertOffset + j] = Vector2.Scale (uv' s) + o;  			colors [vertOffset + j] = flare.color;  		}  		centerX = centerX / vertexCount;  		centerY = centerY / vertexCount;  		for (int j = 0; j < vertexCount; j++) {  			Vector3 v = flare.mesh.vertices [j];  			float x = v.x - centerX;  			float y = v.y - centerY;  			verticies [vertOffset + j] = new Vector3 (x * scale' y * scale' i);  		}  		for (int j = 0; j < flare.mesh.subMeshCount; j++) {  			int[] flareIndicies = flare.mesh.GetIndices (j);  			for (int k = 0; k < flareIndicies.Length; k++) {  				indicies [indOffset + k] = vertOffset + flareIndicies [k];  			}  			indOffset += flareIndicies.Length;  		}  		vertOffset += vertexCount;  	}  	else// NO MESH MAKE A QUAD  	 {  		colors [vertOffset + 0] = flare.color;  		colors [vertOffset + 1] = flare.color;  		colors [vertOffset + 2] = flare.color;  		colors [vertOffset + 3] = flare.color;  		verticies [vertOffset + 0] = new Vector3 (-scale' -scale' i);  		verticies [vertOffset + 1] = new Vector3 (-scale' scale' i);  		verticies [vertOffset + 2] = new Vector3 (scale' -scale' i);  		verticies [vertOffset + 3] = new Vector3 (scale' scale' i);  		uvs [vertOffset + 0] = new Vector2 (0 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  		uvs [vertOffset + 1] = new Vector2 (0 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  		uvs [vertOffset + 2] = new Vector2 (1 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  		uvs [vertOffset + 3] = new Vector2 (1 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  		indicies [indOffset + 0] = vertOffset + 0;  		indicies [indOffset + 1] = vertOffset + 1;  		indicies [indOffset + 2] = vertOffset + 2;  		indicies [indOffset + 3] = vertOffset + 2;  		indicies [indOffset + 4] = vertOffset + 1;  		indicies [indOffset + 5] = vertOffset + 3;  		vertOffset += 4;  		indOffset += 6;  	}  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: for (int i = 0; i < flareCount; i++) {  	EB_Flare flare = flares [i];  	float scale = flares [i].scale;  	Vector4 uvData = UVData (flare.imageIndex);  	if (flare.mesh != null)// HAS A MESH  	 {  		int vertexCount = flare.mesh.vertexCount;  		float centerX = 0;  		float centerY = 0;  		for (int j = 0; j < vertexCount; j++) {  			Vector3 v = flare.mesh.vertices [j];  			centerX += v.x;  			centerY += v.y;  			Vector2 uv = flare.mesh.uv [j];  			Vector2 s = new Vector2 (uvData.x' uvData.y);  			Vector2 o = new Vector2 (uvData.z' uvData.w);  			uvs [vertOffset + j] = Vector2.Scale (uv' s) + o;  			colors [vertOffset + j] = flare.color;  		}  		centerX = centerX / vertexCount;  		centerY = centerY / vertexCount;  		for (int j = 0; j < vertexCount; j++) {  			Vector3 v = flare.mesh.vertices [j];  			float x = v.x - centerX;  			float y = v.y - centerY;  			verticies [vertOffset + j] = new Vector3 (x * scale' y * scale' i);  		}  		for (int j = 0; j < flare.mesh.subMeshCount; j++) {  			int[] flareIndicies = flare.mesh.GetIndices (j);  			for (int k = 0; k < flareIndicies.Length; k++) {  				indicies [indOffset + k] = vertOffset + flareIndicies [k];  			}  			indOffset += flareIndicies.Length;  		}  		vertOffset += vertexCount;  	}  	else// NO MESH MAKE A QUAD  	 {  		colors [vertOffset + 0] = flare.color;  		colors [vertOffset + 1] = flare.color;  		colors [vertOffset + 2] = flare.color;  		colors [vertOffset + 3] = flare.color;  		verticies [vertOffset + 0] = new Vector3 (-scale' -scale' i);  		verticies [vertOffset + 1] = new Vector3 (-scale' scale' i);  		verticies [vertOffset + 2] = new Vector3 (scale' -scale' i);  		verticies [vertOffset + 3] = new Vector3 (scale' scale' i);  		uvs [vertOffset + 0] = new Vector2 (0 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  		uvs [vertOffset + 1] = new Vector2 (0 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  		uvs [vertOffset + 2] = new Vector2 (1 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  		uvs [vertOffset + 3] = new Vector2 (1 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  		indicies [indOffset + 0] = vertOffset + 0;  		indicies [indOffset + 1] = vertOffset + 1;  		indicies [indOffset + 2] = vertOffset + 2;  		indicies [indOffset + 3] = vertOffset + 2;  		indicies [indOffset + 4] = vertOffset + 1;  		indicies [indOffset + 5] = vertOffset + 3;  		vertOffset += 4;  		indOffset += 6;  	}  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: for (int i = 0; i < flareCount; i++) {  	EB_Flare flare = flares [i];  	float scale = flares [i].scale;  	Vector4 uvData = UVData (flare.imageIndex);  	if (flare.mesh != null)// HAS A MESH  	 {  		int vertexCount = flare.mesh.vertexCount;  		float centerX = 0;  		float centerY = 0;  		for (int j = 0; j < vertexCount; j++) {  			Vector3 v = flare.mesh.vertices [j];  			centerX += v.x;  			centerY += v.y;  			Vector2 uv = flare.mesh.uv [j];  			Vector2 s = new Vector2 (uvData.x' uvData.y);  			Vector2 o = new Vector2 (uvData.z' uvData.w);  			uvs [vertOffset + j] = Vector2.Scale (uv' s) + o;  			colors [vertOffset + j] = flare.color;  		}  		centerX = centerX / vertexCount;  		centerY = centerY / vertexCount;  		for (int j = 0; j < vertexCount; j++) {  			Vector3 v = flare.mesh.vertices [j];  			float x = v.x - centerX;  			float y = v.y - centerY;  			verticies [vertOffset + j] = new Vector3 (x * scale' y * scale' i);  		}  		for (int j = 0; j < flare.mesh.subMeshCount; j++) {  			int[] flareIndicies = flare.mesh.GetIndices (j);  			for (int k = 0; k < flareIndicies.Length; k++) {  				indicies [indOffset + k] = vertOffset + flareIndicies [k];  			}  			indOffset += flareIndicies.Length;  		}  		vertOffset += vertexCount;  	}  	else// NO MESH MAKE A QUAD  	 {  		colors [vertOffset + 0] = flare.color;  		colors [vertOffset + 1] = flare.color;  		colors [vertOffset + 2] = flare.color;  		colors [vertOffset + 3] = flare.color;  		verticies [vertOffset + 0] = new Vector3 (-scale' -scale' i);  		verticies [vertOffset + 1] = new Vector3 (-scale' scale' i);  		verticies [vertOffset + 2] = new Vector3 (scale' -scale' i);  		verticies [vertOffset + 3] = new Vector3 (scale' scale' i);  		uvs [vertOffset + 0] = new Vector2 (0 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  		uvs [vertOffset + 1] = new Vector2 (0 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  		uvs [vertOffset + 2] = new Vector2 (1 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  		uvs [vertOffset + 3] = new Vector2 (1 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  		indicies [indOffset + 0] = vertOffset + 0;  		indicies [indOffset + 1] = vertOffset + 1;  		indicies [indOffset + 2] = vertOffset + 2;  		indicies [indOffset + 3] = vertOffset + 2;  		indicies [indOffset + 4] = vertOffset + 1;  		indicies [indOffset + 5] = vertOffset + 3;  		vertOffset += 4;  		indOffset += 6;  	}  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: for (int i = 0; i < flareCount; i++) {  	EB_Flare flare = flares [i];  	float scale = flares [i].scale;  	Vector4 uvData = UVData (flare.imageIndex);  	if (flare.mesh != null)// HAS A MESH  	 {  		int vertexCount = flare.mesh.vertexCount;  		float centerX = 0;  		float centerY = 0;  		for (int j = 0; j < vertexCount; j++) {  			Vector3 v = flare.mesh.vertices [j];  			centerX += v.x;  			centerY += v.y;  			Vector2 uv = flare.mesh.uv [j];  			Vector2 s = new Vector2 (uvData.x' uvData.y);  			Vector2 o = new Vector2 (uvData.z' uvData.w);  			uvs [vertOffset + j] = Vector2.Scale (uv' s) + o;  			colors [vertOffset + j] = flare.color;  		}  		centerX = centerX / vertexCount;  		centerY = centerY / vertexCount;  		for (int j = 0; j < vertexCount; j++) {  			Vector3 v = flare.mesh.vertices [j];  			float x = v.x - centerX;  			float y = v.y - centerY;  			verticies [vertOffset + j] = new Vector3 (x * scale' y * scale' i);  		}  		for (int j = 0; j < flare.mesh.subMeshCount; j++) {  			int[] flareIndicies = flare.mesh.GetIndices (j);  			for (int k = 0; k < flareIndicies.Length; k++) {  				indicies [indOffset + k] = vertOffset + flareIndicies [k];  			}  			indOffset += flareIndicies.Length;  		}  		vertOffset += vertexCount;  	}  	else// NO MESH MAKE A QUAD  	 {  		colors [vertOffset + 0] = flare.color;  		colors [vertOffset + 1] = flare.color;  		colors [vertOffset + 2] = flare.color;  		colors [vertOffset + 3] = flare.color;  		verticies [vertOffset + 0] = new Vector3 (-scale' -scale' i);  		verticies [vertOffset + 1] = new Vector3 (-scale' scale' i);  		verticies [vertOffset + 2] = new Vector3 (scale' -scale' i);  		verticies [vertOffset + 3] = new Vector3 (scale' scale' i);  		uvs [vertOffset + 0] = new Vector2 (0 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  		uvs [vertOffset + 1] = new Vector2 (0 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  		uvs [vertOffset + 2] = new Vector2 (1 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  		uvs [vertOffset + 3] = new Vector2 (1 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  		indicies [indOffset + 0] = vertOffset + 0;  		indicies [indOffset + 1] = vertOffset + 1;  		indicies [indOffset + 2] = vertOffset + 2;  		indicies [indOffset + 3] = vertOffset + 2;  		indicies [indOffset + 4] = vertOffset + 1;  		indicies [indOffset + 5] = vertOffset + 3;  		vertOffset += 4;  		indOffset += 6;  	}  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: for (int i = 0; i < flareCount; i++) {  	EB_Flare flare = flares [i];  	float scale = flares [i].scale;  	Vector4 uvData = UVData (flare.imageIndex);  	if (flare.mesh != null)// HAS A MESH  	 {  		int vertexCount = flare.mesh.vertexCount;  		float centerX = 0;  		float centerY = 0;  		for (int j = 0; j < vertexCount; j++) {  			Vector3 v = flare.mesh.vertices [j];  			centerX += v.x;  			centerY += v.y;  			Vector2 uv = flare.mesh.uv [j];  			Vector2 s = new Vector2 (uvData.x' uvData.y);  			Vector2 o = new Vector2 (uvData.z' uvData.w);  			uvs [vertOffset + j] = Vector2.Scale (uv' s) + o;  			colors [vertOffset + j] = flare.color;  		}  		centerX = centerX / vertexCount;  		centerY = centerY / vertexCount;  		for (int j = 0; j < vertexCount; j++) {  			Vector3 v = flare.mesh.vertices [j];  			float x = v.x - centerX;  			float y = v.y - centerY;  			verticies [vertOffset + j] = new Vector3 (x * scale' y * scale' i);  		}  		for (int j = 0; j < flare.mesh.subMeshCount; j++) {  			int[] flareIndicies = flare.mesh.GetIndices (j);  			for (int k = 0; k < flareIndicies.Length; k++) {  				indicies [indOffset + k] = vertOffset + flareIndicies [k];  			}  			indOffset += flareIndicies.Length;  		}  		vertOffset += vertexCount;  	}  	else// NO MESH MAKE A QUAD  	 {  		colors [vertOffset + 0] = flare.color;  		colors [vertOffset + 1] = flare.color;  		colors [vertOffset + 2] = flare.color;  		colors [vertOffset + 3] = flare.color;  		verticies [vertOffset + 0] = new Vector3 (-scale' -scale' i);  		verticies [vertOffset + 1] = new Vector3 (-scale' scale' i);  		verticies [vertOffset + 2] = new Vector3 (scale' -scale' i);  		verticies [vertOffset + 3] = new Vector3 (scale' scale' i);  		uvs [vertOffset + 0] = new Vector2 (0 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  		uvs [vertOffset + 1] = new Vector2 (0 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  		uvs [vertOffset + 2] = new Vector2 (1 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  		uvs [vertOffset + 3] = new Vector2 (1 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  		indicies [indOffset + 0] = vertOffset + 0;  		indicies [indOffset + 1] = vertOffset + 1;  		indicies [indOffset + 2] = vertOffset + 2;  		indicies [indOffset + 3] = vertOffset + 2;  		indicies [indOffset + 4] = vertOffset + 1;  		indicies [indOffset + 5] = vertOffset + 3;  		vertOffset += 4;  		indOffset += 6;  	}  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: for (int i = 0; i < flareCount; i++) {  	EB_Flare flare = flares [i];  	float scale = flares [i].scale;  	Vector4 uvData = UVData (flare.imageIndex);  	if (flare.mesh != null)// HAS A MESH  	 {  		int vertexCount = flare.mesh.vertexCount;  		float centerX = 0;  		float centerY = 0;  		for (int j = 0; j < vertexCount; j++) {  			Vector3 v = flare.mesh.vertices [j];  			centerX += v.x;  			centerY += v.y;  			Vector2 uv = flare.mesh.uv [j];  			Vector2 s = new Vector2 (uvData.x' uvData.y);  			Vector2 o = new Vector2 (uvData.z' uvData.w);  			uvs [vertOffset + j] = Vector2.Scale (uv' s) + o;  			colors [vertOffset + j] = flare.color;  		}  		centerX = centerX / vertexCount;  		centerY = centerY / vertexCount;  		for (int j = 0; j < vertexCount; j++) {  			Vector3 v = flare.mesh.vertices [j];  			float x = v.x - centerX;  			float y = v.y - centerY;  			verticies [vertOffset + j] = new Vector3 (x * scale' y * scale' i);  		}  		for (int j = 0; j < flare.mesh.subMeshCount; j++) {  			int[] flareIndicies = flare.mesh.GetIndices (j);  			for (int k = 0; k < flareIndicies.Length; k++) {  				indicies [indOffset + k] = vertOffset + flareIndicies [k];  			}  			indOffset += flareIndicies.Length;  		}  		vertOffset += vertexCount;  	}  	else// NO MESH MAKE A QUAD  	 {  		colors [vertOffset + 0] = flare.color;  		colors [vertOffset + 1] = flare.color;  		colors [vertOffset + 2] = flare.color;  		colors [vertOffset + 3] = flare.color;  		verticies [vertOffset + 0] = new Vector3 (-scale' -scale' i);  		verticies [vertOffset + 1] = new Vector3 (-scale' scale' i);  		verticies [vertOffset + 2] = new Vector3 (scale' -scale' i);  		verticies [vertOffset + 3] = new Vector3 (scale' scale' i);  		uvs [vertOffset + 0] = new Vector2 (0 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  		uvs [vertOffset + 1] = new Vector2 (0 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  		uvs [vertOffset + 2] = new Vector2 (1 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  		uvs [vertOffset + 3] = new Vector2 (1 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  		indicies [indOffset + 0] = vertOffset + 0;  		indicies [indOffset + 1] = vertOffset + 1;  		indicies [indOffset + 2] = vertOffset + 2;  		indicies [indOffset + 3] = vertOffset + 2;  		indicies [indOffset + 4] = vertOffset + 1;  		indicies [indOffset + 5] = vertOffset + 3;  		vertOffset += 4;  		indOffset += 6;  	}  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: for (int i = 0; i < flareCount; i++) {  	EB_Flare flare = flares [i];  	float scale = flares [i].scale;  	Vector4 uvData = UVData (flare.imageIndex);  	if (flare.mesh != null)// HAS A MESH  	 {  		int vertexCount = flare.mesh.vertexCount;  		float centerX = 0;  		float centerY = 0;  		for (int j = 0; j < vertexCount; j++) {  			Vector3 v = flare.mesh.vertices [j];  			centerX += v.x;  			centerY += v.y;  			Vector2 uv = flare.mesh.uv [j];  			Vector2 s = new Vector2 (uvData.x' uvData.y);  			Vector2 o = new Vector2 (uvData.z' uvData.w);  			uvs [vertOffset + j] = Vector2.Scale (uv' s) + o;  			colors [vertOffset + j] = flare.color;  		}  		centerX = centerX / vertexCount;  		centerY = centerY / vertexCount;  		for (int j = 0; j < vertexCount; j++) {  			Vector3 v = flare.mesh.vertices [j];  			float x = v.x - centerX;  			float y = v.y - centerY;  			verticies [vertOffset + j] = new Vector3 (x * scale' y * scale' i);  		}  		for (int j = 0; j < flare.mesh.subMeshCount; j++) {  			int[] flareIndicies = flare.mesh.GetIndices (j);  			for (int k = 0; k < flareIndicies.Length; k++) {  				indicies [indOffset + k] = vertOffset + flareIndicies [k];  			}  			indOffset += flareIndicies.Length;  		}  		vertOffset += vertexCount;  	}  	else// NO MESH MAKE A QUAD  	 {  		colors [vertOffset + 0] = flare.color;  		colors [vertOffset + 1] = flare.color;  		colors [vertOffset + 2] = flare.color;  		colors [vertOffset + 3] = flare.color;  		verticies [vertOffset + 0] = new Vector3 (-scale' -scale' i);  		verticies [vertOffset + 1] = new Vector3 (-scale' scale' i);  		verticies [vertOffset + 2] = new Vector3 (scale' -scale' i);  		verticies [vertOffset + 3] = new Vector3 (scale' scale' i);  		uvs [vertOffset + 0] = new Vector2 (0 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  		uvs [vertOffset + 1] = new Vector2 (0 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  		uvs [vertOffset + 2] = new Vector2 (1 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  		uvs [vertOffset + 3] = new Vector2 (1 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  		indicies [indOffset + 0] = vertOffset + 0;  		indicies [indOffset + 1] = vertOffset + 1;  		indicies [indOffset + 2] = vertOffset + 2;  		indicies [indOffset + 3] = vertOffset + 2;  		indicies [indOffset + 4] = vertOffset + 1;  		indicies [indOffset + 5] = vertOffset + 3;  		vertOffset += 4;  		indOffset += 6;  	}  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: for (int i = 0; i < flareCount; i++) {  	EB_Flare flare = flares [i];  	float scale = flares [i].scale;  	Vector4 uvData = UVData (flare.imageIndex);  	if (flare.mesh != null)// HAS A MESH  	 {  		int vertexCount = flare.mesh.vertexCount;  		float centerX = 0;  		float centerY = 0;  		for (int j = 0; j < vertexCount; j++) {  			Vector3 v = flare.mesh.vertices [j];  			centerX += v.x;  			centerY += v.y;  			Vector2 uv = flare.mesh.uv [j];  			Vector2 s = new Vector2 (uvData.x' uvData.y);  			Vector2 o = new Vector2 (uvData.z' uvData.w);  			uvs [vertOffset + j] = Vector2.Scale (uv' s) + o;  			colors [vertOffset + j] = flare.color;  		}  		centerX = centerX / vertexCount;  		centerY = centerY / vertexCount;  		for (int j = 0; j < vertexCount; j++) {  			Vector3 v = flare.mesh.vertices [j];  			float x = v.x - centerX;  			float y = v.y - centerY;  			verticies [vertOffset + j] = new Vector3 (x * scale' y * scale' i);  		}  		for (int j = 0; j < flare.mesh.subMeshCount; j++) {  			int[] flareIndicies = flare.mesh.GetIndices (j);  			for (int k = 0; k < flareIndicies.Length; k++) {  				indicies [indOffset + k] = vertOffset + flareIndicies [k];  			}  			indOffset += flareIndicies.Length;  		}  		vertOffset += vertexCount;  	}  	else// NO MESH MAKE A QUAD  	 {  		colors [vertOffset + 0] = flare.color;  		colors [vertOffset + 1] = flare.color;  		colors [vertOffset + 2] = flare.color;  		colors [vertOffset + 3] = flare.color;  		verticies [vertOffset + 0] = new Vector3 (-scale' -scale' i);  		verticies [vertOffset + 1] = new Vector3 (-scale' scale' i);  		verticies [vertOffset + 2] = new Vector3 (scale' -scale' i);  		verticies [vertOffset + 3] = new Vector3 (scale' scale' i);  		uvs [vertOffset + 0] = new Vector2 (0 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  		uvs [vertOffset + 1] = new Vector2 (0 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  		uvs [vertOffset + 2] = new Vector2 (1 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  		uvs [vertOffset + 3] = new Vector2 (1 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  		indicies [indOffset + 0] = vertOffset + 0;  		indicies [indOffset + 1] = vertOffset + 1;  		indicies [indOffset + 2] = vertOffset + 2;  		indicies [indOffset + 3] = vertOffset + 2;  		indicies [indOffset + 4] = vertOffset + 1;  		indicies [indOffset + 5] = vertOffset + 3;  		vertOffset += 4;  		indOffset += 6;  	}  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: for (int i = 0; i < flareCount; i++) {  	EB_Flare flare = flares [i];  	float scale = flares [i].scale;  	Vector4 uvData = UVData (flare.imageIndex);  	if (flare.mesh != null)// HAS A MESH  	 {  		int vertexCount = flare.mesh.vertexCount;  		float centerX = 0;  		float centerY = 0;  		for (int j = 0; j < vertexCount; j++) {  			Vector3 v = flare.mesh.vertices [j];  			centerX += v.x;  			centerY += v.y;  			Vector2 uv = flare.mesh.uv [j];  			Vector2 s = new Vector2 (uvData.x' uvData.y);  			Vector2 o = new Vector2 (uvData.z' uvData.w);  			uvs [vertOffset + j] = Vector2.Scale (uv' s) + o;  			colors [vertOffset + j] = flare.color;  		}  		centerX = centerX / vertexCount;  		centerY = centerY / vertexCount;  		for (int j = 0; j < vertexCount; j++) {  			Vector3 v = flare.mesh.vertices [j];  			float x = v.x - centerX;  			float y = v.y - centerY;  			verticies [vertOffset + j] = new Vector3 (x * scale' y * scale' i);  		}  		for (int j = 0; j < flare.mesh.subMeshCount; j++) {  			int[] flareIndicies = flare.mesh.GetIndices (j);  			for (int k = 0; k < flareIndicies.Length; k++) {  				indicies [indOffset + k] = vertOffset + flareIndicies [k];  			}  			indOffset += flareIndicies.Length;  		}  		vertOffset += vertexCount;  	}  	else// NO MESH MAKE A QUAD  	 {  		colors [vertOffset + 0] = flare.color;  		colors [vertOffset + 1] = flare.color;  		colors [vertOffset + 2] = flare.color;  		colors [vertOffset + 3] = flare.color;  		verticies [vertOffset + 0] = new Vector3 (-scale' -scale' i);  		verticies [vertOffset + 1] = new Vector3 (-scale' scale' i);  		verticies [vertOffset + 2] = new Vector3 (scale' -scale' i);  		verticies [vertOffset + 3] = new Vector3 (scale' scale' i);  		uvs [vertOffset + 0] = new Vector2 (0 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  		uvs [vertOffset + 1] = new Vector2 (0 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  		uvs [vertOffset + 2] = new Vector2 (1 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  		uvs [vertOffset + 3] = new Vector2 (1 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  		indicies [indOffset + 0] = vertOffset + 0;  		indicies [indOffset + 1] = vertOffset + 1;  		indicies [indOffset + 2] = vertOffset + 2;  		indicies [indOffset + 3] = vertOffset + 2;  		indicies [indOffset + 4] = vertOffset + 1;  		indicies [indOffset + 5] = vertOffset + 3;  		vertOffset += 4;  		indOffset += 6;  	}  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: for (int i = 0; i < flareCount; i++) {  	EB_Flare flare = flares [i];  	float scale = flares [i].scale;  	Vector4 uvData = UVData (flare.imageIndex);  	if (flare.mesh != null)// HAS A MESH  	 {  		int vertexCount = flare.mesh.vertexCount;  		float centerX = 0;  		float centerY = 0;  		for (int j = 0; j < vertexCount; j++) {  			Vector3 v = flare.mesh.vertices [j];  			centerX += v.x;  			centerY += v.y;  			Vector2 uv = flare.mesh.uv [j];  			Vector2 s = new Vector2 (uvData.x' uvData.y);  			Vector2 o = new Vector2 (uvData.z' uvData.w);  			uvs [vertOffset + j] = Vector2.Scale (uv' s) + o;  			colors [vertOffset + j] = flare.color;  		}  		centerX = centerX / vertexCount;  		centerY = centerY / vertexCount;  		for (int j = 0; j < vertexCount; j++) {  			Vector3 v = flare.mesh.vertices [j];  			float x = v.x - centerX;  			float y = v.y - centerY;  			verticies [vertOffset + j] = new Vector3 (x * scale' y * scale' i);  		}  		for (int j = 0; j < flare.mesh.subMeshCount; j++) {  			int[] flareIndicies = flare.mesh.GetIndices (j);  			for (int k = 0; k < flareIndicies.Length; k++) {  				indicies [indOffset + k] = vertOffset + flareIndicies [k];  			}  			indOffset += flareIndicies.Length;  		}  		vertOffset += vertexCount;  	}  	else// NO MESH MAKE A QUAD  	 {  		colors [vertOffset + 0] = flare.color;  		colors [vertOffset + 1] = flare.color;  		colors [vertOffset + 2] = flare.color;  		colors [vertOffset + 3] = flare.color;  		verticies [vertOffset + 0] = new Vector3 (-scale' -scale' i);  		verticies [vertOffset + 1] = new Vector3 (-scale' scale' i);  		verticies [vertOffset + 2] = new Vector3 (scale' -scale' i);  		verticies [vertOffset + 3] = new Vector3 (scale' scale' i);  		uvs [vertOffset + 0] = new Vector2 (0 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  		uvs [vertOffset + 1] = new Vector2 (0 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  		uvs [vertOffset + 2] = new Vector2 (1 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  		uvs [vertOffset + 3] = new Vector2 (1 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  		indicies [indOffset + 0] = vertOffset + 0;  		indicies [indOffset + 1] = vertOffset + 1;  		indicies [indOffset + 2] = vertOffset + 2;  		indicies [indOffset + 3] = vertOffset + 2;  		indicies [indOffset + 4] = vertOffset + 1;  		indicies [indOffset + 5] = vertOffset + 3;  		vertOffset += 4;  		indOffset += 6;  	}  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: for (int i = 0; i < flareCount; i++) {  	EB_Flare flare = flares [i];  	float scale = flares [i].scale;  	Vector4 uvData = UVData (flare.imageIndex);  	if (flare.mesh != null)// HAS A MESH  	 {  		int vertexCount = flare.mesh.vertexCount;  		float centerX = 0;  		float centerY = 0;  		for (int j = 0; j < vertexCount; j++) {  			Vector3 v = flare.mesh.vertices [j];  			centerX += v.x;  			centerY += v.y;  			Vector2 uv = flare.mesh.uv [j];  			Vector2 s = new Vector2 (uvData.x' uvData.y);  			Vector2 o = new Vector2 (uvData.z' uvData.w);  			uvs [vertOffset + j] = Vector2.Scale (uv' s) + o;  			colors [vertOffset + j] = flare.color;  		}  		centerX = centerX / vertexCount;  		centerY = centerY / vertexCount;  		for (int j = 0; j < vertexCount; j++) {  			Vector3 v = flare.mesh.vertices [j];  			float x = v.x - centerX;  			float y = v.y - centerY;  			verticies [vertOffset + j] = new Vector3 (x * scale' y * scale' i);  		}  		for (int j = 0; j < flare.mesh.subMeshCount; j++) {  			int[] flareIndicies = flare.mesh.GetIndices (j);  			for (int k = 0; k < flareIndicies.Length; k++) {  				indicies [indOffset + k] = vertOffset + flareIndicies [k];  			}  			indOffset += flareIndicies.Length;  		}  		vertOffset += vertexCount;  	}  	else// NO MESH MAKE A QUAD  	 {  		colors [vertOffset + 0] = flare.color;  		colors [vertOffset + 1] = flare.color;  		colors [vertOffset + 2] = flare.color;  		colors [vertOffset + 3] = flare.color;  		verticies [vertOffset + 0] = new Vector3 (-scale' -scale' i);  		verticies [vertOffset + 1] = new Vector3 (-scale' scale' i);  		verticies [vertOffset + 2] = new Vector3 (scale' -scale' i);  		verticies [vertOffset + 3] = new Vector3 (scale' scale' i);  		uvs [vertOffset + 0] = new Vector2 (0 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  		uvs [vertOffset + 1] = new Vector2 (0 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  		uvs [vertOffset + 2] = new Vector2 (1 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  		uvs [vertOffset + 3] = new Vector2 (1 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  		indicies [indOffset + 0] = vertOffset + 0;  		indicies [indOffset + 1] = vertOffset + 1;  		indicies [indOffset + 2] = vertOffset + 2;  		indicies [indOffset + 3] = vertOffset + 2;  		indicies [indOffset + 4] = vertOffset + 1;  		indicies [indOffset + 5] = vertOffset + 3;  		vertOffset += 4;  		indOffset += 6;  	}  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: for (int i = 0; i < flareCount; i++) {  	EB_Flare flare = flares [i];  	float scale = flares [i].scale;  	Vector4 uvData = UVData (flare.imageIndex);  	if (flare.mesh != null)// HAS A MESH  	 {  		int vertexCount = flare.mesh.vertexCount;  		float centerX = 0;  		float centerY = 0;  		for (int j = 0; j < vertexCount; j++) {  			Vector3 v = flare.mesh.vertices [j];  			centerX += v.x;  			centerY += v.y;  			Vector2 uv = flare.mesh.uv [j];  			Vector2 s = new Vector2 (uvData.x' uvData.y);  			Vector2 o = new Vector2 (uvData.z' uvData.w);  			uvs [vertOffset + j] = Vector2.Scale (uv' s) + o;  			colors [vertOffset + j] = flare.color;  		}  		centerX = centerX / vertexCount;  		centerY = centerY / vertexCount;  		for (int j = 0; j < vertexCount; j++) {  			Vector3 v = flare.mesh.vertices [j];  			float x = v.x - centerX;  			float y = v.y - centerY;  			verticies [vertOffset + j] = new Vector3 (x * scale' y * scale' i);  		}  		for (int j = 0; j < flare.mesh.subMeshCount; j++) {  			int[] flareIndicies = flare.mesh.GetIndices (j);  			for (int k = 0; k < flareIndicies.Length; k++) {  				indicies [indOffset + k] = vertOffset + flareIndicies [k];  			}  			indOffset += flareIndicies.Length;  		}  		vertOffset += vertexCount;  	}  	else// NO MESH MAKE A QUAD  	 {  		colors [vertOffset + 0] = flare.color;  		colors [vertOffset + 1] = flare.color;  		colors [vertOffset + 2] = flare.color;  		colors [vertOffset + 3] = flare.color;  		verticies [vertOffset + 0] = new Vector3 (-scale' -scale' i);  		verticies [vertOffset + 1] = new Vector3 (-scale' scale' i);  		verticies [vertOffset + 2] = new Vector3 (scale' -scale' i);  		verticies [vertOffset + 3] = new Vector3 (scale' scale' i);  		uvs [vertOffset + 0] = new Vector2 (0 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  		uvs [vertOffset + 1] = new Vector2 (0 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  		uvs [vertOffset + 2] = new Vector2 (1 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  		uvs [vertOffset + 3] = new Vector2 (1 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  		indicies [indOffset + 0] = vertOffset + 0;  		indicies [indOffset + 1] = vertOffset + 1;  		indicies [indOffset + 2] = vertOffset + 2;  		indicies [indOffset + 3] = vertOffset + 2;  		indicies [indOffset + 4] = vertOffset + 1;  		indicies [indOffset + 5] = vertOffset + 3;  		vertOffset += 4;  		indOffset += 6;  	}  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: for (int i = 0; i < flareCount; i++) {  	EB_Flare flare = flares [i];  	float scale = flares [i].scale;  	Vector4 uvData = UVData (flare.imageIndex);  	if (flare.mesh != null)// HAS A MESH  	 {  		int vertexCount = flare.mesh.vertexCount;  		float centerX = 0;  		float centerY = 0;  		for (int j = 0; j < vertexCount; j++) {  			Vector3 v = flare.mesh.vertices [j];  			centerX += v.x;  			centerY += v.y;  			Vector2 uv = flare.mesh.uv [j];  			Vector2 s = new Vector2 (uvData.x' uvData.y);  			Vector2 o = new Vector2 (uvData.z' uvData.w);  			uvs [vertOffset + j] = Vector2.Scale (uv' s) + o;  			colors [vertOffset + j] = flare.color;  		}  		centerX = centerX / vertexCount;  		centerY = centerY / vertexCount;  		for (int j = 0; j < vertexCount; j++) {  			Vector3 v = flare.mesh.vertices [j];  			float x = v.x - centerX;  			float y = v.y - centerY;  			verticies [vertOffset + j] = new Vector3 (x * scale' y * scale' i);  		}  		for (int j = 0; j < flare.mesh.subMeshCount; j++) {  			int[] flareIndicies = flare.mesh.GetIndices (j);  			for (int k = 0; k < flareIndicies.Length; k++) {  				indicies [indOffset + k] = vertOffset + flareIndicies [k];  			}  			indOffset += flareIndicies.Length;  		}  		vertOffset += vertexCount;  	}  	else// NO MESH MAKE A QUAD  	 {  		colors [vertOffset + 0] = flare.color;  		colors [vertOffset + 1] = flare.color;  		colors [vertOffset + 2] = flare.color;  		colors [vertOffset + 3] = flare.color;  		verticies [vertOffset + 0] = new Vector3 (-scale' -scale' i);  		verticies [vertOffset + 1] = new Vector3 (-scale' scale' i);  		verticies [vertOffset + 2] = new Vector3 (scale' -scale' i);  		verticies [vertOffset + 3] = new Vector3 (scale' scale' i);  		uvs [vertOffset + 0] = new Vector2 (0 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  		uvs [vertOffset + 1] = new Vector2 (0 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  		uvs [vertOffset + 2] = new Vector2 (1 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  		uvs [vertOffset + 3] = new Vector2 (1 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  		indicies [indOffset + 0] = vertOffset + 0;  		indicies [indOffset + 1] = vertOffset + 1;  		indicies [indOffset + 2] = vertOffset + 2;  		indicies [indOffset + 3] = vertOffset + 2;  		indicies [indOffset + 4] = vertOffset + 1;  		indicies [indOffset + 5] = vertOffset + 3;  		vertOffset += 4;  		indOffset += 6;  	}  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: for (int i = 0; i < flareCount; i++) {  	EB_Flare flare = flares [i];  	float scale = flares [i].scale;  	Vector4 uvData = UVData (flare.imageIndex);  	if (flare.mesh != null)// HAS A MESH  	 {  		int vertexCount = flare.mesh.vertexCount;  		float centerX = 0;  		float centerY = 0;  		for (int j = 0; j < vertexCount; j++) {  			Vector3 v = flare.mesh.vertices [j];  			centerX += v.x;  			centerY += v.y;  			Vector2 uv = flare.mesh.uv [j];  			Vector2 s = new Vector2 (uvData.x' uvData.y);  			Vector2 o = new Vector2 (uvData.z' uvData.w);  			uvs [vertOffset + j] = Vector2.Scale (uv' s) + o;  			colors [vertOffset + j] = flare.color;  		}  		centerX = centerX / vertexCount;  		centerY = centerY / vertexCount;  		for (int j = 0; j < vertexCount; j++) {  			Vector3 v = flare.mesh.vertices [j];  			float x = v.x - centerX;  			float y = v.y - centerY;  			verticies [vertOffset + j] = new Vector3 (x * scale' y * scale' i);  		}  		for (int j = 0; j < flare.mesh.subMeshCount; j++) {  			int[] flareIndicies = flare.mesh.GetIndices (j);  			for (int k = 0; k < flareIndicies.Length; k++) {  				indicies [indOffset + k] = vertOffset + flareIndicies [k];  			}  			indOffset += flareIndicies.Length;  		}  		vertOffset += vertexCount;  	}  	else// NO MESH MAKE A QUAD  	 {  		colors [vertOffset + 0] = flare.color;  		colors [vertOffset + 1] = flare.color;  		colors [vertOffset + 2] = flare.color;  		colors [vertOffset + 3] = flare.color;  		verticies [vertOffset + 0] = new Vector3 (-scale' -scale' i);  		verticies [vertOffset + 1] = new Vector3 (-scale' scale' i);  		verticies [vertOffset + 2] = new Vector3 (scale' -scale' i);  		verticies [vertOffset + 3] = new Vector3 (scale' scale' i);  		uvs [vertOffset + 0] = new Vector2 (0 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  		uvs [vertOffset + 1] = new Vector2 (0 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  		uvs [vertOffset + 2] = new Vector2 (1 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  		uvs [vertOffset + 3] = new Vector2 (1 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  		indicies [indOffset + 0] = vertOffset + 0;  		indicies [indOffset + 1] = vertOffset + 1;  		indicies [indOffset + 2] = vertOffset + 2;  		indicies [indOffset + 3] = vertOffset + 2;  		indicies [indOffset + 4] = vertOffset + 1;  		indicies [indOffset + 5] = vertOffset + 3;  		vertOffset += 4;  		indOffset += 6;  	}  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: if (flare.mesh != null)// HAS A MESH   {  	int vertexCount = flare.mesh.vertexCount;  	float centerX = 0;  	float centerY = 0;  	for (int j = 0; j < vertexCount; j++) {  		Vector3 v = flare.mesh.vertices [j];  		centerX += v.x;  		centerY += v.y;  		Vector2 uv = flare.mesh.uv [j];  		Vector2 s = new Vector2 (uvData.x' uvData.y);  		Vector2 o = new Vector2 (uvData.z' uvData.w);  		uvs [vertOffset + j] = Vector2.Scale (uv' s) + o;  		colors [vertOffset + j] = flare.color;  	}  	centerX = centerX / vertexCount;  	centerY = centerY / vertexCount;  	for (int j = 0; j < vertexCount; j++) {  		Vector3 v = flare.mesh.vertices [j];  		float x = v.x - centerX;  		float y = v.y - centerY;  		verticies [vertOffset + j] = new Vector3 (x * scale' y * scale' i);  	}  	for (int j = 0; j < flare.mesh.subMeshCount; j++) {  		int[] flareIndicies = flare.mesh.GetIndices (j);  		for (int k = 0; k < flareIndicies.Length; k++) {  			indicies [indOffset + k] = vertOffset + flareIndicies [k];  		}  		indOffset += flareIndicies.Length;  	}  	vertOffset += vertexCount;  }  else// NO MESH MAKE A QUAD   {  	colors [vertOffset + 0] = flare.color;  	colors [vertOffset + 1] = flare.color;  	colors [vertOffset + 2] = flare.color;  	colors [vertOffset + 3] = flare.color;  	verticies [vertOffset + 0] = new Vector3 (-scale' -scale' i);  	verticies [vertOffset + 1] = new Vector3 (-scale' scale' i);  	verticies [vertOffset + 2] = new Vector3 (scale' -scale' i);  	verticies [vertOffset + 3] = new Vector3 (scale' scale' i);  	uvs [vertOffset + 0] = new Vector2 (0 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  	uvs [vertOffset + 1] = new Vector2 (0 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  	uvs [vertOffset + 2] = new Vector2 (1 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  	uvs [vertOffset + 3] = new Vector2 (1 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  	indicies [indOffset + 0] = vertOffset + 0;  	indicies [indOffset + 1] = vertOffset + 1;  	indicies [indOffset + 2] = vertOffset + 2;  	indicies [indOffset + 3] = vertOffset + 2;  	indicies [indOffset + 4] = vertOffset + 1;  	indicies [indOffset + 5] = vertOffset + 3;  	vertOffset += 4;  	indOffset += 6;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: if (flare.mesh != null)// HAS A MESH   {  	int vertexCount = flare.mesh.vertexCount;  	float centerX = 0;  	float centerY = 0;  	for (int j = 0; j < vertexCount; j++) {  		Vector3 v = flare.mesh.vertices [j];  		centerX += v.x;  		centerY += v.y;  		Vector2 uv = flare.mesh.uv [j];  		Vector2 s = new Vector2 (uvData.x' uvData.y);  		Vector2 o = new Vector2 (uvData.z' uvData.w);  		uvs [vertOffset + j] = Vector2.Scale (uv' s) + o;  		colors [vertOffset + j] = flare.color;  	}  	centerX = centerX / vertexCount;  	centerY = centerY / vertexCount;  	for (int j = 0; j < vertexCount; j++) {  		Vector3 v = flare.mesh.vertices [j];  		float x = v.x - centerX;  		float y = v.y - centerY;  		verticies [vertOffset + j] = new Vector3 (x * scale' y * scale' i);  	}  	for (int j = 0; j < flare.mesh.subMeshCount; j++) {  		int[] flareIndicies = flare.mesh.GetIndices (j);  		for (int k = 0; k < flareIndicies.Length; k++) {  			indicies [indOffset + k] = vertOffset + flareIndicies [k];  		}  		indOffset += flareIndicies.Length;  	}  	vertOffset += vertexCount;  }  else// NO MESH MAKE A QUAD   {  	colors [vertOffset + 0] = flare.color;  	colors [vertOffset + 1] = flare.color;  	colors [vertOffset + 2] = flare.color;  	colors [vertOffset + 3] = flare.color;  	verticies [vertOffset + 0] = new Vector3 (-scale' -scale' i);  	verticies [vertOffset + 1] = new Vector3 (-scale' scale' i);  	verticies [vertOffset + 2] = new Vector3 (scale' -scale' i);  	verticies [vertOffset + 3] = new Vector3 (scale' scale' i);  	uvs [vertOffset + 0] = new Vector2 (0 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  	uvs [vertOffset + 1] = new Vector2 (0 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  	uvs [vertOffset + 2] = new Vector2 (1 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  	uvs [vertOffset + 3] = new Vector2 (1 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  	indicies [indOffset + 0] = vertOffset + 0;  	indicies [indOffset + 1] = vertOffset + 1;  	indicies [indOffset + 2] = vertOffset + 2;  	indicies [indOffset + 3] = vertOffset + 2;  	indicies [indOffset + 4] = vertOffset + 1;  	indicies [indOffset + 5] = vertOffset + 3;  	vertOffset += 4;  	indOffset += 6;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: if (flare.mesh != null)// HAS A MESH   {  	int vertexCount = flare.mesh.vertexCount;  	float centerX = 0;  	float centerY = 0;  	for (int j = 0; j < vertexCount; j++) {  		Vector3 v = flare.mesh.vertices [j];  		centerX += v.x;  		centerY += v.y;  		Vector2 uv = flare.mesh.uv [j];  		Vector2 s = new Vector2 (uvData.x' uvData.y);  		Vector2 o = new Vector2 (uvData.z' uvData.w);  		uvs [vertOffset + j] = Vector2.Scale (uv' s) + o;  		colors [vertOffset + j] = flare.color;  	}  	centerX = centerX / vertexCount;  	centerY = centerY / vertexCount;  	for (int j = 0; j < vertexCount; j++) {  		Vector3 v = flare.mesh.vertices [j];  		float x = v.x - centerX;  		float y = v.y - centerY;  		verticies [vertOffset + j] = new Vector3 (x * scale' y * scale' i);  	}  	for (int j = 0; j < flare.mesh.subMeshCount; j++) {  		int[] flareIndicies = flare.mesh.GetIndices (j);  		for (int k = 0; k < flareIndicies.Length; k++) {  			indicies [indOffset + k] = vertOffset + flareIndicies [k];  		}  		indOffset += flareIndicies.Length;  	}  	vertOffset += vertexCount;  }  else// NO MESH MAKE A QUAD   {  	colors [vertOffset + 0] = flare.color;  	colors [vertOffset + 1] = flare.color;  	colors [vertOffset + 2] = flare.color;  	colors [vertOffset + 3] = flare.color;  	verticies [vertOffset + 0] = new Vector3 (-scale' -scale' i);  	verticies [vertOffset + 1] = new Vector3 (-scale' scale' i);  	verticies [vertOffset + 2] = new Vector3 (scale' -scale' i);  	verticies [vertOffset + 3] = new Vector3 (scale' scale' i);  	uvs [vertOffset + 0] = new Vector2 (0 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  	uvs [vertOffset + 1] = new Vector2 (0 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  	uvs [vertOffset + 2] = new Vector2 (1 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  	uvs [vertOffset + 3] = new Vector2 (1 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  	indicies [indOffset + 0] = vertOffset + 0;  	indicies [indOffset + 1] = vertOffset + 1;  	indicies [indOffset + 2] = vertOffset + 2;  	indicies [indOffset + 3] = vertOffset + 2;  	indicies [indOffset + 4] = vertOffset + 1;  	indicies [indOffset + 5] = vertOffset + 3;  	vertOffset += 4;  	indOffset += 6;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: if (flare.mesh != null)// HAS A MESH   {  	int vertexCount = flare.mesh.vertexCount;  	float centerX = 0;  	float centerY = 0;  	for (int j = 0; j < vertexCount; j++) {  		Vector3 v = flare.mesh.vertices [j];  		centerX += v.x;  		centerY += v.y;  		Vector2 uv = flare.mesh.uv [j];  		Vector2 s = new Vector2 (uvData.x' uvData.y);  		Vector2 o = new Vector2 (uvData.z' uvData.w);  		uvs [vertOffset + j] = Vector2.Scale (uv' s) + o;  		colors [vertOffset + j] = flare.color;  	}  	centerX = centerX / vertexCount;  	centerY = centerY / vertexCount;  	for (int j = 0; j < vertexCount; j++) {  		Vector3 v = flare.mesh.vertices [j];  		float x = v.x - centerX;  		float y = v.y - centerY;  		verticies [vertOffset + j] = new Vector3 (x * scale' y * scale' i);  	}  	for (int j = 0; j < flare.mesh.subMeshCount; j++) {  		int[] flareIndicies = flare.mesh.GetIndices (j);  		for (int k = 0; k < flareIndicies.Length; k++) {  			indicies [indOffset + k] = vertOffset + flareIndicies [k];  		}  		indOffset += flareIndicies.Length;  	}  	vertOffset += vertexCount;  }  else// NO MESH MAKE A QUAD   {  	colors [vertOffset + 0] = flare.color;  	colors [vertOffset + 1] = flare.color;  	colors [vertOffset + 2] = flare.color;  	colors [vertOffset + 3] = flare.color;  	verticies [vertOffset + 0] = new Vector3 (-scale' -scale' i);  	verticies [vertOffset + 1] = new Vector3 (-scale' scale' i);  	verticies [vertOffset + 2] = new Vector3 (scale' -scale' i);  	verticies [vertOffset + 3] = new Vector3 (scale' scale' i);  	uvs [vertOffset + 0] = new Vector2 (0 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  	uvs [vertOffset + 1] = new Vector2 (0 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  	uvs [vertOffset + 2] = new Vector2 (1 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  	uvs [vertOffset + 3] = new Vector2 (1 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  	indicies [indOffset + 0] = vertOffset + 0;  	indicies [indOffset + 1] = vertOffset + 1;  	indicies [indOffset + 2] = vertOffset + 2;  	indicies [indOffset + 3] = vertOffset + 2;  	indicies [indOffset + 4] = vertOffset + 1;  	indicies [indOffset + 5] = vertOffset + 3;  	vertOffset += 4;  	indOffset += 6;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: if (flare.mesh != null)// HAS A MESH   {  	int vertexCount = flare.mesh.vertexCount;  	float centerX = 0;  	float centerY = 0;  	for (int j = 0; j < vertexCount; j++) {  		Vector3 v = flare.mesh.vertices [j];  		centerX += v.x;  		centerY += v.y;  		Vector2 uv = flare.mesh.uv [j];  		Vector2 s = new Vector2 (uvData.x' uvData.y);  		Vector2 o = new Vector2 (uvData.z' uvData.w);  		uvs [vertOffset + j] = Vector2.Scale (uv' s) + o;  		colors [vertOffset + j] = flare.color;  	}  	centerX = centerX / vertexCount;  	centerY = centerY / vertexCount;  	for (int j = 0; j < vertexCount; j++) {  		Vector3 v = flare.mesh.vertices [j];  		float x = v.x - centerX;  		float y = v.y - centerY;  		verticies [vertOffset + j] = new Vector3 (x * scale' y * scale' i);  	}  	for (int j = 0; j < flare.mesh.subMeshCount; j++) {  		int[] flareIndicies = flare.mesh.GetIndices (j);  		for (int k = 0; k < flareIndicies.Length; k++) {  			indicies [indOffset + k] = vertOffset + flareIndicies [k];  		}  		indOffset += flareIndicies.Length;  	}  	vertOffset += vertexCount;  }  else// NO MESH MAKE A QUAD   {  	colors [vertOffset + 0] = flare.color;  	colors [vertOffset + 1] = flare.color;  	colors [vertOffset + 2] = flare.color;  	colors [vertOffset + 3] = flare.color;  	verticies [vertOffset + 0] = new Vector3 (-scale' -scale' i);  	verticies [vertOffset + 1] = new Vector3 (-scale' scale' i);  	verticies [vertOffset + 2] = new Vector3 (scale' -scale' i);  	verticies [vertOffset + 3] = new Vector3 (scale' scale' i);  	uvs [vertOffset + 0] = new Vector2 (0 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  	uvs [vertOffset + 1] = new Vector2 (0 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  	uvs [vertOffset + 2] = new Vector2 (1 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  	uvs [vertOffset + 3] = new Vector2 (1 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  	indicies [indOffset + 0] = vertOffset + 0;  	indicies [indOffset + 1] = vertOffset + 1;  	indicies [indOffset + 2] = vertOffset + 2;  	indicies [indOffset + 3] = vertOffset + 2;  	indicies [indOffset + 4] = vertOffset + 1;  	indicies [indOffset + 5] = vertOffset + 3;  	vertOffset += 4;  	indOffset += 6;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: if (flare.mesh != null)// HAS A MESH   {  	int vertexCount = flare.mesh.vertexCount;  	float centerX = 0;  	float centerY = 0;  	for (int j = 0; j < vertexCount; j++) {  		Vector3 v = flare.mesh.vertices [j];  		centerX += v.x;  		centerY += v.y;  		Vector2 uv = flare.mesh.uv [j];  		Vector2 s = new Vector2 (uvData.x' uvData.y);  		Vector2 o = new Vector2 (uvData.z' uvData.w);  		uvs [vertOffset + j] = Vector2.Scale (uv' s) + o;  		colors [vertOffset + j] = flare.color;  	}  	centerX = centerX / vertexCount;  	centerY = centerY / vertexCount;  	for (int j = 0; j < vertexCount; j++) {  		Vector3 v = flare.mesh.vertices [j];  		float x = v.x - centerX;  		float y = v.y - centerY;  		verticies [vertOffset + j] = new Vector3 (x * scale' y * scale' i);  	}  	for (int j = 0; j < flare.mesh.subMeshCount; j++) {  		int[] flareIndicies = flare.mesh.GetIndices (j);  		for (int k = 0; k < flareIndicies.Length; k++) {  			indicies [indOffset + k] = vertOffset + flareIndicies [k];  		}  		indOffset += flareIndicies.Length;  	}  	vertOffset += vertexCount;  }  else// NO MESH MAKE A QUAD   {  	colors [vertOffset + 0] = flare.color;  	colors [vertOffset + 1] = flare.color;  	colors [vertOffset + 2] = flare.color;  	colors [vertOffset + 3] = flare.color;  	verticies [vertOffset + 0] = new Vector3 (-scale' -scale' i);  	verticies [vertOffset + 1] = new Vector3 (-scale' scale' i);  	verticies [vertOffset + 2] = new Vector3 (scale' -scale' i);  	verticies [vertOffset + 3] = new Vector3 (scale' scale' i);  	uvs [vertOffset + 0] = new Vector2 (0 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  	uvs [vertOffset + 1] = new Vector2 (0 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  	uvs [vertOffset + 2] = new Vector2 (1 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  	uvs [vertOffset + 3] = new Vector2 (1 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  	indicies [indOffset + 0] = vertOffset + 0;  	indicies [indOffset + 1] = vertOffset + 1;  	indicies [indOffset + 2] = vertOffset + 2;  	indicies [indOffset + 3] = vertOffset + 2;  	indicies [indOffset + 4] = vertOffset + 1;  	indicies [indOffset + 5] = vertOffset + 3;  	vertOffset += 4;  	indOffset += 6;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: if (flare.mesh != null)// HAS A MESH   {  	int vertexCount = flare.mesh.vertexCount;  	float centerX = 0;  	float centerY = 0;  	for (int j = 0; j < vertexCount; j++) {  		Vector3 v = flare.mesh.vertices [j];  		centerX += v.x;  		centerY += v.y;  		Vector2 uv = flare.mesh.uv [j];  		Vector2 s = new Vector2 (uvData.x' uvData.y);  		Vector2 o = new Vector2 (uvData.z' uvData.w);  		uvs [vertOffset + j] = Vector2.Scale (uv' s) + o;  		colors [vertOffset + j] = flare.color;  	}  	centerX = centerX / vertexCount;  	centerY = centerY / vertexCount;  	for (int j = 0; j < vertexCount; j++) {  		Vector3 v = flare.mesh.vertices [j];  		float x = v.x - centerX;  		float y = v.y - centerY;  		verticies [vertOffset + j] = new Vector3 (x * scale' y * scale' i);  	}  	for (int j = 0; j < flare.mesh.subMeshCount; j++) {  		int[] flareIndicies = flare.mesh.GetIndices (j);  		for (int k = 0; k < flareIndicies.Length; k++) {  			indicies [indOffset + k] = vertOffset + flareIndicies [k];  		}  		indOffset += flareIndicies.Length;  	}  	vertOffset += vertexCount;  }  else// NO MESH MAKE A QUAD   {  	colors [vertOffset + 0] = flare.color;  	colors [vertOffset + 1] = flare.color;  	colors [vertOffset + 2] = flare.color;  	colors [vertOffset + 3] = flare.color;  	verticies [vertOffset + 0] = new Vector3 (-scale' -scale' i);  	verticies [vertOffset + 1] = new Vector3 (-scale' scale' i);  	verticies [vertOffset + 2] = new Vector3 (scale' -scale' i);  	verticies [vertOffset + 3] = new Vector3 (scale' scale' i);  	uvs [vertOffset + 0] = new Vector2 (0 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  	uvs [vertOffset + 1] = new Vector2 (0 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  	uvs [vertOffset + 2] = new Vector2 (1 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  	uvs [vertOffset + 3] = new Vector2 (1 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  	indicies [indOffset + 0] = vertOffset + 0;  	indicies [indOffset + 1] = vertOffset + 1;  	indicies [indOffset + 2] = vertOffset + 2;  	indicies [indOffset + 3] = vertOffset + 2;  	indicies [indOffset + 4] = vertOffset + 1;  	indicies [indOffset + 5] = vertOffset + 3;  	vertOffset += 4;  	indOffset += 6;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: if (flare.mesh != null)// HAS A MESH   {  	int vertexCount = flare.mesh.vertexCount;  	float centerX = 0;  	float centerY = 0;  	for (int j = 0; j < vertexCount; j++) {  		Vector3 v = flare.mesh.vertices [j];  		centerX += v.x;  		centerY += v.y;  		Vector2 uv = flare.mesh.uv [j];  		Vector2 s = new Vector2 (uvData.x' uvData.y);  		Vector2 o = new Vector2 (uvData.z' uvData.w);  		uvs [vertOffset + j] = Vector2.Scale (uv' s) + o;  		colors [vertOffset + j] = flare.color;  	}  	centerX = centerX / vertexCount;  	centerY = centerY / vertexCount;  	for (int j = 0; j < vertexCount; j++) {  		Vector3 v = flare.mesh.vertices [j];  		float x = v.x - centerX;  		float y = v.y - centerY;  		verticies [vertOffset + j] = new Vector3 (x * scale' y * scale' i);  	}  	for (int j = 0; j < flare.mesh.subMeshCount; j++) {  		int[] flareIndicies = flare.mesh.GetIndices (j);  		for (int k = 0; k < flareIndicies.Length; k++) {  			indicies [indOffset + k] = vertOffset + flareIndicies [k];  		}  		indOffset += flareIndicies.Length;  	}  	vertOffset += vertexCount;  }  else// NO MESH MAKE A QUAD   {  	colors [vertOffset + 0] = flare.color;  	colors [vertOffset + 1] = flare.color;  	colors [vertOffset + 2] = flare.color;  	colors [vertOffset + 3] = flare.color;  	verticies [vertOffset + 0] = new Vector3 (-scale' -scale' i);  	verticies [vertOffset + 1] = new Vector3 (-scale' scale' i);  	verticies [vertOffset + 2] = new Vector3 (scale' -scale' i);  	verticies [vertOffset + 3] = new Vector3 (scale' scale' i);  	uvs [vertOffset + 0] = new Vector2 (0 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  	uvs [vertOffset + 1] = new Vector2 (0 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  	uvs [vertOffset + 2] = new Vector2 (1 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  	uvs [vertOffset + 3] = new Vector2 (1 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  	indicies [indOffset + 0] = vertOffset + 0;  	indicies [indOffset + 1] = vertOffset + 1;  	indicies [indOffset + 2] = vertOffset + 2;  	indicies [indOffset + 3] = vertOffset + 2;  	indicies [indOffset + 4] = vertOffset + 1;  	indicies [indOffset + 5] = vertOffset + 3;  	vertOffset += 4;  	indOffset += 6;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: if (flare.mesh != null)// HAS A MESH   {  	int vertexCount = flare.mesh.vertexCount;  	float centerX = 0;  	float centerY = 0;  	for (int j = 0; j < vertexCount; j++) {  		Vector3 v = flare.mesh.vertices [j];  		centerX += v.x;  		centerY += v.y;  		Vector2 uv = flare.mesh.uv [j];  		Vector2 s = new Vector2 (uvData.x' uvData.y);  		Vector2 o = new Vector2 (uvData.z' uvData.w);  		uvs [vertOffset + j] = Vector2.Scale (uv' s) + o;  		colors [vertOffset + j] = flare.color;  	}  	centerX = centerX / vertexCount;  	centerY = centerY / vertexCount;  	for (int j = 0; j < vertexCount; j++) {  		Vector3 v = flare.mesh.vertices [j];  		float x = v.x - centerX;  		float y = v.y - centerY;  		verticies [vertOffset + j] = new Vector3 (x * scale' y * scale' i);  	}  	for (int j = 0; j < flare.mesh.subMeshCount; j++) {  		int[] flareIndicies = flare.mesh.GetIndices (j);  		for (int k = 0; k < flareIndicies.Length; k++) {  			indicies [indOffset + k] = vertOffset + flareIndicies [k];  		}  		indOffset += flareIndicies.Length;  	}  	vertOffset += vertexCount;  }  else// NO MESH MAKE A QUAD   {  	colors [vertOffset + 0] = flare.color;  	colors [vertOffset + 1] = flare.color;  	colors [vertOffset + 2] = flare.color;  	colors [vertOffset + 3] = flare.color;  	verticies [vertOffset + 0] = new Vector3 (-scale' -scale' i);  	verticies [vertOffset + 1] = new Vector3 (-scale' scale' i);  	verticies [vertOffset + 2] = new Vector3 (scale' -scale' i);  	verticies [vertOffset + 3] = new Vector3 (scale' scale' i);  	uvs [vertOffset + 0] = new Vector2 (0 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  	uvs [vertOffset + 1] = new Vector2 (0 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  	uvs [vertOffset + 2] = new Vector2 (1 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  	uvs [vertOffset + 3] = new Vector2 (1 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  	indicies [indOffset + 0] = vertOffset + 0;  	indicies [indOffset + 1] = vertOffset + 1;  	indicies [indOffset + 2] = vertOffset + 2;  	indicies [indOffset + 3] = vertOffset + 2;  	indicies [indOffset + 4] = vertOffset + 1;  	indicies [indOffset + 5] = vertOffset + 3;  	vertOffset += 4;  	indOffset += 6;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: if (flare.mesh != null)// HAS A MESH   {  	int vertexCount = flare.mesh.vertexCount;  	float centerX = 0;  	float centerY = 0;  	for (int j = 0; j < vertexCount; j++) {  		Vector3 v = flare.mesh.vertices [j];  		centerX += v.x;  		centerY += v.y;  		Vector2 uv = flare.mesh.uv [j];  		Vector2 s = new Vector2 (uvData.x' uvData.y);  		Vector2 o = new Vector2 (uvData.z' uvData.w);  		uvs [vertOffset + j] = Vector2.Scale (uv' s) + o;  		colors [vertOffset + j] = flare.color;  	}  	centerX = centerX / vertexCount;  	centerY = centerY / vertexCount;  	for (int j = 0; j < vertexCount; j++) {  		Vector3 v = flare.mesh.vertices [j];  		float x = v.x - centerX;  		float y = v.y - centerY;  		verticies [vertOffset + j] = new Vector3 (x * scale' y * scale' i);  	}  	for (int j = 0; j < flare.mesh.subMeshCount; j++) {  		int[] flareIndicies = flare.mesh.GetIndices (j);  		for (int k = 0; k < flareIndicies.Length; k++) {  			indicies [indOffset + k] = vertOffset + flareIndicies [k];  		}  		indOffset += flareIndicies.Length;  	}  	vertOffset += vertexCount;  }  else// NO MESH MAKE A QUAD   {  	colors [vertOffset + 0] = flare.color;  	colors [vertOffset + 1] = flare.color;  	colors [vertOffset + 2] = flare.color;  	colors [vertOffset + 3] = flare.color;  	verticies [vertOffset + 0] = new Vector3 (-scale' -scale' i);  	verticies [vertOffset + 1] = new Vector3 (-scale' scale' i);  	verticies [vertOffset + 2] = new Vector3 (scale' -scale' i);  	verticies [vertOffset + 3] = new Vector3 (scale' scale' i);  	uvs [vertOffset + 0] = new Vector2 (0 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  	uvs [vertOffset + 1] = new Vector2 (0 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  	uvs [vertOffset + 2] = new Vector2 (1 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  	uvs [vertOffset + 3] = new Vector2 (1 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  	indicies [indOffset + 0] = vertOffset + 0;  	indicies [indOffset + 1] = vertOffset + 1;  	indicies [indOffset + 2] = vertOffset + 2;  	indicies [indOffset + 3] = vertOffset + 2;  	indicies [indOffset + 4] = vertOffset + 1;  	indicies [indOffset + 5] = vertOffset + 3;  	vertOffset += 4;  	indOffset += 6;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: if (flare.mesh != null)// HAS A MESH   {  	int vertexCount = flare.mesh.vertexCount;  	float centerX = 0;  	float centerY = 0;  	for (int j = 0; j < vertexCount; j++) {  		Vector3 v = flare.mesh.vertices [j];  		centerX += v.x;  		centerY += v.y;  		Vector2 uv = flare.mesh.uv [j];  		Vector2 s = new Vector2 (uvData.x' uvData.y);  		Vector2 o = new Vector2 (uvData.z' uvData.w);  		uvs [vertOffset + j] = Vector2.Scale (uv' s) + o;  		colors [vertOffset + j] = flare.color;  	}  	centerX = centerX / vertexCount;  	centerY = centerY / vertexCount;  	for (int j = 0; j < vertexCount; j++) {  		Vector3 v = flare.mesh.vertices [j];  		float x = v.x - centerX;  		float y = v.y - centerY;  		verticies [vertOffset + j] = new Vector3 (x * scale' y * scale' i);  	}  	for (int j = 0; j < flare.mesh.subMeshCount; j++) {  		int[] flareIndicies = flare.mesh.GetIndices (j);  		for (int k = 0; k < flareIndicies.Length; k++) {  			indicies [indOffset + k] = vertOffset + flareIndicies [k];  		}  		indOffset += flareIndicies.Length;  	}  	vertOffset += vertexCount;  }  else// NO MESH MAKE A QUAD   {  	colors [vertOffset + 0] = flare.color;  	colors [vertOffset + 1] = flare.color;  	colors [vertOffset + 2] = flare.color;  	colors [vertOffset + 3] = flare.color;  	verticies [vertOffset + 0] = new Vector3 (-scale' -scale' i);  	verticies [vertOffset + 1] = new Vector3 (-scale' scale' i);  	verticies [vertOffset + 2] = new Vector3 (scale' -scale' i);  	verticies [vertOffset + 3] = new Vector3 (scale' scale' i);  	uvs [vertOffset + 0] = new Vector2 (0 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  	uvs [vertOffset + 1] = new Vector2 (0 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  	uvs [vertOffset + 2] = new Vector2 (1 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  	uvs [vertOffset + 3] = new Vector2 (1 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  	indicies [indOffset + 0] = vertOffset + 0;  	indicies [indOffset + 1] = vertOffset + 1;  	indicies [indOffset + 2] = vertOffset + 2;  	indicies [indOffset + 3] = vertOffset + 2;  	indicies [indOffset + 4] = vertOffset + 1;  	indicies [indOffset + 5] = vertOffset + 3;  	vertOffset += 4;  	indOffset += 6;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: if (flare.mesh != null)// HAS A MESH   {  	int vertexCount = flare.mesh.vertexCount;  	float centerX = 0;  	float centerY = 0;  	for (int j = 0; j < vertexCount; j++) {  		Vector3 v = flare.mesh.vertices [j];  		centerX += v.x;  		centerY += v.y;  		Vector2 uv = flare.mesh.uv [j];  		Vector2 s = new Vector2 (uvData.x' uvData.y);  		Vector2 o = new Vector2 (uvData.z' uvData.w);  		uvs [vertOffset + j] = Vector2.Scale (uv' s) + o;  		colors [vertOffset + j] = flare.color;  	}  	centerX = centerX / vertexCount;  	centerY = centerY / vertexCount;  	for (int j = 0; j < vertexCount; j++) {  		Vector3 v = flare.mesh.vertices [j];  		float x = v.x - centerX;  		float y = v.y - centerY;  		verticies [vertOffset + j] = new Vector3 (x * scale' y * scale' i);  	}  	for (int j = 0; j < flare.mesh.subMeshCount; j++) {  		int[] flareIndicies = flare.mesh.GetIndices (j);  		for (int k = 0; k < flareIndicies.Length; k++) {  			indicies [indOffset + k] = vertOffset + flareIndicies [k];  		}  		indOffset += flareIndicies.Length;  	}  	vertOffset += vertexCount;  }  else// NO MESH MAKE A QUAD   {  	colors [vertOffset + 0] = flare.color;  	colors [vertOffset + 1] = flare.color;  	colors [vertOffset + 2] = flare.color;  	colors [vertOffset + 3] = flare.color;  	verticies [vertOffset + 0] = new Vector3 (-scale' -scale' i);  	verticies [vertOffset + 1] = new Vector3 (-scale' scale' i);  	verticies [vertOffset + 2] = new Vector3 (scale' -scale' i);  	verticies [vertOffset + 3] = new Vector3 (scale' scale' i);  	uvs [vertOffset + 0] = new Vector2 (0 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  	uvs [vertOffset + 1] = new Vector2 (0 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  	uvs [vertOffset + 2] = new Vector2 (1 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  	uvs [vertOffset + 3] = new Vector2 (1 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  	indicies [indOffset + 0] = vertOffset + 0;  	indicies [indOffset + 1] = vertOffset + 1;  	indicies [indOffset + 2] = vertOffset + 2;  	indicies [indOffset + 3] = vertOffset + 2;  	indicies [indOffset + 4] = vertOffset + 1;  	indicies [indOffset + 5] = vertOffset + 3;  	vertOffset += 4;  	indOffset += 6;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: if (flare.mesh != null)// HAS A MESH   {  	int vertexCount = flare.mesh.vertexCount;  	float centerX = 0;  	float centerY = 0;  	for (int j = 0; j < vertexCount; j++) {  		Vector3 v = flare.mesh.vertices [j];  		centerX += v.x;  		centerY += v.y;  		Vector2 uv = flare.mesh.uv [j];  		Vector2 s = new Vector2 (uvData.x' uvData.y);  		Vector2 o = new Vector2 (uvData.z' uvData.w);  		uvs [vertOffset + j] = Vector2.Scale (uv' s) + o;  		colors [vertOffset + j] = flare.color;  	}  	centerX = centerX / vertexCount;  	centerY = centerY / vertexCount;  	for (int j = 0; j < vertexCount; j++) {  		Vector3 v = flare.mesh.vertices [j];  		float x = v.x - centerX;  		float y = v.y - centerY;  		verticies [vertOffset + j] = new Vector3 (x * scale' y * scale' i);  	}  	for (int j = 0; j < flare.mesh.subMeshCount; j++) {  		int[] flareIndicies = flare.mesh.GetIndices (j);  		for (int k = 0; k < flareIndicies.Length; k++) {  			indicies [indOffset + k] = vertOffset + flareIndicies [k];  		}  		indOffset += flareIndicies.Length;  	}  	vertOffset += vertexCount;  }  else// NO MESH MAKE A QUAD   {  	colors [vertOffset + 0] = flare.color;  	colors [vertOffset + 1] = flare.color;  	colors [vertOffset + 2] = flare.color;  	colors [vertOffset + 3] = flare.color;  	verticies [vertOffset + 0] = new Vector3 (-scale' -scale' i);  	verticies [vertOffset + 1] = new Vector3 (-scale' scale' i);  	verticies [vertOffset + 2] = new Vector3 (scale' -scale' i);  	verticies [vertOffset + 3] = new Vector3 (scale' scale' i);  	uvs [vertOffset + 0] = new Vector2 (0 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  	uvs [vertOffset + 1] = new Vector2 (0 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  	uvs [vertOffset + 2] = new Vector2 (1 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  	uvs [vertOffset + 3] = new Vector2 (1 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  	indicies [indOffset + 0] = vertOffset + 0;  	indicies [indOffset + 1] = vertOffset + 1;  	indicies [indOffset + 2] = vertOffset + 2;  	indicies [indOffset + 3] = vertOffset + 2;  	indicies [indOffset + 4] = vertOffset + 1;  	indicies [indOffset + 5] = vertOffset + 3;  	vertOffset += 4;  	indOffset += 6;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: if (flare.mesh != null)// HAS A MESH   {  	int vertexCount = flare.mesh.vertexCount;  	float centerX = 0;  	float centerY = 0;  	for (int j = 0; j < vertexCount; j++) {  		Vector3 v = flare.mesh.vertices [j];  		centerX += v.x;  		centerY += v.y;  		Vector2 uv = flare.mesh.uv [j];  		Vector2 s = new Vector2 (uvData.x' uvData.y);  		Vector2 o = new Vector2 (uvData.z' uvData.w);  		uvs [vertOffset + j] = Vector2.Scale (uv' s) + o;  		colors [vertOffset + j] = flare.color;  	}  	centerX = centerX / vertexCount;  	centerY = centerY / vertexCount;  	for (int j = 0; j < vertexCount; j++) {  		Vector3 v = flare.mesh.vertices [j];  		float x = v.x - centerX;  		float y = v.y - centerY;  		verticies [vertOffset + j] = new Vector3 (x * scale' y * scale' i);  	}  	for (int j = 0; j < flare.mesh.subMeshCount; j++) {  		int[] flareIndicies = flare.mesh.GetIndices (j);  		for (int k = 0; k < flareIndicies.Length; k++) {  			indicies [indOffset + k] = vertOffset + flareIndicies [k];  		}  		indOffset += flareIndicies.Length;  	}  	vertOffset += vertexCount;  }  else// NO MESH MAKE A QUAD   {  	colors [vertOffset + 0] = flare.color;  	colors [vertOffset + 1] = flare.color;  	colors [vertOffset + 2] = flare.color;  	colors [vertOffset + 3] = flare.color;  	verticies [vertOffset + 0] = new Vector3 (-scale' -scale' i);  	verticies [vertOffset + 1] = new Vector3 (-scale' scale' i);  	verticies [vertOffset + 2] = new Vector3 (scale' -scale' i);  	verticies [vertOffset + 3] = new Vector3 (scale' scale' i);  	uvs [vertOffset + 0] = new Vector2 (0 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  	uvs [vertOffset + 1] = new Vector2 (0 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  	uvs [vertOffset + 2] = new Vector2 (1 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  	uvs [vertOffset + 3] = new Vector2 (1 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  	indicies [indOffset + 0] = vertOffset + 0;  	indicies [indOffset + 1] = vertOffset + 1;  	indicies [indOffset + 2] = vertOffset + 2;  	indicies [indOffset + 3] = vertOffset + 2;  	indicies [indOffset + 4] = vertOffset + 1;  	indicies [indOffset + 5] = vertOffset + 3;  	vertOffset += 4;  	indOffset += 6;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: if (flare.mesh != null)// HAS A MESH   {  	int vertexCount = flare.mesh.vertexCount;  	float centerX = 0;  	float centerY = 0;  	for (int j = 0; j < vertexCount; j++) {  		Vector3 v = flare.mesh.vertices [j];  		centerX += v.x;  		centerY += v.y;  		Vector2 uv = flare.mesh.uv [j];  		Vector2 s = new Vector2 (uvData.x' uvData.y);  		Vector2 o = new Vector2 (uvData.z' uvData.w);  		uvs [vertOffset + j] = Vector2.Scale (uv' s) + o;  		colors [vertOffset + j] = flare.color;  	}  	centerX = centerX / vertexCount;  	centerY = centerY / vertexCount;  	for (int j = 0; j < vertexCount; j++) {  		Vector3 v = flare.mesh.vertices [j];  		float x = v.x - centerX;  		float y = v.y - centerY;  		verticies [vertOffset + j] = new Vector3 (x * scale' y * scale' i);  	}  	for (int j = 0; j < flare.mesh.subMeshCount; j++) {  		int[] flareIndicies = flare.mesh.GetIndices (j);  		for (int k = 0; k < flareIndicies.Length; k++) {  			indicies [indOffset + k] = vertOffset + flareIndicies [k];  		}  		indOffset += flareIndicies.Length;  	}  	vertOffset += vertexCount;  }  else// NO MESH MAKE A QUAD   {  	colors [vertOffset + 0] = flare.color;  	colors [vertOffset + 1] = flare.color;  	colors [vertOffset + 2] = flare.color;  	colors [vertOffset + 3] = flare.color;  	verticies [vertOffset + 0] = new Vector3 (-scale' -scale' i);  	verticies [vertOffset + 1] = new Vector3 (-scale' scale' i);  	verticies [vertOffset + 2] = new Vector3 (scale' -scale' i);  	verticies [vertOffset + 3] = new Vector3 (scale' scale' i);  	uvs [vertOffset + 0] = new Vector2 (0 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  	uvs [vertOffset + 1] = new Vector2 (0 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  	uvs [vertOffset + 2] = new Vector2 (1 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  	uvs [vertOffset + 3] = new Vector2 (1 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  	indicies [indOffset + 0] = vertOffset + 0;  	indicies [indOffset + 1] = vertOffset + 1;  	indicies [indOffset + 2] = vertOffset + 2;  	indicies [indOffset + 3] = vertOffset + 2;  	indicies [indOffset + 4] = vertOffset + 1;  	indicies [indOffset + 5] = vertOffset + 3;  	vertOffset += 4;  	indOffset += 6;  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: colors [vertOffset + 2] = flare.color;  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: colors [vertOffset + 3] = flare.color;  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: verticies [vertOffset + 2] = new Vector3 (scale' -scale' i);  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: verticies [vertOffset + 3] = new Vector3 (scale' scale' i);  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: uvs [vertOffset + 2] = new Vector2 (1 * uvData.x + uvData.z' 0 * uvData.y + uvData.w);  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: uvs [vertOffset + 3] = new Vector2 (1 * uvData.x + uvData.z' 1 * uvData.y + uvData.w);  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: indicies [indOffset + 2] = vertOffset + 2;  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: indicies [indOffset + 2] = vertOffset + 2;  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: indicies [indOffset + 3] = vertOffset + 2;  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: indicies [indOffset + 3] = vertOffset + 2;  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: indicies [indOffset + 4] = vertOffset + 1;  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: indicies [indOffset + 5] = vertOffset + 3;  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: indicies [indOffset + 5] = vertOffset + 3;  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: vertOffset += 4;  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,MakeMesh,The following statement contains a magic number: indOffset += 6;  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,Update,The following statement contains a magic number: for (int i = 0; i < flares.Count; i++) {  	Vector3 flarePosition = _sunPosition + (direction * flares [i].distance);  	Vector3 flareScreenPosition = _camera.WorldToScreenPoint (flarePosition);  	float angle = Vector2.Angle (Vector2.up' targetScreenPos - flareScreenPosition);  	if (targetScreenPos.x > flareScreenPosition.x) {  		angle = 360f - angle;  	}  	float radians = 0;  	if (flares [i].enableRotation) {  		radians = Mathf.Deg2Rad * (angle + flares [i].rotationOffset);  	}  	else {  		radians = Mathf.Deg2Rad * flares [i].rotationOffset;  	}  	if (i <= 3) {  		positions1.SetRow (i' new Vector4 (flarePosition.x' flarePosition.y' flarePosition.z' radians));  	}  	else {  		int ii = i - 4;  		positions2.SetRow (ii' new Vector4 (flarePosition.x' flarePosition.y' flarePosition.z' radians));  	}  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,Update,The following statement contains a magic number: for (int i = 0; i < flares.Count; i++) {  	Vector3 flarePosition = _sunPosition + (direction * flares [i].distance);  	Vector3 flareScreenPosition = _camera.WorldToScreenPoint (flarePosition);  	float angle = Vector2.Angle (Vector2.up' targetScreenPos - flareScreenPosition);  	if (targetScreenPos.x > flareScreenPosition.x) {  		angle = 360f - angle;  	}  	float radians = 0;  	if (flares [i].enableRotation) {  		radians = Mathf.Deg2Rad * (angle + flares [i].rotationOffset);  	}  	else {  		radians = Mathf.Deg2Rad * flares [i].rotationOffset;  	}  	if (i <= 3) {  		positions1.SetRow (i' new Vector4 (flarePosition.x' flarePosition.y' flarePosition.z' radians));  	}  	else {  		int ii = i - 4;  		positions2.SetRow (ii' new Vector4 (flarePosition.x' flarePosition.y' flarePosition.z' radians));  	}  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,Update,The following statement contains a magic number: if (i <= 3) {  	positions1.SetRow (i' new Vector4 (flarePosition.x' flarePosition.y' flarePosition.z' radians));  }  else {  	int ii = i - 4;  	positions2.SetRow (ii' new Vector4 (flarePosition.x' flarePosition.y' flarePosition.z' radians));  }  
Magic Number,EB.Rendering,EBLensFlare,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\LensFlare\Scripts\EBLensFlare.cs,Update,The following statement contains a magic number: if (i <= 3) {  	positions1.SetRow (i' new Vector4 (flarePosition.x' flarePosition.y' flarePosition.z' radians));  }  else {  	int ii = i - 4;  	positions2.SetRow (ii' new Vector4 (flarePosition.x' flarePosition.y' flarePosition.z' radians));  }  
Magic Number,EB.Rendering,PlanarReflectionManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PlanarReflection\Scripts\PlanarReflectionManager.cs,InitQuality,The following statement contains a magic number: m_renderTexture = new RenderTexture (m_ReflectionWidth [(int)quality]' m_ReflectionHeight [(int)quality]' 24);  
Magic Number,EB.Rendering,PlanarReflectionManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PlanarReflection\Scripts\PlanarReflectionManager.cs,CalculateObliqueMatrix,The following statement contains a magic number: projection [2] = c.x - projection [3];  
Magic Number,EB.Rendering,PlanarReflectionManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PlanarReflection\Scripts\PlanarReflectionManager.cs,CalculateObliqueMatrix,The following statement contains a magic number: projection [2] = c.x - projection [3];  
Magic Number,EB.Rendering,PlanarReflectionManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PlanarReflection\Scripts\PlanarReflectionManager.cs,CalculateObliqueMatrix,The following statement contains a magic number: projection [6] = c.y - projection [7];  
Magic Number,EB.Rendering,PlanarReflectionManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PlanarReflection\Scripts\PlanarReflectionManager.cs,CalculateObliqueMatrix,The following statement contains a magic number: projection [6] = c.y - projection [7];  
Magic Number,EB.Rendering,PlanarReflectionManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PlanarReflection\Scripts\PlanarReflectionManager.cs,CalculateObliqueMatrix,The following statement contains a magic number: projection [10] = c.z - projection [11];  
Magic Number,EB.Rendering,PlanarReflectionManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PlanarReflection\Scripts\PlanarReflectionManager.cs,CalculateObliqueMatrix,The following statement contains a magic number: projection [10] = c.z - projection [11];  
Magic Number,EB.Rendering,PlanarReflectionManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PlanarReflection\Scripts\PlanarReflectionManager.cs,CalculateObliqueMatrix,The following statement contains a magic number: projection [14] = c.w - projection [15];  
Magic Number,EB.Rendering,PlanarReflectionManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PlanarReflection\Scripts\PlanarReflectionManager.cs,CalculateObliqueMatrix,The following statement contains a magic number: projection [14] = c.w - projection [15];  
Magic Number,EB.Rendering,PlanarReflectionManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PlanarReflection\Scripts\PlanarReflectionManager.cs,CalculateReflectionMatrix,The following statement contains a magic number: reflectionMat.m02 = (-2F * plane [0] * plane [2]);  
Magic Number,EB.Rendering,PlanarReflectionManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PlanarReflection\Scripts\PlanarReflectionManager.cs,CalculateReflectionMatrix,The following statement contains a magic number: reflectionMat.m03 = (-2F * plane [3] * plane [0]);  
Magic Number,EB.Rendering,PlanarReflectionManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PlanarReflection\Scripts\PlanarReflectionManager.cs,CalculateReflectionMatrix,The following statement contains a magic number: reflectionMat.m12 = (-2F * plane [1] * plane [2]);  
Magic Number,EB.Rendering,PlanarReflectionManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PlanarReflection\Scripts\PlanarReflectionManager.cs,CalculateReflectionMatrix,The following statement contains a magic number: reflectionMat.m13 = (-2F * plane [3] * plane [1]);  
Magic Number,EB.Rendering,PlanarReflectionManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PlanarReflection\Scripts\PlanarReflectionManager.cs,CalculateReflectionMatrix,The following statement contains a magic number: reflectionMat.m20 = (-2F * plane [2] * plane [0]);  
Magic Number,EB.Rendering,PlanarReflectionManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PlanarReflection\Scripts\PlanarReflectionManager.cs,CalculateReflectionMatrix,The following statement contains a magic number: reflectionMat.m21 = (-2F * plane [2] * plane [1]);  
Magic Number,EB.Rendering,PlanarReflectionManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PlanarReflection\Scripts\PlanarReflectionManager.cs,CalculateReflectionMatrix,The following statement contains a magic number: reflectionMat.m22 = (1F - 2F * plane [2] * plane [2]);  
Magic Number,EB.Rendering,PlanarReflectionManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PlanarReflection\Scripts\PlanarReflectionManager.cs,CalculateReflectionMatrix,The following statement contains a magic number: reflectionMat.m22 = (1F - 2F * plane [2] * plane [2]);  
Magic Number,EB.Rendering,PlanarReflectionManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PlanarReflection\Scripts\PlanarReflectionManager.cs,CalculateReflectionMatrix,The following statement contains a magic number: reflectionMat.m23 = (-2F * plane [3] * plane [2]);  
Magic Number,EB.Rendering,PlanarReflectionManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PlanarReflection\Scripts\PlanarReflectionManager.cs,CalculateReflectionMatrix,The following statement contains a magic number: reflectionMat.m23 = (-2F * plane [3] * plane [2]);  
Magic Number,EB.Rendering,GeneratePostFXShaders,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\GeneratePostFXShaders.cs,GenerateShaders,The following statement contains a magic number: for (int i = 1; i < Mathf.Pow (2' PostFXManager.ePOSTFX_COUNT); ++i) {  	enabled.Clear ();  	foreach (PostFXManager.ePOSTFX effect in System.Enum.GetValues (typeof(PostFXManager.ePOSTFX))) {  		if ((i & (1 << (int)effect)) != 0) {  			enabled.Add (effect);  		}  	}  	if (enabled.Count == 0)  		continue;  	CompositePostFX (enabled);  }  
Magic Number,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,InitBase,The following statement contains a magic number: _BloomBlurWidth [(int)ePOSTFX_QUALITY.Low] = new int[] {  	512'  	128'  	64'  	64  };  
Magic Number,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,InitBase,The following statement contains a magic number: _BloomBlurWidth [(int)ePOSTFX_QUALITY.Low] = new int[] {  	512'  	128'  	64'  	64  };  
Magic Number,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,InitBase,The following statement contains a magic number: _BloomBlurWidth [(int)ePOSTFX_QUALITY.Low] = new int[] {  	512'  	128'  	64'  	64  };  
Magic Number,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,InitBase,The following statement contains a magic number: _BloomBlurWidth [(int)ePOSTFX_QUALITY.Low] = new int[] {  	512'  	128'  	64'  	64  };  
Magic Number,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,InitBase,The following statement contains a magic number: _BloomBlurHeight [(int)ePOSTFX_QUALITY.Low] = new int[] {  	256'  	64'  	32'  	32  };  
Magic Number,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,InitBase,The following statement contains a magic number: _BloomBlurHeight [(int)ePOSTFX_QUALITY.Low] = new int[] {  	256'  	64'  	32'  	32  };  
Magic Number,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,InitBase,The following statement contains a magic number: _BloomBlurHeight [(int)ePOSTFX_QUALITY.Low] = new int[] {  	256'  	64'  	32'  	32  };  
Magic Number,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,InitBase,The following statement contains a magic number: _BloomBlurHeight [(int)ePOSTFX_QUALITY.Low] = new int[] {  	256'  	64'  	32'  	32  };  
Magic Number,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,InitBase,The following statement contains a magic number: _BloomBlurWidth [(int)ePOSTFX_QUALITY.High] = new int[] {  	1024'  	512'  	256'  	128'  	128'  	128  };  
Magic Number,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,InitBase,The following statement contains a magic number: _BloomBlurWidth [(int)ePOSTFX_QUALITY.High] = new int[] {  	1024'  	512'  	256'  	128'  	128'  	128  };  
Magic Number,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,InitBase,The following statement contains a magic number: _BloomBlurWidth [(int)ePOSTFX_QUALITY.High] = new int[] {  	1024'  	512'  	256'  	128'  	128'  	128  };  
Magic Number,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,InitBase,The following statement contains a magic number: _BloomBlurWidth [(int)ePOSTFX_QUALITY.High] = new int[] {  	1024'  	512'  	256'  	128'  	128'  	128  };  
Magic Number,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,InitBase,The following statement contains a magic number: _BloomBlurWidth [(int)ePOSTFX_QUALITY.High] = new int[] {  	1024'  	512'  	256'  	128'  	128'  	128  };  
Magic Number,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,InitBase,The following statement contains a magic number: _BloomBlurWidth [(int)ePOSTFX_QUALITY.High] = new int[] {  	1024'  	512'  	256'  	128'  	128'  	128  };  
Magic Number,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,InitBase,The following statement contains a magic number: _BloomBlurHeight [(int)ePOSTFX_QUALITY.High] = new int[] {  	512'  	256'  	128'  	64'  	64'  	64  };  
Magic Number,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,InitBase,The following statement contains a magic number: _BloomBlurHeight [(int)ePOSTFX_QUALITY.High] = new int[] {  	512'  	256'  	128'  	64'  	64'  	64  };  
Magic Number,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,InitBase,The following statement contains a magic number: _BloomBlurHeight [(int)ePOSTFX_QUALITY.High] = new int[] {  	512'  	256'  	128'  	64'  	64'  	64  };  
Magic Number,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,InitBase,The following statement contains a magic number: _BloomBlurHeight [(int)ePOSTFX_QUALITY.High] = new int[] {  	512'  	256'  	128'  	64'  	64'  	64  };  
Magic Number,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,InitBase,The following statement contains a magic number: _BloomBlurHeight [(int)ePOSTFX_QUALITY.High] = new int[] {  	512'  	256'  	128'  	64'  	64'  	64  };  
Magic Number,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,InitBase,The following statement contains a magic number: _BloomBlurHeight [(int)ePOSTFX_QUALITY.High] = new int[] {  	512'  	256'  	128'  	64'  	64'  	64  };  
Magic Number,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,Bloom,The following statement contains a magic number: for (int i = 2; i < bloomBlurTextureCount; i += 2) {  	GaussianBlur (POSTFX_GAUSSIAN_BLUR_DIRECTION.VERTICAL' POSTFX_GUASSIAN_BLUR_MODE.TAP_7' _BloomBlurTextures [i - 1]' _BloomBlurTextures [i]' _BloomBlurSigma);  	#if !USE_GET_TEMPORARY  	_BloomBlurTextures [i - 1].DiscardContents ();  	#endif  	GaussianBlur (POSTFX_GAUSSIAN_BLUR_DIRECTION.HORIZONTAL' POSTFX_GUASSIAN_BLUR_MODE.TAP_7' _BloomBlurTextures [i]' _BloomBlurTextures [i + 1]' _BloomBlurSigma);  	#if !USE_GET_TEMPORARY  	_BloomBlurTextures [i].DiscardContents ();  	#endif  }  
Magic Number,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,Bloom,The following statement contains a magic number: for (int i = 2; i < bloomBlurTextureCount; i += 2) {  	GaussianBlur (POSTFX_GAUSSIAN_BLUR_DIRECTION.VERTICAL' POSTFX_GUASSIAN_BLUR_MODE.TAP_7' _BloomBlurTextures [i - 1]' _BloomBlurTextures [i]' _BloomBlurSigma);  	#if !USE_GET_TEMPORARY  	_BloomBlurTextures [i - 1].DiscardContents ();  	#endif  	GaussianBlur (POSTFX_GAUSSIAN_BLUR_DIRECTION.HORIZONTAL' POSTFX_GUASSIAN_BLUR_MODE.TAP_7' _BloomBlurTextures [i]' _BloomBlurTextures [i + 1]' _BloomBlurSigma);  	#if !USE_GET_TEMPORARY  	_BloomBlurTextures [i].DiscardContents ();  	#endif  }  
Magic Number,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,Bloom,The following statement contains a magic number: i += 2
Magic Number,EB.Rendering,PostFXManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\PostFX\Scripts\PostFXManager.cs,InitWarp,The following statement contains a magic number: _WarpRenderTexture = new RenderTexture (_WarpRenderTextureWidth [(int)Quality]' _WarpRenderTextureHeight [(int)Quality]' 24' _WarpRenderTextureFormat);  
Magic Number,EB.Rendering,GenericTrailRendererInstance,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\GenericTrailRendererInstance.cs,SetupSimTrail,The following statement contains a magic number: if (trailRenderer == null) {  	trailRenderer = new TrailRenderer (1000' simObject);  	UpdateValues ();  	trailRenderer._TrailTime = _TrailTime;  	trailRenderer.SetupTrail (time);  }  
Magic Number,EB.Rendering,GenericTrailRendererInstance,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\GenericTrailRendererInstance.cs,SetupSimTrail,The following statement contains a magic number: trailRenderer = new TrailRenderer (1000' simObject);  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,TrailRenderer,The following statement contains a magic number: _HermiteBasis = new Vector4[4];  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,TrailRenderer,The following statement contains a magic number: _HermiteBasis [0] = new Vector4 (2' -3' 0' 1);  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,TrailRenderer,The following statement contains a magic number: _HermiteBasis [0] = new Vector4 (2' -3' 0' 1);  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,TrailRenderer,The following statement contains a magic number: _HermiteBasis [1] = new Vector4 (-2' 3' 0' 0);  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,TrailRenderer,The following statement contains a magic number: _HermiteBasis [1] = new Vector4 (-2' 3' 0' 0);  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,TrailRenderer,The following statement contains a magic number: _HermiteBasis [2] = new Vector4 (1' -2' 1' 0);  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,TrailRenderer,The following statement contains a magic number: _HermiteBasis [2] = new Vector4 (1' -2' 1' 0);  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,TrailRenderer,The following statement contains a magic number: _HermiteBasis [3] = new Vector4 (1' -1' 0' 0);  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateSections,The following statement contains a magic number: if (_SegmentPositionTopBuffer.Count == 0 || _SegmentPositionBottomBuffer.Count == 0) {  	if (_IgnoreZ) {  		avgZ = (currentBottomPosition.z + currentTopPosition.z) / 2;  		currentBottomPosition = new Vector3 (currentBottomPosition.x' currentBottomPosition.y' avgZ);  		currentTopPosition = new Vector3 (currentTopPosition.x' currentTopPosition.y' avgZ);  	}  	_LastAddedBottomPoint = currentBottomPosition;  	_LastAddedTopPoint = currentTopPosition;  	InsertPoints (currentTopPosition' currentBottomPosition' time);  	return;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateSections,The following statement contains a magic number: if (_IgnoreZ) {  	avgZ = (currentBottomPosition.z + currentTopPosition.z) / 2;  	currentBottomPosition = new Vector3 (currentBottomPosition.x' currentBottomPosition.y' avgZ);  	currentTopPosition = new Vector3 (currentTopPosition.x' currentTopPosition.y' avgZ);  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateSections,The following statement contains a magic number: avgZ = (currentBottomPosition.z + currentTopPosition.z) / 2;  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: for (int i = 0; i < positionMax; ++i) {  	int segments = Mathf.Max (Mathf.FloorToInt (ratio * _SegmentSubsectionsBuffer [i])' 1);  	if ((segmentOffset + segments) * 6 > _MaxIndices) {  		//we are out of space  		break;  	}  	float segDist = 0.0f;  	switch (_Quality) {  	case eTRAIL_QUALITY.Low:  		UpdateLow (time' i' positionMax' segments' segmentOffset' total' lifeColor' ref totalDistance);  		break;  	case eTRAIL_QUALITY.Medium:  		UpdateMedium (time' i' positionMax' segments' segmentOffset' total' lifeColor' ref totalDistance);  		break;  	case eTRAIL_QUALITY.High:  		UpdateHigh (time' i' positionMax' segments' segmentOffset' total' lifeColor' ref totalDistance);  		break;  	}  	segmentOffset += segments;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: if ((segmentOffset + segments) * 6 > _MaxIndices) {  	//we are out of space  	break;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: for (int i = 0; i < segmentOffset - 1; ++i) {  	_indices [i * 6 + 0] = i * 2;  	_indices [i * 6 + 1] = i * 2 + 1;  	_indices [i * 6 + 2] = i * 2 + 2;  	_indices [i * 6 + 3] = i * 2 + 2;  	_indices [i * 6 + 4] = i * 2 + 1;  	_indices [i * 6 + 5] = i * 2 + 3;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: for (int i = 0; i < segmentOffset - 1; ++i) {  	_indices [i * 6 + 0] = i * 2;  	_indices [i * 6 + 1] = i * 2 + 1;  	_indices [i * 6 + 2] = i * 2 + 2;  	_indices [i * 6 + 3] = i * 2 + 2;  	_indices [i * 6 + 4] = i * 2 + 1;  	_indices [i * 6 + 5] = i * 2 + 3;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: for (int i = 0; i < segmentOffset - 1; ++i) {  	_indices [i * 6 + 0] = i * 2;  	_indices [i * 6 + 1] = i * 2 + 1;  	_indices [i * 6 + 2] = i * 2 + 2;  	_indices [i * 6 + 3] = i * 2 + 2;  	_indices [i * 6 + 4] = i * 2 + 1;  	_indices [i * 6 + 5] = i * 2 + 3;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: for (int i = 0; i < segmentOffset - 1; ++i) {  	_indices [i * 6 + 0] = i * 2;  	_indices [i * 6 + 1] = i * 2 + 1;  	_indices [i * 6 + 2] = i * 2 + 2;  	_indices [i * 6 + 3] = i * 2 + 2;  	_indices [i * 6 + 4] = i * 2 + 1;  	_indices [i * 6 + 5] = i * 2 + 3;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: for (int i = 0; i < segmentOffset - 1; ++i) {  	_indices [i * 6 + 0] = i * 2;  	_indices [i * 6 + 1] = i * 2 + 1;  	_indices [i * 6 + 2] = i * 2 + 2;  	_indices [i * 6 + 3] = i * 2 + 2;  	_indices [i * 6 + 4] = i * 2 + 1;  	_indices [i * 6 + 5] = i * 2 + 3;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: for (int i = 0; i < segmentOffset - 1; ++i) {  	_indices [i * 6 + 0] = i * 2;  	_indices [i * 6 + 1] = i * 2 + 1;  	_indices [i * 6 + 2] = i * 2 + 2;  	_indices [i * 6 + 3] = i * 2 + 2;  	_indices [i * 6 + 4] = i * 2 + 1;  	_indices [i * 6 + 5] = i * 2 + 3;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: for (int i = 0; i < segmentOffset - 1; ++i) {  	_indices [i * 6 + 0] = i * 2;  	_indices [i * 6 + 1] = i * 2 + 1;  	_indices [i * 6 + 2] = i * 2 + 2;  	_indices [i * 6 + 3] = i * 2 + 2;  	_indices [i * 6 + 4] = i * 2 + 1;  	_indices [i * 6 + 5] = i * 2 + 3;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: for (int i = 0; i < segmentOffset - 1; ++i) {  	_indices [i * 6 + 0] = i * 2;  	_indices [i * 6 + 1] = i * 2 + 1;  	_indices [i * 6 + 2] = i * 2 + 2;  	_indices [i * 6 + 3] = i * 2 + 2;  	_indices [i * 6 + 4] = i * 2 + 1;  	_indices [i * 6 + 5] = i * 2 + 3;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: for (int i = 0; i < segmentOffset - 1; ++i) {  	_indices [i * 6 + 0] = i * 2;  	_indices [i * 6 + 1] = i * 2 + 1;  	_indices [i * 6 + 2] = i * 2 + 2;  	_indices [i * 6 + 3] = i * 2 + 2;  	_indices [i * 6 + 4] = i * 2 + 1;  	_indices [i * 6 + 5] = i * 2 + 3;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: for (int i = 0; i < segmentOffset - 1; ++i) {  	_indices [i * 6 + 0] = i * 2;  	_indices [i * 6 + 1] = i * 2 + 1;  	_indices [i * 6 + 2] = i * 2 + 2;  	_indices [i * 6 + 3] = i * 2 + 2;  	_indices [i * 6 + 4] = i * 2 + 1;  	_indices [i * 6 + 5] = i * 2 + 3;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: for (int i = 0; i < segmentOffset - 1; ++i) {  	_indices [i * 6 + 0] = i * 2;  	_indices [i * 6 + 1] = i * 2 + 1;  	_indices [i * 6 + 2] = i * 2 + 2;  	_indices [i * 6 + 3] = i * 2 + 2;  	_indices [i * 6 + 4] = i * 2 + 1;  	_indices [i * 6 + 5] = i * 2 + 3;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: for (int i = 0; i < segmentOffset - 1; ++i) {  	_indices [i * 6 + 0] = i * 2;  	_indices [i * 6 + 1] = i * 2 + 1;  	_indices [i * 6 + 2] = i * 2 + 2;  	_indices [i * 6 + 3] = i * 2 + 2;  	_indices [i * 6 + 4] = i * 2 + 1;  	_indices [i * 6 + 5] = i * 2 + 3;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: for (int i = 0; i < segmentOffset - 1; ++i) {  	_indices [i * 6 + 0] = i * 2;  	_indices [i * 6 + 1] = i * 2 + 1;  	_indices [i * 6 + 2] = i * 2 + 2;  	_indices [i * 6 + 3] = i * 2 + 2;  	_indices [i * 6 + 4] = i * 2 + 1;  	_indices [i * 6 + 5] = i * 2 + 3;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: for (int i = 0; i < segmentOffset - 1; ++i) {  	_indices [i * 6 + 0] = i * 2;  	_indices [i * 6 + 1] = i * 2 + 1;  	_indices [i * 6 + 2] = i * 2 + 2;  	_indices [i * 6 + 3] = i * 2 + 2;  	_indices [i * 6 + 4] = i * 2 + 1;  	_indices [i * 6 + 5] = i * 2 + 3;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: for (int i = 0; i < segmentOffset - 1; ++i) {  	_indices [i * 6 + 0] = i * 2;  	_indices [i * 6 + 1] = i * 2 + 1;  	_indices [i * 6 + 2] = i * 2 + 2;  	_indices [i * 6 + 3] = i * 2 + 2;  	_indices [i * 6 + 4] = i * 2 + 1;  	_indices [i * 6 + 5] = i * 2 + 3;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: for (int i = 0; i < segmentOffset - 1; ++i) {  	_indices [i * 6 + 0] = i * 2;  	_indices [i * 6 + 1] = i * 2 + 1;  	_indices [i * 6 + 2] = i * 2 + 2;  	_indices [i * 6 + 3] = i * 2 + 2;  	_indices [i * 6 + 4] = i * 2 + 1;  	_indices [i * 6 + 5] = i * 2 + 3;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: for (int i = 0; i < segmentOffset - 1; ++i) {  	_indices [i * 6 + 0] = i * 2;  	_indices [i * 6 + 1] = i * 2 + 1;  	_indices [i * 6 + 2] = i * 2 + 2;  	_indices [i * 6 + 3] = i * 2 + 2;  	_indices [i * 6 + 4] = i * 2 + 1;  	_indices [i * 6 + 5] = i * 2 + 3;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: for (int i = 0; i < segmentOffset - 1; ++i) {  	_indices [i * 6 + 0] = i * 2;  	_indices [i * 6 + 1] = i * 2 + 1;  	_indices [i * 6 + 2] = i * 2 + 2;  	_indices [i * 6 + 3] = i * 2 + 2;  	_indices [i * 6 + 4] = i * 2 + 1;  	_indices [i * 6 + 5] = i * 2 + 3;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: for (int i = 0; i < segmentOffset - 1; ++i) {  	_indices [i * 6 + 0] = i * 2;  	_indices [i * 6 + 1] = i * 2 + 1;  	_indices [i * 6 + 2] = i * 2 + 2;  	_indices [i * 6 + 3] = i * 2 + 2;  	_indices [i * 6 + 4] = i * 2 + 1;  	_indices [i * 6 + 5] = i * 2 + 3;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: _indices [i * 6 + 0] = i * 2;  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: _indices [i * 6 + 0] = i * 2;  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: _indices [i * 6 + 1] = i * 2 + 1;  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: _indices [i * 6 + 1] = i * 2 + 1;  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: _indices [i * 6 + 2] = i * 2 + 2;  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: _indices [i * 6 + 2] = i * 2 + 2;  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: _indices [i * 6 + 2] = i * 2 + 2;  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: _indices [i * 6 + 2] = i * 2 + 2;  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: _indices [i * 6 + 3] = i * 2 + 2;  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: _indices [i * 6 + 3] = i * 2 + 2;  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: _indices [i * 6 + 3] = i * 2 + 2;  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: _indices [i * 6 + 3] = i * 2 + 2;  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: _indices [i * 6 + 4] = i * 2 + 1;  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: _indices [i * 6 + 4] = i * 2 + 1;  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: _indices [i * 6 + 4] = i * 2 + 1;  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: _indices [i * 6 + 5] = i * 2 + 3;  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: _indices [i * 6 + 5] = i * 2 + 3;  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: _indices [i * 6 + 5] = i * 2 + 3;  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: _indices [i * 6 + 5] = i * 2 + 3;  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: for (int i = Mathf.Max (segmentOffset - 1' 0); i < Mathf.Max (_LastSegmentOffset - 1' 0); ++i) {  	_indices [i * 6 + 0] = 0;  	_indices [i * 6 + 1] = 0;  	_indices [i * 6 + 2] = 0;  	_indices [i * 6 + 3] = 0;  	_indices [i * 6 + 4] = 0;  	_indices [i * 6 + 5] = 0;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: for (int i = Mathf.Max (segmentOffset - 1' 0); i < Mathf.Max (_LastSegmentOffset - 1' 0); ++i) {  	_indices [i * 6 + 0] = 0;  	_indices [i * 6 + 1] = 0;  	_indices [i * 6 + 2] = 0;  	_indices [i * 6 + 3] = 0;  	_indices [i * 6 + 4] = 0;  	_indices [i * 6 + 5] = 0;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: for (int i = Mathf.Max (segmentOffset - 1' 0); i < Mathf.Max (_LastSegmentOffset - 1' 0); ++i) {  	_indices [i * 6 + 0] = 0;  	_indices [i * 6 + 1] = 0;  	_indices [i * 6 + 2] = 0;  	_indices [i * 6 + 3] = 0;  	_indices [i * 6 + 4] = 0;  	_indices [i * 6 + 5] = 0;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: for (int i = Mathf.Max (segmentOffset - 1' 0); i < Mathf.Max (_LastSegmentOffset - 1' 0); ++i) {  	_indices [i * 6 + 0] = 0;  	_indices [i * 6 + 1] = 0;  	_indices [i * 6 + 2] = 0;  	_indices [i * 6 + 3] = 0;  	_indices [i * 6 + 4] = 0;  	_indices [i * 6 + 5] = 0;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: for (int i = Mathf.Max (segmentOffset - 1' 0); i < Mathf.Max (_LastSegmentOffset - 1' 0); ++i) {  	_indices [i * 6 + 0] = 0;  	_indices [i * 6 + 1] = 0;  	_indices [i * 6 + 2] = 0;  	_indices [i * 6 + 3] = 0;  	_indices [i * 6 + 4] = 0;  	_indices [i * 6 + 5] = 0;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: for (int i = Mathf.Max (segmentOffset - 1' 0); i < Mathf.Max (_LastSegmentOffset - 1' 0); ++i) {  	_indices [i * 6 + 0] = 0;  	_indices [i * 6 + 1] = 0;  	_indices [i * 6 + 2] = 0;  	_indices [i * 6 + 3] = 0;  	_indices [i * 6 + 4] = 0;  	_indices [i * 6 + 5] = 0;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: for (int i = Mathf.Max (segmentOffset - 1' 0); i < Mathf.Max (_LastSegmentOffset - 1' 0); ++i) {  	_indices [i * 6 + 0] = 0;  	_indices [i * 6 + 1] = 0;  	_indices [i * 6 + 2] = 0;  	_indices [i * 6 + 3] = 0;  	_indices [i * 6 + 4] = 0;  	_indices [i * 6 + 5] = 0;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: for (int i = Mathf.Max (segmentOffset - 1' 0); i < Mathf.Max (_LastSegmentOffset - 1' 0); ++i) {  	_indices [i * 6 + 0] = 0;  	_indices [i * 6 + 1] = 0;  	_indices [i * 6 + 2] = 0;  	_indices [i * 6 + 3] = 0;  	_indices [i * 6 + 4] = 0;  	_indices [i * 6 + 5] = 0;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: for (int i = Mathf.Max (segmentOffset - 1' 0); i < Mathf.Max (_LastSegmentOffset - 1' 0); ++i) {  	_indices [i * 6 + 0] = 0;  	_indices [i * 6 + 1] = 0;  	_indices [i * 6 + 2] = 0;  	_indices [i * 6 + 3] = 0;  	_indices [i * 6 + 4] = 0;  	_indices [i * 6 + 5] = 0;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: for (int i = Mathf.Max (segmentOffset - 1' 0); i < Mathf.Max (_LastSegmentOffset - 1' 0); ++i) {  	_indices [i * 6 + 0] = 0;  	_indices [i * 6 + 1] = 0;  	_indices [i * 6 + 2] = 0;  	_indices [i * 6 + 3] = 0;  	_indices [i * 6 + 4] = 0;  	_indices [i * 6 + 5] = 0;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: _indices [i * 6 + 0] = 0;  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: _indices [i * 6 + 1] = 0;  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: _indices [i * 6 + 2] = 0;  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: _indices [i * 6 + 2] = 0;  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: _indices [i * 6 + 3] = 0;  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: _indices [i * 6 + 3] = 0;  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: _indices [i * 6 + 4] = 0;  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: _indices [i * 6 + 4] = 0;  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: _indices [i * 6 + 5] = 0;  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following statement contains a magic number: _indices [i * 6 + 5] = 0;  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateHigh,The following statement contains a magic number: for (int j = 0; j < segments; ++j) {  	float t = ((float)j) / ((float)segments);  	//POSITION  	float timeAtSegment = Mathf.Lerp (time1' time2' t);  	int offset = (segmentOffset + j) * 2;  	float width = _WidthCurve.Evaluate (timeAtSegment);  	float halfWidth = width * 0.5f;  	Vector3 interpolatedp1 = InterpolateHermite (p1t1' p1t2' t_p1t1' t_p1t2' t);  	// interpolate the top point  	Vector3 interpolatedp2 = InterpolateHermite (p2t1' p2t2' t_p2t1' t_p2t2' t);  	// interpolate the bottom point  	//here’s where we “combine” the top and bottom' to get our direction and midpoint  	Vector3 mid = (interpolatedp1 + interpolatedp2) / 2.0f;  	//midpoint  	Vector3 dir = interpolatedp1 - interpolatedp2;  	//direction between interpolated points  	//“push” the vertices by the direction around the midpoint  	_vertices [offset + 0] = mid + dir * halfWidth;  	_vertices [offset + 1] = mid - dir * halfWidth;  	// UVS  	Vector3 midpoint = GetPlaneMidpoint (p1t1' p1t2' p2t1' p2t2);  	float p1t1_p2t2_distance = Vector3.Distance (p2t2' p1t1);  	float mid_p2t2_distance = Vector3.Distance (p2t2' midpoint);  	float p1t2_p2t1_distance = Vector3.Distance (p1t2' p2t1);  	float mid_p1t2_distance = Vector3.Distance (p1t2' midpoint);  	float currentDistance = totalDistance + t * segDist;  	float uvOffsetU = currentDistance / _TextureRepeat + _TextureMoveTimer;  	float uvOffsetV1 = 0;  	float uvOffsetV2 = 1;  	if (_TextureYSplit != 0) {  		uvOffsetV1 = ((float)_TextureYCount - 1.0f) / (float)_TextureYSplit;  		uvOffsetV2 = (float)_TextureYCount / (float)_TextureYSplit;  	}  	float perspectiveCorrection0 = p1t1_p2t2_distance / mid_p2t2_distance;  	float perspectiveCorrection1 = p1t2_p2t1_distance / mid_p1t2_distance;  	_uvs [offset + 0] = new Vector3 (uvOffsetU * perspectiveCorrection0' uvOffsetV1' perspectiveCorrection0);  	_uvs [offset + 1] = new Vector3 (uvOffsetU * perspectiveCorrection1' uvOffsetV2' perspectiveCorrection1);  	//COLOR  	Color color;  	float _t = ((float)j + (float)segmentOffset + 1) / (float)total;  	if (_SpanOverTrail) {  		if ((float)j + (float)segmentOffset == 0) {  			_t = 0;  		}  		color = _ColorGradient.Evaluate (_t);  	}  	else {  		color = _ColorGradient.Evaluate (timeAtSegment);  	}  	if (_AddColor) {  		color.r += lifeColor.r;  		color.g += lifeColor.g;  		color.b += lifeColor.b;  		color.a *= lifeColor.a;  	}  	else {  		color.a *= lifeColor.a;  	}  	_colors [offset + 0] = color;  	_colors [offset + 1] = color;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMedium,The following statement contains a magic number: for (int j = 0; j < segments; ++j) {  	float t = ((float)j) / ((float)segments);  	//POSITION  	float timeAtSegment = Mathf.Lerp (time1' time2' t);  	int offset = (segmentOffset + j) * 2;  	float width = _WidthCurve.Evaluate (timeAtSegment);  	float halfWidth = width * 0.5f;  	Vector3 interpolatedp1 = InterpolateHermite (p1t1' p1t2' t_p1t1' t_p1t2' t);  	// interpolate the top point  	Vector3 interpolatedp2 = InterpolateHermite (p2t1' p2t2' t_p2t1' t_p2t2' t);  	// interpolate the bottom point  	//here’s where we “combine” the top and bottom' to get our direction and midpoint  	Vector3 mid = (interpolatedp1 + interpolatedp2) / 2.0f;  	//midpoint  	Vector3 dir = interpolatedp1 - interpolatedp2;  	//direction between interpolated points  	//“push” the vertices by the direction around the midpoint  	_vertices [offset + 0] = mid + dir * halfWidth;  	_vertices [offset + 1] = mid - dir * halfWidth;  	// UVS  	float currentDistance = totalDistance * segDist;  	float uvOffsetU = currentDistance / _TextureRepeat + _TextureMoveTimer;  	float uvOffsetV1 = 0;  	float uvOffsetV2 = 1;  	if (_TextureYSplit != 0) {  		uvOffsetV1 = ((float)_TextureYCount - 1.0f) / (float)_TextureYSplit;  		uvOffsetV2 = (float)_TextureYCount / (float)_TextureYSplit;  	}  	_uvs [offset + 0] = new Vector3 (uvOffsetU' uvOffsetV1' 1);  	_uvs [offset + 1] = new Vector3 (uvOffsetU' uvOffsetV2' 1);  	//COLOR  	Color color;  	float _t = ((float)j + (float)segmentOffset + 1) / (float)total;  	if (_SpanOverTrail) {  		if ((float)j + (float)segmentOffset == 0) {  			_t = 0;  		}  		color = _ColorGradient.Evaluate (_t);  	}  	else {  		color = _ColorGradient.Evaluate (timeAtSegment);  	}  	if (_AddColor) {  		color.r += lifeColor.r;  		color.g += lifeColor.g;  		color.b += lifeColor.b;  		color.a *= lifeColor.a;  	}  	else {  		color.a *= lifeColor.a;  	}  	_colors [offset + 0] = color;  	_colors [offset + 1] = color;  }  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,InterpolateHermite,The following statement contains a magic number: return p1 * Vector4.Dot (s' _HermiteBasis [0]) + p2 * Vector4.Dot (s' _HermiteBasis [1]) + t1 * Vector4.Dot (s' _HermiteBasis [2]) + t2 * Vector4.Dot (s' _HermiteBasis [3]);  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,InterpolateHermite,The following statement contains a magic number: return p1 * Vector4.Dot (s' _HermiteBasis [0]) + p2 * Vector4.Dot (s' _HermiteBasis [1]) + t1 * Vector4.Dot (s' _HermiteBasis [2]) + t2 * Vector4.Dot (s' _HermiteBasis [3]);  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,GetPlaneMidpoint,The following statement contains a magic number: top.SetColumn (2' new Vector4 (1' x3.x' x3.y' x3.z));  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,GetPlaneMidpoint,The following statement contains a magic number: top.SetColumn (3' new Vector4 (1' x4.x' x4.y' x4.z));  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,GetPlaneMidpoint,The following statement contains a magic number: bottom.SetColumn (2' new Vector4 (1' x3.x' x3.y' x3.z));  
Magic Number,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,GetPlaneMidpoint,The following statement contains a magic number: bottom.SetColumn (3' new Vector4 (0' x5.x - x4.x' x5.y - x4.y' x5.z - x4.z));  
Magic Number,Kabam.SimpleJSON,JSONNode,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\KabamSODA\KabamSimpleJSON.cs,Parse,The following statement contains a magic number: while (i < aJSON.Length) {  	switch (aJSON [i]) {  	case '{':  		if (QuoteMode) {  			Token += aJSON [i];  			break;  		}  		stack.Push (new JSONClass ());  		if (ctx != null) {  			TokenName = TokenName.Trim ();  			if (ctx is JSONArray)  				ctx.Add (stack.Peek ());  			else if (TokenName != "")  				ctx.Add (TokenName' stack.Peek ());  		}  		TokenName = "";  		Token = "";  		ctx = stack.Peek ();  		break;  	case '[':  		if (QuoteMode) {  			Token += aJSON [i];  			break;  		}  		stack.Push (new JSONArray ());  		if (ctx != null) {  			TokenName = TokenName.Trim ();  			if (ctx is JSONArray)  				ctx.Add (stack.Peek ());  			else if (TokenName != "")  				ctx.Add (TokenName' stack.Peek ());  		}  		TokenName = "";  		Token = "";  		ctx = stack.Peek ();  		break;  	case '}':  	case ']':  		if (QuoteMode) {  			Token += aJSON [i];  			break;  		}  		if (stack.Count == 0)  			throw new Exception ("JSON Parse: Too many closing brackets");  		stack.Pop ();  		if (Token != "") {  			TokenName = TokenName.Trim ();  			if (ctx is JSONArray)  				ctx.Add (Token);  			else if (TokenName != "")  				ctx.Add (TokenName' Token);  		}  		TokenName = "";  		Token = "";  		if (stack.Count > 0)  			ctx = stack.Peek ();  		break;  	case ':':  		if (QuoteMode) {  			Token += aJSON [i];  			break;  		}  		TokenName = Token;  		Token = "";  		break;  	case '"':  		QuoteMode ^= true;  		break;  	case ''':  		if (QuoteMode) {  			Token += aJSON [i];  			break;  		}  		if (Token != "") {  			if (ctx is JSONArray)  				ctx.Add (Token);  			else if (TokenName != "")  				ctx.Add (TokenName' Token);  		}  		TokenName = "";  		Token = "";  		break;  	case '\r':  	case '\n':  		break;  	case ' ':  	case '\t':  		if (QuoteMode)  			Token += aJSON [i];  		break;  	case '\\':  		++i;  		if (QuoteMode) {  			char C = aJSON [i];  			switch (C) {  			case 't':  				Token += '\t';  				break;  			case 'r':  				Token += '\r';  				break;  			case 'n':  				Token += '\n';  				break;  			case 'b':  				Token += '\b';  				break;  			case 'f':  				Token += '\f';  				break;  			case 'u': {  				string s = aJSON.Substring (i + 1' 4);  				Token += (char)int.Parse (s' System.Globalization.NumberStyles.AllowHexSpecifier);  				i += 4;  				break;  			}  			default:  				Token += C;  				break;  			}  		}  		break;  	default:  		Token += aJSON [i];  		break;  	}  	++i;  }  
Magic Number,Kabam.SimpleJSON,JSONNode,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\KabamSODA\KabamSimpleJSON.cs,Parse,The following statement contains a magic number: while (i < aJSON.Length) {  	switch (aJSON [i]) {  	case '{':  		if (QuoteMode) {  			Token += aJSON [i];  			break;  		}  		stack.Push (new JSONClass ());  		if (ctx != null) {  			TokenName = TokenName.Trim ();  			if (ctx is JSONArray)  				ctx.Add (stack.Peek ());  			else if (TokenName != "")  				ctx.Add (TokenName' stack.Peek ());  		}  		TokenName = "";  		Token = "";  		ctx = stack.Peek ();  		break;  	case '[':  		if (QuoteMode) {  			Token += aJSON [i];  			break;  		}  		stack.Push (new JSONArray ());  		if (ctx != null) {  			TokenName = TokenName.Trim ();  			if (ctx is JSONArray)  				ctx.Add (stack.Peek ());  			else if (TokenName != "")  				ctx.Add (TokenName' stack.Peek ());  		}  		TokenName = "";  		Token = "";  		ctx = stack.Peek ();  		break;  	case '}':  	case ']':  		if (QuoteMode) {  			Token += aJSON [i];  			break;  		}  		if (stack.Count == 0)  			throw new Exception ("JSON Parse: Too many closing brackets");  		stack.Pop ();  		if (Token != "") {  			TokenName = TokenName.Trim ();  			if (ctx is JSONArray)  				ctx.Add (Token);  			else if (TokenName != "")  				ctx.Add (TokenName' Token);  		}  		TokenName = "";  		Token = "";  		if (stack.Count > 0)  			ctx = stack.Peek ();  		break;  	case ':':  		if (QuoteMode) {  			Token += aJSON [i];  			break;  		}  		TokenName = Token;  		Token = "";  		break;  	case '"':  		QuoteMode ^= true;  		break;  	case ''':  		if (QuoteMode) {  			Token += aJSON [i];  			break;  		}  		if (Token != "") {  			if (ctx is JSONArray)  				ctx.Add (Token);  			else if (TokenName != "")  				ctx.Add (TokenName' Token);  		}  		TokenName = "";  		Token = "";  		break;  	case '\r':  	case '\n':  		break;  	case ' ':  	case '\t':  		if (QuoteMode)  			Token += aJSON [i];  		break;  	case '\\':  		++i;  		if (QuoteMode) {  			char C = aJSON [i];  			switch (C) {  			case 't':  				Token += '\t';  				break;  			case 'r':  				Token += '\r';  				break;  			case 'n':  				Token += '\n';  				break;  			case 'b':  				Token += '\b';  				break;  			case 'f':  				Token += '\f';  				break;  			case 'u': {  				string s = aJSON.Substring (i + 1' 4);  				Token += (char)int.Parse (s' System.Globalization.NumberStyles.AllowHexSpecifier);  				i += 4;  				break;  			}  			default:  				Token += C;  				break;  			}  		}  		break;  	default:  		Token += aJSON [i];  		break;  	}  	++i;  }  
Magic Number,Kabam.SimpleJSON,JSONNode,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\KabamSODA\KabamSimpleJSON.cs,Parse,The following statement contains a magic number: switch (aJSON [i]) {  case '{':  	if (QuoteMode) {  		Token += aJSON [i];  		break;  	}  	stack.Push (new JSONClass ());  	if (ctx != null) {  		TokenName = TokenName.Trim ();  		if (ctx is JSONArray)  			ctx.Add (stack.Peek ());  		else if (TokenName != "")  			ctx.Add (TokenName' stack.Peek ());  	}  	TokenName = "";  	Token = "";  	ctx = stack.Peek ();  	break;  case '[':  	if (QuoteMode) {  		Token += aJSON [i];  		break;  	}  	stack.Push (new JSONArray ());  	if (ctx != null) {  		TokenName = TokenName.Trim ();  		if (ctx is JSONArray)  			ctx.Add (stack.Peek ());  		else if (TokenName != "")  			ctx.Add (TokenName' stack.Peek ());  	}  	TokenName = "";  	Token = "";  	ctx = stack.Peek ();  	break;  case '}':  case ']':  	if (QuoteMode) {  		Token += aJSON [i];  		break;  	}  	if (stack.Count == 0)  		throw new Exception ("JSON Parse: Too many closing brackets");  	stack.Pop ();  	if (Token != "") {  		TokenName = TokenName.Trim ();  		if (ctx is JSONArray)  			ctx.Add (Token);  		else if (TokenName != "")  			ctx.Add (TokenName' Token);  	}  	TokenName = "";  	Token = "";  	if (stack.Count > 0)  		ctx = stack.Peek ();  	break;  case ':':  	if (QuoteMode) {  		Token += aJSON [i];  		break;  	}  	TokenName = Token;  	Token = "";  	break;  case '"':  	QuoteMode ^= true;  	break;  case ''':  	if (QuoteMode) {  		Token += aJSON [i];  		break;  	}  	if (Token != "") {  		if (ctx is JSONArray)  			ctx.Add (Token);  		else if (TokenName != "")  			ctx.Add (TokenName' Token);  	}  	TokenName = "";  	Token = "";  	break;  case '\r':  case '\n':  	break;  case ' ':  case '\t':  	if (QuoteMode)  		Token += aJSON [i];  	break;  case '\\':  	++i;  	if (QuoteMode) {  		char C = aJSON [i];  		switch (C) {  		case 't':  			Token += '\t';  			break;  		case 'r':  			Token += '\r';  			break;  		case 'n':  			Token += '\n';  			break;  		case 'b':  			Token += '\b';  			break;  		case 'f':  			Token += '\f';  			break;  		case 'u': {  			string s = aJSON.Substring (i + 1' 4);  			Token += (char)int.Parse (s' System.Globalization.NumberStyles.AllowHexSpecifier);  			i += 4;  			break;  		}  		default:  			Token += C;  			break;  		}  	}  	break;  default:  	Token += aJSON [i];  	break;  }  
Magic Number,Kabam.SimpleJSON,JSONNode,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\KabamSODA\KabamSimpleJSON.cs,Parse,The following statement contains a magic number: switch (aJSON [i]) {  case '{':  	if (QuoteMode) {  		Token += aJSON [i];  		break;  	}  	stack.Push (new JSONClass ());  	if (ctx != null) {  		TokenName = TokenName.Trim ();  		if (ctx is JSONArray)  			ctx.Add (stack.Peek ());  		else if (TokenName != "")  			ctx.Add (TokenName' stack.Peek ());  	}  	TokenName = "";  	Token = "";  	ctx = stack.Peek ();  	break;  case '[':  	if (QuoteMode) {  		Token += aJSON [i];  		break;  	}  	stack.Push (new JSONArray ());  	if (ctx != null) {  		TokenName = TokenName.Trim ();  		if (ctx is JSONArray)  			ctx.Add (stack.Peek ());  		else if (TokenName != "")  			ctx.Add (TokenName' stack.Peek ());  	}  	TokenName = "";  	Token = "";  	ctx = stack.Peek ();  	break;  case '}':  case ']':  	if (QuoteMode) {  		Token += aJSON [i];  		break;  	}  	if (stack.Count == 0)  		throw new Exception ("JSON Parse: Too many closing brackets");  	stack.Pop ();  	if (Token != "") {  		TokenName = TokenName.Trim ();  		if (ctx is JSONArray)  			ctx.Add (Token);  		else if (TokenName != "")  			ctx.Add (TokenName' Token);  	}  	TokenName = "";  	Token = "";  	if (stack.Count > 0)  		ctx = stack.Peek ();  	break;  case ':':  	if (QuoteMode) {  		Token += aJSON [i];  		break;  	}  	TokenName = Token;  	Token = "";  	break;  case '"':  	QuoteMode ^= true;  	break;  case ''':  	if (QuoteMode) {  		Token += aJSON [i];  		break;  	}  	if (Token != "") {  		if (ctx is JSONArray)  			ctx.Add (Token);  		else if (TokenName != "")  			ctx.Add (TokenName' Token);  	}  	TokenName = "";  	Token = "";  	break;  case '\r':  case '\n':  	break;  case ' ':  case '\t':  	if (QuoteMode)  		Token += aJSON [i];  	break;  case '\\':  	++i;  	if (QuoteMode) {  		char C = aJSON [i];  		switch (C) {  		case 't':  			Token += '\t';  			break;  		case 'r':  			Token += '\r';  			break;  		case 'n':  			Token += '\n';  			break;  		case 'b':  			Token += '\b';  			break;  		case 'f':  			Token += '\f';  			break;  		case 'u': {  			string s = aJSON.Substring (i + 1' 4);  			Token += (char)int.Parse (s' System.Globalization.NumberStyles.AllowHexSpecifier);  			i += 4;  			break;  		}  		default:  			Token += C;  			break;  		}  	}  	break;  default:  	Token += aJSON [i];  	break;  }  
Magic Number,Kabam.SimpleJSON,JSONNode,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\KabamSODA\KabamSimpleJSON.cs,Parse,The following statement contains a magic number: if (QuoteMode) {  	char C = aJSON [i];  	switch (C) {  	case 't':  		Token += '\t';  		break;  	case 'r':  		Token += '\r';  		break;  	case 'n':  		Token += '\n';  		break;  	case 'b':  		Token += '\b';  		break;  	case 'f':  		Token += '\f';  		break;  	case 'u': {  		string s = aJSON.Substring (i + 1' 4);  		Token += (char)int.Parse (s' System.Globalization.NumberStyles.AllowHexSpecifier);  		i += 4;  		break;  	}  	default:  		Token += C;  		break;  	}  }  
Magic Number,Kabam.SimpleJSON,JSONNode,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\KabamSODA\KabamSimpleJSON.cs,Parse,The following statement contains a magic number: if (QuoteMode) {  	char C = aJSON [i];  	switch (C) {  	case 't':  		Token += '\t';  		break;  	case 'r':  		Token += '\r';  		break;  	case 'n':  		Token += '\n';  		break;  	case 'b':  		Token += '\b';  		break;  	case 'f':  		Token += '\f';  		break;  	case 'u': {  		string s = aJSON.Substring (i + 1' 4);  		Token += (char)int.Parse (s' System.Globalization.NumberStyles.AllowHexSpecifier);  		i += 4;  		break;  	}  	default:  		Token += C;  		break;  	}  }  
Magic Number,Kabam.SimpleJSON,JSONNode,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\KabamSODA\KabamSimpleJSON.cs,Parse,The following statement contains a magic number: switch (C) {  case 't':  	Token += '\t';  	break;  case 'r':  	Token += '\r';  	break;  case 'n':  	Token += '\n';  	break;  case 'b':  	Token += '\b';  	break;  case 'f':  	Token += '\f';  	break;  case 'u': {  	string s = aJSON.Substring (i + 1' 4);  	Token += (char)int.Parse (s' System.Globalization.NumberStyles.AllowHexSpecifier);  	i += 4;  	break;  }  default:  	Token += C;  	break;  }  
Magic Number,Kabam.SimpleJSON,JSONNode,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\KabamSODA\KabamSimpleJSON.cs,Parse,The following statement contains a magic number: switch (C) {  case 't':  	Token += '\t';  	break;  case 'r':  	Token += '\r';  	break;  case 'n':  	Token += '\n';  	break;  case 'b':  	Token += '\b';  	break;  case 'f':  	Token += '\f';  	break;  case 'u': {  	string s = aJSON.Substring (i + 1' 4);  	Token += (char)int.Parse (s' System.Globalization.NumberStyles.AllowHexSpecifier);  	i += 4;  	break;  }  default:  	Token += C;  	break;  }  
Magic Number,Kabam.SimpleJSON,JSONNode,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\KabamSODA\KabamSimpleJSON.cs,Parse,The following statement contains a magic number: i += 4;  
Magic Number,Kabam.SimpleJSON,JSONArray,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\KabamSODA\KabamSimpleJSON.cs,ToString,The following statement contains a magic number: foreach (JSONNode N in m_List) {  	if (result.Length > 2)  		result += "' ";  	result += N.ToString ();  }  
Magic Number,Kabam.SimpleJSON,JSONArray,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\KabamSODA\KabamSimpleJSON.cs,ToString,The following statement contains a magic number: if (result.Length > 2)  	result += "' ";  
Magic Number,Kabam.SimpleJSON,JSONArray,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\KabamSODA\KabamSimpleJSON.cs,ToString,The following statement contains a magic number: foreach (JSONNode N in m_List) {  	if (result.Length > 3)  		result += "' ";  	result += "\n" + aPrefix + "   ";  	result += N.ToString (aPrefix + "   ");  }  
Magic Number,Kabam.SimpleJSON,JSONArray,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\KabamSODA\KabamSimpleJSON.cs,ToString,The following statement contains a magic number: if (result.Length > 3)  	result += "' ";  
Magic Number,Kabam.SimpleJSON,JSONClass,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\KabamSODA\KabamSimpleJSON.cs,ToString,The following statement contains a magic number: foreach (KeyValuePair<string' JSONNode> N in m_Dict) {  	if (result.Length > 2)  		result += "' ";  	result += "\"" + Escape (N.Key) + "\":" + N.Value.ToString ();  }  
Magic Number,Kabam.SimpleJSON,JSONClass,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\KabamSODA\KabamSimpleJSON.cs,ToString,The following statement contains a magic number: if (result.Length > 2)  	result += "' ";  
Magic Number,Kabam.SimpleJSON,JSONClass,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\KabamSODA\KabamSimpleJSON.cs,ToString,The following statement contains a magic number: foreach (KeyValuePair<string' JSONNode> N in m_Dict) {  	if (result.Length > 3)  		result += "' ";  	result += "\n" + aPrefix + "   ";  	result += "\"" + Escape (N.Key) + "\" : " + N.Value.ToString (aPrefix + "   ");  }  
Magic Number,Kabam.SimpleJSON,JSONClass,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\KabamSODA\KabamSimpleJSON.cs,ToString,The following statement contains a magic number: if (result.Length > 3)  	result += "' ";  
Duplicate Code,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initQuantTables,The method contains a code clone-set at the following line numbers (starting from the method definition): ((107' 126)' (108' 127)' (109' 128)' (110' 129)' (111' 130)' (112' 131)' (113' 132)' (114' 133)' (115' 134)' (116' 135)' (117' 136)' (118' 137)' (119' 138)' (120' 139)' (121' 140)' (122' 141)' (123' 142)' (124' 143))
Duplicate Code,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initQuantTables,The method contains a code clone-set at the following line numbers (starting from the method definition): ((107' 142)' (108' 143))
Duplicate Code,EB,JPGEncoder,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJPGEncoder.cs,initQuantTables,The method contains a code clone-set at the following line numbers (starting from the method definition): ((107' 126)' (109' 128)' (110' 129)' (111' 130)' (112' 131)' (113' 132)' (114' 133)' (115' 134)' (116' 135)' (117' 136)' (118' 137)' (119' 138)' (120' 139)' (121' 140)' (122' 141)' (123' 142)' (124' 143))
Missing Default,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,parseValue,The following switch statement is missing a default case: switch (lookAhead (json' index)) {  case MiniJSON.TOKEN_STRING:  	return parseString (json' ref index);  case MiniJSON.TOKEN_NUMBER:  	return parseNumber (json' ref index);  case MiniJSON.TOKEN_CURLY_OPEN:  	return parseObject (json' ref index);  case MiniJSON.TOKEN_SQUARED_OPEN:  	return parseArray (json' ref index);  case MiniJSON.TOKEN_TRUE:  	nextToken (json' ref index);  	return Boolean.Parse ("TRUE");  case MiniJSON.TOKEN_FALSE:  	nextToken (json' ref index);  	return Boolean.Parse ("FALSE");  case MiniJSON.TOKEN_NULL:  	nextToken (json' ref index);  	return null;  case MiniJSON.TOKEN_NONE:  	break;  }  
Missing Default,AmazonCommon,MiniJSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\AmazonCommon\Source\MiniJSON\MiniJSON.cs,nextToken,The following switch statement is missing a default case: switch (c) {  case '{':  	return MiniJSON.TOKEN_CURLY_OPEN;  case '}':  	return MiniJSON.TOKEN_CURLY_CLOSE;  case '[':  	return MiniJSON.TOKEN_SQUARED_OPEN;  case ']':  	return MiniJSON.TOKEN_SQUARED_CLOSE;  case ''':  	return MiniJSON.TOKEN_COMMA;  case '"':  	return MiniJSON.TOKEN_STRING;  case '0':  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9':  case '-':  	return MiniJSON.TOKEN_NUMBER;  case ':':  	return MiniJSON.TOKEN_COLON;  }  
Missing Default,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseObject,The following switch statement is missing a default case: switch (token) {  case Token.None:  	return null;  }  
Missing Default,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,ParseValue,The following switch statement is missing a default case: switch (LookAhead (json' index)) {  case Token.String:  	return ParseString (json' ref index);  case Token.Number:  	return ParseNumber (json' ref index);  case Token.CurlyOpen:  	return ParseObject (json' ref index);  case Token.SquaredOpen:  	return ParseArray (json' ref index);  case Token.True:  	NextToken (json' ref index);  	return (object)true;  case Token.False:  	NextToken (json' ref index);  	return (object)false;  case Token.Null:  	NextToken (json' ref index);  	return null;  case Token.None:  	break;  }  
Missing Default,EB,JSON,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreJSON.cs,NextToken,The following switch statement is missing a default case: switch (c) {  case '{':  	return Token.CurlyOpen;  case '}':  	return Token.CurlyClose;  case '[':  	return Token.SquaredOpen;  case ']':  	return Token.SquaredClose;  case ''':  	return Token.Comma;  case '"':  	return Token.String;  case '0':  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9':  case '-':  	return Token.Number;  case ':':  	return Token.Colon;  }  
Missing Default,EB,Localizer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreLocalizer.cs,GetColor,The following switch statement is missing a default case: switch (status) {  case LocStatus.Translated:  	return Color.blue;  case LocStatus.Placeholder:  	return Color.yellow;  case LocStatus.For_Translation:  	return Color.yellow;  case LocStatus.Missing:  	return Color.red;  }  
Missing Default,EB,Uri,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Core\CoreUri.cs,GetDefaultPort,The following switch statement is missing a default case: switch (Protocol) {  case "http":  case "ws":  	return 80;  case "https":  case "wss":  	return 443;  case "ssh":  	return 22;  case "ftp":  	return 21;  }  
Missing Default,EB.Director,Utils,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Director\DirectorUtils.cs,ApplyVariable,The following switch statement is missing a default case: switch (type) {  case VariableType.Float:  	SetValue (field' instance' Mathf.Lerp (from.FloatValue' to.FloatValue' blend));  	break;  case VariableType.Vector2:  	SetValue (field' instance' Vector2.Lerp (from.Vector2Value' to.Vector2Value' blend));  	break;  case VariableType.Vector3:  	SetValue (field' instance' Vector3.Lerp (from.Vector3Value' to.Vector3Value' blend));  	break;  case VariableType.Vector4:  	SetValue (field' instance' Vector4.Lerp (from.Vector4Value' to.Vector4Value' blend));  	break;  case VariableType.Color:  	SetValue (field' instance' Color.Lerp (from.ColorValue' to.ColorValue' blend));  	break;  }  
Missing Default,EB.Director.Runtime,GroupInstance,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Director\Runtime\DirectorRuntime.cs,GroupInstance,The following switch statement is missing a default case: switch (track.type) {  case TrackType.Transform:  	{  		ti = new TransformTrackInstance ();  	}  	break;  case TrackType.FOV:  	{  		ti = new FOVTrackInstance ();  	}  	break;  case TrackType.CameraShake:  	{  		ti = new CameraShakeInstance ();  	}  	break;  case TrackType.OrthographicSize:  	{  		ti = new OrthographicSizeTrackInstance ();  	}  	break;  case TrackType.Director:  	{  		ti = new DirectorTrackInstance ();  	}  	break;  case TrackType.Event:  	{  		ti = new EventTrackInstance ();  	}  	break;  case TrackType.TimeScale:  	{  		ti = new TimeScaleTrackInstance ();  	}  	break;  case TrackType.EnableComponent:  	{  		ti = new EnableComponentTrackInstance ();  	}  	break;  case TrackType.Variable:  	{  		ti = new ComponentVariableTrackInstance ();  	}  	break;  }  
Missing Default,EB.Sparx,Hub,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Core\SparxHub.cs,OnLoginStateChanged,The following switch statement is missing a default case: switch (state) {  case LoginState.LoggedIn:  	{  		// start the subsystem connect  		SubSystemConnect ();  	}  	break;  }  
Missing Default,EB.Sparx,Hub,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Core\SparxHub.cs,SubSystemConnecting,The following switch statement is missing a default case: switch (system.State) {  case SubSystemState.Error: {  	FatalError (Localizer.GetString ("ID_SPARX_ERROR_UNKNOWN"));  	return;  }  case SubSystemState.Connecting:  case SubSystemState.Disconnected:  	{  		allConnected = false;  	}  	break;  case SubSystemState.Connected:  	{  	}  	break;  }  
Missing Default,EB.Sparx,Hub,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Core\SparxHub.cs,Update,The following switch statement is missing a default case: switch (State) {  case HubState.Connecting:  	{  		SubSystemConnecting ();  	}  	break;  }  
Missing Default,EB.Sparx,ChatManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxChatManager.cs,Async,The following switch statement is missing a default case: switch (message) {  case "token":  	{  		_OnChatUrl (null' payload);  	}  	break;  }  
Missing Default,EB.Sparx,InventoryManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxInventoryManager.cs,Async,The following switch statement is missing a default case: switch (message.ToLower ()) {  case "update":  	{  		ArrayList updates = payload as ArrayList;  		if (updates != null) {  			foreach (object update in updates) {  				OnUpdate (update);  			}  		}  		else {  			OnUpdate (payload);  		}  		_config.Listener.OnInventoryUpdated ();  	}  	break;  case "sync":  	{  		EB.Debug.Log ("recieved sync notification");  		Sync ();  	}  	break;  }  
Missing Default,EB.Sparx,LoginManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxLoginManager.cs,Async,The following switch statement is missing a default case: switch (message.ToLower ()) {  case "logout":  	{  		Debug.LogError ("Got forced logout from the server {0}"' payload);  		string error = "ID_SPARX_ERROR_UNKNOWN";  		if (payload != null) {  			var str = payload.ToString ();  			if (Localizer.HasString (str)) {  				error = str;  			}  		}  		FatalError (Localizer.GetString (error));  	}  	break;  }  
Missing Default,EB.Sparx,PaymentsManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxPaymentsManager.cs,Async,The following switch statement is missing a default case: switch (message.ToLower ()) {  case "offers":  case "payouts":  	{  		FetchPayouts ();  	}  	break;  }  
Missing Default,EB.Sparx,ResourcesManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxResourcesManager.cs,Async,The following switch statement is missing a default case: switch (message.ToLower ()) {  case "update":  	{  		ArrayList updates = payload as ArrayList;  		if (updates != null) {  			foreach (object update in updates) {  				OnUpdate (update);  			}  		}  		else {  			OnUpdate (payload);  		}  		if (OnResourceChange != null) {  			OnResourceChange (_status);  		}  	}  	break;  case "sync":  	{  		this._api.FetchStatus (OnFetch);  	}  	break;  }  
Missing Default,EB.Sparx,WalletManager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Managers\SparxWalletManager.cs,Async,The following switch statement is missing a default case: switch (message.ToLower ()) {  case "sync":  	{  		Fetch ();  	}  	break;  }  
Missing Default,EB.Sparx,Game,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\GameManager\SparxGame.cs,OnReceiveGameCommand,The following switch statement is missing a default case: switch (command) {  case "private":  	{  		_privateKey = data.ToString ();  	}  	break;  case "attributes":  	{  		if (data is Hashtable) {  			EB.Debug.Log ("Updating attributes");  			_attributes = new Hashtable ((Hashtable)data);  			if (_sentJoin) {  				_pars.Listener.OnAttributesUpdated (this);  			}  		}  	}  	break;  case "roster":  	{  		var list = (ArrayList)data;  		var players = new List<Player> ();  		var added = new List<Player> ();  		var removed = new List<Player> ();  		// see who has joined  		foreach (var p in list) {  			var tmp = new Player (p);  			var old = GetPlayer (tmp.PlayerId);  			if (old == null) {  				added.Add (tmp);  			}  			else {  				old.Update (p);  				tmp = old;  			}  			players.Add (tmp);  		}  		// see who has been removed  		var oldList = _players;  		_players = players;  		foreach (var player in oldList) {  			if (GetPlayer (player.PlayerId) == null) {  				removed.Add (player);  			}  		}  		for (int i = 0; i < _players.Count; ++i) {  			_players [i].Index = i;  		}  		if (_sentJoin) {  			foreach (var player in removed) {  				_pars.Listener.OnPlayerLeft (this' player);  			}  			foreach (var player in added) {  				_pars.Listener.OnPlayerJoined (this' player);  			}  		}  		else {  			_sentJoin = true;  			_local = GetPlayer (_pars.ConnId);  			_pars.Listener.OnJoinedGame (this);  		}  	}  	break;  case "start":  	{  		_sentEnd = false;  		_started = true;  		_pars.Listener.OnGameStarted (this);  	}  	break;  case "end":  	{  		_sentStart = false;  		_started = false;  		_pars.Listener.OnGameEnded (this);  	}  	break;  case "kick":  	{  		// we have been kicked  		_disconnectMessage = "ID_SPARX_ERROR_GAME_KICKED";  		this.Disconnect (false);  	}  	break;  }  
Missing Default,EB.Sparx,Game,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sparx\Structures\GameManager\SparxGame.cs,OnNetworkReceive,The following switch statement is missing a default case: switch (packet.Channel) {  case Channel.Manager_Reliable:  case Channel.Manager_Unreliable:  	{  		string message = packet.Utf8Data;  		object payload = null;  		var index = message.IndexOf (':');  		if (index > 0) {  			payload = JSON.Parse (message.Substring (index + 1));  			message = message.Substring (0' index);  		}  		OnReceiveGameCommand (playerId' message' payload);  	}  	break;  case Channel.Game_Reliable:  case Channel.Game_UnReliable:  	{  		var player = GetPlayer (playerId);  		_pars.Listener.OnReceive (this' player' packet);  	}  	break;  }  
Missing Default,EB.Replication,Manager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Replication\ReplicationManager.cs,RPC,The following switch statement is missing a default case: switch (mode) {  case RPCMode.All:  case RPCMode.AllBuffered:  	{  		var res = WriteRPC (Sparx.Network.BroadcastId' nextId' name' args);  		Receive (_localP' res.Clone ());  	}  	break;  case RPCMode.Others:  case RPCMode.OthersBuffered:  	{  		WriteRPC (Sparx.Network.BroadcastId' nextId' name' args);  	}  	break;  case RPCMode.Server:  	{  		if (_game != null) {  			var hostPlayer = _game.HostPlayer;  			if (hostPlayer.PlayerId == _localP) {  				CallRPC (_localP' nextId' name' args);  			}  			else {  				WriteRPC (hostPlayer.PlayerId' nextId' name' args);  			}  		}  	}  	break;  }  
Missing Default,EB.Replication,Manager,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Replication\ReplicationManager.cs,ViewRPC,The following switch statement is missing a default case: switch (mode) {  case RPCMode.All:  case RPCMode.AllBuffered:  	{  		var res = WriteViewRPC (Sparx.Network.BroadcastId' nextId' id' name' args);  		Receive (_localP' res.Clone ());  	}  	break;  case RPCMode.Others:  case RPCMode.OthersBuffered:  	{  		WriteViewRPC (Sparx.Network.BroadcastId' nextId' id' name' args);  	}  	break;  case RPCMode.Server:  	{  		if (_game != null) {  			var hostPlayer = _game.HostPlayer;  			if (hostPlayer.PlayerId == _localP) {  				CallViewRPC (_localP' nextId' name' id' args);  			}  			else {  				WriteViewRPC (hostPlayer.PlayerId' nextId' id' name' args);  			}  		}  	}  	break;  }  
Missing Default,EB.Sequence,Utils,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.Sequence\Utils\SequenceUtils.cs,ValidateLink,The following switch statement is missing a default case: switch (linkOut) {  case LinkType.Trigger:  	{  		if (ValidateTrigger (outNode' outName)) {  			if (linkIn == Utils.LinkType.Entry && ValidateEntry (inNode' inName)) {  				return ValidateLinkResult.Ok;  			}  		}  	}  	break;  case LinkType.Variable:  	{  		if (ValidateVariable (outNode' outName)) {  			if (linkIn == Utils.LinkType.Variable && ValidateVariable (inNode' inName)) {  				if (ValidateVariableTypes (outNode' outName' inNode' inName)) {  					return ValidateLinkResult.Ok;  				}  				else {  					EB.Debug.LogWarning ("Invalid Variable Type: " + inName);  					return ValidateLinkResult.InvalidType;  				}  			}  		}  	}  	break;  }  
Missing Default,EB.UI,BlockingMode,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.UI\BusyBlockers\BlockingMode.cs,Show,The following switch statement is missing a default case: switch (currentDisplayState) {  case DisplayState.Delaying:  case DisplayState.Hidden:  case DisplayState.AnimatingOut: {  	AnimateIn ();  	break;  }  case DisplayState.AnimatingIn:  case DisplayState.Showing: {  	return;  }  }  
Missing Default,EB.UI,BlockingMode,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse\EB.UI\BusyBlockers\BlockingMode.cs,Hide,The following switch statement is missing a default case: switch (currentDisplayState) {  case DisplayState.Delaying: {  	currentDisplayState = DisplayState.Hidden;  	break;  }  case DisplayState.Hidden:  case DisplayState.AnimatingOut: {  	return;  }  case DisplayState.AnimatingIn:  case DisplayState.Showing: {  	AnimateOut ();  	break;  }  }  
Missing Default,EB.Rendering,ShaderCompositor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\ShaderCompositor\ShaderCompositor.cs,Composite,The following switch statement is missing a default case: switch (property.type) {  case (ePROPERTY_TYPE.Color):  case (ePROPERTY_TYPE.Float):  case (ePROPERTY_TYPE.Vector):  	sw.Write (property.type.ToString ());  	break;  case (ePROPERTY_TYPE.Texture2D):  	sw.Write ("2D");  	break;  case (ePROPERTY_TYPE.TextureCube):  	sw.Write ("Cube");  	break;  }  
Missing Default,EB.Rendering,ShaderCompositor,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\ShaderCompositor\ShaderCompositor.cs,Composite,The following switch statement is missing a default case: switch (categoryBlock.ZTest) {  case (UnityEngine.Rendering.CompareFunction.Always):  case (UnityEngine.Rendering.CompareFunction.Equal):  case (UnityEngine.Rendering.CompareFunction.Greater):  case (UnityEngine.Rendering.CompareFunction.Less):  case (UnityEngine.Rendering.CompareFunction.Never):  case (UnityEngine.Rendering.CompareFunction.NotEqual):  	sw.WriteLine ("\t\tZTest " + categoryBlock.ZTest.ToString ());  	break;  case (UnityEngine.Rendering.CompareFunction.LessEqual):  	sw.WriteLine ("\t\tZTest LEqual");  	break;  case (UnityEngine.Rendering.CompareFunction.GreaterEqual):  	sw.WriteLine ("\t\tZTest GEqual");  	break;  case (UnityEngine.Rendering.CompareFunction.Disabled):  	sw.WriteLine ("\t\tZTest Always");  	break;  }  
Missing Default,EB.Rendering,TrailRenderer,C:\repos\ycchiu_Unity\FuseSparxDemo\Assets\Plugins\Fuse_Rendering\Trails\Scripts\TrailRenderer.cs,UpdateMesh,The following switch statement is missing a default case: switch (_Quality) {  case eTRAIL_QUALITY.Low:  	UpdateLow (time' i' positionMax' segments' segmentOffset' total' lifeColor' ref totalDistance);  	break;  case eTRAIL_QUALITY.Medium:  	UpdateMedium (time' i' positionMax' segments' segmentOffset' total' lifeColor' ref totalDistance);  	break;  case eTRAIL_QUALITY.High:  	UpdateHigh (time' i' positionMax' segments' segmentOffset' total' lifeColor' ref totalDistance);  	break;  }  
