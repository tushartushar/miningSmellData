Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ConsoleTCPIP,Program,C:\repos\Bilal-S_iis2tomcat\ConsoleTCPIP\Program.cs,ByteSearch,Cyclomatic complexity of the method is 8
Long Statement,ConsoleTCPIP,Program,C:\repos\Bilal-S_iis2tomcat\ConsoleTCPIP\Program.cs,Main,The length of the statement  "            byte[] sourceBytes = new byte[20] { 0x01' 0x02' 0x03' 0x04' 0x05' 0x06' 0x07' 0x08' 0x09' 0x0A' 0x01' 0x02' 0x03' 0x04' 0x05' 0x06' 0x07' 0x08' 0x09' 0x0A }; " is 157.
Long Statement,ConsoleTCPIP,Program,C:\repos\Bilal-S_iis2tomcat\ConsoleTCPIP\Program.cs,Main,The length of the statement  "                BonCodeAJP13Packet Packet = oIterate as BonCodeAJP13Packet; //only objects derived from this class should be in the collection " is 126.
Long Statement,ConsoleTCPIP,Program,C:\repos\Bilal-S_iis2tomcat\ConsoleTCPIP\Program.cs,ByteSearch,The length of the statement  "            if (searchIn.Length > 0 && searchBytes.Length > 0 && start <= (searchIn.Length - searchBytes.Length) && searchIn.Length >= searchBytes.Length) " is 142.
Complex Conditional,ConsoleTCPIP,Program,C:\repos\Bilal-S_iis2tomcat\ConsoleTCPIP\Program.cs,ByteSearch,The conditional expression  "searchIn.Length > 0 && searchBytes.Length > 0 && start <= (searchIn.Length - searchBytes.Length) && searchIn.Length >= searchBytes.Length"  is complex.
Magic Number,ConsoleTCPIP,Program,C:\repos\Bilal-S_iis2tomcat\ConsoleTCPIP\Program.cs,Main,The following statement contains a magic number: if (args.Length >= 2) {                  myServer = (string)args[1];              }
Magic Number,ConsoleTCPIP,Program,C:\repos\Bilal-S_iis2tomcat\ConsoleTCPIP\Program.cs,Main,The following statement contains a magic number: if (args.Length >= 3)              {                  myPort = (string)args[2];              }
Magic Number,ConsoleTCPIP,Program,C:\repos\Bilal-S_iis2tomcat\ConsoleTCPIP\Program.cs,Main,The following statement contains a magic number: if (args.Length >= 3)              {                  myPort = (string)args[2];              }
Magic Number,ConsoleTCPIP,Program,C:\repos\Bilal-S_iis2tomcat\ConsoleTCPIP\Program.cs,Main,The following statement contains a magic number: byte[] sourceBytes = new byte[20] { 0x01' 0x02' 0x03' 0x04' 0x05' 0x06' 0x07' 0x08' 0x09' 0x0A' 0x01' 0x02' 0x03' 0x04' 0x05' 0x06' 0x07' 0x08' 0x09' 0x0A };
Magic Number,ConsoleTCPIP,Program,C:\repos\Bilal-S_iis2tomcat\ConsoleTCPIP\Program.cs,Main,The following statement contains a magic number: byte[] searchBytes = new byte[2] { 0x02' 0x04 };
Magic Number,ConsoleTCPIP,Program,C:\repos\Bilal-S_iis2tomcat\ConsoleTCPIP\Program.cs,Main,The following statement contains a magic number: int a = 2;
Magic Number,ConsoleTCPIP,Program,C:\repos\Bilal-S_iis2tomcat\ConsoleTCPIP\Program.cs,Connect,The following statement contains a magic number: try              {                  // Create a TcpClient.                  // Note' for this client to work you need to have a TcpServer                   // connected to the same address as specified by the server' port                  // combination.                  Int32 port = 8009;                  TcpClient client = new TcpClient(server' port);                    // Translate the passed message into ASCII and store it as a Byte array.                  //Byte[] data = System.Text.Encoding.ASCII.GetBytes(message);                  Byte[] data = message;                  // Get a client stream for reading and writing.                  //  Stream stream = client.GetStream();                    NetworkStream stream = client.GetStream();                    // Send the message to the connected TcpServer.                   stream.Write(data' 0' data.Length);                                   Console.WriteLine("Sent bytes: {0}"' message.Length);                                       // buffer to store the response bytes. We will get responses in 8KB packets                  data = new Byte[8196];                    // String to store the response ASCII representation.                  String responseData = String.Empty;                  Int32 bytes;                  // Receive the TcpServer.response.                   stream.Read(data'0'0); //call empty read so we block until we receive a response                  // Read the first batch of the TcpServer response bytes.                  bool bGoOn = true;                  //try until error                  while (bGoOn && client.Connected)                  {                      try                      {                          bytes = stream.Read(data' 0' data.Length);                          responseData = System.Text.Encoding.ASCII.GetString(data' 0' bytes);                          Console.WriteLine("Received: {0}"' responseData);                      }                      catch (Exception)                      {                          bGoOn = false;                                                                     }                  }                  // Close everything.                  stream.Close();                  client.Close();              }              catch (ArgumentNullException e)              {                  Console.WriteLine("ArgumentNullException: {0}"' e);              }              catch (SocketException e)              {                  Console.WriteLine("SocketException: {0}"' e);              }
Magic Number,ConsoleTCPIP,Program,C:\repos\Bilal-S_iis2tomcat\ConsoleTCPIP\Program.cs,Connect,The following statement contains a magic number: try              {                  // Create a TcpClient.                  // Note' for this client to work you need to have a TcpServer                   // connected to the same address as specified by the server' port                  // combination.                  Int32 port = 8009;                  TcpClient client = new TcpClient(server' port);                    // Translate the passed message into ASCII and store it as a Byte array.                  //Byte[] data = System.Text.Encoding.ASCII.GetBytes(message);                  Byte[] data = message;                  // Get a client stream for reading and writing.                  //  Stream stream = client.GetStream();                    NetworkStream stream = client.GetStream();                    // Send the message to the connected TcpServer.                   stream.Write(data' 0' data.Length);                                   Console.WriteLine("Sent bytes: {0}"' message.Length);                                       // buffer to store the response bytes. We will get responses in 8KB packets                  data = new Byte[8196];                    // String to store the response ASCII representation.                  String responseData = String.Empty;                  Int32 bytes;                  // Receive the TcpServer.response.                   stream.Read(data'0'0); //call empty read so we block until we receive a response                  // Read the first batch of the TcpServer response bytes.                  bool bGoOn = true;                  //try until error                  while (bGoOn && client.Connected)                  {                      try                      {                          bytes = stream.Read(data' 0' data.Length);                          responseData = System.Text.Encoding.ASCII.GetString(data' 0' bytes);                          Console.WriteLine("Received: {0}"' responseData);                      }                      catch (Exception)                      {                          bGoOn = false;                                                                     }                  }                  // Close everything.                  stream.Close();                  client.Close();              }              catch (ArgumentNullException e)              {                  Console.WriteLine("ArgumentNullException: {0}"' e);              }              catch (SocketException e)              {                  Console.WriteLine("SocketException: {0}"' e);              }
Magic Number,ConsoleTCPIP,Program,C:\repos\Bilal-S_iis2tomcat\ConsoleTCPIP\Program.cs,MultiPackackeWrite,The following statement contains a magic number: byte[] pack1 = new byte[4] { 0x01' 0x02' 0x03' 0x04 };
Magic Number,ConsoleTCPIP,Program,C:\repos\Bilal-S_iis2tomcat\ConsoleTCPIP\Program.cs,MultiPackackeWrite,The following statement contains a magic number: byte[] pack2 = new byte[4] { 0x05' 0x06' 0x07' 0x08 };
Magic Number,ConsoleTCPIP,Program,C:\repos\Bilal-S_iis2tomcat\ConsoleTCPIP\Program.cs,MultiPackackeWrite,The following statement contains a magic number: byte[] pack3 = new byte[4] { 0x09' 0x0A' 0x0B' 0x0C };
Magic Number,ConsoleTCPIP,Program,C:\repos\Bilal-S_iis2tomcat\ConsoleTCPIP\Program.cs,MultiPackackeWrite,The following statement contains a magic number: client.SendBufferSize=4;
Magic Number,ConsoleTCPIP,Program,C:\repos\Bilal-S_iis2tomcat\ConsoleTCPIP\Program.cs,StringToBytes,The following statement contains a magic number: int numBytes = (inputString.Length) / 2;
Magic Number,ConsoleTCPIP,Program,C:\repos\Bilal-S_iis2tomcat\ConsoleTCPIP\Program.cs,StringToBytes,The following statement contains a magic number: for (int x = 0; x < numBytes; ++x)              {                  bytes[x] = Convert.ToByte(inputString.Substring(x * 2' 2)' 16);              }
Magic Number,ConsoleTCPIP,Program,C:\repos\Bilal-S_iis2tomcat\ConsoleTCPIP\Program.cs,StringToBytes,The following statement contains a magic number: for (int x = 0; x < numBytes; ++x)              {                  bytes[x] = Convert.ToByte(inputString.Substring(x * 2' 2)' 16);              }
Magic Number,ConsoleTCPIP,Program,C:\repos\Bilal-S_iis2tomcat\ConsoleTCPIP\Program.cs,StringToBytes,The following statement contains a magic number: for (int x = 0; x < numBytes; ++x)              {                  bytes[x] = Convert.ToByte(inputString.Substring(x * 2' 2)' 16);              }
