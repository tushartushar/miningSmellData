Implementation smell,Namespace,Class,File,Method,Description
Long Method,AssemblyUpdateManager,Program,C:\repos\XboxChaos_Assembly\src\AssemblyUpdateManager\Program.cs,Main,The method has 114 lines of code.
Complex Method,AssemblyUpdateManager,Program,C:\repos\XboxChaos_Assembly\src\AssemblyUpdateManager\Program.cs,Main,Cyclomatic complexity of the method is 9
Long Parameter List,Assembly.Helpers,INIFile,C:\repos\XboxChaos_Assembly\src\AssemblyUpdateManager\INIClass.cs,GetPrivateProfileString,The method has 6 parameters. Parameters: section' key' def' retVal' size' filePath
Empty Catch Block,AssemblyUpdateManager,Program,C:\repos\XboxChaos_Assembly\src\AssemblyUpdateManager\Program.cs,Main,The method has an empty catch block.
Empty Catch Block,AssemblyUpdateManager,Program,C:\repos\XboxChaos_Assembly\src\AssemblyUpdateManager\Program.cs,Main,The method has an empty catch block.
Empty Catch Block,AssemblyUpdateManager,Program,C:\repos\XboxChaos_Assembly\src\AssemblyUpdateManager\Program.cs,Main,The method has an empty catch block.
Empty Catch Block,AssemblyUpdateManager,Program,C:\repos\XboxChaos_Assembly\src\AssemblyUpdateManager\Program.cs,Main,The method has an empty catch block.
Empty Catch Block,AssemblyUpdateManager,Program,C:\repos\XboxChaos_Assembly\src\AssemblyUpdateManager\Program.cs,Main,The method has an empty catch block.
Empty Catch Block,AssemblyUpdateManager,Program,C:\repos\XboxChaos_Assembly\src\AssemblyUpdateManager\Program.cs,Main,The method has an empty catch block.
Empty Catch Block,AssemblyUpdateManager,Program,C:\repos\XboxChaos_Assembly\src\AssemblyUpdateManager\Program.cs,Main,The method has an empty catch block.
Magic Number,Assembly.Helpers,INIFile,C:\repos\XboxChaos_Assembly\src\AssemblyUpdateManager\INIClass.cs,IniReadValue,The following statement contains a magic number: var temp = new StringBuilder(255);
Magic Number,Assembly.Helpers,INIFile,C:\repos\XboxChaos_Assembly\src\AssemblyUpdateManager\INIClass.cs,IniReadValue,The following statement contains a magic number: int i = GetPrivateProfileString(Section' Key' ""' temp' 255' path);
Magic Number,AssemblyUpdateManager,Program,C:\repos\XboxChaos_Assembly\src\AssemblyUpdateManager\Program.cs,Main,The following statement contains a magic number: if (args.Length != 3)  			{  				Console.Error.WriteLine("Error: not enough arguments");  				Console.Error.WriteLine("Usage: AssemblyUpdateManager <update zip> <assembly exe> <parent pid>");  				return;  			}
Magic Number,AssemblyUpdateManager,Program,C:\repos\XboxChaos_Assembly\src\AssemblyUpdateManager\Program.cs,Main,The following statement contains a magic number: var pid = Convert.ToInt32(args[2]);
Magic Number,AssemblyUpdateManager,Program,C:\repos\XboxChaos_Assembly\src\AssemblyUpdateManager\Program.cs,Main,The following statement contains a magic number: try  			{  				// Wait for Assembly to close  				try  				{  					if (pid != -1)  					{  						var process = Process.GetProcessById(pid);  						process.WaitForExit();  						process.Close();  					}  				}  				catch  				{  				}    				// Delete the old backup  				try  				{  					Directory.Delete(@"Backup\Formats"' true);  					Directory.Delete(@"Backup\Plugins"' true);  				}  				catch  				{  				}    				// Copy formats and plugins to backup folder  				try  				{  					DirectoryCopy("Formats"' @"Backup\Formats"' true);  					DirectoryCopy("Plugins"' @"Backup\Plugins"' true);  					Directory.Delete("Formats"' true);  					Directory.Delete("Plugins"' true);  				}  				catch  				{  				}    				// Delete unnecessary DLL files  				foreach (var path in Directory.EnumerateFiles(Directory.GetCurrentDirectory()' "*.dll"))  				{  					// Ignore the file if it's in the KeepDlls list  					var fileName = Path.GetFileName(path);  					if (fileName == null)  						continue;  					if (KeepDlls.Any(f => fileName.Equals(f' StringComparison.OrdinalIgnoreCase)))  						continue;  					try  					{  						File.Delete(path);  					}  					catch  					{  					}  				}    				// Delete app.json  				try  				{  					if (File.Exists("app.json"))  						File.Delete("app.json");  				}  				catch  				{  				}    				// Delete the meta folder  				try  				{  					if (Directory.Exists("Meta"))  						Directory.Delete("Meta"' true);  				}  				catch  				{  				}    				// Extract the update zip  				var fz = new FastZip();  				fz.CreateEmptyDirectories = true;  				for (var i = 0; i < 5; i++)  				{  					try  					{  						fz.ExtractZip(zipPath' Directory.GetCurrentDirectory()' null);  						break;  					}  					catch (IOException)  					{  						Thread.Sleep(1000);  						if (i == 4)  						{  							throw;  						}  					}  				}  			}  			catch (Exception ex)  			{  				MessageBox.Show(ex.ToString()' "Assembly Update Manager"' MessageBoxButtons.OK' MessageBoxIcon.Error);  			}
Magic Number,AssemblyUpdateManager,Program,C:\repos\XboxChaos_Assembly\src\AssemblyUpdateManager\Program.cs,Main,The following statement contains a magic number: try  			{  				// Wait for Assembly to close  				try  				{  					if (pid != -1)  					{  						var process = Process.GetProcessById(pid);  						process.WaitForExit();  						process.Close();  					}  				}  				catch  				{  				}    				// Delete the old backup  				try  				{  					Directory.Delete(@"Backup\Formats"' true);  					Directory.Delete(@"Backup\Plugins"' true);  				}  				catch  				{  				}    				// Copy formats and plugins to backup folder  				try  				{  					DirectoryCopy("Formats"' @"Backup\Formats"' true);  					DirectoryCopy("Plugins"' @"Backup\Plugins"' true);  					Directory.Delete("Formats"' true);  					Directory.Delete("Plugins"' true);  				}  				catch  				{  				}    				// Delete unnecessary DLL files  				foreach (var path in Directory.EnumerateFiles(Directory.GetCurrentDirectory()' "*.dll"))  				{  					// Ignore the file if it's in the KeepDlls list  					var fileName = Path.GetFileName(path);  					if (fileName == null)  						continue;  					if (KeepDlls.Any(f => fileName.Equals(f' StringComparison.OrdinalIgnoreCase)))  						continue;  					try  					{  						File.Delete(path);  					}  					catch  					{  					}  				}    				// Delete app.json  				try  				{  					if (File.Exists("app.json"))  						File.Delete("app.json");  				}  				catch  				{  				}    				// Delete the meta folder  				try  				{  					if (Directory.Exists("Meta"))  						Directory.Delete("Meta"' true);  				}  				catch  				{  				}    				// Extract the update zip  				var fz = new FastZip();  				fz.CreateEmptyDirectories = true;  				for (var i = 0; i < 5; i++)  				{  					try  					{  						fz.ExtractZip(zipPath' Directory.GetCurrentDirectory()' null);  						break;  					}  					catch (IOException)  					{  						Thread.Sleep(1000);  						if (i == 4)  						{  							throw;  						}  					}  				}  			}  			catch (Exception ex)  			{  				MessageBox.Show(ex.ToString()' "Assembly Update Manager"' MessageBoxButtons.OK' MessageBoxIcon.Error);  			}
Magic Number,AssemblyUpdateManager,Program,C:\repos\XboxChaos_Assembly\src\AssemblyUpdateManager\Program.cs,Main,The following statement contains a magic number: try  			{  				// Wait for Assembly to close  				try  				{  					if (pid != -1)  					{  						var process = Process.GetProcessById(pid);  						process.WaitForExit();  						process.Close();  					}  				}  				catch  				{  				}    				// Delete the old backup  				try  				{  					Directory.Delete(@"Backup\Formats"' true);  					Directory.Delete(@"Backup\Plugins"' true);  				}  				catch  				{  				}    				// Copy formats and plugins to backup folder  				try  				{  					DirectoryCopy("Formats"' @"Backup\Formats"' true);  					DirectoryCopy("Plugins"' @"Backup\Plugins"' true);  					Directory.Delete("Formats"' true);  					Directory.Delete("Plugins"' true);  				}  				catch  				{  				}    				// Delete unnecessary DLL files  				foreach (var path in Directory.EnumerateFiles(Directory.GetCurrentDirectory()' "*.dll"))  				{  					// Ignore the file if it's in the KeepDlls list  					var fileName = Path.GetFileName(path);  					if (fileName == null)  						continue;  					if (KeepDlls.Any(f => fileName.Equals(f' StringComparison.OrdinalIgnoreCase)))  						continue;  					try  					{  						File.Delete(path);  					}  					catch  					{  					}  				}    				// Delete app.json  				try  				{  					if (File.Exists("app.json"))  						File.Delete("app.json");  				}  				catch  				{  				}    				// Delete the meta folder  				try  				{  					if (Directory.Exists("Meta"))  						Directory.Delete("Meta"' true);  				}  				catch  				{  				}    				// Extract the update zip  				var fz = new FastZip();  				fz.CreateEmptyDirectories = true;  				for (var i = 0; i < 5; i++)  				{  					try  					{  						fz.ExtractZip(zipPath' Directory.GetCurrentDirectory()' null);  						break;  					}  					catch (IOException)  					{  						Thread.Sleep(1000);  						if (i == 4)  						{  							throw;  						}  					}  				}  			}  			catch (Exception ex)  			{  				MessageBox.Show(ex.ToString()' "Assembly Update Manager"' MessageBoxButtons.OK' MessageBoxIcon.Error);  			}
