Implementation smell,Namespace,Class,File,Method,Description
Long Method,Assembly.Metro.Controls.PageTemplates.Games,HaloMap,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloMap.xaml.cs,InitalizeMap,The method has 106 lines of code.
Long Method,Assembly.Metro.Controls.PageTemplates.Games,HaloMap,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloMap.xaml.cs,extractTags,The method has 164 lines of code.
Long Method,Assembly.Helpers.PostGeneration,BlamitePostGenerator,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\PostGeneration\AssemblyPostGenerator.cs,Parse,The method has 149 lines of code.
Complex Method,Assembly.Metro.Controls.PageTemplates,PatchControl,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\PatchControl.xaml.cs,CheckAllCreateMandatoryFields,Cyclomatic complexity of the method is 8
Complex Method,Assembly.Metro.Controls.PageTemplates,PatchControl,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\PatchControl.xaml.cs,btnCreatePatch_Click,Cyclomatic complexity of the method is 8
Complex Method,Assembly.Metro.Controls.PageTemplates,PatchControl,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\PatchControl.xaml.cs,btnPokePatch_Click,Cyclomatic complexity of the method is 8
Complex Method,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,MetaWriter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\MetaWriter.cs,WriteReflexiveChildren,Cyclomatic complexity of the method is 10
Complex Method,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,FlattenedReflexive,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\ReflexiveFlattener.cs,HideFields,Cyclomatic complexity of the method is 8
Complex Method,Assembly.Metro.Controls.PageTemplates.Games,HaloPluginGenerator,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloPluginGenerator.xaml.cs,worker_DoWork,Cyclomatic complexity of the method is 11
Complex Method,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,UpdateMapInfo,Cyclomatic complexity of the method is 18
Complex Method,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,cbInsertIndex_SelectionChanged,Cyclomatic complexity of the method is 11
Complex Method,Assembly.Metro.Controls.PageTemplates.Games,HaloMap,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloMap.xaml.cs,extractTags,Cyclomatic complexity of the method is 10
Complex Method,Assembly.Helpers.PostGeneration,BlamitePostGenerator,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\PostGeneration\AssemblyPostGenerator.cs,Parse,Cyclomatic complexity of the method is 24
Long Parameter List,Assembly.Helpers,DDSConversion,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\DDSConversion.cs,Deswizzle,The method has 5 parameters. Parameters: FilePath' resizeWidth' resizeHeight' onlyResizeIfGreater' dontSettingsResize
Long Parameter List,Assembly.Helpers,FileDefaults,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\FileDefaults.cs,RegisterExtension,The method has 5 parameters. Parameters: ext' register' clazz' contentType' perceivedType
Long Parameter List,Assembly.Helpers,INIFile,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\INIClass.cs,GetPrivateProfileString,The method has 6 parameters. Parameters: section' key' def' retVal' size' filePath
Long Parameter List,Assembly.Helpers.Native,CaptionHitTester,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Native\WindowMovement.cs,HitTestHook,The method has 5 parameters. Parameters: hwnd' msg' wParam' lParam' handled
Long Parameter List,Assembly.Helpers.Models,ObjExporter,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Models\ObjExporter.cs,ProcessVertexElement,The method has 5 parameters. Parameters: x' y' z' w' layout
Long Parameter List,Assembly.Helpers.Plugins,ThirdGenPluginVisitor,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Plugins\ThirdGenPluginVisitor.cs,VisitRange,The method has 9 parameters. Parameters: name' offset' visible' type' minval' maxval' smallchange' largechange' pluginLine
Long Parameter List,Assembly.Helpers.Plugins,ThirdGenPluginVisitor,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Plugins\ThirdGenPluginVisitor.cs,VisitColorInt,The method has 5 parameters. Parameters: name' offset' visible' format' pluginLine
Long Parameter List,Assembly.Helpers.Plugins,ThirdGenPluginVisitor,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Plugins\ThirdGenPluginVisitor.cs,VisitColorF,The method has 5 parameters. Parameters: name' offset' visible' format' pluginLine
Long Parameter List,Assembly.Helpers.Plugins,ThirdGenPluginVisitor,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Plugins\ThirdGenPluginVisitor.cs,VisitAscii,The method has 5 parameters. Parameters: name' offset' visible' size' pluginLine
Long Parameter List,Assembly.Helpers.Plugins,ThirdGenPluginVisitor,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Plugins\ThirdGenPluginVisitor.cs,VisitUtf16,The method has 5 parameters. Parameters: name' offset' visible' size' pluginLine
Long Parameter List,Assembly.Helpers.Plugins,ThirdGenPluginVisitor,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Plugins\ThirdGenPluginVisitor.cs,VisitRawData,The method has 5 parameters. Parameters: name' offset' visible' size' pluginLine
Long Parameter List,Assembly.Helpers.Plugins,ThirdGenPluginVisitor,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Plugins\ThirdGenPluginVisitor.cs,VisitTagReference,The method has 6 parameters. Parameters: name' offset' visible' withClass' showJumpTo' pluginLine
Long Parameter List,Assembly.Helpers.Plugins,ThirdGenPluginVisitor,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Plugins\ThirdGenPluginVisitor.cs,VisitDataReference,The method has 6 parameters. Parameters: name' offset' format' visible' align' pluginLine
Long Parameter List,Assembly.Helpers.Plugins,ThirdGenPluginVisitor,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Plugins\ThirdGenPluginVisitor.cs,VisitShader,The method has 5 parameters. Parameters: name' offset' visible' type' pluginLine
Long Parameter List,Assembly.Helpers.Plugins,ThirdGenPluginVisitor,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Plugins\ThirdGenPluginVisitor.cs,VisitUnicList,The method has 5 parameters. Parameters: name' offset' visible' languages' pluginLine
Long Parameter List,Assembly.Helpers.Plugins,ThirdGenPluginVisitor,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Plugins\ThirdGenPluginVisitor.cs,EnterBitfield,The method has 5 parameters. Parameters: type' name' offset' visible' pluginLine
Long Parameter List,Assembly.Helpers.Plugins,ThirdGenPluginVisitor,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Plugins\ThirdGenPluginVisitor.cs,EnterEnum,The method has 5 parameters. Parameters: type' name' offset' visible' pluginLine
Long Parameter List,Assembly.Helpers.Plugins,ThirdGenPluginVisitor,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Plugins\ThirdGenPluginVisitor.cs,EnterReflexive,The method has 6 parameters. Parameters: name' offset' visible' entrySize' align' pluginLine
Long Parameter List,Assembly.Metro.Controls.PageTemplates.Games.Components,MetaContainer,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaContainer.xaml.cs,MetaContainer,The method has 8 parameters. Parameters: buildInfo' cacheLocation' tag' tags' cache' streamManager' rteProvider' stringIDTrie
Long Parameter List,Assembly.Metro.Controls.PageTemplates.Games.Components,MetaEditor,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaEditor.xaml.cs,MetaEditor,The method has 8 parameters. Parameters: buildInfo' tag' parentContainer' tags' cache' streamManager' rteProvider' stringIDTrie
Long Parameter List,Assembly.Metro.Controls.PageTemplates.Games.Components.Editors,LocaleEditor,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\Editors\LocaleEditor.xaml.cs,LocaleEditor,The method has 5 parameters. Parameters: language' cache' streamManager' stringIdTrie' symbols
Long Parameter List,Assembly.Metro.Controls.PageTemplates.Games.Components.Editors,SoundEditor,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\Editors\SoundEditor.xaml.cs,SoundEditor,The method has 5 parameters. Parameters: buildInfo' cacheLocation' tag' cache' streamManager
Long Parameter List,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaComponents,TrackBar,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaComponents\RangeValue.xaml.cs,LoadValues,The method has 6 parameters. Parameters: title' type' min' max' smallStep' largeStep
Long Parameter List,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,BitfieldData,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\BitfieldData.cs,BitfieldData,The method has 5 parameters. Parameters: name' offset' address' type' pluginLine
Long Parameter List,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,ColourData,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\ColourData.cs,ColourData,The method has 7 parameters. Parameters: name' offset' address' format' dataType' value' pluginLine
Long Parameter List,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,DataRef,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\DataRef.cs,DataRef,The method has 8 parameters. Parameters: name' offset' format' address' dataAddress' value' length' pluginLine
Long Parameter List,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,DegreeData,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\DegreeData.cs,DegreeData,The method has 5 parameters. Parameters: name' offset' address' radian' pluginLine
Long Parameter List,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,EnumData,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\EnumData.cs,EnumData,The method has 6 parameters. Parameters: name' offset' address' type' value' pluginLine
Long Parameter List,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,MetaReader,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\MetaReader.cs,MetaReader,The method has 6 parameters. Parameters: streamManager' baseOffset' cache' buildInfo' type' ignore
Long Parameter List,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,MetaWriter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\MetaWriter.cs,MetaWriter,The method has 7 parameters. Parameters: writer' baseOffset' cache' buildInfo' type' changes' stringIdTrie
Long Parameter List,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,NumberData<T>,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\NumberData.cs,NumberData,The method has 6 parameters. Parameters: name' offset' address' type' value' pluginLine
Long Parameter List,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,Uint8Data,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\NumberData.cs,Uint8Data,The method has 6 parameters. Parameters: name' offset' address' type' value' pluginLine
Long Parameter List,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,Int8Data,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\NumberData.cs,Int8Data,The method has 6 parameters. Parameters: name' offset' address' type' value' pluginLine
Long Parameter List,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,Uint16Data,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\NumberData.cs,Uint16Data,The method has 6 parameters. Parameters: name' offset' address' type' value' pluginLine
Long Parameter List,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,Int16Data,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\NumberData.cs,Int16Data,The method has 6 parameters. Parameters: name' offset' address' type' value' pluginLine
Long Parameter List,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,Uint32Data,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\NumberData.cs,Uint32Data,The method has 6 parameters. Parameters: name' offset' address' type' value' pluginLine
Long Parameter List,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,Int32Data,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\NumberData.cs,Int32Data,The method has 6 parameters. Parameters: name' offset' address' type' value' pluginLine
Long Parameter List,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,Float32Data,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\NumberData.cs,Float32Data,The method has 6 parameters. Parameters: name' offset' address' type' value' pluginLine
Long Parameter List,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,RawData,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\RawData.cs,RawData,The method has 6 parameters. Parameters: name' offset' address' value' length' pluginLine
Long Parameter List,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,RawData,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\RawData.cs,RawData,The method has 7 parameters. Parameters: name' offset' format' address' value' length' pluginLine
Long Parameter List,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,FlattenedReflexive,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\ReflexiveFlattener.cs,FlattenedReflexive,The method has 5 parameters. Parameters: parent' template' topLevelFields' tracker' changes
Long Parameter List,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,ShaderRef,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\ShaderRef.cs,ShaderRef,The method has 6 parameters. Parameters: name' offset' address' type' value' pluginLine
Long Parameter List,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,StringIDData,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\StringIDData.cs,StringIDData,The method has 6 parameters. Parameters: name' offset' address' val' autocompleteTrie' pluginLine
Long Parameter List,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,ReflexiveData,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\ReflexiveData.cs,ReflexiveData,The method has 7 parameters. Parameters: name' offset' address' entrySize' align' pluginLine' metaArea
Long Parameter List,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,StringData,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\StringData.cs,StringData,The method has 7 parameters. Parameters: name' offset' address' type' value' size' pluginLine
Long Parameter List,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,TagRefData,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\TagRefData.cs,TagRefData,The method has 7 parameters. Parameters: name' offset' address' allTags' showJumpTo' withClass' pluginLine
Long Parameter List,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,VectorData,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\VectorData.cs,VectorData,The method has 7 parameters. Parameters: name' offset' address' x' y' z' pluginLine
Long Parameter List,Assembly.Metro.Controls.PageTemplates.Games,HaloPluginGenerator,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloPluginGenerator.xaml.cs,worker_DoWork,The method has 5 parameters. Parameters: sender' e' generatorMaps' outputPath' worker
Long Parameter List,Assembly.Metro.Dialogs.ControlDialogs,MessageBoxInput,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Dialogs\ControlDialogs\MessageBoxInput.xaml.cs,MessageBoxInput,The method has 5 parameters. Parameters: title' message' placeholder' regexMatch' defaultText
Long Parameter List,Assembly.Metro.Dialogs.ControlDialogs,ViewValueAs,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Dialogs\ControlDialogs\ViewValueAs.xaml.cs,ViewValueAs,The method has 5 parameters. Parameters: cacheFile' buildInfo' streamManager' fields' cacheOffset
Long Parameter List,Assembly.Metro.Dialogs,MetroInputBox,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Dialogs\MetroInputBox.cs,Show,The method has 5 parameters. Parameters: title' message' defaultText' placeholder' regexMatch
Long Parameter List,Assembly.Metro.Dialogs,MetroViewValueAs,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Dialogs\MetroViewValueAs.cs,Show,The method has 5 parameters. Parameters: cacheFile' buildInfo' streamManager' fields' cacheOffset
Long Parameter List,Assembly.Windows,Home,C:\repos\XboxChaos_Assembly\src\Assembly\Windows\Home.xaml.cs,WindowProc,The method has 5 parameters. Parameters: hwnd' msg' wParam' lParam' handled
Long Identifier,Assembly.Helpers,Settings,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Settings.cs,,The length of the parameter _halomapLastSelectedMetaEditor is 30.
Long Identifier,Assembly.Helpers,Settings,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Settings.cs,,The length of the parameter _halomapOnlyShowBookmarkedTags is 30.
Long Identifier,Microsoft.Shell,SingleInstance<TApplication>,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\SingleInstance.cs,SignalFirstInstance,The length of the parameter firstInstanceRemoteServiceReference is 35.
Long Identifier,Assembly.Metro.Controls.PageTemplates.Games.Components,InputBindingsManager,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\InputBindingsManager.cs,,The length of the parameter UpdatePropertySourceWhenEnterPressedProperty is 44.
Long Identifier,Assembly.Metro.Controls.PageTemplates.Games.Components.Editors,ViewModel,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\Editors\SoundEditor.xaml.cs,PermutationsOnCollectionChanged,The length of the parameter notifyCollectionChangedEventArgs is 32.
Long Identifier,Assembly.Metro.Controls.PageTemplates.Games.Components.Editors,ViewModel,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\Editors\SoundEditor.xaml.cs,ResourcePagesOnCollectionChanged,The length of the parameter notifyCollectionChangedEventArgs is 32.
Long Identifier,DragDropListBox,DragDropHelper,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\TabReorg\DragDropHelper.cs,DecideDropTarget,The length of the parameter positionRelativeToItemContainer is 31.
Long Statement,Assembly.Helpers.Plugins,ThirdGenPluginVisitor,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Plugins\ThirdGenPluginVisitor.cs,VisitUnicList,The length of the statement  "				AddValue(new Uint16Data("Language " + i + " " + name + " Count"' (uint)(offset + i * 4 + 2)' 0' "uint16"' 0' pluginLine)); " is 122.
Long Statement,Assembly.Metro.Controls.PageTemplates,PatchControl,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\PatchControl.xaml.cs,btnApplyPatch_Click,The length of the statement  "							".map\" to save this map. This filename may be required in order for the map to work correctly.\r\n\r\nAre you sure you want to save this map as \"" + " is 150.
Long Statement,Assembly.Metro.Controls.PageTemplates,PatchControl,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\PatchControl.xaml.cs,btnPokePatch_Click,The length of the statement  "							"This patch contains edits to segments other than the meta' ie locales and the file header' it could crash if you continue. \n\nDo you wish to continue?"' " is 154.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games.Components,MetaEditor,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaEditor.xaml.cs,UpdateMeta,The length of the statement  "                    MetaWriter metaUpdate = new MetaWriter(writer' (uint)_tag.RawTag.MetaLocation.AsOffset()' _cache' _buildInfo' type' null' _stringIdTrie); " is 137.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games.Components,MetaEditor,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaEditor.xaml.cs,ShowConnectionError,The length of the statement  "						"Unable to connect to your Xbox 360 console. Make sure that XBDM is enabled' you have the Xbox 360 SDK installed' and that your console's IP has been set correctly."); " is 167.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games.Components,MetaEditor,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaEditor.xaml.cs,ShowConnectionError,The length of the statement  "						"Unable to connect to the game. Make sure that it is running on your computer and that the map you are poking to is currently loaded."); " is 136.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games.Components.Editors,SoundEditor,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\Editors\SoundEditor.xaml.cs,ExtractRaw,The length of the statement  "							throw new FileNotFoundException("Unable to extract tag' because a resource it relies on is in a external cache '{0}' that could not be found. Check Assembly's settings and set the file path to resource caches."); " is 212.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaComponents,Shader,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaComponents\Shader.xaml.cs,btnDisassemble_Click,The length of the statement  "				MetroMessageBox.Show("xsd.exe (from the XDK) is required in order to disassemble shaders.\r\nYou can set a path to it in Settings under Map Editor."); " is 150.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloCampaign,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloCampaign.xaml.cs,MapIDsError,The length of the statement  "					MetroMessageBox.Show("Campaign Not Saved"' "The Campaign could not be saved because one or more of the Map IDs is invalid."); " is 125.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloImage,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloImage.xaml.cs,btnInjectImage_Click,The length of the statement  "					sizeMessage = String.Format("- The size of the new image (0x{0}) exceeds Halo 3/ODST's modified limit of 0x1C000. This image will not display in those games as a result. Can be ignored otherwise.\n"' " is 199.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloImage,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloImage.xaml.cs,btnInjectImage_Click,The length of the statement  "					dimensionMessage = String.Format("- The dimensions of the new image ({0}x{1}) are not the same as the dimensions of the original image ({2}x{3}). This blf may appear stretched or not appear at all as a result.\n"' " is 213.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloImage,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloImage.xaml.cs,btnInjectImage_Click,The length of the statement  "						image.PixelWidth' image.PixelHeight' ((BitmapImage)imgBLF.Source).PixelWidth' ((BitmapImage)imgBLF.Source).PixelHeight); " is 120.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,LoadMapInfo,The length of the statement  "					paneBLFInfo.Children.Insert(0' new MapHeaderEntry("MapInfo Version:"' _mapInfo.Engine.Version.ToString(CultureInfo.InvariantCulture))); " is 135.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,LoadMapInfo,The length of the statement  "					paneBLFInfo.Children.Insert(2' new MapHeaderEntry("BLF Chunks:"' _blf.BLFChunks.Count.ToString(CultureInfo.InvariantCulture))); " is 127.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,LoadMapInfo,The length of the statement  "					cbType_Cine.Visibility = cbType_FF.Visibility = _mapInfo.Engine.Version < 5 ? Visibility.Collapsed : Visibility.Visible; " is 120.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,LoadLanguages,The length of the statement  "			cbLanguages.DataContext = cbInsertLanguages.DataContext = _mapInfo.Engine.LanguageCount > 12 ? _halo4Languages : _languages; " is 124.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,UpdateMapInfo,The length of the statement  "			errorStrings.AddRange(from textBox in _maxTeamTextBoxes where IsTextBoxValid(textBox) select _mapInfo.Engine.MaxTeamCollection.GetLayout((int)textBox.Tag).Name + " Max Teams"); " is 176.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,UpdateMapInfo,The length of the statement  "				MetroMessageBox.Show("MapInfo Not Saved"' errorStrings.Aggregate("The data given for the following is either not a valid number or too large.\n"' (current' error) => current + ("\n" + error))); " is 193.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,UpdateMapInfo,The length of the statement  "				MetroMessageBox.Show("MapID Not Saved"' "The MapID was not saved into the MapInfo. Change the MapID to a valid number' then save again."); " is 138.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,UpdateInsertionPoints,The length of the statement  "				MetroMessageBox.Show("MapInfo Not Saved"' "The MapInfo could not be saved because the Insertion Point Zone Index is invalid."); " is 127.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,UpdateInsertionPoints,The length of the statement  "			_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointNames[cbInsertLanguages.SelectedIndex] = txtInsertName.Text; " is 138.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,UpdateInsertionPoints,The length of the statement  "			_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointDescriptions[cbInsertLanguages.SelectedIndex] = txtInsertDesc.Text; " is 145.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,cbLanguages_SelectionChanged,The length of the statement  "						_mapInfo.MapInformation.MapDescriptions[_oldLanguage] = _mapInfo.MapInformation.MapDescriptions[_oldLanguage].Remove(127); " is 122.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,cbInsertIndex_SelectionChanged,The length of the statement  "					_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].CheckpointNames[_oldInsertionLanguage] = txtInsertName.Text.Trim(); " is 126.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,cbInsertIndex_SelectionChanged,The length of the statement  "					_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].CheckpointDescriptions[_oldInsertionLanguage] = txtInsertDesc.Text.Trim(); " is 133.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,cbInsertIndex_SelectionChanged,The length of the statement  "							= _mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointNames[_oldInsertionLanguage].Remove(31); " is 120.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,cbInsertIndex_SelectionChanged,The length of the statement  "					if (_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].CheckpointDescriptions[_oldInsertionLanguage].Length > 127) " is 122.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,cbInsertIndex_SelectionChanged,The length of the statement  "							= _mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointDescriptions[_oldInsertionLanguage].Remove(127); " is 128.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,cbInsertIndex_SelectionChanged,The length of the statement  "				txtInsertName.Text = _mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointNames[_oldInsertionLanguage]; " is 128.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,cbInsertIndex_SelectionChanged,The length of the statement  "				txtInsertDesc.Text = _mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointDescriptions[_oldInsertionLanguage]; " is 135.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,cbInsertLanguages_SelectionChanged,The length of the statement  "				_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointNames[_oldInsertionLanguage] = txtInsertName.Text.Trim(); " is 135.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,cbInsertLanguages_SelectionChanged,The length of the statement  "				_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointDescriptions[_oldInsertionLanguage] = txtInsertDesc.Text.Trim(); " is 142.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,cbInsertLanguages_SelectionChanged,The length of the statement  "				if (_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointNames[_oldInsertionLanguage].Length > 31) " is 123.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,cbInsertLanguages_SelectionChanged,The length of the statement  "				if (_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointDescriptions[_oldInsertionLanguage].Length > 127) " is 131.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,cbInsertLanguages_SelectionChanged,The length of the statement  "						_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointDescriptions[_oldInsertionLanguage].Remove(127); " is 126.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,cbInsertLanguages_SelectionChanged,The length of the statement  "			txtInsertName.Text = _mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointNames[_oldInsertionLanguage]; " is 128.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,cbInsertLanguages_SelectionChanged,The length of the statement  "			txtInsertDesc.Text = _mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointDescriptions[_oldInsertionLanguage]; " is 135.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloMap,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloMap.xaml.cs,InitalizeMap,The length of the statement  "					resourceStream = File.OpenRead(Path.Combine(Path.GetDirectoryName(_cacheLocation)' Path.GetFileName(diceResource.Location.PrimaryPage.FilePath))); " is 146.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloMap,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloMap.xaml.cs,InitalizeMap,The length of the statement  "					resourceFile = new ThirdGenCacheFile(new EndianReader(resourceStream' Endian.BigEndian)' _buildInfo' _cacheFile.BuildString); " is 125.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloMap,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloMap.xaml.cs,contextRename_Click,The length of the statement  "				"Please enter a new name for the tag.\r\n\t\nThis will not update the cache file until you click the \"Save Tag Names\" button at the bottom."' " is 143.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloMap,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloMap.xaml.cs,extractTags,The length of the statement  "											"Unable to extract tag' because a resource it relies on is in a external cache '{0}' that could not be found. Check Assembly's settings and set the file path to resource caches."); " is 180.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloMap,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloMap.xaml.cs,extractTags,The length of the statement  "										"Unable to extract tag' because a resource it relies on is in a external cache '{0}' that could not be found. Check Assembly's settings and set the file path to resource caches."); " is 180.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloMap,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloMap.xaml.cs,btnImport_Click,The length of the statement  "				"\r\n\r\nPlease remember that you cannot poke to injected or modified tags without causing problems. Load the modified map in the game first.\r\n\r\nAdditionally' if applicable' make sure that your game executable is patched so that any map header hash checks are bypassed. Using an executable which only has RSA checks patched out will refuse to load the map."); " is 363.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloMap,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloMap.xaml.cs,contextDuplicate_Click,The length of the statement  "				newName = MetroInputBox.Show("Duplicate Tag"' "Please enter a name for the new tag."' tag.TagFileName' "Enter a name."); " is 120.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloMap,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloMap.xaml.cs,contextDuplicate_Click,The length of the statement  "				if (newName != tag.TagFileName && _cacheFile.Tags.FindTagByName(newName' tag.RawTag.Class' _cacheFile.FileNames) == null) " is 121.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloMap,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloMap.xaml.cs,contextDuplicate_Click,The length of the statement  "				MetroMessageBox.Show("Duplicate Tag"' "Please enter a name that is different from the original and that is not in use."); " is 121.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloMap,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloMap.xaml.cs,contextDuplicate_Click,The length of the statement  "				var extracted = new ExtractedTag(tag.RawTag.Index' tag.RawTag.MetaLocation.AsPointer()' tag.RawTag.Class.Magic' newName); " is 121.
Long Statement,Assembly.Metro.Controls.PageTemplates.Games,HaloMap,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloMap.xaml.cs,contextLoadBookmarks_Click,The length of the statement  "						"If you continue' your current bookmarks will be overwritten with the bookmarks you choose. \n\nAre you sure you wish to continue?"' " is 132.
Long Statement,DragDropListBox,DragDropHelper,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\TabReorg\DragDropHelper.cs,CreateInsertionAdorner,The length of the statement  "				// This way I get the AdornerLayer within ScrollContentPresenter' and not the one under AdornerDecorator (Snoop is awesome). " is 124.
Long Statement,Assembly.Metro.Dialogs.ControlDialogs,TagBlockReallocator,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Dialogs\ControlDialogs\TagBlockReallocator.xaml.cs,BtnAddMore_OnClick,The length of the statement  "				"Enter the number of entries to add to the block.\nEntering a negative number will remove entries from the end of the block.\nHexadecimal values starting with \"0x\" are allowed."' " is 180.
Long Statement,Assembly.Metro.Dialogs.ControlDialogs,ViewValueAs,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Dialogs\ControlDialogs\ViewValueAs.xaml.cs,RefreshFileOffset,The length of the statement  "					"The meta offset you set is not valid. It might be beyond the boundaries of the file or contain invalid characters. Remember' if it's a hex number' it must start with a '0x'." " is 175.
Long Statement,Assembly.Metro.Dialogs.ControlDialogs,ViewValueAs,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Dialogs\ControlDialogs\ViewValueAs.xaml.cs,RefreshMemAddr,The length of the statement  "				success = uint.TryParse(txtMemOffset.Text.Substring(2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out offset); " is 122.
Long Statement,Assembly.Metro.Dialogs.ControlDialogs,ViewValueAs,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Dialogs\ControlDialogs\ViewValueAs.xaml.cs,RefreshMemAddr,The length of the statement  "					"The meta address you set is not valid. It might be beyond the boundaries of the file or contain invalid characters. Remember' if it's a hex number' it must start with a '0x'." " is 176.
Long Statement,Assembly.Windows,Home,C:\repos\XboxChaos_Assembly\src\Assembly\Windows\Home.xaml.cs,ShowCheatingDialog,The length of the statement  "				"Assembly is not a cheating tool. While you will never be prevented from using it to give yourself an unfair advantage on Xbox Live' do not expect to receive help if you ask how to do so. Discussion of cheating on Xbox Chaos will immediately result in a permanent ban from the website.\n\nThis dialog will only show once."); " is 324.
Long Statement,Assembly.Windows,Home,C:\repos\XboxChaos_Assembly\src\Assembly\Windows\Home.xaml.cs,HomeWindow_Drop,The length of the statement  "				MetroMessageBox.Show("File Not Supported"' "The dropped file' \"" + Path.GetFileName(file) + "\" has an invalid extension and will not be opened."); " is 148.
Long Statement,Assembly.Windows,Home,C:\repos\XboxChaos_Assembly\src\Assembly\Windows\Home.xaml.cs,ProcessCommandLineArgs,The length of the statement  "								".\r\n\r\nYour old plugins and layouts were copied to a \"Backup\" folder.\r\nBe sure to merge any changes you have made on your own."); " is 136.
Complex Conditional,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,ReflexiveFlattener,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\ReflexiveFlattener.cs,ReflexivePropertyChanged,The conditional expression  "!_loading &&  			         (e.PropertyName == "CurrentIndex" || e.PropertyName == "FirstEntryAddress" || e.PropertyName == "EntrySize")"  is complex.
Complex Conditional,Assembly.Metro.Controls.PageTemplates.Games,HaloPluginConverter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloPluginConverter.xaml.cs,btnConvertPlugins_Click,The conditional expression  "SelectedPlugins == null ||  			    ((String.IsNullOrEmpty(txtInputFolder.Text) || !Directory.Exists(txtInputFolder.Text)) ||  			     (String.IsNullOrEmpty(txtOutputFolder.Text) || !Directory.Exists(txtOutputFolder.Text)) ||  			     !(cbOutputFormat.SelectedIndex >= 0) ||  			     !(cbTargetGame.SelectedIndex >= 0) ||  			     (SelectedPlugins.Count(entry => !entry.IsSelected) == SelectedPlugins.Count))"  is complex.
Complex Conditional,Assembly.Metro.Controls.PageTemplates.Games,HaloPluginConverter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloPluginConverter.xaml.cs,doConvert,The conditional expression  "(!file.EndsWith(".asc") && !file.EndsWith(".alt") && !file.EndsWith(".ent") && !file.EndsWith(".xml")) ||  				    Path.GetFileNameWithoutExtension(file).Length != 4"  is complex.
Complex Conditional,Assembly.Metro.Controls.PageTemplates.Games,HaloPluginGenerator,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloPluginGenerator.xaml.cs,btnGeneratePlugins_Click,The conditional expression  "GeneratorMaps == null ||  			    ((String.IsNullOrEmpty(txtInputFolder.Text) || !Directory.Exists(txtInputFolder.Text)) ||  			     (String.IsNullOrEmpty(txtOutputFolder.Text) || !Directory.Exists(txtOutputFolder.Text)) ||  			     (GeneratorMaps.Count(entry => !entry.IsSelected) == GeneratorMaps.Count))"  is complex.
Complex Conditional,Assembly.Metro.Controls.PageTemplates.Games,HaloMap,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloMap.xaml.cs,TagContextMenu_IsVisibleChanged,The conditional expression  "tagMenuItem.Name == "itemRename" ||  							tagMenuItem.Name == "itemDuplicate" ||  							tagMenuItem.Name == "itemExtract" ||  							tagMenuItem.Name == "itemExtractNoRaw""  is complex.
Complex Conditional,Assembly.Metro.Controls.PageTemplates.Games,HaloMap,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloMap.xaml.cs,CreateTag,The conditional expression  "currentTab != null &&  				    currentTab.Tag != null &&  				    currentTab.Content is MetaContainer &&  				    currentTab.Tag is TagEntry"  is complex.
Empty Catch Block,Assembly.Helpers,TragicSans,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\0xabad1dea.cs,ValidateHistory,The method has an empty catch block.
Empty Catch Block,Assembly.Helpers,TragicSans,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\0xabad1dea.cs,ValidateHistory,The method has an empty catch block.
Empty Catch Block,Assembly.Helpers,TragicSans,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\0xabad1dea.cs,ValidateHistory,The method has an empty catch block.
Empty Catch Block,Microsoft.Shell,SingleInstance<TApplication>,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\SingleInstance.cs,GetCommandLineArgs,The method has an empty catch block.
Empty Catch Block,Assembly.Metro.Controls.PageTemplates.Games.Components,RssPage,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\RssPage.xaml.cs,GrabRSS,The method has an empty catch block.
Empty Catch Block,Assembly.Metro.Controls.PageTemplates.Games,HaloCampaign,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloCampaign.xaml.cs,Close,The method has an empty catch block.
Empty Catch Block,Assembly.Metro.Controls.PageTemplates.Games,HaloImage,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloImage.xaml.cs,Close,The method has an empty catch block.
Empty Catch Block,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,Close,The method has an empty catch block.
Empty Catch Block,Assembly.Windows,Home,C:\repos\XboxChaos_Assembly\src\Assembly\Windows\Home.xaml.cs,CheckForUpdates,The method has an empty catch block.
Magic Number,Assembly.Helpers,IWff,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\0xabad1dea.cs,Heman,The following statement contains a magic number: try  				{  					if (!App.AssemblyStorage.AssemblySettings.ApplicationEasterEggs) return false;    					reader.SeekTo(0x00);  					if (reader.ReadUInt32() != 1230464614) return false;    					// Play Video  					App.AssemblyStorage.AssemblySettings.HomeWindow.mediaIWff.LoadedBehavior = MediaState.Manual;  					App.AssemblyStorage.AssemblySettings.HomeWindow.mediaIWff.Source =  						new Uri("http://assembly.xboxchaos.com/kbdata/IWff.etmp");  					App.AssemblyStorage.AssemblySettings.HomeWindow.maskingIWff.Visibility = Visibility.Visible;  					App.AssemblyStorage.AssemblySettings.HomeWindow.mediaIWff.Play();  					App.AssemblyStorage.AssemblySettings.HomeWindow.mediaIWff.MediaEnded += (o' args) =>  					{  						App.AssemblyStorage.AssemblySettings.HomeWindow.mediaIWff.Position = new TimeSpan(0);  						App.AssemblyStorage.AssemblySettings.HomeWindow.mediaIWff.Play();  					};    					return true;  				}  				catch  				{  					return false;  				}
Magic Number,Assembly.Helpers,TragicSans,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\0xabad1dea.cs,KeyDown,The following statement contains a magic number: if (histroyOfEggs.Count > 20)  					histroyOfEggs.RemoveAt(20);
Magic Number,Assembly.Helpers,TragicSans,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\0xabad1dea.cs,KeyDown,The following statement contains a magic number: if (histroyOfEggs.Count > 20)  					histroyOfEggs.RemoveAt(20);
Magic Number,Assembly.Helpers,DDSConversion,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\DDSConversion.cs,GammaCorrect,The following statement contains a magic number: gamma = Math.Max(0.1' Math.Min(5.0' gamma));
Magic Number,Assembly.Helpers,DDSConversion,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\DDSConversion.cs,GammaCorrect,The following statement contains a magic number: gamma = Math.Max(0.1' Math.Min(5.0' gamma));
Magic Number,Assembly.Helpers,DDSConversion,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\DDSConversion.cs,GammaCorrect,The following statement contains a magic number: for (int x = 0; x < 0x100; x++)  			{  				table[x] = (byte) Math.Min(0xff'  					(int) ((Math.Pow((x)/255.0' y)*255.0) + 0.5));  			}
Magic Number,Assembly.Helpers,DDSConversion,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\DDSConversion.cs,GammaCorrect,The following statement contains a magic number: for (int x = 0; x < 0x100; x++)  			{  				table[x] = (byte) Math.Min(0xff'  					(int) ((Math.Pow((x)/255.0' y)*255.0) + 0.5));  			}
Magic Number,Assembly.Helpers,DDSConversion,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\DDSConversion.cs,GammaCorrect,The following statement contains a magic number: for (int x = 0; x < 0x100; x++)  			{  				table[x] = (byte) Math.Min(0xff'  					(int) ((Math.Pow((x)/255.0' y)*255.0) + 0.5));  			}
Magic Number,Assembly.Helpers,DDSConversion,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\DDSConversion.cs,GammaCorrect,The following statement contains a magic number: int num3 = width*((imageData.PixelFormat == PixelFormat.Format8bppIndexed) ? 1 : 3);
Magic Number,Assembly.Helpers,DDSConversion,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\DDSConversion.cs,Deswizzle,The following statement contains a magic number: string randomBuf = BitConverter.ToString(es.ReadBlock(12)).Replace("-"' "");
Magic Number,Assembly.Helpers,DDSConversion,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\DDSConversion.cs,Deswizzle,The following statement contains a magic number: int size = width*height*4;
Magic Number,Assembly.Helpers,DDSConversion,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\DDSConversion.cs,DeswizzleA2R10G10B10,The following statement contains a magic number: for (int y = 0; y < height; y++)  			{  				for (int x = 0; x < width; x++)  				{  					uint argb = BitConverter.ToUInt32(buffer' index);    					uint r = ((argb & 0x3FF00000) >> 22) /*<< 16*/;  					uint g = ((argb & 0xFFC00) >> 12) /*<< 8*/;  					uint b = (argb & 0x3FF) >> 2;  					//uint final = a | r | g | b;    					buffer[index++] = (byte) b;  					buffer[index++] = (byte) g;  					buffer[index++] = (byte) r;  					buffer[index++] = 255; //Set the alpha as 255  				}  			}
Magic Number,Assembly.Helpers,DDSConversion,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\DDSConversion.cs,DeswizzleA2R10G10B10,The following statement contains a magic number: for (int y = 0; y < height; y++)  			{  				for (int x = 0; x < width; x++)  				{  					uint argb = BitConverter.ToUInt32(buffer' index);    					uint r = ((argb & 0x3FF00000) >> 22) /*<< 16*/;  					uint g = ((argb & 0xFFC00) >> 12) /*<< 8*/;  					uint b = (argb & 0x3FF) >> 2;  					//uint final = a | r | g | b;    					buffer[index++] = (byte) b;  					buffer[index++] = (byte) g;  					buffer[index++] = (byte) r;  					buffer[index++] = 255; //Set the alpha as 255  				}  			}
Magic Number,Assembly.Helpers,DDSConversion,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\DDSConversion.cs,DeswizzleA2R10G10B10,The following statement contains a magic number: for (int y = 0; y < height; y++)  			{  				for (int x = 0; x < width; x++)  				{  					uint argb = BitConverter.ToUInt32(buffer' index);    					uint r = ((argb & 0x3FF00000) >> 22) /*<< 16*/;  					uint g = ((argb & 0xFFC00) >> 12) /*<< 8*/;  					uint b = (argb & 0x3FF) >> 2;  					//uint final = a | r | g | b;    					buffer[index++] = (byte) b;  					buffer[index++] = (byte) g;  					buffer[index++] = (byte) r;  					buffer[index++] = 255; //Set the alpha as 255  				}  			}
Magic Number,Assembly.Helpers,DDSConversion,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\DDSConversion.cs,DeswizzleA2R10G10B10,The following statement contains a magic number: for (int y = 0; y < height; y++)  			{  				for (int x = 0; x < width; x++)  				{  					uint argb = BitConverter.ToUInt32(buffer' index);    					uint r = ((argb & 0x3FF00000) >> 22) /*<< 16*/;  					uint g = ((argb & 0xFFC00) >> 12) /*<< 8*/;  					uint b = (argb & 0x3FF) >> 2;  					//uint final = a | r | g | b;    					buffer[index++] = (byte) b;  					buffer[index++] = (byte) g;  					buffer[index++] = (byte) r;  					buffer[index++] = 255; //Set the alpha as 255  				}  			}
Magic Number,Assembly.Helpers,DDSConversion,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\DDSConversion.cs,DeswizzleA2R10G10B10,The following statement contains a magic number: var final = new Bitmap(width' height' width*4'  				PixelFormat.Format32bppArgb' ptr);
Magic Number,Assembly.Helpers,DDSConversion,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\DDSConversion.cs,DeswizzleA8R8G8B8,The following statement contains a magic number: for (int y = 0; y < height; y++)  			{  				for (int x = 0; x < width; x++)  				{  					BitConverter.ToUInt32(buffer' index);    					uint b = buffer[index];  					uint g = buffer[index + 1];  					uint r = buffer[index + 2];    					buffer[index++] = (byte) b;  					buffer[index++] = (byte) g;  					buffer[index++] = (byte) r;  					buffer[index++] = 255; //Set the alpha as 255  				}  			}
Magic Number,Assembly.Helpers,DDSConversion,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\DDSConversion.cs,DeswizzleA8R8G8B8,The following statement contains a magic number: for (int y = 0; y < height; y++)  			{  				for (int x = 0; x < width; x++)  				{  					BitConverter.ToUInt32(buffer' index);    					uint b = buffer[index];  					uint g = buffer[index + 1];  					uint r = buffer[index + 2];    					buffer[index++] = (byte) b;  					buffer[index++] = (byte) g;  					buffer[index++] = (byte) r;  					buffer[index++] = 255; //Set the alpha as 255  				}  			}
Magic Number,Assembly.Helpers,DDSConversion,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\DDSConversion.cs,DeswizzleA8R8G8B8,The following statement contains a magic number: var final = new Bitmap(width' height' width*4'  				PixelFormat.Format32bppArgb' ptr);
Magic Number,Assembly.Helpers,INIFile,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\INIClass.cs,IniReadValue,The following statement contains a magic number: var temp = new StringBuilder(255);
Magic Number,Assembly.Helpers,INIFile,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\INIClass.cs,IniReadValue,The following statement contains a magic number: GetPrivateProfileString(Section' Key' ""' temp' 255' path);
Magic Number,Assembly.Helpers,JumpLists,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\JumpLists.cs,UpdateJumplists,The following statement contains a magic number: if (App.AssemblyStorage.AssemblySettings.ApplicationRecents != null)  			{  				for (int i = 0; i < 10; i++)  				{  					if (i > App.AssemblyStorage.AssemblySettings.ApplicationRecents.Count - 1)  						break;    					var task = new JumpTask();  					int iconIndex = -200;  					switch (App.AssemblyStorage.AssemblySettings.ApplicationRecents[i].FileType)  					{  						case Settings.RecentFileType.Blf:  							iconIndex = -200;  							break;  						case Settings.RecentFileType.Cache:  							iconIndex = -201;  							break;  						case Settings.RecentFileType.MapInfo:  							iconIndex = -202;  							break;  					}    					task.ApplicationPath = VariousFunctions.GetApplicationAssemblyLocation();  					task.Arguments = string.Format("assembly://open \"{0}\""'  						App.AssemblyStorage.AssemblySettings.ApplicationRecents[i].FilePath);  					task.WorkingDirectory = VariousFunctions.GetApplicationLocation();    					task.IconResourcePath = iconLibraryPath;  					task.IconResourceIndex = iconIndex;    					task.CustomCategory = "Recent";  					task.Title = App.AssemblyStorage.AssemblySettings.ApplicationRecents[i].FileName + " - " +  					             App.AssemblyStorage.AssemblySettings.ApplicationRecents[i].FileGame;  					task.Description = string.Format("Open {0} in Assembly. ({1})"'  						App.AssemblyStorage.AssemblySettings.ApplicationRecents[i].FileName'  						App.AssemblyStorage.AssemblySettings.ApplicationRecents[i].FilePath);    					jump.JumpItems.Add(task);  				}  			}
Magic Number,Assembly.Helpers,JumpLists,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\JumpLists.cs,UpdateJumplists,The following statement contains a magic number: if (App.AssemblyStorage.AssemblySettings.ApplicationRecents != null)  			{  				for (int i = 0; i < 10; i++)  				{  					if (i > App.AssemblyStorage.AssemblySettings.ApplicationRecents.Count - 1)  						break;    					var task = new JumpTask();  					int iconIndex = -200;  					switch (App.AssemblyStorage.AssemblySettings.ApplicationRecents[i].FileType)  					{  						case Settings.RecentFileType.Blf:  							iconIndex = -200;  							break;  						case Settings.RecentFileType.Cache:  							iconIndex = -201;  							break;  						case Settings.RecentFileType.MapInfo:  							iconIndex = -202;  							break;  					}    					task.ApplicationPath = VariousFunctions.GetApplicationAssemblyLocation();  					task.Arguments = string.Format("assembly://open \"{0}\""'  						App.AssemblyStorage.AssemblySettings.ApplicationRecents[i].FilePath);  					task.WorkingDirectory = VariousFunctions.GetApplicationLocation();    					task.IconResourcePath = iconLibraryPath;  					task.IconResourceIndex = iconIndex;    					task.CustomCategory = "Recent";  					task.Title = App.AssemblyStorage.AssemblySettings.ApplicationRecents[i].FileName + " - " +  					             App.AssemblyStorage.AssemblySettings.ApplicationRecents[i].FileGame;  					task.Description = string.Format("Open {0} in Assembly. ({1})"'  						App.AssemblyStorage.AssemblySettings.ApplicationRecents[i].FileName'  						App.AssemblyStorage.AssemblySettings.ApplicationRecents[i].FilePath);    					jump.JumpItems.Add(task);  				}  			}
Magic Number,Assembly.Helpers,JumpLists,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\JumpLists.cs,UpdateJumplists,The following statement contains a magic number: if (App.AssemblyStorage.AssemblySettings.ApplicationRecents != null)  			{  				for (int i = 0; i < 10; i++)  				{  					if (i > App.AssemblyStorage.AssemblySettings.ApplicationRecents.Count - 1)  						break;    					var task = new JumpTask();  					int iconIndex = -200;  					switch (App.AssemblyStorage.AssemblySettings.ApplicationRecents[i].FileType)  					{  						case Settings.RecentFileType.Blf:  							iconIndex = -200;  							break;  						case Settings.RecentFileType.Cache:  							iconIndex = -201;  							break;  						case Settings.RecentFileType.MapInfo:  							iconIndex = -202;  							break;  					}    					task.ApplicationPath = VariousFunctions.GetApplicationAssemblyLocation();  					task.Arguments = string.Format("assembly://open \"{0}\""'  						App.AssemblyStorage.AssemblySettings.ApplicationRecents[i].FilePath);  					task.WorkingDirectory = VariousFunctions.GetApplicationLocation();    					task.IconResourcePath = iconLibraryPath;  					task.IconResourceIndex = iconIndex;    					task.CustomCategory = "Recent";  					task.Title = App.AssemblyStorage.AssemblySettings.ApplicationRecents[i].FileName + " - " +  					             App.AssemblyStorage.AssemblySettings.ApplicationRecents[i].FileGame;  					task.Description = string.Format("Open {0} in Assembly. ({1})"'  						App.AssemblyStorage.AssemblySettings.ApplicationRecents[i].FileName'  						App.AssemblyStorage.AssemblySettings.ApplicationRecents[i].FilePath);    					jump.JumpItems.Add(task);  				}  			}
Magic Number,Assembly.Helpers,JumpLists,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\JumpLists.cs,UpdateJumplists,The following statement contains a magic number: if (App.AssemblyStorage.AssemblySettings.ApplicationRecents != null)  			{  				for (int i = 0; i < 10; i++)  				{  					if (i > App.AssemblyStorage.AssemblySettings.ApplicationRecents.Count - 1)  						break;    					var task = new JumpTask();  					int iconIndex = -200;  					switch (App.AssemblyStorage.AssemblySettings.ApplicationRecents[i].FileType)  					{  						case Settings.RecentFileType.Blf:  							iconIndex = -200;  							break;  						case Settings.RecentFileType.Cache:  							iconIndex = -201;  							break;  						case Settings.RecentFileType.MapInfo:  							iconIndex = -202;  							break;  					}    					task.ApplicationPath = VariousFunctions.GetApplicationAssemblyLocation();  					task.Arguments = string.Format("assembly://open \"{0}\""'  						App.AssemblyStorage.AssemblySettings.ApplicationRecents[i].FilePath);  					task.WorkingDirectory = VariousFunctions.GetApplicationLocation();    					task.IconResourcePath = iconLibraryPath;  					task.IconResourceIndex = iconIndex;    					task.CustomCategory = "Recent";  					task.Title = App.AssemblyStorage.AssemblySettings.ApplicationRecents[i].FileName + " - " +  					             App.AssemblyStorage.AssemblySettings.ApplicationRecents[i].FileGame;  					task.Description = string.Format("Open {0} in Assembly. ({1})"'  						App.AssemblyStorage.AssemblySettings.ApplicationRecents[i].FileName'  						App.AssemblyStorage.AssemblySettings.ApplicationRecents[i].FilePath);    					jump.JumpItems.Add(task);  				}  			}
Magic Number,Assembly.Helpers,JumpLists,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\JumpLists.cs,UpdateJumplists,The following statement contains a magic number: if (App.AssemblyStorage.AssemblySettings.ApplicationRecents != null)  			{  				for (int i = 0; i < 10; i++)  				{  					if (i > App.AssemblyStorage.AssemblySettings.ApplicationRecents.Count - 1)  						break;    					var task = new JumpTask();  					int iconIndex = -200;  					switch (App.AssemblyStorage.AssemblySettings.ApplicationRecents[i].FileType)  					{  						case Settings.RecentFileType.Blf:  							iconIndex = -200;  							break;  						case Settings.RecentFileType.Cache:  							iconIndex = -201;  							break;  						case Settings.RecentFileType.MapInfo:  							iconIndex = -202;  							break;  					}    					task.ApplicationPath = VariousFunctions.GetApplicationAssemblyLocation();  					task.Arguments = string.Format("assembly://open \"{0}\""'  						App.AssemblyStorage.AssemblySettings.ApplicationRecents[i].FilePath);  					task.WorkingDirectory = VariousFunctions.GetApplicationLocation();    					task.IconResourcePath = iconLibraryPath;  					task.IconResourceIndex = iconIndex;    					task.CustomCategory = "Recent";  					task.Title = App.AssemblyStorage.AssemblySettings.ApplicationRecents[i].FileName + " - " +  					             App.AssemblyStorage.AssemblySettings.ApplicationRecents[i].FileGame;  					task.Description = string.Format("Open {0} in Assembly. ({1})"'  						App.AssemblyStorage.AssemblySettings.ApplicationRecents[i].FileName'  						App.AssemblyStorage.AssemblySettings.ApplicationRecents[i].FilePath);    					jump.JumpItems.Add(task);  				}  			}
Magic Number,Assembly.Helpers,VariousFunctions,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\VariousFunctions.cs,StreamToByteArray,The following statement contains a magic number: var buffer = new byte[16*1024];
Magic Number,Assembly.Helpers,VariousFunctions,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\VariousFunctions.cs,StreamToByteArray,The following statement contains a magic number: var buffer = new byte[16*1024];
Magic Number,Assembly.Helpers.Cryptography,AesCrypto,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Cryptography\AES.cs,EncryptData,The following statement contains a magic number: byte[] keyBytes = derivedPassword.GetBytes(KeySize/8);
Magic Number,Assembly.Helpers.Cryptography,AesCrypto,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Cryptography\AES.cs,DecryptData,The following statement contains a magic number: byte[] keyBytes = derivedPassword.GetBytes(KeySize/8);
Magic Number,Assembly.Helpers.Cryptography,RsaCrypto,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Cryptography\RSA.cs,EncryptData,The following statement contains a magic number: string fullKey = publickey.Substring(31);
Magic Number,Assembly.Helpers.Cryptography,RsaCrypto,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Cryptography\RSA.cs,EncryptData,The following statement contains a magic number: const int maxLength = 214;
Magic Number,Assembly.Helpers.Cryptography,RsaCrypto,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Cryptography\RSA.cs,DecryptData,The following statement contains a magic number: string fullKey = privatekey.Substring(31);
Magic Number,Assembly.Helpers.Cryptography,RsaCrypto,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Cryptography\RSA.cs,DecryptData,The following statement contains a magic number: var rsa = new RSACryptoServiceProvider(2048);
Magic Number,Assembly.Helpers.Cryptography,RsaCrypto,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Cryptography\RSA.cs,DecryptData,The following statement contains a magic number: const int base64BlockSize = (256%3 != 0) ? ((256/3)*4) + 4 : (256/3)*4;
Magic Number,Assembly.Helpers.Cryptography,RsaCrypto,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Cryptography\RSA.cs,DecryptData,The following statement contains a magic number: const int base64BlockSize = (256%3 != 0) ? ((256/3)*4) + 4 : (256/3)*4;
Magic Number,Assembly.Helpers.Cryptography,RsaCrypto,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Cryptography\RSA.cs,DecryptData,The following statement contains a magic number: const int base64BlockSize = (256%3 != 0) ? ((256/3)*4) + 4 : (256/3)*4;
Magic Number,Assembly.Helpers.Cryptography,RsaCrypto,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Cryptography\RSA.cs,DecryptData,The following statement contains a magic number: const int base64BlockSize = (256%3 != 0) ? ((256/3)*4) + 4 : (256/3)*4;
Magic Number,Assembly.Helpers.Cryptography,RsaCrypto,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Cryptography\RSA.cs,DecryptData,The following statement contains a magic number: const int base64BlockSize = (256%3 != 0) ? ((256/3)*4) + 4 : (256/3)*4;
Magic Number,Assembly.Helpers.Cryptography,RsaCrypto,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Cryptography\RSA.cs,DecryptData,The following statement contains a magic number: const int base64BlockSize = (256%3 != 0) ? ((256/3)*4) + 4 : (256/3)*4;
Magic Number,Assembly.Helpers.Cryptography,RsaCrypto,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Cryptography\RSA.cs,DecryptData,The following statement contains a magic number: const int base64BlockSize = (256%3 != 0) ? ((256/3)*4) + 4 : (256/3)*4;
Magic Number,Assembly.Helpers.Cryptography,RsaCrypto,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Cryptography\RSA.cs,DecryptData,The following statement contains a magic number: const int base64BlockSize = (256%3 != 0) ? ((256/3)*4) + 4 : (256/3)*4;
Magic Number,Assembly.Helpers.Cryptography,RsaCrypto,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Cryptography\RSA.cs,DecryptData,The following statement contains a magic number: const int base64BlockSize = (256%3 != 0) ? ((256/3)*4) + 4 : (256/3)*4;
Magic Number,Assembly.Helpers.Cryptography,Sha1Crypto,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Cryptography\SHA1.cs,ComputeHashToString,The following statement contains a magic number: var unicodeText = new byte[str.Length*2];
Magic Number,Assembly.Helpers.Cryptography,Sha1Crypto,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Cryptography\SHA1.cs,ComputeHashToByteArray,The following statement contains a magic number: var unicodeText = new byte[str.Length*2];
Magic Number,Assembly.Helpers.Native,DwmDropShadow,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Native\DwmDropShadow.cs,DropShadow,The following statement contains a magic number: try  			{  				var helper = new WindowInteropHelper(window);  				int val = 2;  				int ret1 = DwmSetWindowAttribute(helper.Handle' 2' ref val' 4);    				if (ret1 != 0)  					return false;    				var m = new Margins {Bottom = 0' Left = 0' Right = 0' Top = 0};  				int ret2 = DwmExtendFrameIntoClientArea(helper.Handle' ref m);  				return ret2 == 0;  			}  			catch  			{  				// Probably dwmapi.dll not found (incompatible OS)  				return false;  			}
Magic Number,Assembly.Helpers.Native,DwmDropShadow,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Native\DwmDropShadow.cs,DropShadow,The following statement contains a magic number: try  			{  				var helper = new WindowInteropHelper(window);  				int val = 2;  				int ret1 = DwmSetWindowAttribute(helper.Handle' 2' ref val' 4);    				if (ret1 != 0)  					return false;    				var m = new Margins {Bottom = 0' Left = 0' Right = 0' Top = 0};  				int ret2 = DwmExtendFrameIntoClientArea(helper.Handle' ref m);  				return ret2 == 0;  			}  			catch  			{  				// Probably dwmapi.dll not found (incompatible OS)  				return false;  			}
Magic Number,Assembly.Helpers.Native,DwmDropShadow,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Native\DwmDropShadow.cs,DropShadow,The following statement contains a magic number: try  			{  				var helper = new WindowInteropHelper(window);  				int val = 2;  				int ret1 = DwmSetWindowAttribute(helper.Handle' 2' ref val' 4);    				if (ret1 != 0)  					return false;    				var m = new Margins {Bottom = 0' Left = 0' Right = 0' Top = 0};  				int ret2 = DwmExtendFrameIntoClientArea(helper.Handle' ref m);  				return ret2 == 0;  			}  			catch  			{  				// Probably dwmapi.dll not found (incompatible OS)  				return false;  			}
Magic Number,Assembly.Helpers.Native,CaptionHitTester,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Native\WindowMovement.cs,HitTestHook,The following statement contains a magic number: if (msg == WM_NCHITTEST)  				{  					// Set handled to true because we need to do the default test anyway  					// and can just return defaultTest (below)  					handled = true;    					// Don't check if the mouse isn't over the client area  					IntPtr defaultTest = DefWindowProc(hwnd' msg' wParam' lParam);  					if ((int) defaultTest != HTCLIENT)  						return defaultTest;    					// Get the cursor position on the screen from lParam  					int screenPos = lParam.ToInt32();  					int x = (short) (screenPos & 0xFFFF); // Low word  					int y = (short) (screenPos >> 16); // High word    					// Get the position relative to the window  					Point clientPos = _window.PointFromScreen(new Point(x' y));    					// Check if the mouse is over the titlebar  					// (HitTestResult stores the result to _testResult)  					_testResult = null;  					VisualTreeHelper.HitTest(_window' HitTestFilter' HitTestResult' new PointHitTestParameters(clientPos));    					if (_testResult != null && _testResult.VisualHit != null)  					{  						// Only accept objects which have the WindowMovement.DragsWindow attached property set to true  						if (HasDragsWindowEnabled(_testResult.VisualHit))  							return (IntPtr) HTCAPTION; // Return HTCAPTION to make the WM think the titlebar was clicked  					}    					return defaultTest;  				}
Magic Number,Assembly.Helpers.Models,ObjExporter,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Models\ObjExporter.cs,ProcessSubmeshIndices,The following statement contains a magic number: for (int i = 2; i < indices.Length; i++)  			{  				int v0 = indices[i - 2] + 1 + baseIndex;  				int v1 = indices[i - 1] + 1 + baseIndex;  				int v2 = indices[i] + 1 + baseIndex;  				if (v0 == v1 || v0 == v2 || v1 == v2)  					continue; // Throw the triangle out    				// TODO: We should probably check if the vertices actually have normals and texture coordinates on them  				_output.WriteLine("f {0}/{0}/{0} {1}/{1}/{1} {2}/{2}/{2}"' v0' v1' v2);  			}
Magic Number,Assembly.Helpers.Models,ObjExporter,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Models\ObjExporter.cs,ProcessSubmeshIndices,The following statement contains a magic number: for (int i = 2; i < indices.Length; i++)  			{  				int v0 = indices[i - 2] + 1 + baseIndex;  				int v1 = indices[i - 1] + 1 + baseIndex;  				int v2 = indices[i] + 1 + baseIndex;  				if (v0 == v1 || v0 == v2 || v1 == v2)  					continue; // Throw the triangle out    				// TODO: We should probably check if the vertices actually have normals and texture coordinates on them  				_output.WriteLine("f {0}/{0}/{0} {1}/{1}/{1} {2}/{2}/{2}"' v0' v1' v2);  			}
Magic Number,Assembly.Helpers.Plugins,ThirdGenPluginVisitor,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Plugins\ThirdGenPluginVisitor.cs,VisitUnicList,The following statement contains a magic number: for (var i = 0; i < languages; i++)  			{  				AddValue(new Uint16Data("Language " + i + " " + name + " Index"' (uint)(offset + i * 4)' 0' "uint16"' 0' pluginLine));  				AddValue(new Uint16Data("Language " + i + " " + name + " Count"' (uint)(offset + i * 4 + 2)' 0' "uint16"' 0' pluginLine));  			}
Magic Number,Assembly.Helpers.Plugins,ThirdGenPluginVisitor,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Plugins\ThirdGenPluginVisitor.cs,VisitUnicList,The following statement contains a magic number: for (var i = 0; i < languages; i++)  			{  				AddValue(new Uint16Data("Language " + i + " " + name + " Index"' (uint)(offset + i * 4)' 0' "uint16"' 0' pluginLine));  				AddValue(new Uint16Data("Language " + i + " " + name + " Count"' (uint)(offset + i * 4 + 2)' 0' "uint16"' 0' pluginLine));  			}
Magic Number,Assembly.Helpers.Plugins,ThirdGenPluginVisitor,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Plugins\ThirdGenPluginVisitor.cs,VisitUnicList,The following statement contains a magic number: for (var i = 0; i < languages; i++)  			{  				AddValue(new Uint16Data("Language " + i + " " + name + " Index"' (uint)(offset + i * 4)' 0' "uint16"' 0' pluginLine));  				AddValue(new Uint16Data("Language " + i + " " + name + " Count"' (uint)(offset + i * 4 + 2)' 0' "uint16"' 0' pluginLine));  			}
Magic Number,Assembly.Helpers.UIX,AnimationHelper,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\UIX\AnimationHelper.cs,FadeIn,The following statement contains a magic number: FadeIn(controlToFade' 1000);
Magic Number,Assembly.Helpers.UIX,AnimationHelper,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\UIX\AnimationHelper.cs,FadeOut,The following statement contains a magic number: FadeOut(controlToFade' 250);
Magic Number,Assembly.Metro.Controls.PageTemplates,ImgurHistoryPage,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\ImgurHistoryPage.xaml.cs,URL_MouseDown,The following statement contains a magic number: if (e.ClickCount == 2)  				Clipboard.SetText(((TextBlock)e.OriginalSource).Text);
Magic Number,Assembly.Metro.Controls.PageTemplates,PatchControl,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\PatchControl.xaml.cs,btnCreatePatchModifiedMap_Click,The following statement contains a magic number: if (engine != null && engine.Name != null)  			{  				switch (engine.Name)  				{  					case "Halo 2 Vista":  						cboxCreatePatchTargetGame.SelectedIndex = (int)TargetGame.Halo2Vista;  						break;  					case "Halo 3: ODST":  						cboxCreatePatchTargetGame.SelectedIndex = (int)TargetGame.Halo3ODST;  						break;  					default:  						if (engine.Name.Contains("Halo 3"))  							cboxCreatePatchTargetGame.SelectedIndex = (int)TargetGame.Halo3;  						else if (engine.Name.Contains("Halo: Reach"))  							cboxCreatePatchTargetGame.SelectedIndex = (int)TargetGame.HaloReach;  						else if (engine.Name.Contains("Halo 4"))  							cboxCreatePatchTargetGame.SelectedIndex = (int)TargetGame.Halo4;  						else  							cboxCreatePatchTargetGame.SelectedIndex = 5; // Other  						break;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates,PatchControl,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\PatchControl.xaml.cs,CheckAllCreateMetaFilesExists,The following statement contains a magic number: if (cbCreatePatchHasCustomMeta.IsChecked == null || !(bool) cbCreatePatchHasCustomMeta.IsChecked ||  			    cboxCreatePatchTargetGame.SelectedIndex >= 4) return true;
Magic Number,Assembly.Metro.Controls.PageTemplates,PatchControl,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\PatchControl.xaml.cs,btnCreatePatch_Click,The following statement contains a magic number: try  			{  				// Check the user isn't completly retarded  				if (!CheckAllCreateMandatoryFields())  					return;    				// Check the user isn't a skid  				if (!CheckAllCreateMetaFilesExists())  					return;    				// Paths  				string cleanMapPath = txtCreatePatchUnModifiedMap.Text;  				string moddedMapPath = txtCreatePatchModifiedMap.Text;  				string outputPath = txtCreatePatchOutputPatch.Text;  				string previewImage = txtCreatePatchPreviewImage.Text;    				// Details  				string author = txtCreatePatchContentAuthor.Text;  				string desc = txtCreatePatchContentDescription.Text;  				string name = txtCreatePatchContentName.Text;  				string outputName = txtCreatePatchOutputName.Text;    				// Make dat patch  				var patch = new Patch  				{  					Author = author'  					Description = desc'  					Name = name'  					OutputName = outputName'  					Screenshot = String.IsNullOrEmpty(previewImage)  						? null  						: File.ReadAllBytes(previewImage)  				};    				EndianReader originalReader = null;  				EndianReader newReader = null;  				try  				{  					originalReader = new EndianReader(File.OpenRead(cleanMapPath)' Endian.BigEndian);  					newReader = new EndianReader(File.OpenRead(moddedMapPath)' Endian.BigEndian);    					ICacheFile originalFile = CacheFileLoader.LoadCacheFile(originalReader'  						App.AssemblyStorage.AssemblySettings.DefaultDatabase);  					ICacheFile newFile = CacheFileLoader.LoadCacheFile(newReader' App.AssemblyStorage.AssemblySettings.DefaultDatabase);    					if (cbCreatePatchHasCustomMeta.IsChecked != null && (bool) cbCreatePatchHasCustomMeta.IsChecked &&  					    cboxCreatePatchTargetGame.SelectedIndex < 4)  					{  						var targetGame = (TargetGame) cboxCreatePatchTargetGame.SelectedIndex;  						byte[] mapInfo = File.ReadAllBytes(txtCreatePatchMapInfo.Text);  						var mapInfoFileInfo = new FileInfo(txtCreatePatchMapInfo.Text);  						FileInfo blfFileInfo;    						patch.CustomBlfContent = new BlfContent(mapInfoFileInfo.FullName' mapInfo' targetGame);    						#region Blf Data    						if (PatchCreationBlfOption0.Visibility == Visibility.Visible)  						{  							blfFileInfo = new FileInfo(txtCreatePatchblf0.Text);  							patch.CustomBlfContent.BlfContainerEntries.Add(new BlfContainerEntry(blfFileInfo.Name'  								File.ReadAllBytes(blfFileInfo.FullName)));  						}  						if (PatchCreationBlfOption1.Visibility == Visibility.Visible)  						{  							blfFileInfo = new FileInfo(txtCreatePatchblf1.Text);  							patch.CustomBlfContent.BlfContainerEntries.Add(new BlfContainerEntry(blfFileInfo.Name'  								File.ReadAllBytes(blfFileInfo.FullName)));  						}  						if (PatchCreationBlfOption2.Visibility == Visibility.Visible)  						{  							blfFileInfo = new FileInfo(txtCreatePatchblf2.Text);  							patch.CustomBlfContent.BlfContainerEntries.Add(new BlfContainerEntry(blfFileInfo.Name'  								File.ReadAllBytes(blfFileInfo.FullName)));  						}  						if (PatchCreationBlfOption3.Visibility == Visibility.Visible)  						{  							blfFileInfo = new FileInfo(txtCreatePatchblf3.Text);  							patch.CustomBlfContent.BlfContainerEntries.Add(new BlfContainerEntry(blfFileInfo.Name'  								File.ReadAllBytes(blfFileInfo.FullName)));  						}    						#endregion  					}    					PatchBuilder.BuildPatch(originalFile' originalReader' newFile' newReader' patch);  				}  				finally  				{  					if (originalReader != null)  						originalReader.Close();  					if (newReader != null)  						newReader.Close();  				}    				IWriter output = new EndianWriter(File.Open(outputPath' FileMode.Create' FileAccess.Write)' Endian.BigEndian);  				AssemblyPatchWriter.WritePatch(patch' output);  				output.Close();    				MetroMessageBox.Show("Patch Created!"'  					"Your patch has been created in the designated location. Happy sailing' modder!");  			}  			catch (Exception ex)  			{  				MetroException.Show(ex);  			}
Magic Number,Assembly.Metro.Controls.PageTemplates,PatchControl,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\PatchControl.xaml.cs,LoadPatch,The following statement contains a magic number: try  			{  				using (var reader = new EndianReader(File.OpenRead(txtApplyPatchFile.Text)' Endian.LittleEndian))  				{  					string magic = reader.ReadAscii(4);  					reader.SeekTo(0);    					if (magic == "asmp")  					{  						// Load into UI  						reader.Endianness = Endian.BigEndian;  						currentPatch = AssemblyPatchLoader.LoadPatch(reader);  						txtApplyPatchAuthor.Text = currentPatch.Author;  						txtApplyPatchDesc.Text = currentPatch.Description;  						txtApplyPatchName.Text = currentPatch.Name;  						txtApplyPatchInternalName.Text = currentPatch.MapInternalName;  						//txtApplyPatchMapID.Text = currentPatch.MapID.ToString(CultureInfo.InvariantCulture);    						// Set Visibility  						PatchApplicationPatchExtra.Visibility =  							currentPatch.CustomBlfContent != null  								? Visibility.Visible  								: Visibility.Collapsed;  						ApplyPatchControls.Visibility = Visibility.Visible;  						btnExtractInfo.IsEnabled = true;  					}  					else  					{  						currentPatch = OldPatchLoader.LoadPatch(reader' isAlteration);  						txtApplyPatchAuthor.Text = currentPatch.Author;  						txtApplyPatchDesc.Text = currentPatch.Description;  						txtApplyPatchName.Text = "Ascension/Alteration Patch";  						txtApplyPatchInternalName.Text = "Ascension/Alteration Patch";    						ApplyPatchControls.Visibility = Visibility.Visible;  						PatchApplicationPatchExtra.Visibility = Visibility.Collapsed;  						btnExtractInfo.IsEnabled = false;  					}  				}    				// Set Screenshot  				if (currentPatch.Screenshot == null)  				{  					// Set default  					var source = new Uri(@"/Assembly;component/Metro/Images/super_patcher.png"' UriKind.Relative);  					imgApplyPreview.Source = new BitmapImage(source);  				}  				else  				{  					var image = new BitmapImage();  					image.BeginInit();  					image.StreamSource = new MemoryStream(currentPatch.Screenshot);  					image.EndInit();  					imgApplyPreview.Source = image;  				}  			}  			catch (Exception ex)  			{  				MetroException.Show(ex);  			}
Magic Number,Assembly.Metro.Controls.PageTemplates,PatchControl,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\PatchControl.xaml.cs,LoadPatchToPoke,The following statement contains a magic number: try  			{  				using (var reader = new EndianReader(File.OpenRead(txtPokePatchFile.Text)' Endian.LittleEndian))  				{  					string magic = reader.ReadAscii(4);  					reader.SeekTo(0);    					if (magic == "asmp")  					{  						// Load into UI  						reader.Endianness = Endian.BigEndian;  						currentPatchToPoke = AssemblyPatchLoader.LoadPatch(reader);  						txtPokePatchAuthor.Text = currentPatchToPoke.Author;  						txtPokePatchDesc.Text = currentPatchToPoke.Description;  						txtPokePatchName.Text = currentPatchToPoke.Name;  						txtPokePatchInternalName.Text = currentPatchToPoke.MapInternalName;  						//txtPokePatchMapID.Text = currentPatchToPoke.MapID.ToString(CultureInfo.InvariantCulture);    						// Set Visibility  						PokePatchControls.Visibility = Visibility.Visible;  					}  					else  					{  						MetroMessageBox.Show("You can't poke a patch from Alteration/Ascension. Convert it to a Assembly Patch first");  						return;  					}  				}    				// Set Screenshot  				if (currentPatchToPoke.Screenshot == null)  				{  					// Set default  					var source = new Uri(@"/Assembly;component/Metro/Images/super_patcher.png"' UriKind.Relative);  					imgPokePreview.Source = new BitmapImage(source);  				}  				else  				{  					var image = new BitmapImage();  					image.BeginInit();  					image.StreamSource = new MemoryStream(currentPatchToPoke.Screenshot);  					image.EndInit();  					imgPokePreview.Source = image;  				}  			}  			catch (Exception ex)  			{  				MetroException.Show(ex);  			}
Magic Number,Assembly.Metro.Controls.PageTemplates,StartPage,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\StartPage.xaml.cs,UpdateRecents,The following statement contains a magic number: if (App.AssemblyStorage.AssemblySettings.ApplicationRecents.Count != 0)  			{  				int recentsCount = 0;  				foreach (Settings.RecentFileEntry entry in App.AssemblyStorage.AssemblySettings.ApplicationRecents)  				{  					if (recentsCount > 9)  						break;    					var btnRecent = new Button  					{  						Tag = entry'  						Style = (Style) FindResource("TabActiveButtons")'  						HorizontalAlignment = HorizontalAlignment.Stretch'  						ToolTip = entry.FilePath  					};  					btnRecent.Click += LoadRecentItem;    					if (entry.FileType == Settings.RecentFileType.Cache && App.AssemblyStorage.AssemblySettings.StartpageShowRecentsMap)  					{  						btnRecent.Content = string.Format("{0} - {1}"' entry.FileGame' entry.FileName.Replace("_"' "__"));  						panelRecents.Children.Add(btnRecent);  					}  					else if (entry.FileType == Settings.RecentFileType.Blf && App.AssemblyStorage.AssemblySettings.StartpageShowRecentsBlf)  					{  						btnRecent.Content = string.Format("Map Image - {0}"' entry.FileName.Replace("_"' "__"));  						panelRecents.Children.Add(btnRecent);  					}  					else if (entry.FileType == Settings.RecentFileType.MapInfo &&  					         App.AssemblyStorage.AssemblySettings.StartpageShowRecentsMapInfo)  					{  						btnRecent.Content = string.Format("Map Info - {0}"' entry.FileName.Replace("_"' "__"));  						panelRecents.Children.Add(btnRecent);  					}  					else if (entry.FileType == Settings.RecentFileType.Campaign &&  							 App.AssemblyStorage.AssemblySettings.StartpageShowRecentsCampaign)  					{  						btnRecent.Content = string.Format("Campaign - {0}"' entry.FileName.Replace("_"' "__"));  						panelRecents.Children.Add(btnRecent);  					}    					recentsCount++;  				}  			}  			else if (App.AssemblyStorage.AssemblySettings.ApplicationRecents.Count == 0)  				panelRecents.Children.Add(new TextBlock  				{  					Text = "It's lonely in here' get modding ;)"'  					Style = (Style) FindResource("GenericTextblock")'  					Margin = new Thickness(20' 0' 0' 0)  				});
Magic Number,Assembly.Metro.Controls.PageTemplates,StartPage,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\StartPage.xaml.cs,UpdateRecents,The following statement contains a magic number: if (App.AssemblyStorage.AssemblySettings.ApplicationRecents.Count != 0)  			{  				int recentsCount = 0;  				foreach (Settings.RecentFileEntry entry in App.AssemblyStorage.AssemblySettings.ApplicationRecents)  				{  					if (recentsCount > 9)  						break;    					var btnRecent = new Button  					{  						Tag = entry'  						Style = (Style) FindResource("TabActiveButtons")'  						HorizontalAlignment = HorizontalAlignment.Stretch'  						ToolTip = entry.FilePath  					};  					btnRecent.Click += LoadRecentItem;    					if (entry.FileType == Settings.RecentFileType.Cache && App.AssemblyStorage.AssemblySettings.StartpageShowRecentsMap)  					{  						btnRecent.Content = string.Format("{0} - {1}"' entry.FileGame' entry.FileName.Replace("_"' "__"));  						panelRecents.Children.Add(btnRecent);  					}  					else if (entry.FileType == Settings.RecentFileType.Blf && App.AssemblyStorage.AssemblySettings.StartpageShowRecentsBlf)  					{  						btnRecent.Content = string.Format("Map Image - {0}"' entry.FileName.Replace("_"' "__"));  						panelRecents.Children.Add(btnRecent);  					}  					else if (entry.FileType == Settings.RecentFileType.MapInfo &&  					         App.AssemblyStorage.AssemblySettings.StartpageShowRecentsMapInfo)  					{  						btnRecent.Content = string.Format("Map Info - {0}"' entry.FileName.Replace("_"' "__"));  						panelRecents.Children.Add(btnRecent);  					}  					else if (entry.FileType == Settings.RecentFileType.Campaign &&  							 App.AssemblyStorage.AssemblySettings.StartpageShowRecentsCampaign)  					{  						btnRecent.Content = string.Format("Campaign - {0}"' entry.FileName.Replace("_"' "__"));  						panelRecents.Children.Add(btnRecent);  					}    					recentsCount++;  				}  			}  			else if (App.AssemblyStorage.AssemblySettings.ApplicationRecents.Count == 0)  				panelRecents.Children.Add(new TextBlock  				{  					Text = "It's lonely in here' get modding ;)"'  					Style = (Style) FindResource("GenericTextblock")'  					Margin = new Thickness(20' 0' 0' 0)  				});
Magic Number,Assembly.Metro.Controls.PageTemplates.Games.Components,DebugTools,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\DebugTools.xaml.cs,btnConvert_Click,The following statement contains a magic number: if (convertingToOffset)  			{  				action = txtConverterAddress.Text.ToLowerInvariant().StartsWith("0x")  					? uint.Parse(txtConverterAddress.Text.Remove(0' 2)' NumberStyles.HexNumber)  					: uint.Parse(txtConverterAddress.Text);  			}  			else  			{  				action = txtCoverterOffset.Text.ToLowerInvariant().StartsWith("0x")  					? uint.Parse(txtCoverterOffset.Text.Remove(0' 2)' NumberStyles.HexNumber)  					: uint.Parse(txtCoverterOffset.Text);  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games.Components,DebugTools,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\DebugTools.xaml.cs,btnConvert_Click,The following statement contains a magic number: if (convertingToOffset)  			{  				action = txtConverterAddress.Text.ToLowerInvariant().StartsWith("0x")  					? uint.Parse(txtConverterAddress.Text.Remove(0' 2)' NumberStyles.HexNumber)  					: uint.Parse(txtConverterAddress.Text);  			}  			else  			{  				action = txtCoverterOffset.Text.ToLowerInvariant().StartsWith("0x")  					? uint.Parse(txtCoverterOffset.Text.Remove(0' 2)' NumberStyles.HexNumber)  					: uint.Parse(txtCoverterOffset.Text);  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games.Components,MetaInformation,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaInformation.xaml.cs,MetaDatumValueData_MouseDown,The following statement contains a magic number: if (e.ClickCount == 2)                  Clipboard.SetText(((TextBlock)e.OriginalSource).Text.Substring(13));
Magic Number,Assembly.Metro.Controls.PageTemplates.Games.Components,MetaInformation,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaInformation.xaml.cs,MetaDatumValueData_MouseDown,The following statement contains a magic number: if (e.ClickCount == 2)                  Clipboard.SetText(((TextBlock)e.OriginalSource).Text.Substring(13));
Magic Number,Assembly.Metro.Controls.PageTemplates.Games.Components,MetaInformation,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaInformation.xaml.cs,MetaAddrValueData_MouseDown,The following statement contains a magic number: if (e.ClickCount == 2)                  Clipboard.SetText(((TextBlock)e.OriginalSource).Text.Substring(16));
Magic Number,Assembly.Metro.Controls.PageTemplates.Games.Components,MetaInformation,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaInformation.xaml.cs,MetaAddrValueData_MouseDown,The following statement contains a magic number: if (e.ClickCount == 2)                  Clipboard.SetText(((TextBlock)e.OriginalSource).Text.Substring(16));
Magic Number,Assembly.Metro.Controls.PageTemplates.Games.Components,MetaInformation,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaInformation.xaml.cs,MetaOffsetValueData_MouseDown,The following statement contains a magic number: if (e.ClickCount == 2)                  Clipboard.SetText(((TextBlock)e.OriginalSource).Text.Substring(13));
Magic Number,Assembly.Metro.Controls.PageTemplates.Games.Components,MetaInformation,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaInformation.xaml.cs,MetaOffsetValueData_MouseDown,The following statement contains a magic number: if (e.ClickCount == 2)                  Clipboard.SetText(((TextBlock)e.OriginalSource).Text.Substring(13));
Magic Number,Assembly.Metro.Controls.PageTemplates.Games.Components,MetaInformation,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaInformation.xaml.cs,MetaNameValueData_MouseDown,The following statement contains a magic number: if (e.ClickCount == 2)                  Clipboard.SetText(((TextBlock)e.OriginalSource).Text);
Magic Number,Assembly.Metro.Controls.PageTemplates.Games.Components,MetaEditor,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaEditor.xaml.cs,txtSearch_TextChanged_1,The following statement contains a magic number: _searchTimer.Change(100' Timeout.Infinite);
Magic Number,Assembly.Metro.Controls.PageTemplates.Games.Components.Editors,SoundEditor,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\Editors\SoundEditor.xaml.cs,ExtractRaw,The following statement contains a magic number: using (var fileStream = _streamManager.OpenRead())  			{  				_resourcePages = new ResourcePage[2];  				_resourcePages[0] = _soundResource.Location.PrimaryPage;  				_resourcePages[1] = _soundResource.Location.SecondaryPage;    				for (var i = 0; i < _resourcePages.Length; i++)  				{  					var page = _resourcePages[i];  					if (page == null || (page.CompressedSize == 0 || page.UncompressedSize == 0))  						continue;  					var resourceFile = _cache;  					Stream resourceStream = null;  					if (page.FilePath != null)  					{  						var resourceCacheInfo =  								App.AssemblyStorage.AssemblySettings.HalomapResourceCachePaths.FirstOrDefault(  									r => r.EngineName == _buildInfo.Name);    						var resourceCachePath = (resourceCacheInfo != null)  							? resourceCacheInfo.ResourceCachePath  							: Path.GetDirectoryName(_cacheLocation);    						resourceCachePath = Path.Combine(resourceCachePath ?? ""' Path.GetFileName(page.FilePath));    						if (!File.Exists(resourceCachePath))  						{  							throw new FileNotFoundException("Unable to extract tag' because a resource it relies on is in a external cache '{0}' that could not be found. Check Assembly's settings and set the file path to resource caches.");  						}    						resourceStream =  							File.OpenRead(resourceCachePath);  						resourceFile = new ThirdGenCacheFile(new EndianReader(resourceStream' Endian.BigEndian)' _buildInfo'  							_cache.BuildString);  					}  					  					var tmpStream = new MemoryStream();  					var extractor = new ResourcePageExtractor(resourceFile);  					var path = Path.GetTempFileName();  					var pageStream = File.Open(path' FileMode.Create' FileAccess.ReadWrite);  					extractor.ExtractPage(page' resourceStream ?? fileStream.BaseStream' tmpStream);  					pageStream.Close();  					File.Delete(path);    					switch (i)  					{  						case 0:  							tmpStream.Position = _soundResource.Location.PrimaryOffset;  							break;    						case 1:  							tmpStream.Position = _soundResource.Location.SecondaryOffset;  							break;  					}    					var bytes = VariousFunctions.StreamToByteArray(tmpStream);  					if (bytes.Length > 0)  						outputBytes.AddRange(new List<byte>(bytes));  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,MetaReader,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\MetaReader.cs,VisitColourFloat,The following statement contains a magic number: foreach (char formatChar in field.Format)  				colorValue += ((int) (_reader.ReadFloat()*255)).ToString("X2");
Magic Number,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,MetaWriter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\MetaWriter.cs,VisitColourInt,The following statement contains a magic number: if (field.Value.Length == 7)  				field.Value = field.Value.Insert(1' "FF");
Magic Number,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,MetaWriter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\MetaWriter.cs,VisitColourInt,The following statement contains a magic number: foreach (char formatChar in field.Format)  			{  				switch (formatChar)  				{  					case 'a':  						byte alpha = byte.Parse(field.Value.Replace("#"' "").Remove(2)' NumberStyles.HexNumber);  						_writer.WriteByte(alpha);  						break;  					case 'r':  						byte red = byte.Parse(field.Value.Replace("#"' "").Remove(0' 2).Remove(2)' NumberStyles.HexNumber);  						_writer.WriteByte(red);  						break;  					case 'g':  						byte green = byte.Parse(field.Value.Replace("#"' "").Remove(0' 4).Remove(2)' NumberStyles.HexNumber);  						_writer.WriteByte(green);  						break;  					case 'b':  						byte blue = byte.Parse(field.Value.Replace("#"' "").Remove(0' 6)' NumberStyles.HexNumber);  						_writer.WriteByte(blue);  						break;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,MetaWriter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\MetaWriter.cs,VisitColourInt,The following statement contains a magic number: foreach (char formatChar in field.Format)  			{  				switch (formatChar)  				{  					case 'a':  						byte alpha = byte.Parse(field.Value.Replace("#"' "").Remove(2)' NumberStyles.HexNumber);  						_writer.WriteByte(alpha);  						break;  					case 'r':  						byte red = byte.Parse(field.Value.Replace("#"' "").Remove(0' 2).Remove(2)' NumberStyles.HexNumber);  						_writer.WriteByte(red);  						break;  					case 'g':  						byte green = byte.Parse(field.Value.Replace("#"' "").Remove(0' 4).Remove(2)' NumberStyles.HexNumber);  						_writer.WriteByte(green);  						break;  					case 'b':  						byte blue = byte.Parse(field.Value.Replace("#"' "").Remove(0' 6)' NumberStyles.HexNumber);  						_writer.WriteByte(blue);  						break;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,MetaWriter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\MetaWriter.cs,VisitColourInt,The following statement contains a magic number: foreach (char formatChar in field.Format)  			{  				switch (formatChar)  				{  					case 'a':  						byte alpha = byte.Parse(field.Value.Replace("#"' "").Remove(2)' NumberStyles.HexNumber);  						_writer.WriteByte(alpha);  						break;  					case 'r':  						byte red = byte.Parse(field.Value.Replace("#"' "").Remove(0' 2).Remove(2)' NumberStyles.HexNumber);  						_writer.WriteByte(red);  						break;  					case 'g':  						byte green = byte.Parse(field.Value.Replace("#"' "").Remove(0' 4).Remove(2)' NumberStyles.HexNumber);  						_writer.WriteByte(green);  						break;  					case 'b':  						byte blue = byte.Parse(field.Value.Replace("#"' "").Remove(0' 6)' NumberStyles.HexNumber);  						_writer.WriteByte(blue);  						break;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,MetaWriter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\MetaWriter.cs,VisitColourInt,The following statement contains a magic number: foreach (char formatChar in field.Format)  			{  				switch (formatChar)  				{  					case 'a':  						byte alpha = byte.Parse(field.Value.Replace("#"' "").Remove(2)' NumberStyles.HexNumber);  						_writer.WriteByte(alpha);  						break;  					case 'r':  						byte red = byte.Parse(field.Value.Replace("#"' "").Remove(0' 2).Remove(2)' NumberStyles.HexNumber);  						_writer.WriteByte(red);  						break;  					case 'g':  						byte green = byte.Parse(field.Value.Replace("#"' "").Remove(0' 4).Remove(2)' NumberStyles.HexNumber);  						_writer.WriteByte(green);  						break;  					case 'b':  						byte blue = byte.Parse(field.Value.Replace("#"' "").Remove(0' 6)' NumberStyles.HexNumber);  						_writer.WriteByte(blue);  						break;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,MetaWriter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\MetaWriter.cs,VisitColourInt,The following statement contains a magic number: foreach (char formatChar in field.Format)  			{  				switch (formatChar)  				{  					case 'a':  						byte alpha = byte.Parse(field.Value.Replace("#"' "").Remove(2)' NumberStyles.HexNumber);  						_writer.WriteByte(alpha);  						break;  					case 'r':  						byte red = byte.Parse(field.Value.Replace("#"' "").Remove(0' 2).Remove(2)' NumberStyles.HexNumber);  						_writer.WriteByte(red);  						break;  					case 'g':  						byte green = byte.Parse(field.Value.Replace("#"' "").Remove(0' 4).Remove(2)' NumberStyles.HexNumber);  						_writer.WriteByte(green);  						break;  					case 'b':  						byte blue = byte.Parse(field.Value.Replace("#"' "").Remove(0' 6)' NumberStyles.HexNumber);  						_writer.WriteByte(blue);  						break;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,MetaWriter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\MetaWriter.cs,VisitColourInt,The following statement contains a magic number: foreach (char formatChar in field.Format)  			{  				switch (formatChar)  				{  					case 'a':  						byte alpha = byte.Parse(field.Value.Replace("#"' "").Remove(2)' NumberStyles.HexNumber);  						_writer.WriteByte(alpha);  						break;  					case 'r':  						byte red = byte.Parse(field.Value.Replace("#"' "").Remove(0' 2).Remove(2)' NumberStyles.HexNumber);  						_writer.WriteByte(red);  						break;  					case 'g':  						byte green = byte.Parse(field.Value.Replace("#"' "").Remove(0' 4).Remove(2)' NumberStyles.HexNumber);  						_writer.WriteByte(green);  						break;  					case 'b':  						byte blue = byte.Parse(field.Value.Replace("#"' "").Remove(0' 6)' NumberStyles.HexNumber);  						_writer.WriteByte(blue);  						break;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,MetaWriter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\MetaWriter.cs,VisitColourFloat,The following statement contains a magic number: if (field.Value.Length == 7)  				field.Value = field.Value.Insert(1' "FF");
Magic Number,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,MetaWriter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\MetaWriter.cs,VisitColourFloat,The following statement contains a magic number: foreach (char formatChar in field.Format)  			{  				switch (formatChar)  				{  					case 'a':  						float alpha = Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(alpha);  						break;  					case 'r':  						float red =  							Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 2).Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(red);  						break;  					case 'g':  						float green =  							Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 4).Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(green);  						break;  					case 'b':  						float blue = Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 6)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(blue);  						break;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,MetaWriter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\MetaWriter.cs,VisitColourFloat,The following statement contains a magic number: foreach (char formatChar in field.Format)  			{  				switch (formatChar)  				{  					case 'a':  						float alpha = Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(alpha);  						break;  					case 'r':  						float red =  							Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 2).Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(red);  						break;  					case 'g':  						float green =  							Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 4).Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(green);  						break;  					case 'b':  						float blue = Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 6)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(blue);  						break;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,MetaWriter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\MetaWriter.cs,VisitColourFloat,The following statement contains a magic number: foreach (char formatChar in field.Format)  			{  				switch (formatChar)  				{  					case 'a':  						float alpha = Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(alpha);  						break;  					case 'r':  						float red =  							Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 2).Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(red);  						break;  					case 'g':  						float green =  							Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 4).Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(green);  						break;  					case 'b':  						float blue = Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 6)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(blue);  						break;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,MetaWriter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\MetaWriter.cs,VisitColourFloat,The following statement contains a magic number: foreach (char formatChar in field.Format)  			{  				switch (formatChar)  				{  					case 'a':  						float alpha = Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(alpha);  						break;  					case 'r':  						float red =  							Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 2).Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(red);  						break;  					case 'g':  						float green =  							Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 4).Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(green);  						break;  					case 'b':  						float blue = Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 6)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(blue);  						break;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,MetaWriter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\MetaWriter.cs,VisitColourFloat,The following statement contains a magic number: foreach (char formatChar in field.Format)  			{  				switch (formatChar)  				{  					case 'a':  						float alpha = Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(alpha);  						break;  					case 'r':  						float red =  							Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 2).Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(red);  						break;  					case 'g':  						float green =  							Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 4).Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(green);  						break;  					case 'b':  						float blue = Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 6)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(blue);  						break;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,MetaWriter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\MetaWriter.cs,VisitColourFloat,The following statement contains a magic number: foreach (char formatChar in field.Format)  			{  				switch (formatChar)  				{  					case 'a':  						float alpha = Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(alpha);  						break;  					case 'r':  						float red =  							Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 2).Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(red);  						break;  					case 'g':  						float green =  							Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 4).Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(green);  						break;  					case 'b':  						float blue = Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 6)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(blue);  						break;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,MetaWriter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\MetaWriter.cs,VisitColourFloat,The following statement contains a magic number: foreach (char formatChar in field.Format)  			{  				switch (formatChar)  				{  					case 'a':  						float alpha = Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(alpha);  						break;  					case 'r':  						float red =  							Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 2).Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(red);  						break;  					case 'g':  						float green =  							Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 4).Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(green);  						break;  					case 'b':  						float blue = Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 6)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(blue);  						break;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,MetaWriter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\MetaWriter.cs,VisitColourFloat,The following statement contains a magic number: foreach (char formatChar in field.Format)  			{  				switch (formatChar)  				{  					case 'a':  						float alpha = Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(alpha);  						break;  					case 'r':  						float red =  							Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 2).Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(red);  						break;  					case 'g':  						float green =  							Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 4).Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(green);  						break;  					case 'b':  						float blue = Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 6)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(blue);  						break;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,MetaWriter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\MetaWriter.cs,VisitColourFloat,The following statement contains a magic number: foreach (char formatChar in field.Format)  			{  				switch (formatChar)  				{  					case 'a':  						float alpha = Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(alpha);  						break;  					case 'r':  						float red =  							Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 2).Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(red);  						break;  					case 'g':  						float green =  							Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 4).Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(green);  						break;  					case 'b':  						float blue = Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 6)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(blue);  						break;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,MetaWriter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\MetaWriter.cs,VisitColourFloat,The following statement contains a magic number: foreach (char formatChar in field.Format)  			{  				switch (formatChar)  				{  					case 'a':  						float alpha = Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(alpha);  						break;  					case 'r':  						float red =  							Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 2).Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(red);  						break;  					case 'g':  						float green =  							Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 4).Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(green);  						break;  					case 'b':  						float blue = Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 6)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(blue);  						break;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloCampaign,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloCampaign.xaml.cs,cbLanguages_SelectionChanged,The following statement contains a magic number: if (_campaign != null && _startEditing)  			{  				if (_oldLanguage != -1)  				{  					// Save values to memory  					_campaign.HaloCampaign.MapNames[_oldLanguage] = txtMapName.Text.Trim();  					_campaign.HaloCampaign.MapDescriptions[_oldLanguage] = txtMapDesc.Text.Trim();    					// Make sure values arn't too long' kiddo  					if (_campaign.HaloCampaign.MapNames[_oldLanguage].Length > 30)  						_campaign.HaloCampaign.MapNames[_oldLanguage] = _campaign.HaloCampaign.MapNames[_oldLanguage].Remove(30);  					if (_campaign.HaloCampaign.MapDescriptions[_oldLanguage].Length > 126)  						_campaign.HaloCampaign.MapDescriptions[_oldLanguage] =  							_campaign.HaloCampaign.MapDescriptions[_oldLanguage].Remove(126);  				}    				// Update oldLanguage int  				_oldLanguage = cbLanguages.SelectedIndex;    				// Update UI  				txtMapName.Text = _campaign.HaloCampaign.MapNames[_oldLanguage];  				txtMapDesc.Text = _campaign.HaloCampaign.MapDescriptions[_oldLanguage];  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloCampaign,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloCampaign.xaml.cs,cbLanguages_SelectionChanged,The following statement contains a magic number: if (_campaign != null && _startEditing)  			{  				if (_oldLanguage != -1)  				{  					// Save values to memory  					_campaign.HaloCampaign.MapNames[_oldLanguage] = txtMapName.Text.Trim();  					_campaign.HaloCampaign.MapDescriptions[_oldLanguage] = txtMapDesc.Text.Trim();    					// Make sure values arn't too long' kiddo  					if (_campaign.HaloCampaign.MapNames[_oldLanguage].Length > 30)  						_campaign.HaloCampaign.MapNames[_oldLanguage] = _campaign.HaloCampaign.MapNames[_oldLanguage].Remove(30);  					if (_campaign.HaloCampaign.MapDescriptions[_oldLanguage].Length > 126)  						_campaign.HaloCampaign.MapDescriptions[_oldLanguage] =  							_campaign.HaloCampaign.MapDescriptions[_oldLanguage].Remove(126);  				}    				// Update oldLanguage int  				_oldLanguage = cbLanguages.SelectedIndex;    				// Update UI  				txtMapName.Text = _campaign.HaloCampaign.MapNames[_oldLanguage];  				txtMapDesc.Text = _campaign.HaloCampaign.MapDescriptions[_oldLanguage];  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloCampaign,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloCampaign.xaml.cs,cbLanguages_SelectionChanged,The following statement contains a magic number: if (_campaign != null && _startEditing)  			{  				if (_oldLanguage != -1)  				{  					// Save values to memory  					_campaign.HaloCampaign.MapNames[_oldLanguage] = txtMapName.Text.Trim();  					_campaign.HaloCampaign.MapDescriptions[_oldLanguage] = txtMapDesc.Text.Trim();    					// Make sure values arn't too long' kiddo  					if (_campaign.HaloCampaign.MapNames[_oldLanguage].Length > 30)  						_campaign.HaloCampaign.MapNames[_oldLanguage] = _campaign.HaloCampaign.MapNames[_oldLanguage].Remove(30);  					if (_campaign.HaloCampaign.MapDescriptions[_oldLanguage].Length > 126)  						_campaign.HaloCampaign.MapDescriptions[_oldLanguage] =  							_campaign.HaloCampaign.MapDescriptions[_oldLanguage].Remove(126);  				}    				// Update oldLanguage int  				_oldLanguage = cbLanguages.SelectedIndex;    				// Update UI  				txtMapName.Text = _campaign.HaloCampaign.MapNames[_oldLanguage];  				txtMapDesc.Text = _campaign.HaloCampaign.MapDescriptions[_oldLanguage];  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloCampaign,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloCampaign.xaml.cs,cbLanguages_SelectionChanged,The following statement contains a magic number: if (_campaign != null && _startEditing)  			{  				if (_oldLanguage != -1)  				{  					// Save values to memory  					_campaign.HaloCampaign.MapNames[_oldLanguage] = txtMapName.Text.Trim();  					_campaign.HaloCampaign.MapDescriptions[_oldLanguage] = txtMapDesc.Text.Trim();    					// Make sure values arn't too long' kiddo  					if (_campaign.HaloCampaign.MapNames[_oldLanguage].Length > 30)  						_campaign.HaloCampaign.MapNames[_oldLanguage] = _campaign.HaloCampaign.MapNames[_oldLanguage].Remove(30);  					if (_campaign.HaloCampaign.MapDescriptions[_oldLanguage].Length > 126)  						_campaign.HaloCampaign.MapDescriptions[_oldLanguage] =  							_campaign.HaloCampaign.MapDescriptions[_oldLanguage].Remove(126);  				}    				// Update oldLanguage int  				_oldLanguage = cbLanguages.SelectedIndex;    				// Update UI  				txtMapName.Text = _campaign.HaloCampaign.MapNames[_oldLanguage];  				txtMapDesc.Text = _campaign.HaloCampaign.MapDescriptions[_oldLanguage];  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloCampaign,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloCampaign.xaml.cs,MapIDsError,The following statement contains a magic number: for (int i = 1; i <= 7; i += 2)  			{  				var sp = (StackPanel)gridMapIds.Children[i];  				if (sp.Children.Cast<TextBox>().Any(tb => Equals(tb.BorderBrush' FindResource("ExtryzeAccentBrush"))))  				{  					Close();  					MetroMessageBox.Show("Campaign Not Saved"' "The Campaign could not be saved because one or more of the Map IDs is invalid.");  					return true;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloCampaign,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloCampaign.xaml.cs,MapIDsError,The following statement contains a magic number: for (int i = 1; i <= 7; i += 2)  			{  				var sp = (StackPanel)gridMapIds.Children[i];  				if (sp.Children.Cast<TextBox>().Any(tb => Equals(tb.BorderBrush' FindResource("ExtryzeAccentBrush"))))  				{  					Close();  					MetroMessageBox.Show("Campaign Not Saved"' "The Campaign could not be saved because one or more of the Map IDs is invalid.");  					return true;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloPluginConverter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloPluginConverter.xaml.cs,btnInputFolder_Click,The following statement contains a magic number: foreach (  				FileInfo fi in  					fis.Where(  						fi =>  							(fi.Name.EndsWith(".asc") || fi.Name.EndsWith(".alt") || fi.Name.EndsWith(".ent") || fi.Name.EndsWith(".xml")) &&  							Path.GetFileNameWithoutExtension(fi.Name).Length == 4))  			{  				SelectedPlugins.Add(new PluginEntry  				{  					IsSelected = true'  					LocalMapPath = fi.FullName'  					PluginClassMagic = fi.Name.Remove(fi.Name.Length - 3)  				});  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloPluginConverter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloPluginConverter.xaml.cs,btnInputFolder_Click,The following statement contains a magic number: foreach (  				FileInfo fi in  					fis.Where(  						fi =>  							(fi.Name.EndsWith(".asc") || fi.Name.EndsWith(".alt") || fi.Name.EndsWith(".ent") || fi.Name.EndsWith(".xml")) &&  							Path.GetFileNameWithoutExtension(fi.Name).Length == 4))  			{  				SelectedPlugins.Add(new PluginEntry  				{  					IsSelected = true'  					LocalMapPath = fi.FullName'  					PluginClassMagic = fi.Name.Remove(fi.Name.Length - 3)  				});  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloPluginConverter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloPluginConverter.xaml.cs,doConvert,The following statement contains a magic number: foreach (string file in files)  			{  				string name = Path.GetFileName(file);  				worker.ReportProgress(progress' name);  				progress++;    				if ((!file.EndsWith(".asc") && !file.EndsWith(".alt") && !file.EndsWith(".ent") && !file.EndsWith(".xml")) ||  				    Path.GetFileNameWithoutExtension(file).Length != 4) continue;    				XmlReader reader = null;  				XmlWriter writer = null;  				try  				{  					string extension = "";  					Dispatcher.Invoke(new Action(() =>  					{  						switch ((OutputFormats) cbOutputFormat.SelectedIndex)  						{  							case OutputFormats.Ascention:  								extension = ".asc";  								break;  							case OutputFormats.Alteration:  								extension = ".alt";  								break;    							default:  								extension = ".xml";  								break;  						}  					}));  					var settings = new XmlWriterSettings  					{  						Indent = true'  						IndentChars = "\t"  					};    					string outPath = "";  					Dispatcher.Invoke(new Action(() =>  					{  						outPath = Path.Combine(txtOutputFolder.Text'  							Path.ChangeExtension(name' extension));  					}));  					writer = XmlWriter.Create(outPath' settings);  					reader = XmlReader.Create(file);    					IPluginVisitor visitor;  					var format = OutputFormats.Assembly;  					Dispatcher.Invoke(new Action(() => { format = (OutputFormats) cbOutputFormat.SelectedIndex; }));  					switch (format)  					{  						case OutputFormats.Ascention:  							visitor = new AscensionPluginWriter(writer' Path.GetFileNameWithoutExtension(file));  							break;  						case OutputFormats.Assembly:  							visitor = new AssemblyPluginWriter(writer' gameName);  							break;    						default:  							throw new InvalidOperationException("Unsupported output format.");  					}    					UniversalPluginLoader.LoadPlugin(reader' visitor);  				}  				finally  				{  					if (reader != null)  						reader.Close();  					if (writer != null)  						writer.Close();  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloScreenshot,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloScreenshot.xaml.cs,imageUpload_RunWorkerCompleted,The following statement contains a magic number: if (_imageID == null || (_imageID.Length < 5 && _imageID.Length > 9))  			{  				MetroMessageBox.Show("Error"' _imageID ?? "Error uploading image.");    				_imageID = null;  			}  			else  			{  				MetroImgurUpload.Show(_imageID);    				string _thumburl = string.Format("http://i.imgur.com/{0}b.jpg"' _imageID);  				string _url = string.Format("http://i.imgur.com/{0}.jpg"' _imageID);    				Dispatcher.Invoke(new Action(delegate  				{  					ImgurHistory.AddNewEntry(_datetime_long' _thumburl' _url);  				}));  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloScreenshot,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloScreenshot.xaml.cs,imageUpload_RunWorkerCompleted,The following statement contains a magic number: if (_imageID == null || (_imageID.Length < 5 && _imageID.Length > 9))  			{  				MetroMessageBox.Show("Error"' _imageID ?? "Error uploading image.");    				_imageID = null;  			}  			else  			{  				MetroImgurUpload.Show(_imageID);    				string _thumburl = string.Format("http://i.imgur.com/{0}b.jpg"' _imageID);  				string _url = string.Format("http://i.imgur.com/{0}.jpg"' _imageID);    				Dispatcher.Invoke(new Action(delegate  				{  					ImgurHistory.AddNewEntry(_datetime_long' _thumburl' _url);  				}));  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloPluginGenerator,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloPluginGenerator.xaml.cs,worker_RunWorkerCompleted,The following statement contains a magic number: if (e.Error == null)  				MetroMessageBox.Show("Plugin Generation Complete!"' "Plugin generation completed successfully in " +  				                                                    Math.Round(((TimeSpan) e.Result).TotalSeconds' 3) + " seconds.");  			else  				MetroMessageBox.Show("Error Generating Plugins!"' e.Error.ToString());
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloPluginGenerator,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloPluginGenerator.xaml.cs,worker_DoWork,The following statement contains a magic number: for (int i = 0; i < generatorMaps.Count; i++)  			{  				var tagMaps = new Dictionary<ITag' MetaMap>();    				IReader reader;  				KeyValuePair<ICacheFile' EngineDescription> cacheData = LoadMap(generatorMaps[i].LocalMapPath' out reader);  				ICacheFile cacheFile = cacheData.Key;  				var analyzer = new MetaAnalyzer(cacheFile);  				if (gameIdentifier == "")  					gameIdentifier = cacheData.Value.Settings.GetSetting<string>("shortName");    				var mapsToProcess = new Queue<MetaMap>();  				foreach (ITag tag in cacheFile.Tags)  				{  					if (tag.MetaLocation == null)  						continue;    					var map = new MetaMap();  					tagMaps[tag] = map;  					mapsToProcess.Enqueue(map);    					reader.SeekTo(tag.MetaLocation.AsOffset());  					analyzer.AnalyzeArea(reader' tag.MetaLocation.AsPointer()' map);  				}  				GenerateSubMaps(mapsToProcess' analyzer' reader' cacheFile);    				var classMaps = new Dictionary<string' MetaMap>();  				foreach (ITag tag in cacheFile.Tags)  				{  					if (tag.MetaLocation == null)  						continue;    					MetaMap map = tagMaps[tag];  					EstimateMapSize(map' tag.MetaLocation.AsPointer()' analyzer.GeneratedMemoryMap' 1);    					string magicStr = CharConstant.ToString(tag.Class.Magic);  					MetaMap oldClassMap;  					if (classMaps.TryGetValue(magicStr' out oldClassMap))  						oldClassMap.MergeWith(map);  					else  						classMaps[magicStr] = map;  				}    				foreach (var map in classMaps)  				{  					MetaMap globalMap;  					if (globalMaps.TryGetValue(map.Key' out globalMap))  						globalMap.MergeWith(map.Value);  					else  						globalMaps[map.Key] = map.Value;  				}    				reader.Close();    				worker.ReportProgress(100*(i+1)/(generatorMaps.Count));  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloPluginGenerator,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloPluginGenerator.xaml.cs,WritePlugin,The following statement contains a magic number: for (int offset = 0; offset < size; offset += 4)  			{  				MetaValueGuess guess = map.GetGuess(offset);  				if (guess != null)  				{  					switch (guess.Type)  					{  						case MetaValueType.DataReference:  							if (offset <= size - 0x14)  							{  								writer.VisitDataReference("Unknown"' (uint) offset' "bytes"' false' 4' 0);  								offset += 0x10;  								continue;  							}  							break;    						case MetaValueType.TagReference:  							if (offset <= size - 0x10)  							{  								writer.VisitTagReference("Unknown"' (uint) offset' false' true' true' 0);  								offset += 0xC;  								continue;  							}  							break;    						case MetaValueType.Reflexive:  							if (offset <= size - 0xC)  							{  								MetaMap subMap = map.GetSubMap(offset);  								if (subMap != null)  								{  									int subMapSize = subMap.GetBestSizeEstimate();  									writer.EnterReflexive("Unknown"' (uint) offset' false' (uint)subMapSize' 4' 0);  									WritePlugin(subMap' subMapSize' writer);  									writer.LeaveReflexive();  									offset += 0x8;  									continue;  								}  							}  							break;  					}  				}    				// Just write an unknown value depending upon how much space we have left  				if (offset <= size - 4)  					writer.VisitUndefined("Unknown"' (uint) offset' false' 0);  				else if (offset <= size - 2)  					writer.VisitInt16("Unknown"' (uint) offset' false' 0);  				else  					writer.VisitInt8("Unknown"' (uint) offset' false' 0);  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloPluginGenerator,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloPluginGenerator.xaml.cs,WritePlugin,The following statement contains a magic number: for (int offset = 0; offset < size; offset += 4)  			{  				MetaValueGuess guess = map.GetGuess(offset);  				if (guess != null)  				{  					switch (guess.Type)  					{  						case MetaValueType.DataReference:  							if (offset <= size - 0x14)  							{  								writer.VisitDataReference("Unknown"' (uint) offset' "bytes"' false' 4' 0);  								offset += 0x10;  								continue;  							}  							break;    						case MetaValueType.TagReference:  							if (offset <= size - 0x10)  							{  								writer.VisitTagReference("Unknown"' (uint) offset' false' true' true' 0);  								offset += 0xC;  								continue;  							}  							break;    						case MetaValueType.Reflexive:  							if (offset <= size - 0xC)  							{  								MetaMap subMap = map.GetSubMap(offset);  								if (subMap != null)  								{  									int subMapSize = subMap.GetBestSizeEstimate();  									writer.EnterReflexive("Unknown"' (uint) offset' false' (uint)subMapSize' 4' 0);  									WritePlugin(subMap' subMapSize' writer);  									writer.LeaveReflexive();  									offset += 0x8;  									continue;  								}  							}  							break;  					}  				}    				// Just write an unknown value depending upon how much space we have left  				if (offset <= size - 4)  					writer.VisitUndefined("Unknown"' (uint) offset' false' 0);  				else if (offset <= size - 2)  					writer.VisitInt16("Unknown"' (uint) offset' false' 0);  				else  					writer.VisitInt8("Unknown"' (uint) offset' false' 0);  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloPluginGenerator,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloPluginGenerator.xaml.cs,WritePlugin,The following statement contains a magic number: for (int offset = 0; offset < size; offset += 4)  			{  				MetaValueGuess guess = map.GetGuess(offset);  				if (guess != null)  				{  					switch (guess.Type)  					{  						case MetaValueType.DataReference:  							if (offset <= size - 0x14)  							{  								writer.VisitDataReference("Unknown"' (uint) offset' "bytes"' false' 4' 0);  								offset += 0x10;  								continue;  							}  							break;    						case MetaValueType.TagReference:  							if (offset <= size - 0x10)  							{  								writer.VisitTagReference("Unknown"' (uint) offset' false' true' true' 0);  								offset += 0xC;  								continue;  							}  							break;    						case MetaValueType.Reflexive:  							if (offset <= size - 0xC)  							{  								MetaMap subMap = map.GetSubMap(offset);  								if (subMap != null)  								{  									int subMapSize = subMap.GetBestSizeEstimate();  									writer.EnterReflexive("Unknown"' (uint) offset' false' (uint)subMapSize' 4' 0);  									WritePlugin(subMap' subMapSize' writer);  									writer.LeaveReflexive();  									offset += 0x8;  									continue;  								}  							}  							break;  					}  				}    				// Just write an unknown value depending upon how much space we have left  				if (offset <= size - 4)  					writer.VisitUndefined("Unknown"' (uint) offset' false' 0);  				else if (offset <= size - 2)  					writer.VisitInt16("Unknown"' (uint) offset' false' 0);  				else  					writer.VisitInt8("Unknown"' (uint) offset' false' 0);  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloPluginGenerator,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloPluginGenerator.xaml.cs,WritePlugin,The following statement contains a magic number: for (int offset = 0; offset < size; offset += 4)  			{  				MetaValueGuess guess = map.GetGuess(offset);  				if (guess != null)  				{  					switch (guess.Type)  					{  						case MetaValueType.DataReference:  							if (offset <= size - 0x14)  							{  								writer.VisitDataReference("Unknown"' (uint) offset' "bytes"' false' 4' 0);  								offset += 0x10;  								continue;  							}  							break;    						case MetaValueType.TagReference:  							if (offset <= size - 0x10)  							{  								writer.VisitTagReference("Unknown"' (uint) offset' false' true' true' 0);  								offset += 0xC;  								continue;  							}  							break;    						case MetaValueType.Reflexive:  							if (offset <= size - 0xC)  							{  								MetaMap subMap = map.GetSubMap(offset);  								if (subMap != null)  								{  									int subMapSize = subMap.GetBestSizeEstimate();  									writer.EnterReflexive("Unknown"' (uint) offset' false' (uint)subMapSize' 4' 0);  									WritePlugin(subMap' subMapSize' writer);  									writer.LeaveReflexive();  									offset += 0x8;  									continue;  								}  							}  							break;  					}  				}    				// Just write an unknown value depending upon how much space we have left  				if (offset <= size - 4)  					writer.VisitUndefined("Unknown"' (uint) offset' false' 0);  				else if (offset <= size - 2)  					writer.VisitInt16("Unknown"' (uint) offset' false' 0);  				else  					writer.VisitInt8("Unknown"' (uint) offset' false' 0);  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloPluginGenerator,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloPluginGenerator.xaml.cs,WritePlugin,The following statement contains a magic number: for (int offset = 0; offset < size; offset += 4)  			{  				MetaValueGuess guess = map.GetGuess(offset);  				if (guess != null)  				{  					switch (guess.Type)  					{  						case MetaValueType.DataReference:  							if (offset <= size - 0x14)  							{  								writer.VisitDataReference("Unknown"' (uint) offset' "bytes"' false' 4' 0);  								offset += 0x10;  								continue;  							}  							break;    						case MetaValueType.TagReference:  							if (offset <= size - 0x10)  							{  								writer.VisitTagReference("Unknown"' (uint) offset' false' true' true' 0);  								offset += 0xC;  								continue;  							}  							break;    						case MetaValueType.Reflexive:  							if (offset <= size - 0xC)  							{  								MetaMap subMap = map.GetSubMap(offset);  								if (subMap != null)  								{  									int subMapSize = subMap.GetBestSizeEstimate();  									writer.EnterReflexive("Unknown"' (uint) offset' false' (uint)subMapSize' 4' 0);  									WritePlugin(subMap' subMapSize' writer);  									writer.LeaveReflexive();  									offset += 0x8;  									continue;  								}  							}  							break;  					}  				}    				// Just write an unknown value depending upon how much space we have left  				if (offset <= size - 4)  					writer.VisitUndefined("Unknown"' (uint) offset' false' 0);  				else if (offset <= size - 2)  					writer.VisitInt16("Unknown"' (uint) offset' false' 0);  				else  					writer.VisitInt8("Unknown"' (uint) offset' false' 0);  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloImage,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloImage.xaml.cs,loadBLF,The following statement contains a magic number: try  			{  				_blf = new PureBLF(_blfLocation);    				var imgChunkData = new List<byte>(_blf.BLFChunks[1].ChunkData);  				imgChunkData.RemoveRange(0' 0x08);    				Dispatcher.Invoke(new Action(delegate  				{  					var image = new BitmapImage();  					image.BeginInit();  					image.StreamSource = new MemoryStream(imgChunkData.ToArray());  					image.EndInit();    					imgBLF.Source = image;    					var stream = new EndianStream(new MemoryStream(imgChunkData.ToArray<byte>())' Endian.BigEndian);  					stream.SeekTo(0x0);  					ushort imageMagic = stream.ReadUInt16();    					switch (imageMagic)  					{  						case 0xFFD8:  							blfImageFormat = "JPEG";  							break;  						case 0x8950:  							blfImageFormat = "PNG";  							break;  						case 0x424D:  							blfImageFormat = "BMP";  							break;  						default:  							blfImageFormat = "Unknown";  							break;  					}    					// Add Image Info  					paneImageInfo.Children.Insert(0' new MapHeaderEntry("Image Format:"' blfImageFormat));  					paneImageInfo.Children.Insert(1' new MapHeaderEntry("Image Width:"' image.PixelWidth + "px"));  					paneImageInfo.Children.Insert(2' new MapHeaderEntry("Image Height"' image.PixelHeight + "px"));    					// Add BLF Info  					paneBLFInfo.Children.Insert(0' new MapHeaderEntry("BLF Length:"' "0x" + _blf.BLFStream.Length.ToString("X")));  					paneBLFInfo.Children.Insert(1'  						new MapHeaderEntry("BLF Chunks:"' _blf.BLFChunks.Count.ToString(CultureInfo.InvariantCulture)));    					if (App.AssemblyStorage.AssemblySettings.StartpageHideOnLaunch)  						App.AssemblyStorage.AssemblySettings.HomeWindow.ExternalTabClose(Home.TabGenre.StartPage);    					RecentFiles.AddNewEntry(new FileInfo(_blfLocation).Name' _blfLocation' "BLF Image"' Settings.RecentFileType.Blf);  					Close();  				}));  			}  			catch (Exception ex)  			{  				Close();  				Dispatcher.Invoke(new Action(delegate  				{  					MetroMessageBox.Show("Unable to open BLF"' ex.Message.ToString(CultureInfo.InvariantCulture));  					App.AssemblyStorage.AssemblySettings.HomeWindow.ExternalTabClose((LayoutDocument)Parent);  				}));  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloImage,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloImage.xaml.cs,btnInjectImage_Click,The following statement contains a magic number: try  			{  				_blf = new PureBLF(_blfLocation);  				var ofd = new OpenFileDialog  				{  					Title = "Open an image to be injected"'  					Filter = "JPEG Image (*.jpg'*.jpeg')|*.jpg;*.jpeg|PNG Image [H3/ODST]|*.png|BMP Image [H3/ODST]|*.bmp"  				};    				if (!((bool)ofd.ShowDialog()))  				{  					Close();  					return;  				}  				byte[] newImage = File.ReadAllBytes(ofd.FileName);  				var stream = new EndianStream(new MemoryStream(newImage)' Endian.BigEndian);    				// Check if it's a supported image  				stream.SeekTo(0x0);  				ushort imageMagic = stream.ReadUInt16();  				if (imageMagic != 0xFFD8 && imageMagic != 0x8950 && imageMagic != 0x424D)  					throw new Exception("Invalid image type. Only JPEG' PNG' and BMP are supported.");    				// Check for size and dimension differences  				var imageSize = new FileInfo(ofd.FileName).Length;  				var image = new BitmapImage();  				image.BeginInit();  				image.StreamSource = new MemoryStream(newImage);  				image.EndInit();  				string sizeMessage = "";  				string dimensionMessage = "";    				if (new FileInfo(ofd.FileName).Length >= 0x1C000)  					sizeMessage = String.Format("- The size of the new image (0x{0}) exceeds Halo 3/ODST's modified limit of 0x1C000. This image will not display in those games as a result. Can be ignored otherwise.\n"'  						imageSize.ToString("X"));    				if (image.PixelWidth != ((BitmapImage)imgBLF.Source).PixelWidth ||  					image.PixelHeight != ((BitmapImage)imgBLF.Source).PixelHeight)  					dimensionMessage = String.Format("- The dimensions of the new image ({0}x{1}) are not the same as the dimensions of the original image ({2}x{3}). This blf may appear stretched or not appear at all as a result.\n"'  						image.PixelWidth' image.PixelHeight' ((BitmapImage)imgBLF.Source).PixelWidth' ((BitmapImage)imgBLF.Source).PixelHeight);    				if (dimensionMessage != "" || sizeMessage != "")  					if (MetroMessageBox.Show("Warning"'  						"There were some potential issue(s) found with your new image;\n\n" + String.Format("{0}{1}"'  						sizeMessage' dimensionMessage) + "\nInject anyway?"'  						MetroMessageBox.MessageBoxButtons.OkCancel) != MetroMessageBox.MessageBoxResult.OK)  						{  							Close();  							return;  						}    				// It's the right everything! Let's inject    				var newImageChunkData = new List<byte>();  				newImageChunkData.AddRange(new byte[] { 0x00' 0x00' 0x00' 0x00 });  				byte[] imageLength = BitConverter.GetBytes(newImage.Length);  				Array.Reverse(imageLength);  				newImageChunkData.AddRange(imageLength);  				newImageChunkData.AddRange(newImage);    				// Write data to chunk file  				_blf.BLFChunks[1].ChunkData = newImageChunkData.ToArray<byte>();    				_blf.RefreshRelativeChunkData();  				_blf.UpdateChunkTable();    				// Update eof offset value  				var eofstream = new EndianStream(new MemoryStream(_blf.BLFChunks[2].ChunkData)' Endian.BigEndian);    				uint eofFixup = (uint)_blf.BLFStream.Length - 0x111; //real cheap but hey it works and is always the same in all games    				eofstream.SeekTo(0);  				eofstream.WriteUInt32(eofFixup);    				_blf.RefreshRelativeChunkData();  				_blf.UpdateChunkTable();    				Close();  				MetroMessageBox.Show("Injected!"' "The BLF Image has been injected. This image tab will now close.");  				App.AssemblyStorage.AssemblySettings.HomeWindow.ExternalTabClose(_tab);  			}  			catch (Exception ex)  			{  				Close();  				MetroMessageBox.Show("Inject Failed!"' "The BLF Image failed to be injected: \n " + ex.Message);  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,LoadMapInfo,The following statement contains a magic number: try  			{  				// Just a lazy way to validate the BLF file  				_blf = new PureBLF(_blfLocation);  				if (_blf.BLFChunks[1].ChunkMagic != "levl")  					throw new Exception("The selected Map Info BLF is not a valid Map Info BLF file.");  				_blf.Close();    				_mapInfo = new MapInfo(_blfLocation' App.AssemblyStorage.AssemblySettings.DefaultMapInfoDatabase);    				Dispatcher.Invoke(new Action(delegate  				{    					// Add BLF Info  					paneBLFInfo.Children.Insert(0' new MapHeaderEntry("MapInfo Version:"' _mapInfo.Engine.Version.ToString(CultureInfo.InvariantCulture)));  					paneBLFInfo.Children.Insert(1' new MapHeaderEntry("BLF Length:"' "0x" + _mapInfo.Stream.Length.ToString("X")));  					paneBLFInfo.Children.Insert(2' new MapHeaderEntry("BLF Chunks:"' _blf.BLFChunks.Count.ToString(CultureInfo.InvariantCulture)));  					  					// Hide unused elements  					if (_mapInfo.Engine.MaxTeamCollection == null)  						tiMaxTeams.Visibility = Visibility.Collapsed;  					if (_mapInfo.Engine.MultiplayerObjectCollection == null)  						tiMPObjects.Visibility = Visibility.Collapsed;  					if (!_mapInfo.Engine.UsesDefaultAuthor)  					{  						lblDefaultAuthor.Visibility = Visibility.Collapsed;  						txtDefaultAuthor.Visibility = Visibility.Collapsed;  					}    					// Load Languages  					LoadLanguages();    					// Load Map Info  					txtGameName.Text = _mapInfo.Engine.Name;  					txtMapID.Text = _mapInfo.MapInformation.MapID.ToString(CultureInfo.InvariantCulture);  					txtMapInternalName.Text = _mapInfo.MapInformation.InternalName;  					txtMapPhysicalName.Text = _mapInfo.MapInformation.PhysicalName;    					// Load Default Author & change margin if necessary  					txtDefaultAuthor.Text = _mapInfo.MapInformation.DefaultAuthor;  					if (_mapInfo.Engine.UsesDefaultAuthor && _mapInfo.Engine.Version <= 8)  							lblDefaultAuthor.Margin = new Thickness(0' 37' 0' 3);    					// Set up the Type combo box  					// TODO: Add flags to formats?  					cbType_Cine.Visibility = cbType_FF.Visibility = _mapInfo.Engine.Version < 5 ? Visibility.Collapsed : Visibility.Visible;  					cbType_Cine.IsEnabled = cbType_FF.IsEnabled = _mapInfo.Engine.Version >= 5;  					cbType_FF.Content = _mapInfo.Engine.Version < 8 ? "Firefight" : "Spartan Ops";  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsMainMenu))  						cbType.SelectedIndex = 0;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsMultiplayer))  						cbType.SelectedIndex = 1;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsCampaign))  						cbType.SelectedIndex = 2;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsCinematic))  						cbType.SelectedIndex = 3;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsFirefight))  						cbType.SelectedIndex = 4;    					// Set up the Checkboxes  					cbForgeOnly.Visibility  = _mapInfo.Engine.Version < 9 ? Visibility.Collapsed : Visibility.Visible;  					cbVisible.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.Visible);  					cbGeneratesFilm.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.GeneratesFilm);  					cbDLC.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsDLC);  					cbForgeOnly.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsForgeOnly);    					// Load Max Teams  					if (_mapInfo.Engine.MaxTeamCollection != null)  						LoadMaxTeams();    					// Load MP Objects  					if (_mapInfo.Engine.MultiplayerObjectCollection != null)  						LoadMultiplayerObjects();    					// Load Insertion Points  					LoadInsertionPoints();    					// Update UI  					_startEditing = true;  					cbLanguages.SelectedIndex = 0;  					cbInsertIndex.SelectedIndex = 0;  					cbInsertLanguages.SelectedIndex = 0;    					if (App.AssemblyStorage.AssemblySettings.StartpageHideOnLaunch)  						App.AssemblyStorage.AssemblySettings.HomeWindow.ExternalTabClose(Home.TabGenre.StartPage);    					RecentFiles.AddNewEntry(new FileInfo(_blfLocation).Name' _blfLocation' "Map Info"' Settings.RecentFileType.MapInfo);  					Close();  				}));  			}  			catch (Exception ex)  			{  				Dispatcher.Invoke(new Action(delegate  				{  					MetroMessageBox.Show("Unable to open MapInfo"' ex.Message);  					App.AssemblyStorage.AssemblySettings.HomeWindow.ExternalTabClose(_tab);  					Close();  				}));  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,LoadMapInfo,The following statement contains a magic number: try  			{  				// Just a lazy way to validate the BLF file  				_blf = new PureBLF(_blfLocation);  				if (_blf.BLFChunks[1].ChunkMagic != "levl")  					throw new Exception("The selected Map Info BLF is not a valid Map Info BLF file.");  				_blf.Close();    				_mapInfo = new MapInfo(_blfLocation' App.AssemblyStorage.AssemblySettings.DefaultMapInfoDatabase);    				Dispatcher.Invoke(new Action(delegate  				{    					// Add BLF Info  					paneBLFInfo.Children.Insert(0' new MapHeaderEntry("MapInfo Version:"' _mapInfo.Engine.Version.ToString(CultureInfo.InvariantCulture)));  					paneBLFInfo.Children.Insert(1' new MapHeaderEntry("BLF Length:"' "0x" + _mapInfo.Stream.Length.ToString("X")));  					paneBLFInfo.Children.Insert(2' new MapHeaderEntry("BLF Chunks:"' _blf.BLFChunks.Count.ToString(CultureInfo.InvariantCulture)));  					  					// Hide unused elements  					if (_mapInfo.Engine.MaxTeamCollection == null)  						tiMaxTeams.Visibility = Visibility.Collapsed;  					if (_mapInfo.Engine.MultiplayerObjectCollection == null)  						tiMPObjects.Visibility = Visibility.Collapsed;  					if (!_mapInfo.Engine.UsesDefaultAuthor)  					{  						lblDefaultAuthor.Visibility = Visibility.Collapsed;  						txtDefaultAuthor.Visibility = Visibility.Collapsed;  					}    					// Load Languages  					LoadLanguages();    					// Load Map Info  					txtGameName.Text = _mapInfo.Engine.Name;  					txtMapID.Text = _mapInfo.MapInformation.MapID.ToString(CultureInfo.InvariantCulture);  					txtMapInternalName.Text = _mapInfo.MapInformation.InternalName;  					txtMapPhysicalName.Text = _mapInfo.MapInformation.PhysicalName;    					// Load Default Author & change margin if necessary  					txtDefaultAuthor.Text = _mapInfo.MapInformation.DefaultAuthor;  					if (_mapInfo.Engine.UsesDefaultAuthor && _mapInfo.Engine.Version <= 8)  							lblDefaultAuthor.Margin = new Thickness(0' 37' 0' 3);    					// Set up the Type combo box  					// TODO: Add flags to formats?  					cbType_Cine.Visibility = cbType_FF.Visibility = _mapInfo.Engine.Version < 5 ? Visibility.Collapsed : Visibility.Visible;  					cbType_Cine.IsEnabled = cbType_FF.IsEnabled = _mapInfo.Engine.Version >= 5;  					cbType_FF.Content = _mapInfo.Engine.Version < 8 ? "Firefight" : "Spartan Ops";  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsMainMenu))  						cbType.SelectedIndex = 0;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsMultiplayer))  						cbType.SelectedIndex = 1;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsCampaign))  						cbType.SelectedIndex = 2;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsCinematic))  						cbType.SelectedIndex = 3;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsFirefight))  						cbType.SelectedIndex = 4;    					// Set up the Checkboxes  					cbForgeOnly.Visibility  = _mapInfo.Engine.Version < 9 ? Visibility.Collapsed : Visibility.Visible;  					cbVisible.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.Visible);  					cbGeneratesFilm.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.GeneratesFilm);  					cbDLC.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsDLC);  					cbForgeOnly.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsForgeOnly);    					// Load Max Teams  					if (_mapInfo.Engine.MaxTeamCollection != null)  						LoadMaxTeams();    					// Load MP Objects  					if (_mapInfo.Engine.MultiplayerObjectCollection != null)  						LoadMultiplayerObjects();    					// Load Insertion Points  					LoadInsertionPoints();    					// Update UI  					_startEditing = true;  					cbLanguages.SelectedIndex = 0;  					cbInsertIndex.SelectedIndex = 0;  					cbInsertLanguages.SelectedIndex = 0;    					if (App.AssemblyStorage.AssemblySettings.StartpageHideOnLaunch)  						App.AssemblyStorage.AssemblySettings.HomeWindow.ExternalTabClose(Home.TabGenre.StartPage);    					RecentFiles.AddNewEntry(new FileInfo(_blfLocation).Name' _blfLocation' "Map Info"' Settings.RecentFileType.MapInfo);  					Close();  				}));  			}  			catch (Exception ex)  			{  				Dispatcher.Invoke(new Action(delegate  				{  					MetroMessageBox.Show("Unable to open MapInfo"' ex.Message);  					App.AssemblyStorage.AssemblySettings.HomeWindow.ExternalTabClose(_tab);  					Close();  				}));  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,LoadMapInfo,The following statement contains a magic number: try  			{  				// Just a lazy way to validate the BLF file  				_blf = new PureBLF(_blfLocation);  				if (_blf.BLFChunks[1].ChunkMagic != "levl")  					throw new Exception("The selected Map Info BLF is not a valid Map Info BLF file.");  				_blf.Close();    				_mapInfo = new MapInfo(_blfLocation' App.AssemblyStorage.AssemblySettings.DefaultMapInfoDatabase);    				Dispatcher.Invoke(new Action(delegate  				{    					// Add BLF Info  					paneBLFInfo.Children.Insert(0' new MapHeaderEntry("MapInfo Version:"' _mapInfo.Engine.Version.ToString(CultureInfo.InvariantCulture)));  					paneBLFInfo.Children.Insert(1' new MapHeaderEntry("BLF Length:"' "0x" + _mapInfo.Stream.Length.ToString("X")));  					paneBLFInfo.Children.Insert(2' new MapHeaderEntry("BLF Chunks:"' _blf.BLFChunks.Count.ToString(CultureInfo.InvariantCulture)));  					  					// Hide unused elements  					if (_mapInfo.Engine.MaxTeamCollection == null)  						tiMaxTeams.Visibility = Visibility.Collapsed;  					if (_mapInfo.Engine.MultiplayerObjectCollection == null)  						tiMPObjects.Visibility = Visibility.Collapsed;  					if (!_mapInfo.Engine.UsesDefaultAuthor)  					{  						lblDefaultAuthor.Visibility = Visibility.Collapsed;  						txtDefaultAuthor.Visibility = Visibility.Collapsed;  					}    					// Load Languages  					LoadLanguages();    					// Load Map Info  					txtGameName.Text = _mapInfo.Engine.Name;  					txtMapID.Text = _mapInfo.MapInformation.MapID.ToString(CultureInfo.InvariantCulture);  					txtMapInternalName.Text = _mapInfo.MapInformation.InternalName;  					txtMapPhysicalName.Text = _mapInfo.MapInformation.PhysicalName;    					// Load Default Author & change margin if necessary  					txtDefaultAuthor.Text = _mapInfo.MapInformation.DefaultAuthor;  					if (_mapInfo.Engine.UsesDefaultAuthor && _mapInfo.Engine.Version <= 8)  							lblDefaultAuthor.Margin = new Thickness(0' 37' 0' 3);    					// Set up the Type combo box  					// TODO: Add flags to formats?  					cbType_Cine.Visibility = cbType_FF.Visibility = _mapInfo.Engine.Version < 5 ? Visibility.Collapsed : Visibility.Visible;  					cbType_Cine.IsEnabled = cbType_FF.IsEnabled = _mapInfo.Engine.Version >= 5;  					cbType_FF.Content = _mapInfo.Engine.Version < 8 ? "Firefight" : "Spartan Ops";  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsMainMenu))  						cbType.SelectedIndex = 0;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsMultiplayer))  						cbType.SelectedIndex = 1;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsCampaign))  						cbType.SelectedIndex = 2;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsCinematic))  						cbType.SelectedIndex = 3;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsFirefight))  						cbType.SelectedIndex = 4;    					// Set up the Checkboxes  					cbForgeOnly.Visibility  = _mapInfo.Engine.Version < 9 ? Visibility.Collapsed : Visibility.Visible;  					cbVisible.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.Visible);  					cbGeneratesFilm.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.GeneratesFilm);  					cbDLC.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsDLC);  					cbForgeOnly.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsForgeOnly);    					// Load Max Teams  					if (_mapInfo.Engine.MaxTeamCollection != null)  						LoadMaxTeams();    					// Load MP Objects  					if (_mapInfo.Engine.MultiplayerObjectCollection != null)  						LoadMultiplayerObjects();    					// Load Insertion Points  					LoadInsertionPoints();    					// Update UI  					_startEditing = true;  					cbLanguages.SelectedIndex = 0;  					cbInsertIndex.SelectedIndex = 0;  					cbInsertLanguages.SelectedIndex = 0;    					if (App.AssemblyStorage.AssemblySettings.StartpageHideOnLaunch)  						App.AssemblyStorage.AssemblySettings.HomeWindow.ExternalTabClose(Home.TabGenre.StartPage);    					RecentFiles.AddNewEntry(new FileInfo(_blfLocation).Name' _blfLocation' "Map Info"' Settings.RecentFileType.MapInfo);  					Close();  				}));  			}  			catch (Exception ex)  			{  				Dispatcher.Invoke(new Action(delegate  				{  					MetroMessageBox.Show("Unable to open MapInfo"' ex.Message);  					App.AssemblyStorage.AssemblySettings.HomeWindow.ExternalTabClose(_tab);  					Close();  				}));  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,LoadMapInfo,The following statement contains a magic number: try  			{  				// Just a lazy way to validate the BLF file  				_blf = new PureBLF(_blfLocation);  				if (_blf.BLFChunks[1].ChunkMagic != "levl")  					throw new Exception("The selected Map Info BLF is not a valid Map Info BLF file.");  				_blf.Close();    				_mapInfo = new MapInfo(_blfLocation' App.AssemblyStorage.AssemblySettings.DefaultMapInfoDatabase);    				Dispatcher.Invoke(new Action(delegate  				{    					// Add BLF Info  					paneBLFInfo.Children.Insert(0' new MapHeaderEntry("MapInfo Version:"' _mapInfo.Engine.Version.ToString(CultureInfo.InvariantCulture)));  					paneBLFInfo.Children.Insert(1' new MapHeaderEntry("BLF Length:"' "0x" + _mapInfo.Stream.Length.ToString("X")));  					paneBLFInfo.Children.Insert(2' new MapHeaderEntry("BLF Chunks:"' _blf.BLFChunks.Count.ToString(CultureInfo.InvariantCulture)));  					  					// Hide unused elements  					if (_mapInfo.Engine.MaxTeamCollection == null)  						tiMaxTeams.Visibility = Visibility.Collapsed;  					if (_mapInfo.Engine.MultiplayerObjectCollection == null)  						tiMPObjects.Visibility = Visibility.Collapsed;  					if (!_mapInfo.Engine.UsesDefaultAuthor)  					{  						lblDefaultAuthor.Visibility = Visibility.Collapsed;  						txtDefaultAuthor.Visibility = Visibility.Collapsed;  					}    					// Load Languages  					LoadLanguages();    					// Load Map Info  					txtGameName.Text = _mapInfo.Engine.Name;  					txtMapID.Text = _mapInfo.MapInformation.MapID.ToString(CultureInfo.InvariantCulture);  					txtMapInternalName.Text = _mapInfo.MapInformation.InternalName;  					txtMapPhysicalName.Text = _mapInfo.MapInformation.PhysicalName;    					// Load Default Author & change margin if necessary  					txtDefaultAuthor.Text = _mapInfo.MapInformation.DefaultAuthor;  					if (_mapInfo.Engine.UsesDefaultAuthor && _mapInfo.Engine.Version <= 8)  							lblDefaultAuthor.Margin = new Thickness(0' 37' 0' 3);    					// Set up the Type combo box  					// TODO: Add flags to formats?  					cbType_Cine.Visibility = cbType_FF.Visibility = _mapInfo.Engine.Version < 5 ? Visibility.Collapsed : Visibility.Visible;  					cbType_Cine.IsEnabled = cbType_FF.IsEnabled = _mapInfo.Engine.Version >= 5;  					cbType_FF.Content = _mapInfo.Engine.Version < 8 ? "Firefight" : "Spartan Ops";  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsMainMenu))  						cbType.SelectedIndex = 0;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsMultiplayer))  						cbType.SelectedIndex = 1;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsCampaign))  						cbType.SelectedIndex = 2;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsCinematic))  						cbType.SelectedIndex = 3;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsFirefight))  						cbType.SelectedIndex = 4;    					// Set up the Checkboxes  					cbForgeOnly.Visibility  = _mapInfo.Engine.Version < 9 ? Visibility.Collapsed : Visibility.Visible;  					cbVisible.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.Visible);  					cbGeneratesFilm.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.GeneratesFilm);  					cbDLC.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsDLC);  					cbForgeOnly.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsForgeOnly);    					// Load Max Teams  					if (_mapInfo.Engine.MaxTeamCollection != null)  						LoadMaxTeams();    					// Load MP Objects  					if (_mapInfo.Engine.MultiplayerObjectCollection != null)  						LoadMultiplayerObjects();    					// Load Insertion Points  					LoadInsertionPoints();    					// Update UI  					_startEditing = true;  					cbLanguages.SelectedIndex = 0;  					cbInsertIndex.SelectedIndex = 0;  					cbInsertLanguages.SelectedIndex = 0;    					if (App.AssemblyStorage.AssemblySettings.StartpageHideOnLaunch)  						App.AssemblyStorage.AssemblySettings.HomeWindow.ExternalTabClose(Home.TabGenre.StartPage);    					RecentFiles.AddNewEntry(new FileInfo(_blfLocation).Name' _blfLocation' "Map Info"' Settings.RecentFileType.MapInfo);  					Close();  				}));  			}  			catch (Exception ex)  			{  				Dispatcher.Invoke(new Action(delegate  				{  					MetroMessageBox.Show("Unable to open MapInfo"' ex.Message);  					App.AssemblyStorage.AssemblySettings.HomeWindow.ExternalTabClose(_tab);  					Close();  				}));  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,LoadMapInfo,The following statement contains a magic number: try  			{  				// Just a lazy way to validate the BLF file  				_blf = new PureBLF(_blfLocation);  				if (_blf.BLFChunks[1].ChunkMagic != "levl")  					throw new Exception("The selected Map Info BLF is not a valid Map Info BLF file.");  				_blf.Close();    				_mapInfo = new MapInfo(_blfLocation' App.AssemblyStorage.AssemblySettings.DefaultMapInfoDatabase);    				Dispatcher.Invoke(new Action(delegate  				{    					// Add BLF Info  					paneBLFInfo.Children.Insert(0' new MapHeaderEntry("MapInfo Version:"' _mapInfo.Engine.Version.ToString(CultureInfo.InvariantCulture)));  					paneBLFInfo.Children.Insert(1' new MapHeaderEntry("BLF Length:"' "0x" + _mapInfo.Stream.Length.ToString("X")));  					paneBLFInfo.Children.Insert(2' new MapHeaderEntry("BLF Chunks:"' _blf.BLFChunks.Count.ToString(CultureInfo.InvariantCulture)));  					  					// Hide unused elements  					if (_mapInfo.Engine.MaxTeamCollection == null)  						tiMaxTeams.Visibility = Visibility.Collapsed;  					if (_mapInfo.Engine.MultiplayerObjectCollection == null)  						tiMPObjects.Visibility = Visibility.Collapsed;  					if (!_mapInfo.Engine.UsesDefaultAuthor)  					{  						lblDefaultAuthor.Visibility = Visibility.Collapsed;  						txtDefaultAuthor.Visibility = Visibility.Collapsed;  					}    					// Load Languages  					LoadLanguages();    					// Load Map Info  					txtGameName.Text = _mapInfo.Engine.Name;  					txtMapID.Text = _mapInfo.MapInformation.MapID.ToString(CultureInfo.InvariantCulture);  					txtMapInternalName.Text = _mapInfo.MapInformation.InternalName;  					txtMapPhysicalName.Text = _mapInfo.MapInformation.PhysicalName;    					// Load Default Author & change margin if necessary  					txtDefaultAuthor.Text = _mapInfo.MapInformation.DefaultAuthor;  					if (_mapInfo.Engine.UsesDefaultAuthor && _mapInfo.Engine.Version <= 8)  							lblDefaultAuthor.Margin = new Thickness(0' 37' 0' 3);    					// Set up the Type combo box  					// TODO: Add flags to formats?  					cbType_Cine.Visibility = cbType_FF.Visibility = _mapInfo.Engine.Version < 5 ? Visibility.Collapsed : Visibility.Visible;  					cbType_Cine.IsEnabled = cbType_FF.IsEnabled = _mapInfo.Engine.Version >= 5;  					cbType_FF.Content = _mapInfo.Engine.Version < 8 ? "Firefight" : "Spartan Ops";  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsMainMenu))  						cbType.SelectedIndex = 0;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsMultiplayer))  						cbType.SelectedIndex = 1;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsCampaign))  						cbType.SelectedIndex = 2;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsCinematic))  						cbType.SelectedIndex = 3;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsFirefight))  						cbType.SelectedIndex = 4;    					// Set up the Checkboxes  					cbForgeOnly.Visibility  = _mapInfo.Engine.Version < 9 ? Visibility.Collapsed : Visibility.Visible;  					cbVisible.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.Visible);  					cbGeneratesFilm.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.GeneratesFilm);  					cbDLC.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsDLC);  					cbForgeOnly.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsForgeOnly);    					// Load Max Teams  					if (_mapInfo.Engine.MaxTeamCollection != null)  						LoadMaxTeams();    					// Load MP Objects  					if (_mapInfo.Engine.MultiplayerObjectCollection != null)  						LoadMultiplayerObjects();    					// Load Insertion Points  					LoadInsertionPoints();    					// Update UI  					_startEditing = true;  					cbLanguages.SelectedIndex = 0;  					cbInsertIndex.SelectedIndex = 0;  					cbInsertLanguages.SelectedIndex = 0;    					if (App.AssemblyStorage.AssemblySettings.StartpageHideOnLaunch)  						App.AssemblyStorage.AssemblySettings.HomeWindow.ExternalTabClose(Home.TabGenre.StartPage);    					RecentFiles.AddNewEntry(new FileInfo(_blfLocation).Name' _blfLocation' "Map Info"' Settings.RecentFileType.MapInfo);  					Close();  				}));  			}  			catch (Exception ex)  			{  				Dispatcher.Invoke(new Action(delegate  				{  					MetroMessageBox.Show("Unable to open MapInfo"' ex.Message);  					App.AssemblyStorage.AssemblySettings.HomeWindow.ExternalTabClose(_tab);  					Close();  				}));  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,LoadMapInfo,The following statement contains a magic number: try  			{  				// Just a lazy way to validate the BLF file  				_blf = new PureBLF(_blfLocation);  				if (_blf.BLFChunks[1].ChunkMagic != "levl")  					throw new Exception("The selected Map Info BLF is not a valid Map Info BLF file.");  				_blf.Close();    				_mapInfo = new MapInfo(_blfLocation' App.AssemblyStorage.AssemblySettings.DefaultMapInfoDatabase);    				Dispatcher.Invoke(new Action(delegate  				{    					// Add BLF Info  					paneBLFInfo.Children.Insert(0' new MapHeaderEntry("MapInfo Version:"' _mapInfo.Engine.Version.ToString(CultureInfo.InvariantCulture)));  					paneBLFInfo.Children.Insert(1' new MapHeaderEntry("BLF Length:"' "0x" + _mapInfo.Stream.Length.ToString("X")));  					paneBLFInfo.Children.Insert(2' new MapHeaderEntry("BLF Chunks:"' _blf.BLFChunks.Count.ToString(CultureInfo.InvariantCulture)));  					  					// Hide unused elements  					if (_mapInfo.Engine.MaxTeamCollection == null)  						tiMaxTeams.Visibility = Visibility.Collapsed;  					if (_mapInfo.Engine.MultiplayerObjectCollection == null)  						tiMPObjects.Visibility = Visibility.Collapsed;  					if (!_mapInfo.Engine.UsesDefaultAuthor)  					{  						lblDefaultAuthor.Visibility = Visibility.Collapsed;  						txtDefaultAuthor.Visibility = Visibility.Collapsed;  					}    					// Load Languages  					LoadLanguages();    					// Load Map Info  					txtGameName.Text = _mapInfo.Engine.Name;  					txtMapID.Text = _mapInfo.MapInformation.MapID.ToString(CultureInfo.InvariantCulture);  					txtMapInternalName.Text = _mapInfo.MapInformation.InternalName;  					txtMapPhysicalName.Text = _mapInfo.MapInformation.PhysicalName;    					// Load Default Author & change margin if necessary  					txtDefaultAuthor.Text = _mapInfo.MapInformation.DefaultAuthor;  					if (_mapInfo.Engine.UsesDefaultAuthor && _mapInfo.Engine.Version <= 8)  							lblDefaultAuthor.Margin = new Thickness(0' 37' 0' 3);    					// Set up the Type combo box  					// TODO: Add flags to formats?  					cbType_Cine.Visibility = cbType_FF.Visibility = _mapInfo.Engine.Version < 5 ? Visibility.Collapsed : Visibility.Visible;  					cbType_Cine.IsEnabled = cbType_FF.IsEnabled = _mapInfo.Engine.Version >= 5;  					cbType_FF.Content = _mapInfo.Engine.Version < 8 ? "Firefight" : "Spartan Ops";  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsMainMenu))  						cbType.SelectedIndex = 0;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsMultiplayer))  						cbType.SelectedIndex = 1;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsCampaign))  						cbType.SelectedIndex = 2;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsCinematic))  						cbType.SelectedIndex = 3;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsFirefight))  						cbType.SelectedIndex = 4;    					// Set up the Checkboxes  					cbForgeOnly.Visibility  = _mapInfo.Engine.Version < 9 ? Visibility.Collapsed : Visibility.Visible;  					cbVisible.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.Visible);  					cbGeneratesFilm.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.GeneratesFilm);  					cbDLC.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsDLC);  					cbForgeOnly.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsForgeOnly);    					// Load Max Teams  					if (_mapInfo.Engine.MaxTeamCollection != null)  						LoadMaxTeams();    					// Load MP Objects  					if (_mapInfo.Engine.MultiplayerObjectCollection != null)  						LoadMultiplayerObjects();    					// Load Insertion Points  					LoadInsertionPoints();    					// Update UI  					_startEditing = true;  					cbLanguages.SelectedIndex = 0;  					cbInsertIndex.SelectedIndex = 0;  					cbInsertLanguages.SelectedIndex = 0;    					if (App.AssemblyStorage.AssemblySettings.StartpageHideOnLaunch)  						App.AssemblyStorage.AssemblySettings.HomeWindow.ExternalTabClose(Home.TabGenre.StartPage);    					RecentFiles.AddNewEntry(new FileInfo(_blfLocation).Name' _blfLocation' "Map Info"' Settings.RecentFileType.MapInfo);  					Close();  				}));  			}  			catch (Exception ex)  			{  				Dispatcher.Invoke(new Action(delegate  				{  					MetroMessageBox.Show("Unable to open MapInfo"' ex.Message);  					App.AssemblyStorage.AssemblySettings.HomeWindow.ExternalTabClose(_tab);  					Close();  				}));  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,LoadMapInfo,The following statement contains a magic number: try  			{  				// Just a lazy way to validate the BLF file  				_blf = new PureBLF(_blfLocation);  				if (_blf.BLFChunks[1].ChunkMagic != "levl")  					throw new Exception("The selected Map Info BLF is not a valid Map Info BLF file.");  				_blf.Close();    				_mapInfo = new MapInfo(_blfLocation' App.AssemblyStorage.AssemblySettings.DefaultMapInfoDatabase);    				Dispatcher.Invoke(new Action(delegate  				{    					// Add BLF Info  					paneBLFInfo.Children.Insert(0' new MapHeaderEntry("MapInfo Version:"' _mapInfo.Engine.Version.ToString(CultureInfo.InvariantCulture)));  					paneBLFInfo.Children.Insert(1' new MapHeaderEntry("BLF Length:"' "0x" + _mapInfo.Stream.Length.ToString("X")));  					paneBLFInfo.Children.Insert(2' new MapHeaderEntry("BLF Chunks:"' _blf.BLFChunks.Count.ToString(CultureInfo.InvariantCulture)));  					  					// Hide unused elements  					if (_mapInfo.Engine.MaxTeamCollection == null)  						tiMaxTeams.Visibility = Visibility.Collapsed;  					if (_mapInfo.Engine.MultiplayerObjectCollection == null)  						tiMPObjects.Visibility = Visibility.Collapsed;  					if (!_mapInfo.Engine.UsesDefaultAuthor)  					{  						lblDefaultAuthor.Visibility = Visibility.Collapsed;  						txtDefaultAuthor.Visibility = Visibility.Collapsed;  					}    					// Load Languages  					LoadLanguages();    					// Load Map Info  					txtGameName.Text = _mapInfo.Engine.Name;  					txtMapID.Text = _mapInfo.MapInformation.MapID.ToString(CultureInfo.InvariantCulture);  					txtMapInternalName.Text = _mapInfo.MapInformation.InternalName;  					txtMapPhysicalName.Text = _mapInfo.MapInformation.PhysicalName;    					// Load Default Author & change margin if necessary  					txtDefaultAuthor.Text = _mapInfo.MapInformation.DefaultAuthor;  					if (_mapInfo.Engine.UsesDefaultAuthor && _mapInfo.Engine.Version <= 8)  							lblDefaultAuthor.Margin = new Thickness(0' 37' 0' 3);    					// Set up the Type combo box  					// TODO: Add flags to formats?  					cbType_Cine.Visibility = cbType_FF.Visibility = _mapInfo.Engine.Version < 5 ? Visibility.Collapsed : Visibility.Visible;  					cbType_Cine.IsEnabled = cbType_FF.IsEnabled = _mapInfo.Engine.Version >= 5;  					cbType_FF.Content = _mapInfo.Engine.Version < 8 ? "Firefight" : "Spartan Ops";  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsMainMenu))  						cbType.SelectedIndex = 0;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsMultiplayer))  						cbType.SelectedIndex = 1;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsCampaign))  						cbType.SelectedIndex = 2;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsCinematic))  						cbType.SelectedIndex = 3;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsFirefight))  						cbType.SelectedIndex = 4;    					// Set up the Checkboxes  					cbForgeOnly.Visibility  = _mapInfo.Engine.Version < 9 ? Visibility.Collapsed : Visibility.Visible;  					cbVisible.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.Visible);  					cbGeneratesFilm.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.GeneratesFilm);  					cbDLC.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsDLC);  					cbForgeOnly.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsForgeOnly);    					// Load Max Teams  					if (_mapInfo.Engine.MaxTeamCollection != null)  						LoadMaxTeams();    					// Load MP Objects  					if (_mapInfo.Engine.MultiplayerObjectCollection != null)  						LoadMultiplayerObjects();    					// Load Insertion Points  					LoadInsertionPoints();    					// Update UI  					_startEditing = true;  					cbLanguages.SelectedIndex = 0;  					cbInsertIndex.SelectedIndex = 0;  					cbInsertLanguages.SelectedIndex = 0;    					if (App.AssemblyStorage.AssemblySettings.StartpageHideOnLaunch)  						App.AssemblyStorage.AssemblySettings.HomeWindow.ExternalTabClose(Home.TabGenre.StartPage);    					RecentFiles.AddNewEntry(new FileInfo(_blfLocation).Name' _blfLocation' "Map Info"' Settings.RecentFileType.MapInfo);  					Close();  				}));  			}  			catch (Exception ex)  			{  				Dispatcher.Invoke(new Action(delegate  				{  					MetroMessageBox.Show("Unable to open MapInfo"' ex.Message);  					App.AssemblyStorage.AssemblySettings.HomeWindow.ExternalTabClose(_tab);  					Close();  				}));  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,LoadMapInfo,The following statement contains a magic number: try  			{  				// Just a lazy way to validate the BLF file  				_blf = new PureBLF(_blfLocation);  				if (_blf.BLFChunks[1].ChunkMagic != "levl")  					throw new Exception("The selected Map Info BLF is not a valid Map Info BLF file.");  				_blf.Close();    				_mapInfo = new MapInfo(_blfLocation' App.AssemblyStorage.AssemblySettings.DefaultMapInfoDatabase);    				Dispatcher.Invoke(new Action(delegate  				{    					// Add BLF Info  					paneBLFInfo.Children.Insert(0' new MapHeaderEntry("MapInfo Version:"' _mapInfo.Engine.Version.ToString(CultureInfo.InvariantCulture)));  					paneBLFInfo.Children.Insert(1' new MapHeaderEntry("BLF Length:"' "0x" + _mapInfo.Stream.Length.ToString("X")));  					paneBLFInfo.Children.Insert(2' new MapHeaderEntry("BLF Chunks:"' _blf.BLFChunks.Count.ToString(CultureInfo.InvariantCulture)));  					  					// Hide unused elements  					if (_mapInfo.Engine.MaxTeamCollection == null)  						tiMaxTeams.Visibility = Visibility.Collapsed;  					if (_mapInfo.Engine.MultiplayerObjectCollection == null)  						tiMPObjects.Visibility = Visibility.Collapsed;  					if (!_mapInfo.Engine.UsesDefaultAuthor)  					{  						lblDefaultAuthor.Visibility = Visibility.Collapsed;  						txtDefaultAuthor.Visibility = Visibility.Collapsed;  					}    					// Load Languages  					LoadLanguages();    					// Load Map Info  					txtGameName.Text = _mapInfo.Engine.Name;  					txtMapID.Text = _mapInfo.MapInformation.MapID.ToString(CultureInfo.InvariantCulture);  					txtMapInternalName.Text = _mapInfo.MapInformation.InternalName;  					txtMapPhysicalName.Text = _mapInfo.MapInformation.PhysicalName;    					// Load Default Author & change margin if necessary  					txtDefaultAuthor.Text = _mapInfo.MapInformation.DefaultAuthor;  					if (_mapInfo.Engine.UsesDefaultAuthor && _mapInfo.Engine.Version <= 8)  							lblDefaultAuthor.Margin = new Thickness(0' 37' 0' 3);    					// Set up the Type combo box  					// TODO: Add flags to formats?  					cbType_Cine.Visibility = cbType_FF.Visibility = _mapInfo.Engine.Version < 5 ? Visibility.Collapsed : Visibility.Visible;  					cbType_Cine.IsEnabled = cbType_FF.IsEnabled = _mapInfo.Engine.Version >= 5;  					cbType_FF.Content = _mapInfo.Engine.Version < 8 ? "Firefight" : "Spartan Ops";  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsMainMenu))  						cbType.SelectedIndex = 0;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsMultiplayer))  						cbType.SelectedIndex = 1;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsCampaign))  						cbType.SelectedIndex = 2;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsCinematic))  						cbType.SelectedIndex = 3;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsFirefight))  						cbType.SelectedIndex = 4;    					// Set up the Checkboxes  					cbForgeOnly.Visibility  = _mapInfo.Engine.Version < 9 ? Visibility.Collapsed : Visibility.Visible;  					cbVisible.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.Visible);  					cbGeneratesFilm.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.GeneratesFilm);  					cbDLC.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsDLC);  					cbForgeOnly.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsForgeOnly);    					// Load Max Teams  					if (_mapInfo.Engine.MaxTeamCollection != null)  						LoadMaxTeams();    					// Load MP Objects  					if (_mapInfo.Engine.MultiplayerObjectCollection != null)  						LoadMultiplayerObjects();    					// Load Insertion Points  					LoadInsertionPoints();    					// Update UI  					_startEditing = true;  					cbLanguages.SelectedIndex = 0;  					cbInsertIndex.SelectedIndex = 0;  					cbInsertLanguages.SelectedIndex = 0;    					if (App.AssemblyStorage.AssemblySettings.StartpageHideOnLaunch)  						App.AssemblyStorage.AssemblySettings.HomeWindow.ExternalTabClose(Home.TabGenre.StartPage);    					RecentFiles.AddNewEntry(new FileInfo(_blfLocation).Name' _blfLocation' "Map Info"' Settings.RecentFileType.MapInfo);  					Close();  				}));  			}  			catch (Exception ex)  			{  				Dispatcher.Invoke(new Action(delegate  				{  					MetroMessageBox.Show("Unable to open MapInfo"' ex.Message);  					App.AssemblyStorage.AssemblySettings.HomeWindow.ExternalTabClose(_tab);  					Close();  				}));  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,LoadMapInfo,The following statement contains a magic number: try  			{  				// Just a lazy way to validate the BLF file  				_blf = new PureBLF(_blfLocation);  				if (_blf.BLFChunks[1].ChunkMagic != "levl")  					throw new Exception("The selected Map Info BLF is not a valid Map Info BLF file.");  				_blf.Close();    				_mapInfo = new MapInfo(_blfLocation' App.AssemblyStorage.AssemblySettings.DefaultMapInfoDatabase);    				Dispatcher.Invoke(new Action(delegate  				{    					// Add BLF Info  					paneBLFInfo.Children.Insert(0' new MapHeaderEntry("MapInfo Version:"' _mapInfo.Engine.Version.ToString(CultureInfo.InvariantCulture)));  					paneBLFInfo.Children.Insert(1' new MapHeaderEntry("BLF Length:"' "0x" + _mapInfo.Stream.Length.ToString("X")));  					paneBLFInfo.Children.Insert(2' new MapHeaderEntry("BLF Chunks:"' _blf.BLFChunks.Count.ToString(CultureInfo.InvariantCulture)));  					  					// Hide unused elements  					if (_mapInfo.Engine.MaxTeamCollection == null)  						tiMaxTeams.Visibility = Visibility.Collapsed;  					if (_mapInfo.Engine.MultiplayerObjectCollection == null)  						tiMPObjects.Visibility = Visibility.Collapsed;  					if (!_mapInfo.Engine.UsesDefaultAuthor)  					{  						lblDefaultAuthor.Visibility = Visibility.Collapsed;  						txtDefaultAuthor.Visibility = Visibility.Collapsed;  					}    					// Load Languages  					LoadLanguages();    					// Load Map Info  					txtGameName.Text = _mapInfo.Engine.Name;  					txtMapID.Text = _mapInfo.MapInformation.MapID.ToString(CultureInfo.InvariantCulture);  					txtMapInternalName.Text = _mapInfo.MapInformation.InternalName;  					txtMapPhysicalName.Text = _mapInfo.MapInformation.PhysicalName;    					// Load Default Author & change margin if necessary  					txtDefaultAuthor.Text = _mapInfo.MapInformation.DefaultAuthor;  					if (_mapInfo.Engine.UsesDefaultAuthor && _mapInfo.Engine.Version <= 8)  							lblDefaultAuthor.Margin = new Thickness(0' 37' 0' 3);    					// Set up the Type combo box  					// TODO: Add flags to formats?  					cbType_Cine.Visibility = cbType_FF.Visibility = _mapInfo.Engine.Version < 5 ? Visibility.Collapsed : Visibility.Visible;  					cbType_Cine.IsEnabled = cbType_FF.IsEnabled = _mapInfo.Engine.Version >= 5;  					cbType_FF.Content = _mapInfo.Engine.Version < 8 ? "Firefight" : "Spartan Ops";  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsMainMenu))  						cbType.SelectedIndex = 0;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsMultiplayer))  						cbType.SelectedIndex = 1;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsCampaign))  						cbType.SelectedIndex = 2;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsCinematic))  						cbType.SelectedIndex = 3;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsFirefight))  						cbType.SelectedIndex = 4;    					// Set up the Checkboxes  					cbForgeOnly.Visibility  = _mapInfo.Engine.Version < 9 ? Visibility.Collapsed : Visibility.Visible;  					cbVisible.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.Visible);  					cbGeneratesFilm.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.GeneratesFilm);  					cbDLC.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsDLC);  					cbForgeOnly.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsForgeOnly);    					// Load Max Teams  					if (_mapInfo.Engine.MaxTeamCollection != null)  						LoadMaxTeams();    					// Load MP Objects  					if (_mapInfo.Engine.MultiplayerObjectCollection != null)  						LoadMultiplayerObjects();    					// Load Insertion Points  					LoadInsertionPoints();    					// Update UI  					_startEditing = true;  					cbLanguages.SelectedIndex = 0;  					cbInsertIndex.SelectedIndex = 0;  					cbInsertLanguages.SelectedIndex = 0;    					if (App.AssemblyStorage.AssemblySettings.StartpageHideOnLaunch)  						App.AssemblyStorage.AssemblySettings.HomeWindow.ExternalTabClose(Home.TabGenre.StartPage);    					RecentFiles.AddNewEntry(new FileInfo(_blfLocation).Name' _blfLocation' "Map Info"' Settings.RecentFileType.MapInfo);  					Close();  				}));  			}  			catch (Exception ex)  			{  				Dispatcher.Invoke(new Action(delegate  				{  					MetroMessageBox.Show("Unable to open MapInfo"' ex.Message);  					App.AssemblyStorage.AssemblySettings.HomeWindow.ExternalTabClose(_tab);  					Close();  				}));  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,LoadMapInfo,The following statement contains a magic number: try  			{  				// Just a lazy way to validate the BLF file  				_blf = new PureBLF(_blfLocation);  				if (_blf.BLFChunks[1].ChunkMagic != "levl")  					throw new Exception("The selected Map Info BLF is not a valid Map Info BLF file.");  				_blf.Close();    				_mapInfo = new MapInfo(_blfLocation' App.AssemblyStorage.AssemblySettings.DefaultMapInfoDatabase);    				Dispatcher.Invoke(new Action(delegate  				{    					// Add BLF Info  					paneBLFInfo.Children.Insert(0' new MapHeaderEntry("MapInfo Version:"' _mapInfo.Engine.Version.ToString(CultureInfo.InvariantCulture)));  					paneBLFInfo.Children.Insert(1' new MapHeaderEntry("BLF Length:"' "0x" + _mapInfo.Stream.Length.ToString("X")));  					paneBLFInfo.Children.Insert(2' new MapHeaderEntry("BLF Chunks:"' _blf.BLFChunks.Count.ToString(CultureInfo.InvariantCulture)));  					  					// Hide unused elements  					if (_mapInfo.Engine.MaxTeamCollection == null)  						tiMaxTeams.Visibility = Visibility.Collapsed;  					if (_mapInfo.Engine.MultiplayerObjectCollection == null)  						tiMPObjects.Visibility = Visibility.Collapsed;  					if (!_mapInfo.Engine.UsesDefaultAuthor)  					{  						lblDefaultAuthor.Visibility = Visibility.Collapsed;  						txtDefaultAuthor.Visibility = Visibility.Collapsed;  					}    					// Load Languages  					LoadLanguages();    					// Load Map Info  					txtGameName.Text = _mapInfo.Engine.Name;  					txtMapID.Text = _mapInfo.MapInformation.MapID.ToString(CultureInfo.InvariantCulture);  					txtMapInternalName.Text = _mapInfo.MapInformation.InternalName;  					txtMapPhysicalName.Text = _mapInfo.MapInformation.PhysicalName;    					// Load Default Author & change margin if necessary  					txtDefaultAuthor.Text = _mapInfo.MapInformation.DefaultAuthor;  					if (_mapInfo.Engine.UsesDefaultAuthor && _mapInfo.Engine.Version <= 8)  							lblDefaultAuthor.Margin = new Thickness(0' 37' 0' 3);    					// Set up the Type combo box  					// TODO: Add flags to formats?  					cbType_Cine.Visibility = cbType_FF.Visibility = _mapInfo.Engine.Version < 5 ? Visibility.Collapsed : Visibility.Visible;  					cbType_Cine.IsEnabled = cbType_FF.IsEnabled = _mapInfo.Engine.Version >= 5;  					cbType_FF.Content = _mapInfo.Engine.Version < 8 ? "Firefight" : "Spartan Ops";  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsMainMenu))  						cbType.SelectedIndex = 0;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsMultiplayer))  						cbType.SelectedIndex = 1;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsCampaign))  						cbType.SelectedIndex = 2;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsCinematic))  						cbType.SelectedIndex = 3;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsFirefight))  						cbType.SelectedIndex = 4;    					// Set up the Checkboxes  					cbForgeOnly.Visibility  = _mapInfo.Engine.Version < 9 ? Visibility.Collapsed : Visibility.Visible;  					cbVisible.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.Visible);  					cbGeneratesFilm.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.GeneratesFilm);  					cbDLC.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsDLC);  					cbForgeOnly.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsForgeOnly);    					// Load Max Teams  					if (_mapInfo.Engine.MaxTeamCollection != null)  						LoadMaxTeams();    					// Load MP Objects  					if (_mapInfo.Engine.MultiplayerObjectCollection != null)  						LoadMultiplayerObjects();    					// Load Insertion Points  					LoadInsertionPoints();    					// Update UI  					_startEditing = true;  					cbLanguages.SelectedIndex = 0;  					cbInsertIndex.SelectedIndex = 0;  					cbInsertLanguages.SelectedIndex = 0;    					if (App.AssemblyStorage.AssemblySettings.StartpageHideOnLaunch)  						App.AssemblyStorage.AssemblySettings.HomeWindow.ExternalTabClose(Home.TabGenre.StartPage);    					RecentFiles.AddNewEntry(new FileInfo(_blfLocation).Name' _blfLocation' "Map Info"' Settings.RecentFileType.MapInfo);  					Close();  				}));  			}  			catch (Exception ex)  			{  				Dispatcher.Invoke(new Action(delegate  				{  					MetroMessageBox.Show("Unable to open MapInfo"' ex.Message);  					App.AssemblyStorage.AssemblySettings.HomeWindow.ExternalTabClose(_tab);  					Close();  				}));  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,LoadMapInfo,The following statement contains a magic number: try  			{  				// Just a lazy way to validate the BLF file  				_blf = new PureBLF(_blfLocation);  				if (_blf.BLFChunks[1].ChunkMagic != "levl")  					throw new Exception("The selected Map Info BLF is not a valid Map Info BLF file.");  				_blf.Close();    				_mapInfo = new MapInfo(_blfLocation' App.AssemblyStorage.AssemblySettings.DefaultMapInfoDatabase);    				Dispatcher.Invoke(new Action(delegate  				{    					// Add BLF Info  					paneBLFInfo.Children.Insert(0' new MapHeaderEntry("MapInfo Version:"' _mapInfo.Engine.Version.ToString(CultureInfo.InvariantCulture)));  					paneBLFInfo.Children.Insert(1' new MapHeaderEntry("BLF Length:"' "0x" + _mapInfo.Stream.Length.ToString("X")));  					paneBLFInfo.Children.Insert(2' new MapHeaderEntry("BLF Chunks:"' _blf.BLFChunks.Count.ToString(CultureInfo.InvariantCulture)));  					  					// Hide unused elements  					if (_mapInfo.Engine.MaxTeamCollection == null)  						tiMaxTeams.Visibility = Visibility.Collapsed;  					if (_mapInfo.Engine.MultiplayerObjectCollection == null)  						tiMPObjects.Visibility = Visibility.Collapsed;  					if (!_mapInfo.Engine.UsesDefaultAuthor)  					{  						lblDefaultAuthor.Visibility = Visibility.Collapsed;  						txtDefaultAuthor.Visibility = Visibility.Collapsed;  					}    					// Load Languages  					LoadLanguages();    					// Load Map Info  					txtGameName.Text = _mapInfo.Engine.Name;  					txtMapID.Text = _mapInfo.MapInformation.MapID.ToString(CultureInfo.InvariantCulture);  					txtMapInternalName.Text = _mapInfo.MapInformation.InternalName;  					txtMapPhysicalName.Text = _mapInfo.MapInformation.PhysicalName;    					// Load Default Author & change margin if necessary  					txtDefaultAuthor.Text = _mapInfo.MapInformation.DefaultAuthor;  					if (_mapInfo.Engine.UsesDefaultAuthor && _mapInfo.Engine.Version <= 8)  							lblDefaultAuthor.Margin = new Thickness(0' 37' 0' 3);    					// Set up the Type combo box  					// TODO: Add flags to formats?  					cbType_Cine.Visibility = cbType_FF.Visibility = _mapInfo.Engine.Version < 5 ? Visibility.Collapsed : Visibility.Visible;  					cbType_Cine.IsEnabled = cbType_FF.IsEnabled = _mapInfo.Engine.Version >= 5;  					cbType_FF.Content = _mapInfo.Engine.Version < 8 ? "Firefight" : "Spartan Ops";  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsMainMenu))  						cbType.SelectedIndex = 0;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsMultiplayer))  						cbType.SelectedIndex = 1;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsCampaign))  						cbType.SelectedIndex = 2;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsCinematic))  						cbType.SelectedIndex = 3;  					if (_mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsFirefight))  						cbType.SelectedIndex = 4;    					// Set up the Checkboxes  					cbForgeOnly.Visibility  = _mapInfo.Engine.Version < 9 ? Visibility.Collapsed : Visibility.Visible;  					cbVisible.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.Visible);  					cbGeneratesFilm.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.GeneratesFilm);  					cbDLC.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsDLC);  					cbForgeOnly.IsChecked = _mapInfo.MapInformation.Flags.HasFlag(LevelFlags.IsForgeOnly);    					// Load Max Teams  					if (_mapInfo.Engine.MaxTeamCollection != null)  						LoadMaxTeams();    					// Load MP Objects  					if (_mapInfo.Engine.MultiplayerObjectCollection != null)  						LoadMultiplayerObjects();    					// Load Insertion Points  					LoadInsertionPoints();    					// Update UI  					_startEditing = true;  					cbLanguages.SelectedIndex = 0;  					cbInsertIndex.SelectedIndex = 0;  					cbInsertLanguages.SelectedIndex = 0;    					if (App.AssemblyStorage.AssemblySettings.StartpageHideOnLaunch)  						App.AssemblyStorage.AssemblySettings.HomeWindow.ExternalTabClose(Home.TabGenre.StartPage);    					RecentFiles.AddNewEntry(new FileInfo(_blfLocation).Name' _blfLocation' "Map Info"' Settings.RecentFileType.MapInfo);  					Close();  				}));  			}  			catch (Exception ex)  			{  				Dispatcher.Invoke(new Action(delegate  				{  					MetroMessageBox.Show("Unable to open MapInfo"' ex.Message);  					App.AssemblyStorage.AssemblySettings.HomeWindow.ExternalTabClose(_tab);  					Close();  				}));  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,LoadLanguages,The following statement contains a magic number: cbLanguages.DataContext = cbInsertLanguages.DataContext = _mapInfo.Engine.LanguageCount > 12 ? _halo4Languages : _languages;
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,LoadMaxTeams,The following statement contains a magic number: foreach (var maxTeam in _mapInfo.Engine.MaxTeamCollection)  			{  				// Create a TextBlock to show the object's friendly name  				var textBlock = new TextBlock  				{  					Text = maxTeam.Name + ":"'  					Margin = maxTeam.Index < 3 ? new Thickness(0' 10' 0' 3) : new Thickness(0' 7' 0' 3)'  					VerticalAlignment = VerticalAlignment.Center'  					Tag = maxTeam.Index  				};  				textBlock.SetResourceReference(StyleProperty' "GenericTextblock");    				// Create the TextBox to hold the data  				var textBox = new TextBox  				{  					Text = _mapInfo.MapInformation.MaxTeamCounts[maxTeam.Index].ToString(CultureInfo.InvariantCulture)'  					Margin = maxTeam.Index < 3 ? new Thickness(10' 7' 0' 0) : new Thickness(10' 4' 0' 0)'  					MaxLength = 3'  					Tag = maxTeam.Index  				};  				textBox.TextChanged += NumericalTextBoxOnTextChanged;  				_maxTeamTextBoxes.Add(textBox);    				// Put the TextBlock and TextBox in the correct column  				switch (maxTeam.Index % 3)  				{  					case 0:  						stkRow1Names.Children.Add(textBlock);  						stkRow1TextBoxes.Children.Add(textBox);  						break;  					case 1:  						stkRow2Names.Children.Add(textBlock);  						stkRow2TextBoxes.Children.Add(textBox);  						break;  					case 2:  						stkRow3Names.Children.Add(textBlock);  						stkRow3TextBoxes.Children.Add(textBox);  						break;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,LoadMaxTeams,The following statement contains a magic number: foreach (var maxTeam in _mapInfo.Engine.MaxTeamCollection)  			{  				// Create a TextBlock to show the object's friendly name  				var textBlock = new TextBlock  				{  					Text = maxTeam.Name + ":"'  					Margin = maxTeam.Index < 3 ? new Thickness(0' 10' 0' 3) : new Thickness(0' 7' 0' 3)'  					VerticalAlignment = VerticalAlignment.Center'  					Tag = maxTeam.Index  				};  				textBlock.SetResourceReference(StyleProperty' "GenericTextblock");    				// Create the TextBox to hold the data  				var textBox = new TextBox  				{  					Text = _mapInfo.MapInformation.MaxTeamCounts[maxTeam.Index].ToString(CultureInfo.InvariantCulture)'  					Margin = maxTeam.Index < 3 ? new Thickness(10' 7' 0' 0) : new Thickness(10' 4' 0' 0)'  					MaxLength = 3'  					Tag = maxTeam.Index  				};  				textBox.TextChanged += NumericalTextBoxOnTextChanged;  				_maxTeamTextBoxes.Add(textBox);    				// Put the TextBlock and TextBox in the correct column  				switch (maxTeam.Index % 3)  				{  					case 0:  						stkRow1Names.Children.Add(textBlock);  						stkRow1TextBoxes.Children.Add(textBox);  						break;  					case 1:  						stkRow2Names.Children.Add(textBlock);  						stkRow2TextBoxes.Children.Add(textBox);  						break;  					case 2:  						stkRow3Names.Children.Add(textBlock);  						stkRow3TextBoxes.Children.Add(textBox);  						break;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,LoadMaxTeams,The following statement contains a magic number: foreach (var maxTeam in _mapInfo.Engine.MaxTeamCollection)  			{  				// Create a TextBlock to show the object's friendly name  				var textBlock = new TextBlock  				{  					Text = maxTeam.Name + ":"'  					Margin = maxTeam.Index < 3 ? new Thickness(0' 10' 0' 3) : new Thickness(0' 7' 0' 3)'  					VerticalAlignment = VerticalAlignment.Center'  					Tag = maxTeam.Index  				};  				textBlock.SetResourceReference(StyleProperty' "GenericTextblock");    				// Create the TextBox to hold the data  				var textBox = new TextBox  				{  					Text = _mapInfo.MapInformation.MaxTeamCounts[maxTeam.Index].ToString(CultureInfo.InvariantCulture)'  					Margin = maxTeam.Index < 3 ? new Thickness(10' 7' 0' 0) : new Thickness(10' 4' 0' 0)'  					MaxLength = 3'  					Tag = maxTeam.Index  				};  				textBox.TextChanged += NumericalTextBoxOnTextChanged;  				_maxTeamTextBoxes.Add(textBox);    				// Put the TextBlock and TextBox in the correct column  				switch (maxTeam.Index % 3)  				{  					case 0:  						stkRow1Names.Children.Add(textBlock);  						stkRow1TextBoxes.Children.Add(textBox);  						break;  					case 1:  						stkRow2Names.Children.Add(textBlock);  						stkRow2TextBoxes.Children.Add(textBox);  						break;  					case 2:  						stkRow3Names.Children.Add(textBlock);  						stkRow3TextBoxes.Children.Add(textBox);  						break;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,LoadMaxTeams,The following statement contains a magic number: foreach (var maxTeam in _mapInfo.Engine.MaxTeamCollection)  			{  				// Create a TextBlock to show the object's friendly name  				var textBlock = new TextBlock  				{  					Text = maxTeam.Name + ":"'  					Margin = maxTeam.Index < 3 ? new Thickness(0' 10' 0' 3) : new Thickness(0' 7' 0' 3)'  					VerticalAlignment = VerticalAlignment.Center'  					Tag = maxTeam.Index  				};  				textBlock.SetResourceReference(StyleProperty' "GenericTextblock");    				// Create the TextBox to hold the data  				var textBox = new TextBox  				{  					Text = _mapInfo.MapInformation.MaxTeamCounts[maxTeam.Index].ToString(CultureInfo.InvariantCulture)'  					Margin = maxTeam.Index < 3 ? new Thickness(10' 7' 0' 0) : new Thickness(10' 4' 0' 0)'  					MaxLength = 3'  					Tag = maxTeam.Index  				};  				textBox.TextChanged += NumericalTextBoxOnTextChanged;  				_maxTeamTextBoxes.Add(textBox);    				// Put the TextBlock and TextBox in the correct column  				switch (maxTeam.Index % 3)  				{  					case 0:  						stkRow1Names.Children.Add(textBlock);  						stkRow1TextBoxes.Children.Add(textBox);  						break;  					case 1:  						stkRow2Names.Children.Add(textBlock);  						stkRow2TextBoxes.Children.Add(textBox);  						break;  					case 2:  						stkRow3Names.Children.Add(textBlock);  						stkRow3TextBoxes.Children.Add(textBox);  						break;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,LoadMaxTeams,The following statement contains a magic number: foreach (var maxTeam in _mapInfo.Engine.MaxTeamCollection)  			{  				// Create a TextBlock to show the object's friendly name  				var textBlock = new TextBlock  				{  					Text = maxTeam.Name + ":"'  					Margin = maxTeam.Index < 3 ? new Thickness(0' 10' 0' 3) : new Thickness(0' 7' 0' 3)'  					VerticalAlignment = VerticalAlignment.Center'  					Tag = maxTeam.Index  				};  				textBlock.SetResourceReference(StyleProperty' "GenericTextblock");    				// Create the TextBox to hold the data  				var textBox = new TextBox  				{  					Text = _mapInfo.MapInformation.MaxTeamCounts[maxTeam.Index].ToString(CultureInfo.InvariantCulture)'  					Margin = maxTeam.Index < 3 ? new Thickness(10' 7' 0' 0) : new Thickness(10' 4' 0' 0)'  					MaxLength = 3'  					Tag = maxTeam.Index  				};  				textBox.TextChanged += NumericalTextBoxOnTextChanged;  				_maxTeamTextBoxes.Add(textBox);    				// Put the TextBlock and TextBox in the correct column  				switch (maxTeam.Index % 3)  				{  					case 0:  						stkRow1Names.Children.Add(textBlock);  						stkRow1TextBoxes.Children.Add(textBox);  						break;  					case 1:  						stkRow2Names.Children.Add(textBlock);  						stkRow2TextBoxes.Children.Add(textBox);  						break;  					case 2:  						stkRow3Names.Children.Add(textBlock);  						stkRow3TextBoxes.Children.Add(textBox);  						break;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,LoadMaxTeams,The following statement contains a magic number: foreach (var maxTeam in _mapInfo.Engine.MaxTeamCollection)  			{  				// Create a TextBlock to show the object's friendly name  				var textBlock = new TextBlock  				{  					Text = maxTeam.Name + ":"'  					Margin = maxTeam.Index < 3 ? new Thickness(0' 10' 0' 3) : new Thickness(0' 7' 0' 3)'  					VerticalAlignment = VerticalAlignment.Center'  					Tag = maxTeam.Index  				};  				textBlock.SetResourceReference(StyleProperty' "GenericTextblock");    				// Create the TextBox to hold the data  				var textBox = new TextBox  				{  					Text = _mapInfo.MapInformation.MaxTeamCounts[maxTeam.Index].ToString(CultureInfo.InvariantCulture)'  					Margin = maxTeam.Index < 3 ? new Thickness(10' 7' 0' 0) : new Thickness(10' 4' 0' 0)'  					MaxLength = 3'  					Tag = maxTeam.Index  				};  				textBox.TextChanged += NumericalTextBoxOnTextChanged;  				_maxTeamTextBoxes.Add(textBox);    				// Put the TextBlock and TextBox in the correct column  				switch (maxTeam.Index % 3)  				{  					case 0:  						stkRow1Names.Children.Add(textBlock);  						stkRow1TextBoxes.Children.Add(textBox);  						break;  					case 1:  						stkRow2Names.Children.Add(textBlock);  						stkRow2TextBoxes.Children.Add(textBox);  						break;  					case 2:  						stkRow3Names.Children.Add(textBlock);  						stkRow3TextBoxes.Children.Add(textBox);  						break;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,LoadMaxTeams,The following statement contains a magic number: foreach (var maxTeam in _mapInfo.Engine.MaxTeamCollection)  			{  				// Create a TextBlock to show the object's friendly name  				var textBlock = new TextBlock  				{  					Text = maxTeam.Name + ":"'  					Margin = maxTeam.Index < 3 ? new Thickness(0' 10' 0' 3) : new Thickness(0' 7' 0' 3)'  					VerticalAlignment = VerticalAlignment.Center'  					Tag = maxTeam.Index  				};  				textBlock.SetResourceReference(StyleProperty' "GenericTextblock");    				// Create the TextBox to hold the data  				var textBox = new TextBox  				{  					Text = _mapInfo.MapInformation.MaxTeamCounts[maxTeam.Index].ToString(CultureInfo.InvariantCulture)'  					Margin = maxTeam.Index < 3 ? new Thickness(10' 7' 0' 0) : new Thickness(10' 4' 0' 0)'  					MaxLength = 3'  					Tag = maxTeam.Index  				};  				textBox.TextChanged += NumericalTextBoxOnTextChanged;  				_maxTeamTextBoxes.Add(textBox);    				// Put the TextBlock and TextBox in the correct column  				switch (maxTeam.Index % 3)  				{  					case 0:  						stkRow1Names.Children.Add(textBlock);  						stkRow1TextBoxes.Children.Add(textBox);  						break;  					case 1:  						stkRow2Names.Children.Add(textBlock);  						stkRow2TextBoxes.Children.Add(textBox);  						break;  					case 2:  						stkRow3Names.Children.Add(textBlock);  						stkRow3TextBoxes.Children.Add(textBox);  						break;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,LoadMaxTeams,The following statement contains a magic number: foreach (var maxTeam in _mapInfo.Engine.MaxTeamCollection)  			{  				// Create a TextBlock to show the object's friendly name  				var textBlock = new TextBlock  				{  					Text = maxTeam.Name + ":"'  					Margin = maxTeam.Index < 3 ? new Thickness(0' 10' 0' 3) : new Thickness(0' 7' 0' 3)'  					VerticalAlignment = VerticalAlignment.Center'  					Tag = maxTeam.Index  				};  				textBlock.SetResourceReference(StyleProperty' "GenericTextblock");    				// Create the TextBox to hold the data  				var textBox = new TextBox  				{  					Text = _mapInfo.MapInformation.MaxTeamCounts[maxTeam.Index].ToString(CultureInfo.InvariantCulture)'  					Margin = maxTeam.Index < 3 ? new Thickness(10' 7' 0' 0) : new Thickness(10' 4' 0' 0)'  					MaxLength = 3'  					Tag = maxTeam.Index  				};  				textBox.TextChanged += NumericalTextBoxOnTextChanged;  				_maxTeamTextBoxes.Add(textBox);    				// Put the TextBlock and TextBox in the correct column  				switch (maxTeam.Index % 3)  				{  					case 0:  						stkRow1Names.Children.Add(textBlock);  						stkRow1TextBoxes.Children.Add(textBox);  						break;  					case 1:  						stkRow2Names.Children.Add(textBlock);  						stkRow2TextBoxes.Children.Add(textBox);  						break;  					case 2:  						stkRow3Names.Children.Add(textBlock);  						stkRow3TextBoxes.Children.Add(textBox);  						break;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,LoadMaxTeams,The following statement contains a magic number: foreach (var maxTeam in _mapInfo.Engine.MaxTeamCollection)  			{  				// Create a TextBlock to show the object's friendly name  				var textBlock = new TextBlock  				{  					Text = maxTeam.Name + ":"'  					Margin = maxTeam.Index < 3 ? new Thickness(0' 10' 0' 3) : new Thickness(0' 7' 0' 3)'  					VerticalAlignment = VerticalAlignment.Center'  					Tag = maxTeam.Index  				};  				textBlock.SetResourceReference(StyleProperty' "GenericTextblock");    				// Create the TextBox to hold the data  				var textBox = new TextBox  				{  					Text = _mapInfo.MapInformation.MaxTeamCounts[maxTeam.Index].ToString(CultureInfo.InvariantCulture)'  					Margin = maxTeam.Index < 3 ? new Thickness(10' 7' 0' 0) : new Thickness(10' 4' 0' 0)'  					MaxLength = 3'  					Tag = maxTeam.Index  				};  				textBox.TextChanged += NumericalTextBoxOnTextChanged;  				_maxTeamTextBoxes.Add(textBox);    				// Put the TextBlock and TextBox in the correct column  				switch (maxTeam.Index % 3)  				{  					case 0:  						stkRow1Names.Children.Add(textBlock);  						stkRow1TextBoxes.Children.Add(textBox);  						break;  					case 1:  						stkRow2Names.Children.Add(textBlock);  						stkRow2TextBoxes.Children.Add(textBox);  						break;  					case 2:  						stkRow3Names.Children.Add(textBlock);  						stkRow3TextBoxes.Children.Add(textBox);  						break;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,LoadMaxTeams,The following statement contains a magic number: foreach (var maxTeam in _mapInfo.Engine.MaxTeamCollection)  			{  				// Create a TextBlock to show the object's friendly name  				var textBlock = new TextBlock  				{  					Text = maxTeam.Name + ":"'  					Margin = maxTeam.Index < 3 ? new Thickness(0' 10' 0' 3) : new Thickness(0' 7' 0' 3)'  					VerticalAlignment = VerticalAlignment.Center'  					Tag = maxTeam.Index  				};  				textBlock.SetResourceReference(StyleProperty' "GenericTextblock");    				// Create the TextBox to hold the data  				var textBox = new TextBox  				{  					Text = _mapInfo.MapInformation.MaxTeamCounts[maxTeam.Index].ToString(CultureInfo.InvariantCulture)'  					Margin = maxTeam.Index < 3 ? new Thickness(10' 7' 0' 0) : new Thickness(10' 4' 0' 0)'  					MaxLength = 3'  					Tag = maxTeam.Index  				};  				textBox.TextChanged += NumericalTextBoxOnTextChanged;  				_maxTeamTextBoxes.Add(textBox);    				// Put the TextBlock and TextBox in the correct column  				switch (maxTeam.Index % 3)  				{  					case 0:  						stkRow1Names.Children.Add(textBlock);  						stkRow1TextBoxes.Children.Add(textBox);  						break;  					case 1:  						stkRow2Names.Children.Add(textBlock);  						stkRow2TextBoxes.Children.Add(textBox);  						break;  					case 2:  						stkRow3Names.Children.Add(textBlock);  						stkRow3TextBoxes.Children.Add(textBox);  						break;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,LoadMaxTeams,The following statement contains a magic number: foreach (var maxTeam in _mapInfo.Engine.MaxTeamCollection)  			{  				// Create a TextBlock to show the object's friendly name  				var textBlock = new TextBlock  				{  					Text = maxTeam.Name + ":"'  					Margin = maxTeam.Index < 3 ? new Thickness(0' 10' 0' 3) : new Thickness(0' 7' 0' 3)'  					VerticalAlignment = VerticalAlignment.Center'  					Tag = maxTeam.Index  				};  				textBlock.SetResourceReference(StyleProperty' "GenericTextblock");    				// Create the TextBox to hold the data  				var textBox = new TextBox  				{  					Text = _mapInfo.MapInformation.MaxTeamCounts[maxTeam.Index].ToString(CultureInfo.InvariantCulture)'  					Margin = maxTeam.Index < 3 ? new Thickness(10' 7' 0' 0) : new Thickness(10' 4' 0' 0)'  					MaxLength = 3'  					Tag = maxTeam.Index  				};  				textBox.TextChanged += NumericalTextBoxOnTextChanged;  				_maxTeamTextBoxes.Add(textBox);    				// Put the TextBlock and TextBox in the correct column  				switch (maxTeam.Index % 3)  				{  					case 0:  						stkRow1Names.Children.Add(textBlock);  						stkRow1TextBoxes.Children.Add(textBox);  						break;  					case 1:  						stkRow2Names.Children.Add(textBlock);  						stkRow2TextBoxes.Children.Add(textBox);  						break;  					case 2:  						stkRow3Names.Children.Add(textBlock);  						stkRow3TextBoxes.Children.Add(textBox);  						break;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,LoadMaxTeams,The following statement contains a magic number: foreach (var maxTeam in _mapInfo.Engine.MaxTeamCollection)  			{  				// Create a TextBlock to show the object's friendly name  				var textBlock = new TextBlock  				{  					Text = maxTeam.Name + ":"'  					Margin = maxTeam.Index < 3 ? new Thickness(0' 10' 0' 3) : new Thickness(0' 7' 0' 3)'  					VerticalAlignment = VerticalAlignment.Center'  					Tag = maxTeam.Index  				};  				textBlock.SetResourceReference(StyleProperty' "GenericTextblock");    				// Create the TextBox to hold the data  				var textBox = new TextBox  				{  					Text = _mapInfo.MapInformation.MaxTeamCounts[maxTeam.Index].ToString(CultureInfo.InvariantCulture)'  					Margin = maxTeam.Index < 3 ? new Thickness(10' 7' 0' 0) : new Thickness(10' 4' 0' 0)'  					MaxLength = 3'  					Tag = maxTeam.Index  				};  				textBox.TextChanged += NumericalTextBoxOnTextChanged;  				_maxTeamTextBoxes.Add(textBox);    				// Put the TextBlock and TextBox in the correct column  				switch (maxTeam.Index % 3)  				{  					case 0:  						stkRow1Names.Children.Add(textBlock);  						stkRow1TextBoxes.Children.Add(textBox);  						break;  					case 1:  						stkRow2Names.Children.Add(textBlock);  						stkRow2TextBoxes.Children.Add(textBox);  						break;  					case 2:  						stkRow3Names.Children.Add(textBlock);  						stkRow3TextBoxes.Children.Add(textBox);  						break;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,LoadMaxTeams,The following statement contains a magic number: foreach (var maxTeam in _mapInfo.Engine.MaxTeamCollection)  			{  				// Create a TextBlock to show the object's friendly name  				var textBlock = new TextBlock  				{  					Text = maxTeam.Name + ":"'  					Margin = maxTeam.Index < 3 ? new Thickness(0' 10' 0' 3) : new Thickness(0' 7' 0' 3)'  					VerticalAlignment = VerticalAlignment.Center'  					Tag = maxTeam.Index  				};  				textBlock.SetResourceReference(StyleProperty' "GenericTextblock");    				// Create the TextBox to hold the data  				var textBox = new TextBox  				{  					Text = _mapInfo.MapInformation.MaxTeamCounts[maxTeam.Index].ToString(CultureInfo.InvariantCulture)'  					Margin = maxTeam.Index < 3 ? new Thickness(10' 7' 0' 0) : new Thickness(10' 4' 0' 0)'  					MaxLength = 3'  					Tag = maxTeam.Index  				};  				textBox.TextChanged += NumericalTextBoxOnTextChanged;  				_maxTeamTextBoxes.Add(textBox);    				// Put the TextBlock and TextBox in the correct column  				switch (maxTeam.Index % 3)  				{  					case 0:  						stkRow1Names.Children.Add(textBlock);  						stkRow1TextBoxes.Children.Add(textBox);  						break;  					case 1:  						stkRow2Names.Children.Add(textBlock);  						stkRow2TextBoxes.Children.Add(textBox);  						break;  					case 2:  						stkRow3Names.Children.Add(textBlock);  						stkRow3TextBoxes.Children.Add(textBox);  						break;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,UpdateMapInfo,The following statement contains a magic number: if (cbType.SelectedIndex == 2)  				_mapInfo.MapInformation.Flags |= LevelFlags.IsCampaign;
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,UpdateMapInfo,The following statement contains a magic number: if (cbType.SelectedIndex == 4)  				_mapInfo.MapInformation.Flags |= LevelFlags.IsFirefight;
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,UpdateMapInfo,The following statement contains a magic number: if (cbType.SelectedIndex == 3)  				_mapInfo.MapInformation.Flags |= LevelFlags.IsCinematic;
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,cbLanguages_SelectionChanged,The following statement contains a magic number: if (_mapInfo != null && _startEditing)  			{  				if (_oldLanguage != -1)  				{  					// Save values to memory  					_mapInfo.MapInformation.MapNames[_oldLanguage] = txtMapName.Text.Trim();  					_mapInfo.MapInformation.MapDescriptions[_oldLanguage] = txtMapDesc.Text.Trim();    					// Make sure values arn't too long' kiddo  					if (_mapInfo.MapInformation.MapNames[_oldLanguage].Length > 31)  						_mapInfo.MapInformation.MapNames[_oldLanguage] = _mapInfo.MapInformation.MapNames[_oldLanguage].Remove(31);  					if (_mapInfo.MapInformation.MapDescriptions[_oldLanguage].Length > 127)  						_mapInfo.MapInformation.MapDescriptions[_oldLanguage] = _mapInfo.MapInformation.MapDescriptions[_oldLanguage].Remove(127);  				}    				// Update oldLanguage int  				_oldLanguage = cbLanguages.SelectedIndex;    				// Update UI  				txtMapName.Text = _mapInfo.MapInformation.MapNames[_oldLanguage];  				txtMapDesc.Text = _mapInfo.MapInformation.MapDescriptions[_oldLanguage];  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,cbLanguages_SelectionChanged,The following statement contains a magic number: if (_mapInfo != null && _startEditing)  			{  				if (_oldLanguage != -1)  				{  					// Save values to memory  					_mapInfo.MapInformation.MapNames[_oldLanguage] = txtMapName.Text.Trim();  					_mapInfo.MapInformation.MapDescriptions[_oldLanguage] = txtMapDesc.Text.Trim();    					// Make sure values arn't too long' kiddo  					if (_mapInfo.MapInformation.MapNames[_oldLanguage].Length > 31)  						_mapInfo.MapInformation.MapNames[_oldLanguage] = _mapInfo.MapInformation.MapNames[_oldLanguage].Remove(31);  					if (_mapInfo.MapInformation.MapDescriptions[_oldLanguage].Length > 127)  						_mapInfo.MapInformation.MapDescriptions[_oldLanguage] = _mapInfo.MapInformation.MapDescriptions[_oldLanguage].Remove(127);  				}    				// Update oldLanguage int  				_oldLanguage = cbLanguages.SelectedIndex;    				// Update UI  				txtMapName.Text = _mapInfo.MapInformation.MapNames[_oldLanguage];  				txtMapDesc.Text = _mapInfo.MapInformation.MapDescriptions[_oldLanguage];  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,cbLanguages_SelectionChanged,The following statement contains a magic number: if (_mapInfo != null && _startEditing)  			{  				if (_oldLanguage != -1)  				{  					// Save values to memory  					_mapInfo.MapInformation.MapNames[_oldLanguage] = txtMapName.Text.Trim();  					_mapInfo.MapInformation.MapDescriptions[_oldLanguage] = txtMapDesc.Text.Trim();    					// Make sure values arn't too long' kiddo  					if (_mapInfo.MapInformation.MapNames[_oldLanguage].Length > 31)  						_mapInfo.MapInformation.MapNames[_oldLanguage] = _mapInfo.MapInformation.MapNames[_oldLanguage].Remove(31);  					if (_mapInfo.MapInformation.MapDescriptions[_oldLanguage].Length > 127)  						_mapInfo.MapInformation.MapDescriptions[_oldLanguage] = _mapInfo.MapInformation.MapDescriptions[_oldLanguage].Remove(127);  				}    				// Update oldLanguage int  				_oldLanguage = cbLanguages.SelectedIndex;    				// Update UI  				txtMapName.Text = _mapInfo.MapInformation.MapNames[_oldLanguage];  				txtMapDesc.Text = _mapInfo.MapInformation.MapDescriptions[_oldLanguage];  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,cbLanguages_SelectionChanged,The following statement contains a magic number: if (_mapInfo != null && _startEditing)  			{  				if (_oldLanguage != -1)  				{  					// Save values to memory  					_mapInfo.MapInformation.MapNames[_oldLanguage] = txtMapName.Text.Trim();  					_mapInfo.MapInformation.MapDescriptions[_oldLanguage] = txtMapDesc.Text.Trim();    					// Make sure values arn't too long' kiddo  					if (_mapInfo.MapInformation.MapNames[_oldLanguage].Length > 31)  						_mapInfo.MapInformation.MapNames[_oldLanguage] = _mapInfo.MapInformation.MapNames[_oldLanguage].Remove(31);  					if (_mapInfo.MapInformation.MapDescriptions[_oldLanguage].Length > 127)  						_mapInfo.MapInformation.MapDescriptions[_oldLanguage] = _mapInfo.MapInformation.MapDescriptions[_oldLanguage].Remove(127);  				}    				// Update oldLanguage int  				_oldLanguage = cbLanguages.SelectedIndex;    				// Update UI  				txtMapName.Text = _mapInfo.MapInformation.MapNames[_oldLanguage];  				txtMapDesc.Text = _mapInfo.MapInformation.MapDescriptions[_oldLanguage];  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,cbInsertIndex_SelectionChanged,The following statement contains a magic number: if (_oldInsertionIndex != -1)  			{  				if (_oldInsertionLanguage != -1)  				{  					_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].CheckpointNames[_oldInsertionLanguage] = txtInsertName.Text.Trim();  					_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].CheckpointDescriptions[_oldInsertionLanguage] = txtInsertDesc.Text.Trim();    					// Make sure values aren't too long' kiddo  					if (_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].CheckpointNames[_oldInsertionLanguage].Length > 31)  						_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].CheckpointNames[_oldInsertionLanguage]  							= _mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointNames[_oldInsertionLanguage].Remove(31);  					if (_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].CheckpointDescriptions[_oldInsertionLanguage].Length > 127)  						_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].CheckpointDescriptions[_oldInsertionLanguage]  							= _mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointDescriptions[_oldInsertionLanguage].Remove(127);  				}    				_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].ZoneName = txtZoneName.Text.Trim();  				if (!Equals(txtZoneIndex.BorderBrush' FindResource("ExtryzeAccentBrush")))  					_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].ZoneIndex = Byte.Parse(txtZoneIndex.Text);  				if (cbInsertVisible.IsChecked != null)  					_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].IsVisible = ((bool)cbInsertVisible.IsChecked);  				if (cbInsertUsed.IsChecked != null)  					_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].IsUsed = ((bool)cbInsertUsed.IsChecked);    				// If the Zone Index is an invalid number or too large' prevent the user from changing the index  				if (Equals(txtZoneIndex.BorderBrush' FindResource("ExtryzeAccentBrush")))  				{  					cbInsertIndex.SelectedIndex = _oldInsertionIndex;  					return;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,cbInsertIndex_SelectionChanged,The following statement contains a magic number: if (_oldInsertionIndex != -1)  			{  				if (_oldInsertionLanguage != -1)  				{  					_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].CheckpointNames[_oldInsertionLanguage] = txtInsertName.Text.Trim();  					_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].CheckpointDescriptions[_oldInsertionLanguage] = txtInsertDesc.Text.Trim();    					// Make sure values aren't too long' kiddo  					if (_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].CheckpointNames[_oldInsertionLanguage].Length > 31)  						_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].CheckpointNames[_oldInsertionLanguage]  							= _mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointNames[_oldInsertionLanguage].Remove(31);  					if (_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].CheckpointDescriptions[_oldInsertionLanguage].Length > 127)  						_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].CheckpointDescriptions[_oldInsertionLanguage]  							= _mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointDescriptions[_oldInsertionLanguage].Remove(127);  				}    				_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].ZoneName = txtZoneName.Text.Trim();  				if (!Equals(txtZoneIndex.BorderBrush' FindResource("ExtryzeAccentBrush")))  					_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].ZoneIndex = Byte.Parse(txtZoneIndex.Text);  				if (cbInsertVisible.IsChecked != null)  					_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].IsVisible = ((bool)cbInsertVisible.IsChecked);  				if (cbInsertUsed.IsChecked != null)  					_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].IsUsed = ((bool)cbInsertUsed.IsChecked);    				// If the Zone Index is an invalid number or too large' prevent the user from changing the index  				if (Equals(txtZoneIndex.BorderBrush' FindResource("ExtryzeAccentBrush")))  				{  					cbInsertIndex.SelectedIndex = _oldInsertionIndex;  					return;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,cbInsertIndex_SelectionChanged,The following statement contains a magic number: if (_oldInsertionIndex != -1)  			{  				if (_oldInsertionLanguage != -1)  				{  					_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].CheckpointNames[_oldInsertionLanguage] = txtInsertName.Text.Trim();  					_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].CheckpointDescriptions[_oldInsertionLanguage] = txtInsertDesc.Text.Trim();    					// Make sure values aren't too long' kiddo  					if (_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].CheckpointNames[_oldInsertionLanguage].Length > 31)  						_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].CheckpointNames[_oldInsertionLanguage]  							= _mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointNames[_oldInsertionLanguage].Remove(31);  					if (_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].CheckpointDescriptions[_oldInsertionLanguage].Length > 127)  						_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].CheckpointDescriptions[_oldInsertionLanguage]  							= _mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointDescriptions[_oldInsertionLanguage].Remove(127);  				}    				_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].ZoneName = txtZoneName.Text.Trim();  				if (!Equals(txtZoneIndex.BorderBrush' FindResource("ExtryzeAccentBrush")))  					_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].ZoneIndex = Byte.Parse(txtZoneIndex.Text);  				if (cbInsertVisible.IsChecked != null)  					_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].IsVisible = ((bool)cbInsertVisible.IsChecked);  				if (cbInsertUsed.IsChecked != null)  					_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].IsUsed = ((bool)cbInsertUsed.IsChecked);    				// If the Zone Index is an invalid number or too large' prevent the user from changing the index  				if (Equals(txtZoneIndex.BorderBrush' FindResource("ExtryzeAccentBrush")))  				{  					cbInsertIndex.SelectedIndex = _oldInsertionIndex;  					return;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,cbInsertIndex_SelectionChanged,The following statement contains a magic number: if (_oldInsertionIndex != -1)  			{  				if (_oldInsertionLanguage != -1)  				{  					_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].CheckpointNames[_oldInsertionLanguage] = txtInsertName.Text.Trim();  					_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].CheckpointDescriptions[_oldInsertionLanguage] = txtInsertDesc.Text.Trim();    					// Make sure values aren't too long' kiddo  					if (_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].CheckpointNames[_oldInsertionLanguage].Length > 31)  						_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].CheckpointNames[_oldInsertionLanguage]  							= _mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointNames[_oldInsertionLanguage].Remove(31);  					if (_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].CheckpointDescriptions[_oldInsertionLanguage].Length > 127)  						_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].CheckpointDescriptions[_oldInsertionLanguage]  							= _mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointDescriptions[_oldInsertionLanguage].Remove(127);  				}    				_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].ZoneName = txtZoneName.Text.Trim();  				if (!Equals(txtZoneIndex.BorderBrush' FindResource("ExtryzeAccentBrush")))  					_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].ZoneIndex = Byte.Parse(txtZoneIndex.Text);  				if (cbInsertVisible.IsChecked != null)  					_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].IsVisible = ((bool)cbInsertVisible.IsChecked);  				if (cbInsertUsed.IsChecked != null)  					_mapInfo.MapInformation.MapCheckpoints[_oldInsertionIndex].IsUsed = ((bool)cbInsertUsed.IsChecked);    				// If the Zone Index is an invalid number or too large' prevent the user from changing the index  				if (Equals(txtZoneIndex.BorderBrush' FindResource("ExtryzeAccentBrush")))  				{  					cbInsertIndex.SelectedIndex = _oldInsertionIndex;  					return;  				}  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,cbInsertLanguages_SelectionChanged,The following statement contains a magic number: if (_oldInsertionLanguage != -1)  			{  				// Save values to memory  				_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointNames[_oldInsertionLanguage] = txtInsertName.Text.Trim();  				_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointDescriptions[_oldInsertionLanguage] = txtInsertDesc.Text.Trim();    				// Make sure values aren't too long' kiddo  				if (_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointNames[_oldInsertionLanguage].Length > 31)  					_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointNames[_oldInsertionLanguage] =  						_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointNames[_oldInsertionLanguage].Remove(31);  				if (_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointDescriptions[_oldInsertionLanguage].Length > 127)  					_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointDescriptions[_oldInsertionLanguage] =  						_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointDescriptions[_oldInsertionLanguage].Remove(127);    			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,cbInsertLanguages_SelectionChanged,The following statement contains a magic number: if (_oldInsertionLanguage != -1)  			{  				// Save values to memory  				_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointNames[_oldInsertionLanguage] = txtInsertName.Text.Trim();  				_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointDescriptions[_oldInsertionLanguage] = txtInsertDesc.Text.Trim();    				// Make sure values aren't too long' kiddo  				if (_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointNames[_oldInsertionLanguage].Length > 31)  					_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointNames[_oldInsertionLanguage] =  						_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointNames[_oldInsertionLanguage].Remove(31);  				if (_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointDescriptions[_oldInsertionLanguage].Length > 127)  					_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointDescriptions[_oldInsertionLanguage] =  						_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointDescriptions[_oldInsertionLanguage].Remove(127);    			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,cbInsertLanguages_SelectionChanged,The following statement contains a magic number: if (_oldInsertionLanguage != -1)  			{  				// Save values to memory  				_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointNames[_oldInsertionLanguage] = txtInsertName.Text.Trim();  				_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointDescriptions[_oldInsertionLanguage] = txtInsertDesc.Text.Trim();    				// Make sure values aren't too long' kiddo  				if (_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointNames[_oldInsertionLanguage].Length > 31)  					_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointNames[_oldInsertionLanguage] =  						_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointNames[_oldInsertionLanguage].Remove(31);  				if (_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointDescriptions[_oldInsertionLanguage].Length > 127)  					_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointDescriptions[_oldInsertionLanguage] =  						_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointDescriptions[_oldInsertionLanguage].Remove(127);    			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,cbInsertLanguages_SelectionChanged,The following statement contains a magic number: if (_oldInsertionLanguage != -1)  			{  				// Save values to memory  				_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointNames[_oldInsertionLanguage] = txtInsertName.Text.Trim();  				_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointDescriptions[_oldInsertionLanguage] = txtInsertDesc.Text.Trim();    				// Make sure values aren't too long' kiddo  				if (_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointNames[_oldInsertionLanguage].Length > 31)  					_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointNames[_oldInsertionLanguage] =  						_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointNames[_oldInsertionLanguage].Remove(31);  				if (_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointDescriptions[_oldInsertionLanguage].Length > 127)  					_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointDescriptions[_oldInsertionLanguage] =  						_mapInfo.MapInformation.MapCheckpoints[cbInsertIndex.SelectedIndex].CheckpointDescriptions[_oldInsertionLanguage].Remove(127);    			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloMap,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloMap.xaml.cs,HeaderValueData_MouseDown,The following statement contains a magic number: if (e.ClickCount == 2)  				Clipboard.SetText(((TextBlock) e.OriginalSource).Text);
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloMap,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloMap.xaml.cs,UpdateDockPanelLocation,The following statement contains a magic number: if (_dockSide == Settings.MapInfoDockSide.Left)  			{  				colLeft.Width = new GridLength(400);  				colRight.Width = new GridLength(1' GridUnitType.Star);    				sideBar.SetValue(Grid.ColumnProperty' 0);  				mainContent.SetValue(Grid.ColumnProperty' 1);  			}  			else  			{  				colRight.Width = new GridLength(400);  				colLeft.Width = new GridLength(1' GridUnitType.Star);    				sideBar.SetValue(Grid.ColumnProperty' 1);  				mainContent.SetValue(Grid.ColumnProperty' 0);  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloMap,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloMap.xaml.cs,UpdateDockPanelLocation,The following statement contains a magic number: if (_dockSide == Settings.MapInfoDockSide.Left)  			{  				colLeft.Width = new GridLength(400);  				colRight.Width = new GridLength(1' GridUnitType.Star);    				sideBar.SetValue(Grid.ColumnProperty' 0);  				mainContent.SetValue(Grid.ColumnProperty' 1);  			}  			else  			{  				colRight.Width = new GridLength(400);  				colLeft.Width = new GridLength(1' GridUnitType.Star);    				sideBar.SetValue(Grid.ColumnProperty' 1);  				mainContent.SetValue(Grid.ColumnProperty' 0);  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloMap,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloMap.xaml.cs,InitalizeContextMenus,The following statement contains a magic number: BaseContextMenu.FontSize = 12;
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloMap,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloMap.xaml.cs,InitalizeContextMenus,The following statement contains a magic number: ((MenuItem) BaseContextMenu.Items[2]).Click += contextMenuCloseAllButThis_Click;
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloMap,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloMap.xaml.cs,InitalizeContextMenus,The following statement contains a magic number: ((MenuItem) BaseContextMenu.Items[3]).Click += contextMenuCloseToLeft_Click;
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloMap,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloMap.xaml.cs,InitalizeContextMenus,The following statement contains a magic number: ((MenuItem) BaseContextMenu.Items[4]).Click += contextMenuCloseToRight_Click;
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloMap,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloMap.xaml.cs,InitalizeContextMenus,The following statement contains a magic number: ((MenuItem) FilesystemContextMenu.Items[2]).Click += contextMenuCloseAllButThis_Click;
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloMap,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloMap.xaml.cs,InitalizeContextMenus,The following statement contains a magic number: ((MenuItem) FilesystemContextMenu.Items[3]).Click += contextMenuCloseToLeft_Click;
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloMap,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloMap.xaml.cs,InitalizeContextMenus,The following statement contains a magic number: ((MenuItem) FilesystemContextMenu.Items[4]).Click += contextMenuCloseToRight_Click;
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloMap,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloMap.xaml.cs,InitalizeContextMenus,The following statement contains a magic number: ((MenuItem) FilesystemContextMenu.Items[6]).Click += contextMenuCopyFilePath_Click;
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloMap,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloMap.xaml.cs,InitalizeContextMenus,The following statement contains a magic number: ((MenuItem) FilesystemContextMenu.Items[7]).Click += contextMenuOpenContainingFolder_Click;
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloMap,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloMap.xaml.cs,FilterTag,The following statement contains a magic number: if (filter.StartsWith("0x"))  			{  				// Datum search  				string searchHex = filter.Substring(2);  				if (tag.RawTag.Index.ToString().ToLower().Substring(2).Contains(searchHex))  					return true;  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Games,HaloMap,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloMap.xaml.cs,FilterTag,The following statement contains a magic number: if (filter.StartsWith("0x"))  			{  				// Datum search  				string searchHex = filter.Substring(2);  				if (tag.RawTag.Index.ToString().ToLower().Substring(2).Contains(searchHex))  					return true;  			}
Magic Number,Assembly.Metro.Controls.PageTemplates.Tools.Halo4,VoxelConverter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Tools\Halo4\VoxelConverter.xaml.cs,doConvert,The following statement contains a magic number: if (xmlNodes != null)  				foreach (XmlNode voxelData in xmlNodes)  				{  					// Calculate Percentage Done  					float a = xmlNodes.Count;  					float b = index;  					a = a <= 0 ? 1 : a;  					b = b <= 0 ? 1 : b;  					b = ((a - b)/a)*100;  					worker.ReportProgress((int) ((100 - b)*2.5));    					try  					{  						float x = float.Parse(voxelData.SelectSingleNode("x/text()").Value);  						float y = float.Parse(voxelData.SelectSingleNode("y/text()").Value);  						float z = float.Parse(voxelData.SelectSingleNode("z/text()").Value);    						outputBuilder.Append(string.Format("{0}{1}{2}"'  							FloatToHexString(x)'  							FloatToHexString(y)'  							FloatToHexString(z)));  					}  					finally  					{  					}    					index++;  				}
Magic Number,Assembly.Metro.Controls.PageTemplates.Tools.Halo4,VoxelConverter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Tools\Halo4\VoxelConverter.xaml.cs,doConvert,The following statement contains a magic number: if (xmlNodes != null)  				foreach (XmlNode voxelData in xmlNodes)  				{  					// Calculate Percentage Done  					float a = xmlNodes.Count;  					float b = index;  					a = a <= 0 ? 1 : a;  					b = b <= 0 ? 1 : b;  					b = ((a - b)/a)*100;  					worker.ReportProgress((int) ((100 - b)*2.5));    					try  					{  						float x = float.Parse(voxelData.SelectSingleNode("x/text()").Value);  						float y = float.Parse(voxelData.SelectSingleNode("y/text()").Value);  						float z = float.Parse(voxelData.SelectSingleNode("z/text()").Value);    						outputBuilder.Append(string.Format("{0}{1}{2}"'  							FloatToHexString(x)'  							FloatToHexString(y)'  							FloatToHexString(z)));  					}  					finally  					{  					}    					index++;  				}
Magic Number,Assembly.Metro.Controls.PageTemplates.Tools.Halo4,VoxelConverter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Tools\Halo4\VoxelConverter.xaml.cs,doConvert,The following statement contains a magic number: if (xmlNodes != null)  				foreach (XmlNode voxelData in xmlNodes)  				{  					// Calculate Percentage Done  					float a = xmlNodes.Count;  					float b = index;  					a = a <= 0 ? 1 : a;  					b = b <= 0 ? 1 : b;  					b = ((a - b)/a)*100;  					worker.ReportProgress((int) ((100 - b)*2.5));    					try  					{  						float x = float.Parse(voxelData.SelectSingleNode("x/text()").Value);  						float y = float.Parse(voxelData.SelectSingleNode("y/text()").Value);  						float z = float.Parse(voxelData.SelectSingleNode("z/text()").Value);    						outputBuilder.Append(string.Format("{0}{1}{2}"'  							FloatToHexString(x)'  							FloatToHexString(y)'  							FloatToHexString(z)));  					}  					finally  					{  					}    					index++;  				}
Magic Number,Assembly.Metro.Controls.PageTemplates.Tools.Halo4,VoxelConverter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Tools\Halo4\VoxelConverter.xaml.cs,doConvert,The following statement contains a magic number: worker.ReportProgress(100);
Magic Number,Assembly.Metro.Controls.PageTemplates.Tools,PostGenerator,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Tools\PostGenerator.xaml.cs,GrabImage,The following statement contains a magic number: backgroundWorker.DoWork += (o' args) =>  			{  				string screenshotFileName = null' screenshotPng = null;  				try  				{  					// Grab Screenshot from Xbox  					screenshotFileName = Path.GetTempFileName();  					screenshotPng = Path.GetTempFileName();    					if (!App.AssemblyStorage.AssemblySettings.Xbdm.GetScreenshot(screenshotFileName))  					{  						Dispatcher.Invoke(  							new Action(  								() =>  									MetroMessageBox.Show("Not Connected"' "You are not connected to a debug Xbox 360' unable to get screenshot")));  						return;  					}    					// do stuff  					BitmapSource bitmapSource = DDSConversion.Deswizzle(screenshotFileName' 1204' 720' true' true);    					// convert to png  					SaveImage(screenshotPng' bitmapSource);    					// upload  					string response = Imgur.UploadToImgur(File.ReadAllBytes(screenshotPng));    					string finalString = string.Format("http://i.imgur.com/{0}.png"' response);    					if (isPreview)  						Dispatcher.Invoke(new Action(() => _generatorViewModel.ModPreviewImage = finalString));  					else  						Dispatcher.Invoke(new Action(() => _generatorViewModel.Images.Add(new ModPostInfo.Image  						{  							Url = finalString  						})));  				}  				catch (Exception ex)  				{  					Dispatcher.Invoke(new Action(() => MetroException.Show(ex)));  				}  				finally  				{  					if (screenshotFileName != null)  						File.Delete(screenshotFileName);  					if (screenshotPng != null)  						File.Delete(screenshotPng);  				}  			};
Magic Number,Assembly.Metro.Controls.PageTemplates.Tools,PostGenerator,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Tools\PostGenerator.xaml.cs,GrabImage,The following statement contains a magic number: backgroundWorker.DoWork += (o' args) =>  			{  				string screenshotFileName = null' screenshotPng = null;  				try  				{  					// Grab Screenshot from Xbox  					screenshotFileName = Path.GetTempFileName();  					screenshotPng = Path.GetTempFileName();    					if (!App.AssemblyStorage.AssemblySettings.Xbdm.GetScreenshot(screenshotFileName))  					{  						Dispatcher.Invoke(  							new Action(  								() =>  									MetroMessageBox.Show("Not Connected"' "You are not connected to a debug Xbox 360' unable to get screenshot")));  						return;  					}    					// do stuff  					BitmapSource bitmapSource = DDSConversion.Deswizzle(screenshotFileName' 1204' 720' true' true);    					// convert to png  					SaveImage(screenshotPng' bitmapSource);    					// upload  					string response = Imgur.UploadToImgur(File.ReadAllBytes(screenshotPng));    					string finalString = string.Format("http://i.imgur.com/{0}.png"' response);    					if (isPreview)  						Dispatcher.Invoke(new Action(() => _generatorViewModel.ModPreviewImage = finalString));  					else  						Dispatcher.Invoke(new Action(() => _generatorViewModel.Images.Add(new ModPostInfo.Image  						{  							Url = finalString  						})));  				}  				catch (Exception ex)  				{  					Dispatcher.Invoke(new Action(() => MetroException.Show(ex)));  				}  				finally  				{  					if (screenshotFileName != null)  						File.Delete(screenshotFileName);  					if (screenshotPng != null)  						File.Delete(screenshotPng);  				}  			};
Magic Number,DragDropListBox,DraggedAdorner,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\TabReorg\DraggedAdorner.cs,DraggedAdorner,The following statement contains a magic number: contentPresenter.Opacity = 0.7;
Magic Number,DragDropListBox,DraggedAdorner,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\TabReorg\DraggedAdorner.cs,SetPosition,The following statement contains a magic number: this.top = top + 13;
Magic Number,DragDropListBox,InsertionAdorner,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\TabReorg\InsertionAdorner.cs,InsertionAdorner,The following statement contains a magic number: pen = new Pen {Brush = Brushes.White' Thickness = 2};
Magic Number,DragDropListBox,InsertionAdorner,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\TabReorg\InsertionAdorner.cs,InsertionAdorner,The following statement contains a magic number: var firstLine = new LineSegment(new Point(0' -5)' false);
Magic Number,DragDropListBox,InsertionAdorner,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\TabReorg\InsertionAdorner.cs,InsertionAdorner,The following statement contains a magic number: var secondLine = new LineSegment(new Point(0' 5)' false);
Magic Number,DragDropListBox,InsertionAdorner,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\TabReorg\InsertionAdorner.cs,InsertionAdorner,The following statement contains a magic number: var figure = new PathFigure {StartPoint = new Point(5' 0)};
Magic Number,DragDropListBox,InsertionAdorner,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\TabReorg\InsertionAdorner.cs,OnRender,The following statement contains a magic number: if (isSeparatorHorizontal)  			{  				DrawTriangle(drawingContext' startPoint' 0);  				DrawTriangle(drawingContext' endPoint' 180);  			}  			else  			{  				DrawTriangle(drawingContext' startPoint' 90);  				DrawTriangle(drawingContext' endPoint' -90);  			}
Magic Number,DragDropListBox,InsertionAdorner,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\TabReorg\InsertionAdorner.cs,OnRender,The following statement contains a magic number: if (isSeparatorHorizontal)  			{  				DrawTriangle(drawingContext' startPoint' 0);  				DrawTriangle(drawingContext' endPoint' 180);  			}  			else  			{  				DrawTriangle(drawingContext' startPoint' 90);  				DrawTriangle(drawingContext' endPoint' -90);  			}
Magic Number,DragDropListBox,InsertionAdorner,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\TabReorg\InsertionAdorner.cs,OnRender,The following statement contains a magic number: if (isSeparatorHorizontal)  			{  				DrawTriangle(drawingContext' startPoint' 0);  				DrawTriangle(drawingContext' endPoint' 180);  			}  			else  			{  				DrawTriangle(drawingContext' startPoint' 90);  				DrawTriangle(drawingContext' endPoint' -90);  			}
Magic Number,DragDropListBox,Utilities,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\TabReorg\Utilities.cs,IsInFirstHalf,The following statement contains a magic number: if (hasVerticalOrientation)  			{  				return clickedPoint.Y < container.ActualHeight/2;  			}
Magic Number,DragDropListBox,Utilities,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\TabReorg\Utilities.cs,IsInFirstHalf,The following statement contains a magic number: return clickedPoint.X < container.ActualWidth/2;
Magic Number,Assembly.Metro.Dialogs.ControlDialogs,TagBlockReallocator,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Dialogs\ControlDialogs\TagBlockReallocator.xaml.cs,TryParseDeltaString,The following statement contains a magic number: if (str.StartsWith("0x"))  			{  				// Positive hex number  				return int.TryParse(str.Substring(2)' NumberStyles.HexNumber' null' out result);  			}
Magic Number,Assembly.Metro.Dialogs.ControlDialogs,TagBlockReallocator,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Dialogs\ControlDialogs\TagBlockReallocator.xaml.cs,TryParseDeltaString,The following statement contains a magic number: if (str.StartsWith("-0x"))  			{  				// Negative hex number  				if (!int.TryParse(str.Substring(3)' NumberStyles.HexNumber' null' out result))  					return false;  				result = -result;  				return true;  			}
Magic Number,Assembly.Metro.Dialogs.ControlDialogs,ViewValueAs,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Dialogs\ControlDialogs\ViewValueAs.xaml.cs,GetSkip,The following statement contains a magic number: switch (cbSkip.SelectedIndex)  			{  				case 0:  					return 1;  				case 1:  					return 2;  				case 2:  					return 4;  				default:  					return 0;  			}
Magic Number,Assembly.Metro.Dialogs.ControlDialogs,ViewValueAs,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Dialogs\ControlDialogs\ViewValueAs.xaml.cs,GetSkip,The following statement contains a magic number: switch (cbSkip.SelectedIndex)  			{  				case 0:  					return 1;  				case 1:  					return 2;  				case 2:  					return 4;  				default:  					return 0;  			}
Magic Number,Assembly.Metro.Dialogs.ControlDialogs,ViewValueAs,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Dialogs\ControlDialogs\ViewValueAs.xaml.cs,GetSkip,The following statement contains a magic number: switch (cbSkip.SelectedIndex)  			{  				case 0:  					return 1;  				case 1:  					return 2;  				case 2:  					return 4;  				default:  					return 0;  			}
Magic Number,Assembly.Metro.Dialogs.ControlDialogs,ViewValueAs,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Dialogs\ControlDialogs\ViewValueAs.xaml.cs,RefreshFileOffset,The following statement contains a magic number: if (txtOffset.Text.StartsWith("0x") || txtOffset.Text.StartsWith("0X"))  			{  				// Is Hex  				success = uint.TryParse(txtOffset.Text.Substring(2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out offset);  			}  			else  			{  				// Not Hex  				success = uint.TryParse(txtOffset.Text' out offset);  			}
Magic Number,Assembly.Metro.Dialogs.ControlDialogs,ViewValueAs,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Dialogs\ControlDialogs\ViewValueAs.xaml.cs,RefreshMemAddr,The following statement contains a magic number: if (txtMemOffset.Text.StartsWith("0x") || txtMemOffset.Text.StartsWith("0X"))  			{  				// Is Hex  				success = uint.TryParse(txtMemOffset.Text.Substring(2)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out offset);  			}  			else  			{  				// Not Hex  				success = uint.TryParse(txtMemOffset.Text' out offset);  			}
Magic Number,Assembly.Metro.Dialogs.ControlDialogs,Updater,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Dialogs\ControlDialogs\Updater.xaml.cs,Updater,The following statement contains a magic number: Width = 600;
Magic Number,Assembly.Metro.Dialogs.ControlDialogs,Updater,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Dialogs\ControlDialogs\Updater.xaml.cs,Updater,The following statement contains a magic number: Height = 400;
Magic Number,Assembly.Helpers.PostGeneration,BlamitePostGenerator,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\PostGeneration\AssemblyPostGenerator.cs,Parse,The following statement contains a magic number: output += BBCodeCentre(  				BBCodeBold(  					BBCodeColour(  						BBCodeSize(string.Format(".:: {0} ::."' PostInfo.ModName)' 5)  						' "FF0000"))' true);
Magic Number,Assembly.Helpers.PostGeneration,BlamitePostGenerator,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\PostGeneration\AssemblyPostGenerator.cs,Parse,The following statement contains a magic number: output += BBCodeCentre(  				BBCodeSize(string.Format("By {0}"' PostInfo.ModAuthor)' 4)' true);
Magic Number,Assembly.Helpers.PostGeneration,BlamitePostGenerator,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\PostGeneration\AssemblyPostGenerator.cs,Parse,The following statement contains a magic number: output += BBCodeBold(  				BBCodeSize(  					BBCodeColour("Mod Information:"' "C0C0C0")' 4)' true);
Magic Number,Assembly.Helpers.PostGeneration,BlamitePostGenerator,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\PostGeneration\AssemblyPostGenerator.cs,Parse,The following statement contains a magic number: output += BBCodeBold(  				BBCodeSize(  					BBCodeColour("Mod Attributes:"' "C0C0C0")' 4)' true);
Magic Number,Assembly.Helpers.PostGeneration,BlamitePostGenerator,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\PostGeneration\AssemblyPostGenerator.cs,Parse,The following statement contains a magic number: if (!String.IsNullOrEmpty(PostInfo.ModVideo.Trim()))  			{  				// Title  				output += BBCodeBold(  					BBCodeSize(  						BBCodeColour("Video:"' "C0C0C0")' 4)' true);    				// Video  				output += BBCodeMedia(PostInfo.ModVideo' true);  			}
Magic Number,Assembly.Helpers.PostGeneration,BlamitePostGenerator,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\PostGeneration\AssemblyPostGenerator.cs,Parse,The following statement contains a magic number: if (PostInfo.Images.Count > 0)  			{  				// Title  				output += BBCodeBold(  					BBCodeSize(  						BBCodeColour("Images:"' "C0C0C0")' 4)' true);    				// Images  				string imageList = "";  				foreach (ModPostInfo.Image image in PostInfo.Images)  					imageList += BBCodeImg(image.Url' true);    				output += BBCodeList(imageList' true);  			}
Magic Number,Assembly.Helpers.PostGeneration,BlamitePostGenerator,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\PostGeneration\AssemblyPostGenerator.cs,Parse,The following statement contains a magic number: if (PostInfo.Thanks.Count > 0)  			{  				// Title  				output += BBCodeBold(  					BBCodeSize(  						BBCodeColour("Thanks:"' "C0C0C0")' 4)' true);    				// Thanks  				string thanksList = "";  				foreach (ModPostInfo.Thank thank in PostInfo.Thanks)  					thanksList += BBCodeListOption(BBCodeBold(thank.Alias) + ": " + thank.Reason' true);    				output += BBCodeList(thanksList' true);  			}
Magic Number,Assembly.Helpers.PostGeneration,BlamitePostGenerator,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\PostGeneration\AssemblyPostGenerator.cs,Parse,The following statement contains a magic number: output += BBCodeSize(  				BBCodeColour("This post was generated by the Blamite Post Generator' which is part of " +  							 BBCodeUrl("Assembly"' "https://github.com/xboxchaos/assembly") + " by " +  				             BBCodeUrl("XboxChaos"' "http://www.xboxchaos.com/topic/3263-assembly-blam-research-tool/")'  					"#008000")' 2' true);
Magic Number,Assembly.Windows,Home,C:\repos\XboxChaos_Assembly\src\Assembly\Windows\Home.xaml.cs,Window_StateChanged,The following statement contains a magic number: switch (WindowState)  			{  				case WindowState.Normal:  					borderFrame.BorderThickness = new Thickness(1' 1' 1' 23);  					btnActionRestore.Visibility = Visibility.Collapsed;  					btnActionMaxamize.Visibility =  						ResizeDropVector.Visibility =  							ResizeDrop.Visibility = ResizeRight.Visibility = ResizeBottom.Visibility = Visibility.Visible;  					break;  				case WindowState.Maximized:  					borderFrame.BorderThickness = new Thickness(0' 0' 0' 23);  					btnActionRestore.Visibility = Visibility.Visible;  					btnActionMaxamize.Visibility =  						ResizeDropVector.Visibility =  							ResizeDrop.Visibility = ResizeRight.Visibility = ResizeBottom.Visibility = Visibility.Collapsed;  					break;  			}
Magic Number,Assembly.Windows,Home,C:\repos\XboxChaos_Assembly\src\Assembly\Windows\Home.xaml.cs,Window_StateChanged,The following statement contains a magic number: switch (WindowState)  			{  				case WindowState.Normal:  					borderFrame.BorderThickness = new Thickness(1' 1' 1' 23);  					btnActionRestore.Visibility = Visibility.Collapsed;  					btnActionMaxamize.Visibility =  						ResizeDropVector.Visibility =  							ResizeDrop.Visibility = ResizeRight.Visibility = ResizeBottom.Visibility = Visibility.Visible;  					break;  				case WindowState.Maximized:  					borderFrame.BorderThickness = new Thickness(0' 0' 0' 23);  					btnActionRestore.Visibility = Visibility.Visible;  					btnActionMaxamize.Visibility =  						ResizeDropVector.Visibility =  							ResizeDrop.Visibility = ResizeRight.Visibility = ResizeBottom.Visibility = Visibility.Collapsed;  					break;  			}
Magic Number,Assembly.Windows,Home,C:\repos\XboxChaos_Assembly\src\Assembly\Windows\Home.xaml.cs,UpdateStatusText,The following statement contains a magic number: _statusUpdateTimer.Interval = new TimeSpan(0' 0' 0' 4);
Magic Number,Assembly.Windows,Home,C:\repos\XboxChaos_Assembly\src\Assembly\Windows\Home.xaml.cs,ProcessCommandLineArgs,The following statement contains a magic number: if (args != null && args.Count > 1)  			{  				string[] commandArgs = args.Skip(1).ToArray();  				if (commandArgs[0].StartsWith("assembly://"))  					commandArgs[0] = commandArgs[0].Substring(11).Trim('/');    				// Decide what to do  				Activate();  				switch (commandArgs[0].ToLower())  				{  					case "open":  						// Determine type of file' and start it up' yo  						if (commandArgs.Length > 1)  							StartupDetermineType(commandArgs[1]);  						break;    					case "postupdate":  						var version = VersionInfo.GetUserFriendlyVersion();  						if (version != null)  						{  							MetroMessageBox.Show("Update successful!"'  								"Assembly has been updated to version " + version +  								".\r\n\r\nYour old plugins and layouts were copied to a \"Backup\" folder.\r\nBe sure to merge any changes you have made on your own.");  						}  						break;    					case "update":  						// Show Update  						menuHelpUpdater_Click(null' null);  						break;    					case "about":  						// Show About  						menuHelpAbout_Click(null' null);  						break;    					case "settings":  						// Show Settings  						menuOpenSettings_Click(null' null);  						break;    					default:  						return true;  				}  			}
Magic Number,Assembly.Windows,Home,C:\repos\XboxChaos_Assembly\src\Assembly\Windows\Home.xaml.cs,StartupDetermineType,The following statement contains a magic number: try  			{  				if (File.Exists(path))  				{  					// Magic Check  					string magic;  					using (var stream = new EndianReader(File.OpenRead(path)' Endian.BigEndian))  						magic = stream.ReadAscii(0x04).ToLower();    					switch (magic)  					{  						case "head":  						case "daeh":  							// Map File  							AddCacheTabModule(path);  							return;    						case "asmp":  							// Patch File  							AddPatchTabModule(path);  							return;    						case "_blf":  							// BLF Container' needs more checking  							var blf = new PureBLF(path);  							blf.Close();  							if (blf.BLFChunks.Count > 2)  							{  								switch (blf.BLFChunks[1].ChunkMagic)  								{  									case "levl":  										AddInfooTabModule(path);  										return;  									case "mapi":  										AddImageTabModule(path);  										return;  								}  							}  							MetroMessageBox.Show("Unsupported BLF Type"' "The selected BLF file is not supported in assembly.");  							return;    						default:  							MetroMessageBox.Show("Unsupported file type"' "The selected file is not supported in assembly.");  							return;  					}  				}    				MetroMessageBox.Show("Unable to find file"' "The selected file could no longer be found");  			}  			catch (Exception ex)  			{  				MetroException.Show(ex);  			}
Missing Default,Assembly.Helpers,DDSConversion,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\DDSConversion.cs,Deswizzle,The following switch statement is missing a default case: switch (randomBuf)  			{  				case "FF03000000FC0F000000F03F":  					bitmap = DeswizzleA2R10G10B10(buffer' width' height);  					if (App.AssemblyStorage.AssemblySettings.XdkScreenshotGammaCorrect)  					{  						BitmapData imageData = (bitmap).LockBits(  							new Rectangle(0' 0' bitmap.Width' bitmap.Height)'  							ImageLockMode.ReadWrite' PixelFormat.Format24bppRgb);  						GammaCorrect(App.AssemblyStorage.AssemblySettings.XdkScreenshotGammaModifier' imageData);  						bitmap.UnlockBits(imageData);  					}  					break;  				case "0000FF0000FF0000FF000000":  					bitmap = DeswizzleA8R8G8B8(buffer' width' height);  					break;  			}
Missing Default,Assembly.Helpers,JumpLists,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\JumpLists.cs,UpdateJumplists,The following switch statement is missing a default case: switch (App.AssemblyStorage.AssemblySettings.ApplicationRecents[i].FileType)  					{  						case Settings.RecentFileType.Blf:  							iconIndex = -200;  							break;  						case Settings.RecentFileType.Cache:  							iconIndex = -201;  							break;  						case Settings.RecentFileType.MapInfo:  							iconIndex = -202;  							break;  					}
Missing Default,Assembly.Helpers.Models,ObjExporter,C:\repos\XboxChaos_Assembly\src\Assembly\Helpers\Models\ObjExporter.cs,ProcessVertexElement,The following switch statement is missing a default case: switch (layout.Usage)  			{  				case VertexElementUsage.Position:  					_output.WriteLine("v {0} {1} {2}"' x' y' z);  					break;    				case VertexElementUsage.Normal:  					_output.WriteLine("vn {0} {1} {2}"' x' y' z);  					break;    				case VertexElementUsage.TexCoords:  					_output.WriteLine("vt {0} {1} {2}"' x' y' z);  					break;  			}
Missing Default,Assembly.Metro.Controls.PageTemplates,PatchControl,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\PatchControl.xaml.cs,btnCreatePatchblf0_Click,The following switch statement is missing a default case: switch (cboxCreatePatchTargetGame.SelectedIndex)  			{  				case (int)TargetGame.Halo3:  					txtCreatePatchblf1.Text = File.Exists(blfClip) ? blfClip : "";  					txtCreatePatchblf2.Text = File.Exists(blfFilm) ? blfFilm : "";  					txtCreatePatchblf3.Text = File.Exists(blfSmall) ? blfSmall : "";  					break;    				case (int)TargetGame.Halo3ODST:  					txtCreatePatchblf2.Text = File.Exists(blfFilm) ? blfFilm : "";  					txtCreatePatchblf3.Text = File.Exists(blfSmall) ? blfSmall : "";  					break;    				case (int)TargetGame.HaloReach:  					txtCreatePatchblf3.Text = File.Exists(blfSmall) ? blfSmall : "";  					break;    				case (int)TargetGame.Halo4:  					txtCreatePatchblf1.Text = File.Exists(blfCard) ? blfCard : "";  					txtCreatePatchblf2.Text = File.Exists(blfLobby) ? blfLobby : "";  					txtCreatePatchblf3.Text = File.Exists(blfSmall) ? blfSmall : "";  					break;  			}
Missing Default,Assembly.Metro.Controls.PageTemplates.Games.Components,PluginEditor,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\PluginEditor.xaml.cs,LoadSyntaxHighlighting,The following switch statement is missing a default case: switch (App.AssemblyStorage.AssemblySettings.ApplicationAccent)  			{  				case Settings.Accents.Blue:  					filename = "XMLBlue.xshd";  					break;  				case Settings.Accents.Green:  					filename = "XMLGreen.xshd";  					break;  				case Settings.Accents.Orange:  					filename = "XMLOrange.xshd";  					break;  				case Settings.Accents.Purple:  					filename = "XMLPurple.xshd";  					break;  			}
Missing Default,Assembly.Metro.Controls.PageTemplates.Games.Components,MetaEditor,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaEditor.xaml.cs,ShowConnectionError,The following switch statement is missing a default case: switch (_rteProvider.ConnectionType)  			{  				case RTEConnectionType.ConsoleX360:  					MetroMessageBox.Show("Connection Error"'  						"Unable to connect to your Xbox 360 console. Make sure that XBDM is enabled' you have the Xbox 360 SDK installed' and that your console's IP has been set correctly.");  					break;    				case RTEConnectionType.LocalProcess:  					MetroMessageBox.Show("Connection Error"'  						"Unable to connect to the game. Make sure that it is running on your computer and that the map you are poking to is currently loaded.");  					break;  			}
Missing Default,Assembly.Metro.Controls.PageTemplates.Games.Components,MetaEditor,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaEditor.xaml.cs,metaEditor_KeyDown,The following switch statement is missing a default case: switch (e.Key)  			{  				case Key.S:  					// Save Meta  					UpdateMeta(MetaWriter.SaveType.File' false);  					break;    				case Key.P:  					if ((Keyboard.Modifiers & ModifierKeys.Shift) != 0)  					{  						// Poke All  						UpdateMeta(MetaWriter.SaveType.Memory' false);  					}  					else  					{  						// Poke Changed  						UpdateMeta(MetaWriter.SaveType.Memory' true);  					}  					break;    				case Key.R:  					if ((Keyboard.Modifiers & ModifierKeys.Shift) != 0)  					{  						// Show Plugin Revision Viewer  						RevisionViewer();  					}  					else if ((Keyboard.Modifiers & ModifierKeys.Alt) != 0)  					{  						// Refresh Plugin  						RefreshEditor(MetaReader.LoadType.Memory);  					}  					else  					{  						// Refresh Plugin  						RefreshEditor(MetaReader.LoadType.File);  					}  					break;  			}
Missing Default,Assembly.Metro.Controls.PageTemplates.Games.Components.Editors,SoundEditor,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\Editors\SoundEditor.xaml.cs,ExtractRaw,The following switch statement is missing a default case: switch (i)  					{  						case 0:  							tmpStream.Position = _soundResource.Location.PrimaryOffset;  							break;    						case 1:  							tmpStream.Position = _soundResource.Location.SecondaryOffset;  							break;  					}
Missing Default,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,MetaReader,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\MetaReader.cs,VisitBitfield,The following switch statement is missing a default case: switch (field.Type)  			{  				case BitfieldType.Bitfield8:  					field.Value = _reader.ReadByte();  					break;  				case BitfieldType.Bitfield16:  					field.Value = _reader.ReadUInt16();  					break;  				case BitfieldType.Bitfield32:  					field.Value = _reader.ReadUInt32();  					break;  			}
Missing Default,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,MetaReader,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\MetaReader.cs,VisitEnum,The following switch statement is missing a default case: switch (field.Type)  			{  				case EnumType.Enum8:  					field.Value = _reader.ReadSByte();  					break;  				case EnumType.Enum16:  					field.Value = _reader.ReadInt16();  					break;  				case EnumType.Enum32:  					field.Value = _reader.ReadInt32();  					break;  			}
Missing Default,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,MetaReader,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\MetaReader.cs,VisitEnum,The following switch statement is missing a default case: switch (field.Type)  				{  					case EnumType.Enum8:  						if ((sbyte) option.Value == (sbyte) field.Value)  							selected = option;  						break;  					case EnumType.Enum16:  						if ((short) option.Value == (short) field.Value)  							selected = option;  						break;  					case EnumType.Enum32:  						if (option.Value == field.Value)  							selected = option;  						break;  				}
Missing Default,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,MetaReader,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\MetaReader.cs,VisitString,The following switch statement is missing a default case: switch (field.Type)  			{  				case StringType.ASCII:  					field.Value = _reader.ReadAscii(field.Size);  					break;    				case StringType.UTF16:  					field.Value = _reader.ReadUTF16(field.Size);  					break;  			}
Missing Default,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,MetaWriter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\MetaWriter.cs,VisitBitfield,The following switch statement is missing a default case: switch (field.Type)  			{  				case BitfieldType.Bitfield8:  					_writer.WriteByte((byte) field.Value);  					break;    				case BitfieldType.Bitfield16:  					_writer.WriteUInt16((ushort) field.Value);  					break;    				case BitfieldType.Bitfield32:  					_writer.WriteUInt32(field.Value);  					break;  			}
Missing Default,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,MetaWriter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\MetaWriter.cs,VisitEnum,The following switch statement is missing a default case: switch (field.Type)  			{  				case EnumType.Enum8:  					_writer.WriteSByte((sbyte) field.Value);  					break;    				case EnumType.Enum16:  					_writer.WriteInt16((short) field.Value);  					break;    				case EnumType.Enum32:  					_writer.WriteInt32(field.Value);  					break;  			}
Missing Default,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,MetaWriter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\MetaWriter.cs,VisitColourInt,The following switch statement is missing a default case: switch (formatChar)  				{  					case 'a':  						byte alpha = byte.Parse(field.Value.Replace("#"' "").Remove(2)' NumberStyles.HexNumber);  						_writer.WriteByte(alpha);  						break;  					case 'r':  						byte red = byte.Parse(field.Value.Replace("#"' "").Remove(0' 2).Remove(2)' NumberStyles.HexNumber);  						_writer.WriteByte(red);  						break;  					case 'g':  						byte green = byte.Parse(field.Value.Replace("#"' "").Remove(0' 4).Remove(2)' NumberStyles.HexNumber);  						_writer.WriteByte(green);  						break;  					case 'b':  						byte blue = byte.Parse(field.Value.Replace("#"' "").Remove(0' 6)' NumberStyles.HexNumber);  						_writer.WriteByte(blue);  						break;  				}
Missing Default,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,MetaWriter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\MetaWriter.cs,VisitColourFloat,The following switch statement is missing a default case: switch (formatChar)  				{  					case 'a':  						float alpha = Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(alpha);  						break;  					case 'r':  						float red =  							Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 2).Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(red);  						break;  					case 'g':  						float green =  							Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 4).Remove(2)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(green);  						break;  					case 'b':  						float blue = Convert.ToSingle(int.Parse(field.Value.Replace("#"' "").Remove(0' 6)' NumberStyles.HexNumber))/255;  						_writer.WriteFloat(blue);  						break;  				}
Missing Default,Assembly.Metro.Controls.PageTemplates.Games.Components.MetaData,MetaWriter,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\Components\MetaData\MetaWriter.cs,VisitString,The following switch statement is missing a default case: switch (field.Type)  			{  				case StringType.ASCII:  					_writer.WriteAscii(field.Value);  					break;    				case StringType.UTF16:  					_writer.WriteUTF16(field.Value);  					break;  			}
Missing Default,Assembly.Metro.Controls.PageTemplates.Games,HaloPluginGenerator,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloPluginGenerator.xaml.cs,WritePlugin,The following switch statement is missing a default case: switch (guess.Type)  					{  						case MetaValueType.DataReference:  							if (offset <= size - 0x14)  							{  								writer.VisitDataReference("Unknown"' (uint) offset' "bytes"' false' 4' 0);  								offset += 0x10;  								continue;  							}  							break;    						case MetaValueType.TagReference:  							if (offset <= size - 0x10)  							{  								writer.VisitTagReference("Unknown"' (uint) offset' false' true' true' 0);  								offset += 0xC;  								continue;  							}  							break;    						case MetaValueType.Reflexive:  							if (offset <= size - 0xC)  							{  								MetaMap subMap = map.GetSubMap(offset);  								if (subMap != null)  								{  									int subMapSize = subMap.GetBestSizeEstimate();  									writer.EnterReflexive("Unknown"' (uint) offset' false' (uint)subMapSize' 4' 0);  									WritePlugin(subMap' subMapSize' writer);  									writer.LeaveReflexive();  									offset += 0x8;  									continue;  								}  							}  							break;  					}
Missing Default,Assembly.Metro.Controls.PageTemplates.Games,HaloInfo,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloInfo.xaml.cs,LoadMaxTeams,The following switch statement is missing a default case: switch (maxTeam.Index % 3)  				{  					case 0:  						stkRow1Names.Children.Add(textBlock);  						stkRow1TextBoxes.Children.Add(textBox);  						break;  					case 1:  						stkRow2Names.Children.Add(textBlock);  						stkRow2TextBoxes.Children.Add(textBox);  						break;  					case 2:  						stkRow3Names.Children.Add(textBlock);  						stkRow3TextBoxes.Children.Add(textBox);  						break;  				}
Missing Default,Assembly.Metro.Controls.PageTemplates.Games,HaloMap,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Controls\PageTemplates\Games\HaloMap.xaml.cs,InitalizeMap,The following switch statement is missing a default case: switch (_cacheFile.Engine)  				{  					case EngineType.SecondGeneration:  						_rteProvider = new H2VistaRTEProvider("halo2.exe");  						break;    					case EngineType.ThirdGeneration:  						_rteProvider = new XBDMRTEProvider(App.AssemblyStorage.AssemblySettings.Xbdm);  						break;  				}
Missing Default,Assembly.Metro.Dialogs.ControlDialogs,MessageBoxOptions,C:\repos\XboxChaos_Assembly\src\Assembly\Metro\Dialogs\ControlDialogs\MessageBoxOptions.xaml.cs,MessageBoxOptions,The following switch statement is missing a default case: switch (buttons)  			{  				case MetroMessageBox.MessageBoxButtons.Ok:  					btnOkay.Visibility = Visibility.Visible;    					btnOkay.IsDefault = true;  					btnOkay.IsCancel = true;  					break;  				case MetroMessageBox.MessageBoxButtons.OkCancel:  					btnOkay.Visibility = Visibility.Visible;  					btnCancel.Visibility = Visibility.Visible;    					btnOkay.IsDefault = true;  					btnCancel.IsCancel = true;  					break;  				case MetroMessageBox.MessageBoxButtons.YesNo:  					btnYes.Visibility = Visibility.Visible;  					btnNo.Visibility = Visibility.Visible;    					btnYes.IsDefault = true;  					break;  				case MetroMessageBox.MessageBoxButtons.YesNoCancel:  					btnYes.Visibility = Visibility.Visible;  					btnNo.Visibility = Visibility.Visible;  					btnCancel.Visibility = Visibility.Visible;    					btnYes.IsDefault = true;  					btnCancel.IsCancel = true;  					break;  			}
Missing Default,Assembly.Windows,Home,C:\repos\XboxChaos_Assembly\src\Assembly\Windows\Home.xaml.cs,Window_StateChanged,The following switch statement is missing a default case: switch (WindowState)  			{  				case WindowState.Normal:  					borderFrame.BorderThickness = new Thickness(1' 1' 1' 23);  					btnActionRestore.Visibility = Visibility.Collapsed;  					btnActionMaxamize.Visibility =  						ResizeDropVector.Visibility =  							ResizeDrop.Visibility = ResizeRight.Visibility = ResizeBottom.Visibility = Visibility.Visible;  					break;  				case WindowState.Maximized:  					borderFrame.BorderThickness = new Thickness(0' 0' 0' 23);  					btnActionRestore.Visibility = Visibility.Visible;  					btnActionMaxamize.Visibility =  						ResizeDropVector.Visibility =  							ResizeDrop.Visibility = ResizeRight.Visibility = ResizeBottom.Visibility = Visibility.Collapsed;  					break;  			}
Missing Default,Assembly.Windows,Home,C:\repos\XboxChaos_Assembly\src\Assembly\Windows\Home.xaml.cs,WindowProc,The following switch statement is missing a default case: switch (msg)  			{  				case 0x0024:  					WmGetMinMaxInfo(hwnd' lParam);  					handled = true;  					break;  			}
Missing Default,Assembly.Windows,Home,C:\repos\XboxChaos_Assembly\src\Assembly\Windows\Home.xaml.cs,ExternalTabClose,The following switch statement is missing a default case: switch (tabGenre)  			{  				case TabGenre.StartPage:  					tabHeader = "Start Page";  					break;  				case TabGenre.Settings:  					tabHeader = "Settings";  					break;  			}
Missing Default,Assembly.Windows,Home,C:\repos\XboxChaos_Assembly\src\Assembly\Windows\Home.xaml.cs,AddTabModule,The following switch statement is missing a default case: switch (tabG)  			{  				case TabGenre.StartPage:  					tab.Title = "Start Page";  					tab.Content = new StartPage();  					break;  				case TabGenre.Welcome:  					tab.Title = "Welcome";  					tab.Content = new WelcomePage();  					break;  				case TabGenre.Settings:  					tab.Title = "Settings";  					tab.Content = new SettingsPage();  					break;  				case TabGenre.PluginGenerator:  					tab.Title = "Plugin Generator";  					tab.Content = new HaloPluginGenerator();  					break;  				case TabGenre.PluginConverter:  					tab.Title = "Plugin Converter";  					tab.Content = new HaloPluginConverter();  					break;  				case TabGenre.ImgurHistory:  					tab.Title = "Imgur History";  					tab.Content = new ImgurHistoryPage();  					break;      				case TabGenre.MemoryManager:  					tab.Title = "Memory Manager";  					tab.Content = new MemoryManager();  					break;  				case TabGenre.VoxelConverter:  					tab.Title = "Voxel Converter";  					tab.Content = new VoxelConverter();  					break;  				case TabGenre.PostGenerator:  					tab.Title = "Post Generator";  					tab.Content = new PostGenerator();  					break;  			}
Missing Default,Assembly.Windows,Home,C:\repos\XboxChaos_Assembly\src\Assembly\Windows\Home.xaml.cs,StartupDetermineType,The following switch statement is missing a default case: switch (blf.BLFChunks[1].ChunkMagic)  								{  									case "levl":  										AddInfooTabModule(path);  										return;  									case "mapi":  										AddImageTabModule(path);  										return;  								}
