Implementation smell,Namespace,Class,File,Method,Description
Long Method,SimpleHelpers,ConsoleUtils,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\ConsoleUtils.cs,InitializeLog,The method has 107 lines of code.
Complex Method,SimpleHelpers,ConsoleUtils,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\ConsoleUtils.cs,InitializeLog,Cyclomatic complexity of the method is 15
Complex Method,SimpleHelpers,FileEncoding,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\SimpleHelpers\FileEncoding.cs,Detect,Cyclomatic complexity of the method is 9
Complex Method,SimpleHelpers,FlexibleOptions,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\FlexibleOptions.cs,Get,Cyclomatic complexity of the method is 9
Long Statement,SimpleHelpers,ConsoleUtils,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\ConsoleUtils.cs,Initialize,The length of the statement  "                    "options: " + (ProgramOptions == null ? "none" : "\n#    " + String.Join ("\n#    "' ProgramOptions.Options.Select (i => i.Key + "=" + i.Value)))); " is 147.
Long Statement,SimpleHelpers,ConsoleUtils,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\ConsoleUtils.cs,Initialize,The length of the statement  "                    logger.Debug ("options: " + (ProgramOptions == null ? "none" : "\n#    " + String.Join ("\n#    "' ProgramOptions.Options.Select (i => i.Key + "=" + i.Value)))); " is 161.
Long Statement,SimpleHelpers,ConsoleUtils,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\ConsoleUtils.cs,DefaultProgramInitialization,The length of the statement  "            // http://blogs.msdn.com/b/jpsanders/archive/2009/05/20/understanding-maxservicepointidletime-and-defaultconnectionlimit.aspx " is 125.
Long Statement,SimpleHelpers,ConsoleUtils,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\ConsoleUtils.cs,DefaultProgramInitialization,The length of the statement  "            System.Net.ServicePointManager.DefaultConnectionLimit = 1024; // more concurrent connections to the same IP (avoid throttling) " is 126.
Long Statement,SimpleHelpers,ConsoleUtils,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\ConsoleUtils.cs,InitializeLog,The length of the statement  "                    localOptions.EnableLogTargets = appOptions.GetAsList ("EnableLogTargets").Where (i => !String.IsNullOrWhiteSpace (i)).Select (i => i.Trim ()).ToArray (); " is 153.
Long Statement,SimpleHelpers,ConsoleUtils,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\ConsoleUtils.cs,InitializeLog,The length of the statement  "                    localOptions.DisableLogTargets = appOptions.GetAsList ("DisableLogTargets").Where (i => !String.IsNullOrWhiteSpace (i)).Select (i => i.Trim ()).ToArray (); " is 155.
Long Statement,SimpleHelpers,ConsoleUtils,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\ConsoleUtils.cs,InitializeLog,The length of the statement  "                consoleTarget.Layout = "${longdate}\t${callsite}\t${level}\t${message}\t${onexception: \\:[Exception] ${exception:format=tostring}}"; " is 133.
Long Statement,SimpleHelpers,ConsoleUtils,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\ConsoleUtils.cs,InitializeLog,The length of the statement  "                fileTarget.Layout = "${longdate}\t${callsite}\t${level}\t\"${message}${onexception: \t [Exception] ${exception:format=tostring}}\""; " is 132.
Long Statement,SimpleHelpers,ConsoleUtils,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\ConsoleUtils.cs,InitializeLog,The length of the statement  "                fileTarget.ArchiveAboveSize = (localOptions.MaxLogFileSize > 0) ? localOptions.MaxLogFileSize : 4 * 1024 * 1024;  // 4 Mb " is 121.
Long Statement,SimpleHelpers,ConsoleUtils,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\ConsoleUtils.cs,InitializeLog,The length of the statement  "                fileTarget.ArchiveFileName = System.IO.Path.ChangeExtension (logFileName' ".{#}" + System.IO.Path.GetExtension (logFileName)); " is 126.
Long Statement,SimpleHelpers,ConsoleUtils,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\ConsoleUtils.cs,CheckCommandLineParams,The length of the statement  "                        externalLoadedOptions = FlexibleOptions.Merge (externalLoadedOptions' LoadExtenalConfigurationFile (file.Trim (' '' '\''' '"')' configAbortOnError)); " is 149.
Long Statement,SimpleHelpers,ConsoleUtils,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\ConsoleUtils.cs,ParseCommandLineArguments,The length of the statement  "                    bool hasStartingMarker = arg.StartsWith ("-"' StringComparison.Ordinal) || arg.StartsWith ("/"' StringComparison.Ordinal); " is 122.
Long Statement,SimpleHelpers,FileEncoding,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\SimpleHelpers\FileEncoding.cs,DetectFileEncoding,The length of the statement  "            using (var stream = new System.IO.FileStream (inputFilename' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.ReadWrite | System.IO.FileShare.Delete' DEFAULT_BUFFER_SIZE)) " is 194.
Long Statement,SimpleHelpers,FlexibleOptions,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\FlexibleOptions.cs,ChangeStringComparer,The length of the statement  "                Options = new Dictionary<string' string> (Options' _caseInsensitive ? StringComparer.OrdinalIgnoreCase : StringComparer.Ordinal); " is 129.
Long Statement,SimpleHelpers,FlexibleOptions,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\FlexibleOptions.cs,Get,The length of the statement  "                        if (DateTime.TryParse (vDt' System.Globalization.CultureInfo.InvariantCulture' System.Globalization.DateTimeStyles.None' out dt)) " is 129.
Long Statement,SimpleHelpers,FlexibleOptions,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\FlexibleOptions.cs,Get,The length of the statement  "                        if (vDt.Length == 8 && DateTime.TryParseExact (vDt' "yyyyMMdd"' System.Globalization.CultureInfo.InvariantCulture' System.Globalization.DateTimeStyles.None' out dt)) " is 165.
Complex Conditional,SimpleHelpers,FileEncoding,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\SimpleHelpers\FileEncoding.cs,CheckForByteOrderMark,The conditional expression  "rawData[start] == 0 && rawData[start + 1] == 0 && rawData[start + 2] == 0xfe && rawData[start + 3] == 0xff"  is complex.
Empty Catch Block,SimpleHelpers,FileEncoding,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\SimpleHelpers\FileEncoding.cs,TryLoadFile,The method has an empty catch block.
Empty Catch Block,SimpleHelpers,FlexibleOptions,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\FlexibleOptions.cs,Get,The method has an empty catch block.
Magic Number,SimpleHelpers,ConsoleUtils,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\ConsoleUtils.cs,DefaultProgramInitialization,The following statement contains a magic number: System.Net.ServicePointManager.DefaultConnectionLimit = 1024;
Magic Number,SimpleHelpers,ConsoleUtils,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\ConsoleUtils.cs,InitializeLog,The following statement contains a magic number: if (enabledTargets.Contains ("file"))              {                  var fileTarget = new NLog.Targets.FileTarget ();                  fileTarget.FileName = logFileName;                  fileTarget.Layout = "${longdate}\t${callsite}\t${level}\t\"${message}${onexception: \t [Exception] ${exception:format=tostring}}\"";                  fileTarget.ConcurrentWrites = true;                  fileTarget.ConcurrentWriteAttemptDelay = 10;                  fileTarget.ConcurrentWriteAttempts = 8;                  fileTarget.AutoFlush = true;                  fileTarget.KeepFileOpen = true;                  fileTarget.DeleteOldFileOnStartup = false;                  fileTarget.ArchiveAboveSize = (localOptions.MaxLogFileSize > 0) ? localOptions.MaxLogFileSize : 4 * 1024 * 1024;  // 4 Mb                  fileTarget.MaxArchiveFiles = (localOptions.MaxArchiveLogFiles > 0) ? localOptions.MaxArchiveLogFiles : 10;                  fileTarget.ArchiveNumbering = NLog.Targets.ArchiveNumberingMode.DateAndSequence;                  fileTarget.ArchiveDateFormat = "yyyyMMdd";                  fileTarget.ArchiveFileName = System.IO.Path.ChangeExtension (logFileName' ".{#}" + System.IO.Path.GetExtension (logFileName));                    // set file output to be async (commented out since doesn't work well on mono)                  // var wrapper = new NLog.Targets.Wrappers.AsyncTargetWrapper (fileTarget);                    config.AddTarget ("file"' fileTarget);                    // configure log from configuration file                  var rule2 = new NLog.Config.LoggingRule ("*"' currentLogLevel' fileTarget);                  config.LoggingRules.Add (rule2);              }
Magic Number,SimpleHelpers,ConsoleUtils,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\ConsoleUtils.cs,InitializeLog,The following statement contains a magic number: if (enabledTargets.Contains ("file"))              {                  var fileTarget = new NLog.Targets.FileTarget ();                  fileTarget.FileName = logFileName;                  fileTarget.Layout = "${longdate}\t${callsite}\t${level}\t\"${message}${onexception: \t [Exception] ${exception:format=tostring}}\"";                  fileTarget.ConcurrentWrites = true;                  fileTarget.ConcurrentWriteAttemptDelay = 10;                  fileTarget.ConcurrentWriteAttempts = 8;                  fileTarget.AutoFlush = true;                  fileTarget.KeepFileOpen = true;                  fileTarget.DeleteOldFileOnStartup = false;                  fileTarget.ArchiveAboveSize = (localOptions.MaxLogFileSize > 0) ? localOptions.MaxLogFileSize : 4 * 1024 * 1024;  // 4 Mb                  fileTarget.MaxArchiveFiles = (localOptions.MaxArchiveLogFiles > 0) ? localOptions.MaxArchiveLogFiles : 10;                  fileTarget.ArchiveNumbering = NLog.Targets.ArchiveNumberingMode.DateAndSequence;                  fileTarget.ArchiveDateFormat = "yyyyMMdd";                  fileTarget.ArchiveFileName = System.IO.Path.ChangeExtension (logFileName' ".{#}" + System.IO.Path.GetExtension (logFileName));                    // set file output to be async (commented out since doesn't work well on mono)                  // var wrapper = new NLog.Targets.Wrappers.AsyncTargetWrapper (fileTarget);                    config.AddTarget ("file"' fileTarget);                    // configure log from configuration file                  var rule2 = new NLog.Config.LoggingRule ("*"' currentLogLevel' fileTarget);                  config.LoggingRules.Add (rule2);              }
Magic Number,SimpleHelpers,ConsoleUtils,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\ConsoleUtils.cs,InitializeLog,The following statement contains a magic number: if (enabledTargets.Contains ("file"))              {                  var fileTarget = new NLog.Targets.FileTarget ();                  fileTarget.FileName = logFileName;                  fileTarget.Layout = "${longdate}\t${callsite}\t${level}\t\"${message}${onexception: \t [Exception] ${exception:format=tostring}}\"";                  fileTarget.ConcurrentWrites = true;                  fileTarget.ConcurrentWriteAttemptDelay = 10;                  fileTarget.ConcurrentWriteAttempts = 8;                  fileTarget.AutoFlush = true;                  fileTarget.KeepFileOpen = true;                  fileTarget.DeleteOldFileOnStartup = false;                  fileTarget.ArchiveAboveSize = (localOptions.MaxLogFileSize > 0) ? localOptions.MaxLogFileSize : 4 * 1024 * 1024;  // 4 Mb                  fileTarget.MaxArchiveFiles = (localOptions.MaxArchiveLogFiles > 0) ? localOptions.MaxArchiveLogFiles : 10;                  fileTarget.ArchiveNumbering = NLog.Targets.ArchiveNumberingMode.DateAndSequence;                  fileTarget.ArchiveDateFormat = "yyyyMMdd";                  fileTarget.ArchiveFileName = System.IO.Path.ChangeExtension (logFileName' ".{#}" + System.IO.Path.GetExtension (logFileName));                    // set file output to be async (commented out since doesn't work well on mono)                  // var wrapper = new NLog.Targets.Wrappers.AsyncTargetWrapper (fileTarget);                    config.AddTarget ("file"' fileTarget);                    // configure log from configuration file                  var rule2 = new NLog.Config.LoggingRule ("*"' currentLogLevel' fileTarget);                  config.LoggingRules.Add (rule2);              }
Magic Number,SimpleHelpers,ConsoleUtils,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\ConsoleUtils.cs,InitializeLog,The following statement contains a magic number: if (enabledTargets.Contains ("file"))              {                  var fileTarget = new NLog.Targets.FileTarget ();                  fileTarget.FileName = logFileName;                  fileTarget.Layout = "${longdate}\t${callsite}\t${level}\t\"${message}${onexception: \t [Exception] ${exception:format=tostring}}\"";                  fileTarget.ConcurrentWrites = true;                  fileTarget.ConcurrentWriteAttemptDelay = 10;                  fileTarget.ConcurrentWriteAttempts = 8;                  fileTarget.AutoFlush = true;                  fileTarget.KeepFileOpen = true;                  fileTarget.DeleteOldFileOnStartup = false;                  fileTarget.ArchiveAboveSize = (localOptions.MaxLogFileSize > 0) ? localOptions.MaxLogFileSize : 4 * 1024 * 1024;  // 4 Mb                  fileTarget.MaxArchiveFiles = (localOptions.MaxArchiveLogFiles > 0) ? localOptions.MaxArchiveLogFiles : 10;                  fileTarget.ArchiveNumbering = NLog.Targets.ArchiveNumberingMode.DateAndSequence;                  fileTarget.ArchiveDateFormat = "yyyyMMdd";                  fileTarget.ArchiveFileName = System.IO.Path.ChangeExtension (logFileName' ".{#}" + System.IO.Path.GetExtension (logFileName));                    // set file output to be async (commented out since doesn't work well on mono)                  // var wrapper = new NLog.Targets.Wrappers.AsyncTargetWrapper (fileTarget);                    config.AddTarget ("file"' fileTarget);                    // configure log from configuration file                  var rule2 = new NLog.Config.LoggingRule ("*"' currentLogLevel' fileTarget);                  config.LoggingRules.Add (rule2);              }
Magic Number,SimpleHelpers,ConsoleUtils,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\ConsoleUtils.cs,InitializeLog,The following statement contains a magic number: if (enabledTargets.Contains ("file"))              {                  var fileTarget = new NLog.Targets.FileTarget ();                  fileTarget.FileName = logFileName;                  fileTarget.Layout = "${longdate}\t${callsite}\t${level}\t\"${message}${onexception: \t [Exception] ${exception:format=tostring}}\"";                  fileTarget.ConcurrentWrites = true;                  fileTarget.ConcurrentWriteAttemptDelay = 10;                  fileTarget.ConcurrentWriteAttempts = 8;                  fileTarget.AutoFlush = true;                  fileTarget.KeepFileOpen = true;                  fileTarget.DeleteOldFileOnStartup = false;                  fileTarget.ArchiveAboveSize = (localOptions.MaxLogFileSize > 0) ? localOptions.MaxLogFileSize : 4 * 1024 * 1024;  // 4 Mb                  fileTarget.MaxArchiveFiles = (localOptions.MaxArchiveLogFiles > 0) ? localOptions.MaxArchiveLogFiles : 10;                  fileTarget.ArchiveNumbering = NLog.Targets.ArchiveNumberingMode.DateAndSequence;                  fileTarget.ArchiveDateFormat = "yyyyMMdd";                  fileTarget.ArchiveFileName = System.IO.Path.ChangeExtension (logFileName' ".{#}" + System.IO.Path.GetExtension (logFileName));                    // set file output to be async (commented out since doesn't work well on mono)                  // var wrapper = new NLog.Targets.Wrappers.AsyncTargetWrapper (fileTarget);                    config.AddTarget ("file"' fileTarget);                    // configure log from configuration file                  var rule2 = new NLog.Config.LoggingRule ("*"' currentLogLevel' fileTarget);                  config.LoggingRules.Add (rule2);              }
Magic Number,SimpleHelpers,ConsoleUtils,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\ConsoleUtils.cs,InitializeLog,The following statement contains a magic number: if (enabledTargets.Contains ("file"))              {                  var fileTarget = new NLog.Targets.FileTarget ();                  fileTarget.FileName = logFileName;                  fileTarget.Layout = "${longdate}\t${callsite}\t${level}\t\"${message}${onexception: \t [Exception] ${exception:format=tostring}}\"";                  fileTarget.ConcurrentWrites = true;                  fileTarget.ConcurrentWriteAttemptDelay = 10;                  fileTarget.ConcurrentWriteAttempts = 8;                  fileTarget.AutoFlush = true;                  fileTarget.KeepFileOpen = true;                  fileTarget.DeleteOldFileOnStartup = false;                  fileTarget.ArchiveAboveSize = (localOptions.MaxLogFileSize > 0) ? localOptions.MaxLogFileSize : 4 * 1024 * 1024;  // 4 Mb                  fileTarget.MaxArchiveFiles = (localOptions.MaxArchiveLogFiles > 0) ? localOptions.MaxArchiveLogFiles : 10;                  fileTarget.ArchiveNumbering = NLog.Targets.ArchiveNumberingMode.DateAndSequence;                  fileTarget.ArchiveDateFormat = "yyyyMMdd";                  fileTarget.ArchiveFileName = System.IO.Path.ChangeExtension (logFileName' ".{#}" + System.IO.Path.GetExtension (logFileName));                    // set file output to be async (commented out since doesn't work well on mono)                  // var wrapper = new NLog.Targets.Wrappers.AsyncTargetWrapper (fileTarget);                    config.AddTarget ("file"' fileTarget);                    // configure log from configuration file                  var rule2 = new NLog.Config.LoggingRule ("*"' currentLogLevel' fileTarget);                  config.LoggingRules.Add (rule2);              }
Magic Number,SimpleHelpers,ConsoleUtils,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\ConsoleUtils.cs,CloseApplication,The following statement contains a magic number: System.Threading.Thread.Sleep (100);
Magic Number,SimpleHelpers,ConsoleUtils,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\ConsoleUtils.cs,LoadWebConfigurationFile,The following statement contains a magic number: for (var i = 0; i < 3; i++)              {                  try                  {                      using (WebClient client = new WebClient ())                      {                          return parseFile (client.DownloadString (filePath));                      }                  }                  catch (Exception ex)                  {                      if (i >= 2)                      {                          if (thrownOnError)                              throw;                          GetLogger ().Error (ex);                      }                      else                      {                          Task.Delay (150).Wait ();                      }                  }              }
Magic Number,SimpleHelpers,ConsoleUtils,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\ConsoleUtils.cs,LoadWebConfigurationFile,The following statement contains a magic number: for (var i = 0; i < 3; i++)              {                  try                  {                      using (WebClient client = new WebClient ())                      {                          return parseFile (client.DownloadString (filePath));                      }                  }                  catch (Exception ex)                  {                      if (i >= 2)                      {                          if (thrownOnError)                              throw;                          GetLogger ().Error (ex);                      }                      else                      {                          Task.Delay (150).Wait ();                      }                  }              }
Magic Number,SimpleHelpers,ConsoleUtils,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\ConsoleUtils.cs,LoadWebConfigurationFile,The following statement contains a magic number: for (var i = 0; i < 3; i++)              {                  try                  {                      using (WebClient client = new WebClient ())                      {                          return parseFile (client.DownloadString (filePath));                      }                  }                  catch (Exception ex)                  {                      if (i >= 2)                      {                          if (thrownOnError)                              throw;                          GetLogger ().Error (ex);                      }                      else                      {                          Task.Delay (150).Wait ();                      }                  }              }
Magic Number,SimpleHelpers,InitializationOptions,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\ConsoleUtils.cs,InitializationOptions,The following statement contains a magic number: MaxArchiveLogFiles = 10;
Magic Number,SimpleHelpers,InitializationOptions,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\ConsoleUtils.cs,InitializationOptions,The following statement contains a magic number: MaxLogFileSize = 4 * 1024 * 1024;
Magic Number,SimpleHelpers,InitializationOptions,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\ConsoleUtils.cs,InitializationOptions,The following statement contains a magic number: MaxLogFileSize = 4 * 1024 * 1024;
Magic Number,SimpleHelpers,InitializationOptions,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\ConsoleUtils.cs,InitializationOptions,The following statement contains a magic number: MaxLogFileSize = 4 * 1024 * 1024;
Magic Number,SimpleHelpers,FileEncoding,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\SimpleHelpers\FileEncoding.cs,CheckForTextualData,The following statement contains a magic number: if (rawData.Length < count || count < 4 || start + 1 >= count)                  return true;
Magic Number,SimpleHelpers,FileEncoding,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\SimpleHelpers\FileEncoding.cs,CheckForTextualData,The following statement contains a magic number: for (var i = start + 1; i < count; i++)              {                  if (rawData[i - 1] == 0 && rawData[i] == 0)                  {                      if (++nullSequences > 1)                          break;                  }                  else if (rawData[i - 1] == 0 && rawData[i] < 10)                  {                      ++controlSequences;                  }              }
Magic Number,SimpleHelpers,FileEncoding,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\SimpleHelpers\FileEncoding.cs,CheckForTextualData,The following statement contains a magic number: return nullSequences == 0 && (controlSequences <= (rawData.Length / 10));
Magic Number,SimpleHelpers,FileEncoding,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\SimpleHelpers\FileEncoding.cs,CheckForByteOrderMark,The following statement contains a magic number: if (rawData.Length - start < 4)                  return false;
Magic Number,SimpleHelpers,FileEncoding,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\SimpleHelpers\FileEncoding.cs,CheckForByteOrderMark,The following statement contains a magic number: if (rawData[start] == 0xef && rawData[start + 1] == 0xbb && rawData[start + 2] == 0xbf)              {                  // Encoding.UTF8;                  return true;              }              else if (rawData[start] == 0xfe && rawData[start + 1] == 0xff)              {                  // Encoding.Unicode;                  return true;              }              else if (rawData[start] == 0 && rawData[start + 1] == 0 && rawData[start + 2] == 0xfe && rawData[start + 3] == 0xff)              {                  // Encoding.UTF32;                  return true;              }              else if (rawData[start] == 0x2b && rawData[start + 1] == 0x2f && rawData[start + 2] == 0x76)              {                  // Encoding.UTF7;                  return true;              }
Magic Number,SimpleHelpers,FileEncoding,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\SimpleHelpers\FileEncoding.cs,CheckForByteOrderMark,The following statement contains a magic number: if (rawData[start] == 0xef && rawData[start + 1] == 0xbb && rawData[start + 2] == 0xbf)              {                  // Encoding.UTF8;                  return true;              }              else if (rawData[start] == 0xfe && rawData[start + 1] == 0xff)              {                  // Encoding.Unicode;                  return true;              }              else if (rawData[start] == 0 && rawData[start + 1] == 0 && rawData[start + 2] == 0xfe && rawData[start + 3] == 0xff)              {                  // Encoding.UTF32;                  return true;              }              else if (rawData[start] == 0x2b && rawData[start + 1] == 0x2f && rawData[start + 2] == 0x76)              {                  // Encoding.UTF7;                  return true;              }
Magic Number,SimpleHelpers,FileEncoding,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\SimpleHelpers\FileEncoding.cs,CheckForByteOrderMark,The following statement contains a magic number: if (rawData[start] == 0xef && rawData[start + 1] == 0xbb && rawData[start + 2] == 0xbf)              {                  // Encoding.UTF8;                  return true;              }              else if (rawData[start] == 0xfe && rawData[start + 1] == 0xff)              {                  // Encoding.Unicode;                  return true;              }              else if (rawData[start] == 0 && rawData[start + 1] == 0 && rawData[start + 2] == 0xfe && rawData[start + 3] == 0xff)              {                  // Encoding.UTF32;                  return true;              }              else if (rawData[start] == 0x2b && rawData[start + 1] == 0x2f && rawData[start + 2] == 0x76)              {                  // Encoding.UTF7;                  return true;              }
Magic Number,SimpleHelpers,FileEncoding,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\SimpleHelpers\FileEncoding.cs,CheckForByteOrderMark,The following statement contains a magic number: if (rawData[start] == 0xef && rawData[start + 1] == 0xbb && rawData[start + 2] == 0xbf)              {                  // Encoding.UTF8;                  return true;              }              else if (rawData[start] == 0xfe && rawData[start + 1] == 0xff)              {                  // Encoding.Unicode;                  return true;              }              else if (rawData[start] == 0 && rawData[start + 1] == 0 && rawData[start + 2] == 0xfe && rawData[start + 3] == 0xff)              {                  // Encoding.UTF32;                  return true;              }              else if (rawData[start] == 0x2b && rawData[start + 1] == 0x2f && rawData[start + 2] == 0x76)              {                  // Encoding.UTF7;                  return true;              }
Magic Number,SimpleHelpers,FileEncoding,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\SimpleHelpers\FileEncoding.cs,Detect,The following statement contains a magic number: const int bufferSize = 16 * 1024;
Magic Number,SimpleHelpers,FileEncoding,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\SimpleHelpers\FileEncoding.cs,Detect,The following statement contains a magic number: const int bufferSize = 16 * 1024;
Magic Number,SimpleHelpers,FileEncoding,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\SimpleHelpers\FileEncoding.cs,Detect,The following statement contains a magic number: const int maxIterations = (20 * 1024 * 1024) / bufferSize;
Magic Number,SimpleHelpers,FileEncoding,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\SimpleHelpers\FileEncoding.cs,Detect,The following statement contains a magic number: const int maxIterations = (20 * 1024 * 1024) / bufferSize;
Magic Number,SimpleHelpers,FileEncoding,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\SimpleHelpers\FileEncoding.cs,Detect,The following statement contains a magic number: const int maxIterations = (20 * 1024 * 1024) / bufferSize;
Magic Number,SimpleHelpers,FileEncoding,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\SimpleHelpers\FileEncoding.cs,Detect,The following statement contains a magic number: const int bufferSize = 4 * 1024;
Magic Number,SimpleHelpers,FileEncoding,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\SimpleHelpers\FileEncoding.cs,Detect,The following statement contains a magic number: const int bufferSize = 4 * 1024;
Magic Number,SimpleHelpers,FileEncoding,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\SimpleHelpers\FileEncoding.cs,Detect,The following statement contains a magic number: if (singleEncodings.Count < 2000)              {                  var u = new Ude.CharsetDetector ();                  int step = (count - start) < bufferSize ? (count - start) : bufferSize;                  for (var i = start; i < count; i += step)                  {                      u.Reset ();                      if (i + step > count)                          u.Feed (inputData' i' count - i);                      else                          u.Feed (inputData' i' step);                      u.DataEnd ();                      if (u.Confidence > 0.3 && !String.IsNullOrEmpty (u.Charset))                          singleEncodings.Add (u.Charset);                  }              }
Magic Number,SimpleHelpers,FileEncoding,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\SimpleHelpers\FileEncoding.cs,Detect,The following statement contains a magic number: if (singleEncodings.Count < 2000)              {                  var u = new Ude.CharsetDetector ();                  int step = (count - start) < bufferSize ? (count - start) : bufferSize;                  for (var i = start; i < count; i += step)                  {                      u.Reset ();                      if (i + step > count)                          u.Feed (inputData' i' count - i);                      else                          u.Feed (inputData' i' step);                      u.DataEnd ();                      if (u.Confidence > 0.3 && !String.IsNullOrEmpty (u.Charset))                          singleEncodings.Add (u.Charset);                  }              }
Magic Number,SimpleHelpers,FileEncoding,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\SimpleHelpers\FileEncoding.cs,Complete,The following statement contains a magic number: if (ude.IsDone () && !String.IsNullOrEmpty (ude.Charset))              {                  EncodingName = ude.Charset;              }              else if (singleEncodings.Count > 0)              {                  // vote for best encoding                  EncodingName = singleEncodings.GroupBy (i => i)                      .OrderByDescending (i => i.Count () *                       (i.Key.StartsWith ("UTF-32") ? 2 :                      i.Key.StartsWith ("UTF-16") ? 1.8 :                      i.Key.StartsWith ("UTF-8") ? 1.5 :                      i.Key.StartsWith ("UTF-7") ? 1.3 :                      i.Key != ("ASCII") ? 1 : 0.2))                      .Select (i => i.Key).FirstOrDefault ();              }
Magic Number,SimpleHelpers,FileEncoding,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\SimpleHelpers\FileEncoding.cs,Complete,The following statement contains a magic number: if (ude.IsDone () && !String.IsNullOrEmpty (ude.Charset))              {                  EncodingName = ude.Charset;              }              else if (singleEncodings.Count > 0)              {                  // vote for best encoding                  EncodingName = singleEncodings.GroupBy (i => i)                      .OrderByDescending (i => i.Count () *                       (i.Key.StartsWith ("UTF-32") ? 2 :                      i.Key.StartsWith ("UTF-16") ? 1.8 :                      i.Key.StartsWith ("UTF-8") ? 1.5 :                      i.Key.StartsWith ("UTF-7") ? 1.3 :                      i.Key != ("ASCII") ? 1 : 0.2))                      .Select (i => i.Key).FirstOrDefault ();              }
Magic Number,SimpleHelpers,FileEncoding,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\SimpleHelpers\FileEncoding.cs,Complete,The following statement contains a magic number: if (ude.IsDone () && !String.IsNullOrEmpty (ude.Charset))              {                  EncodingName = ude.Charset;              }              else if (singleEncodings.Count > 0)              {                  // vote for best encoding                  EncodingName = singleEncodings.GroupBy (i => i)                      .OrderByDescending (i => i.Count () *                       (i.Key.StartsWith ("UTF-32") ? 2 :                      i.Key.StartsWith ("UTF-16") ? 1.8 :                      i.Key.StartsWith ("UTF-8") ? 1.5 :                      i.Key.StartsWith ("UTF-7") ? 1.3 :                      i.Key != ("ASCII") ? 1 : 0.2))                      .Select (i => i.Key).FirstOrDefault ();              }
Magic Number,SimpleHelpers,FileEncoding,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\SimpleHelpers\FileEncoding.cs,Complete,The following statement contains a magic number: if (ude.IsDone () && !String.IsNullOrEmpty (ude.Charset))              {                  EncodingName = ude.Charset;              }              else if (singleEncodings.Count > 0)              {                  // vote for best encoding                  EncodingName = singleEncodings.GroupBy (i => i)                      .OrderByDescending (i => i.Count () *                       (i.Key.StartsWith ("UTF-32") ? 2 :                      i.Key.StartsWith ("UTF-16") ? 1.8 :                      i.Key.StartsWith ("UTF-8") ? 1.5 :                      i.Key.StartsWith ("UTF-7") ? 1.3 :                      i.Key != ("ASCII") ? 1 : 0.2))                      .Select (i => i.Key).FirstOrDefault ();              }
Magic Number,SimpleHelpers,FileEncoding,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\SimpleHelpers\FileEncoding.cs,Complete,The following statement contains a magic number: if (ude.IsDone () && !String.IsNullOrEmpty (ude.Charset))              {                  EncodingName = ude.Charset;              }              else if (singleEncodings.Count > 0)              {                  // vote for best encoding                  EncodingName = singleEncodings.GroupBy (i => i)                      .OrderByDescending (i => i.Count () *                       (i.Key.StartsWith ("UTF-32") ? 2 :                      i.Key.StartsWith ("UTF-16") ? 1.8 :                      i.Key.StartsWith ("UTF-8") ? 1.5 :                      i.Key.StartsWith ("UTF-7") ? 1.3 :                      i.Key != ("ASCII") ? 1 : 0.2))                      .Select (i => i.Key).FirstOrDefault ();              }
Magic Number,SimpleHelpers,FlexibleOptions,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\FlexibleOptions.cs,Get,The following statement contains a magic number: if (Options.TryGetValue (key' out v))              {                  try                  {                      if (v == null || v.Length == 0)                          return defaultValue;                        bool missingQuotes = v.Length < 2 || (!(v[0] == '\"' && v[v.Length - 1] == '\"'));                      var desiredType = typeof (T);                        if (desiredType == typeof (string))                      {                          if (missingQuotes || preserveQuotes)                              return (T)(object)v;                          // let's deserialize to also unscape the string                          return Newtonsoft.Json.JsonConvert.DeserializeObject<T> (v);                      }                      // more comprehensive datetime parser' except formats like "\"\\/Date(1335205592410-0500)\\/\""                      // DateTime is tested prior to IConvertible' since it also implements IConvertible                      else if (desiredType == typeof (DateTime) || desiredType == typeof (DateTime?))                      {                          DateTime dt;                          var vDt = missingQuotes ? v : v.Substring (1' v.Length - 2);                          if (DateTime.TryParse (vDt' System.Globalization.CultureInfo.InvariantCulture' System.Globalization.DateTimeStyles.None' out dt))                              return (T)(object)dt;                          if (vDt.Length == 8 && DateTime.TryParseExact (vDt' "yyyyMMdd"' System.Globalization.CultureInfo.InvariantCulture' System.Globalization.DateTimeStyles.None' out dt))                              return (T)(object)dt;                          // if previous convertion attempts didn't work' fallback to json deserialization                      }                      // let's deal with enums                      else if (desiredType.IsEnum)                      {                          return (T)Enum.Parse (desiredType' v' true);                      }                      // all primitive types are IConvertible'                       // and if the type implements this interface lets use it!                      else if (typeof (IConvertible).IsAssignableFrom (desiredType))                      {                          if (!missingQuotes)                              v = v.Substring (1' v.Length - 2);                          // type convertion with InvariantCulture (faster)                          return (T)Convert.ChangeType (v' desiredType' System.Globalization.CultureInfo.InvariantCulture);                      }                      // Guid doesn't implement IConvertible                      else if (desiredType == typeof (Guid) || desiredType == typeof (Guid?))                      {                          Guid guid;                          if (Guid.TryParse (v' out guid))                              return (T)(object)guid;                      }                      // TimeSpan doesn't implement IConvertible                      else if (desiredType == typeof (TimeSpan) || desiredType == typeof (TimeSpan?))                      {                          TimeSpan timespan;                          if (TimeSpan.TryParse (v' out timespan))                              return (T)(object)timespan;                      }                        // finally' deserialize it!                                         return Newtonsoft.Json.JsonConvert.DeserializeObject<T> (v);                  }                  catch { /* ignore and return default value */ }              }
Magic Number,SimpleHelpers,FlexibleOptions,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\FlexibleOptions.cs,Get,The following statement contains a magic number: if (Options.TryGetValue (key' out v))              {                  try                  {                      if (v == null || v.Length == 0)                          return defaultValue;                        bool missingQuotes = v.Length < 2 || (!(v[0] == '\"' && v[v.Length - 1] == '\"'));                      var desiredType = typeof (T);                        if (desiredType == typeof (string))                      {                          if (missingQuotes || preserveQuotes)                              return (T)(object)v;                          // let's deserialize to also unscape the string                          return Newtonsoft.Json.JsonConvert.DeserializeObject<T> (v);                      }                      // more comprehensive datetime parser' except formats like "\"\\/Date(1335205592410-0500)\\/\""                      // DateTime is tested prior to IConvertible' since it also implements IConvertible                      else if (desiredType == typeof (DateTime) || desiredType == typeof (DateTime?))                      {                          DateTime dt;                          var vDt = missingQuotes ? v : v.Substring (1' v.Length - 2);                          if (DateTime.TryParse (vDt' System.Globalization.CultureInfo.InvariantCulture' System.Globalization.DateTimeStyles.None' out dt))                              return (T)(object)dt;                          if (vDt.Length == 8 && DateTime.TryParseExact (vDt' "yyyyMMdd"' System.Globalization.CultureInfo.InvariantCulture' System.Globalization.DateTimeStyles.None' out dt))                              return (T)(object)dt;                          // if previous convertion attempts didn't work' fallback to json deserialization                      }                      // let's deal with enums                      else if (desiredType.IsEnum)                      {                          return (T)Enum.Parse (desiredType' v' true);                      }                      // all primitive types are IConvertible'                       // and if the type implements this interface lets use it!                      else if (typeof (IConvertible).IsAssignableFrom (desiredType))                      {                          if (!missingQuotes)                              v = v.Substring (1' v.Length - 2);                          // type convertion with InvariantCulture (faster)                          return (T)Convert.ChangeType (v' desiredType' System.Globalization.CultureInfo.InvariantCulture);                      }                      // Guid doesn't implement IConvertible                      else if (desiredType == typeof (Guid) || desiredType == typeof (Guid?))                      {                          Guid guid;                          if (Guid.TryParse (v' out guid))                              return (T)(object)guid;                      }                      // TimeSpan doesn't implement IConvertible                      else if (desiredType == typeof (TimeSpan) || desiredType == typeof (TimeSpan?))                      {                          TimeSpan timespan;                          if (TimeSpan.TryParse (v' out timespan))                              return (T)(object)timespan;                      }                        // finally' deserialize it!                                         return Newtonsoft.Json.JsonConvert.DeserializeObject<T> (v);                  }                  catch { /* ignore and return default value */ }              }
Magic Number,SimpleHelpers,FlexibleOptions,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\FlexibleOptions.cs,Get,The following statement contains a magic number: if (Options.TryGetValue (key' out v))              {                  try                  {                      if (v == null || v.Length == 0)                          return defaultValue;                        bool missingQuotes = v.Length < 2 || (!(v[0] == '\"' && v[v.Length - 1] == '\"'));                      var desiredType = typeof (T);                        if (desiredType == typeof (string))                      {                          if (missingQuotes || preserveQuotes)                              return (T)(object)v;                          // let's deserialize to also unscape the string                          return Newtonsoft.Json.JsonConvert.DeserializeObject<T> (v);                      }                      // more comprehensive datetime parser' except formats like "\"\\/Date(1335205592410-0500)\\/\""                      // DateTime is tested prior to IConvertible' since it also implements IConvertible                      else if (desiredType == typeof (DateTime) || desiredType == typeof (DateTime?))                      {                          DateTime dt;                          var vDt = missingQuotes ? v : v.Substring (1' v.Length - 2);                          if (DateTime.TryParse (vDt' System.Globalization.CultureInfo.InvariantCulture' System.Globalization.DateTimeStyles.None' out dt))                              return (T)(object)dt;                          if (vDt.Length == 8 && DateTime.TryParseExact (vDt' "yyyyMMdd"' System.Globalization.CultureInfo.InvariantCulture' System.Globalization.DateTimeStyles.None' out dt))                              return (T)(object)dt;                          // if previous convertion attempts didn't work' fallback to json deserialization                      }                      // let's deal with enums                      else if (desiredType.IsEnum)                      {                          return (T)Enum.Parse (desiredType' v' true);                      }                      // all primitive types are IConvertible'                       // and if the type implements this interface lets use it!                      else if (typeof (IConvertible).IsAssignableFrom (desiredType))                      {                          if (!missingQuotes)                              v = v.Substring (1' v.Length - 2);                          // type convertion with InvariantCulture (faster)                          return (T)Convert.ChangeType (v' desiredType' System.Globalization.CultureInfo.InvariantCulture);                      }                      // Guid doesn't implement IConvertible                      else if (desiredType == typeof (Guid) || desiredType == typeof (Guid?))                      {                          Guid guid;                          if (Guid.TryParse (v' out guid))                              return (T)(object)guid;                      }                      // TimeSpan doesn't implement IConvertible                      else if (desiredType == typeof (TimeSpan) || desiredType == typeof (TimeSpan?))                      {                          TimeSpan timespan;                          if (TimeSpan.TryParse (v' out timespan))                              return (T)(object)timespan;                      }                        // finally' deserialize it!                                         return Newtonsoft.Json.JsonConvert.DeserializeObject<T> (v);                  }                  catch { /* ignore and return default value */ }              }
Magic Number,SimpleHelpers,FlexibleOptions,C:\repos\khalidsalomao_SimpleHelpers.Net\SimpleHelpers.ConsoleUtils\FlexibleOptions.cs,Get,The following statement contains a magic number: if (Options.TryGetValue (key' out v))              {                  try                  {                      if (v == null || v.Length == 0)                          return defaultValue;                        bool missingQuotes = v.Length < 2 || (!(v[0] == '\"' && v[v.Length - 1] == '\"'));                      var desiredType = typeof (T);                        if (desiredType == typeof (string))                      {                          if (missingQuotes || preserveQuotes)                              return (T)(object)v;                          // let's deserialize to also unscape the string                          return Newtonsoft.Json.JsonConvert.DeserializeObject<T> (v);                      }                      // more comprehensive datetime parser' except formats like "\"\\/Date(1335205592410-0500)\\/\""                      // DateTime is tested prior to IConvertible' since it also implements IConvertible                      else if (desiredType == typeof (DateTime) || desiredType == typeof (DateTime?))                      {                          DateTime dt;                          var vDt = missingQuotes ? v : v.Substring (1' v.Length - 2);                          if (DateTime.TryParse (vDt' System.Globalization.CultureInfo.InvariantCulture' System.Globalization.DateTimeStyles.None' out dt))                              return (T)(object)dt;                          if (vDt.Length == 8 && DateTime.TryParseExact (vDt' "yyyyMMdd"' System.Globalization.CultureInfo.InvariantCulture' System.Globalization.DateTimeStyles.None' out dt))                              return (T)(object)dt;                          // if previous convertion attempts didn't work' fallback to json deserialization                      }                      // let's deal with enums                      else if (desiredType.IsEnum)                      {                          return (T)Enum.Parse (desiredType' v' true);                      }                      // all primitive types are IConvertible'                       // and if the type implements this interface lets use it!                      else if (typeof (IConvertible).IsAssignableFrom (desiredType))                      {                          if (!missingQuotes)                              v = v.Substring (1' v.Length - 2);                          // type convertion with InvariantCulture (faster)                          return (T)Convert.ChangeType (v' desiredType' System.Globalization.CultureInfo.InvariantCulture);                      }                      // Guid doesn't implement IConvertible                      else if (desiredType == typeof (Guid) || desiredType == typeof (Guid?))                      {                          Guid guid;                          if (Guid.TryParse (v' out guid))                              return (T)(object)guid;                      }                      // TimeSpan doesn't implement IConvertible                      else if (desiredType == typeof (TimeSpan) || desiredType == typeof (TimeSpan?))                      {                          TimeSpan timespan;                          if (TimeSpan.TryParse (v' out timespan))                              return (T)(object)timespan;                      }                        // finally' deserialize it!                                         return Newtonsoft.Json.JsonConvert.DeserializeObject<T> (v);                  }                  catch { /* ignore and return default value */ }              }
