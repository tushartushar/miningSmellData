Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Generics,GenericConstrainsTest,D:\research\architectureSmells\repos\MartinChavez_School-of-CSharp\SchoolOfCSharp\Generics\GenericConstrainsTest.cs,GenericReflection,The length of the statement  "            var disposer = CreateDisposer(typeof (ImplementsIDisposable)) as Disposer<ImplementsIDisposable>; //You can specify at runtime the Generic Type you want to create " is 162.
Long Statement,Generics,GenericConstrainsTest,D:\research\architectureSmells\repos\MartinChavez_School-of-CSharp\SchoolOfCSharp\Generics\GenericConstrainsTest.cs,GenericReflection,The length of the statement  "            var disposeSucceded = disposer != null && disposer.Dispose(implementsIDisposable); //You can use Disposer as in the previous method " is 131.
Long Statement,Generics,GenericConstrainsTest,D:\research\architectureSmells\repos\MartinChavez_School-of-CSharp\SchoolOfCSharp\Generics\GenericConstrainsTest.cs,GenericMethods,The length of the statement  "            var disposeSucceded = disposer != null && disposer.Dispose(implementsIDisposable); //You can use Disposer as in the previous method " is 131.
Long Statement,Generics,GenericConstrainsTest,D:\research\architectureSmells\repos\MartinChavez_School-of-CSharp\SchoolOfCSharp\Generics\GenericConstrainsTest.cs,CreateDisposer,The length of the statement  "            return Activator.CreateInstance(implementsIDisposableType.MakeGenericType(type)); //We get the type at runtime via the Type parameter " is 133.
Long Statement,Generics,GenericConstrainsTest,D:\research\architectureSmells\repos\MartinChavez_School-of-CSharp\SchoolOfCSharp\Generics\GenericConstrainsTest.cs,CreateDisposer,The length of the statement  "            return Activator.CreateInstance(implementsIDisposableType.MakeGenericType(typeof(T))) as Disposer<T>;  //We get the type at runtime via the T Type " is 146.
Magic Number,Generics,GenericsTest,D:\research\architectureSmells\repos\MartinChavez_School-of-CSharp\SchoolOfCSharp\Generics\GenericsTest.cs,GenericsPerformanceGains,The following statement contains a magic number: const int iterations = 10000000;
Magic Number,Generics,GenericParametersTest,D:\research\architectureSmells\repos\MartinChavez_School-of-CSharp\SchoolOfCSharp\Generics\GenericParametersTest.cs,GenericParameterClass,The following statement contains a magic number: randomInt.Insert(2);
Magic Number,Generics,GenericParametersTest,D:\research\architectureSmells\repos\MartinChavez_School-of-CSharp\SchoolOfCSharp\Generics\GenericParametersTest.cs,GenericParameterClass,The following statement contains a magic number: randomInt.Insert(3);
Magic Number,Generics,GenericParametersTest,D:\research\architectureSmells\repos\MartinChavez_School-of-CSharp\SchoolOfCSharp\Generics\GenericParametersTest.cs,GenericParameterClass,The following statement contains a magic number: randomInt.Insert(4);
Magic Number,Generics,GenericParametersTest,D:\research\architectureSmells\repos\MartinChavez_School-of-CSharp\SchoolOfCSharp\Generics\GenericParametersTest.cs,GenericParameterClass,The following statement contains a magic number: randomInt.Insert(5);
Magic Number,Generics,GenericParametersTest,D:\research\architectureSmells\repos\MartinChavez_School-of-CSharp\SchoolOfCSharp\Generics\GenericParametersTest.cs,GenericParameterClass,The following statement contains a magic number: Assert.IsTrue(randomInt.Count() < 5);
