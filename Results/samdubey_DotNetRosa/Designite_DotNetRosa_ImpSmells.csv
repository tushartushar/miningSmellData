Implementation smell,Namespace,Class,File,Method,Description
Long Method,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The method has 104 lines of code.
Long Method,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The method has 141 lines of code.
Long Method,org.javarosa.xform.parse,XFormParser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\parse\XFormParser.cs,InitBlock,The method has 277 lines of code.
Long Method,org.javarosa.xform.util,XFormAnswerDataParser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormAnswerDataParser.cs,getAnswerData,The method has 118 lines of code.
Long Method,org.javarosa.xpath.expr,XPathExpression,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathExpression.cs,print,The method has 190 lines of code.
Long Method,org.javarosa.xpath.expr,XPathPathExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathPathExpr.cs,getReference,The method has 109 lines of code.
Long Method,org.javarosa.xpath.parser.ast,ASTNode,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\ast\ASTNode.cs,print,The method has 152 lines of code.
Long Method,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The method has 162 lines of code.
Long Method,org.javarosa.xpath.parser,Token,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Token.cs,ToString,The method has 102 lines of code.
Complex Method,org.javarosa.core.io,BufferedInputStream,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\io\BufferedInputStream.cs,read,Cyclomatic complexity of the method is 12
Complex Method,org.javarosa.core.model,FormIndex,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\FormIndex.cs,compareTo,Cyclomatic complexity of the method is 10
Complex Method,org.javarosa.core.model.condition,Condition,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\condition\Condition.cs,performAction,Cyclomatic complexity of the method is 24
Complex Method,org.javarosa.core.model.condition,Recalculate,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\condition\Recalculate.cs,wrapData,Cyclomatic complexity of the method is 18
Complex Method,org.javarosa.core.model.data,AnswerDataFactory,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\data\AnswerDataFactory.cs,templateByDataType,Cyclomatic complexity of the method is 18
Complex Method,org.javarosa.core.model.instance,DataInstance,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\instance\DataInstance.cs,explodeReference,Cyclomatic complexity of the method is 8
Complex Method,org.javarosa.core.model.instance.utils,CompactInstanceWrapper,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\instance\utils\CompactInstanceWrapper.cs,readTreeElement,Cyclomatic complexity of the method is 11
Complex Method,org.javarosa.core.model.instance.utils,CompactInstanceWrapper,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\instance\utils\CompactInstanceWrapper.cs,classForDataType,Cyclomatic complexity of the method is 15
Complex Method,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDateTime,Cyclomatic complexity of the method is 13
Complex Method,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,Cyclomatic complexity of the method is 19
Complex Method,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,parseTime,Cyclomatic complexity of the method is 8
Complex Method,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,Cyclomatic complexity of the method is 33
Complex Method,org.javarosa.core.model.utils,PreloadUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\PreloadUtils.cs,wrapIndeterminedObject,Cyclomatic complexity of the method is 9
Complex Method,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,Cyclomatic complexity of the method is 12
Complex Method,org.javarosa.core.model.util.restorable,RestoreUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\util\restorable\RestoreUtils.cs,addData,Cyclomatic complexity of the method is 34
Complex Method,org.javarosa.core.model.util.restorable,RestoreUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\util\restorable\RestoreUtils.cs,getDataType,Cyclomatic complexity of the method is 8
Complex Method,org.javarosa.core.services.locale,LocalizationUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\locale\LocalizationUtils.cs,InitBlock,Cyclomatic complexity of the method is 11
Complex Method,org.javarosa.core.services.locale,ResourceFileDataSource,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\locale\ResourceFileDataSource.cs,loadLocaleResource,Cyclomatic complexity of the method is 9
Complex Method,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,update,Cyclomatic complexity of the method is 9
Complex Method,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,profileMemory,Cyclomatic complexity of the method is 9
Complex Method,org.javarosa.core.util.externalizable,ExtUtil,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtUtil.cs,write,Cyclomatic complexity of the method is 13
Complex Method,org.javarosa.core.util.externalizable,ExtWrapMap,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtWrapMap.cs,readExternal,Cyclomatic complexity of the method is 15
Complex Method,org.javarosa.form.api,FormEntryCaption,C:\repos\samdubey_DotNetRosa\DotNetRosa\form\api\FormEntryCaption.cs,getRepeatText,Cyclomatic complexity of the method is 18
Complex Method,org.javarosa.form.api,FormEntryModel,C:\repos\samdubey_DotNetRosa\DotNetRosa\form\api\FormEntryModel.cs,createModelIfNecessary,Cyclomatic complexity of the method is 8
Complex Method,org.javarosa.model.xform,SMSSerializingVisitor,C:\repos\samdubey_DotNetRosa\DotNetRosa\model\xform\SMSSerializingVisitor.cs,serializeNode,Cyclomatic complexity of the method is 8
Complex Method,org.javarosa.model.xform,XFormSerializingVisitor,C:\repos\samdubey_DotNetRosa\DotNetRosa\model\xform\XFormSerializingVisitor.cs,serializeNode,Cyclomatic complexity of the method is 15
Complex Method,org.javarosa.xform.parse,XFormParser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\parse\XFormParser.cs,InitBlock,Cyclomatic complexity of the method is 49
Complex Method,org.javarosa.xform.util,XFormAnswerDataParser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormAnswerDataParser.cs,getAnswerData,Cyclomatic complexity of the method is 52
Complex Method,org.javarosa.xform.util,XFormAnswerDataSerializer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormAnswerDataSerializer.cs,serializeAnswerData,Cyclomatic complexity of the method is 17
Complex Method,org.javarosa.xpath.expr,XPathArithExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathArithExpr.cs,eval,Cyclomatic complexity of the method is 15
Complex Method,org.javarosa.xpath.expr,XPathArithExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathArithExpr.cs,ToString,Cyclomatic complexity of the method is 15
Complex Method,org.javarosa.xpath.expr,XPathCmpExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathCmpExpr.cs,InitBlock,Cyclomatic complexity of the method is 14
Complex Method,org.javarosa.xpath.expr,XPathCmpExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathCmpExpr.cs,eval,Cyclomatic complexity of the method is 12
Complex Method,org.javarosa.xpath.expr,XPathCmpExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathCmpExpr.cs,ToString,Cyclomatic complexity of the method is 12
Complex Method,org.javarosa.xpath.expr,XPathExpression,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathExpression.cs,print,Cyclomatic complexity of the method is 65
Complex Method,org.javarosa.xpath.expr,XPathPathExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathPathExpr.cs,getReference,Cyclomatic complexity of the method is 31
Complex Method,org.javarosa.xpath.expr,XPathPathExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathPathExpr.cs,eval,Cyclomatic complexity of the method is 8
Complex Method,org.javarosa.xpath.expr,XPathPathExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathPathExpr.cs,unpackValue,Cyclomatic complexity of the method is 14
Complex Method,org.javarosa.xpath.expr,XPathPathExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathPathExpr.cs,ToString,Cyclomatic complexity of the method is 11
Complex Method,org.javarosa.xpath.expr,XPathStep,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathStep.cs,axisStr,Cyclomatic complexity of the method is 14
Complex Method,org.javarosa.xpath.expr,XPathStep,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathStep.cs,testStr,Cyclomatic complexity of the method is 8
Complex Method,org.javarosa.xpath.expr,XPathStep,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathStep.cs,Equals,Cyclomatic complexity of the method is 16
Complex Method,org.javarosa.xpath.expr,XPathStep,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathStep.cs,matches,Cyclomatic complexity of the method is 16
Complex Method,org.javarosa.xpath.parser.ast,ASTNode,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\ast\ASTNode.cs,print,Cyclomatic complexity of the method is 72
Complex Method,org.javarosa.xpath.parser.ast,ASTNodeBinaryOp,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\ast\ASTNodeBinaryOp.cs,getBinOpExpr,Cyclomatic complexity of the method is 16
Complex Method,org.javarosa.xpath.parser.ast,ASTNodeLocPath,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\ast\ASTNodeLocPath.cs,build,Cyclomatic complexity of the method is 10
Complex Method,org.javarosa.xpath.parser.ast,ASTNodePathStep,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\ast\ASTNodePathStep.cs,validateAxisName,Cyclomatic complexity of the method is 14
Complex Method,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,Cyclomatic complexity of the method is 38
Complex Method,org.javarosa.xpath.parser,Parser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Parser.cs,parsePathExpr,Cyclomatic complexity of the method is 12
Complex Method,org.javarosa.xpath.parser,Parser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Parser.cs,parseStep,Cyclomatic complexity of the method is 13
Complex Method,org.javarosa.xpath.parser,Token,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Token.cs,ToString,Cyclomatic complexity of the method is 96
Long Parameter List,org.javarosa.core.model.condition,Condition,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\condition\Condition.cs,Condition,The method has 5 parameters.
Long Parameter List,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The method has 6 parameters.
Long Parameter List,org.javarosa.core.model.util.restorable,RestoreUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\util\restorable\RestoreUtils.cs,exportRMS,The method has 5 parameters.
Long Parameter List,org.javarosa.xform.parse,ChildProcessingRule,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\parse\ChildProcessingRule.cs,ChildProcessingRule,The method has 5 parameters.
Long Statement,org.javarosa.core.io,BufferedInputStream,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\io\BufferedInputStream.cs,available,The length of the statement  "	return ((in_Renamed is org.javarosa.core.util.MultiInputStream || in_Renamed is org.javarosa.core.io.BufferedInputStream) ? (int)SupportClass.InvokeMethodAsVirtual (in_Renamed' "available"' new System.Object[] { " is 211.
Long Statement,org.javarosa.core.io,BufferedInputStream,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\io\BufferedInputStream.cs,fillBuffer,The length of the statement  "	count = in_Renamed is org.javarosa.core.io.BufferedInputStream ? ((org.javarosa.core.io.BufferedInputStream)in_Renamed).read (buffer) : SupportClass.ReadInput (in_Renamed' buffer' 0' buffer.Length); " is 198.
Long Statement,org.javarosa.core.io,BufferedInputStream,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\io\BufferedInputStream.cs,skip,The length of the statement  "	long skipped = in_Renamed is org.javarosa.core.io.BufferedInputStream ? ((org.javarosa.core.io.BufferedInputStream)in_Renamed).skip (len) : temp_Int64; " is 151.
Long Statement,org.javarosa.core.io,StreamsUtil,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\io\StreamsUtil.cs,readFromStream,The length of the statement  "			int k = in_Renamed is org.javarosa.core.io.BufferedInputStream ? ((org.javarosa.core.io.BufferedInputStream)in_Renamed).read (data' read' len - read) : SupportClass.ReadInput (in_Renamed' data' read' len - read); " is 212.
Long Statement,org.javarosa.core.log,FlatLogSerializer,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\log\FlatLogSerializer.cs,serializeLog,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Date.toString' was converted to 'System.DateTime.ToString' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDatetoString'" " is 254.
Long Statement,org.javarosa.core.log,LogEntry,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\log\LogEntry.cs,writeExternal,The length of the statement  "	//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.log,WrappedException,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\log\WrappedException.cs,printException,The length of the statement  "		//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Throwable.getMessage' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 221.
Long Statement,org.javarosa.core.log,WrappedException,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\log\WrappedException.cs,printException,The length of the statement  "		//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Class.getName' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 214.
Long Statement,org.javarosa.core.log,WrappedException,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\log\WrappedException.cs,printException,The length of the statement  "		//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Throwable.getMessage' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 221.
Long Statement,org.javarosa.core.model,FormIndex,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\FormIndex.cs,compareTo,The length of the statement  "		//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Class.getName' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 214.
Long Statement,org.javarosa.core.model,QuestionDef,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\QuestionDef.cs,readExternal,The length of the statement  "	choices = ExtUtil.nullIfEmpty ((System.Collections.ArrayList)ExtUtil.read (dis' new ExtWrapList (typeof(SelectChoice))' pf)); " is 125.
Long Statement,org.javarosa.core.model,SelectChoice,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\SelectChoice.cs,ToString,The length of the statement  "	return ((textID != null && (System.Object)textID != (System.Object)"") ? "{" + textID + "}" : "") + (labelInnerText != null ? labelInnerText : "") + " => " + value_Renamed; " is 172.
Long Statement,org.javarosa.core.model.actions,SetValueAction,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\actions\SetValueAction.cs,processAction,The length of the statement  "		throw new System.NullReferenceException ("Target of TreeReference " + qualifiedReference.toString (true) + " could not be resolved!"); " is 134.
Long Statement,org.javarosa.core.model.actions,SetValueAction,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\actions\SetValueAction.cs,processAction,The length of the statement  "	model.setValue (val == null ? null : AnswerDataFactory.templateByDataType (dataType).cast (val.uncast ())' qualifiedReference); " is 127.
Long Statement,org.javarosa.core.model.condition,Recalculate,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\condition\Recalculate.cs,wrapData,The length of the statement  "	if ((val is System.String && ((System.String)val).Length == 0) || (val is System.Double && System.Double.IsNaN (((System.Double)val)))) { " is 137.
Long Statement,org.javarosa.core.model.condition,Recalculate,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\condition\Recalculate.cs,wrapData,The length of the statement  "		//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'" " is 218.
Long Statement,org.javarosa.core.model.condition,Recalculate,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\condition\Recalculate.cs,wrapData,The length of the statement  "		if (Constants.DATATYPE_INTEGER == dataType || (isIntegral && (System.Int32.MaxValue >= l) && (System.Int32.MinValue <= l))) { " is 125.
Long Statement,org.javarosa.core.model.condition,Recalculate,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\condition\Recalculate.cs,wrapData,The length of the statement  "			//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'" " is 218.
Long Statement,org.javarosa.core.model.condition,Recalculate,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\condition\Recalculate.cs,wrapData,The length of the statement  "			//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'" " is 218.
Long Statement,org.javarosa.core.model.condition,Recalculate,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\condition\Recalculate.cs,wrapData,The length of the statement  "			//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.model.condition,Recalculate,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\condition\Recalculate.cs,wrapData,The length of the statement  "			//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.model.condition,Recalculate,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\condition\Recalculate.cs,wrapData,The length of the statement  "			//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.model.condition,Recalculate,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\condition\Recalculate.cs,wrapData,The length of the statement  "		//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Class.getName' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 214.
Long Statement,org.javarosa.core.model.condition.pivot,DateRangeHint,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\condition\pivot\DateRangeHint.cs,castToValue,The length of the statement  "	//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.model.condition.pivot,DecimalRangeHint,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\condition\pivot\DecimalRangeHint.cs,unit,The length of the statement  "	//UPGRADE_TODO: The equivalent in .NET for field 'java.lang.Double.MIN_VALUE' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 216.
Long Statement,org.javarosa.core.model.condition.pivot,IntegerRangeHint,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\condition\pivot\IntegerRangeHint.cs,castToValue,The length of the statement  "	//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'" " is 218.
Long Statement,org.javarosa.core.model.condition.pivot,StringLengthRangeHint,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\condition\pivot\StringLengthRangeHint.cs,castToValue,The length of the statement  "	//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'" " is 218.
Long Statement,org.javarosa.core.model.data,DateData,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\data\DateData.cs,init,The length of the statement  "		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.model.data,DateData,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\data\DateData.cs,writeExternal,The length of the statement  "	//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.model.data,DateTimeData,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\data\DateTimeData.cs,writeExternal,The length of the statement  "	//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.model.data,TimeData,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\data\TimeData.cs,writeExternal,The length of the statement  "	//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.model.data.helper,Selection,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\data\helper\Selection.cs,attachChoice,The length of the statement  "		throw new XPathTypeMismatchException ("value " + xmlValue + " could not be loaded into question " + q.TextID + ".  Check to see if value " + xmlValue + " is a valid option for question " + q.TextID + "."); " is 205.
Long Statement,org.javarosa.core.model.instance.utils,CompactInstanceWrapper,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\instance\utils\CompactInstanceWrapper.cs,readTreeElement,The length of the statement  "		System.Collections.ArrayList childTypes = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10)); " is 124.
Long Statement,org.javarosa.core.model.instance.utils,CompactInstanceWrapper,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\instance\utils\CompactInstanceWrapper.cs,readTreeElement,The length of the statement  "							//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Throwable.getMessage' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 221.
Long Statement,org.javarosa.core.model.instance.utils,CompactInstanceWrapper,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\instance\utils\CompactInstanceWrapper.cs,readTreeElement,The length of the statement  "							//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Throwable.getMessage' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 221.
Long Statement,org.javarosa.core.model.instance.utils,CompactInstanceWrapper,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\instance\utils\CompactInstanceWrapper.cs,readTreeElement,The length of the statement  "							throw new DeserializationException ("Invalid Reference while attemtping to deserialize! Reference: " + r.toString (true) + " | " + ire.Message); " is 144.
Long Statement,org.javarosa.core.model.instance.utils,CompactInstanceWrapper,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\instance\utils\CompactInstanceWrapper.cs,writeTreeElement,The length of the statement  "		System.Collections.ArrayList childTypesHandled = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10)); " is 131.
Long Statement,org.javarosa.core.model.instance.utils,CompactInstanceWrapper,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\instance\utils\CompactInstanceWrapper.cs,compactSelectMulti,The length of the statement  "	System.Collections.ArrayList choices = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10)); " is 121.
Long Statement,org.javarosa.core.model.instance.utils,CompactInstanceWrapper,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\instance\utils\CompactInstanceWrapper.cs,getSelectMulti,The length of the statement  "	System.Collections.ArrayList choices = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10)); " is 121.
Long Statement,org.javarosa.core.model.instance.utils,ModelReferencePayload,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\instance\utils\ModelReferencePayload.cs,memoize,The length of the statement  "			//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Throwable.getMessage' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 221.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getFields,The length of the statement  "	//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getFields,The length of the statement  "	//UPGRADE_TODO: The differences in the format  of parameters for method 'java.util.Calendar.setTime'  may cause compilation errors.  "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1092'" " is 241.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getFields,The length of the statement  "		//UPGRADE_ISSUE: Method 'java.util.Calendar.setTimeZone' was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1000_javautilCalendarsetTimeZone_javautilTimeZone'" " is 229.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getFields,The length of the statement  "		//UPGRADE_ISSUE: Method 'java.util.TimeZone.getTimeZone' was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1000_javautilTimeZonegetTimeZone_javalangString'" " is 227.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getFields,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Calendar.get' was converted to 'SupportClass.CalendarManager.Get' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilCalendarget_int'" " is 264.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getFields,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Calendar.get' was converted to 'SupportClass.CalendarManager.Get' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilCalendarget_int'" " is 264.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getFields,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Calendar.get' was converted to 'SupportClass.CalendarManager.Get' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilCalendarget_int'" " is 264.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getFields,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Calendar.get' was converted to 'SupportClass.CalendarManager.Get' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilCalendarget_int'" " is 264.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getFields,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Calendar.get' was converted to 'SupportClass.CalendarManager.Get' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilCalendarget_int'" " is 264.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getFields,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Calendar.get' was converted to 'SupportClass.CalendarManager.Get' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilCalendarget_int'" " is 264.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getFields,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Calendar.get' was converted to 'SupportClass.CalendarManager.Get' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilCalendarget_int'" " is 264.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getFields,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Calendar.get' was converted to 'SupportClass.CalendarManager.Get' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilCalendarget_int'" " is 264.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getDate,The length of the statement  "		//UPGRADE_ISSUE: Method 'java.util.Calendar.setTimeZone' was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1000_javautilCalendarsetTimeZone_javautilTimeZone'" " is 229.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getDate,The length of the statement  "		//UPGRADE_ISSUE: Method 'java.util.TimeZone.getTimeZone' was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1000_javautilTimeZonegetTimeZone_javalangString'" " is 227.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getDate,The length of the statement  "	//UPGRADE_TODO: The equivalent in .NET for method 'java.util.Calendar.getTime' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 217.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDateTime,The length of the statement  "	//UPGRADE_TODO: The 'System.DateTime' structure does not have an equivalent to NULL. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1291'" " is 193.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDateTime,The length of the statement  "	//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDate,The length of the statement  "	//UPGRADE_TODO: The 'System.DateTime' structure does not have an equivalent to NULL. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1291'" " is 193.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDate,The length of the statement  "	//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatTime,The length of the statement  "	//UPGRADE_TODO: The 'System.DateTime' structure does not have an equivalent to NULL. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1291'" " is 193.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatTime,The length of the statement  "	//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatTimeISO8601,The length of the statement  "	System.String time = intPad (f.hour' 2) + ":" + intPad (f.minute' 2) + ":" + intPad (f.second' 2) + "." + intPad (f.secTicks' 3); " is 129.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatTimeISO8601,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.TimeZone.getOffset' was converted to 'System.TimeZone.GetUtcOffset' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073'" " is 242.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatTimeISO8601,The length of the statement  "	int offset = ((System.TimeZone.CurrentTimeZone.GetUtcOffset (new System.DateTime (f.year' f.month - 1' f.day)).Ticks) / 10000); " is 127.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The length of the statement  "	//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,parseDateTime,The length of the statement  "			//UPGRADE_TODO: The 'System.DateTime' structure does not have an equivalent to NULL. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1291'" " is 193.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,parseDateTime,The length of the statement  "			//UPGRADE_TODO: The 'System.DateTime' structure does not have an equivalent to NULL. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1291'" " is 193.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,parseDate,The length of the statement  "		//UPGRADE_TODO: The 'System.DateTime' structure does not have an equivalent to NULL. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1291'" " is 193.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,parseTime,The length of the statement  "		//UPGRADE_TODO: The 'System.DateTime' structure does not have an equivalent to NULL. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1291'" " is 193.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,parseTime,The length of the statement  "	//UPGRADE_ISSUE: Method 'java.util.TimeZone.getTimeZone' was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1000_javautilTimeZonegetTimeZone_javalangString'" " is 227.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,parseTime,The length of the statement  "	//UPGRADE_TODO: The differences in the format  of parameters for method 'java.util.Calendar.setTime'  may cause compilation errors.  "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1092'" " is 241.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,parseTime,The length of the statement  "	//UPGRADE_TODO: Constructor 'java.util.Date.Date' was converted to 'System.DateTime.DateTime' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDateDate_long'" " is 256.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,parseTime,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Date.getTime' was converted to 'System.DateTime.Ticks' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDategetTime'" " is 249.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,parseTime,The length of the statement  "	SupportClass.CalendarManager.manager.SetDateTime (c' new System.DateTime (DateUtils.getDate (f' "UTC").Ticks + (((60 * timeOffset.hour) + timeOffset.minute) * 60 * 1000))); " is 172.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,parseTime,The length of the statement  "	//UPGRADE_ISSUE: Method 'java.util.Calendar.setTimeZone' was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1000_javautilCalendarsetTimeZone_javautilTimeZone'" " is 229.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,parseTime,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Calendar.get' was converted to 'SupportClass.CalendarManager.Get' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilCalendarget_int'" " is 264.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,parseTime,The length of the statement  "	//UPGRADE_TODO: Field 'java.util.Calendar.HOUR' was converted to 'SupportClass.CalendarManager.HOUR' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilCalendarHOUR_f'" " is 264.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,parseTime,The length of the statement  "	//UPGRADE_TODO: The equivalent in .NET for method 'java.util.Calendar.getTime' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 217.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,parseTime,The length of the statement  "	//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,parseRawTime,The length of the statement  "			//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'" " is 218.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,parseRawTime,The length of the statement  "			//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'" " is 218.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getDate,The length of the statement  "	//UPGRADE_TODO: The 'System.DateTime' structure does not have an equivalent to NULL. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1291'" " is 193.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,roundDate,The length of the statement  "	//UPGRADE_TODO: The 'System.DateTime' structure does not have an equivalent to NULL. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1291'" " is 193.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,roundDate,The length of the statement  "		//UPGRADE_TODO: The 'System.DateTime' structure does not have an equivalent to NULL. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1291'" " is 193.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,roundDate,The length of the statement  "	//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,today,The length of the statement  "	//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,decimalTimeOfLocalDay,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Date.getTime' was converted to 'System.DateTime.Ticks' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDategetTime'" " is 249.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,decimalTimeOfLocalDay,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Calendar.get' was converted to 'SupportClass.CalendarManager.Get' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilCalendarget_int'" " is 264.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,decimalTimeOfLocalDay,The length of the statement  "	//UPGRADE_ISSUE: Field 'java.util.Calendar.ZONE_OFFSET' was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1000_javautilCalendarZONE_OFFSET_f'" " is 213.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,decimalTimeOfLocalDay,The length of the statement  "	//UPGRADE_ISSUE: Field 'java.util.Calendar.DST_OFFSET' was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1000_javautilCalendarDST_OFFSET_f'" " is 211.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,decimalTimeOfLocalDay,The length of the statement  "	long milliOff = (SupportClass.CalendarManager.manager.Get (c' Calendar.ZONE_OFFSET) + SupportClass.CalendarManager.manager.Get (c' Calendar.DST_OFFSET)); " is 153.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,decimalTimeOfLocalDay,The length of the statement  "	//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'" " is 218.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,daysInMonth,The length of the statement  "	//UPGRADE_ISSUE: Field 'java.util.Calendar.APRIL' was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1000_javautilCalendarAPRIL_f'" " is 201.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,daysInMonth,The length of the statement  "	//UPGRADE_ISSUE: Field 'java.util.Calendar.JUNE' was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1000_javautilCalendarJUNE_f'" " is 199.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,daysInMonth,The length of the statement  "	//UPGRADE_ISSUE: Field 'java.util.Calendar.SEPTEMBER' was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1000_javautilCalendarSEPTEMBER_f'" " is 209.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,daysInMonth,The length of the statement  "	//UPGRADE_ISSUE: Field 'java.util.Calendar.NOVEMBER' was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1000_javautilCalendarNOVEMBER_f'" " is 207.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,daysInMonth,The length of the statement  "		//UPGRADE_ISSUE: Field 'java.util.Calendar.FEBRUARY' was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1000_javautilCalendarFEBRUARY_f'" " is 207.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDaysFromToday,The length of the statement  "	//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The length of the statement  "	//UPGRADE_TODO: The 'System.DateTime' structure does not have an equivalent to NULL. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1291'" " is 193.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The length of the statement  "		//UPGRADE_TODO: The differences in the format  of parameters for method 'java.util.Calendar.setTime'  may cause compilation errors.  "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1092'" " is 241.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The length of the statement  "		//UPGRADE_TODO: Method 'java.util.Calendar.get' was converted to 'SupportClass.CalendarManager.Get' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilCalendarget_int'" " is 264.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The length of the statement  "		//UPGRADE_TODO: Constructor 'java.util.Date.Date' was converted to 'System.DateTime.DateTime' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDateDate_long'" " is 256.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The length of the statement  "		//UPGRADE_TODO: Method 'java.util.Date.getTime' was converted to 'System.DateTime.Ticks' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDategetTime'" " is 249.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getMonthsDifference,The length of the statement  "	//UPGRADE_TODO: Constructor 'java.util.Date.Date' was converted to 'System.DateTime.DateTime' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDateDate_long'" " is 256.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getMonthsDifference,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Date.getTime' was converted to 'System.DateTime.Ticks' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDategetTime'" " is 249.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getMonthsDifference,The length of the statement  "	//UPGRADE_TODO: Constructor 'java.util.Date.Date' was converted to 'System.DateTime.DateTime' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDateDate_long'" " is 256.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getMonthsDifference,The length of the statement  "	//UPGRADE_TODO: The differences in the format  of parameters for method 'java.util.Calendar.setTime'  may cause compilation errors.  "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1092'" " is 241.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getMonthsDifference,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Calendar.get' was converted to 'SupportClass.CalendarManager.Get' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilCalendarget_int'" " is 264.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getMonthsDifference,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Calendar.get' was converted to 'SupportClass.CalendarManager.Get' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilCalendarget_int'" " is 264.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getMonthsDifference,The length of the statement  "	//UPGRADE_TODO: The differences in the format  of parameters for method 'java.util.Calendar.setTime'  may cause compilation errors.  "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1092'" " is 241.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getMonthsDifference,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Calendar.get' was converted to 'SupportClass.CalendarManager.Get' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilCalendarget_int'" " is 264.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getMonthsDifference,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Calendar.get' was converted to 'SupportClass.CalendarManager.Get' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilCalendarget_int'" " is 264.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,daysSinceEpoch,The length of the statement  "	//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,fractionalDaysSinceEpoch,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Date.getTime' was converted to 'System.DateTime.Ticks' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDategetTime'" " is 249.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,fractionalDaysSinceEpoch,The length of the statement  "	//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'" " is 218.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,dateAdd,The length of the statement  "	//UPGRADE_TODO: Constructor 'java.util.Date.Date' was converted to 'System.DateTime.DateTime' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDateDate_long'" " is 256.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,dateAdd,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Date.getTime' was converted to 'System.DateTime.Ticks' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDategetTime'" " is 249.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,dateAdd,The length of the statement  "	//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,dateDiff,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Date.getTime' was converted to 'System.DateTime.Ticks' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDategetTime'" " is 249.
Long Statement,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,dateDiff,The length of the statement  "	//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.model.utils,PreloadUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\PreloadUtils.cs,wrapIndeterminedObject,The length of the statement  "		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.model.utils,PreloadUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\PreloadUtils.cs,wrapIndeterminedObject,The length of the statement  "		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.model.utils,PreloadUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\PreloadUtils.cs,wrapIndeterminedObject,The length of the statement  "		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.model.utils,PreloadUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\PreloadUtils.cs,wrapIndeterminedObject,The length of the statement  "		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.model.utils,PreloadUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\PreloadUtils.cs,wrapIndeterminedObject,The length of the statement  "	//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Object.toString' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 216.
Long Statement,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The length of the statement  "	//UPGRADE_TODO: The 'System.DateTime' structure does not have an equivalent to NULL. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1291'" " is 193.
Long Statement,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The length of the statement  "			//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The length of the statement  "	//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.model.util.restorable,RestoreUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\util\restorable\RestoreUtils.cs,addData,The length of the statement  "		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.model.util.restorable,RestoreUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\util\restorable\RestoreUtils.cs,addData,The length of the statement  "		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.model.util.restorable,RestoreUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\util\restorable\RestoreUtils.cs,addData,The length of the statement  "		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.model.util.restorable,RestoreUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\util\restorable\RestoreUtils.cs,addData,The length of the statement  "		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.model.util.restorable,RestoreUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\util\restorable\RestoreUtils.cs,addData,The length of the statement  "		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.model.util.restorable,RestoreUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\util\restorable\RestoreUtils.cs,addData,The length of the statement  "		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.model.util.restorable,RestoreUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\util\restorable\RestoreUtils.cs,getDataType,The length of the statement  "		//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Class.getName' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 214.
Long Statement,org.javarosa.core.model.util.restorable,RestoreUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\util\restorable\RestoreUtils.cs,importRMS,The length of the statement  "			//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Class.getName' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 214.
Long Statement,org.javarosa.core.model.util.restorable,RestoreUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\util\restorable\RestoreUtils.cs,importRMS,The length of the statement  "			//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Throwable.getMessage' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 221.
Long Statement,org.javarosa.core.model.util.restorable,RestoreUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\util\restorable\RestoreUtils.cs,importRMS,The length of the statement  "			throw new System.SystemException ("Error importing RMS during restore! [" + type.FullName + ":" + recID + "]; " + ex.Message); " is 126.
Long Statement,org.javarosa.core.reference,ResourceReference,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\reference\ResourceReference.cs,doesBinaryExist,The length of the statement  "	//UPGRADE_ISSUE: Method 'java.lang.Class.getResourceAsStream' was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1000_javalangClassgetResourceAsStream_javalangString'" " is 237.
Long Statement,org.javarosa.core.reference,ResourceReference,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\reference\ResourceReference.cs,doesBinaryExist,The length of the statement  "	//UPGRADE_ISSUE: Class 'java.lang.System' was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1000_javalangSystem'" " is 184.
Long Statement,org.javarosa.core.services,Logger,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\Logger.cs,logForce,The length of the statement  "			//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.services,Logger,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\Logger.cs,die,The length of the statement  "	//UPGRADE_NOTE: Final was removed from the declaration of 'crashException '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'" " is 185.
Long Statement,org.javarosa.core.services,Logger,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\Logger.cs,die,The length of the statement  "		//UPGRADE_TODO: Method 'java.lang.Thread.sleep' was converted to 'System.Threading.Thread.Sleep' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javalangThreadsleep_long'" " is 262.
Long Statement,org.javarosa.core.services,PropertyManager,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\PropertyManager.cs,setProperty,The length of the statement  "	System.Collections.ArrayList wrapper = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10)); " is 121.
Long Statement,org.javarosa.core.services,PropertyManager,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\PropertyManager.cs,setProperty,The length of the statement  "		//UPGRADE_TODO: Method 'java.util.Enumeration.hasMoreElements' was converted to 'System.Collections.IEnumerator.MoveNext' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationhasMoreElements'" " is 297.
Long Statement,org.javarosa.core.services,PropertyManager,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\PropertyManager.cs,setProperty,The length of the statement  "			//UPGRADE_TODO: Method 'java.util.Enumeration.nextElement' was converted to 'System.Collections.IEnumerator.Current' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationnextElement'" " is 288.
Long Statement,org.javarosa.core.services,PropertyManager,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\PropertyManager.cs,setProperty,The length of the statement  "			System.Console.Out.WriteLine ("Property Manager: Unable to write value (" + SupportClass.CollectionToString (propertyValue) + ") to " + propertyName); " is 150.
Long Statement,org.javarosa.core.services,PropertyManager,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\PropertyManager.cs,checkPropertyAllowed,The length of the statement  "		//UPGRADE_TODO: Method 'java.util.Enumeration.hasMoreElements' was converted to 'System.Collections.IEnumerator.MoveNext' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationhasMoreElements'" " is 297.
Long Statement,org.javarosa.core.services,PropertyManager,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\PropertyManager.cs,checkPropertyAllowed,The length of the statement  "			//UPGRADE_TODO: Method 'java.util.Enumeration.nextElement' was converted to 'System.Collections.IEnumerator.Current' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationnextElement'" " is 288.
Long Statement,org.javarosa.core.services,PropertyManager,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\PropertyManager.cs,checkValueAllowed,The length of the statement  "		//UPGRADE_TODO: Method 'java.util.Enumeration.hasMoreElements' was converted to 'System.Collections.IEnumerator.MoveNext' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationhasMoreElements'" " is 297.
Long Statement,org.javarosa.core.services,PropertyManager,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\PropertyManager.cs,checkValueAllowed,The length of the statement  "			//UPGRADE_TODO: Method 'java.util.Enumeration.nextElement' was converted to 'System.Collections.IEnumerator.Current' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationnextElement'" " is 288.
Long Statement,org.javarosa.core.services,PropertyManager,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\PropertyManager.cs,notifyChanges,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Enumeration.hasMoreElements' was converted to 'System.Collections.IEnumerator.MoveNext' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationhasMoreElements'" " is 297.
Long Statement,org.javarosa.core.services,PropertyManager,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\PropertyManager.cs,notifyChanges,The length of the statement  "		//UPGRADE_TODO: Method 'java.util.Enumeration.nextElement' was converted to 'System.Collections.IEnumerator.Current' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationnextElement'" " is 288.
Long Statement,org.javarosa.core.services,PrototypeManager,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\PrototypeManager.cs,registerPrototype,The length of the statement  "		//UPGRADE_TODO: The differences in the format  of parameters for method 'java.lang.Class.forName'  may cause compilation errors.  "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1092'" " is 238.
Long Statement,org.javarosa.core.services,PrototypeManager,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\PrototypeManager.cs,registerPrototype,The length of the statement  "	//UPGRADE_NOTE: Exception 'java.lang.ClassNotFoundException' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'" " is 235.
Long Statement,org.javarosa.core.services.locale,Localization,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\locale\Localization.cs,checkRep,The length of the statement  "		throw new LocaleTextException ("There are no locales defined for the application. Please make sure to register locale text using the Locale.register() method"); " is 160.
Long Statement,org.javarosa.core.services.locale,LocalizationUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\locale\LocalizationUtils.cs,InitBlock,The length of the statement  "		//UPGRADE_TODO: Method 'java.io.InputStreamReader.read' was converted to 'System.IO.StreamReader.Read' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javaioInputStreamReaderread_char[]_int_int'" " is 286.
Long Statement,org.javarosa.core.services.locale,LocalizationUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\locale\LocalizationUtils.cs,InitBlock,The length of the statement  "			//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'" " is 232.
Long Statement,org.javarosa.core.services.locale,LocalizationUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\locale\LocalizationUtils.cs,InitBlock,The length of the statement  "				//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'" " is 232.
Long Statement,org.javarosa.core.services.locale,ResourceFileDataSource,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\locale\ResourceFileDataSource.cs,readExternal,The length of the statement  "	//UPGRADE_ISSUE: Method 'java.io.DataInputStream.readUTF' was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1000_javaioDataInputStreamreadUTF'" " is 214.
Long Statement,org.javarosa.core.services.locale,ResourceFileDataSource,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\locale\ResourceFileDataSource.cs,writeExternal,The length of the statement  "	//UPGRADE_ISSUE: Method 'java.io.DataOutputStream.writeUTF' was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1000_javaioDataOutputStreamwriteUTF_javalangString'" " is 233.
Long Statement,org.javarosa.core.services.locale,ResourceFileDataSource,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\locale\ResourceFileDataSource.cs,loadLocaleResource,The length of the statement  "	//UPGRADE_ISSUE: Method 'java.lang.Class.getResourceAsStream' was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1000_javalangClassgetResourceAsStream_javalangString'" " is 237.
Long Statement,org.javarosa.core.services.locale,ResourceFileDataSource,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\locale\ResourceFileDataSource.cs,loadLocaleResource,The length of the statement  "	//UPGRADE_ISSUE: Class 'java.lang.System' was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1000_javalangSystem'" " is 184.
Long Statement,org.javarosa.core.services.locale,ResourceFileDataSource,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\locale\ResourceFileDataSource.cs,loadLocaleResource,The length of the statement  "		//UPGRADE_TODO: Constructor 'java.io.InputStreamReader.InputStreamReader' was converted to 'System.IO.StreamReader' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javaioInputStreamReaderInputStreamReader_javaioInputStream_javalangString'" " is 330.
Long Statement,org.javarosa.core.services.locale,ResourceFileDataSource,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\locale\ResourceFileDataSource.cs,loadLocaleResource,The length of the statement  "			//UPGRADE_TODO: Method 'java.io.InputStreamReader.read' was converted to 'System.IO.StreamReader.Read' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javaioInputStreamReaderread_char[]_int_int'" " is 286.
Long Statement,org.javarosa.core.services.locale,ResourceFileDataSource,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\locale\ResourceFileDataSource.cs,loadLocaleResource,The length of the statement  "				//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'" " is 232.
Long Statement,org.javarosa.core.services.locale,ResourceFileDataSource,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\locale\ResourceFileDataSource.cs,loadLocaleResource,The length of the statement  "					//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'" " is 232.
Long Statement,org.javarosa.core.services.locale,ResourceFileDataSource,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\locale\ResourceFileDataSource.cs,loadLocaleResource,The length of the statement  "			//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Throwable.getMessage' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 221.
Long Statement,org.javarosa.core.services.locale,ResourceFileDataSource,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\locale\ResourceFileDataSource.cs,loadLocaleResource,The length of the statement  "			System.Console.Out.WriteLine ("Input Stream for resource file " + resourceURI + " failed to close. This will eat up your memory! Fix Problem! [" + e.Message + "]"); " is 164.
Long Statement,org.javarosa.core.services.properties,JavaRosaPropertyRules,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\properties\JavaRosaPropertyRules.cs,allowableValues,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.HashMap.get' was converted to 'System.Collections.Hashtable.Item' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilHashMapget_javalangObject'" " is 274.
Long Statement,org.javarosa.core.services.properties,JavaRosaPropertyRules,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\properties\JavaRosaPropertyRules.cs,checkValueAllowed,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.HashMap.get' was converted to 'System.Collections.Hashtable.Item' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilHashMapget_javalangObject'" " is 274.
Long Statement,org.javarosa.core.services.properties,JavaRosaPropertyRules,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\properties\JavaRosaPropertyRules.cs,checkValueAllowed,The length of the statement  "			return ((System.Collections.ArrayList)PropertyManager._ ().getProperty ((System.String)prop [0])).Contains (potentialValue); " is 124.
Long Statement,org.javarosa.core.services.properties,JavaRosaPropertyRules,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\properties\JavaRosaPropertyRules.cs,checkValueAllowed,The length of the statement  "			//UPGRADE_TODO: Method 'java.util.HashMap.get' was converted to 'System.Collections.Hashtable.Item' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilHashMapget_javalangObject'" " is 274.
Long Statement,org.javarosa.core.services.properties,JavaRosaPropertyRules,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\properties\JavaRosaPropertyRules.cs,allowableProperties,The length of the statement  "	System.Collections.ArrayList propList = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10)); " is 122.
Long Statement,org.javarosa.core.services.properties,JavaRosaPropertyRules,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\properties\JavaRosaPropertyRules.cs,allowableProperties,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.HashMap.keySet' was converted to 'SupportClass.HashSetSupport' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilHashMapkeySet'" " is 259.
Long Statement,org.javarosa.core.services.properties,JavaRosaPropertyRules,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\properties\JavaRosaPropertyRules.cs,allowableProperties,The length of the statement  "	System.Collections.IEnumerator iter = new System.Collections.ArrayList (new SupportClass.HashSetSupport (rules.Keys)).GetEnumerator (); " is 135.
Long Statement,org.javarosa.core.services.properties,JavaRosaPropertyRules,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\properties\JavaRosaPropertyRules.cs,allowableProperties,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Enumeration.hasMoreElements' was converted to 'System.Collections.IEnumerator.MoveNext' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationhasMoreElements'" " is 297.
Long Statement,org.javarosa.core.services.properties,JavaRosaPropertyRules,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\properties\JavaRosaPropertyRules.cs,allowableProperties,The length of the statement  "		//UPGRADE_TODO: Method 'java.util.Enumeration.nextElement' was converted to 'System.Collections.IEnumerator.Current' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationnextElement'" " is 288.
Long Statement,org.javarosa.core.services.properties,JavaRosaPropertyRules,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\properties\JavaRosaPropertyRules.cs,checkPropertyAllowed,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.HashMap.keySet' was converted to 'SupportClass.HashSetSupport' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilHashMapkeySet'" " is 259.
Long Statement,org.javarosa.core.services.properties,JavaRosaPropertyRules,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\properties\JavaRosaPropertyRules.cs,checkPropertyAllowed,The length of the statement  "	System.Collections.IEnumerator iter = new System.Collections.ArrayList (new SupportClass.HashSetSupport (rules.Keys)).GetEnumerator (); " is 135.
Long Statement,org.javarosa.core.services.properties,JavaRosaPropertyRules,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\properties\JavaRosaPropertyRules.cs,checkPropertyAllowed,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Enumeration.hasMoreElements' was converted to 'System.Collections.IEnumerator.MoveNext' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationhasMoreElements'" " is 297.
Long Statement,org.javarosa.core.services.properties,JavaRosaPropertyRules,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\properties\JavaRosaPropertyRules.cs,checkPropertyAllowed,The length of the statement  "		//UPGRADE_TODO: Method 'java.util.Enumeration.nextElement' was converted to 'System.Collections.IEnumerator.Current' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationnextElement'" " is 288.
Long Statement,org.javarosa.core.services.properties,Property,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\properties\Property.cs,readExternal,The length of the statement  "		System.String packedvalue = fullString.Substring (fullString.IndexOf ("'") + 1' (fullString.Length) - (fullString.IndexOf ("'") + 1)); " is 134.
Long Statement,org.javarosa.core.services.properties,Property,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\properties\Property.cs,readExternal,The length of the statement  "	//UPGRADE_TODO: Method 'java.io.FilterInputStream.close' was converted to 'System.IO.BinaryReader.Close' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javaioFilterInputStreamclose'" " is 274.
Long Statement,org.javarosa.core.services.properties,Property,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\properties\Property.cs,writeExternal,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Enumeration.hasMoreElements' was converted to 'System.Collections.IEnumerator.MoveNext' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationhasMoreElements'" " is 297.
Long Statement,org.javarosa.core.services.properties,Property,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\properties\Property.cs,writeExternal,The length of the statement  "		//UPGRADE_TODO: Method 'java.util.Enumeration.nextElement' was converted to 'System.Collections.IEnumerator.Current' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationnextElement'" " is 288.
Long Statement,org.javarosa.core.services.properties,Property,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\properties\Property.cs,getMetaData,The length of the statement  "	//UPGRADE_TODO: Class 'java.util.HashMap' was converted to 'System.Collections.Hashtable' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilHashMap'" " is 246.
Long Statement,org.javarosa.core.services.storage,StorageManager,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\storage\StorageManager.cs,setStorageFactory,The length of the statement  "			Logger.die ("A Storage Factory had already been set when storage factory " + fact.GetType ().FullName + " attempted to become the only storage factory"' new System.SystemException ("Duplicate Storage Factory set")); " is 215.
Long Statement,org.javarosa.core.services.storage,StorageManager,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\storage\StorageManager.cs,registerStorage,The length of the statement  "		throw new System.SystemException ("No storage factory has been set; I don't know what kind of storage utility to create. Either set a storage factory' or register your StorageUtilitys directly."); " is 196.
Long Statement,org.javarosa.core.services.storage,StorageManager,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\storage\StorageManager.cs,getStorage,The length of the statement  "		throw new System.SystemException ("No storage utility has been registered to handle \"" + key + "\"; you must register one first with StorageManager.registerStorage()"); " is 169.
Long Statement,org.javarosa.core.services.storage,WrappingStorageUtility,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\storage\WrappingStorageUtility.cs,getRecordForValue,The length of the statement  "	return ((WrappingStorageUtility.SerializationWrapper)indexedStorage ().getRecordForValue (fieldName' value_Renamed)).Data; " is 122.
Long Statement,org.javarosa.core.services.storage,WrappingStorageUtility,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\storage\WrappingStorageUtility.cs,indexedStorage,The length of the statement  "		throw new System.SystemException ("WrappingStorageUtility's factory is not of an indexed type' but had indexed operations requested. Please implement storage " + storage.getClass ().getName () + " as indexed storage"); " is 218.
Long Statement,org.javarosa.core.services.storage.util,DummyStorageIterator,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\storage\util\DummyStorageIterator.cs,InitBlock,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Enumeration.hasMoreElements' was converted to 'System.Collections.IEnumerator.MoveNext' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationhasMoreElements'" " is 297.
Long Statement,org.javarosa.core.services.storage.util,DummyStorageIterator,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\storage\util\DummyStorageIterator.cs,InitBlock,The length of the statement  "		//UPGRADE_TODO: Method 'java.util.Enumeration.nextElement' was converted to 'System.Collections.IEnumerator.Current' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationnextElement'" " is 288.
Long Statement,org.javarosa.core.util,DAG,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\DAG.cs,InitBlock,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Enumeration.hasMoreElements' was converted to 'System.Collections.IEnumerator.MoveNext' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationhasMoreElements'" " is 297.
Long Statement,org.javarosa.core.util,DAG,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\DAG.cs,InitBlock,The length of the statement  "		//UPGRADE_TODO: Method 'java.util.Enumeration.nextElement' was converted to 'System.Collections.IEnumerator.Current' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationnextElement'" " is 288.
Long Statement,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The length of the statement  "	out_Renamed [0] = (buffer [shift] & 0xff) | ((buffer [shift + 1] & 0xff) << 8) | ((buffer [shift + 2] & 0xff) << 16) | (buffer [shift + 3] << 24); " is 146.
Long Statement,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The length of the statement  "	out_Renamed [1] = (buffer [shift + 4] & 0xff) | ((buffer [shift + 5] & 0xff) << 8) | ((buffer [shift + 6] & 0xff) << 16) | (buffer [shift + 7] << 24); " is 150.
Long Statement,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The length of the statement  "	out_Renamed [2] = (buffer [shift + 8] & 0xff) | ((buffer [shift + 9] & 0xff) << 8) | ((buffer [shift + 10] & 0xff) << 16) | (buffer [shift + 11] << 24); " is 152.
Long Statement,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The length of the statement  "	out_Renamed [3] = (buffer [shift + 12] & 0xff) | ((buffer [shift + 13] & 0xff) << 8) | ((buffer [shift + 14] & 0xff) << 16) | (buffer [shift + 15] << 24); " is 154.
Long Statement,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The length of the statement  "	out_Renamed [4] = (buffer [shift + 16] & 0xff) | ((buffer [shift + 17] & 0xff) << 8) | ((buffer [shift + 18] & 0xff) << 16) | (buffer [shift + 19] << 24); " is 154.
Long Statement,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The length of the statement  "	out_Renamed [5] = (buffer [shift + 20] & 0xff) | ((buffer [shift + 21] & 0xff) << 8) | ((buffer [shift + 22] & 0xff) << 16) | (buffer [shift + 23] << 24); " is 154.
Long Statement,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The length of the statement  "	out_Renamed [6] = (buffer [shift + 24] & 0xff) | ((buffer [shift + 25] & 0xff) << 8) | ((buffer [shift + 26] & 0xff) << 16) | (buffer [shift + 27] << 24); " is 154.
Long Statement,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The length of the statement  "	out_Renamed [7] = (buffer [shift + 28] & 0xff) | ((buffer [shift + 29] & 0xff) << 8) | ((buffer [shift + 30] & 0xff) << 16) | (buffer [shift + 31] << 24); " is 154.
Long Statement,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The length of the statement  "	out_Renamed [8] = (buffer [shift + 32] & 0xff) | ((buffer [shift + 33] & 0xff) << 8) | ((buffer [shift + 34] & 0xff) << 16) | (buffer [shift + 35] << 24); " is 154.
Long Statement,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The length of the statement  "	out_Renamed [9] = (buffer [shift + 36] & 0xff) | ((buffer [shift + 37] & 0xff) << 8) | ((buffer [shift + 38] & 0xff) << 16) | (buffer [shift + 39] << 24); " is 154.
Long Statement,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The length of the statement  "	out_Renamed [10] = (buffer [shift + 40] & 0xff) | ((buffer [shift + 41] & 0xff) << 8) | ((buffer [shift + 42] & 0xff) << 16) | (buffer [shift + 43] << 24); " is 155.
Long Statement,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The length of the statement  "	out_Renamed [11] = (buffer [shift + 44] & 0xff) | ((buffer [shift + 45] & 0xff) << 8) | ((buffer [shift + 46] & 0xff) << 16) | (buffer [shift + 47] << 24); " is 155.
Long Statement,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The length of the statement  "	out_Renamed [12] = (buffer [shift + 48] & 0xff) | ((buffer [shift + 49] & 0xff) << 8) | ((buffer [shift + 50] & 0xff) << 16) | (buffer [shift + 51] << 24); " is 155.
Long Statement,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The length of the statement  "	out_Renamed [13] = (buffer [shift + 52] & 0xff) | ((buffer [shift + 53] & 0xff) << 8) | ((buffer [shift + 54] & 0xff) << 16) | (buffer [shift + 55] << 24); " is 155.
Long Statement,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The length of the statement  "	out_Renamed [14] = (buffer [shift + 56] & 0xff) | ((buffer [shift + 57] & 0xff) << 8) | ((buffer [shift + 58] & 0xff) << 16) | (buffer [shift + 59] << 24); " is 155.
Long Statement,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The length of the statement  "	out_Renamed [15] = (buffer [shift + 60] & 0xff) | ((buffer [shift + 61] & 0xff) << 8) | ((buffer [shift + 62] & 0xff) << 16) | (buffer [shift + 63] << 24); " is 155.
Long Statement,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,printMemoryTest,The length of the statement  "	//UPGRADE_ISSUE: Method 'java.lang.Runtime.freeMemory' was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1000_javalangRuntimefreeMemory'" " is 208.
Long Statement,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,printMemoryTest,The length of the statement  "	//UPGRADE_ISSUE: Method 'java.lang.Runtime.totalMemory' was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1000_javalangRuntimetotalMemory'" " is 210.
Long Statement,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,printMemoryTest,The length of the statement  "	//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'" " is 218.
Long Statement,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,printMemoryTest,The length of the statement  "	//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'" " is 218.
Long Statement,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,printMemoryTest,The length of the statement  "			//UPGRADE_TODO: Method 'java.lang.Thread.sleep' was converted to 'System.Threading.Thread.Sleep' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javalangThreadsleep_long'" " is 262.
Long Statement,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,profileMemory,The length of the statement  "	//UPGRADE_ISSUE: Method 'java.lang.Runtime.freeMemory' was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1000_javalangRuntimefreeMemory'" " is 208.
Long Statement,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,profileMemory,The length of the statement  "		System.Console.Out.WriteLine ("Acquired memory profile for " + memoryAccountedFor + " of the " + memory + " available bytes' with " + currentCount + " traces"); " is 160.
Long Statement,org.javarosa.core.util,MultiInputStream,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MultiInputStream.cs,Close,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Enumeration.hasMoreElements' was converted to 'System.Collections.IEnumerator.MoveNext' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationhasMoreElements'" " is 297.
Long Statement,org.javarosa.core.util,MultiInputStream,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MultiInputStream.cs,Close,The length of the statement  "		//UPGRADE_TODO: Method 'java.util.Enumeration.nextElement' was converted to 'System.Collections.IEnumerator.Current' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationnextElement'" " is 288.
Long Statement,org.javarosa.core.util,OrderedMap,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\OrderedMap.cs,LinkedHashMap,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Enumeration.hasMoreElements' was converted to 'System.Collections.IEnumerator.MoveNext' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationhasMoreElements'" " is 297.
Long Statement,org.javarosa.core.util,OrderedMap,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\OrderedMap.cs,LinkedHashMap,The length of the statement  "		//UPGRADE_TODO: Method 'java.util.Enumeration.nextElement' was converted to 'System.Collections.IEnumerator.Current' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationnextElement'" " is 288.
Long Statement,org.javarosa.core.util,OrderedMap,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\OrderedMap.cs,LinkedHashMap,The length of the statement  "		//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Object.toString' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 216.
Long Statement,org.javarosa.core.util,OrderedMap,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\OrderedMap.cs,LinkedHashMap,The length of the statement  "		//UPGRADE_TODO: Method 'java.util.Enumeration.hasMoreElements' was converted to 'System.Collections.IEnumerator.MoveNext' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationhasMoreElements'" " is 297.
Long Statement,org.javarosa.core.util,PrefixTreeNode,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\PrefixTreeNode.cs,InitBlock,The length of the statement  "		//UPGRADE_TODO: Method 'java.util.Enumeration.hasMoreElements' was converted to 'System.Collections.IEnumerator.MoveNext' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationhasMoreElements'" " is 297.
Long Statement,org.javarosa.core.util,PrefixTreeNode,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\PrefixTreeNode.cs,InitBlock,The length of the statement  "			//UPGRADE_TODO: Method 'java.util.Enumeration.nextElement' was converted to 'System.Collections.IEnumerator.Current' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationnextElement'" " is 288.
Long Statement,org.javarosa.core.util,PrefixTreeNode,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\PrefixTreeNode.cs,Equals,The length of the statement  "	return (o is PrefixTreeNode ? prefix == ((PrefixTreeNode)o).prefix || ArrayUtilities.arraysEqual (prefix' 0' ((PrefixTreeNode)o).prefix' 0) : false); " is 149.
Long Statement,org.javarosa.core.util,PrefixTreeNode,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\PrefixTreeNode.cs,ToString,The length of the statement  "		//UPGRADE_TODO: Method 'java.util.Enumeration.hasMoreElements' was converted to 'System.Collections.IEnumerator.MoveNext' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationhasMoreElements'" " is 297.
Long Statement,org.javarosa.core.util,PrefixTreeNode,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\PrefixTreeNode.cs,ToString,The length of the statement  "			//UPGRADE_TODO: Method 'java.util.Enumeration.nextElement' was converted to 'System.Collections.IEnumerator.Current' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationnextElement'" " is 288.
Long Statement,org.javarosa.core.util,PrefixTreeNode,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\PrefixTreeNode.cs,seal,The length of the statement  "		//UPGRADE_TODO: Method 'java.util.Enumeration.hasMoreElements' was converted to 'System.Collections.IEnumerator.MoveNext' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationhasMoreElements'" " is 297.
Long Statement,org.javarosa.core.util,PrefixTreeNode,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\PrefixTreeNode.cs,seal,The length of the statement  "			//UPGRADE_TODO: Method 'java.util.Enumeration.nextElement' was converted to 'System.Collections.IEnumerator.Current' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationnextElement'" " is 288.
Long Statement,org.javarosa.core.util,PropertyUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\PropertyUtils.cs,genUUID,The length of the statement  "	return randHex (8) + "-" + randHex (4) + "-4" + randHex (3) + "-" + System.Convert.ToString (8 + MathUtils.Rand.Next (4)' 16) + randHex (3) + "-" + randHex (12); " is 161.
Long Statement,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The length of the statement  "			int t = rol (a' 5) + e + w [j] + ((j < 20) ? 1518500249 + ((b & c) | ((~b) & d)) : ((j < 40) ? 1859775393 + (b ^ c ^ d) : ((j < 60) ? -1894007588 + ((b & c) | (b & d) | (c & d)) : -899497514 + (b ^ c ^ d)))); " is 208.
Long Statement,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The length of the statement  "	sbyte[] base64 = SupportClass.ToSByteArray (SupportClass.ToByteArray ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")); " is 139.
Long Statement,org.javarosa.core.util,StreamsUtil,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\StreamsUtil.cs,readFromStream,The length of the statement  "			int k = in_Renamed is org.javarosa.core.io.BufferedInputStream ? ((org.javarosa.core.io.BufferedInputStream)in_Renamed).read (data' read' len - read) : SupportClass.ReadInput (in_Renamed' data' read' len - read); " is 212.
Long Statement,org.javarosa.core.util.externalizable,ExtUtil,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtUtil.cs,serialize,The length of the statement  "		//UPGRADE_TODO: Class 'java.io.DataOutputStream' was converted to 'System.IO.BinaryWriter' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javaioDataOutputStream'" " is 254.
Long Statement,org.javarosa.core.util.externalizable,ExtUtil,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtUtil.cs,write,The length of the statement  "		//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Float.floatValue' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 217.
Long Statement,org.javarosa.core.util.externalizable,ExtUtil,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtUtil.cs,write,The length of the statement  "		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.core.util.externalizable,ExtUtil,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtUtil.cs,write,The length of the statement  "		//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Class.getName' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 214.
Long Statement,org.javarosa.core.util.externalizable,ExtUtil,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtUtil.cs,writeString,The length of the statement  "	//UPGRADE_ISSUE: Method 'java.io.DataOutputStream.writeUTF' was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1000_javaioDataOutputStreamwriteUTF_javalangString'" " is 233.
Long Statement,org.javarosa.core.util.externalizable,ExtUtil,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtUtil.cs,writeDate,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Date.getTime' was converted to 'System.DateTime.Ticks' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDategetTime'" " is 249.
Long Statement,org.javarosa.core.util.externalizable,ExtWrapMap,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtWrapMap.cs,clone,The length of the statement  "	//UPGRADE_TODO: Class 'java.util.HashMap' was converted to 'System.Collections.Hashtable' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilHashMap'" " is 246.
Long Statement,org.javarosa.core.util.externalizable,ExtWrapMap,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtWrapMap.cs,readExternal,The length of the statement  "			//UPGRADE_TODO: Class 'java.util.HashMap' was converted to 'System.Collections.Hashtable' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilHashMap'" " is 246.
Long Statement,org.javarosa.core.util.externalizable,ExtWrapMap,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtWrapMap.cs,readExternal,The length of the statement  "			//UPGRADE_TODO: Class 'java.util.HashMap' was converted to 'System.Collections.Hashtable' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilHashMap'" " is 246.
Long Statement,org.javarosa.core.util.externalizable,ExtWrapMapPoly,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtWrapMapPoly.cs,clone,The length of the statement  "	//UPGRADE_TODO: Class 'java.util.HashMap' was converted to 'System.Collections.Hashtable' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilHashMap'" " is 246.
Long Statement,org.javarosa.core.util.externalizable,ExtWrapMapPoly,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtWrapMapPoly.cs,readExternal,The length of the statement  "	//UPGRADE_TODO: Class 'java.util.HashMap' was converted to 'System.Collections.Hashtable' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilHashMap'" " is 246.
Long Statement,org.javarosa.core.util.externalizable,PrototypeFactory,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\PrototypeFactory.cs,lazyInit,The length of the statement  "				//UPGRADE_TODO: The differences in the format  of parameters for method 'java.lang.Class.forName'  may cause compilation errors.  "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1092'" " is 238.
Long Statement,org.javarosa.core.util.externalizable,PrototypeFactory,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\PrototypeFactory.cs,lazyInit,The length of the statement  "			//UPGRADE_NOTE: Exception 'java.lang.ClassNotFoundException' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'" " is 235.
Long Statement,org.javarosa.core.util.externalizable,PrototypeFactory,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\PrototypeFactory.cs,addClass,The length of the statement  "		//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Class.getName' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 214.
Long Statement,org.javarosa.core.util.externalizable,PrototypeFactory,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\PrototypeFactory.cs,addClass,The length of the statement  "		//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Class.getName' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 214.
Long Statement,org.javarosa.core.util.externalizable,PrototypeFactory,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\PrototypeFactory.cs,getInstance,The length of the statement  "		//UPGRADE_TODO: Method 'java.lang.Class.newInstance' was converted to 'System.Activator.CreateInstance' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javalangClassnewInstance'" " is 269.
Long Statement,org.javarosa.core.util.externalizable,PrototypeFactory,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\PrototypeFactory.cs,getInstance,The length of the statement  "		//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Class.getName' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 214.
Long Statement,org.javarosa.core.util.externalizable,PrototypeFactory,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\PrototypeFactory.cs,getInstance,The length of the statement  "	//UPGRADE_NOTE: Exception 'java.lang.InstantiationException' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'" " is 235.
Long Statement,org.javarosa.core.util.externalizable,PrototypeFactory,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\PrototypeFactory.cs,getInstance,The length of the statement  "		//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Class.getName' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 214.
Long Statement,org.javarosa.core.util.externalizable,PrototypeFactory,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\PrototypeFactory.cs,getClassHash,The length of the statement  "	//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Class.getName' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 214.
Long Statement,org.javarosa.core.util.externalizable,PrototypeFactory,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\PrototypeFactory.cs,getClassHash,The length of the statement  "		//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Class.getName' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 214.
Long Statement,org.javarosa.core.util.externalizable,PrototypeFactoryDeprecated,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\PrototypeFactoryDeprecated.cs,getNewInstance,The length of the statement  "		//UPGRADE_TODO: Method 'java.lang.Class.newInstance' was converted to 'System.Activator.CreateInstance' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javalangClassnewInstance'" " is 269.
Long Statement,org.javarosa.core.util.externalizable,PrototypeFactoryDeprecated,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\PrototypeFactoryDeprecated.cs,getNewInstance,The length of the statement  "	//UPGRADE_NOTE: Exception 'java.lang.InstantiationException' was converted to 'System.Exception' which has different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'" " is 235.
Long Statement,org.javarosa.form.api,FormEntryController,C:\repos\samdubey_DotNetRosa\DotNetRosa\form\api\FormEntryController.cs,answerQuestion,The length of the statement  "		throw new System.SystemException ("Itemsets do not currently evaluate constraints. Your constraint will not work' please remove it before proceeding."); " is 152.
Long Statement,org.javarosa.form.api,FormEntryController,C:\repos\samdubey_DotNetRosa\DotNetRosa\form\api\FormEntryController.cs,answerQuestion,The length of the statement  "			//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Throwable.getMessage' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 221.
Long Statement,org.javarosa.form.api,FormEntryController,C:\repos\samdubey_DotNetRosa\DotNetRosa\form\api\FormEntryController.cs,newRepeat,The length of the statement  "		//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Throwable.getMessage' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 221.
Long Statement,org.javarosa.form.api,FormEntryModel,C:\repos\samdubey_DotNetRosa\DotNetRosa\form\api\FormEntryModel.cs,getEvent,The length of the statement  "			if (repeatStructure != REPEAT_STRUCTURE_NON_LINEAR && form.MainInstance.resolveReference (form.getChildInstanceRef (index)) == null) { " is 134.
Long Statement,org.javarosa.form.api,FormEntryModel,C:\repos\samdubey_DotNetRosa\DotNetRosa\form\api\FormEntryModel.cs,getEvent,The length of the statement  "			else if (repeatStructure == REPEAT_STRUCTURE_NON_LINEAR && index.ElementMultiplicity == TreeReference.INDEX_REPEAT_JUNCTURE) { " is 126.
Long Statement,org.javarosa.form.api,FormEntryModel,C:\repos\samdubey_DotNetRosa\DotNetRosa\form\api\FormEntryModel.cs,isIndexReadonly,The length of the statement  "	bool isAskNewRepeat = (getEvent (index) == FormEntryController.EVENT_PROMPT_NEW_REPEAT || getEvent (index) == FormEntryController.EVENT_REPEAT_JUNCTURE); " is 153.
Long Statement,org.javarosa.form.api,FormEntryModel,C:\repos\samdubey_DotNetRosa\DotNetRosa\form\api\FormEntryModel.cs,createModelIfNecessary,The length of the statement  "								//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Throwable.getMessage' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 221.
Long Statement,org.javarosa.form.api,FormEntryModel,C:\repos\samdubey_DotNetRosa\DotNetRosa\form\api\FormEntryModel.cs,isIndexCompoundContainer,The length of the statement  "	return getEvent (index) == FormEntryController.EVENT_GROUP && caption.AppearanceHint != null && caption.AppearanceHint.ToLower ().Equals ("full"); " is 146.
Long Statement,org.javarosa.model.xform,SMSSerializingVisitor,C:\repos\samdubey_DotNetRosa\DotNetRosa\model\xform\SMSSerializingVisitor.cs,serializeInstance,The length of the statement  "		//UPGRADE_TODO: Method 'java.lang.String.getBytes' was converted to 'System.Text.Encoding.GetEncoding(string).GetBytes(string)' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javalangStringgetBytes_javalangString'" " is 306.
Long Statement,org.javarosa.model.xform,SMSSerializingVisitor,C:\repos\samdubey_DotNetRosa\DotNetRosa\model\xform\SMSSerializingVisitor.cs,createSerializedPayload,The length of the statement  "		//UPGRADE_TODO: Method 'java.lang.String.getBytes' was converted to 'System.Text.Encoding.GetEncoding(string).GetBytes(string)' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javalangStringgetBytes_javalangString'" " is 306.
Long Statement,org.javarosa.model.xform,SMSSerializingVisitor,C:\repos\samdubey_DotNetRosa\DotNetRosa\model\xform\SMSSerializingVisitor.cs,createSerializedPayload,The length of the statement  "		return new ByteArrayPayload (form' null' org.javarosa.core.services.transport.payload.IDataPayload_Fields.PAYLOAD_TYPE_SMS); " is 124.
Long Statement,org.javarosa.model.xform,SMSSerializingVisitor,C:\repos\samdubey_DotNetRosa\DotNetRosa\model\xform\SMSSerializingVisitor.cs,serializeNode,The length of the statement  "			//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Object.toString' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 216.
Long Statement,org.javarosa.model.xform,SMSSerializingVisitor,C:\repos\samdubey_DotNetRosa\DotNetRosa\model\xform\SMSSerializingVisitor.cs,serializeNode,The length of the statement  "			throw new System.SystemException ("Can't handle serialized output for" + instanceNode.Value.ToString () + "' " + serializedAnswer); " is 131.
Long Statement,org.javarosa.model.xform,SMSSerializingVisitor,C:\repos\samdubey_DotNetRosa\DotNetRosa\model\xform\SMSSerializingVisitor.cs,serializeNode,The length of the statement  "			//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Object.toString' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 216.
Long Statement,org.javarosa.model.xform,SMSSerializingVisitor,C:\repos\samdubey_DotNetRosa\DotNetRosa\model\xform\SMSSerializingVisitor.cs,serializeNode,The length of the statement  "			throw new System.SystemException ("Can't handle serialized output for" + instanceNode.Value.ToString () + "' " + serializedAnswer); " is 131.
Long Statement,org.javarosa.model.xform,XFormSerializingVisitor,C:\repos\samdubey_DotNetRosa\DotNetRosa\model\xform\XFormSerializingVisitor.cs,createSerializedPayload,The length of the statement  "			return new ByteArrayPayload (form' null' org.javarosa.core.services.transport.payload.IDataPayload_Fields.PAYLOAD_TYPE_XML); " is 124.
Long Statement,org.javarosa.model.xform,XFormSerializingVisitor,C:\repos\samdubey_DotNetRosa\DotNetRosa\model\xform\XFormSerializingVisitor.cs,createSerializedPayload,The length of the statement  "		payload.addPayload (new ByteArrayPayload (form' "xml_submission_file"' org.javarosa.core.services.transport.payload.IDataPayload_Fields.PAYLOAD_TYPE_XML)); " is 155.
Long Statement,org.javarosa.model.xform,XFormSerializingVisitor,C:\repos\samdubey_DotNetRosa\DotNetRosa\model\xform\XFormSerializingVisitor.cs,createSerializedPayload,The length of the statement  "		//UPGRADE_TODO: Method 'java.util.Enumeration.hasMoreElements' was converted to 'System.Collections.IEnumerator.MoveNext' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationhasMoreElements'" " is 297.
Long Statement,org.javarosa.model.xform,XFormSerializingVisitor,C:\repos\samdubey_DotNetRosa\DotNetRosa\model\xform\XFormSerializingVisitor.cs,createSerializedPayload,The length of the statement  "			//UPGRADE_TODO: Method 'java.util.Enumeration.nextElement' was converted to 'System.Collections.IEnumerator.Current' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationnextElement'" " is 288.
Long Statement,org.javarosa.model.xform,XFormSerializingVisitor,C:\repos\samdubey_DotNetRosa\DotNetRosa\model\xform\XFormSerializingVisitor.cs,serializeNode,The length of the statement  "			//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Object.toString' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 216.
Long Statement,org.javarosa.model.xform,XFormSerializingVisitor,C:\repos\samdubey_DotNetRosa\DotNetRosa\model\xform\XFormSerializingVisitor.cs,serializeNode,The length of the statement  "			throw new System.SystemException ("Can't handle serialized output for" + instanceNode.Value.ToString () + "' " + serializedAnswer); " is 131.
Long Statement,org.javarosa.model.xform,XFormSerializingVisitor,C:\repos\samdubey_DotNetRosa\DotNetRosa\model\xform\XFormSerializingVisitor.cs,serializeNode,The length of the statement  "		System.Collections.ArrayList childNames = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10)); " is 124.
Long Statement,org.javarosa.model.xform,XPathReference,C:\repos\samdubey_DotNetRosa\DotNetRosa\model\xform\XPathReference.cs,getPathExpr,The length of the statement  "			//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Throwable.getMessage' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 221.
Long Statement,org.javarosa.model.xform,XPathReference,C:\repos\samdubey_DotNetRosa\DotNetRosa\model\xform\XPathReference.cs,getPathExpr,The length of the statement  "			//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Throwable.getMessage' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 221.
Long Statement,org.javarosa.model.xform,XPathReference,C:\repos\samdubey_DotNetRosa\DotNetRosa\model\xform\XPathReference.cs,getPathExpr,The length of the statement  "			throw new XPathException ("Parse error in XPath path: [" + nodeset + "]." + (xse.Message == null ? "" : "\n" + xse.Message)); " is 125.
Long Statement,org.javarosa.xform.parse,XFormParser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\parse\XFormParser.cs,InitBlock,The length of the statement  "			reporter.warning (XFormParserReporter.TYPE_UNKNOWN_MARKUP' "Unrecognized element [" + name + "]. Ignoring and processing children..."' getVagueLocation (e)); " is 157.
Long Statement,org.javarosa.xform.parse,XFormParser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\parse\XFormParser.cs,InitBlock,The length of the statement  "			reporter.warning (XFormParserReporter.TYPE_INVALID_STRUCTURE' "Could not create a default repeat template; this is almost certainly a homogeneity error! Your form will not work! (Failed on " + templRef.ToString () + ")"' null); " is 227.
Long Statement,org.javarosa.xform.util,XFormAnswerDataParser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormAnswerDataParser.cs,getAnswerData,The length of the statement  "		//UPGRADE_TODO: The 'System.DateTime' structure does not have an equivalent to NULL. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1291'" " is 193.
Long Statement,org.javarosa.xform.util,XFormAnswerDataParser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormAnswerDataParser.cs,getAnswerData,The length of the statement  "		//UPGRADE_TODO: The 'System.DateTime' structure does not have an equivalent to NULL. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1291'" " is 193.
Long Statement,org.javarosa.xform.util,XFormAnswerDataParser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormAnswerDataParser.cs,getAnswerData,The length of the statement  "		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.xform.util,XFormAnswerDataParser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormAnswerDataParser.cs,getAnswerData,The length of the statement  "		//UPGRADE_TODO: The 'System.DateTime' structure does not have an equivalent to NULL. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1291'" " is 193.
Long Statement,org.javarosa.xform.util,XFormAnswerDataParser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormAnswerDataParser.cs,getAnswerData,The length of the statement  "		//UPGRADE_TODO: The 'System.DateTime' structure does not have an equivalent to NULL. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1291'" " is 193.
Long Statement,org.javarosa.xform.util,XFormAnswerDataParser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormAnswerDataParser.cs,getAnswerData,The length of the statement  "		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.xform.util,XFormAnswerDataParser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormAnswerDataParser.cs,getAnswerData,The length of the statement  "		//UPGRADE_TODO: The 'System.DateTime' structure does not have an equivalent to NULL. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1291'" " is 193.
Long Statement,org.javarosa.xform.util,XFormAnswerDataParser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormAnswerDataParser.cs,getAnswerData,The length of the statement  "		//UPGRADE_TODO: The 'System.DateTime' structure does not have an equivalent to NULL. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1291'" " is 193.
Long Statement,org.javarosa.xform.util,XFormAnswerDataParser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormAnswerDataParser.cs,getAnswerData,The length of the statement  "		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.xform.util,XFormAnswerDataSerializer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormAnswerDataSerializer.cs,canSerialize,The length of the statement  "	if (data is StringData || data is DateData || data is TimeData || data is SelectMultiData || data is SelectOneData || data is IntegerData || data is DecimalData || data is PointerAnswerData || data is MultiPointerAnswerData || data is GeoPointData || data is GeoTraceData || data is GeoShapeData || data is LongData || data is DateTimeData || data is UncastData) { " is 364.
Long Statement,org.javarosa.xform.util,XFormAnswerDataSerializer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormAnswerDataSerializer.cs,serializeAnswerData,The length of the statement  "	//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.xform.util,XFormAnswerDataSerializer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormAnswerDataSerializer.cs,serializeAnswerData,The length of the statement  "	//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.xform.util,XFormAnswerDataSerializer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormAnswerDataSerializer.cs,serializeAnswerData,The length of the statement  "	//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.xform.util,XFormAnswerDataSerializer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormAnswerDataSerializer.cs,serializeAnswerData,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Enumeration.hasMoreElements' was converted to 'System.Collections.IEnumerator.MoveNext' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationhasMoreElements'" " is 297.
Long Statement,org.javarosa.xform.util,XFormAnswerDataSerializer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormAnswerDataSerializer.cs,serializeAnswerData,The length of the statement  "		//UPGRADE_TODO: Method 'java.util.Enumeration.nextElement' was converted to 'System.Collections.IEnumerator.Current' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationnextElement'" " is 288.
Long Statement,org.javarosa.xform.util,XFormAnswerDataSerializer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormAnswerDataSerializer.cs,serializeAnswerData,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Enumeration.hasMoreElements' was converted to 'System.Collections.IEnumerator.MoveNext' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationhasMoreElements'" " is 297.
Long Statement,org.javarosa.xform.util,XFormAnswerDataSerializer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormAnswerDataSerializer.cs,serializeAnswerData,The length of the statement  "		//UPGRADE_TODO: Method 'java.util.Enumeration.nextElement' was converted to 'System.Collections.IEnumerator.Current' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationnextElement'" " is 288.
Long Statement,org.javarosa.xform.util,XFormAnswerDataSerializer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormAnswerDataSerializer.cs,containsExternalData,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Enumeration.hasMoreElements' was converted to 'System.Collections.IEnumerator.MoveNext' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationhasMoreElements'" " is 297.
Long Statement,org.javarosa.xform.util,XFormAnswerDataSerializer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormAnswerDataSerializer.cs,containsExternalData,The length of the statement  "		//UPGRADE_TODO: Method 'java.util.Enumeration.nextElement' was converted to 'System.Collections.IEnumerator.Current' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationnextElement'" " is 288.
Long Statement,org.javarosa.xform.util,XFormAnswerDataSerializer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormAnswerDataSerializer.cs,containsExternalData,The length of the statement  "		//UPGRADE_TODO: The 'System.Boolean' structure does not have an equivalent to NULL. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1291'" " is 192.
Long Statement,org.javarosa.xform.util,XFormAnswerDataSerializer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormAnswerDataSerializer.cs,retrieveExternalDataPointer,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Enumeration.hasMoreElements' was converted to 'System.Collections.IEnumerator.MoveNext' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationhasMoreElements'" " is 297.
Long Statement,org.javarosa.xform.util,XFormAnswerDataSerializer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormAnswerDataSerializer.cs,retrieveExternalDataPointer,The length of the statement  "		//UPGRADE_TODO: Method 'java.util.Enumeration.nextElement' was converted to 'System.Collections.IEnumerator.Current' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationnextElement'" " is 288.
Long Statement,org.javarosa.xform.util,XFormAnswerDataSerializer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormAnswerDataSerializer.cs,retrieveExternalDataPointer,The length of the statement  "		//UPGRADE_TODO: The 'System.Boolean' structure does not have an equivalent to NULL. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1291'" " is 192.
Long Statement,org.javarosa.xform.util,XFormSerializer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormSerializer.cs,getStream,The length of the statement  "	//UPGRADE_TODO: Class 'java.io.DataOutputStream' was converted to 'System.IO.BinaryWriter' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javaioDataOutputStream'" " is 254.
Long Statement,org.javarosa.xform.util,XFormSerializer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormSerializer.cs,elementToString,The length of the statement  "	//UPGRADE_TODO: Class 'java.io.DataOutputStream' was converted to 'System.IO.BinaryWriter' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javaioDataOutputStream'" " is 254.
Long Statement,org.javarosa.xform.util,XFormSerializer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormSerializer.cs,elementToString,The length of the statement  "		//UPGRADE_TODO: The differences in the Format  of parameters for constructor 'java.lang.String.String'  may cause compilation errors.  "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1092'" " is 243.
Long Statement,org.javarosa.xform.util,XFormSerializer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormSerializer.cs,elementToString,The length of the statement  "		s = System.Text.Encoding.GetEncoding ("UTF-8").GetString (SupportClass.ToByteArray (SupportClass.ToSByteArray (bos.ToArray ()))); " is 129.
Long Statement,org.javarosa.xform.util,XFormSerializer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormSerializer.cs,getUtfBytes,The length of the statement  "		//UPGRADE_ISSUE: Class hierarchy differences between 'java.io.Writer' and 'System.IO.StreamWriter' may cause compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1186'" " is 237.
Long Statement,org.javarosa.xform.util,XFormSerializer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormSerializer.cs,getUtfBytes,The length of the statement  "		//UPGRADE_TODO: Constructor 'java.io.OutputStreamWriter.OutputStreamWriter' was converted to 'System.IO.StreamWriter.StreamWriter' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javaioOutputStreamWriterOutputStreamWriter_javaioOutputStream_javalangString'" " is 348.
Long Statement,org.javarosa.xform.util,XFormUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormUtils.cs,getFormFromResource,The length of the statement  "	//UPGRADE_ISSUE: Method 'java.lang.Class.getResourceAsStream' was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1000_javalangClassgetResourceAsStream_javalangString'" " is 237.
Long Statement,org.javarosa.xform.util,XFormUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormUtils.cs,getFormFromResource,The length of the statement  "	//UPGRADE_ISSUE: Class 'java.lang.System' was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1000_javalangSystem'" " is 184.
Long Statement,org.javarosa.xform.util,XFormUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormUtils.cs,getFormFromInputStream,The length of the statement  "			//UPGRADE_TODO: Constructor 'java.io.InputStreamReader.InputStreamReader' was converted to 'System.IO.StreamReader' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javaioInputStreamReaderInputStreamReader_javaioInputStream_javalangString'" " is 330.
Long Statement,org.javarosa.xform.util,XFormUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormUtils.cs,getFormFromInputStream,The length of the statement  "		//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Throwable.getMessage' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 221.
Long Statement,org.javarosa.xform.util,XFormUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormUtils.cs,getFormFromSerializedResource,The length of the statement  "	//UPGRADE_ISSUE: Method 'java.lang.Class.getResourceAsStream' was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1000_javalangClassgetResourceAsStream_javalangString'" " is 237.
Long Statement,org.javarosa.xform.util,XFormUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormUtils.cs,getFormFromSerializedResource,The length of the statement  "	//UPGRADE_ISSUE: Class 'java.lang.System' was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1000_javalangSystem'" " is 184.
Long Statement,org.javarosa.xform.util,XFormUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormUtils.cs,getFormFromSerializedResource,The length of the statement  "	//UPGRADE_TODO: Class 'java.io.DataInputStream' was converted to 'System.IO.BinaryReader' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javaioDataInputStream'" " is 252.
Long Statement,org.javarosa.xform.util,XFormUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormUtils.cs,getFormFromSerializedResource,The length of the statement  "				//UPGRADE_TODO: Method 'java.io.FilterInputStream.close' was converted to 'System.IO.BinaryReader.Close' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javaioFilterInputStreamclose'" " is 274.
Long Statement,org.javarosa.xform.util,XFormUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormUtils.cs,unusedAttWarning,The length of the statement  "		//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Object.toString' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 216.
Long Statement,org.javarosa.xpath.expr,XPathBinaryOpExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathBinaryOpExpr.cs,toString,The length of the statement  "	//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Object.toString' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 216.
Long Statement,org.javarosa.xpath.expr,XPathCmpExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathCmpExpr.cs,InitBlock,The length of the statement  "			//UPGRADE_TODO: The 'System.Double' structure does not have an equivalent to NULL. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1291'" " is 191.
Long Statement,org.javarosa.xpath.expr,XPathCmpExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathCmpExpr.cs,InitBlock,The length of the statement  "					//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Float.doubleValue' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 218.
Long Statement,org.javarosa.xpath.expr,XPathCmpExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathCmpExpr.cs,InitBlock,The length of the statement  "							//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Object.toString' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 216.
Long Statement,org.javarosa.xpath.expr,XPathCmpExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathCmpExpr.cs,InitBlock,The length of the statement  "						//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Object.toString' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 216.
Long Statement,org.javarosa.xpath.expr,XPathExpression,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathExpression.cs,InitBlock,The length of the statement  "		//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Throwable.getMessage' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 221.
Long Statement,org.javarosa.xpath.expr,XPathFilterExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathFilterExpr.cs,ToString,The length of the statement  "	//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Object.toString' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 216.
Long Statement,org.javarosa.xpath.expr,XPathFilterExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathFilterExpr.cs,ToString,The length of the statement  "		//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Object.toString' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 216.
Long Statement,org.javarosa.xpath.expr,XPathNumericLiteral,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathNumericLiteral.cs,writeExternal,The length of the statement  "	//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'" " is 218.
Long Statement,org.javarosa.xpath.expr,XPathNumericLiteral,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathNumericLiteral.cs,writeExternal,The length of the statement  "		//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'" " is 218.
Long Statement,org.javarosa.xpath.expr,XPathNumNegExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathNumNegExpr.cs,ToString,The length of the statement  "	//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Object.toString' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 216.
Long Statement,org.javarosa.xpath.expr,XPathPathExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathPathExpr.cs,InitBlock,The length of the statement  "				throw new UnpivotableExpressionException ("Can't pivot filtered treereferences. Ref: " + ref_Renamed.toString (true) + " has predicates."); " is 139.
Long Statement,org.javarosa.xpath.expr,XPathPathExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathPathExpr.cs,getReference,The length of the statement  "					throw new XPathUnsupportedException ("instance() function used with " + func.args.Length + " arguements. Expecting 1 arguement"); " is 129.
Long Statement,org.javarosa.xpath.expr,XPathPathExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathPathExpr.cs,eval,The length of the statement  "			throw new XPathMissingInstanceException (ref_Renamed.InstanceName' "Instance referenced by " + ref_Renamed.toString (true) + " does not exist"); " is 144.
Long Statement,org.javarosa.xpath.expr,XPathPathExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathPathExpr.cs,eval,The length of the statement  "			throw new XPathException ("Cannot evaluate the reference [" + refStr + "] in the current evaluation context. No default instance has been declared!"); " is 150.
Long Statement,org.javarosa.xpath.expr,XPathPathExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathPathExpr.cs,eval,The length of the statement  "		throw new XPathMissingInstanceException (ref_Renamed.InstanceName' "Instance referenced by " + ref_Renamed.toString (true) + " has not been loaded"); " is 149.
Long Statement,org.javarosa.xpath.expr,XPathPathExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathPathExpr.cs,Equals,The length of the statement  "		return ExtUtil.arrayEquals (steps' x.steps) && (init_context == INIT_CONTEXT_EXPR ? filtExpr.Equals (x.filtExpr) : true); " is 121.
Long Statement,org.javarosa.xpath.expr,XPathPathExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathPathExpr.cs,readExternal,The length of the statement  "	System.Collections.ArrayList v = (System.Collections.ArrayList)ExtUtil.read (in_Renamed' new ExtWrapList (typeof(XPathStep))' pf); " is 130.
Long Statement,org.javarosa.xpath.expr,XPathStep,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathStep.cs,matches,The length of the statement  "		if (axis != x.axis || (test != x.test && !((x.test == TEST_NAME && this.test == TEST_NAME_WILDCARD) || (this.test == TEST_NAME && x.test == TEST_NAME_WILDCARD))) || predicates.Length != x.predicates.Length) { " is 208.
Long Statement,org.javarosa.xpath,XPathNodeset,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\XPathNodeset.cs,setReferences,The length of the statement  "		throw new XPathTypeMismatchException ("This field is repeated: \n\n" + nodeContents () + "\n\nYou may need to use the indexed-repeat() function to specify which value you want."); " is 179.
Long Statement,org.javarosa.xpath.parser.ast,ASTNode,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\ast\ASTNode.cs,print,The length of the statement  "		//UPGRADE_TODO: Method 'java.util.Enumeration.hasMoreElements' was converted to 'System.Collections.IEnumerator.MoveNext' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationhasMoreElements'" " is 297.
Long Statement,org.javarosa.xpath.parser.ast,ASTNode,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\ast\ASTNode.cs,print,The length of the statement  "			//UPGRADE_TODO: Method 'java.util.Enumeration.nextElement' was converted to 'System.Collections.IEnumerator.Current' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationnextElement'" " is 288.
Long Statement,org.javarosa.xpath.parser.ast,ASTNode,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\ast\ASTNode.cs,print,The length of the statement  "		//UPGRADE_TODO: Method 'java.util.Enumeration.hasMoreElements' was converted to 'System.Collections.IEnumerator.MoveNext' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationhasMoreElements'" " is 297.
Long Statement,org.javarosa.xpath.parser.ast,ASTNode,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\ast\ASTNode.cs,print,The length of the statement  "			//UPGRADE_TODO: Method 'java.util.Enumeration.nextElement' was converted to 'System.Collections.IEnumerator.Current' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationnextElement'" " is 288.
Long Statement,org.javarosa.xpath.parser.ast,ASTNodeAbstractExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\ast\ASTNodeAbstractExpr.cs,build,The length of the statement  "				//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'" " is 173.
Long Statement,org.javarosa.xpath.parser.ast,ASTNodeAbstractExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\ast\ASTNodeAbstractExpr.cs,partition,The length of the statement  "	System.Collections.ArrayList sepIdxs = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10)); " is 121.
Long Statement,org.javarosa.xpath.parser.ast,ASTNodeAbstractExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\ast\ASTNodeAbstractExpr.cs,partitionBalanced,The length of the statement  "	System.Collections.ArrayList sepIdxs = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10)); " is 121.
Long Statement,org.javarosa.xpath.parser.ast,ASTNodePathStep,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\ast\ASTNodePathStep.cs,validateNodeTypeTest,The length of the statement  "	if (name.Equals ("node") || name.Equals ("text") || name.Equals ("comment") || name.Equals ("processing-instruction")) { " is 120.
Long Statement,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The length of the statement  "	System.Collections.ArrayList tokens = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10)); " is 120.
Long Statement,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The length of the statement  "			//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'" " is 232.
Long Statement,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The length of the statement  "			if (token.type == Token.WILDCARD || token.type == Token.NSWILDCARD || token.type == Token.QNAME || token.type == Token.VAR || token.type == Token.NUM || token.type == Token.STR || token.type == Token.RBRACK || token.type == Token.RPAREN || token.type == Token.DOT || token.type == Token.DBL_DOT) { " is 297.
Long Statement,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,badParse,The length of the statement  "	System.String preContext = (System.Math.Max (0' i - CONTEXT_LENGTH) != 0 ? "..." : "") + expr.Substring (System.Math.Max (0' i - CONTEXT_LENGTH)' (System.Math.Max (0' i)) - (System.Math.Max (0' i - CONTEXT_LENGTH))).Trim (); " is 224.
Long Statement,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,badParse,The length of the statement  "	System.String postcontext = i == expr.Length - 1 ? "" : expr.Substring (System.Math.Min (i + 1' expr.Length - 1)' (System.Math.Min (i + CONTEXT_LENGTH' expr.Length)) - (System.Math.Min (i + 1' expr.Length - 1))).Trim () + (System.Math.Min (i + CONTEXT_LENGTH' expr.Length) != expr.Length ? "..." : ""); " is 302.
Long Statement,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,badParse,The length of the statement  "	throw new XPathSyntaxException ("Couldn't understand the expression starting at this point: " + (preContext + start + postcontext)); " is 132.
Long Statement,org.javarosa.xpath.parser,Parser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Parser.cs,parseFuncCalls,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Enumeration.hasMoreElements' was converted to 'System.Collections.IEnumerator.MoveNext' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationhasMoreElements'" " is 297.
Long Statement,org.javarosa.xpath.parser,Parser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Parser.cs,parseFuncCalls,The length of the statement  "		//UPGRADE_TODO: Method 'java.util.Enumeration.nextElement' was converted to 'System.Collections.IEnumerator.Current' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationnextElement'" " is 288.
Long Statement,org.javarosa.xpath.parser,Parser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Parser.cs,parseBalanced,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Enumeration.hasMoreElements' was converted to 'System.Collections.IEnumerator.MoveNext' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationhasMoreElements'" " is 297.
Long Statement,org.javarosa.xpath.parser,Parser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Parser.cs,parseBalanced,The length of the statement  "		//UPGRADE_TODO: Method 'java.util.Enumeration.nextElement' was converted to 'System.Collections.IEnumerator.Current' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationnextElement'" " is 288.
Long Statement,org.javarosa.xpath.parser,Parser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Parser.cs,parseBinaryOp,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Enumeration.hasMoreElements' was converted to 'System.Collections.IEnumerator.MoveNext' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationhasMoreElements'" " is 297.
Long Statement,org.javarosa.xpath.parser,Parser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Parser.cs,parseBinaryOp,The length of the statement  "		//UPGRADE_TODO: Method 'java.util.Enumeration.nextElement' was converted to 'System.Collections.IEnumerator.Current' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationnextElement'" " is 288.
Long Statement,org.javarosa.xpath.parser,Parser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Parser.cs,parseUnaryOp,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Enumeration.hasMoreElements' was converted to 'System.Collections.IEnumerator.MoveNext' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationhasMoreElements'" " is 297.
Long Statement,org.javarosa.xpath.parser,Parser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Parser.cs,parseUnaryOp,The length of the statement  "		//UPGRADE_TODO: Method 'java.util.Enumeration.nextElement' was converted to 'System.Collections.IEnumerator.Current' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationnextElement'" " is 288.
Long Statement,org.javarosa.xpath.parser,Parser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Parser.cs,parsePathExpr,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Enumeration.hasMoreElements' was converted to 'System.Collections.IEnumerator.MoveNext' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationhasMoreElements'" " is 297.
Long Statement,org.javarosa.xpath.parser,Parser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Parser.cs,parsePathExpr,The length of the statement  "		//UPGRADE_TODO: Method 'java.util.Enumeration.nextElement' was converted to 'System.Collections.IEnumerator.Current' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationnextElement'" " is 288.
Long Statement,org.javarosa.xpath.parser,Parser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Parser.cs,isStep,The length of the statement  "		if (type == Token.QNAME || type == Token.WILDCARD || type == Token.NSWILDCARD || type == Token.AT || type == Token.DOT || type == Token.DBL_DOT) { " is 146.
Long Statement,org.javarosa.xpath.parser,Parser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Parser.cs,isStep,The length of the statement  "			return (name.Equals ("node") || name.Equals ("text") || name.Equals ("comment") || name.Equals ("processing-instruction")); " is 123.
Long Statement,org.javarosa.xpath.parser,Parser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Parser.cs,verifyBaseExpr,The length of the statement  "			//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Object.toString' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 216.
Long Statement,org.javarosa.xpath.parser,Parser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Parser.cs,verifyBaseExpr,The length of the statement  "	//UPGRADE_TODO: Method 'java.util.Enumeration.hasMoreElements' was converted to 'System.Collections.IEnumerator.MoveNext' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationhasMoreElements'" " is 297.
Long Statement,org.javarosa.xpath.parser,Parser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Parser.cs,verifyBaseExpr,The length of the statement  "		//UPGRADE_TODO: Method 'java.util.Enumeration.nextElement' was converted to 'System.Collections.IEnumerator.Current' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationnextElement'" " is 288.
Complex Conditional,org.javarosa.core.model.condition,Recalculate,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\condition\Recalculate.cs,wrapData,The conditional expression  "(val is System.String && ((System.String)val).Length == 0) || (val is System.Double && System.Double.IsNaN (((System.Double)val)))"  is complex.
Complex Conditional,org.javarosa.core.model.condition,Recalculate,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\condition\Recalculate.cs,wrapData,The conditional expression  "Constants.DATATYPE_INTEGER == dataType || (isIntegral && (System.Int32.MaxValue >= l) && (System.Int32.MinValue <= l))"  is complex.
Complex Conditional,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,daysInMonth,The conditional expression  "month == Calendar.APRIL || month == Calendar.JUNE || month == Calendar.SEPTEMBER || month == Calendar.NOVEMBER"  is complex.
Complex Conditional,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,saveProperty,The conditional expression  "propName != null && propName.Length > 0 && value_Renamed != null && value_Renamed.Length > 0"  is complex.
Complex Conditional,org.javarosa.xform.util,XFormAnswerDataSerializer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\util\XFormAnswerDataSerializer.cs,canSerialize,The conditional expression  "data is StringData || data is DateData || data is TimeData || data is SelectMultiData || data is SelectOneData || data is IntegerData || data is DecimalData || data is PointerAnswerData || data is MultiPointerAnswerData || data is GeoPointData || data is GeoTraceData || data is GeoShapeData || data is LongData || data is DateTimeData || data is UncastData"  is complex.
Complex Conditional,org.javarosa.xpath.expr,XPathBoolExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathBoolExpr.cs,eval,The conditional expression  "(!aval && op == AND) || (aval && op == OR)"  is complex.
Complex Conditional,org.javarosa.xpath.expr,XPathQName,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathQName.cs,init,The conditional expression  "name == null || (name != null && name.Length == 0) || (namespace_Renamed != null && namespace_Renamed.Length == 0)"  is complex.
Complex Conditional,org.javarosa.xpath.expr,XPathStep,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathStep.cs,matches,The conditional expression  "axis != x.axis || (test != x.test && !((x.test == TEST_NAME && this.test == TEST_NAME_WILDCARD) || (this.test == TEST_NAME && x.test == TEST_NAME_WILDCARD))) || predicates.Length != x.predicates.Length"  is complex.
Complex Conditional,org.javarosa.xpath.parser.ast,ASTNodePathStep,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\ast\ASTNodePathStep.cs,validateNodeTypeTest,The conditional expression  "name.Equals ("node") || name.Equals ("text") || name.Equals ("comment") || name.Equals ("processing-instruction")"  is complex.
Complex Conditional,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The conditional expression  "token.type == Token.WILDCARD || token.type == Token.NSWILDCARD || token.type == Token.QNAME || token.type == Token.VAR || token.type == Token.NUM || token.type == Token.STR || token.type == Token.RBRACK || token.type == Token.RPAREN || token.type == Token.DOT || token.type == Token.DBL_DOT"  is complex.
Complex Conditional,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,matchNCName,The conditional expression  "!(isAlpha (c) || c == '_' || (i > start && (isDigit (c) || c == '.' || c == '-')))"  is complex.
Complex Conditional,org.javarosa.xpath.parser,Parser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Parser.cs,isStep,The conditional expression  "type == Token.QNAME || type == Token.WILDCARD || type == Token.NSWILDCARD || type == Token.AT || type == Token.DOT || type == Token.DBL_DOT"  is complex.
Virtual Method Call from Constructor,org.javarosa.core.model.data,SelectOneData,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\data\SelectOneData.cs,Clone,The constructor "Clone" calls a virtual method "Clone".
Virtual Method Call from Constructor,org.javarosa.core.model.data.helper,Selection,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\data\helper\Selection.cs,Selection,The constructor "Selection" calls a virtual method "attachChoice".
Virtual Method Call from Constructor,org.javarosa.model.xform,XPathReference,C:\repos\samdubey_DotNetRosa\DotNetRosa\model\xform\XPathReference.cs,XPathReference,The constructor "XPathReference" calls a virtual method "getReference".
Empty Catch Block,org.javarosa.core.model.condition,Constraint,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\condition\Constraint.cs,attemptConstraintCompile,The method has an empty catch block.
Empty Catch Block,org.javarosa.core.services,Logger,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\Logger.cs,die,The method has an empty catch block.
Empty Catch Block,org.javarosa.core.util.externalizable,ExtUtil,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtUtil.cs,deserialize,The method has an empty catch block.
Empty Catch Block,org.javarosa.core.util.externalizable,ExtUtil,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtUtil.cs,deserialize,The method has an empty catch block.
Empty Catch Block,org.javarosa.form.api,FormEntryCaption,C:\repos\samdubey_DotNetRosa\DotNetRosa\form\api\FormEntryCaption.cs,getIText,The method has an empty catch block.
Empty Catch Block,org.javarosa.form.api,FormEntryCaption,C:\repos\samdubey_DotNetRosa\DotNetRosa\form\api\FormEntryCaption.cs,getIText,The method has an empty catch block.
Magic Number,org.javarosa.core.model,GroupDef,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\GroupDef.cs,GroupDef,The following statement contains a magic number: observers = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10));  
Magic Number,org.javarosa.core.model,QuestionDef,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\QuestionDef.cs,QuestionDef,The following statement contains a magic number: observers = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10));  
Magic Number,org.javarosa.core.model.condition,Recalculate,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\condition\Recalculate.cs,wrapData,The following statement contains a magic number: if (Constants.DATATYPE_BOOLEAN == dataType || val is System.Boolean) {  	//ctsims: We should really be using the boolean datatype for real' it's  	//necessary for backend calculations and XSD compliance  	bool b;  	if (val is System.Boolean) {  		b = ((System.Boolean)val);  	}  	else if (val is System.Double) {  		System.Double d = (System.Double)val;  		b = System.Math.Abs (d) > 1.0e-12 && !Double.isNaN (d);  	}  	else if (val is System.String) {  		System.String s = (System.String)val;  		b = s.Length > 0;  	}  	else {  		throw new System.SystemException ("unrecognized data representation while trying to convert to BOOLEAN");  	}  	return new BooleanData (b);  }  else if (val is System.Double) {  	double d = ((System.Double)val);  	//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'"  	long l = (long)d;  	bool isIntegral = System.Math.Abs (d - l) < 1.0e-9;  	if (Constants.DATATYPE_INTEGER == dataType || (isIntegral && (System.Int32.MaxValue >= l) && (System.Int32.MinValue <= l))) {  		//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'"  		return new IntegerData ((int)d);  	}  	else if (Constants.DATATYPE_LONG == dataType || isIntegral) {  		//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'"  		return new LongData ((long)d);  	}  	else {  		return new DecimalData (d);  	}  }  else if (dataType == Constants.DATATYPE_GEOPOINT) {  	return new GeoPointData ().cast (new UncastData (System.Convert.ToString (val)));  }  else if (dataType == Constants.DATATYPE_GEOSHAPE) {  	return new GeoShapeData ().cast (new UncastData (System.Convert.ToString (val)));  }  else if (dataType == Constants.DATATYPE_GEOTRACE) {  	return new GeoTraceData ().cast (new UncastData (System.Convert.ToString (val)));  }  else if (dataType == Constants.DATATYPE_CHOICE) {  	return new SelectOneData ().cast (new UncastData (System.Convert.ToString (val)));  }  else if (dataType == Constants.DATATYPE_CHOICE_LIST) {  	return new SelectMultiData ().cast (new UncastData (System.Convert.ToString (val)));  }  else if (val is System.String) {  	return new StringData ((System.String)val);  }  else if (val is System.DateTime) {  	if (dataType == Constants.DATATYPE_DATE_TIME) {  		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  		return new DateTimeData (ref new System.DateTime[] {  			(System.DateTime)val  		} [0]);  	}  	else if (dataType == Constants.DATATYPE_TIME) {  		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  		return new TimeData (ref new System.DateTime[] {  			(System.DateTime)val  		} [0]);  	}  	else {  		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  		return new DateData (ref new System.DateTime[] {  			(System.DateTime)val  		} [0]);  	}  }  else {  	//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Class.getName' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'"  	throw new System.SystemException ("unrecognized data type in 'calculate' expression: " + val.GetType ().FullName);  }  
Magic Number,org.javarosa.core.model.condition,Recalculate,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\condition\Recalculate.cs,wrapData,The following statement contains a magic number: if (Constants.DATATYPE_BOOLEAN == dataType || val is System.Boolean) {  	//ctsims: We should really be using the boolean datatype for real' it's  	//necessary for backend calculations and XSD compliance  	bool b;  	if (val is System.Boolean) {  		b = ((System.Boolean)val);  	}  	else if (val is System.Double) {  		System.Double d = (System.Double)val;  		b = System.Math.Abs (d) > 1.0e-12 && !Double.isNaN (d);  	}  	else if (val is System.String) {  		System.String s = (System.String)val;  		b = s.Length > 0;  	}  	else {  		throw new System.SystemException ("unrecognized data representation while trying to convert to BOOLEAN");  	}  	return new BooleanData (b);  }  else if (val is System.Double) {  	double d = ((System.Double)val);  	//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'"  	long l = (long)d;  	bool isIntegral = System.Math.Abs (d - l) < 1.0e-9;  	if (Constants.DATATYPE_INTEGER == dataType || (isIntegral && (System.Int32.MaxValue >= l) && (System.Int32.MinValue <= l))) {  		//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'"  		return new IntegerData ((int)d);  	}  	else if (Constants.DATATYPE_LONG == dataType || isIntegral) {  		//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'"  		return new LongData ((long)d);  	}  	else {  		return new DecimalData (d);  	}  }  else if (dataType == Constants.DATATYPE_GEOPOINT) {  	return new GeoPointData ().cast (new UncastData (System.Convert.ToString (val)));  }  else if (dataType == Constants.DATATYPE_GEOSHAPE) {  	return new GeoShapeData ().cast (new UncastData (System.Convert.ToString (val)));  }  else if (dataType == Constants.DATATYPE_GEOTRACE) {  	return new GeoTraceData ().cast (new UncastData (System.Convert.ToString (val)));  }  else if (dataType == Constants.DATATYPE_CHOICE) {  	return new SelectOneData ().cast (new UncastData (System.Convert.ToString (val)));  }  else if (dataType == Constants.DATATYPE_CHOICE_LIST) {  	return new SelectMultiData ().cast (new UncastData (System.Convert.ToString (val)));  }  else if (val is System.String) {  	return new StringData ((System.String)val);  }  else if (val is System.DateTime) {  	if (dataType == Constants.DATATYPE_DATE_TIME) {  		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  		return new DateTimeData (ref new System.DateTime[] {  			(System.DateTime)val  		} [0]);  	}  	else if (dataType == Constants.DATATYPE_TIME) {  		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  		return new TimeData (ref new System.DateTime[] {  			(System.DateTime)val  		} [0]);  	}  	else {  		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  		return new DateData (ref new System.DateTime[] {  			(System.DateTime)val  		} [0]);  	}  }  else {  	//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Class.getName' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'"  	throw new System.SystemException ("unrecognized data type in 'calculate' expression: " + val.GetType ().FullName);  }  
Magic Number,org.javarosa.core.model.condition,Recalculate,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\condition\Recalculate.cs,wrapData,The following statement contains a magic number: if (val is System.Boolean) {  	b = ((System.Boolean)val);  }  else if (val is System.Double) {  	System.Double d = (System.Double)val;  	b = System.Math.Abs (d) > 1.0e-12 && !Double.isNaN (d);  }  else if (val is System.String) {  	System.String s = (System.String)val;  	b = s.Length > 0;  }  else {  	throw new System.SystemException ("unrecognized data representation while trying to convert to BOOLEAN");  }  
Magic Number,org.javarosa.core.model.condition,Recalculate,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\condition\Recalculate.cs,wrapData,The following statement contains a magic number: if (val is System.Double) {  	System.Double d = (System.Double)val;  	b = System.Math.Abs (d) > 1.0e-12 && !Double.isNaN (d);  }  else if (val is System.String) {  	System.String s = (System.String)val;  	b = s.Length > 0;  }  else {  	throw new System.SystemException ("unrecognized data representation while trying to convert to BOOLEAN");  }  
Magic Number,org.javarosa.core.model.condition,Recalculate,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\condition\Recalculate.cs,wrapData,The following statement contains a magic number: b = System.Math.Abs (d) > 1.0e-12 && !Double.isNaN (d);  
Magic Number,org.javarosa.core.model.condition,Recalculate,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\condition\Recalculate.cs,wrapData,The following statement contains a magic number: if (val is System.Double) {  	double d = ((System.Double)val);  	//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'"  	long l = (long)d;  	bool isIntegral = System.Math.Abs (d - l) < 1.0e-9;  	if (Constants.DATATYPE_INTEGER == dataType || (isIntegral && (System.Int32.MaxValue >= l) && (System.Int32.MinValue <= l))) {  		//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'"  		return new IntegerData ((int)d);  	}  	else if (Constants.DATATYPE_LONG == dataType || isIntegral) {  		//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'"  		return new LongData ((long)d);  	}  	else {  		return new DecimalData (d);  	}  }  else if (dataType == Constants.DATATYPE_GEOPOINT) {  	return new GeoPointData ().cast (new UncastData (System.Convert.ToString (val)));  }  else if (dataType == Constants.DATATYPE_GEOSHAPE) {  	return new GeoShapeData ().cast (new UncastData (System.Convert.ToString (val)));  }  else if (dataType == Constants.DATATYPE_GEOTRACE) {  	return new GeoTraceData ().cast (new UncastData (System.Convert.ToString (val)));  }  else if (dataType == Constants.DATATYPE_CHOICE) {  	return new SelectOneData ().cast (new UncastData (System.Convert.ToString (val)));  }  else if (dataType == Constants.DATATYPE_CHOICE_LIST) {  	return new SelectMultiData ().cast (new UncastData (System.Convert.ToString (val)));  }  else if (val is System.String) {  	return new StringData ((System.String)val);  }  else if (val is System.DateTime) {  	if (dataType == Constants.DATATYPE_DATE_TIME) {  		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  		return new DateTimeData (ref new System.DateTime[] {  			(System.DateTime)val  		} [0]);  	}  	else if (dataType == Constants.DATATYPE_TIME) {  		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  		return new TimeData (ref new System.DateTime[] {  			(System.DateTime)val  		} [0]);  	}  	else {  		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  		return new DateData (ref new System.DateTime[] {  			(System.DateTime)val  		} [0]);  	}  }  else {  	//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Class.getName' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'"  	throw new System.SystemException ("unrecognized data type in 'calculate' expression: " + val.GetType ().FullName);  }  
Magic Number,org.javarosa.core.model.instance.utils,CompactInstanceWrapper,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\instance\utils\CompactInstanceWrapper.cs,readTreeElement,The following statement contains a magic number: if (isGroup) {  	System.Collections.ArrayList childTypes = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10));  	for (int i = 0; i < templ.NumChildren; i++) {  		System.String childName = templ.getChildAt (i).Name;  		if (!childTypes.Contains (childName)) {  			childTypes.Add (childName);  		}  	}  	for (int i = 0; i < childTypes.Count; i++) {  		System.String childName = (System.String)childTypes [i];  		TreeReference childTemplRef = e.Ref.extendRef (childName' 0);  		TreeElement childTempl = instance.getTemplatePath (childTemplRef);  		bool repeatable = childTempl.Repeatable;  		int n = ExtUtil.readInt (in_Renamed);  		bool relevant = (n > 0);  		if (!repeatable && n > 1) {  			throw new DeserializationException ("Detected repeated instances of a non-repeatable node");  		}  		if (repeatable) {  			int mult = e.getChildMultiplicity (childName);  			for (int j = mult - 1; j >= 0; j--) {  				e.removeChild (childName' j);  			}  			for (int j = 0; j < n; j++) {  				TreeReference dstRef = e.Ref.extendRef (childName' j);  				try {  					instance.copyNode (childTempl' dstRef);  				}  				catch (InvalidReferenceException ire) {  					//If there is an invalid reference' this is a malformed instance'  					//so we'll throw a Deserialization exception.  					TreeReference r = ire.InvalidReference;  					if (r == null) {  						//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Throwable.getMessage' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'"  						throw new DeserializationException ("Null Reference while attempting to deserialize! " + ire.Message);  					}  					else {  						//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Throwable.getMessage' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'"  						throw new DeserializationException ("Invalid Reference while attemtping to deserialize! Reference: " + r.toString (true) + " | " + ire.Message);  					}  				}  				TreeElement child = e.getChild (childName' j);  				child.setRelevant (true);  				readTreeElement (child' in_Renamed' pf);  			}  		}  		else {  			TreeElement child = e.getChild (childName' 0);  			child.setRelevant (relevant);  			if (relevant) {  				readTreeElement (child' in_Renamed' pf);  			}  		}  	}  }  else {  	e.Value = (IAnswerData)ExtUtil.read (in_Renamed' new ExtWrapAnswerData (this' e.DataType));  }  
Magic Number,org.javarosa.core.model.instance.utils,CompactInstanceWrapper,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\instance\utils\CompactInstanceWrapper.cs,writeTreeElement,The following statement contains a magic number: if (isGroup) {  	System.Collections.ArrayList childTypesHandled = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10));  	for (int i = 0; i < templ.NumChildren; i++) {  		System.String childName = templ.getChildAt (i).Name;  		if (!childTypesHandled.Contains (childName)) {  			childTypesHandled.Add (childName);  			int mult = e.getChildMultiplicity (childName);  			if (mult > 0 && !e.getChild (childName' 0).isRelevant ()) {  				mult = 0;  			}  			ExtUtil.writeNumeric (out_Renamed' mult);  			for (int j = 0; j < mult; j++) {  				writeTreeElement (out_Renamed' e.getChild (childName' j));  			}  		}  	}  }  else {  	ExtUtil.write (out_Renamed' new ExtWrapAnswerData (this' e.DataType' e.Value));  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDateISO8601,The following statement contains a magic number: return f.year + "-" + intPad (f.month' 2) + "-" + intPad (f.day' 2);  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDateISO8601,The following statement contains a magic number: return f.year + "-" + intPad (f.month' 2) + "-" + intPad (f.day' 2);  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDateColloquial,The following statement contains a magic number: if (year.Length == 4) {  	year = year.Substring (2' (4) - (2));  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDateColloquial,The following statement contains a magic number: if (year.Length == 4) {  	year = year.Substring (2' (4) - (2));  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDateColloquial,The following statement contains a magic number: if (year.Length == 4) {  	year = year.Substring (2' (4) - (2));  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDateColloquial,The following statement contains a magic number: if (year.Length == 4) {  	year = year.Substring (2' (4) - (2));  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDateColloquial,The following statement contains a magic number: year = year.Substring (2' (4) - (2));  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDateColloquial,The following statement contains a magic number: year = year.Substring (2' (4) - (2));  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDateColloquial,The following statement contains a magic number: year = year.Substring (2' (4) - (2));  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDateColloquial,The following statement contains a magic number: return intPad (f.day' 2) + "/" + intPad (f.month' 2) + "/" + year;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDateColloquial,The following statement contains a magic number: return intPad (f.day' 2) + "/" + intPad (f.month' 2) + "/" + year;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDateSuffix,The following statement contains a magic number: return f.year + intPad (f.month' 2) + intPad (f.day' 2);  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDateSuffix,The following statement contains a magic number: return f.year + intPad (f.month' 2) + intPad (f.day' 2);  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatTimeISO8601,The following statement contains a magic number: if (offset == 0) {  	time += "Z";  }  else {  	//Start with sign  	System.String offsetSign = offset > 0 ? "+" : "-";  	int value_Renamed = System.Math.Abs (offset) / 1000 / 60;  	System.String hrs = intPad (value_Renamed / 60' 2);  	System.String mins = value_Renamed % 60 != 0 ? ":" + intPad (value_Renamed % 60' 2) : "";  	time += (offsetSign + hrs + mins);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatTimeISO8601,The following statement contains a magic number: if (offset == 0) {  	time += "Z";  }  else {  	//Start with sign  	System.String offsetSign = offset > 0 ? "+" : "-";  	int value_Renamed = System.Math.Abs (offset) / 1000 / 60;  	System.String hrs = intPad (value_Renamed / 60' 2);  	System.String mins = value_Renamed % 60 != 0 ? ":" + intPad (value_Renamed % 60' 2) : "";  	time += (offsetSign + hrs + mins);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatTimeISO8601,The following statement contains a magic number: if (offset == 0) {  	time += "Z";  }  else {  	//Start with sign  	System.String offsetSign = offset > 0 ? "+" : "-";  	int value_Renamed = System.Math.Abs (offset) / 1000 / 60;  	System.String hrs = intPad (value_Renamed / 60' 2);  	System.String mins = value_Renamed % 60 != 0 ? ":" + intPad (value_Renamed % 60' 2) : "";  	time += (offsetSign + hrs + mins);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatTimeISO8601,The following statement contains a magic number: if (offset == 0) {  	time += "Z";  }  else {  	//Start with sign  	System.String offsetSign = offset > 0 ? "+" : "-";  	int value_Renamed = System.Math.Abs (offset) / 1000 / 60;  	System.String hrs = intPad (value_Renamed / 60' 2);  	System.String mins = value_Renamed % 60 != 0 ? ":" + intPad (value_Renamed % 60' 2) : "";  	time += (offsetSign + hrs + mins);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatTimeISO8601,The following statement contains a magic number: if (offset == 0) {  	time += "Z";  }  else {  	//Start with sign  	System.String offsetSign = offset > 0 ? "+" : "-";  	int value_Renamed = System.Math.Abs (offset) / 1000 / 60;  	System.String hrs = intPad (value_Renamed / 60' 2);  	System.String mins = value_Renamed % 60 != 0 ? ":" + intPad (value_Renamed % 60' 2) : "";  	time += (offsetSign + hrs + mins);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatTimeISO8601,The following statement contains a magic number: if (offset == 0) {  	time += "Z";  }  else {  	//Start with sign  	System.String offsetSign = offset > 0 ? "+" : "-";  	int value_Renamed = System.Math.Abs (offset) / 1000 / 60;  	System.String hrs = intPad (value_Renamed / 60' 2);  	System.String mins = value_Renamed % 60 != 0 ? ":" + intPad (value_Renamed % 60' 2) : "";  	time += (offsetSign + hrs + mins);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatTimeISO8601,The following statement contains a magic number: if (offset == 0) {  	time += "Z";  }  else {  	//Start with sign  	System.String offsetSign = offset > 0 ? "+" : "-";  	int value_Renamed = System.Math.Abs (offset) / 1000 / 60;  	System.String hrs = intPad (value_Renamed / 60' 2);  	System.String mins = value_Renamed % 60 != 0 ? ":" + intPad (value_Renamed % 60' 2) : "";  	time += (offsetSign + hrs + mins);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatTimeColloquial,The following statement contains a magic number: return intPad (f.hour' 2) + ":" + intPad (f.minute' 2);  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatTimeColloquial,The following statement contains a magic number: return intPad (f.hour' 2) + ":" + intPad (f.minute' 2);  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatTimeSuffix,The following statement contains a magic number: return intPad (f.hour' 2) + intPad (f.minute' 2) + intPad (f.second' 2);  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatTimeSuffix,The following statement contains a magic number: return intPad (f.hour' 2) + intPad (f.minute' 2) + intPad (f.second' 2);  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatTimeSuffix,The following statement contains a magic number: return intPad (f.hour' 2) + intPad (f.minute' 2) + intPad (f.second' 2);  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: for (int i = 0; i < format.Length; i++) {  	char c = format [i];  	if (c == '%') {  		i++;  		if (i >= format.Length) {  			throw new System.SystemException ("date format string ends with %");  		}  		else {  			c = format [i];  		}  		if (c == '%') {  			//literal '%'  			sb.append ("%");  		}  		else if (c == 'Y') {  			//4-digit year  			sb.append (intPad (f.year' 4));  		}  		else if (c == 'y') {  			//2-digit year  			sb.append (intPad (f.year' 4).Substring (2));  		}  		else if (c == 'm') {  			//0-padded month  			sb.append (intPad (f.month' 2));  		}  		else if (c == 'n') {  			//numeric month  			sb.append (f.month);  		}  		else if (c == 'b') {  			//short text month  			System.String[] months = new System.String[] {  				"Jan"'  				"Feb"'  				"Mar"'  				"Apr"'  				"May"'  				"Jun"'  				"Jul"'  				"Aug"'  				"Sep"'  				"Oct"'  				"Nov"'  				"Dec"  			};  			sb.append (months [f.month - 1]);  		}  		else if (c == 'd') {  			//0-padded day of month  			sb.append (intPad (f.day' 2));  		}  		else if (c == 'e') {  			//day of month  			sb.append (f.day);  		}  		else if (c == 'H') {  			//0-padded hour (24-hr time)  			sb.append (intPad (f.hour' 2));  		}  		else if (c == 'h') {  			//hour (24-hr time)  			sb.append (f.hour);  		}  		else if (c == 'M') {  			//0-padded minute  			sb.append (intPad (f.minute' 2));  		}  		else if (c == 'S') {  			//0-padded second  			sb.append (intPad (f.second' 2));  		}  		else if (c == '3') {  			//0-padded millisecond ticks (000-999)  			sb.append (intPad (f.secTicks' 3));  		}  		else if (c == 'a') {  			//Three letter short text day  			System.String[] dayNames = new System.String[] {  				"Sun"'  				"Mon"'  				"Tue"'  				"Wed"'  				"Thu"'  				"Fri"'  				"Sat"  			};  			sb.append (dayNames [f.dow - 1]);  		}  		else if (c == 'Z' || c == 'A' || c == 'B') {  			throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  		}  		else {  			throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  		}  	}  	else {  		sb.append (c);  	}  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: for (int i = 0; i < format.Length; i++) {  	char c = format [i];  	if (c == '%') {  		i++;  		if (i >= format.Length) {  			throw new System.SystemException ("date format string ends with %");  		}  		else {  			c = format [i];  		}  		if (c == '%') {  			//literal '%'  			sb.append ("%");  		}  		else if (c == 'Y') {  			//4-digit year  			sb.append (intPad (f.year' 4));  		}  		else if (c == 'y') {  			//2-digit year  			sb.append (intPad (f.year' 4).Substring (2));  		}  		else if (c == 'm') {  			//0-padded month  			sb.append (intPad (f.month' 2));  		}  		else if (c == 'n') {  			//numeric month  			sb.append (f.month);  		}  		else if (c == 'b') {  			//short text month  			System.String[] months = new System.String[] {  				"Jan"'  				"Feb"'  				"Mar"'  				"Apr"'  				"May"'  				"Jun"'  				"Jul"'  				"Aug"'  				"Sep"'  				"Oct"'  				"Nov"'  				"Dec"  			};  			sb.append (months [f.month - 1]);  		}  		else if (c == 'd') {  			//0-padded day of month  			sb.append (intPad (f.day' 2));  		}  		else if (c == 'e') {  			//day of month  			sb.append (f.day);  		}  		else if (c == 'H') {  			//0-padded hour (24-hr time)  			sb.append (intPad (f.hour' 2));  		}  		else if (c == 'h') {  			//hour (24-hr time)  			sb.append (f.hour);  		}  		else if (c == 'M') {  			//0-padded minute  			sb.append (intPad (f.minute' 2));  		}  		else if (c == 'S') {  			//0-padded second  			sb.append (intPad (f.second' 2));  		}  		else if (c == '3') {  			//0-padded millisecond ticks (000-999)  			sb.append (intPad (f.secTicks' 3));  		}  		else if (c == 'a') {  			//Three letter short text day  			System.String[] dayNames = new System.String[] {  				"Sun"'  				"Mon"'  				"Tue"'  				"Wed"'  				"Thu"'  				"Fri"'  				"Sat"  			};  			sb.append (dayNames [f.dow - 1]);  		}  		else if (c == 'Z' || c == 'A' || c == 'B') {  			throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  		}  		else {  			throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  		}  	}  	else {  		sb.append (c);  	}  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: for (int i = 0; i < format.Length; i++) {  	char c = format [i];  	if (c == '%') {  		i++;  		if (i >= format.Length) {  			throw new System.SystemException ("date format string ends with %");  		}  		else {  			c = format [i];  		}  		if (c == '%') {  			//literal '%'  			sb.append ("%");  		}  		else if (c == 'Y') {  			//4-digit year  			sb.append (intPad (f.year' 4));  		}  		else if (c == 'y') {  			//2-digit year  			sb.append (intPad (f.year' 4).Substring (2));  		}  		else if (c == 'm') {  			//0-padded month  			sb.append (intPad (f.month' 2));  		}  		else if (c == 'n') {  			//numeric month  			sb.append (f.month);  		}  		else if (c == 'b') {  			//short text month  			System.String[] months = new System.String[] {  				"Jan"'  				"Feb"'  				"Mar"'  				"Apr"'  				"May"'  				"Jun"'  				"Jul"'  				"Aug"'  				"Sep"'  				"Oct"'  				"Nov"'  				"Dec"  			};  			sb.append (months [f.month - 1]);  		}  		else if (c == 'd') {  			//0-padded day of month  			sb.append (intPad (f.day' 2));  		}  		else if (c == 'e') {  			//day of month  			sb.append (f.day);  		}  		else if (c == 'H') {  			//0-padded hour (24-hr time)  			sb.append (intPad (f.hour' 2));  		}  		else if (c == 'h') {  			//hour (24-hr time)  			sb.append (f.hour);  		}  		else if (c == 'M') {  			//0-padded minute  			sb.append (intPad (f.minute' 2));  		}  		else if (c == 'S') {  			//0-padded second  			sb.append (intPad (f.second' 2));  		}  		else if (c == '3') {  			//0-padded millisecond ticks (000-999)  			sb.append (intPad (f.secTicks' 3));  		}  		else if (c == 'a') {  			//Three letter short text day  			System.String[] dayNames = new System.String[] {  				"Sun"'  				"Mon"'  				"Tue"'  				"Wed"'  				"Thu"'  				"Fri"'  				"Sat"  			};  			sb.append (dayNames [f.dow - 1]);  		}  		else if (c == 'Z' || c == 'A' || c == 'B') {  			throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  		}  		else {  			throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  		}  	}  	else {  		sb.append (c);  	}  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: for (int i = 0; i < format.Length; i++) {  	char c = format [i];  	if (c == '%') {  		i++;  		if (i >= format.Length) {  			throw new System.SystemException ("date format string ends with %");  		}  		else {  			c = format [i];  		}  		if (c == '%') {  			//literal '%'  			sb.append ("%");  		}  		else if (c == 'Y') {  			//4-digit year  			sb.append (intPad (f.year' 4));  		}  		else if (c == 'y') {  			//2-digit year  			sb.append (intPad (f.year' 4).Substring (2));  		}  		else if (c == 'm') {  			//0-padded month  			sb.append (intPad (f.month' 2));  		}  		else if (c == 'n') {  			//numeric month  			sb.append (f.month);  		}  		else if (c == 'b') {  			//short text month  			System.String[] months = new System.String[] {  				"Jan"'  				"Feb"'  				"Mar"'  				"Apr"'  				"May"'  				"Jun"'  				"Jul"'  				"Aug"'  				"Sep"'  				"Oct"'  				"Nov"'  				"Dec"  			};  			sb.append (months [f.month - 1]);  		}  		else if (c == 'd') {  			//0-padded day of month  			sb.append (intPad (f.day' 2));  		}  		else if (c == 'e') {  			//day of month  			sb.append (f.day);  		}  		else if (c == 'H') {  			//0-padded hour (24-hr time)  			sb.append (intPad (f.hour' 2));  		}  		else if (c == 'h') {  			//hour (24-hr time)  			sb.append (f.hour);  		}  		else if (c == 'M') {  			//0-padded minute  			sb.append (intPad (f.minute' 2));  		}  		else if (c == 'S') {  			//0-padded second  			sb.append (intPad (f.second' 2));  		}  		else if (c == '3') {  			//0-padded millisecond ticks (000-999)  			sb.append (intPad (f.secTicks' 3));  		}  		else if (c == 'a') {  			//Three letter short text day  			System.String[] dayNames = new System.String[] {  				"Sun"'  				"Mon"'  				"Tue"'  				"Wed"'  				"Thu"'  				"Fri"'  				"Sat"  			};  			sb.append (dayNames [f.dow - 1]);  		}  		else if (c == 'Z' || c == 'A' || c == 'B') {  			throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  		}  		else {  			throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  		}  	}  	else {  		sb.append (c);  	}  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: for (int i = 0; i < format.Length; i++) {  	char c = format [i];  	if (c == '%') {  		i++;  		if (i >= format.Length) {  			throw new System.SystemException ("date format string ends with %");  		}  		else {  			c = format [i];  		}  		if (c == '%') {  			//literal '%'  			sb.append ("%");  		}  		else if (c == 'Y') {  			//4-digit year  			sb.append (intPad (f.year' 4));  		}  		else if (c == 'y') {  			//2-digit year  			sb.append (intPad (f.year' 4).Substring (2));  		}  		else if (c == 'm') {  			//0-padded month  			sb.append (intPad (f.month' 2));  		}  		else if (c == 'n') {  			//numeric month  			sb.append (f.month);  		}  		else if (c == 'b') {  			//short text month  			System.String[] months = new System.String[] {  				"Jan"'  				"Feb"'  				"Mar"'  				"Apr"'  				"May"'  				"Jun"'  				"Jul"'  				"Aug"'  				"Sep"'  				"Oct"'  				"Nov"'  				"Dec"  			};  			sb.append (months [f.month - 1]);  		}  		else if (c == 'd') {  			//0-padded day of month  			sb.append (intPad (f.day' 2));  		}  		else if (c == 'e') {  			//day of month  			sb.append (f.day);  		}  		else if (c == 'H') {  			//0-padded hour (24-hr time)  			sb.append (intPad (f.hour' 2));  		}  		else if (c == 'h') {  			//hour (24-hr time)  			sb.append (f.hour);  		}  		else if (c == 'M') {  			//0-padded minute  			sb.append (intPad (f.minute' 2));  		}  		else if (c == 'S') {  			//0-padded second  			sb.append (intPad (f.second' 2));  		}  		else if (c == '3') {  			//0-padded millisecond ticks (000-999)  			sb.append (intPad (f.secTicks' 3));  		}  		else if (c == 'a') {  			//Three letter short text day  			System.String[] dayNames = new System.String[] {  				"Sun"'  				"Mon"'  				"Tue"'  				"Wed"'  				"Thu"'  				"Fri"'  				"Sat"  			};  			sb.append (dayNames [f.dow - 1]);  		}  		else if (c == 'Z' || c == 'A' || c == 'B') {  			throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  		}  		else {  			throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  		}  	}  	else {  		sb.append (c);  	}  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: for (int i = 0; i < format.Length; i++) {  	char c = format [i];  	if (c == '%') {  		i++;  		if (i >= format.Length) {  			throw new System.SystemException ("date format string ends with %");  		}  		else {  			c = format [i];  		}  		if (c == '%') {  			//literal '%'  			sb.append ("%");  		}  		else if (c == 'Y') {  			//4-digit year  			sb.append (intPad (f.year' 4));  		}  		else if (c == 'y') {  			//2-digit year  			sb.append (intPad (f.year' 4).Substring (2));  		}  		else if (c == 'm') {  			//0-padded month  			sb.append (intPad (f.month' 2));  		}  		else if (c == 'n') {  			//numeric month  			sb.append (f.month);  		}  		else if (c == 'b') {  			//short text month  			System.String[] months = new System.String[] {  				"Jan"'  				"Feb"'  				"Mar"'  				"Apr"'  				"May"'  				"Jun"'  				"Jul"'  				"Aug"'  				"Sep"'  				"Oct"'  				"Nov"'  				"Dec"  			};  			sb.append (months [f.month - 1]);  		}  		else if (c == 'd') {  			//0-padded day of month  			sb.append (intPad (f.day' 2));  		}  		else if (c == 'e') {  			//day of month  			sb.append (f.day);  		}  		else if (c == 'H') {  			//0-padded hour (24-hr time)  			sb.append (intPad (f.hour' 2));  		}  		else if (c == 'h') {  			//hour (24-hr time)  			sb.append (f.hour);  		}  		else if (c == 'M') {  			//0-padded minute  			sb.append (intPad (f.minute' 2));  		}  		else if (c == 'S') {  			//0-padded second  			sb.append (intPad (f.second' 2));  		}  		else if (c == '3') {  			//0-padded millisecond ticks (000-999)  			sb.append (intPad (f.secTicks' 3));  		}  		else if (c == 'a') {  			//Three letter short text day  			System.String[] dayNames = new System.String[] {  				"Sun"'  				"Mon"'  				"Tue"'  				"Wed"'  				"Thu"'  				"Fri"'  				"Sat"  			};  			sb.append (dayNames [f.dow - 1]);  		}  		else if (c == 'Z' || c == 'A' || c == 'B') {  			throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  		}  		else {  			throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  		}  	}  	else {  		sb.append (c);  	}  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: for (int i = 0; i < format.Length; i++) {  	char c = format [i];  	if (c == '%') {  		i++;  		if (i >= format.Length) {  			throw new System.SystemException ("date format string ends with %");  		}  		else {  			c = format [i];  		}  		if (c == '%') {  			//literal '%'  			sb.append ("%");  		}  		else if (c == 'Y') {  			//4-digit year  			sb.append (intPad (f.year' 4));  		}  		else if (c == 'y') {  			//2-digit year  			sb.append (intPad (f.year' 4).Substring (2));  		}  		else if (c == 'm') {  			//0-padded month  			sb.append (intPad (f.month' 2));  		}  		else if (c == 'n') {  			//numeric month  			sb.append (f.month);  		}  		else if (c == 'b') {  			//short text month  			System.String[] months = new System.String[] {  				"Jan"'  				"Feb"'  				"Mar"'  				"Apr"'  				"May"'  				"Jun"'  				"Jul"'  				"Aug"'  				"Sep"'  				"Oct"'  				"Nov"'  				"Dec"  			};  			sb.append (months [f.month - 1]);  		}  		else if (c == 'd') {  			//0-padded day of month  			sb.append (intPad (f.day' 2));  		}  		else if (c == 'e') {  			//day of month  			sb.append (f.day);  		}  		else if (c == 'H') {  			//0-padded hour (24-hr time)  			sb.append (intPad (f.hour' 2));  		}  		else if (c == 'h') {  			//hour (24-hr time)  			sb.append (f.hour);  		}  		else if (c == 'M') {  			//0-padded minute  			sb.append (intPad (f.minute' 2));  		}  		else if (c == 'S') {  			//0-padded second  			sb.append (intPad (f.second' 2));  		}  		else if (c == '3') {  			//0-padded millisecond ticks (000-999)  			sb.append (intPad (f.secTicks' 3));  		}  		else if (c == 'a') {  			//Three letter short text day  			System.String[] dayNames = new System.String[] {  				"Sun"'  				"Mon"'  				"Tue"'  				"Wed"'  				"Thu"'  				"Fri"'  				"Sat"  			};  			sb.append (dayNames [f.dow - 1]);  		}  		else if (c == 'Z' || c == 'A' || c == 'B') {  			throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  		}  		else {  			throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  		}  	}  	else {  		sb.append (c);  	}  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: for (int i = 0; i < format.Length; i++) {  	char c = format [i];  	if (c == '%') {  		i++;  		if (i >= format.Length) {  			throw new System.SystemException ("date format string ends with %");  		}  		else {  			c = format [i];  		}  		if (c == '%') {  			//literal '%'  			sb.append ("%");  		}  		else if (c == 'Y') {  			//4-digit year  			sb.append (intPad (f.year' 4));  		}  		else if (c == 'y') {  			//2-digit year  			sb.append (intPad (f.year' 4).Substring (2));  		}  		else if (c == 'm') {  			//0-padded month  			sb.append (intPad (f.month' 2));  		}  		else if (c == 'n') {  			//numeric month  			sb.append (f.month);  		}  		else if (c == 'b') {  			//short text month  			System.String[] months = new System.String[] {  				"Jan"'  				"Feb"'  				"Mar"'  				"Apr"'  				"May"'  				"Jun"'  				"Jul"'  				"Aug"'  				"Sep"'  				"Oct"'  				"Nov"'  				"Dec"  			};  			sb.append (months [f.month - 1]);  		}  		else if (c == 'd') {  			//0-padded day of month  			sb.append (intPad (f.day' 2));  		}  		else if (c == 'e') {  			//day of month  			sb.append (f.day);  		}  		else if (c == 'H') {  			//0-padded hour (24-hr time)  			sb.append (intPad (f.hour' 2));  		}  		else if (c == 'h') {  			//hour (24-hr time)  			sb.append (f.hour);  		}  		else if (c == 'M') {  			//0-padded minute  			sb.append (intPad (f.minute' 2));  		}  		else if (c == 'S') {  			//0-padded second  			sb.append (intPad (f.second' 2));  		}  		else if (c == '3') {  			//0-padded millisecond ticks (000-999)  			sb.append (intPad (f.secTicks' 3));  		}  		else if (c == 'a') {  			//Three letter short text day  			System.String[] dayNames = new System.String[] {  				"Sun"'  				"Mon"'  				"Tue"'  				"Wed"'  				"Thu"'  				"Fri"'  				"Sat"  			};  			sb.append (dayNames [f.dow - 1]);  		}  		else if (c == 'Z' || c == 'A' || c == 'B') {  			throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  		}  		else {  			throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  		}  	}  	else {  		sb.append (c);  	}  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: for (int i = 0; i < format.Length; i++) {  	char c = format [i];  	if (c == '%') {  		i++;  		if (i >= format.Length) {  			throw new System.SystemException ("date format string ends with %");  		}  		else {  			c = format [i];  		}  		if (c == '%') {  			//literal '%'  			sb.append ("%");  		}  		else if (c == 'Y') {  			//4-digit year  			sb.append (intPad (f.year' 4));  		}  		else if (c == 'y') {  			//2-digit year  			sb.append (intPad (f.year' 4).Substring (2));  		}  		else if (c == 'm') {  			//0-padded month  			sb.append (intPad (f.month' 2));  		}  		else if (c == 'n') {  			//numeric month  			sb.append (f.month);  		}  		else if (c == 'b') {  			//short text month  			System.String[] months = new System.String[] {  				"Jan"'  				"Feb"'  				"Mar"'  				"Apr"'  				"May"'  				"Jun"'  				"Jul"'  				"Aug"'  				"Sep"'  				"Oct"'  				"Nov"'  				"Dec"  			};  			sb.append (months [f.month - 1]);  		}  		else if (c == 'd') {  			//0-padded day of month  			sb.append (intPad (f.day' 2));  		}  		else if (c == 'e') {  			//day of month  			sb.append (f.day);  		}  		else if (c == 'H') {  			//0-padded hour (24-hr time)  			sb.append (intPad (f.hour' 2));  		}  		else if (c == 'h') {  			//hour (24-hr time)  			sb.append (f.hour);  		}  		else if (c == 'M') {  			//0-padded minute  			sb.append (intPad (f.minute' 2));  		}  		else if (c == 'S') {  			//0-padded second  			sb.append (intPad (f.second' 2));  		}  		else if (c == '3') {  			//0-padded millisecond ticks (000-999)  			sb.append (intPad (f.secTicks' 3));  		}  		else if (c == 'a') {  			//Three letter short text day  			System.String[] dayNames = new System.String[] {  				"Sun"'  				"Mon"'  				"Tue"'  				"Wed"'  				"Thu"'  				"Fri"'  				"Sat"  			};  			sb.append (dayNames [f.dow - 1]);  		}  		else if (c == 'Z' || c == 'A' || c == 'B') {  			throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  		}  		else {  			throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  		}  	}  	else {  		sb.append (c);  	}  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == '%') {  	i++;  	if (i >= format.Length) {  		throw new System.SystemException ("date format string ends with %");  	}  	else {  		c = format [i];  	}  	if (c == '%') {  		//literal '%'  		sb.append ("%");  	}  	else if (c == 'Y') {  		//4-digit year  		sb.append (intPad (f.year' 4));  	}  	else if (c == 'y') {  		//2-digit year  		sb.append (intPad (f.year' 4).Substring (2));  	}  	else if (c == 'm') {  		//0-padded month  		sb.append (intPad (f.month' 2));  	}  	else if (c == 'n') {  		//numeric month  		sb.append (f.month);  	}  	else if (c == 'b') {  		//short text month  		System.String[] months = new System.String[] {  			"Jan"'  			"Feb"'  			"Mar"'  			"Apr"'  			"May"'  			"Jun"'  			"Jul"'  			"Aug"'  			"Sep"'  			"Oct"'  			"Nov"'  			"Dec"  		};  		sb.append (months [f.month - 1]);  	}  	else if (c == 'd') {  		//0-padded day of month  		sb.append (intPad (f.day' 2));  	}  	else if (c == 'e') {  		//day of month  		sb.append (f.day);  	}  	else if (c == 'H') {  		//0-padded hour (24-hr time)  		sb.append (intPad (f.hour' 2));  	}  	else if (c == 'h') {  		//hour (24-hr time)  		sb.append (f.hour);  	}  	else if (c == 'M') {  		//0-padded minute  		sb.append (intPad (f.minute' 2));  	}  	else if (c == 'S') {  		//0-padded second  		sb.append (intPad (f.second' 2));  	}  	else if (c == '3') {  		//0-padded millisecond ticks (000-999)  		sb.append (intPad (f.secTicks' 3));  	}  	else if (c == 'a') {  		//Three letter short text day  		System.String[] dayNames = new System.String[] {  			"Sun"'  			"Mon"'  			"Tue"'  			"Wed"'  			"Thu"'  			"Fri"'  			"Sat"  		};  		sb.append (dayNames [f.dow - 1]);  	}  	else if (c == 'Z' || c == 'A' || c == 'B') {  		throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  	}  	else {  		throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  	}  }  else {  	sb.append (c);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == '%') {  	i++;  	if (i >= format.Length) {  		throw new System.SystemException ("date format string ends with %");  	}  	else {  		c = format [i];  	}  	if (c == '%') {  		//literal '%'  		sb.append ("%");  	}  	else if (c == 'Y') {  		//4-digit year  		sb.append (intPad (f.year' 4));  	}  	else if (c == 'y') {  		//2-digit year  		sb.append (intPad (f.year' 4).Substring (2));  	}  	else if (c == 'm') {  		//0-padded month  		sb.append (intPad (f.month' 2));  	}  	else if (c == 'n') {  		//numeric month  		sb.append (f.month);  	}  	else if (c == 'b') {  		//short text month  		System.String[] months = new System.String[] {  			"Jan"'  			"Feb"'  			"Mar"'  			"Apr"'  			"May"'  			"Jun"'  			"Jul"'  			"Aug"'  			"Sep"'  			"Oct"'  			"Nov"'  			"Dec"  		};  		sb.append (months [f.month - 1]);  	}  	else if (c == 'd') {  		//0-padded day of month  		sb.append (intPad (f.day' 2));  	}  	else if (c == 'e') {  		//day of month  		sb.append (f.day);  	}  	else if (c == 'H') {  		//0-padded hour (24-hr time)  		sb.append (intPad (f.hour' 2));  	}  	else if (c == 'h') {  		//hour (24-hr time)  		sb.append (f.hour);  	}  	else if (c == 'M') {  		//0-padded minute  		sb.append (intPad (f.minute' 2));  	}  	else if (c == 'S') {  		//0-padded second  		sb.append (intPad (f.second' 2));  	}  	else if (c == '3') {  		//0-padded millisecond ticks (000-999)  		sb.append (intPad (f.secTicks' 3));  	}  	else if (c == 'a') {  		//Three letter short text day  		System.String[] dayNames = new System.String[] {  			"Sun"'  			"Mon"'  			"Tue"'  			"Wed"'  			"Thu"'  			"Fri"'  			"Sat"  		};  		sb.append (dayNames [f.dow - 1]);  	}  	else if (c == 'Z' || c == 'A' || c == 'B') {  		throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  	}  	else {  		throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  	}  }  else {  	sb.append (c);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == '%') {  	i++;  	if (i >= format.Length) {  		throw new System.SystemException ("date format string ends with %");  	}  	else {  		c = format [i];  	}  	if (c == '%') {  		//literal '%'  		sb.append ("%");  	}  	else if (c == 'Y') {  		//4-digit year  		sb.append (intPad (f.year' 4));  	}  	else if (c == 'y') {  		//2-digit year  		sb.append (intPad (f.year' 4).Substring (2));  	}  	else if (c == 'm') {  		//0-padded month  		sb.append (intPad (f.month' 2));  	}  	else if (c == 'n') {  		//numeric month  		sb.append (f.month);  	}  	else if (c == 'b') {  		//short text month  		System.String[] months = new System.String[] {  			"Jan"'  			"Feb"'  			"Mar"'  			"Apr"'  			"May"'  			"Jun"'  			"Jul"'  			"Aug"'  			"Sep"'  			"Oct"'  			"Nov"'  			"Dec"  		};  		sb.append (months [f.month - 1]);  	}  	else if (c == 'd') {  		//0-padded day of month  		sb.append (intPad (f.day' 2));  	}  	else if (c == 'e') {  		//day of month  		sb.append (f.day);  	}  	else if (c == 'H') {  		//0-padded hour (24-hr time)  		sb.append (intPad (f.hour' 2));  	}  	else if (c == 'h') {  		//hour (24-hr time)  		sb.append (f.hour);  	}  	else if (c == 'M') {  		//0-padded minute  		sb.append (intPad (f.minute' 2));  	}  	else if (c == 'S') {  		//0-padded second  		sb.append (intPad (f.second' 2));  	}  	else if (c == '3') {  		//0-padded millisecond ticks (000-999)  		sb.append (intPad (f.secTicks' 3));  	}  	else if (c == 'a') {  		//Three letter short text day  		System.String[] dayNames = new System.String[] {  			"Sun"'  			"Mon"'  			"Tue"'  			"Wed"'  			"Thu"'  			"Fri"'  			"Sat"  		};  		sb.append (dayNames [f.dow - 1]);  	}  	else if (c == 'Z' || c == 'A' || c == 'B') {  		throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  	}  	else {  		throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  	}  }  else {  	sb.append (c);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == '%') {  	i++;  	if (i >= format.Length) {  		throw new System.SystemException ("date format string ends with %");  	}  	else {  		c = format [i];  	}  	if (c == '%') {  		//literal '%'  		sb.append ("%");  	}  	else if (c == 'Y') {  		//4-digit year  		sb.append (intPad (f.year' 4));  	}  	else if (c == 'y') {  		//2-digit year  		sb.append (intPad (f.year' 4).Substring (2));  	}  	else if (c == 'm') {  		//0-padded month  		sb.append (intPad (f.month' 2));  	}  	else if (c == 'n') {  		//numeric month  		sb.append (f.month);  	}  	else if (c == 'b') {  		//short text month  		System.String[] months = new System.String[] {  			"Jan"'  			"Feb"'  			"Mar"'  			"Apr"'  			"May"'  			"Jun"'  			"Jul"'  			"Aug"'  			"Sep"'  			"Oct"'  			"Nov"'  			"Dec"  		};  		sb.append (months [f.month - 1]);  	}  	else if (c == 'd') {  		//0-padded day of month  		sb.append (intPad (f.day' 2));  	}  	else if (c == 'e') {  		//day of month  		sb.append (f.day);  	}  	else if (c == 'H') {  		//0-padded hour (24-hr time)  		sb.append (intPad (f.hour' 2));  	}  	else if (c == 'h') {  		//hour (24-hr time)  		sb.append (f.hour);  	}  	else if (c == 'M') {  		//0-padded minute  		sb.append (intPad (f.minute' 2));  	}  	else if (c == 'S') {  		//0-padded second  		sb.append (intPad (f.second' 2));  	}  	else if (c == '3') {  		//0-padded millisecond ticks (000-999)  		sb.append (intPad (f.secTicks' 3));  	}  	else if (c == 'a') {  		//Three letter short text day  		System.String[] dayNames = new System.String[] {  			"Sun"'  			"Mon"'  			"Tue"'  			"Wed"'  			"Thu"'  			"Fri"'  			"Sat"  		};  		sb.append (dayNames [f.dow - 1]);  	}  	else if (c == 'Z' || c == 'A' || c == 'B') {  		throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  	}  	else {  		throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  	}  }  else {  	sb.append (c);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == '%') {  	i++;  	if (i >= format.Length) {  		throw new System.SystemException ("date format string ends with %");  	}  	else {  		c = format [i];  	}  	if (c == '%') {  		//literal '%'  		sb.append ("%");  	}  	else if (c == 'Y') {  		//4-digit year  		sb.append (intPad (f.year' 4));  	}  	else if (c == 'y') {  		//2-digit year  		sb.append (intPad (f.year' 4).Substring (2));  	}  	else if (c == 'm') {  		//0-padded month  		sb.append (intPad (f.month' 2));  	}  	else if (c == 'n') {  		//numeric month  		sb.append (f.month);  	}  	else if (c == 'b') {  		//short text month  		System.String[] months = new System.String[] {  			"Jan"'  			"Feb"'  			"Mar"'  			"Apr"'  			"May"'  			"Jun"'  			"Jul"'  			"Aug"'  			"Sep"'  			"Oct"'  			"Nov"'  			"Dec"  		};  		sb.append (months [f.month - 1]);  	}  	else if (c == 'd') {  		//0-padded day of month  		sb.append (intPad (f.day' 2));  	}  	else if (c == 'e') {  		//day of month  		sb.append (f.day);  	}  	else if (c == 'H') {  		//0-padded hour (24-hr time)  		sb.append (intPad (f.hour' 2));  	}  	else if (c == 'h') {  		//hour (24-hr time)  		sb.append (f.hour);  	}  	else if (c == 'M') {  		//0-padded minute  		sb.append (intPad (f.minute' 2));  	}  	else if (c == 'S') {  		//0-padded second  		sb.append (intPad (f.second' 2));  	}  	else if (c == '3') {  		//0-padded millisecond ticks (000-999)  		sb.append (intPad (f.secTicks' 3));  	}  	else if (c == 'a') {  		//Three letter short text day  		System.String[] dayNames = new System.String[] {  			"Sun"'  			"Mon"'  			"Tue"'  			"Wed"'  			"Thu"'  			"Fri"'  			"Sat"  		};  		sb.append (dayNames [f.dow - 1]);  	}  	else if (c == 'Z' || c == 'A' || c == 'B') {  		throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  	}  	else {  		throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  	}  }  else {  	sb.append (c);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == '%') {  	i++;  	if (i >= format.Length) {  		throw new System.SystemException ("date format string ends with %");  	}  	else {  		c = format [i];  	}  	if (c == '%') {  		//literal '%'  		sb.append ("%");  	}  	else if (c == 'Y') {  		//4-digit year  		sb.append (intPad (f.year' 4));  	}  	else if (c == 'y') {  		//2-digit year  		sb.append (intPad (f.year' 4).Substring (2));  	}  	else if (c == 'm') {  		//0-padded month  		sb.append (intPad (f.month' 2));  	}  	else if (c == 'n') {  		//numeric month  		sb.append (f.month);  	}  	else if (c == 'b') {  		//short text month  		System.String[] months = new System.String[] {  			"Jan"'  			"Feb"'  			"Mar"'  			"Apr"'  			"May"'  			"Jun"'  			"Jul"'  			"Aug"'  			"Sep"'  			"Oct"'  			"Nov"'  			"Dec"  		};  		sb.append (months [f.month - 1]);  	}  	else if (c == 'd') {  		//0-padded day of month  		sb.append (intPad (f.day' 2));  	}  	else if (c == 'e') {  		//day of month  		sb.append (f.day);  	}  	else if (c == 'H') {  		//0-padded hour (24-hr time)  		sb.append (intPad (f.hour' 2));  	}  	else if (c == 'h') {  		//hour (24-hr time)  		sb.append (f.hour);  	}  	else if (c == 'M') {  		//0-padded minute  		sb.append (intPad (f.minute' 2));  	}  	else if (c == 'S') {  		//0-padded second  		sb.append (intPad (f.second' 2));  	}  	else if (c == '3') {  		//0-padded millisecond ticks (000-999)  		sb.append (intPad (f.secTicks' 3));  	}  	else if (c == 'a') {  		//Three letter short text day  		System.String[] dayNames = new System.String[] {  			"Sun"'  			"Mon"'  			"Tue"'  			"Wed"'  			"Thu"'  			"Fri"'  			"Sat"  		};  		sb.append (dayNames [f.dow - 1]);  	}  	else if (c == 'Z' || c == 'A' || c == 'B') {  		throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  	}  	else {  		throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  	}  }  else {  	sb.append (c);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == '%') {  	i++;  	if (i >= format.Length) {  		throw new System.SystemException ("date format string ends with %");  	}  	else {  		c = format [i];  	}  	if (c == '%') {  		//literal '%'  		sb.append ("%");  	}  	else if (c == 'Y') {  		//4-digit year  		sb.append (intPad (f.year' 4));  	}  	else if (c == 'y') {  		//2-digit year  		sb.append (intPad (f.year' 4).Substring (2));  	}  	else if (c == 'm') {  		//0-padded month  		sb.append (intPad (f.month' 2));  	}  	else if (c == 'n') {  		//numeric month  		sb.append (f.month);  	}  	else if (c == 'b') {  		//short text month  		System.String[] months = new System.String[] {  			"Jan"'  			"Feb"'  			"Mar"'  			"Apr"'  			"May"'  			"Jun"'  			"Jul"'  			"Aug"'  			"Sep"'  			"Oct"'  			"Nov"'  			"Dec"  		};  		sb.append (months [f.month - 1]);  	}  	else if (c == 'd') {  		//0-padded day of month  		sb.append (intPad (f.day' 2));  	}  	else if (c == 'e') {  		//day of month  		sb.append (f.day);  	}  	else if (c == 'H') {  		//0-padded hour (24-hr time)  		sb.append (intPad (f.hour' 2));  	}  	else if (c == 'h') {  		//hour (24-hr time)  		sb.append (f.hour);  	}  	else if (c == 'M') {  		//0-padded minute  		sb.append (intPad (f.minute' 2));  	}  	else if (c == 'S') {  		//0-padded second  		sb.append (intPad (f.second' 2));  	}  	else if (c == '3') {  		//0-padded millisecond ticks (000-999)  		sb.append (intPad (f.secTicks' 3));  	}  	else if (c == 'a') {  		//Three letter short text day  		System.String[] dayNames = new System.String[] {  			"Sun"'  			"Mon"'  			"Tue"'  			"Wed"'  			"Thu"'  			"Fri"'  			"Sat"  		};  		sb.append (dayNames [f.dow - 1]);  	}  	else if (c == 'Z' || c == 'A' || c == 'B') {  		throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  	}  	else {  		throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  	}  }  else {  	sb.append (c);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == '%') {  	i++;  	if (i >= format.Length) {  		throw new System.SystemException ("date format string ends with %");  	}  	else {  		c = format [i];  	}  	if (c == '%') {  		//literal '%'  		sb.append ("%");  	}  	else if (c == 'Y') {  		//4-digit year  		sb.append (intPad (f.year' 4));  	}  	else if (c == 'y') {  		//2-digit year  		sb.append (intPad (f.year' 4).Substring (2));  	}  	else if (c == 'm') {  		//0-padded month  		sb.append (intPad (f.month' 2));  	}  	else if (c == 'n') {  		//numeric month  		sb.append (f.month);  	}  	else if (c == 'b') {  		//short text month  		System.String[] months = new System.String[] {  			"Jan"'  			"Feb"'  			"Mar"'  			"Apr"'  			"May"'  			"Jun"'  			"Jul"'  			"Aug"'  			"Sep"'  			"Oct"'  			"Nov"'  			"Dec"  		};  		sb.append (months [f.month - 1]);  	}  	else if (c == 'd') {  		//0-padded day of month  		sb.append (intPad (f.day' 2));  	}  	else if (c == 'e') {  		//day of month  		sb.append (f.day);  	}  	else if (c == 'H') {  		//0-padded hour (24-hr time)  		sb.append (intPad (f.hour' 2));  	}  	else if (c == 'h') {  		//hour (24-hr time)  		sb.append (f.hour);  	}  	else if (c == 'M') {  		//0-padded minute  		sb.append (intPad (f.minute' 2));  	}  	else if (c == 'S') {  		//0-padded second  		sb.append (intPad (f.second' 2));  	}  	else if (c == '3') {  		//0-padded millisecond ticks (000-999)  		sb.append (intPad (f.secTicks' 3));  	}  	else if (c == 'a') {  		//Three letter short text day  		System.String[] dayNames = new System.String[] {  			"Sun"'  			"Mon"'  			"Tue"'  			"Wed"'  			"Thu"'  			"Fri"'  			"Sat"  		};  		sb.append (dayNames [f.dow - 1]);  	}  	else if (c == 'Z' || c == 'A' || c == 'B') {  		throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  	}  	else {  		throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  	}  }  else {  	sb.append (c);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == '%') {  	i++;  	if (i >= format.Length) {  		throw new System.SystemException ("date format string ends with %");  	}  	else {  		c = format [i];  	}  	if (c == '%') {  		//literal '%'  		sb.append ("%");  	}  	else if (c == 'Y') {  		//4-digit year  		sb.append (intPad (f.year' 4));  	}  	else if (c == 'y') {  		//2-digit year  		sb.append (intPad (f.year' 4).Substring (2));  	}  	else if (c == 'm') {  		//0-padded month  		sb.append (intPad (f.month' 2));  	}  	else if (c == 'n') {  		//numeric month  		sb.append (f.month);  	}  	else if (c == 'b') {  		//short text month  		System.String[] months = new System.String[] {  			"Jan"'  			"Feb"'  			"Mar"'  			"Apr"'  			"May"'  			"Jun"'  			"Jul"'  			"Aug"'  			"Sep"'  			"Oct"'  			"Nov"'  			"Dec"  		};  		sb.append (months [f.month - 1]);  	}  	else if (c == 'd') {  		//0-padded day of month  		sb.append (intPad (f.day' 2));  	}  	else if (c == 'e') {  		//day of month  		sb.append (f.day);  	}  	else if (c == 'H') {  		//0-padded hour (24-hr time)  		sb.append (intPad (f.hour' 2));  	}  	else if (c == 'h') {  		//hour (24-hr time)  		sb.append (f.hour);  	}  	else if (c == 'M') {  		//0-padded minute  		sb.append (intPad (f.minute' 2));  	}  	else if (c == 'S') {  		//0-padded second  		sb.append (intPad (f.second' 2));  	}  	else if (c == '3') {  		//0-padded millisecond ticks (000-999)  		sb.append (intPad (f.secTicks' 3));  	}  	else if (c == 'a') {  		//Three letter short text day  		System.String[] dayNames = new System.String[] {  			"Sun"'  			"Mon"'  			"Tue"'  			"Wed"'  			"Thu"'  			"Fri"'  			"Sat"  		};  		sb.append (dayNames [f.dow - 1]);  	}  	else if (c == 'Z' || c == 'A' || c == 'B') {  		throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  	}  	else {  		throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  	}  }  else {  	sb.append (c);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == '%') {  	//literal '%'  	sb.append ("%");  }  else if (c == 'Y') {  	//4-digit year  	sb.append (intPad (f.year' 4));  }  else if (c == 'y') {  	//2-digit year  	sb.append (intPad (f.year' 4).Substring (2));  }  else if (c == 'm') {  	//0-padded month  	sb.append (intPad (f.month' 2));  }  else if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == '%') {  	//literal '%'  	sb.append ("%");  }  else if (c == 'Y') {  	//4-digit year  	sb.append (intPad (f.year' 4));  }  else if (c == 'y') {  	//2-digit year  	sb.append (intPad (f.year' 4).Substring (2));  }  else if (c == 'm') {  	//0-padded month  	sb.append (intPad (f.month' 2));  }  else if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == '%') {  	//literal '%'  	sb.append ("%");  }  else if (c == 'Y') {  	//4-digit year  	sb.append (intPad (f.year' 4));  }  else if (c == 'y') {  	//2-digit year  	sb.append (intPad (f.year' 4).Substring (2));  }  else if (c == 'm') {  	//0-padded month  	sb.append (intPad (f.month' 2));  }  else if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == '%') {  	//literal '%'  	sb.append ("%");  }  else if (c == 'Y') {  	//4-digit year  	sb.append (intPad (f.year' 4));  }  else if (c == 'y') {  	//2-digit year  	sb.append (intPad (f.year' 4).Substring (2));  }  else if (c == 'm') {  	//0-padded month  	sb.append (intPad (f.month' 2));  }  else if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == '%') {  	//literal '%'  	sb.append ("%");  }  else if (c == 'Y') {  	//4-digit year  	sb.append (intPad (f.year' 4));  }  else if (c == 'y') {  	//2-digit year  	sb.append (intPad (f.year' 4).Substring (2));  }  else if (c == 'm') {  	//0-padded month  	sb.append (intPad (f.month' 2));  }  else if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == '%') {  	//literal '%'  	sb.append ("%");  }  else if (c == 'Y') {  	//4-digit year  	sb.append (intPad (f.year' 4));  }  else if (c == 'y') {  	//2-digit year  	sb.append (intPad (f.year' 4).Substring (2));  }  else if (c == 'm') {  	//0-padded month  	sb.append (intPad (f.month' 2));  }  else if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == '%') {  	//literal '%'  	sb.append ("%");  }  else if (c == 'Y') {  	//4-digit year  	sb.append (intPad (f.year' 4));  }  else if (c == 'y') {  	//2-digit year  	sb.append (intPad (f.year' 4).Substring (2));  }  else if (c == 'm') {  	//0-padded month  	sb.append (intPad (f.month' 2));  }  else if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == '%') {  	//literal '%'  	sb.append ("%");  }  else if (c == 'Y') {  	//4-digit year  	sb.append (intPad (f.year' 4));  }  else if (c == 'y') {  	//2-digit year  	sb.append (intPad (f.year' 4).Substring (2));  }  else if (c == 'm') {  	//0-padded month  	sb.append (intPad (f.month' 2));  }  else if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == '%') {  	//literal '%'  	sb.append ("%");  }  else if (c == 'Y') {  	//4-digit year  	sb.append (intPad (f.year' 4));  }  else if (c == 'y') {  	//2-digit year  	sb.append (intPad (f.year' 4).Substring (2));  }  else if (c == 'm') {  	//0-padded month  	sb.append (intPad (f.month' 2));  }  else if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'Y') {  	//4-digit year  	sb.append (intPad (f.year' 4));  }  else if (c == 'y') {  	//2-digit year  	sb.append (intPad (f.year' 4).Substring (2));  }  else if (c == 'm') {  	//0-padded month  	sb.append (intPad (f.month' 2));  }  else if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'Y') {  	//4-digit year  	sb.append (intPad (f.year' 4));  }  else if (c == 'y') {  	//2-digit year  	sb.append (intPad (f.year' 4).Substring (2));  }  else if (c == 'm') {  	//0-padded month  	sb.append (intPad (f.month' 2));  }  else if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'Y') {  	//4-digit year  	sb.append (intPad (f.year' 4));  }  else if (c == 'y') {  	//2-digit year  	sb.append (intPad (f.year' 4).Substring (2));  }  else if (c == 'm') {  	//0-padded month  	sb.append (intPad (f.month' 2));  }  else if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'Y') {  	//4-digit year  	sb.append (intPad (f.year' 4));  }  else if (c == 'y') {  	//2-digit year  	sb.append (intPad (f.year' 4).Substring (2));  }  else if (c == 'm') {  	//0-padded month  	sb.append (intPad (f.month' 2));  }  else if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'Y') {  	//4-digit year  	sb.append (intPad (f.year' 4));  }  else if (c == 'y') {  	//2-digit year  	sb.append (intPad (f.year' 4).Substring (2));  }  else if (c == 'm') {  	//0-padded month  	sb.append (intPad (f.month' 2));  }  else if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'Y') {  	//4-digit year  	sb.append (intPad (f.year' 4));  }  else if (c == 'y') {  	//2-digit year  	sb.append (intPad (f.year' 4).Substring (2));  }  else if (c == 'm') {  	//0-padded month  	sb.append (intPad (f.month' 2));  }  else if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'Y') {  	//4-digit year  	sb.append (intPad (f.year' 4));  }  else if (c == 'y') {  	//2-digit year  	sb.append (intPad (f.year' 4).Substring (2));  }  else if (c == 'm') {  	//0-padded month  	sb.append (intPad (f.month' 2));  }  else if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'Y') {  	//4-digit year  	sb.append (intPad (f.year' 4));  }  else if (c == 'y') {  	//2-digit year  	sb.append (intPad (f.year' 4).Substring (2));  }  else if (c == 'm') {  	//0-padded month  	sb.append (intPad (f.month' 2));  }  else if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'Y') {  	//4-digit year  	sb.append (intPad (f.year' 4));  }  else if (c == 'y') {  	//2-digit year  	sb.append (intPad (f.year' 4).Substring (2));  }  else if (c == 'm') {  	//0-padded month  	sb.append (intPad (f.month' 2));  }  else if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: sb.append (intPad (f.year' 4));  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'y') {  	//2-digit year  	sb.append (intPad (f.year' 4).Substring (2));  }  else if (c == 'm') {  	//0-padded month  	sb.append (intPad (f.month' 2));  }  else if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'y') {  	//2-digit year  	sb.append (intPad (f.year' 4).Substring (2));  }  else if (c == 'm') {  	//0-padded month  	sb.append (intPad (f.month' 2));  }  else if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'y') {  	//2-digit year  	sb.append (intPad (f.year' 4).Substring (2));  }  else if (c == 'm') {  	//0-padded month  	sb.append (intPad (f.month' 2));  }  else if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'y') {  	//2-digit year  	sb.append (intPad (f.year' 4).Substring (2));  }  else if (c == 'm') {  	//0-padded month  	sb.append (intPad (f.month' 2));  }  else if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'y') {  	//2-digit year  	sb.append (intPad (f.year' 4).Substring (2));  }  else if (c == 'm') {  	//0-padded month  	sb.append (intPad (f.month' 2));  }  else if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'y') {  	//2-digit year  	sb.append (intPad (f.year' 4).Substring (2));  }  else if (c == 'm') {  	//0-padded month  	sb.append (intPad (f.month' 2));  }  else if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'y') {  	//2-digit year  	sb.append (intPad (f.year' 4).Substring (2));  }  else if (c == 'm') {  	//0-padded month  	sb.append (intPad (f.month' 2));  }  else if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'y') {  	//2-digit year  	sb.append (intPad (f.year' 4).Substring (2));  }  else if (c == 'm') {  	//0-padded month  	sb.append (intPad (f.month' 2));  }  else if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: sb.append (intPad (f.year' 4).Substring (2));  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: sb.append (intPad (f.year' 4).Substring (2));  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'm') {  	//0-padded month  	sb.append (intPad (f.month' 2));  }  else if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'm') {  	//0-padded month  	sb.append (intPad (f.month' 2));  }  else if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'm') {  	//0-padded month  	sb.append (intPad (f.month' 2));  }  else if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'm') {  	//0-padded month  	sb.append (intPad (f.month' 2));  }  else if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'm') {  	//0-padded month  	sb.append (intPad (f.month' 2));  }  else if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'm') {  	//0-padded month  	sb.append (intPad (f.month' 2));  }  else if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: sb.append (intPad (f.month' 2));  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'n') {  	//numeric month  	sb.append (f.month);  }  else if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'b') {  	//short text month  	System.String[] months = new System.String[] {  		"Jan"'  		"Feb"'  		"Mar"'  		"Apr"'  		"May"'  		"Jun"'  		"Jul"'  		"Aug"'  		"Sep"'  		"Oct"'  		"Nov"'  		"Dec"  	};  	sb.append (months [f.month - 1]);  }  else if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'd') {  	//0-padded day of month  	sb.append (intPad (f.day' 2));  }  else if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: sb.append (intPad (f.day' 2));  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'e') {  	//day of month  	sb.append (f.day);  }  else if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'H') {  	//0-padded hour (24-hr time)  	sb.append (intPad (f.hour' 2));  }  else if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: sb.append (intPad (f.hour' 2));  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'h') {  	//hour (24-hr time)  	sb.append (f.hour);  }  else if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'M') {  	//0-padded minute  	sb.append (intPad (f.minute' 2));  }  else if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: sb.append (intPad (f.minute' 2));  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == 'S') {  	//0-padded second  	sb.append (intPad (f.second' 2));  }  else if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: sb.append (intPad (f.second' 2));  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: if (c == '3') {  	//0-padded millisecond ticks (000-999)  	sb.append (intPad (f.secTicks' 3));  }  else if (c == 'a') {  	//Three letter short text day  	System.String[] dayNames = new System.String[] {  		"Sun"'  		"Mon"'  		"Tue"'  		"Wed"'  		"Thu"'  		"Fri"'  		"Sat"  	};  	sb.append (dayNames [f.dow - 1]);  }  else if (c == 'Z' || c == 'A' || c == 'B') {  	throw new System.SystemException ("unsupported escape in date format string [%" + c + "]");  }  else {  	throw new System.SystemException ("unrecognized escape in date format string [%" + c + "]");  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,format,The following statement contains a magic number: sb.append (intPad (f.secTicks' 3));  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,parseDate,The following statement contains a magic number: if (pieces.Count != 3)  	return false;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,parseDate,The following statement contains a magic number: try {  	f.year = System.Int32.Parse ((System.String)pieces [0]);  	f.month = System.Int32.Parse ((System.String)pieces [1]);  	f.day = System.Int32.Parse ((System.String)pieces [2]);  }  catch (System.FormatException nfe) {  	return false;  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,parseDate,The following statement contains a magic number: f.day = System.Int32.Parse ((System.String)pieces [2]);  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,parseTime,The following statement contains a magic number: SupportClass.CalendarManager.manager.SetDateTime (c' new System.DateTime (DateUtils.getDate (f' "UTC").Ticks + (((60 * timeOffset.hour) + timeOffset.minute) * 60 * 1000)));  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,parseTime,The following statement contains a magic number: SupportClass.CalendarManager.manager.SetDateTime (c' new System.DateTime (DateUtils.getDate (f' "UTC").Ticks + (((60 * timeOffset.hour) + timeOffset.minute) * 60 * 1000)));  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,parseTime,The following statement contains a magic number: SupportClass.CalendarManager.manager.SetDateTime (c' new System.DateTime (DateUtils.getDate (f' "UTC").Ticks + (((60 * timeOffset.hour) + timeOffset.minute) * 60 * 1000)));  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,parseRawTime,The following statement contains a magic number: if (pieces.Count != 2 && pieces.Count != 3)  	return false;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,parseRawTime,The following statement contains a magic number: if (pieces.Count != 2 && pieces.Count != 3)  	return false;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,parseRawTime,The following statement contains a magic number: try {  	f.hour = System.Int32.Parse ((System.String)pieces [0]);  	f.minute = System.Int32.Parse ((System.String)pieces [1]);  	if (pieces.Count == 3) {  		System.String secStr = (System.String)pieces [2];  		int i;  		for (i = 0; i < secStr.Length; i++) {  			char c = secStr [i];  			if (!System.Char.IsDigit (c) && c != '.')  				break;  		}  		secStr = secStr.Substring (0' (i) - (0));  		double fsec = System.Double.Parse (secStr);  		//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'"  		f.second = (int)fsec;  		//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'"  		f.secTicks = (int)(1000.0 * (fsec - f.second));  	}  }  catch (System.FormatException nfe) {  	return false;  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,parseRawTime,The following statement contains a magic number: try {  	f.hour = System.Int32.Parse ((System.String)pieces [0]);  	f.minute = System.Int32.Parse ((System.String)pieces [1]);  	if (pieces.Count == 3) {  		System.String secStr = (System.String)pieces [2];  		int i;  		for (i = 0; i < secStr.Length; i++) {  			char c = secStr [i];  			if (!System.Char.IsDigit (c) && c != '.')  				break;  		}  		secStr = secStr.Substring (0' (i) - (0));  		double fsec = System.Double.Parse (secStr);  		//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'"  		f.second = (int)fsec;  		//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'"  		f.secTicks = (int)(1000.0 * (fsec - f.second));  	}  }  catch (System.FormatException nfe) {  	return false;  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,parseRawTime,The following statement contains a magic number: try {  	f.hour = System.Int32.Parse ((System.String)pieces [0]);  	f.minute = System.Int32.Parse ((System.String)pieces [1]);  	if (pieces.Count == 3) {  		System.String secStr = (System.String)pieces [2];  		int i;  		for (i = 0; i < secStr.Length; i++) {  			char c = secStr [i];  			if (!System.Char.IsDigit (c) && c != '.')  				break;  		}  		secStr = secStr.Substring (0' (i) - (0));  		double fsec = System.Double.Parse (secStr);  		//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'"  		f.second = (int)fsec;  		//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'"  		f.secTicks = (int)(1000.0 * (fsec - f.second));  	}  }  catch (System.FormatException nfe) {  	return false;  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,parseRawTime,The following statement contains a magic number: if (pieces.Count == 3) {  	System.String secStr = (System.String)pieces [2];  	int i;  	for (i = 0; i < secStr.Length; i++) {  		char c = secStr [i];  		if (!System.Char.IsDigit (c) && c != '.')  			break;  	}  	secStr = secStr.Substring (0' (i) - (0));  	double fsec = System.Double.Parse (secStr);  	//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'"  	f.second = (int)fsec;  	//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'"  	f.secTicks = (int)(1000.0 * (fsec - f.second));  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,parseRawTime,The following statement contains a magic number: if (pieces.Count == 3) {  	System.String secStr = (System.String)pieces [2];  	int i;  	for (i = 0; i < secStr.Length; i++) {  		char c = secStr [i];  		if (!System.Char.IsDigit (c) && c != '.')  			break;  	}  	secStr = secStr.Substring (0' (i) - (0));  	double fsec = System.Double.Parse (secStr);  	//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'"  	f.second = (int)fsec;  	//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'"  	f.secTicks = (int)(1000.0 * (fsec - f.second));  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,parseRawTime,The following statement contains a magic number: if (pieces.Count == 3) {  	System.String secStr = (System.String)pieces [2];  	int i;  	for (i = 0; i < secStr.Length; i++) {  		char c = secStr [i];  		if (!System.Char.IsDigit (c) && c != '.')  			break;  	}  	secStr = secStr.Substring (0' (i) - (0));  	double fsec = System.Double.Parse (secStr);  	//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'"  	f.second = (int)fsec;  	//UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'"  	f.secTicks = (int)(1000.0 * (fsec - f.second));  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,parseRawTime,The following statement contains a magic number: f.secTicks = (int)(1000.0 * (fsec - f.second));  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,daysInMonth,The following statement contains a magic number: if (month == Calendar.APRIL || month == Calendar.JUNE || month == Calendar.SEPTEMBER || month == Calendar.NOVEMBER) {  	return 30;  }  else {  	//UPGRADE_ISSUE: Field 'java.util.Calendar.FEBRUARY' was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1000_javautilCalendarFEBRUARY_f'"  	if (month == Calendar.FEBRUARY) {  		return 28 + (isLeap (year) ? 1 : 0);  	}  	else {  		return 31;  	}  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,daysInMonth,The following statement contains a magic number: if (month == Calendar.APRIL || month == Calendar.JUNE || month == Calendar.SEPTEMBER || month == Calendar.NOVEMBER) {  	return 30;  }  else {  	//UPGRADE_ISSUE: Field 'java.util.Calendar.FEBRUARY' was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1000_javautilCalendarFEBRUARY_f'"  	if (month == Calendar.FEBRUARY) {  		return 28 + (isLeap (year) ? 1 : 0);  	}  	else {  		return 31;  	}  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,daysInMonth,The following statement contains a magic number: if (month == Calendar.APRIL || month == Calendar.JUNE || month == Calendar.SEPTEMBER || month == Calendar.NOVEMBER) {  	return 30;  }  else {  	//UPGRADE_ISSUE: Field 'java.util.Calendar.FEBRUARY' was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1000_javautilCalendarFEBRUARY_f'"  	if (month == Calendar.FEBRUARY) {  		return 28 + (isLeap (year) ? 1 : 0);  	}  	else {  		return 31;  	}  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,daysInMonth,The following statement contains a magic number: return 30;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,daysInMonth,The following statement contains a magic number: if (month == Calendar.FEBRUARY) {  	return 28 + (isLeap (year) ? 1 : 0);  }  else {  	return 31;  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,daysInMonth,The following statement contains a magic number: if (month == Calendar.FEBRUARY) {  	return 28 + (isLeap (year) ? 1 : 0);  }  else {  	return 31;  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,daysInMonth,The following statement contains a magic number: return 28 + (isLeap (year) ? 1 : 0);  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,daysInMonth,The following statement contains a magic number: return 31;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,isLeap,The following statement contains a magic number: return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,isLeap,The following statement contains a magic number: return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,isLeap,The following statement contains a magic number: return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDaysFromToday,The following statement contains a magic number: if (daysAgo == 0) {  	return Localization.get_Renamed ("date.today");  }  else if (daysAgo == 1) {  	return Localization.get_Renamed ("date.yesterday");  }  else if (daysAgo == 2) {  	return Localization.get_Renamed ("date.twoago"' new System.String[] {  		System.Convert.ToString (daysAgo)  	});  }  else if (daysAgo > 2 && daysAgo <= 6) {  	return Localization.get_Renamed ("date.nago"' new System.String[] {  		System.Convert.ToString (daysAgo)  	});  }  else if (daysAgo == -1) {  	return Localization.get_Renamed ("date.tomorrow");  }  else if (daysAgo < -1 && daysAgo >= -6) {  	return Localization.get_Renamed ("date.nfromnow"' new System.String[] {  		System.Convert.ToString (-daysAgo)  	});  }  else {  	return DateUtils.formatDate (f' DateUtils.FORMAT_HUMAN_READABLE_SHORT);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDaysFromToday,The following statement contains a magic number: if (daysAgo == 0) {  	return Localization.get_Renamed ("date.today");  }  else if (daysAgo == 1) {  	return Localization.get_Renamed ("date.yesterday");  }  else if (daysAgo == 2) {  	return Localization.get_Renamed ("date.twoago"' new System.String[] {  		System.Convert.ToString (daysAgo)  	});  }  else if (daysAgo > 2 && daysAgo <= 6) {  	return Localization.get_Renamed ("date.nago"' new System.String[] {  		System.Convert.ToString (daysAgo)  	});  }  else if (daysAgo == -1) {  	return Localization.get_Renamed ("date.tomorrow");  }  else if (daysAgo < -1 && daysAgo >= -6) {  	return Localization.get_Renamed ("date.nfromnow"' new System.String[] {  		System.Convert.ToString (-daysAgo)  	});  }  else {  	return DateUtils.formatDate (f' DateUtils.FORMAT_HUMAN_READABLE_SHORT);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDaysFromToday,The following statement contains a magic number: if (daysAgo == 0) {  	return Localization.get_Renamed ("date.today");  }  else if (daysAgo == 1) {  	return Localization.get_Renamed ("date.yesterday");  }  else if (daysAgo == 2) {  	return Localization.get_Renamed ("date.twoago"' new System.String[] {  		System.Convert.ToString (daysAgo)  	});  }  else if (daysAgo > 2 && daysAgo <= 6) {  	return Localization.get_Renamed ("date.nago"' new System.String[] {  		System.Convert.ToString (daysAgo)  	});  }  else if (daysAgo == -1) {  	return Localization.get_Renamed ("date.tomorrow");  }  else if (daysAgo < -1 && daysAgo >= -6) {  	return Localization.get_Renamed ("date.nfromnow"' new System.String[] {  		System.Convert.ToString (-daysAgo)  	});  }  else {  	return DateUtils.formatDate (f' DateUtils.FORMAT_HUMAN_READABLE_SHORT);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDaysFromToday,The following statement contains a magic number: if (daysAgo == 0) {  	return Localization.get_Renamed ("date.today");  }  else if (daysAgo == 1) {  	return Localization.get_Renamed ("date.yesterday");  }  else if (daysAgo == 2) {  	return Localization.get_Renamed ("date.twoago"' new System.String[] {  		System.Convert.ToString (daysAgo)  	});  }  else if (daysAgo > 2 && daysAgo <= 6) {  	return Localization.get_Renamed ("date.nago"' new System.String[] {  		System.Convert.ToString (daysAgo)  	});  }  else if (daysAgo == -1) {  	return Localization.get_Renamed ("date.tomorrow");  }  else if (daysAgo < -1 && daysAgo >= -6) {  	return Localization.get_Renamed ("date.nfromnow"' new System.String[] {  		System.Convert.ToString (-daysAgo)  	});  }  else {  	return DateUtils.formatDate (f' DateUtils.FORMAT_HUMAN_READABLE_SHORT);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDaysFromToday,The following statement contains a magic number: if (daysAgo == 1) {  	return Localization.get_Renamed ("date.yesterday");  }  else if (daysAgo == 2) {  	return Localization.get_Renamed ("date.twoago"' new System.String[] {  		System.Convert.ToString (daysAgo)  	});  }  else if (daysAgo > 2 && daysAgo <= 6) {  	return Localization.get_Renamed ("date.nago"' new System.String[] {  		System.Convert.ToString (daysAgo)  	});  }  else if (daysAgo == -1) {  	return Localization.get_Renamed ("date.tomorrow");  }  else if (daysAgo < -1 && daysAgo >= -6) {  	return Localization.get_Renamed ("date.nfromnow"' new System.String[] {  		System.Convert.ToString (-daysAgo)  	});  }  else {  	return DateUtils.formatDate (f' DateUtils.FORMAT_HUMAN_READABLE_SHORT);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDaysFromToday,The following statement contains a magic number: if (daysAgo == 1) {  	return Localization.get_Renamed ("date.yesterday");  }  else if (daysAgo == 2) {  	return Localization.get_Renamed ("date.twoago"' new System.String[] {  		System.Convert.ToString (daysAgo)  	});  }  else if (daysAgo > 2 && daysAgo <= 6) {  	return Localization.get_Renamed ("date.nago"' new System.String[] {  		System.Convert.ToString (daysAgo)  	});  }  else if (daysAgo == -1) {  	return Localization.get_Renamed ("date.tomorrow");  }  else if (daysAgo < -1 && daysAgo >= -6) {  	return Localization.get_Renamed ("date.nfromnow"' new System.String[] {  		System.Convert.ToString (-daysAgo)  	});  }  else {  	return DateUtils.formatDate (f' DateUtils.FORMAT_HUMAN_READABLE_SHORT);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDaysFromToday,The following statement contains a magic number: if (daysAgo == 1) {  	return Localization.get_Renamed ("date.yesterday");  }  else if (daysAgo == 2) {  	return Localization.get_Renamed ("date.twoago"' new System.String[] {  		System.Convert.ToString (daysAgo)  	});  }  else if (daysAgo > 2 && daysAgo <= 6) {  	return Localization.get_Renamed ("date.nago"' new System.String[] {  		System.Convert.ToString (daysAgo)  	});  }  else if (daysAgo == -1) {  	return Localization.get_Renamed ("date.tomorrow");  }  else if (daysAgo < -1 && daysAgo >= -6) {  	return Localization.get_Renamed ("date.nfromnow"' new System.String[] {  		System.Convert.ToString (-daysAgo)  	});  }  else {  	return DateUtils.formatDate (f' DateUtils.FORMAT_HUMAN_READABLE_SHORT);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDaysFromToday,The following statement contains a magic number: if (daysAgo == 1) {  	return Localization.get_Renamed ("date.yesterday");  }  else if (daysAgo == 2) {  	return Localization.get_Renamed ("date.twoago"' new System.String[] {  		System.Convert.ToString (daysAgo)  	});  }  else if (daysAgo > 2 && daysAgo <= 6) {  	return Localization.get_Renamed ("date.nago"' new System.String[] {  		System.Convert.ToString (daysAgo)  	});  }  else if (daysAgo == -1) {  	return Localization.get_Renamed ("date.tomorrow");  }  else if (daysAgo < -1 && daysAgo >= -6) {  	return Localization.get_Renamed ("date.nfromnow"' new System.String[] {  		System.Convert.ToString (-daysAgo)  	});  }  else {  	return DateUtils.formatDate (f' DateUtils.FORMAT_HUMAN_READABLE_SHORT);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDaysFromToday,The following statement contains a magic number: if (daysAgo == 2) {  	return Localization.get_Renamed ("date.twoago"' new System.String[] {  		System.Convert.ToString (daysAgo)  	});  }  else if (daysAgo > 2 && daysAgo <= 6) {  	return Localization.get_Renamed ("date.nago"' new System.String[] {  		System.Convert.ToString (daysAgo)  	});  }  else if (daysAgo == -1) {  	return Localization.get_Renamed ("date.tomorrow");  }  else if (daysAgo < -1 && daysAgo >= -6) {  	return Localization.get_Renamed ("date.nfromnow"' new System.String[] {  		System.Convert.ToString (-daysAgo)  	});  }  else {  	return DateUtils.formatDate (f' DateUtils.FORMAT_HUMAN_READABLE_SHORT);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDaysFromToday,The following statement contains a magic number: if (daysAgo == 2) {  	return Localization.get_Renamed ("date.twoago"' new System.String[] {  		System.Convert.ToString (daysAgo)  	});  }  else if (daysAgo > 2 && daysAgo <= 6) {  	return Localization.get_Renamed ("date.nago"' new System.String[] {  		System.Convert.ToString (daysAgo)  	});  }  else if (daysAgo == -1) {  	return Localization.get_Renamed ("date.tomorrow");  }  else if (daysAgo < -1 && daysAgo >= -6) {  	return Localization.get_Renamed ("date.nfromnow"' new System.String[] {  		System.Convert.ToString (-daysAgo)  	});  }  else {  	return DateUtils.formatDate (f' DateUtils.FORMAT_HUMAN_READABLE_SHORT);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDaysFromToday,The following statement contains a magic number: if (daysAgo == 2) {  	return Localization.get_Renamed ("date.twoago"' new System.String[] {  		System.Convert.ToString (daysAgo)  	});  }  else if (daysAgo > 2 && daysAgo <= 6) {  	return Localization.get_Renamed ("date.nago"' new System.String[] {  		System.Convert.ToString (daysAgo)  	});  }  else if (daysAgo == -1) {  	return Localization.get_Renamed ("date.tomorrow");  }  else if (daysAgo < -1 && daysAgo >= -6) {  	return Localization.get_Renamed ("date.nfromnow"' new System.String[] {  		System.Convert.ToString (-daysAgo)  	});  }  else {  	return DateUtils.formatDate (f' DateUtils.FORMAT_HUMAN_READABLE_SHORT);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDaysFromToday,The following statement contains a magic number: if (daysAgo == 2) {  	return Localization.get_Renamed ("date.twoago"' new System.String[] {  		System.Convert.ToString (daysAgo)  	});  }  else if (daysAgo > 2 && daysAgo <= 6) {  	return Localization.get_Renamed ("date.nago"' new System.String[] {  		System.Convert.ToString (daysAgo)  	});  }  else if (daysAgo == -1) {  	return Localization.get_Renamed ("date.tomorrow");  }  else if (daysAgo < -1 && daysAgo >= -6) {  	return Localization.get_Renamed ("date.nfromnow"' new System.String[] {  		System.Convert.ToString (-daysAgo)  	});  }  else {  	return DateUtils.formatDate (f' DateUtils.FORMAT_HUMAN_READABLE_SHORT);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDaysFromToday,The following statement contains a magic number: if (daysAgo > 2 && daysAgo <= 6) {  	return Localization.get_Renamed ("date.nago"' new System.String[] {  		System.Convert.ToString (daysAgo)  	});  }  else if (daysAgo == -1) {  	return Localization.get_Renamed ("date.tomorrow");  }  else if (daysAgo < -1 && daysAgo >= -6) {  	return Localization.get_Renamed ("date.nfromnow"' new System.String[] {  		System.Convert.ToString (-daysAgo)  	});  }  else {  	return DateUtils.formatDate (f' DateUtils.FORMAT_HUMAN_READABLE_SHORT);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDaysFromToday,The following statement contains a magic number: if (daysAgo > 2 && daysAgo <= 6) {  	return Localization.get_Renamed ("date.nago"' new System.String[] {  		System.Convert.ToString (daysAgo)  	});  }  else if (daysAgo == -1) {  	return Localization.get_Renamed ("date.tomorrow");  }  else if (daysAgo < -1 && daysAgo >= -6) {  	return Localization.get_Renamed ("date.nfromnow"' new System.String[] {  		System.Convert.ToString (-daysAgo)  	});  }  else {  	return DateUtils.formatDate (f' DateUtils.FORMAT_HUMAN_READABLE_SHORT);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDaysFromToday,The following statement contains a magic number: if (daysAgo > 2 && daysAgo <= 6) {  	return Localization.get_Renamed ("date.nago"' new System.String[] {  		System.Convert.ToString (daysAgo)  	});  }  else if (daysAgo == -1) {  	return Localization.get_Renamed ("date.tomorrow");  }  else if (daysAgo < -1 && daysAgo >= -6) {  	return Localization.get_Renamed ("date.nfromnow"' new System.String[] {  		System.Convert.ToString (-daysAgo)  	});  }  else {  	return DateUtils.formatDate (f' DateUtils.FORMAT_HUMAN_READABLE_SHORT);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDaysFromToday,The following statement contains a magic number: if (daysAgo == -1) {  	return Localization.get_Renamed ("date.tomorrow");  }  else if (daysAgo < -1 && daysAgo >= -6) {  	return Localization.get_Renamed ("date.nfromnow"' new System.String[] {  		System.Convert.ToString (-daysAgo)  	});  }  else {  	return DateUtils.formatDate (f' DateUtils.FORMAT_HUMAN_READABLE_SHORT);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,formatDaysFromToday,The following statement contains a magic number: if (daysAgo < -1 && daysAgo >= -6) {  	return Localization.get_Renamed ("date.nfromnow"' new System.String[] {  		System.Convert.ToString (-daysAgo)  	});  }  else {  	return DateUtils.formatDate (f' DateUtils.FORMAT_HUMAN_READABLE_SHORT);  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (type.Equals ("week")) {  	//1 week period  	//start: day of week that starts period  	//beginning: true=return first day of period' false=return last day of period  	//includeToday: whether today's date can count as the last day of the period  	//nAgo: how many periods ago; 1=most recent period' 0=period in progress  	int target_dow = -1' current_dow = -1' diff;  	int offset = (includeToday ? 1 : 0);  	if (start.Equals ("sun"))  		target_dow = 0;  	else if (start.Equals ("mon"))  		target_dow = 1;  	else if (start.Equals ("tue"))  		target_dow = 2;  	else if (start.Equals ("wed"))  		target_dow = 3;  	else if (start.Equals ("thu"))  		target_dow = 4;  	else if (start.Equals ("fri"))  		target_dow = 5;  	else if (start.Equals ("sat"))  		target_dow = 6;  	if (target_dow == -1)  		throw new System.SystemException ();  	System.Globalization.Calendar cd = new System.Globalization.GregorianCalendar ();  	//UPGRADE_TODO: The differences in the format  of parameters for method 'java.util.Calendar.setTime'  may cause compilation errors.  "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1092'"  	SupportClass.CalendarManager.manager.SetDateTime (cd' ref_Renamed);  	//UPGRADE_TODO: Method 'java.util.Calendar.get' was converted to 'SupportClass.CalendarManager.Get' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilCalendarget_int'"  	switch (SupportClass.CalendarManager.manager.Get (cd' SupportClass.CalendarManager.DAY_OF_WEEK)) {  	case (int)System.DayOfWeek.Sunday:  		current_dow = 0;  		break;  	case (int)System.DayOfWeek.Monday:  		current_dow = 1;  		break;  	case (int)System.DayOfWeek.Tuesday:  		current_dow = 2;  		break;  	case (int)System.DayOfWeek.Wednesday:  		current_dow = 3;  		break;  	case (int)System.DayOfWeek.Thursday:  		current_dow = 4;  		break;  	case (int)System.DayOfWeek.Friday:  		current_dow = 5;  		break;  	case (int)System.DayOfWeek.Saturday:  		current_dow = 6;  		break;  	default:  		throw new System.SystemException ();  	//something is wrong  	}  	diff = (((current_dow - target_dow) + (7 + offset)) % 7 - offset) + (7 * nAgo) - (beginning ? 0 : 6);  	//booyah  	//UPGRADE_TODO: Constructor 'java.util.Date.Date' was converted to 'System.DateTime.DateTime' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDateDate_long'"  	//UPGRADE_TODO: Method 'java.util.Date.getTime' was converted to 'System.DateTime.Ticks' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDategetTime'"  	d = new System.DateTime (ref_Renamed.Ticks - diff * DAY_IN_MS);  }  else if (type.Equals ("month")) {  	//not supported  }  else {  	throw new System.ArgumentException ();  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (type.Equals ("week")) {  	//1 week period  	//start: day of week that starts period  	//beginning: true=return first day of period' false=return last day of period  	//includeToday: whether today's date can count as the last day of the period  	//nAgo: how many periods ago; 1=most recent period' 0=period in progress  	int target_dow = -1' current_dow = -1' diff;  	int offset = (includeToday ? 1 : 0);  	if (start.Equals ("sun"))  		target_dow = 0;  	else if (start.Equals ("mon"))  		target_dow = 1;  	else if (start.Equals ("tue"))  		target_dow = 2;  	else if (start.Equals ("wed"))  		target_dow = 3;  	else if (start.Equals ("thu"))  		target_dow = 4;  	else if (start.Equals ("fri"))  		target_dow = 5;  	else if (start.Equals ("sat"))  		target_dow = 6;  	if (target_dow == -1)  		throw new System.SystemException ();  	System.Globalization.Calendar cd = new System.Globalization.GregorianCalendar ();  	//UPGRADE_TODO: The differences in the format  of parameters for method 'java.util.Calendar.setTime'  may cause compilation errors.  "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1092'"  	SupportClass.CalendarManager.manager.SetDateTime (cd' ref_Renamed);  	//UPGRADE_TODO: Method 'java.util.Calendar.get' was converted to 'SupportClass.CalendarManager.Get' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilCalendarget_int'"  	switch (SupportClass.CalendarManager.manager.Get (cd' SupportClass.CalendarManager.DAY_OF_WEEK)) {  	case (int)System.DayOfWeek.Sunday:  		current_dow = 0;  		break;  	case (int)System.DayOfWeek.Monday:  		current_dow = 1;  		break;  	case (int)System.DayOfWeek.Tuesday:  		current_dow = 2;  		break;  	case (int)System.DayOfWeek.Wednesday:  		current_dow = 3;  		break;  	case (int)System.DayOfWeek.Thursday:  		current_dow = 4;  		break;  	case (int)System.DayOfWeek.Friday:  		current_dow = 5;  		break;  	case (int)System.DayOfWeek.Saturday:  		current_dow = 6;  		break;  	default:  		throw new System.SystemException ();  	//something is wrong  	}  	diff = (((current_dow - target_dow) + (7 + offset)) % 7 - offset) + (7 * nAgo) - (beginning ? 0 : 6);  	//booyah  	//UPGRADE_TODO: Constructor 'java.util.Date.Date' was converted to 'System.DateTime.DateTime' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDateDate_long'"  	//UPGRADE_TODO: Method 'java.util.Date.getTime' was converted to 'System.DateTime.Ticks' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDategetTime'"  	d = new System.DateTime (ref_Renamed.Ticks - diff * DAY_IN_MS);  }  else if (type.Equals ("month")) {  	//not supported  }  else {  	throw new System.ArgumentException ();  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (type.Equals ("week")) {  	//1 week period  	//start: day of week that starts period  	//beginning: true=return first day of period' false=return last day of period  	//includeToday: whether today's date can count as the last day of the period  	//nAgo: how many periods ago; 1=most recent period' 0=period in progress  	int target_dow = -1' current_dow = -1' diff;  	int offset = (includeToday ? 1 : 0);  	if (start.Equals ("sun"))  		target_dow = 0;  	else if (start.Equals ("mon"))  		target_dow = 1;  	else if (start.Equals ("tue"))  		target_dow = 2;  	else if (start.Equals ("wed"))  		target_dow = 3;  	else if (start.Equals ("thu"))  		target_dow = 4;  	else if (start.Equals ("fri"))  		target_dow = 5;  	else if (start.Equals ("sat"))  		target_dow = 6;  	if (target_dow == -1)  		throw new System.SystemException ();  	System.Globalization.Calendar cd = new System.Globalization.GregorianCalendar ();  	//UPGRADE_TODO: The differences in the format  of parameters for method 'java.util.Calendar.setTime'  may cause compilation errors.  "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1092'"  	SupportClass.CalendarManager.manager.SetDateTime (cd' ref_Renamed);  	//UPGRADE_TODO: Method 'java.util.Calendar.get' was converted to 'SupportClass.CalendarManager.Get' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilCalendarget_int'"  	switch (SupportClass.CalendarManager.manager.Get (cd' SupportClass.CalendarManager.DAY_OF_WEEK)) {  	case (int)System.DayOfWeek.Sunday:  		current_dow = 0;  		break;  	case (int)System.DayOfWeek.Monday:  		current_dow = 1;  		break;  	case (int)System.DayOfWeek.Tuesday:  		current_dow = 2;  		break;  	case (int)System.DayOfWeek.Wednesday:  		current_dow = 3;  		break;  	case (int)System.DayOfWeek.Thursday:  		current_dow = 4;  		break;  	case (int)System.DayOfWeek.Friday:  		current_dow = 5;  		break;  	case (int)System.DayOfWeek.Saturday:  		current_dow = 6;  		break;  	default:  		throw new System.SystemException ();  	//something is wrong  	}  	diff = (((current_dow - target_dow) + (7 + offset)) % 7 - offset) + (7 * nAgo) - (beginning ? 0 : 6);  	//booyah  	//UPGRADE_TODO: Constructor 'java.util.Date.Date' was converted to 'System.DateTime.DateTime' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDateDate_long'"  	//UPGRADE_TODO: Method 'java.util.Date.getTime' was converted to 'System.DateTime.Ticks' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDategetTime'"  	d = new System.DateTime (ref_Renamed.Ticks - diff * DAY_IN_MS);  }  else if (type.Equals ("month")) {  	//not supported  }  else {  	throw new System.ArgumentException ();  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (type.Equals ("week")) {  	//1 week period  	//start: day of week that starts period  	//beginning: true=return first day of period' false=return last day of period  	//includeToday: whether today's date can count as the last day of the period  	//nAgo: how many periods ago; 1=most recent period' 0=period in progress  	int target_dow = -1' current_dow = -1' diff;  	int offset = (includeToday ? 1 : 0);  	if (start.Equals ("sun"))  		target_dow = 0;  	else if (start.Equals ("mon"))  		target_dow = 1;  	else if (start.Equals ("tue"))  		target_dow = 2;  	else if (start.Equals ("wed"))  		target_dow = 3;  	else if (start.Equals ("thu"))  		target_dow = 4;  	else if (start.Equals ("fri"))  		target_dow = 5;  	else if (start.Equals ("sat"))  		target_dow = 6;  	if (target_dow == -1)  		throw new System.SystemException ();  	System.Globalization.Calendar cd = new System.Globalization.GregorianCalendar ();  	//UPGRADE_TODO: The differences in the format  of parameters for method 'java.util.Calendar.setTime'  may cause compilation errors.  "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1092'"  	SupportClass.CalendarManager.manager.SetDateTime (cd' ref_Renamed);  	//UPGRADE_TODO: Method 'java.util.Calendar.get' was converted to 'SupportClass.CalendarManager.Get' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilCalendarget_int'"  	switch (SupportClass.CalendarManager.manager.Get (cd' SupportClass.CalendarManager.DAY_OF_WEEK)) {  	case (int)System.DayOfWeek.Sunday:  		current_dow = 0;  		break;  	case (int)System.DayOfWeek.Monday:  		current_dow = 1;  		break;  	case (int)System.DayOfWeek.Tuesday:  		current_dow = 2;  		break;  	case (int)System.DayOfWeek.Wednesday:  		current_dow = 3;  		break;  	case (int)System.DayOfWeek.Thursday:  		current_dow = 4;  		break;  	case (int)System.DayOfWeek.Friday:  		current_dow = 5;  		break;  	case (int)System.DayOfWeek.Saturday:  		current_dow = 6;  		break;  	default:  		throw new System.SystemException ();  	//something is wrong  	}  	diff = (((current_dow - target_dow) + (7 + offset)) % 7 - offset) + (7 * nAgo) - (beginning ? 0 : 6);  	//booyah  	//UPGRADE_TODO: Constructor 'java.util.Date.Date' was converted to 'System.DateTime.DateTime' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDateDate_long'"  	//UPGRADE_TODO: Method 'java.util.Date.getTime' was converted to 'System.DateTime.Ticks' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDategetTime'"  	d = new System.DateTime (ref_Renamed.Ticks - diff * DAY_IN_MS);  }  else if (type.Equals ("month")) {  	//not supported  }  else {  	throw new System.ArgumentException ();  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (type.Equals ("week")) {  	//1 week period  	//start: day of week that starts period  	//beginning: true=return first day of period' false=return last day of period  	//includeToday: whether today's date can count as the last day of the period  	//nAgo: how many periods ago; 1=most recent period' 0=period in progress  	int target_dow = -1' current_dow = -1' diff;  	int offset = (includeToday ? 1 : 0);  	if (start.Equals ("sun"))  		target_dow = 0;  	else if (start.Equals ("mon"))  		target_dow = 1;  	else if (start.Equals ("tue"))  		target_dow = 2;  	else if (start.Equals ("wed"))  		target_dow = 3;  	else if (start.Equals ("thu"))  		target_dow = 4;  	else if (start.Equals ("fri"))  		target_dow = 5;  	else if (start.Equals ("sat"))  		target_dow = 6;  	if (target_dow == -1)  		throw new System.SystemException ();  	System.Globalization.Calendar cd = new System.Globalization.GregorianCalendar ();  	//UPGRADE_TODO: The differences in the format  of parameters for method 'java.util.Calendar.setTime'  may cause compilation errors.  "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1092'"  	SupportClass.CalendarManager.manager.SetDateTime (cd' ref_Renamed);  	//UPGRADE_TODO: Method 'java.util.Calendar.get' was converted to 'SupportClass.CalendarManager.Get' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilCalendarget_int'"  	switch (SupportClass.CalendarManager.manager.Get (cd' SupportClass.CalendarManager.DAY_OF_WEEK)) {  	case (int)System.DayOfWeek.Sunday:  		current_dow = 0;  		break;  	case (int)System.DayOfWeek.Monday:  		current_dow = 1;  		break;  	case (int)System.DayOfWeek.Tuesday:  		current_dow = 2;  		break;  	case (int)System.DayOfWeek.Wednesday:  		current_dow = 3;  		break;  	case (int)System.DayOfWeek.Thursday:  		current_dow = 4;  		break;  	case (int)System.DayOfWeek.Friday:  		current_dow = 5;  		break;  	case (int)System.DayOfWeek.Saturday:  		current_dow = 6;  		break;  	default:  		throw new System.SystemException ();  	//something is wrong  	}  	diff = (((current_dow - target_dow) + (7 + offset)) % 7 - offset) + (7 * nAgo) - (beginning ? 0 : 6);  	//booyah  	//UPGRADE_TODO: Constructor 'java.util.Date.Date' was converted to 'System.DateTime.DateTime' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDateDate_long'"  	//UPGRADE_TODO: Method 'java.util.Date.getTime' was converted to 'System.DateTime.Ticks' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDategetTime'"  	d = new System.DateTime (ref_Renamed.Ticks - diff * DAY_IN_MS);  }  else if (type.Equals ("month")) {  	//not supported  }  else {  	throw new System.ArgumentException ();  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (type.Equals ("week")) {  	//1 week period  	//start: day of week that starts period  	//beginning: true=return first day of period' false=return last day of period  	//includeToday: whether today's date can count as the last day of the period  	//nAgo: how many periods ago; 1=most recent period' 0=period in progress  	int target_dow = -1' current_dow = -1' diff;  	int offset = (includeToday ? 1 : 0);  	if (start.Equals ("sun"))  		target_dow = 0;  	else if (start.Equals ("mon"))  		target_dow = 1;  	else if (start.Equals ("tue"))  		target_dow = 2;  	else if (start.Equals ("wed"))  		target_dow = 3;  	else if (start.Equals ("thu"))  		target_dow = 4;  	else if (start.Equals ("fri"))  		target_dow = 5;  	else if (start.Equals ("sat"))  		target_dow = 6;  	if (target_dow == -1)  		throw new System.SystemException ();  	System.Globalization.Calendar cd = new System.Globalization.GregorianCalendar ();  	//UPGRADE_TODO: The differences in the format  of parameters for method 'java.util.Calendar.setTime'  may cause compilation errors.  "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1092'"  	SupportClass.CalendarManager.manager.SetDateTime (cd' ref_Renamed);  	//UPGRADE_TODO: Method 'java.util.Calendar.get' was converted to 'SupportClass.CalendarManager.Get' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilCalendarget_int'"  	switch (SupportClass.CalendarManager.manager.Get (cd' SupportClass.CalendarManager.DAY_OF_WEEK)) {  	case (int)System.DayOfWeek.Sunday:  		current_dow = 0;  		break;  	case (int)System.DayOfWeek.Monday:  		current_dow = 1;  		break;  	case (int)System.DayOfWeek.Tuesday:  		current_dow = 2;  		break;  	case (int)System.DayOfWeek.Wednesday:  		current_dow = 3;  		break;  	case (int)System.DayOfWeek.Thursday:  		current_dow = 4;  		break;  	case (int)System.DayOfWeek.Friday:  		current_dow = 5;  		break;  	case (int)System.DayOfWeek.Saturday:  		current_dow = 6;  		break;  	default:  		throw new System.SystemException ();  	//something is wrong  	}  	diff = (((current_dow - target_dow) + (7 + offset)) % 7 - offset) + (7 * nAgo) - (beginning ? 0 : 6);  	//booyah  	//UPGRADE_TODO: Constructor 'java.util.Date.Date' was converted to 'System.DateTime.DateTime' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDateDate_long'"  	//UPGRADE_TODO: Method 'java.util.Date.getTime' was converted to 'System.DateTime.Ticks' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDategetTime'"  	d = new System.DateTime (ref_Renamed.Ticks - diff * DAY_IN_MS);  }  else if (type.Equals ("month")) {  	//not supported  }  else {  	throw new System.ArgumentException ();  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (type.Equals ("week")) {  	//1 week period  	//start: day of week that starts period  	//beginning: true=return first day of period' false=return last day of period  	//includeToday: whether today's date can count as the last day of the period  	//nAgo: how many periods ago; 1=most recent period' 0=period in progress  	int target_dow = -1' current_dow = -1' diff;  	int offset = (includeToday ? 1 : 0);  	if (start.Equals ("sun"))  		target_dow = 0;  	else if (start.Equals ("mon"))  		target_dow = 1;  	else if (start.Equals ("tue"))  		target_dow = 2;  	else if (start.Equals ("wed"))  		target_dow = 3;  	else if (start.Equals ("thu"))  		target_dow = 4;  	else if (start.Equals ("fri"))  		target_dow = 5;  	else if (start.Equals ("sat"))  		target_dow = 6;  	if (target_dow == -1)  		throw new System.SystemException ();  	System.Globalization.Calendar cd = new System.Globalization.GregorianCalendar ();  	//UPGRADE_TODO: The differences in the format  of parameters for method 'java.util.Calendar.setTime'  may cause compilation errors.  "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1092'"  	SupportClass.CalendarManager.manager.SetDateTime (cd' ref_Renamed);  	//UPGRADE_TODO: Method 'java.util.Calendar.get' was converted to 'SupportClass.CalendarManager.Get' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilCalendarget_int'"  	switch (SupportClass.CalendarManager.manager.Get (cd' SupportClass.CalendarManager.DAY_OF_WEEK)) {  	case (int)System.DayOfWeek.Sunday:  		current_dow = 0;  		break;  	case (int)System.DayOfWeek.Monday:  		current_dow = 1;  		break;  	case (int)System.DayOfWeek.Tuesday:  		current_dow = 2;  		break;  	case (int)System.DayOfWeek.Wednesday:  		current_dow = 3;  		break;  	case (int)System.DayOfWeek.Thursday:  		current_dow = 4;  		break;  	case (int)System.DayOfWeek.Friday:  		current_dow = 5;  		break;  	case (int)System.DayOfWeek.Saturday:  		current_dow = 6;  		break;  	default:  		throw new System.SystemException ();  	//something is wrong  	}  	diff = (((current_dow - target_dow) + (7 + offset)) % 7 - offset) + (7 * nAgo) - (beginning ? 0 : 6);  	//booyah  	//UPGRADE_TODO: Constructor 'java.util.Date.Date' was converted to 'System.DateTime.DateTime' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDateDate_long'"  	//UPGRADE_TODO: Method 'java.util.Date.getTime' was converted to 'System.DateTime.Ticks' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDategetTime'"  	d = new System.DateTime (ref_Renamed.Ticks - diff * DAY_IN_MS);  }  else if (type.Equals ("month")) {  	//not supported  }  else {  	throw new System.ArgumentException ();  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (type.Equals ("week")) {  	//1 week period  	//start: day of week that starts period  	//beginning: true=return first day of period' false=return last day of period  	//includeToday: whether today's date can count as the last day of the period  	//nAgo: how many periods ago; 1=most recent period' 0=period in progress  	int target_dow = -1' current_dow = -1' diff;  	int offset = (includeToday ? 1 : 0);  	if (start.Equals ("sun"))  		target_dow = 0;  	else if (start.Equals ("mon"))  		target_dow = 1;  	else if (start.Equals ("tue"))  		target_dow = 2;  	else if (start.Equals ("wed"))  		target_dow = 3;  	else if (start.Equals ("thu"))  		target_dow = 4;  	else if (start.Equals ("fri"))  		target_dow = 5;  	else if (start.Equals ("sat"))  		target_dow = 6;  	if (target_dow == -1)  		throw new System.SystemException ();  	System.Globalization.Calendar cd = new System.Globalization.GregorianCalendar ();  	//UPGRADE_TODO: The differences in the format  of parameters for method 'java.util.Calendar.setTime'  may cause compilation errors.  "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1092'"  	SupportClass.CalendarManager.manager.SetDateTime (cd' ref_Renamed);  	//UPGRADE_TODO: Method 'java.util.Calendar.get' was converted to 'SupportClass.CalendarManager.Get' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilCalendarget_int'"  	switch (SupportClass.CalendarManager.manager.Get (cd' SupportClass.CalendarManager.DAY_OF_WEEK)) {  	case (int)System.DayOfWeek.Sunday:  		current_dow = 0;  		break;  	case (int)System.DayOfWeek.Monday:  		current_dow = 1;  		break;  	case (int)System.DayOfWeek.Tuesday:  		current_dow = 2;  		break;  	case (int)System.DayOfWeek.Wednesday:  		current_dow = 3;  		break;  	case (int)System.DayOfWeek.Thursday:  		current_dow = 4;  		break;  	case (int)System.DayOfWeek.Friday:  		current_dow = 5;  		break;  	case (int)System.DayOfWeek.Saturday:  		current_dow = 6;  		break;  	default:  		throw new System.SystemException ();  	//something is wrong  	}  	diff = (((current_dow - target_dow) + (7 + offset)) % 7 - offset) + (7 * nAgo) - (beginning ? 0 : 6);  	//booyah  	//UPGRADE_TODO: Constructor 'java.util.Date.Date' was converted to 'System.DateTime.DateTime' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDateDate_long'"  	//UPGRADE_TODO: Method 'java.util.Date.getTime' was converted to 'System.DateTime.Ticks' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDategetTime'"  	d = new System.DateTime (ref_Renamed.Ticks - diff * DAY_IN_MS);  }  else if (type.Equals ("month")) {  	//not supported  }  else {  	throw new System.ArgumentException ();  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (type.Equals ("week")) {  	//1 week period  	//start: day of week that starts period  	//beginning: true=return first day of period' false=return last day of period  	//includeToday: whether today's date can count as the last day of the period  	//nAgo: how many periods ago; 1=most recent period' 0=period in progress  	int target_dow = -1' current_dow = -1' diff;  	int offset = (includeToday ? 1 : 0);  	if (start.Equals ("sun"))  		target_dow = 0;  	else if (start.Equals ("mon"))  		target_dow = 1;  	else if (start.Equals ("tue"))  		target_dow = 2;  	else if (start.Equals ("wed"))  		target_dow = 3;  	else if (start.Equals ("thu"))  		target_dow = 4;  	else if (start.Equals ("fri"))  		target_dow = 5;  	else if (start.Equals ("sat"))  		target_dow = 6;  	if (target_dow == -1)  		throw new System.SystemException ();  	System.Globalization.Calendar cd = new System.Globalization.GregorianCalendar ();  	//UPGRADE_TODO: The differences in the format  of parameters for method 'java.util.Calendar.setTime'  may cause compilation errors.  "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1092'"  	SupportClass.CalendarManager.manager.SetDateTime (cd' ref_Renamed);  	//UPGRADE_TODO: Method 'java.util.Calendar.get' was converted to 'SupportClass.CalendarManager.Get' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilCalendarget_int'"  	switch (SupportClass.CalendarManager.manager.Get (cd' SupportClass.CalendarManager.DAY_OF_WEEK)) {  	case (int)System.DayOfWeek.Sunday:  		current_dow = 0;  		break;  	case (int)System.DayOfWeek.Monday:  		current_dow = 1;  		break;  	case (int)System.DayOfWeek.Tuesday:  		current_dow = 2;  		break;  	case (int)System.DayOfWeek.Wednesday:  		current_dow = 3;  		break;  	case (int)System.DayOfWeek.Thursday:  		current_dow = 4;  		break;  	case (int)System.DayOfWeek.Friday:  		current_dow = 5;  		break;  	case (int)System.DayOfWeek.Saturday:  		current_dow = 6;  		break;  	default:  		throw new System.SystemException ();  	//something is wrong  	}  	diff = (((current_dow - target_dow) + (7 + offset)) % 7 - offset) + (7 * nAgo) - (beginning ? 0 : 6);  	//booyah  	//UPGRADE_TODO: Constructor 'java.util.Date.Date' was converted to 'System.DateTime.DateTime' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDateDate_long'"  	//UPGRADE_TODO: Method 'java.util.Date.getTime' was converted to 'System.DateTime.Ticks' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDategetTime'"  	d = new System.DateTime (ref_Renamed.Ticks - diff * DAY_IN_MS);  }  else if (type.Equals ("month")) {  	//not supported  }  else {  	throw new System.ArgumentException ();  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (type.Equals ("week")) {  	//1 week period  	//start: day of week that starts period  	//beginning: true=return first day of period' false=return last day of period  	//includeToday: whether today's date can count as the last day of the period  	//nAgo: how many periods ago; 1=most recent period' 0=period in progress  	int target_dow = -1' current_dow = -1' diff;  	int offset = (includeToday ? 1 : 0);  	if (start.Equals ("sun"))  		target_dow = 0;  	else if (start.Equals ("mon"))  		target_dow = 1;  	else if (start.Equals ("tue"))  		target_dow = 2;  	else if (start.Equals ("wed"))  		target_dow = 3;  	else if (start.Equals ("thu"))  		target_dow = 4;  	else if (start.Equals ("fri"))  		target_dow = 5;  	else if (start.Equals ("sat"))  		target_dow = 6;  	if (target_dow == -1)  		throw new System.SystemException ();  	System.Globalization.Calendar cd = new System.Globalization.GregorianCalendar ();  	//UPGRADE_TODO: The differences in the format  of parameters for method 'java.util.Calendar.setTime'  may cause compilation errors.  "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1092'"  	SupportClass.CalendarManager.manager.SetDateTime (cd' ref_Renamed);  	//UPGRADE_TODO: Method 'java.util.Calendar.get' was converted to 'SupportClass.CalendarManager.Get' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilCalendarget_int'"  	switch (SupportClass.CalendarManager.manager.Get (cd' SupportClass.CalendarManager.DAY_OF_WEEK)) {  	case (int)System.DayOfWeek.Sunday:  		current_dow = 0;  		break;  	case (int)System.DayOfWeek.Monday:  		current_dow = 1;  		break;  	case (int)System.DayOfWeek.Tuesday:  		current_dow = 2;  		break;  	case (int)System.DayOfWeek.Wednesday:  		current_dow = 3;  		break;  	case (int)System.DayOfWeek.Thursday:  		current_dow = 4;  		break;  	case (int)System.DayOfWeek.Friday:  		current_dow = 5;  		break;  	case (int)System.DayOfWeek.Saturday:  		current_dow = 6;  		break;  	default:  		throw new System.SystemException ();  	//something is wrong  	}  	diff = (((current_dow - target_dow) + (7 + offset)) % 7 - offset) + (7 * nAgo) - (beginning ? 0 : 6);  	//booyah  	//UPGRADE_TODO: Constructor 'java.util.Date.Date' was converted to 'System.DateTime.DateTime' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDateDate_long'"  	//UPGRADE_TODO: Method 'java.util.Date.getTime' was converted to 'System.DateTime.Ticks' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDategetTime'"  	d = new System.DateTime (ref_Renamed.Ticks - diff * DAY_IN_MS);  }  else if (type.Equals ("month")) {  	//not supported  }  else {  	throw new System.ArgumentException ();  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (type.Equals ("week")) {  	//1 week period  	//start: day of week that starts period  	//beginning: true=return first day of period' false=return last day of period  	//includeToday: whether today's date can count as the last day of the period  	//nAgo: how many periods ago; 1=most recent period' 0=period in progress  	int target_dow = -1' current_dow = -1' diff;  	int offset = (includeToday ? 1 : 0);  	if (start.Equals ("sun"))  		target_dow = 0;  	else if (start.Equals ("mon"))  		target_dow = 1;  	else if (start.Equals ("tue"))  		target_dow = 2;  	else if (start.Equals ("wed"))  		target_dow = 3;  	else if (start.Equals ("thu"))  		target_dow = 4;  	else if (start.Equals ("fri"))  		target_dow = 5;  	else if (start.Equals ("sat"))  		target_dow = 6;  	if (target_dow == -1)  		throw new System.SystemException ();  	System.Globalization.Calendar cd = new System.Globalization.GregorianCalendar ();  	//UPGRADE_TODO: The differences in the format  of parameters for method 'java.util.Calendar.setTime'  may cause compilation errors.  "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1092'"  	SupportClass.CalendarManager.manager.SetDateTime (cd' ref_Renamed);  	//UPGRADE_TODO: Method 'java.util.Calendar.get' was converted to 'SupportClass.CalendarManager.Get' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilCalendarget_int'"  	switch (SupportClass.CalendarManager.manager.Get (cd' SupportClass.CalendarManager.DAY_OF_WEEK)) {  	case (int)System.DayOfWeek.Sunday:  		current_dow = 0;  		break;  	case (int)System.DayOfWeek.Monday:  		current_dow = 1;  		break;  	case (int)System.DayOfWeek.Tuesday:  		current_dow = 2;  		break;  	case (int)System.DayOfWeek.Wednesday:  		current_dow = 3;  		break;  	case (int)System.DayOfWeek.Thursday:  		current_dow = 4;  		break;  	case (int)System.DayOfWeek.Friday:  		current_dow = 5;  		break;  	case (int)System.DayOfWeek.Saturday:  		current_dow = 6;  		break;  	default:  		throw new System.SystemException ();  	//something is wrong  	}  	diff = (((current_dow - target_dow) + (7 + offset)) % 7 - offset) + (7 * nAgo) - (beginning ? 0 : 6);  	//booyah  	//UPGRADE_TODO: Constructor 'java.util.Date.Date' was converted to 'System.DateTime.DateTime' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDateDate_long'"  	//UPGRADE_TODO: Method 'java.util.Date.getTime' was converted to 'System.DateTime.Ticks' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDategetTime'"  	d = new System.DateTime (ref_Renamed.Ticks - diff * DAY_IN_MS);  }  else if (type.Equals ("month")) {  	//not supported  }  else {  	throw new System.ArgumentException ();  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (type.Equals ("week")) {  	//1 week period  	//start: day of week that starts period  	//beginning: true=return first day of period' false=return last day of period  	//includeToday: whether today's date can count as the last day of the period  	//nAgo: how many periods ago; 1=most recent period' 0=period in progress  	int target_dow = -1' current_dow = -1' diff;  	int offset = (includeToday ? 1 : 0);  	if (start.Equals ("sun"))  		target_dow = 0;  	else if (start.Equals ("mon"))  		target_dow = 1;  	else if (start.Equals ("tue"))  		target_dow = 2;  	else if (start.Equals ("wed"))  		target_dow = 3;  	else if (start.Equals ("thu"))  		target_dow = 4;  	else if (start.Equals ("fri"))  		target_dow = 5;  	else if (start.Equals ("sat"))  		target_dow = 6;  	if (target_dow == -1)  		throw new System.SystemException ();  	System.Globalization.Calendar cd = new System.Globalization.GregorianCalendar ();  	//UPGRADE_TODO: The differences in the format  of parameters for method 'java.util.Calendar.setTime'  may cause compilation errors.  "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1092'"  	SupportClass.CalendarManager.manager.SetDateTime (cd' ref_Renamed);  	//UPGRADE_TODO: Method 'java.util.Calendar.get' was converted to 'SupportClass.CalendarManager.Get' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilCalendarget_int'"  	switch (SupportClass.CalendarManager.manager.Get (cd' SupportClass.CalendarManager.DAY_OF_WEEK)) {  	case (int)System.DayOfWeek.Sunday:  		current_dow = 0;  		break;  	case (int)System.DayOfWeek.Monday:  		current_dow = 1;  		break;  	case (int)System.DayOfWeek.Tuesday:  		current_dow = 2;  		break;  	case (int)System.DayOfWeek.Wednesday:  		current_dow = 3;  		break;  	case (int)System.DayOfWeek.Thursday:  		current_dow = 4;  		break;  	case (int)System.DayOfWeek.Friday:  		current_dow = 5;  		break;  	case (int)System.DayOfWeek.Saturday:  		current_dow = 6;  		break;  	default:  		throw new System.SystemException ();  	//something is wrong  	}  	diff = (((current_dow - target_dow) + (7 + offset)) % 7 - offset) + (7 * nAgo) - (beginning ? 0 : 6);  	//booyah  	//UPGRADE_TODO: Constructor 'java.util.Date.Date' was converted to 'System.DateTime.DateTime' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDateDate_long'"  	//UPGRADE_TODO: Method 'java.util.Date.getTime' was converted to 'System.DateTime.Ticks' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDategetTime'"  	d = new System.DateTime (ref_Renamed.Ticks - diff * DAY_IN_MS);  }  else if (type.Equals ("month")) {  	//not supported  }  else {  	throw new System.ArgumentException ();  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (type.Equals ("week")) {  	//1 week period  	//start: day of week that starts period  	//beginning: true=return first day of period' false=return last day of period  	//includeToday: whether today's date can count as the last day of the period  	//nAgo: how many periods ago; 1=most recent period' 0=period in progress  	int target_dow = -1' current_dow = -1' diff;  	int offset = (includeToday ? 1 : 0);  	if (start.Equals ("sun"))  		target_dow = 0;  	else if (start.Equals ("mon"))  		target_dow = 1;  	else if (start.Equals ("tue"))  		target_dow = 2;  	else if (start.Equals ("wed"))  		target_dow = 3;  	else if (start.Equals ("thu"))  		target_dow = 4;  	else if (start.Equals ("fri"))  		target_dow = 5;  	else if (start.Equals ("sat"))  		target_dow = 6;  	if (target_dow == -1)  		throw new System.SystemException ();  	System.Globalization.Calendar cd = new System.Globalization.GregorianCalendar ();  	//UPGRADE_TODO: The differences in the format  of parameters for method 'java.util.Calendar.setTime'  may cause compilation errors.  "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1092'"  	SupportClass.CalendarManager.manager.SetDateTime (cd' ref_Renamed);  	//UPGRADE_TODO: Method 'java.util.Calendar.get' was converted to 'SupportClass.CalendarManager.Get' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilCalendarget_int'"  	switch (SupportClass.CalendarManager.manager.Get (cd' SupportClass.CalendarManager.DAY_OF_WEEK)) {  	case (int)System.DayOfWeek.Sunday:  		current_dow = 0;  		break;  	case (int)System.DayOfWeek.Monday:  		current_dow = 1;  		break;  	case (int)System.DayOfWeek.Tuesday:  		current_dow = 2;  		break;  	case (int)System.DayOfWeek.Wednesday:  		current_dow = 3;  		break;  	case (int)System.DayOfWeek.Thursday:  		current_dow = 4;  		break;  	case (int)System.DayOfWeek.Friday:  		current_dow = 5;  		break;  	case (int)System.DayOfWeek.Saturday:  		current_dow = 6;  		break;  	default:  		throw new System.SystemException ();  	//something is wrong  	}  	diff = (((current_dow - target_dow) + (7 + offset)) % 7 - offset) + (7 * nAgo) - (beginning ? 0 : 6);  	//booyah  	//UPGRADE_TODO: Constructor 'java.util.Date.Date' was converted to 'System.DateTime.DateTime' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDateDate_long'"  	//UPGRADE_TODO: Method 'java.util.Date.getTime' was converted to 'System.DateTime.Ticks' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDategetTime'"  	d = new System.DateTime (ref_Renamed.Ticks - diff * DAY_IN_MS);  }  else if (type.Equals ("month")) {  	//not supported  }  else {  	throw new System.ArgumentException ();  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (type.Equals ("week")) {  	//1 week period  	//start: day of week that starts period  	//beginning: true=return first day of period' false=return last day of period  	//includeToday: whether today's date can count as the last day of the period  	//nAgo: how many periods ago; 1=most recent period' 0=period in progress  	int target_dow = -1' current_dow = -1' diff;  	int offset = (includeToday ? 1 : 0);  	if (start.Equals ("sun"))  		target_dow = 0;  	else if (start.Equals ("mon"))  		target_dow = 1;  	else if (start.Equals ("tue"))  		target_dow = 2;  	else if (start.Equals ("wed"))  		target_dow = 3;  	else if (start.Equals ("thu"))  		target_dow = 4;  	else if (start.Equals ("fri"))  		target_dow = 5;  	else if (start.Equals ("sat"))  		target_dow = 6;  	if (target_dow == -1)  		throw new System.SystemException ();  	System.Globalization.Calendar cd = new System.Globalization.GregorianCalendar ();  	//UPGRADE_TODO: The differences in the format  of parameters for method 'java.util.Calendar.setTime'  may cause compilation errors.  "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1092'"  	SupportClass.CalendarManager.manager.SetDateTime (cd' ref_Renamed);  	//UPGRADE_TODO: Method 'java.util.Calendar.get' was converted to 'SupportClass.CalendarManager.Get' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilCalendarget_int'"  	switch (SupportClass.CalendarManager.manager.Get (cd' SupportClass.CalendarManager.DAY_OF_WEEK)) {  	case (int)System.DayOfWeek.Sunday:  		current_dow = 0;  		break;  	case (int)System.DayOfWeek.Monday:  		current_dow = 1;  		break;  	case (int)System.DayOfWeek.Tuesday:  		current_dow = 2;  		break;  	case (int)System.DayOfWeek.Wednesday:  		current_dow = 3;  		break;  	case (int)System.DayOfWeek.Thursday:  		current_dow = 4;  		break;  	case (int)System.DayOfWeek.Friday:  		current_dow = 5;  		break;  	case (int)System.DayOfWeek.Saturday:  		current_dow = 6;  		break;  	default:  		throw new System.SystemException ();  	//something is wrong  	}  	diff = (((current_dow - target_dow) + (7 + offset)) % 7 - offset) + (7 * nAgo) - (beginning ? 0 : 6);  	//booyah  	//UPGRADE_TODO: Constructor 'java.util.Date.Date' was converted to 'System.DateTime.DateTime' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDateDate_long'"  	//UPGRADE_TODO: Method 'java.util.Date.getTime' was converted to 'System.DateTime.Ticks' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilDategetTime'"  	d = new System.DateTime (ref_Renamed.Ticks - diff * DAY_IN_MS);  }  else if (type.Equals ("month")) {  	//not supported  }  else {  	throw new System.ArgumentException ();  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (start.Equals ("sun"))  	target_dow = 0;  else if (start.Equals ("mon"))  	target_dow = 1;  else if (start.Equals ("tue"))  	target_dow = 2;  else if (start.Equals ("wed"))  	target_dow = 3;  else if (start.Equals ("thu"))  	target_dow = 4;  else if (start.Equals ("fri"))  	target_dow = 5;  else if (start.Equals ("sat"))  	target_dow = 6;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (start.Equals ("sun"))  	target_dow = 0;  else if (start.Equals ("mon"))  	target_dow = 1;  else if (start.Equals ("tue"))  	target_dow = 2;  else if (start.Equals ("wed"))  	target_dow = 3;  else if (start.Equals ("thu"))  	target_dow = 4;  else if (start.Equals ("fri"))  	target_dow = 5;  else if (start.Equals ("sat"))  	target_dow = 6;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (start.Equals ("sun"))  	target_dow = 0;  else if (start.Equals ("mon"))  	target_dow = 1;  else if (start.Equals ("tue"))  	target_dow = 2;  else if (start.Equals ("wed"))  	target_dow = 3;  else if (start.Equals ("thu"))  	target_dow = 4;  else if (start.Equals ("fri"))  	target_dow = 5;  else if (start.Equals ("sat"))  	target_dow = 6;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (start.Equals ("sun"))  	target_dow = 0;  else if (start.Equals ("mon"))  	target_dow = 1;  else if (start.Equals ("tue"))  	target_dow = 2;  else if (start.Equals ("wed"))  	target_dow = 3;  else if (start.Equals ("thu"))  	target_dow = 4;  else if (start.Equals ("fri"))  	target_dow = 5;  else if (start.Equals ("sat"))  	target_dow = 6;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (start.Equals ("sun"))  	target_dow = 0;  else if (start.Equals ("mon"))  	target_dow = 1;  else if (start.Equals ("tue"))  	target_dow = 2;  else if (start.Equals ("wed"))  	target_dow = 3;  else if (start.Equals ("thu"))  	target_dow = 4;  else if (start.Equals ("fri"))  	target_dow = 5;  else if (start.Equals ("sat"))  	target_dow = 6;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (start.Equals ("mon"))  	target_dow = 1;  else if (start.Equals ("tue"))  	target_dow = 2;  else if (start.Equals ("wed"))  	target_dow = 3;  else if (start.Equals ("thu"))  	target_dow = 4;  else if (start.Equals ("fri"))  	target_dow = 5;  else if (start.Equals ("sat"))  	target_dow = 6;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (start.Equals ("mon"))  	target_dow = 1;  else if (start.Equals ("tue"))  	target_dow = 2;  else if (start.Equals ("wed"))  	target_dow = 3;  else if (start.Equals ("thu"))  	target_dow = 4;  else if (start.Equals ("fri"))  	target_dow = 5;  else if (start.Equals ("sat"))  	target_dow = 6;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (start.Equals ("mon"))  	target_dow = 1;  else if (start.Equals ("tue"))  	target_dow = 2;  else if (start.Equals ("wed"))  	target_dow = 3;  else if (start.Equals ("thu"))  	target_dow = 4;  else if (start.Equals ("fri"))  	target_dow = 5;  else if (start.Equals ("sat"))  	target_dow = 6;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (start.Equals ("mon"))  	target_dow = 1;  else if (start.Equals ("tue"))  	target_dow = 2;  else if (start.Equals ("wed"))  	target_dow = 3;  else if (start.Equals ("thu"))  	target_dow = 4;  else if (start.Equals ("fri"))  	target_dow = 5;  else if (start.Equals ("sat"))  	target_dow = 6;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (start.Equals ("mon"))  	target_dow = 1;  else if (start.Equals ("tue"))  	target_dow = 2;  else if (start.Equals ("wed"))  	target_dow = 3;  else if (start.Equals ("thu"))  	target_dow = 4;  else if (start.Equals ("fri"))  	target_dow = 5;  else if (start.Equals ("sat"))  	target_dow = 6;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (start.Equals ("tue"))  	target_dow = 2;  else if (start.Equals ("wed"))  	target_dow = 3;  else if (start.Equals ("thu"))  	target_dow = 4;  else if (start.Equals ("fri"))  	target_dow = 5;  else if (start.Equals ("sat"))  	target_dow = 6;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (start.Equals ("tue"))  	target_dow = 2;  else if (start.Equals ("wed"))  	target_dow = 3;  else if (start.Equals ("thu"))  	target_dow = 4;  else if (start.Equals ("fri"))  	target_dow = 5;  else if (start.Equals ("sat"))  	target_dow = 6;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (start.Equals ("tue"))  	target_dow = 2;  else if (start.Equals ("wed"))  	target_dow = 3;  else if (start.Equals ("thu"))  	target_dow = 4;  else if (start.Equals ("fri"))  	target_dow = 5;  else if (start.Equals ("sat"))  	target_dow = 6;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (start.Equals ("tue"))  	target_dow = 2;  else if (start.Equals ("wed"))  	target_dow = 3;  else if (start.Equals ("thu"))  	target_dow = 4;  else if (start.Equals ("fri"))  	target_dow = 5;  else if (start.Equals ("sat"))  	target_dow = 6;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (start.Equals ("tue"))  	target_dow = 2;  else if (start.Equals ("wed"))  	target_dow = 3;  else if (start.Equals ("thu"))  	target_dow = 4;  else if (start.Equals ("fri"))  	target_dow = 5;  else if (start.Equals ("sat"))  	target_dow = 6;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: target_dow = 2;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (start.Equals ("wed"))  	target_dow = 3;  else if (start.Equals ("thu"))  	target_dow = 4;  else if (start.Equals ("fri"))  	target_dow = 5;  else if (start.Equals ("sat"))  	target_dow = 6;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (start.Equals ("wed"))  	target_dow = 3;  else if (start.Equals ("thu"))  	target_dow = 4;  else if (start.Equals ("fri"))  	target_dow = 5;  else if (start.Equals ("sat"))  	target_dow = 6;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (start.Equals ("wed"))  	target_dow = 3;  else if (start.Equals ("thu"))  	target_dow = 4;  else if (start.Equals ("fri"))  	target_dow = 5;  else if (start.Equals ("sat"))  	target_dow = 6;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (start.Equals ("wed"))  	target_dow = 3;  else if (start.Equals ("thu"))  	target_dow = 4;  else if (start.Equals ("fri"))  	target_dow = 5;  else if (start.Equals ("sat"))  	target_dow = 6;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: target_dow = 3;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (start.Equals ("thu"))  	target_dow = 4;  else if (start.Equals ("fri"))  	target_dow = 5;  else if (start.Equals ("sat"))  	target_dow = 6;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (start.Equals ("thu"))  	target_dow = 4;  else if (start.Equals ("fri"))  	target_dow = 5;  else if (start.Equals ("sat"))  	target_dow = 6;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (start.Equals ("thu"))  	target_dow = 4;  else if (start.Equals ("fri"))  	target_dow = 5;  else if (start.Equals ("sat"))  	target_dow = 6;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: target_dow = 4;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (start.Equals ("fri"))  	target_dow = 5;  else if (start.Equals ("sat"))  	target_dow = 6;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (start.Equals ("fri"))  	target_dow = 5;  else if (start.Equals ("sat"))  	target_dow = 6;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: target_dow = 5;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: if (start.Equals ("sat"))  	target_dow = 6;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: target_dow = 6;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: switch (SupportClass.CalendarManager.manager.Get (cd' SupportClass.CalendarManager.DAY_OF_WEEK)) {  case (int)System.DayOfWeek.Sunday:  	current_dow = 0;  	break;  case (int)System.DayOfWeek.Monday:  	current_dow = 1;  	break;  case (int)System.DayOfWeek.Tuesday:  	current_dow = 2;  	break;  case (int)System.DayOfWeek.Wednesday:  	current_dow = 3;  	break;  case (int)System.DayOfWeek.Thursday:  	current_dow = 4;  	break;  case (int)System.DayOfWeek.Friday:  	current_dow = 5;  	break;  case (int)System.DayOfWeek.Saturday:  	current_dow = 6;  	break;  default:  	throw new System.SystemException ();  //something is wrong  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: switch (SupportClass.CalendarManager.manager.Get (cd' SupportClass.CalendarManager.DAY_OF_WEEK)) {  case (int)System.DayOfWeek.Sunday:  	current_dow = 0;  	break;  case (int)System.DayOfWeek.Monday:  	current_dow = 1;  	break;  case (int)System.DayOfWeek.Tuesday:  	current_dow = 2;  	break;  case (int)System.DayOfWeek.Wednesday:  	current_dow = 3;  	break;  case (int)System.DayOfWeek.Thursday:  	current_dow = 4;  	break;  case (int)System.DayOfWeek.Friday:  	current_dow = 5;  	break;  case (int)System.DayOfWeek.Saturday:  	current_dow = 6;  	break;  default:  	throw new System.SystemException ();  //something is wrong  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: switch (SupportClass.CalendarManager.manager.Get (cd' SupportClass.CalendarManager.DAY_OF_WEEK)) {  case (int)System.DayOfWeek.Sunday:  	current_dow = 0;  	break;  case (int)System.DayOfWeek.Monday:  	current_dow = 1;  	break;  case (int)System.DayOfWeek.Tuesday:  	current_dow = 2;  	break;  case (int)System.DayOfWeek.Wednesday:  	current_dow = 3;  	break;  case (int)System.DayOfWeek.Thursday:  	current_dow = 4;  	break;  case (int)System.DayOfWeek.Friday:  	current_dow = 5;  	break;  case (int)System.DayOfWeek.Saturday:  	current_dow = 6;  	break;  default:  	throw new System.SystemException ();  //something is wrong  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: switch (SupportClass.CalendarManager.manager.Get (cd' SupportClass.CalendarManager.DAY_OF_WEEK)) {  case (int)System.DayOfWeek.Sunday:  	current_dow = 0;  	break;  case (int)System.DayOfWeek.Monday:  	current_dow = 1;  	break;  case (int)System.DayOfWeek.Tuesday:  	current_dow = 2;  	break;  case (int)System.DayOfWeek.Wednesday:  	current_dow = 3;  	break;  case (int)System.DayOfWeek.Thursday:  	current_dow = 4;  	break;  case (int)System.DayOfWeek.Friday:  	current_dow = 5;  	break;  case (int)System.DayOfWeek.Saturday:  	current_dow = 6;  	break;  default:  	throw new System.SystemException ();  //something is wrong  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: switch (SupportClass.CalendarManager.manager.Get (cd' SupportClass.CalendarManager.DAY_OF_WEEK)) {  case (int)System.DayOfWeek.Sunday:  	current_dow = 0;  	break;  case (int)System.DayOfWeek.Monday:  	current_dow = 1;  	break;  case (int)System.DayOfWeek.Tuesday:  	current_dow = 2;  	break;  case (int)System.DayOfWeek.Wednesday:  	current_dow = 3;  	break;  case (int)System.DayOfWeek.Thursday:  	current_dow = 4;  	break;  case (int)System.DayOfWeek.Friday:  	current_dow = 5;  	break;  case (int)System.DayOfWeek.Saturday:  	current_dow = 6;  	break;  default:  	throw new System.SystemException ();  //something is wrong  }  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: current_dow = 2;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: current_dow = 3;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: current_dow = 4;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: current_dow = 5;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: current_dow = 6;  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: diff = (((current_dow - target_dow) + (7 + offset)) % 7 - offset) + (7 * nAgo) - (beginning ? 0 : 6);  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: diff = (((current_dow - target_dow) + (7 + offset)) % 7 - offset) + (7 * nAgo) - (beginning ? 0 : 6);  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: diff = (((current_dow - target_dow) + (7 + offset)) % 7 - offset) + (7 * nAgo) - (beginning ? 0 : 6);  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,getPastPeriodDate,The following statement contains a magic number: diff = (((current_dow - target_dow) + (7 + offset)) % 7 - offset) + (7 * nAgo) - (beginning ? 0 : 6);  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,fractionalDaysSinceEpoch,The following statement contains a magic number: return (double)((a.Ticks - getDate (1970' 1' 1).Ticks) / (double)DAY_IN_MS);  
Magic Number,org.javarosa.core.model.utils,DateUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\DateUtils.cs,dateDiff,The following statement contains a magic number: return (int)MathUtils.divLongNotSuck (roundDate (ref b).Ticks - roundDate (ref a).Ticks + DAY_IN_MS / 2' DAY_IN_MS);  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: if (preloadParams.Equals ("today")) {  	d = System.DateTime.Now;  }  else if (preloadParams.Substring (0' (11) - (0)).Equals ("prevperiod-")) {  	System.Collections.ArrayList v = DateUtils.split (preloadParams.Substring (11)' "-"' false);  	System.String[] params_Renamed = new System.String[v.Count];  	for (int i = 0; i < params_Renamed.Length; i++)  		params_Renamed [i] = ((System.String)v [i]);  	try {  		System.String type = params_Renamed [0];  		System.String start = params_Renamed [1];  		bool beginning;  		if (params_Renamed [2].Equals ("head"))  			beginning = true;  		else if (params_Renamed [2].Equals ("tail"))  			beginning = false;  		else  			throw new System.SystemException ();  		bool includeToday;  		if (params_Renamed.Length >= 4) {  			if (params_Renamed [3].Equals ("x"))  				includeToday = true;  			else if (params_Renamed [3].Equals (""))  				includeToday = false;  			else  				throw new System.SystemException ();  		}  		else {  			includeToday = false;  		}  		int nAgo;  		if (params_Renamed.Length >= 5) {  			nAgo = System.Int32.Parse (params_Renamed [4]);  		}  		else {  			nAgo = 1;  		}  		System.DateTime tempAux = System.DateTime.Now;  		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  		d = DateUtils.getPastPeriodDate (ref tempAux' type' start' beginning' includeToday' nAgo);  	}  	catch (System.Exception e) {  		throw new System.ArgumentException ("invalid preload params for preload mode 'date'");  	}  }  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: if (preloadParams.Equals ("today")) {  	d = System.DateTime.Now;  }  else if (preloadParams.Substring (0' (11) - (0)).Equals ("prevperiod-")) {  	System.Collections.ArrayList v = DateUtils.split (preloadParams.Substring (11)' "-"' false);  	System.String[] params_Renamed = new System.String[v.Count];  	for (int i = 0; i < params_Renamed.Length; i++)  		params_Renamed [i] = ((System.String)v [i]);  	try {  		System.String type = params_Renamed [0];  		System.String start = params_Renamed [1];  		bool beginning;  		if (params_Renamed [2].Equals ("head"))  			beginning = true;  		else if (params_Renamed [2].Equals ("tail"))  			beginning = false;  		else  			throw new System.SystemException ();  		bool includeToday;  		if (params_Renamed.Length >= 4) {  			if (params_Renamed [3].Equals ("x"))  				includeToday = true;  			else if (params_Renamed [3].Equals (""))  				includeToday = false;  			else  				throw new System.SystemException ();  		}  		else {  			includeToday = false;  		}  		int nAgo;  		if (params_Renamed.Length >= 5) {  			nAgo = System.Int32.Parse (params_Renamed [4]);  		}  		else {  			nAgo = 1;  		}  		System.DateTime tempAux = System.DateTime.Now;  		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  		d = DateUtils.getPastPeriodDate (ref tempAux' type' start' beginning' includeToday' nAgo);  	}  	catch (System.Exception e) {  		throw new System.ArgumentException ("invalid preload params for preload mode 'date'");  	}  }  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: if (preloadParams.Equals ("today")) {  	d = System.DateTime.Now;  }  else if (preloadParams.Substring (0' (11) - (0)).Equals ("prevperiod-")) {  	System.Collections.ArrayList v = DateUtils.split (preloadParams.Substring (11)' "-"' false);  	System.String[] params_Renamed = new System.String[v.Count];  	for (int i = 0; i < params_Renamed.Length; i++)  		params_Renamed [i] = ((System.String)v [i]);  	try {  		System.String type = params_Renamed [0];  		System.String start = params_Renamed [1];  		bool beginning;  		if (params_Renamed [2].Equals ("head"))  			beginning = true;  		else if (params_Renamed [2].Equals ("tail"))  			beginning = false;  		else  			throw new System.SystemException ();  		bool includeToday;  		if (params_Renamed.Length >= 4) {  			if (params_Renamed [3].Equals ("x"))  				includeToday = true;  			else if (params_Renamed [3].Equals (""))  				includeToday = false;  			else  				throw new System.SystemException ();  		}  		else {  			includeToday = false;  		}  		int nAgo;  		if (params_Renamed.Length >= 5) {  			nAgo = System.Int32.Parse (params_Renamed [4]);  		}  		else {  			nAgo = 1;  		}  		System.DateTime tempAux = System.DateTime.Now;  		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  		d = DateUtils.getPastPeriodDate (ref tempAux' type' start' beginning' includeToday' nAgo);  	}  	catch (System.Exception e) {  		throw new System.ArgumentException ("invalid preload params for preload mode 'date'");  	}  }  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: if (preloadParams.Equals ("today")) {  	d = System.DateTime.Now;  }  else if (preloadParams.Substring (0' (11) - (0)).Equals ("prevperiod-")) {  	System.Collections.ArrayList v = DateUtils.split (preloadParams.Substring (11)' "-"' false);  	System.String[] params_Renamed = new System.String[v.Count];  	for (int i = 0; i < params_Renamed.Length; i++)  		params_Renamed [i] = ((System.String)v [i]);  	try {  		System.String type = params_Renamed [0];  		System.String start = params_Renamed [1];  		bool beginning;  		if (params_Renamed [2].Equals ("head"))  			beginning = true;  		else if (params_Renamed [2].Equals ("tail"))  			beginning = false;  		else  			throw new System.SystemException ();  		bool includeToday;  		if (params_Renamed.Length >= 4) {  			if (params_Renamed [3].Equals ("x"))  				includeToday = true;  			else if (params_Renamed [3].Equals (""))  				includeToday = false;  			else  				throw new System.SystemException ();  		}  		else {  			includeToday = false;  		}  		int nAgo;  		if (params_Renamed.Length >= 5) {  			nAgo = System.Int32.Parse (params_Renamed [4]);  		}  		else {  			nAgo = 1;  		}  		System.DateTime tempAux = System.DateTime.Now;  		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  		d = DateUtils.getPastPeriodDate (ref tempAux' type' start' beginning' includeToday' nAgo);  	}  	catch (System.Exception e) {  		throw new System.ArgumentException ("invalid preload params for preload mode 'date'");  	}  }  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: if (preloadParams.Equals ("today")) {  	d = System.DateTime.Now;  }  else if (preloadParams.Substring (0' (11) - (0)).Equals ("prevperiod-")) {  	System.Collections.ArrayList v = DateUtils.split (preloadParams.Substring (11)' "-"' false);  	System.String[] params_Renamed = new System.String[v.Count];  	for (int i = 0; i < params_Renamed.Length; i++)  		params_Renamed [i] = ((System.String)v [i]);  	try {  		System.String type = params_Renamed [0];  		System.String start = params_Renamed [1];  		bool beginning;  		if (params_Renamed [2].Equals ("head"))  			beginning = true;  		else if (params_Renamed [2].Equals ("tail"))  			beginning = false;  		else  			throw new System.SystemException ();  		bool includeToday;  		if (params_Renamed.Length >= 4) {  			if (params_Renamed [3].Equals ("x"))  				includeToday = true;  			else if (params_Renamed [3].Equals (""))  				includeToday = false;  			else  				throw new System.SystemException ();  		}  		else {  			includeToday = false;  		}  		int nAgo;  		if (params_Renamed.Length >= 5) {  			nAgo = System.Int32.Parse (params_Renamed [4]);  		}  		else {  			nAgo = 1;  		}  		System.DateTime tempAux = System.DateTime.Now;  		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  		d = DateUtils.getPastPeriodDate (ref tempAux' type' start' beginning' includeToday' nAgo);  	}  	catch (System.Exception e) {  		throw new System.ArgumentException ("invalid preload params for preload mode 'date'");  	}  }  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: if (preloadParams.Equals ("today")) {  	d = System.DateTime.Now;  }  else if (preloadParams.Substring (0' (11) - (0)).Equals ("prevperiod-")) {  	System.Collections.ArrayList v = DateUtils.split (preloadParams.Substring (11)' "-"' false);  	System.String[] params_Renamed = new System.String[v.Count];  	for (int i = 0; i < params_Renamed.Length; i++)  		params_Renamed [i] = ((System.String)v [i]);  	try {  		System.String type = params_Renamed [0];  		System.String start = params_Renamed [1];  		bool beginning;  		if (params_Renamed [2].Equals ("head"))  			beginning = true;  		else if (params_Renamed [2].Equals ("tail"))  			beginning = false;  		else  			throw new System.SystemException ();  		bool includeToday;  		if (params_Renamed.Length >= 4) {  			if (params_Renamed [3].Equals ("x"))  				includeToday = true;  			else if (params_Renamed [3].Equals (""))  				includeToday = false;  			else  				throw new System.SystemException ();  		}  		else {  			includeToday = false;  		}  		int nAgo;  		if (params_Renamed.Length >= 5) {  			nAgo = System.Int32.Parse (params_Renamed [4]);  		}  		else {  			nAgo = 1;  		}  		System.DateTime tempAux = System.DateTime.Now;  		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  		d = DateUtils.getPastPeriodDate (ref tempAux' type' start' beginning' includeToday' nAgo);  	}  	catch (System.Exception e) {  		throw new System.ArgumentException ("invalid preload params for preload mode 'date'");  	}  }  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: if (preloadParams.Equals ("today")) {  	d = System.DateTime.Now;  }  else if (preloadParams.Substring (0' (11) - (0)).Equals ("prevperiod-")) {  	System.Collections.ArrayList v = DateUtils.split (preloadParams.Substring (11)' "-"' false);  	System.String[] params_Renamed = new System.String[v.Count];  	for (int i = 0; i < params_Renamed.Length; i++)  		params_Renamed [i] = ((System.String)v [i]);  	try {  		System.String type = params_Renamed [0];  		System.String start = params_Renamed [1];  		bool beginning;  		if (params_Renamed [2].Equals ("head"))  			beginning = true;  		else if (params_Renamed [2].Equals ("tail"))  			beginning = false;  		else  			throw new System.SystemException ();  		bool includeToday;  		if (params_Renamed.Length >= 4) {  			if (params_Renamed [3].Equals ("x"))  				includeToday = true;  			else if (params_Renamed [3].Equals (""))  				includeToday = false;  			else  				throw new System.SystemException ();  		}  		else {  			includeToday = false;  		}  		int nAgo;  		if (params_Renamed.Length >= 5) {  			nAgo = System.Int32.Parse (params_Renamed [4]);  		}  		else {  			nAgo = 1;  		}  		System.DateTime tempAux = System.DateTime.Now;  		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  		d = DateUtils.getPastPeriodDate (ref tempAux' type' start' beginning' includeToday' nAgo);  	}  	catch (System.Exception e) {  		throw new System.ArgumentException ("invalid preload params for preload mode 'date'");  	}  }  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: if (preloadParams.Equals ("today")) {  	d = System.DateTime.Now;  }  else if (preloadParams.Substring (0' (11) - (0)).Equals ("prevperiod-")) {  	System.Collections.ArrayList v = DateUtils.split (preloadParams.Substring (11)' "-"' false);  	System.String[] params_Renamed = new System.String[v.Count];  	for (int i = 0; i < params_Renamed.Length; i++)  		params_Renamed [i] = ((System.String)v [i]);  	try {  		System.String type = params_Renamed [0];  		System.String start = params_Renamed [1];  		bool beginning;  		if (params_Renamed [2].Equals ("head"))  			beginning = true;  		else if (params_Renamed [2].Equals ("tail"))  			beginning = false;  		else  			throw new System.SystemException ();  		bool includeToday;  		if (params_Renamed.Length >= 4) {  			if (params_Renamed [3].Equals ("x"))  				includeToday = true;  			else if (params_Renamed [3].Equals (""))  				includeToday = false;  			else  				throw new System.SystemException ();  		}  		else {  			includeToday = false;  		}  		int nAgo;  		if (params_Renamed.Length >= 5) {  			nAgo = System.Int32.Parse (params_Renamed [4]);  		}  		else {  			nAgo = 1;  		}  		System.DateTime tempAux = System.DateTime.Now;  		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  		d = DateUtils.getPastPeriodDate (ref tempAux' type' start' beginning' includeToday' nAgo);  	}  	catch (System.Exception e) {  		throw new System.ArgumentException ("invalid preload params for preload mode 'date'");  	}  }  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: if (preloadParams.Equals ("today")) {  	d = System.DateTime.Now;  }  else if (preloadParams.Substring (0' (11) - (0)).Equals ("prevperiod-")) {  	System.Collections.ArrayList v = DateUtils.split (preloadParams.Substring (11)' "-"' false);  	System.String[] params_Renamed = new System.String[v.Count];  	for (int i = 0; i < params_Renamed.Length; i++)  		params_Renamed [i] = ((System.String)v [i]);  	try {  		System.String type = params_Renamed [0];  		System.String start = params_Renamed [1];  		bool beginning;  		if (params_Renamed [2].Equals ("head"))  			beginning = true;  		else if (params_Renamed [2].Equals ("tail"))  			beginning = false;  		else  			throw new System.SystemException ();  		bool includeToday;  		if (params_Renamed.Length >= 4) {  			if (params_Renamed [3].Equals ("x"))  				includeToday = true;  			else if (params_Renamed [3].Equals (""))  				includeToday = false;  			else  				throw new System.SystemException ();  		}  		else {  			includeToday = false;  		}  		int nAgo;  		if (params_Renamed.Length >= 5) {  			nAgo = System.Int32.Parse (params_Renamed [4]);  		}  		else {  			nAgo = 1;  		}  		System.DateTime tempAux = System.DateTime.Now;  		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  		d = DateUtils.getPastPeriodDate (ref tempAux' type' start' beginning' includeToday' nAgo);  	}  	catch (System.Exception e) {  		throw new System.ArgumentException ("invalid preload params for preload mode 'date'");  	}  }  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: if (preloadParams.Substring (0' (11) - (0)).Equals ("prevperiod-")) {  	System.Collections.ArrayList v = DateUtils.split (preloadParams.Substring (11)' "-"' false);  	System.String[] params_Renamed = new System.String[v.Count];  	for (int i = 0; i < params_Renamed.Length; i++)  		params_Renamed [i] = ((System.String)v [i]);  	try {  		System.String type = params_Renamed [0];  		System.String start = params_Renamed [1];  		bool beginning;  		if (params_Renamed [2].Equals ("head"))  			beginning = true;  		else if (params_Renamed [2].Equals ("tail"))  			beginning = false;  		else  			throw new System.SystemException ();  		bool includeToday;  		if (params_Renamed.Length >= 4) {  			if (params_Renamed [3].Equals ("x"))  				includeToday = true;  			else if (params_Renamed [3].Equals (""))  				includeToday = false;  			else  				throw new System.SystemException ();  		}  		else {  			includeToday = false;  		}  		int nAgo;  		if (params_Renamed.Length >= 5) {  			nAgo = System.Int32.Parse (params_Renamed [4]);  		}  		else {  			nAgo = 1;  		}  		System.DateTime tempAux = System.DateTime.Now;  		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  		d = DateUtils.getPastPeriodDate (ref tempAux' type' start' beginning' includeToday' nAgo);  	}  	catch (System.Exception e) {  		throw new System.ArgumentException ("invalid preload params for preload mode 'date'");  	}  }  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: if (preloadParams.Substring (0' (11) - (0)).Equals ("prevperiod-")) {  	System.Collections.ArrayList v = DateUtils.split (preloadParams.Substring (11)' "-"' false);  	System.String[] params_Renamed = new System.String[v.Count];  	for (int i = 0; i < params_Renamed.Length; i++)  		params_Renamed [i] = ((System.String)v [i]);  	try {  		System.String type = params_Renamed [0];  		System.String start = params_Renamed [1];  		bool beginning;  		if (params_Renamed [2].Equals ("head"))  			beginning = true;  		else if (params_Renamed [2].Equals ("tail"))  			beginning = false;  		else  			throw new System.SystemException ();  		bool includeToday;  		if (params_Renamed.Length >= 4) {  			if (params_Renamed [3].Equals ("x"))  				includeToday = true;  			else if (params_Renamed [3].Equals (""))  				includeToday = false;  			else  				throw new System.SystemException ();  		}  		else {  			includeToday = false;  		}  		int nAgo;  		if (params_Renamed.Length >= 5) {  			nAgo = System.Int32.Parse (params_Renamed [4]);  		}  		else {  			nAgo = 1;  		}  		System.DateTime tempAux = System.DateTime.Now;  		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  		d = DateUtils.getPastPeriodDate (ref tempAux' type' start' beginning' includeToday' nAgo);  	}  	catch (System.Exception e) {  		throw new System.ArgumentException ("invalid preload params for preload mode 'date'");  	}  }  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: if (preloadParams.Substring (0' (11) - (0)).Equals ("prevperiod-")) {  	System.Collections.ArrayList v = DateUtils.split (preloadParams.Substring (11)' "-"' false);  	System.String[] params_Renamed = new System.String[v.Count];  	for (int i = 0; i < params_Renamed.Length; i++)  		params_Renamed [i] = ((System.String)v [i]);  	try {  		System.String type = params_Renamed [0];  		System.String start = params_Renamed [1];  		bool beginning;  		if (params_Renamed [2].Equals ("head"))  			beginning = true;  		else if (params_Renamed [2].Equals ("tail"))  			beginning = false;  		else  			throw new System.SystemException ();  		bool includeToday;  		if (params_Renamed.Length >= 4) {  			if (params_Renamed [3].Equals ("x"))  				includeToday = true;  			else if (params_Renamed [3].Equals (""))  				includeToday = false;  			else  				throw new System.SystemException ();  		}  		else {  			includeToday = false;  		}  		int nAgo;  		if (params_Renamed.Length >= 5) {  			nAgo = System.Int32.Parse (params_Renamed [4]);  		}  		else {  			nAgo = 1;  		}  		System.DateTime tempAux = System.DateTime.Now;  		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  		d = DateUtils.getPastPeriodDate (ref tempAux' type' start' beginning' includeToday' nAgo);  	}  	catch (System.Exception e) {  		throw new System.ArgumentException ("invalid preload params for preload mode 'date'");  	}  }  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: if (preloadParams.Substring (0' (11) - (0)).Equals ("prevperiod-")) {  	System.Collections.ArrayList v = DateUtils.split (preloadParams.Substring (11)' "-"' false);  	System.String[] params_Renamed = new System.String[v.Count];  	for (int i = 0; i < params_Renamed.Length; i++)  		params_Renamed [i] = ((System.String)v [i]);  	try {  		System.String type = params_Renamed [0];  		System.String start = params_Renamed [1];  		bool beginning;  		if (params_Renamed [2].Equals ("head"))  			beginning = true;  		else if (params_Renamed [2].Equals ("tail"))  			beginning = false;  		else  			throw new System.SystemException ();  		bool includeToday;  		if (params_Renamed.Length >= 4) {  			if (params_Renamed [3].Equals ("x"))  				includeToday = true;  			else if (params_Renamed [3].Equals (""))  				includeToday = false;  			else  				throw new System.SystemException ();  		}  		else {  			includeToday = false;  		}  		int nAgo;  		if (params_Renamed.Length >= 5) {  			nAgo = System.Int32.Parse (params_Renamed [4]);  		}  		else {  			nAgo = 1;  		}  		System.DateTime tempAux = System.DateTime.Now;  		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  		d = DateUtils.getPastPeriodDate (ref tempAux' type' start' beginning' includeToday' nAgo);  	}  	catch (System.Exception e) {  		throw new System.ArgumentException ("invalid preload params for preload mode 'date'");  	}  }  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: if (preloadParams.Substring (0' (11) - (0)).Equals ("prevperiod-")) {  	System.Collections.ArrayList v = DateUtils.split (preloadParams.Substring (11)' "-"' false);  	System.String[] params_Renamed = new System.String[v.Count];  	for (int i = 0; i < params_Renamed.Length; i++)  		params_Renamed [i] = ((System.String)v [i]);  	try {  		System.String type = params_Renamed [0];  		System.String start = params_Renamed [1];  		bool beginning;  		if (params_Renamed [2].Equals ("head"))  			beginning = true;  		else if (params_Renamed [2].Equals ("tail"))  			beginning = false;  		else  			throw new System.SystemException ();  		bool includeToday;  		if (params_Renamed.Length >= 4) {  			if (params_Renamed [3].Equals ("x"))  				includeToday = true;  			else if (params_Renamed [3].Equals (""))  				includeToday = false;  			else  				throw new System.SystemException ();  		}  		else {  			includeToday = false;  		}  		int nAgo;  		if (params_Renamed.Length >= 5) {  			nAgo = System.Int32.Parse (params_Renamed [4]);  		}  		else {  			nAgo = 1;  		}  		System.DateTime tempAux = System.DateTime.Now;  		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  		d = DateUtils.getPastPeriodDate (ref tempAux' type' start' beginning' includeToday' nAgo);  	}  	catch (System.Exception e) {  		throw new System.ArgumentException ("invalid preload params for preload mode 'date'");  	}  }  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: if (preloadParams.Substring (0' (11) - (0)).Equals ("prevperiod-")) {  	System.Collections.ArrayList v = DateUtils.split (preloadParams.Substring (11)' "-"' false);  	System.String[] params_Renamed = new System.String[v.Count];  	for (int i = 0; i < params_Renamed.Length; i++)  		params_Renamed [i] = ((System.String)v [i]);  	try {  		System.String type = params_Renamed [0];  		System.String start = params_Renamed [1];  		bool beginning;  		if (params_Renamed [2].Equals ("head"))  			beginning = true;  		else if (params_Renamed [2].Equals ("tail"))  			beginning = false;  		else  			throw new System.SystemException ();  		bool includeToday;  		if (params_Renamed.Length >= 4) {  			if (params_Renamed [3].Equals ("x"))  				includeToday = true;  			else if (params_Renamed [3].Equals (""))  				includeToday = false;  			else  				throw new System.SystemException ();  		}  		else {  			includeToday = false;  		}  		int nAgo;  		if (params_Renamed.Length >= 5) {  			nAgo = System.Int32.Parse (params_Renamed [4]);  		}  		else {  			nAgo = 1;  		}  		System.DateTime tempAux = System.DateTime.Now;  		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  		d = DateUtils.getPastPeriodDate (ref tempAux' type' start' beginning' includeToday' nAgo);  	}  	catch (System.Exception e) {  		throw new System.ArgumentException ("invalid preload params for preload mode 'date'");  	}  }  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: if (preloadParams.Substring (0' (11) - (0)).Equals ("prevperiod-")) {  	System.Collections.ArrayList v = DateUtils.split (preloadParams.Substring (11)' "-"' false);  	System.String[] params_Renamed = new System.String[v.Count];  	for (int i = 0; i < params_Renamed.Length; i++)  		params_Renamed [i] = ((System.String)v [i]);  	try {  		System.String type = params_Renamed [0];  		System.String start = params_Renamed [1];  		bool beginning;  		if (params_Renamed [2].Equals ("head"))  			beginning = true;  		else if (params_Renamed [2].Equals ("tail"))  			beginning = false;  		else  			throw new System.SystemException ();  		bool includeToday;  		if (params_Renamed.Length >= 4) {  			if (params_Renamed [3].Equals ("x"))  				includeToday = true;  			else if (params_Renamed [3].Equals (""))  				includeToday = false;  			else  				throw new System.SystemException ();  		}  		else {  			includeToday = false;  		}  		int nAgo;  		if (params_Renamed.Length >= 5) {  			nAgo = System.Int32.Parse (params_Renamed [4]);  		}  		else {  			nAgo = 1;  		}  		System.DateTime tempAux = System.DateTime.Now;  		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  		d = DateUtils.getPastPeriodDate (ref tempAux' type' start' beginning' includeToday' nAgo);  	}  	catch (System.Exception e) {  		throw new System.ArgumentException ("invalid preload params for preload mode 'date'");  	}  }  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: if (preloadParams.Substring (0' (11) - (0)).Equals ("prevperiod-")) {  	System.Collections.ArrayList v = DateUtils.split (preloadParams.Substring (11)' "-"' false);  	System.String[] params_Renamed = new System.String[v.Count];  	for (int i = 0; i < params_Renamed.Length; i++)  		params_Renamed [i] = ((System.String)v [i]);  	try {  		System.String type = params_Renamed [0];  		System.String start = params_Renamed [1];  		bool beginning;  		if (params_Renamed [2].Equals ("head"))  			beginning = true;  		else if (params_Renamed [2].Equals ("tail"))  			beginning = false;  		else  			throw new System.SystemException ();  		bool includeToday;  		if (params_Renamed.Length >= 4) {  			if (params_Renamed [3].Equals ("x"))  				includeToday = true;  			else if (params_Renamed [3].Equals (""))  				includeToday = false;  			else  				throw new System.SystemException ();  		}  		else {  			includeToday = false;  		}  		int nAgo;  		if (params_Renamed.Length >= 5) {  			nAgo = System.Int32.Parse (params_Renamed [4]);  		}  		else {  			nAgo = 1;  		}  		System.DateTime tempAux = System.DateTime.Now;  		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  		d = DateUtils.getPastPeriodDate (ref tempAux' type' start' beginning' includeToday' nAgo);  	}  	catch (System.Exception e) {  		throw new System.ArgumentException ("invalid preload params for preload mode 'date'");  	}  }  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: if (preloadParams.Substring (0' (11) - (0)).Equals ("prevperiod-")) {  	System.Collections.ArrayList v = DateUtils.split (preloadParams.Substring (11)' "-"' false);  	System.String[] params_Renamed = new System.String[v.Count];  	for (int i = 0; i < params_Renamed.Length; i++)  		params_Renamed [i] = ((System.String)v [i]);  	try {  		System.String type = params_Renamed [0];  		System.String start = params_Renamed [1];  		bool beginning;  		if (params_Renamed [2].Equals ("head"))  			beginning = true;  		else if (params_Renamed [2].Equals ("tail"))  			beginning = false;  		else  			throw new System.SystemException ();  		bool includeToday;  		if (params_Renamed.Length >= 4) {  			if (params_Renamed [3].Equals ("x"))  				includeToday = true;  			else if (params_Renamed [3].Equals (""))  				includeToday = false;  			else  				throw new System.SystemException ();  		}  		else {  			includeToday = false;  		}  		int nAgo;  		if (params_Renamed.Length >= 5) {  			nAgo = System.Int32.Parse (params_Renamed [4]);  		}  		else {  			nAgo = 1;  		}  		System.DateTime tempAux = System.DateTime.Now;  		//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  		d = DateUtils.getPastPeriodDate (ref tempAux' type' start' beginning' includeToday' nAgo);  	}  	catch (System.Exception e) {  		throw new System.ArgumentException ("invalid preload params for preload mode 'date'");  	}  }  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: try {  	System.String type = params_Renamed [0];  	System.String start = params_Renamed [1];  	bool beginning;  	if (params_Renamed [2].Equals ("head"))  		beginning = true;  	else if (params_Renamed [2].Equals ("tail"))  		beginning = false;  	else  		throw new System.SystemException ();  	bool includeToday;  	if (params_Renamed.Length >= 4) {  		if (params_Renamed [3].Equals ("x"))  			includeToday = true;  		else if (params_Renamed [3].Equals (""))  			includeToday = false;  		else  			throw new System.SystemException ();  	}  	else {  		includeToday = false;  	}  	int nAgo;  	if (params_Renamed.Length >= 5) {  		nAgo = System.Int32.Parse (params_Renamed [4]);  	}  	else {  		nAgo = 1;  	}  	System.DateTime tempAux = System.DateTime.Now;  	//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  	d = DateUtils.getPastPeriodDate (ref tempAux' type' start' beginning' includeToday' nAgo);  }  catch (System.Exception e) {  	throw new System.ArgumentException ("invalid preload params for preload mode 'date'");  }  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: try {  	System.String type = params_Renamed [0];  	System.String start = params_Renamed [1];  	bool beginning;  	if (params_Renamed [2].Equals ("head"))  		beginning = true;  	else if (params_Renamed [2].Equals ("tail"))  		beginning = false;  	else  		throw new System.SystemException ();  	bool includeToday;  	if (params_Renamed.Length >= 4) {  		if (params_Renamed [3].Equals ("x"))  			includeToday = true;  		else if (params_Renamed [3].Equals (""))  			includeToday = false;  		else  			throw new System.SystemException ();  	}  	else {  		includeToday = false;  	}  	int nAgo;  	if (params_Renamed.Length >= 5) {  		nAgo = System.Int32.Parse (params_Renamed [4]);  	}  	else {  		nAgo = 1;  	}  	System.DateTime tempAux = System.DateTime.Now;  	//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  	d = DateUtils.getPastPeriodDate (ref tempAux' type' start' beginning' includeToday' nAgo);  }  catch (System.Exception e) {  	throw new System.ArgumentException ("invalid preload params for preload mode 'date'");  }  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: try {  	System.String type = params_Renamed [0];  	System.String start = params_Renamed [1];  	bool beginning;  	if (params_Renamed [2].Equals ("head"))  		beginning = true;  	else if (params_Renamed [2].Equals ("tail"))  		beginning = false;  	else  		throw new System.SystemException ();  	bool includeToday;  	if (params_Renamed.Length >= 4) {  		if (params_Renamed [3].Equals ("x"))  			includeToday = true;  		else if (params_Renamed [3].Equals (""))  			includeToday = false;  		else  			throw new System.SystemException ();  	}  	else {  		includeToday = false;  	}  	int nAgo;  	if (params_Renamed.Length >= 5) {  		nAgo = System.Int32.Parse (params_Renamed [4]);  	}  	else {  		nAgo = 1;  	}  	System.DateTime tempAux = System.DateTime.Now;  	//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  	d = DateUtils.getPastPeriodDate (ref tempAux' type' start' beginning' includeToday' nAgo);  }  catch (System.Exception e) {  	throw new System.ArgumentException ("invalid preload params for preload mode 'date'");  }  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: try {  	System.String type = params_Renamed [0];  	System.String start = params_Renamed [1];  	bool beginning;  	if (params_Renamed [2].Equals ("head"))  		beginning = true;  	else if (params_Renamed [2].Equals ("tail"))  		beginning = false;  	else  		throw new System.SystemException ();  	bool includeToday;  	if (params_Renamed.Length >= 4) {  		if (params_Renamed [3].Equals ("x"))  			includeToday = true;  		else if (params_Renamed [3].Equals (""))  			includeToday = false;  		else  			throw new System.SystemException ();  	}  	else {  		includeToday = false;  	}  	int nAgo;  	if (params_Renamed.Length >= 5) {  		nAgo = System.Int32.Parse (params_Renamed [4]);  	}  	else {  		nAgo = 1;  	}  	System.DateTime tempAux = System.DateTime.Now;  	//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  	d = DateUtils.getPastPeriodDate (ref tempAux' type' start' beginning' includeToday' nAgo);  }  catch (System.Exception e) {  	throw new System.ArgumentException ("invalid preload params for preload mode 'date'");  }  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: try {  	System.String type = params_Renamed [0];  	System.String start = params_Renamed [1];  	bool beginning;  	if (params_Renamed [2].Equals ("head"))  		beginning = true;  	else if (params_Renamed [2].Equals ("tail"))  		beginning = false;  	else  		throw new System.SystemException ();  	bool includeToday;  	if (params_Renamed.Length >= 4) {  		if (params_Renamed [3].Equals ("x"))  			includeToday = true;  		else if (params_Renamed [3].Equals (""))  			includeToday = false;  		else  			throw new System.SystemException ();  	}  	else {  		includeToday = false;  	}  	int nAgo;  	if (params_Renamed.Length >= 5) {  		nAgo = System.Int32.Parse (params_Renamed [4]);  	}  	else {  		nAgo = 1;  	}  	System.DateTime tempAux = System.DateTime.Now;  	//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  	d = DateUtils.getPastPeriodDate (ref tempAux' type' start' beginning' includeToday' nAgo);  }  catch (System.Exception e) {  	throw new System.ArgumentException ("invalid preload params for preload mode 'date'");  }  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: try {  	System.String type = params_Renamed [0];  	System.String start = params_Renamed [1];  	bool beginning;  	if (params_Renamed [2].Equals ("head"))  		beginning = true;  	else if (params_Renamed [2].Equals ("tail"))  		beginning = false;  	else  		throw new System.SystemException ();  	bool includeToday;  	if (params_Renamed.Length >= 4) {  		if (params_Renamed [3].Equals ("x"))  			includeToday = true;  		else if (params_Renamed [3].Equals (""))  			includeToday = false;  		else  			throw new System.SystemException ();  	}  	else {  		includeToday = false;  	}  	int nAgo;  	if (params_Renamed.Length >= 5) {  		nAgo = System.Int32.Parse (params_Renamed [4]);  	}  	else {  		nAgo = 1;  	}  	System.DateTime tempAux = System.DateTime.Now;  	//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  	d = DateUtils.getPastPeriodDate (ref tempAux' type' start' beginning' includeToday' nAgo);  }  catch (System.Exception e) {  	throw new System.ArgumentException ("invalid preload params for preload mode 'date'");  }  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: try {  	System.String type = params_Renamed [0];  	System.String start = params_Renamed [1];  	bool beginning;  	if (params_Renamed [2].Equals ("head"))  		beginning = true;  	else if (params_Renamed [2].Equals ("tail"))  		beginning = false;  	else  		throw new System.SystemException ();  	bool includeToday;  	if (params_Renamed.Length >= 4) {  		if (params_Renamed [3].Equals ("x"))  			includeToday = true;  		else if (params_Renamed [3].Equals (""))  			includeToday = false;  		else  			throw new System.SystemException ();  	}  	else {  		includeToday = false;  	}  	int nAgo;  	if (params_Renamed.Length >= 5) {  		nAgo = System.Int32.Parse (params_Renamed [4]);  	}  	else {  		nAgo = 1;  	}  	System.DateTime tempAux = System.DateTime.Now;  	//UPGRADE_NOTE: ref keyword was added to struct-type parameters. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1303'"  	d = DateUtils.getPastPeriodDate (ref tempAux' type' start' beginning' includeToday' nAgo);  }  catch (System.Exception e) {  	throw new System.ArgumentException ("invalid preload params for preload mode 'date'");  }  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: if (params_Renamed [2].Equals ("head"))  	beginning = true;  else if (params_Renamed [2].Equals ("tail"))  	beginning = false;  else  	throw new System.SystemException ();  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: if (params_Renamed [2].Equals ("head"))  	beginning = true;  else if (params_Renamed [2].Equals ("tail"))  	beginning = false;  else  	throw new System.SystemException ();  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: if (params_Renamed [2].Equals ("tail"))  	beginning = false;  else  	throw new System.SystemException ();  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: if (params_Renamed.Length >= 4) {  	if (params_Renamed [3].Equals ("x"))  		includeToday = true;  	else if (params_Renamed [3].Equals (""))  		includeToday = false;  	else  		throw new System.SystemException ();  }  else {  	includeToday = false;  }  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: if (params_Renamed.Length >= 4) {  	if (params_Renamed [3].Equals ("x"))  		includeToday = true;  	else if (params_Renamed [3].Equals (""))  		includeToday = false;  	else  		throw new System.SystemException ();  }  else {  	includeToday = false;  }  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: if (params_Renamed.Length >= 4) {  	if (params_Renamed [3].Equals ("x"))  		includeToday = true;  	else if (params_Renamed [3].Equals (""))  		includeToday = false;  	else  		throw new System.SystemException ();  }  else {  	includeToday = false;  }  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: if (params_Renamed [3].Equals ("x"))  	includeToday = true;  else if (params_Renamed [3].Equals (""))  	includeToday = false;  else  	throw new System.SystemException ();  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: if (params_Renamed [3].Equals ("x"))  	includeToday = true;  else if (params_Renamed [3].Equals (""))  	includeToday = false;  else  	throw new System.SystemException ();  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: if (params_Renamed [3].Equals (""))  	includeToday = false;  else  	throw new System.SystemException ();  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: if (params_Renamed.Length >= 5) {  	nAgo = System.Int32.Parse (params_Renamed [4]);  }  else {  	nAgo = 1;  }  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: if (params_Renamed.Length >= 5) {  	nAgo = System.Int32.Parse (params_Renamed [4]);  }  else {  	nAgo = 1;  }  
Magic Number,org.javarosa.core.model.utils,QuestionPreloader,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\utils\QuestionPreloader.cs,preloadDate,The following statement contains a magic number: nAgo = System.Int32.Parse (params_Renamed [4]);  
Magic Number,org.javarosa.core.reference,ReferenceManager,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\reference\ReferenceManager.cs,DeriveReference,The following statement contains a magic number: if (isRelative (uri)) {  	//Clean up the relative reference to lack any leading separators.  	if (uri.StartsWith ("./")) {  		uri = uri.Substring (2);  	}  	if (context == null) {  		throw new System.SystemException ("Attempted to retrieve local reference with no context");  	}  	else {  		return derivingRoot (context).derive (uri' context);  	}  }  else {  	return derivingRoot (uri).derive (uri);  }  
Magic Number,org.javarosa.core.reference,ReferenceManager,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\reference\ReferenceManager.cs,DeriveReference,The following statement contains a magic number: if (uri.StartsWith ("./")) {  	uri = uri.Substring (2);  }  
Magic Number,org.javarosa.core.reference,ReferenceManager,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\reference\ReferenceManager.cs,DeriveReference,The following statement contains a magic number: uri = uri.Substring (2);  
Magic Number,org.javarosa.core.services,Logger,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\Logger.cs,die,The following statement contains a magic number: try {  	//UPGRADE_TODO: Method 'java.lang.Thread.sleep' was converted to 'System.Threading.Thread.Sleep' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javalangThreadsleep_long'"  	System.Threading.Thread.Sleep (new System.TimeSpan ((System.Int64)10000 * 3000));  }  catch (System.Threading.ThreadInterruptedException ie) {  }  
Magic Number,org.javarosa.core.services,Logger,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\Logger.cs,die,The following statement contains a magic number: try {  	//UPGRADE_TODO: Method 'java.lang.Thread.sleep' was converted to 'System.Threading.Thread.Sleep' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javalangThreadsleep_long'"  	System.Threading.Thread.Sleep (new System.TimeSpan ((System.Int64)10000 * 3000));  }  catch (System.Threading.ThreadInterruptedException ie) {  }  
Magic Number,org.javarosa.core.services,Logger,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\Logger.cs,die,The following statement contains a magic number: System.Threading.Thread.Sleep (new System.TimeSpan ((System.Int64)10000 * 3000));  
Magic Number,org.javarosa.core.services,Logger,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\Logger.cs,die,The following statement contains a magic number: System.Threading.Thread.Sleep (new System.TimeSpan ((System.Int64)10000 * 3000));  
Magic Number,org.javarosa.core.services,PropertyManager,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\PropertyManager.cs,PropertyManager,The following statement contains a magic number: rulesList = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10));  
Magic Number,org.javarosa.core.services.properties,JavaRosaPropertyRules,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\properties\JavaRosaPropertyRules.cs,JavaRosaPropertyRules,The following statement contains a magic number: readOnlyProperties = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10));  
Magic Number,org.javarosa.core.services.properties,JavaRosaPropertyRules,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\properties\JavaRosaPropertyRules.cs,JavaRosaPropertyRules,The following statement contains a magic number: rules [DEVICE_ID_PROPERTY] = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10));  
Magic Number,org.javarosa.core.services.properties,JavaRosaPropertyRules,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\properties\JavaRosaPropertyRules.cs,JavaRosaPropertyRules,The following statement contains a magic number: rules [CURRENT_LOCALE] = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10));  
Magic Number,org.javarosa.core.services.properties,JavaRosaPropertyRules,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\properties\JavaRosaPropertyRules.cs,JavaRosaPropertyRules,The following statement contains a magic number: rules [OPENROSA_API_LEVEL] = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10));  
Magic Number,org.javarosa.core.services.properties,JavaRosaPropertyRules,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\properties\JavaRosaPropertyRules.cs,allowableValues,The following statement contains a magic number: if (CURRENT_LOCALE.Equals (propertyName)) {  	Localizer l = Localization.GlobalLocalizerAdvanced;  	System.Collections.ArrayList v = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10));  	System.String[] locales = l.AvailableLocales;  	for (int i = 0; i < locales.Length; ++i) {  		v.Add (locales [i]);  	}  	return v;  }  
Magic Number,org.javarosa.core.services.properties,Property,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\services\properties\Property.cs,readExternal,The following statement contains a magic number: value_Renamed = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10));  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [0] = (buffer [shift] & 0xff) | ((buffer [shift + 1] & 0xff) << 8) | ((buffer [shift + 2] & 0xff) << 16) | (buffer [shift + 3] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [0] = (buffer [shift] & 0xff) | ((buffer [shift + 1] & 0xff) << 8) | ((buffer [shift + 2] & 0xff) << 16) | (buffer [shift + 3] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [0] = (buffer [shift] & 0xff) | ((buffer [shift + 1] & 0xff) << 8) | ((buffer [shift + 2] & 0xff) << 16) | (buffer [shift + 3] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [0] = (buffer [shift] & 0xff) | ((buffer [shift + 1] & 0xff) << 8) | ((buffer [shift + 2] & 0xff) << 16) | (buffer [shift + 3] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [0] = (buffer [shift] & 0xff) | ((buffer [shift + 1] & 0xff) << 8) | ((buffer [shift + 2] & 0xff) << 16) | (buffer [shift + 3] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [1] = (buffer [shift + 4] & 0xff) | ((buffer [shift + 5] & 0xff) << 8) | ((buffer [shift + 6] & 0xff) << 16) | (buffer [shift + 7] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [1] = (buffer [shift + 4] & 0xff) | ((buffer [shift + 5] & 0xff) << 8) | ((buffer [shift + 6] & 0xff) << 16) | (buffer [shift + 7] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [1] = (buffer [shift + 4] & 0xff) | ((buffer [shift + 5] & 0xff) << 8) | ((buffer [shift + 6] & 0xff) << 16) | (buffer [shift + 7] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [1] = (buffer [shift + 4] & 0xff) | ((buffer [shift + 5] & 0xff) << 8) | ((buffer [shift + 6] & 0xff) << 16) | (buffer [shift + 7] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [1] = (buffer [shift + 4] & 0xff) | ((buffer [shift + 5] & 0xff) << 8) | ((buffer [shift + 6] & 0xff) << 16) | (buffer [shift + 7] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [1] = (buffer [shift + 4] & 0xff) | ((buffer [shift + 5] & 0xff) << 8) | ((buffer [shift + 6] & 0xff) << 16) | (buffer [shift + 7] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [1] = (buffer [shift + 4] & 0xff) | ((buffer [shift + 5] & 0xff) << 8) | ((buffer [shift + 6] & 0xff) << 16) | (buffer [shift + 7] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [2] = (buffer [shift + 8] & 0xff) | ((buffer [shift + 9] & 0xff) << 8) | ((buffer [shift + 10] & 0xff) << 16) | (buffer [shift + 11] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [2] = (buffer [shift + 8] & 0xff) | ((buffer [shift + 9] & 0xff) << 8) | ((buffer [shift + 10] & 0xff) << 16) | (buffer [shift + 11] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [2] = (buffer [shift + 8] & 0xff) | ((buffer [shift + 9] & 0xff) << 8) | ((buffer [shift + 10] & 0xff) << 16) | (buffer [shift + 11] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [2] = (buffer [shift + 8] & 0xff) | ((buffer [shift + 9] & 0xff) << 8) | ((buffer [shift + 10] & 0xff) << 16) | (buffer [shift + 11] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [2] = (buffer [shift + 8] & 0xff) | ((buffer [shift + 9] & 0xff) << 8) | ((buffer [shift + 10] & 0xff) << 16) | (buffer [shift + 11] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [2] = (buffer [shift + 8] & 0xff) | ((buffer [shift + 9] & 0xff) << 8) | ((buffer [shift + 10] & 0xff) << 16) | (buffer [shift + 11] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [2] = (buffer [shift + 8] & 0xff) | ((buffer [shift + 9] & 0xff) << 8) | ((buffer [shift + 10] & 0xff) << 16) | (buffer [shift + 11] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [2] = (buffer [shift + 8] & 0xff) | ((buffer [shift + 9] & 0xff) << 8) | ((buffer [shift + 10] & 0xff) << 16) | (buffer [shift + 11] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [3] = (buffer [shift + 12] & 0xff) | ((buffer [shift + 13] & 0xff) << 8) | ((buffer [shift + 14] & 0xff) << 16) | (buffer [shift + 15] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [3] = (buffer [shift + 12] & 0xff) | ((buffer [shift + 13] & 0xff) << 8) | ((buffer [shift + 14] & 0xff) << 16) | (buffer [shift + 15] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [3] = (buffer [shift + 12] & 0xff) | ((buffer [shift + 13] & 0xff) << 8) | ((buffer [shift + 14] & 0xff) << 16) | (buffer [shift + 15] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [3] = (buffer [shift + 12] & 0xff) | ((buffer [shift + 13] & 0xff) << 8) | ((buffer [shift + 14] & 0xff) << 16) | (buffer [shift + 15] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [3] = (buffer [shift + 12] & 0xff) | ((buffer [shift + 13] & 0xff) << 8) | ((buffer [shift + 14] & 0xff) << 16) | (buffer [shift + 15] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [3] = (buffer [shift + 12] & 0xff) | ((buffer [shift + 13] & 0xff) << 8) | ((buffer [shift + 14] & 0xff) << 16) | (buffer [shift + 15] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [3] = (buffer [shift + 12] & 0xff) | ((buffer [shift + 13] & 0xff) << 8) | ((buffer [shift + 14] & 0xff) << 16) | (buffer [shift + 15] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [3] = (buffer [shift + 12] & 0xff) | ((buffer [shift + 13] & 0xff) << 8) | ((buffer [shift + 14] & 0xff) << 16) | (buffer [shift + 15] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [4] = (buffer [shift + 16] & 0xff) | ((buffer [shift + 17] & 0xff) << 8) | ((buffer [shift + 18] & 0xff) << 16) | (buffer [shift + 19] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [4] = (buffer [shift + 16] & 0xff) | ((buffer [shift + 17] & 0xff) << 8) | ((buffer [shift + 18] & 0xff) << 16) | (buffer [shift + 19] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [4] = (buffer [shift + 16] & 0xff) | ((buffer [shift + 17] & 0xff) << 8) | ((buffer [shift + 18] & 0xff) << 16) | (buffer [shift + 19] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [4] = (buffer [shift + 16] & 0xff) | ((buffer [shift + 17] & 0xff) << 8) | ((buffer [shift + 18] & 0xff) << 16) | (buffer [shift + 19] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [4] = (buffer [shift + 16] & 0xff) | ((buffer [shift + 17] & 0xff) << 8) | ((buffer [shift + 18] & 0xff) << 16) | (buffer [shift + 19] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [4] = (buffer [shift + 16] & 0xff) | ((buffer [shift + 17] & 0xff) << 8) | ((buffer [shift + 18] & 0xff) << 16) | (buffer [shift + 19] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [4] = (buffer [shift + 16] & 0xff) | ((buffer [shift + 17] & 0xff) << 8) | ((buffer [shift + 18] & 0xff) << 16) | (buffer [shift + 19] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [4] = (buffer [shift + 16] & 0xff) | ((buffer [shift + 17] & 0xff) << 8) | ((buffer [shift + 18] & 0xff) << 16) | (buffer [shift + 19] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [5] = (buffer [shift + 20] & 0xff) | ((buffer [shift + 21] & 0xff) << 8) | ((buffer [shift + 22] & 0xff) << 16) | (buffer [shift + 23] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [5] = (buffer [shift + 20] & 0xff) | ((buffer [shift + 21] & 0xff) << 8) | ((buffer [shift + 22] & 0xff) << 16) | (buffer [shift + 23] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [5] = (buffer [shift + 20] & 0xff) | ((buffer [shift + 21] & 0xff) << 8) | ((buffer [shift + 22] & 0xff) << 16) | (buffer [shift + 23] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [5] = (buffer [shift + 20] & 0xff) | ((buffer [shift + 21] & 0xff) << 8) | ((buffer [shift + 22] & 0xff) << 16) | (buffer [shift + 23] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [5] = (buffer [shift + 20] & 0xff) | ((buffer [shift + 21] & 0xff) << 8) | ((buffer [shift + 22] & 0xff) << 16) | (buffer [shift + 23] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [5] = (buffer [shift + 20] & 0xff) | ((buffer [shift + 21] & 0xff) << 8) | ((buffer [shift + 22] & 0xff) << 16) | (buffer [shift + 23] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [5] = (buffer [shift + 20] & 0xff) | ((buffer [shift + 21] & 0xff) << 8) | ((buffer [shift + 22] & 0xff) << 16) | (buffer [shift + 23] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [5] = (buffer [shift + 20] & 0xff) | ((buffer [shift + 21] & 0xff) << 8) | ((buffer [shift + 22] & 0xff) << 16) | (buffer [shift + 23] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [6] = (buffer [shift + 24] & 0xff) | ((buffer [shift + 25] & 0xff) << 8) | ((buffer [shift + 26] & 0xff) << 16) | (buffer [shift + 27] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [6] = (buffer [shift + 24] & 0xff) | ((buffer [shift + 25] & 0xff) << 8) | ((buffer [shift + 26] & 0xff) << 16) | (buffer [shift + 27] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [6] = (buffer [shift + 24] & 0xff) | ((buffer [shift + 25] & 0xff) << 8) | ((buffer [shift + 26] & 0xff) << 16) | (buffer [shift + 27] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [6] = (buffer [shift + 24] & 0xff) | ((buffer [shift + 25] & 0xff) << 8) | ((buffer [shift + 26] & 0xff) << 16) | (buffer [shift + 27] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [6] = (buffer [shift + 24] & 0xff) | ((buffer [shift + 25] & 0xff) << 8) | ((buffer [shift + 26] & 0xff) << 16) | (buffer [shift + 27] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [6] = (buffer [shift + 24] & 0xff) | ((buffer [shift + 25] & 0xff) << 8) | ((buffer [shift + 26] & 0xff) << 16) | (buffer [shift + 27] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [6] = (buffer [shift + 24] & 0xff) | ((buffer [shift + 25] & 0xff) << 8) | ((buffer [shift + 26] & 0xff) << 16) | (buffer [shift + 27] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [6] = (buffer [shift + 24] & 0xff) | ((buffer [shift + 25] & 0xff) << 8) | ((buffer [shift + 26] & 0xff) << 16) | (buffer [shift + 27] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [7] = (buffer [shift + 28] & 0xff) | ((buffer [shift + 29] & 0xff) << 8) | ((buffer [shift + 30] & 0xff) << 16) | (buffer [shift + 31] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [7] = (buffer [shift + 28] & 0xff) | ((buffer [shift + 29] & 0xff) << 8) | ((buffer [shift + 30] & 0xff) << 16) | (buffer [shift + 31] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [7] = (buffer [shift + 28] & 0xff) | ((buffer [shift + 29] & 0xff) << 8) | ((buffer [shift + 30] & 0xff) << 16) | (buffer [shift + 31] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [7] = (buffer [shift + 28] & 0xff) | ((buffer [shift + 29] & 0xff) << 8) | ((buffer [shift + 30] & 0xff) << 16) | (buffer [shift + 31] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [7] = (buffer [shift + 28] & 0xff) | ((buffer [shift + 29] & 0xff) << 8) | ((buffer [shift + 30] & 0xff) << 16) | (buffer [shift + 31] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [7] = (buffer [shift + 28] & 0xff) | ((buffer [shift + 29] & 0xff) << 8) | ((buffer [shift + 30] & 0xff) << 16) | (buffer [shift + 31] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [7] = (buffer [shift + 28] & 0xff) | ((buffer [shift + 29] & 0xff) << 8) | ((buffer [shift + 30] & 0xff) << 16) | (buffer [shift + 31] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [7] = (buffer [shift + 28] & 0xff) | ((buffer [shift + 29] & 0xff) << 8) | ((buffer [shift + 30] & 0xff) << 16) | (buffer [shift + 31] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [8] = (buffer [shift + 32] & 0xff) | ((buffer [shift + 33] & 0xff) << 8) | ((buffer [shift + 34] & 0xff) << 16) | (buffer [shift + 35] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [8] = (buffer [shift + 32] & 0xff) | ((buffer [shift + 33] & 0xff) << 8) | ((buffer [shift + 34] & 0xff) << 16) | (buffer [shift + 35] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [8] = (buffer [shift + 32] & 0xff) | ((buffer [shift + 33] & 0xff) << 8) | ((buffer [shift + 34] & 0xff) << 16) | (buffer [shift + 35] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [8] = (buffer [shift + 32] & 0xff) | ((buffer [shift + 33] & 0xff) << 8) | ((buffer [shift + 34] & 0xff) << 16) | (buffer [shift + 35] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [8] = (buffer [shift + 32] & 0xff) | ((buffer [shift + 33] & 0xff) << 8) | ((buffer [shift + 34] & 0xff) << 16) | (buffer [shift + 35] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [8] = (buffer [shift + 32] & 0xff) | ((buffer [shift + 33] & 0xff) << 8) | ((buffer [shift + 34] & 0xff) << 16) | (buffer [shift + 35] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [8] = (buffer [shift + 32] & 0xff) | ((buffer [shift + 33] & 0xff) << 8) | ((buffer [shift + 34] & 0xff) << 16) | (buffer [shift + 35] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [8] = (buffer [shift + 32] & 0xff) | ((buffer [shift + 33] & 0xff) << 8) | ((buffer [shift + 34] & 0xff) << 16) | (buffer [shift + 35] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [9] = (buffer [shift + 36] & 0xff) | ((buffer [shift + 37] & 0xff) << 8) | ((buffer [shift + 38] & 0xff) << 16) | (buffer [shift + 39] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [9] = (buffer [shift + 36] & 0xff) | ((buffer [shift + 37] & 0xff) << 8) | ((buffer [shift + 38] & 0xff) << 16) | (buffer [shift + 39] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [9] = (buffer [shift + 36] & 0xff) | ((buffer [shift + 37] & 0xff) << 8) | ((buffer [shift + 38] & 0xff) << 16) | (buffer [shift + 39] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [9] = (buffer [shift + 36] & 0xff) | ((buffer [shift + 37] & 0xff) << 8) | ((buffer [shift + 38] & 0xff) << 16) | (buffer [shift + 39] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [9] = (buffer [shift + 36] & 0xff) | ((buffer [shift + 37] & 0xff) << 8) | ((buffer [shift + 38] & 0xff) << 16) | (buffer [shift + 39] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [9] = (buffer [shift + 36] & 0xff) | ((buffer [shift + 37] & 0xff) << 8) | ((buffer [shift + 38] & 0xff) << 16) | (buffer [shift + 39] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [9] = (buffer [shift + 36] & 0xff) | ((buffer [shift + 37] & 0xff) << 8) | ((buffer [shift + 38] & 0xff) << 16) | (buffer [shift + 39] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [9] = (buffer [shift + 36] & 0xff) | ((buffer [shift + 37] & 0xff) << 8) | ((buffer [shift + 38] & 0xff) << 16) | (buffer [shift + 39] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [10] = (buffer [shift + 40] & 0xff) | ((buffer [shift + 41] & 0xff) << 8) | ((buffer [shift + 42] & 0xff) << 16) | (buffer [shift + 43] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [10] = (buffer [shift + 40] & 0xff) | ((buffer [shift + 41] & 0xff) << 8) | ((buffer [shift + 42] & 0xff) << 16) | (buffer [shift + 43] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [10] = (buffer [shift + 40] & 0xff) | ((buffer [shift + 41] & 0xff) << 8) | ((buffer [shift + 42] & 0xff) << 16) | (buffer [shift + 43] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [10] = (buffer [shift + 40] & 0xff) | ((buffer [shift + 41] & 0xff) << 8) | ((buffer [shift + 42] & 0xff) << 16) | (buffer [shift + 43] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [10] = (buffer [shift + 40] & 0xff) | ((buffer [shift + 41] & 0xff) << 8) | ((buffer [shift + 42] & 0xff) << 16) | (buffer [shift + 43] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [10] = (buffer [shift + 40] & 0xff) | ((buffer [shift + 41] & 0xff) << 8) | ((buffer [shift + 42] & 0xff) << 16) | (buffer [shift + 43] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [10] = (buffer [shift + 40] & 0xff) | ((buffer [shift + 41] & 0xff) << 8) | ((buffer [shift + 42] & 0xff) << 16) | (buffer [shift + 43] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [10] = (buffer [shift + 40] & 0xff) | ((buffer [shift + 41] & 0xff) << 8) | ((buffer [shift + 42] & 0xff) << 16) | (buffer [shift + 43] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [11] = (buffer [shift + 44] & 0xff) | ((buffer [shift + 45] & 0xff) << 8) | ((buffer [shift + 46] & 0xff) << 16) | (buffer [shift + 47] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [11] = (buffer [shift + 44] & 0xff) | ((buffer [shift + 45] & 0xff) << 8) | ((buffer [shift + 46] & 0xff) << 16) | (buffer [shift + 47] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [11] = (buffer [shift + 44] & 0xff) | ((buffer [shift + 45] & 0xff) << 8) | ((buffer [shift + 46] & 0xff) << 16) | (buffer [shift + 47] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [11] = (buffer [shift + 44] & 0xff) | ((buffer [shift + 45] & 0xff) << 8) | ((buffer [shift + 46] & 0xff) << 16) | (buffer [shift + 47] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [11] = (buffer [shift + 44] & 0xff) | ((buffer [shift + 45] & 0xff) << 8) | ((buffer [shift + 46] & 0xff) << 16) | (buffer [shift + 47] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [11] = (buffer [shift + 44] & 0xff) | ((buffer [shift + 45] & 0xff) << 8) | ((buffer [shift + 46] & 0xff) << 16) | (buffer [shift + 47] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [11] = (buffer [shift + 44] & 0xff) | ((buffer [shift + 45] & 0xff) << 8) | ((buffer [shift + 46] & 0xff) << 16) | (buffer [shift + 47] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [11] = (buffer [shift + 44] & 0xff) | ((buffer [shift + 45] & 0xff) << 8) | ((buffer [shift + 46] & 0xff) << 16) | (buffer [shift + 47] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [12] = (buffer [shift + 48] & 0xff) | ((buffer [shift + 49] & 0xff) << 8) | ((buffer [shift + 50] & 0xff) << 16) | (buffer [shift + 51] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [12] = (buffer [shift + 48] & 0xff) | ((buffer [shift + 49] & 0xff) << 8) | ((buffer [shift + 50] & 0xff) << 16) | (buffer [shift + 51] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [12] = (buffer [shift + 48] & 0xff) | ((buffer [shift + 49] & 0xff) << 8) | ((buffer [shift + 50] & 0xff) << 16) | (buffer [shift + 51] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [12] = (buffer [shift + 48] & 0xff) | ((buffer [shift + 49] & 0xff) << 8) | ((buffer [shift + 50] & 0xff) << 16) | (buffer [shift + 51] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [12] = (buffer [shift + 48] & 0xff) | ((buffer [shift + 49] & 0xff) << 8) | ((buffer [shift + 50] & 0xff) << 16) | (buffer [shift + 51] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [12] = (buffer [shift + 48] & 0xff) | ((buffer [shift + 49] & 0xff) << 8) | ((buffer [shift + 50] & 0xff) << 16) | (buffer [shift + 51] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [12] = (buffer [shift + 48] & 0xff) | ((buffer [shift + 49] & 0xff) << 8) | ((buffer [shift + 50] & 0xff) << 16) | (buffer [shift + 51] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [12] = (buffer [shift + 48] & 0xff) | ((buffer [shift + 49] & 0xff) << 8) | ((buffer [shift + 50] & 0xff) << 16) | (buffer [shift + 51] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [13] = (buffer [shift + 52] & 0xff) | ((buffer [shift + 53] & 0xff) << 8) | ((buffer [shift + 54] & 0xff) << 16) | (buffer [shift + 55] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [13] = (buffer [shift + 52] & 0xff) | ((buffer [shift + 53] & 0xff) << 8) | ((buffer [shift + 54] & 0xff) << 16) | (buffer [shift + 55] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [13] = (buffer [shift + 52] & 0xff) | ((buffer [shift + 53] & 0xff) << 8) | ((buffer [shift + 54] & 0xff) << 16) | (buffer [shift + 55] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [13] = (buffer [shift + 52] & 0xff) | ((buffer [shift + 53] & 0xff) << 8) | ((buffer [shift + 54] & 0xff) << 16) | (buffer [shift + 55] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [13] = (buffer [shift + 52] & 0xff) | ((buffer [shift + 53] & 0xff) << 8) | ((buffer [shift + 54] & 0xff) << 16) | (buffer [shift + 55] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [13] = (buffer [shift + 52] & 0xff) | ((buffer [shift + 53] & 0xff) << 8) | ((buffer [shift + 54] & 0xff) << 16) | (buffer [shift + 55] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [13] = (buffer [shift + 52] & 0xff) | ((buffer [shift + 53] & 0xff) << 8) | ((buffer [shift + 54] & 0xff) << 16) | (buffer [shift + 55] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [13] = (buffer [shift + 52] & 0xff) | ((buffer [shift + 53] & 0xff) << 8) | ((buffer [shift + 54] & 0xff) << 16) | (buffer [shift + 55] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [14] = (buffer [shift + 56] & 0xff) | ((buffer [shift + 57] & 0xff) << 8) | ((buffer [shift + 58] & 0xff) << 16) | (buffer [shift + 59] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [14] = (buffer [shift + 56] & 0xff) | ((buffer [shift + 57] & 0xff) << 8) | ((buffer [shift + 58] & 0xff) << 16) | (buffer [shift + 59] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [14] = (buffer [shift + 56] & 0xff) | ((buffer [shift + 57] & 0xff) << 8) | ((buffer [shift + 58] & 0xff) << 16) | (buffer [shift + 59] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [14] = (buffer [shift + 56] & 0xff) | ((buffer [shift + 57] & 0xff) << 8) | ((buffer [shift + 58] & 0xff) << 16) | (buffer [shift + 59] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [14] = (buffer [shift + 56] & 0xff) | ((buffer [shift + 57] & 0xff) << 8) | ((buffer [shift + 58] & 0xff) << 16) | (buffer [shift + 59] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [14] = (buffer [shift + 56] & 0xff) | ((buffer [shift + 57] & 0xff) << 8) | ((buffer [shift + 58] & 0xff) << 16) | (buffer [shift + 59] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [14] = (buffer [shift + 56] & 0xff) | ((buffer [shift + 57] & 0xff) << 8) | ((buffer [shift + 58] & 0xff) << 16) | (buffer [shift + 59] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [14] = (buffer [shift + 56] & 0xff) | ((buffer [shift + 57] & 0xff) << 8) | ((buffer [shift + 58] & 0xff) << 16) | (buffer [shift + 59] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [15] = (buffer [shift + 60] & 0xff) | ((buffer [shift + 61] & 0xff) << 8) | ((buffer [shift + 62] & 0xff) << 16) | (buffer [shift + 63] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [15] = (buffer [shift + 60] & 0xff) | ((buffer [shift + 61] & 0xff) << 8) | ((buffer [shift + 62] & 0xff) << 16) | (buffer [shift + 63] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [15] = (buffer [shift + 60] & 0xff) | ((buffer [shift + 61] & 0xff) << 8) | ((buffer [shift + 62] & 0xff) << 16) | (buffer [shift + 63] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [15] = (buffer [shift + 60] & 0xff) | ((buffer [shift + 61] & 0xff) << 8) | ((buffer [shift + 62] & 0xff) << 16) | (buffer [shift + 63] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [15] = (buffer [shift + 60] & 0xff) | ((buffer [shift + 61] & 0xff) << 8) | ((buffer [shift + 62] & 0xff) << 16) | (buffer [shift + 63] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [15] = (buffer [shift + 60] & 0xff) | ((buffer [shift + 61] & 0xff) << 8) | ((buffer [shift + 62] & 0xff) << 16) | (buffer [shift + 63] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [15] = (buffer [shift + 60] & 0xff) | ((buffer [shift + 61] & 0xff) << 8) | ((buffer [shift + 62] & 0xff) << 16) | (buffer [shift + 63] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,decode,The following statement contains a magic number: out_Renamed [15] = (buffer [shift + 60] & 0xff) | ((buffer [shift + 61] & 0xff) << 8) | ((buffer [shift + 62] & 0xff) << 16) | (buffer [shift + 63] << 24);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a = ((a << 7) | (SupportClass.URShift (a' 25))) + b;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a = ((a << 7) | (SupportClass.URShift (a' 25))) + b;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d = ((d << 12) | (SupportClass.URShift (d' 20))) + a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d = ((d << 12) | (SupportClass.URShift (d' 20))) + a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c += ((d & a) | (~d & b)) + x [2] + 0x242070db;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c = ((c << 17) | (SupportClass.URShift (c' 15))) + d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c = ((c << 17) | (SupportClass.URShift (c' 15))) + d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b += ((c & d) | (~c & a)) + x [3] + 0xc1bdceee;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b = ((b << 22) | (SupportClass.URShift (b' 10))) + c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b = ((b << 22) | (SupportClass.URShift (b' 10))) + c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a += ((b & c) | (~b & d)) + x [4] + 0xf57c0faf;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a = ((a << 7) | (SupportClass.URShift (a' 25))) + b;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a = ((a << 7) | (SupportClass.URShift (a' 25))) + b;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d += ((a & b) | (~a & c)) + x [5] + 0x4787c62a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d = ((d << 12) | (SupportClass.URShift (d' 20))) + a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d = ((d << 12) | (SupportClass.URShift (d' 20))) + a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c += ((d & a) | (~d & b)) + x [6] + 0xa8304613;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c = ((c << 17) | (SupportClass.URShift (c' 15))) + d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c = ((c << 17) | (SupportClass.URShift (c' 15))) + d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b += ((c & d) | (~c & a)) + x [7] + 0xfd469501;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b = ((b << 22) | (SupportClass.URShift (b' 10))) + c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b = ((b << 22) | (SupportClass.URShift (b' 10))) + c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a += ((b & c) | (~b & d)) + x [8] + 0x698098d8;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a = ((a << 7) | (SupportClass.URShift (a' 25))) + b;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a = ((a << 7) | (SupportClass.URShift (a' 25))) + b;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d += ((a & b) | (~a & c)) + x [9] + 0x8b44f7af;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d = ((d << 12) | (SupportClass.URShift (d' 20))) + a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d = ((d << 12) | (SupportClass.URShift (d' 20))) + a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c += ((d & a) | (~d & b)) + x [10] + 0xffff5bb1;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c = ((c << 17) | (SupportClass.URShift (c' 15))) + d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c = ((c << 17) | (SupportClass.URShift (c' 15))) + d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b += ((c & d) | (~c & a)) + x [11] + 0x895cd7be;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b = ((b << 22) | (SupportClass.URShift (b' 10))) + c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b = ((b << 22) | (SupportClass.URShift (b' 10))) + c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a += ((b & c) | (~b & d)) + x [12] + 0x6b901122;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a = ((a << 7) | (SupportClass.URShift (a' 25))) + b;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a = ((a << 7) | (SupportClass.URShift (a' 25))) + b;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d += ((a & b) | (~a & c)) + x [13] + 0xfd987193;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d = ((d << 12) | (SupportClass.URShift (d' 20))) + a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d = ((d << 12) | (SupportClass.URShift (d' 20))) + a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c += ((d & a) | (~d & b)) + x [14] + 0xa679438e;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c = ((c << 17) | (SupportClass.URShift (c' 15))) + d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c = ((c << 17) | (SupportClass.URShift (c' 15))) + d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b += ((c & d) | (~c & a)) + x [15] + 0x49b40821;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b = ((b << 22) | (SupportClass.URShift (b' 10))) + c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b = ((b << 22) | (SupportClass.URShift (b' 10))) + c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a = ((a << 5) | (SupportClass.URShift (a' 27))) + b;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a = ((a << 5) | (SupportClass.URShift (a' 27))) + b;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d += ((a & c) | (b & ~c)) + x [6] + 0xc040b340;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d = ((d << 9) | (SupportClass.URShift (d' 23))) + a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d = ((d << 9) | (SupportClass.URShift (d' 23))) + a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c += ((d & b) | (a & ~b)) + x [11] + 0x265e5a51;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c = ((c << 14) | (SupportClass.URShift (c' 18))) + d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c = ((c << 14) | (SupportClass.URShift (c' 18))) + d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b = ((b << 20) | (SupportClass.URShift (b' 12))) + c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b = ((b << 20) | (SupportClass.URShift (b' 12))) + c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a += ((b & d) | (c & ~d)) + x [5] + 0xd62f105d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a = ((a << 5) | (SupportClass.URShift (a' 27))) + b;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a = ((a << 5) | (SupportClass.URShift (a' 27))) + b;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d += ((a & c) | (b & ~c)) + x [10] + 0x02441453;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d = ((d << 9) | (SupportClass.URShift (d' 23))) + a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d = ((d << 9) | (SupportClass.URShift (d' 23))) + a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c += ((d & b) | (a & ~b)) + x [15] + 0xd8a1e681;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c = ((c << 14) | (SupportClass.URShift (c' 18))) + d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c = ((c << 14) | (SupportClass.URShift (c' 18))) + d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b += ((c & a) | (d & ~a)) + x [4] + 0xe7d3fbc8;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b = ((b << 20) | (SupportClass.URShift (b' 12))) + c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b = ((b << 20) | (SupportClass.URShift (b' 12))) + c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a += ((b & d) | (c & ~d)) + x [9] + 0x21e1cde6;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a = ((a << 5) | (SupportClass.URShift (a' 27))) + b;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a = ((a << 5) | (SupportClass.URShift (a' 27))) + b;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d += ((a & c) | (b & ~c)) + x [14] + 0xc33707d6;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d = ((d << 9) | (SupportClass.URShift (d' 23))) + a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d = ((d << 9) | (SupportClass.URShift (d' 23))) + a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c += ((d & b) | (a & ~b)) + x [3] + 0xf4d50d87;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c = ((c << 14) | (SupportClass.URShift (c' 18))) + d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c = ((c << 14) | (SupportClass.URShift (c' 18))) + d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b += ((c & a) | (d & ~a)) + x [8] + 0x455a14ed;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b = ((b << 20) | (SupportClass.URShift (b' 12))) + c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b = ((b << 20) | (SupportClass.URShift (b' 12))) + c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a += ((b & d) | (c & ~d)) + x [13] + 0xa9e3e905;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a = ((a << 5) | (SupportClass.URShift (a' 27))) + b;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a = ((a << 5) | (SupportClass.URShift (a' 27))) + b;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d += ((a & c) | (b & ~c)) + x [2] + 0xfcefa3f8;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d = ((d << 9) | (SupportClass.URShift (d' 23))) + a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d = ((d << 9) | (SupportClass.URShift (d' 23))) + a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c += ((d & b) | (a & ~b)) + x [7] + 0x676f02d9;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c = ((c << 14) | (SupportClass.URShift (c' 18))) + d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c = ((c << 14) | (SupportClass.URShift (c' 18))) + d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b += ((c & a) | (d & ~a)) + x [12] + 0x8d2a4c8a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b = ((b << 20) | (SupportClass.URShift (b' 12))) + c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b = ((b << 20) | (SupportClass.URShift (b' 12))) + c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a += (b ^ c ^ d) + x [5] + 0xfffa3942;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a = ((a << 4) | (SupportClass.URShift (a' 28))) + b;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a = ((a << 4) | (SupportClass.URShift (a' 28))) + b;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d += (a ^ b ^ c) + x [8] + 0x8771f681;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d = ((d << 11) | (SupportClass.URShift (d' 21))) + a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d = ((d << 11) | (SupportClass.URShift (d' 21))) + a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c += (d ^ a ^ b) + x [11] + 0x6d9d6122;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c = ((c << 16) | (SupportClass.URShift (c' 16))) + d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c = ((c << 16) | (SupportClass.URShift (c' 16))) + d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b += (c ^ d ^ a) + x [14] + 0xfde5380c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b = ((b << 23) | (SupportClass.URShift (b' 9))) + c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b = ((b << 23) | (SupportClass.URShift (b' 9))) + c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a = ((a << 4) | (SupportClass.URShift (a' 28))) + b;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a = ((a << 4) | (SupportClass.URShift (a' 28))) + b;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d += (a ^ b ^ c) + x [4] + 0x4bdecfa9;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d = ((d << 11) | (SupportClass.URShift (d' 21))) + a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d = ((d << 11) | (SupportClass.URShift (d' 21))) + a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c += (d ^ a ^ b) + x [7] + 0xf6bb4b60;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c = ((c << 16) | (SupportClass.URShift (c' 16))) + d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c = ((c << 16) | (SupportClass.URShift (c' 16))) + d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b += (c ^ d ^ a) + x [10] + 0xbebfbc70;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b = ((b << 23) | (SupportClass.URShift (b' 9))) + c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b = ((b << 23) | (SupportClass.URShift (b' 9))) + c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a += (b ^ c ^ d) + x [13] + 0x289b7ec6;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a = ((a << 4) | (SupportClass.URShift (a' 28))) + b;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a = ((a << 4) | (SupportClass.URShift (a' 28))) + b;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d = ((d << 11) | (SupportClass.URShift (d' 21))) + a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d = ((d << 11) | (SupportClass.URShift (d' 21))) + a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c += (d ^ a ^ b) + x [3] + 0xd4ef3085;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c = ((c << 16) | (SupportClass.URShift (c' 16))) + d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c = ((c << 16) | (SupportClass.URShift (c' 16))) + d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b += (c ^ d ^ a) + x [6] + 0x04881d05;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b = ((b << 23) | (SupportClass.URShift (b' 9))) + c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b = ((b << 23) | (SupportClass.URShift (b' 9))) + c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a += (b ^ c ^ d) + x [9] + 0xd9d4d039;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a = ((a << 4) | (SupportClass.URShift (a' 28))) + b;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a = ((a << 4) | (SupportClass.URShift (a' 28))) + b;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d += (a ^ b ^ c) + x [12] + 0xe6db99e5;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d = ((d << 11) | (SupportClass.URShift (d' 21))) + a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d = ((d << 11) | (SupportClass.URShift (d' 21))) + a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c += (d ^ a ^ b) + x [15] + 0x1fa27cf8;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c = ((c << 16) | (SupportClass.URShift (c' 16))) + d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c = ((c << 16) | (SupportClass.URShift (c' 16))) + d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b += (c ^ d ^ a) + x [2] + 0xc4ac5665;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b = ((b << 23) | (SupportClass.URShift (b' 9))) + c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b = ((b << 23) | (SupportClass.URShift (b' 9))) + c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a = ((a << 6) | (SupportClass.URShift (a' 26))) + b;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a = ((a << 6) | (SupportClass.URShift (a' 26))) + b;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d += (b ^ (a | ~c)) + x [7] + 0x432aff97;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d = ((d << 10) | (SupportClass.URShift (d' 22))) + a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d = ((d << 10) | (SupportClass.URShift (d' 22))) + a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c += (a ^ (d | ~b)) + x [14] + 0xab9423a7;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c = ((c << 15) | (SupportClass.URShift (c' 17))) + d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c = ((c << 15) | (SupportClass.URShift (c' 17))) + d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b += (d ^ (c | ~a)) + x [5] + 0xfc93a039;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b = ((b << 21) | (SupportClass.URShift (b' 11))) + c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b = ((b << 21) | (SupportClass.URShift (b' 11))) + c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a += (c ^ (b | ~d)) + x [12] + 0x655b59c3;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a = ((a << 6) | (SupportClass.URShift (a' 26))) + b;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a = ((a << 6) | (SupportClass.URShift (a' 26))) + b;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d += (b ^ (a | ~c)) + x [3] + 0x8f0ccc92;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d = ((d << 10) | (SupportClass.URShift (d' 22))) + a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d = ((d << 10) | (SupportClass.URShift (d' 22))) + a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c += (a ^ (d | ~b)) + x [10] + 0xffeff47d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c = ((c << 15) | (SupportClass.URShift (c' 17))) + d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c = ((c << 15) | (SupportClass.URShift (c' 17))) + d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b = ((b << 21) | (SupportClass.URShift (b' 11))) + c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b = ((b << 21) | (SupportClass.URShift (b' 11))) + c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a += (c ^ (b | ~d)) + x [8] + 0x6fa87e4f;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a = ((a << 6) | (SupportClass.URShift (a' 26))) + b;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a = ((a << 6) | (SupportClass.URShift (a' 26))) + b;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d += (b ^ (a | ~c)) + x [15] + 0xfe2ce6e0;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d = ((d << 10) | (SupportClass.URShift (d' 22))) + a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d = ((d << 10) | (SupportClass.URShift (d' 22))) + a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c += (a ^ (d | ~b)) + x [6] + 0xa3014314;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c = ((c << 15) | (SupportClass.URShift (c' 17))) + d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c = ((c << 15) | (SupportClass.URShift (c' 17))) + d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b += (d ^ (c | ~a)) + x [13] + 0x4e0811a1;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b = ((b << 21) | (SupportClass.URShift (b' 11))) + c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b = ((b << 21) | (SupportClass.URShift (b' 11))) + c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a += (c ^ (b | ~d)) + x [4] + 0xf7537e82;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a = ((a << 6) | (SupportClass.URShift (a' 26))) + b;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: a = ((a << 6) | (SupportClass.URShift (a' 26))) + b;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d += (b ^ (a | ~c)) + x [11] + 0xbd3af235;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d = ((d << 10) | (SupportClass.URShift (d' 22))) + a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: d = ((d << 10) | (SupportClass.URShift (d' 22))) + a;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c += (a ^ (d | ~b)) + x [2] + 0x2ad7d2bb;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c = ((c << 15) | (SupportClass.URShift (c' 17))) + d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: c = ((c << 15) | (SupportClass.URShift (c' 17))) + d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b += (d ^ (c | ~a)) + x [9] + 0xeb86d391;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b = ((b << 21) | (SupportClass.URShift (b' 11))) + c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: b = ((b << 21) | (SupportClass.URShift (b' 11))) + c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: state.state [2] += c;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,transform,The following statement contains a magic number: state.state [3] += d;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,update,The following statement contains a magic number: partlen = 64 - index;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,update,The following statement contains a magic number: if (length >= partlen) {  	// update state (using only Java) to reflect input  	int[] decode_buf = new int[16];  	if (partlen == 64) {  		partlen = 0;  	}  	else {  		for (i = 0; i < partlen; i++)  			stat.buffer [i + index] = buffer [i + offset];  		transform (stat' stat.buffer' 0' decode_buf);  	}  	for (i = partlen; (i + 63) < length; i += 64) {  		transform (stat' buffer' i + offset' decode_buf);  	}  	index = 0;  }  else  	i = 0;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,update,The following statement contains a magic number: if (length >= partlen) {  	// update state (using only Java) to reflect input  	int[] decode_buf = new int[16];  	if (partlen == 64) {  		partlen = 0;  	}  	else {  		for (i = 0; i < partlen; i++)  			stat.buffer [i + index] = buffer [i + offset];  		transform (stat' stat.buffer' 0' decode_buf);  	}  	for (i = partlen; (i + 63) < length; i += 64) {  		transform (stat' buffer' i + offset' decode_buf);  	}  	index = 0;  }  else  	i = 0;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,update,The following statement contains a magic number: if (length >= partlen) {  	// update state (using only Java) to reflect input  	int[] decode_buf = new int[16];  	if (partlen == 64) {  		partlen = 0;  	}  	else {  		for (i = 0; i < partlen; i++)  			stat.buffer [i + index] = buffer [i + offset];  		transform (stat' stat.buffer' 0' decode_buf);  	}  	for (i = partlen; (i + 63) < length; i += 64) {  		transform (stat' buffer' i + offset' decode_buf);  	}  	index = 0;  }  else  	i = 0;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,update,The following statement contains a magic number: if (length >= partlen) {  	// update state (using only Java) to reflect input  	int[] decode_buf = new int[16];  	if (partlen == 64) {  		partlen = 0;  	}  	else {  		for (i = 0; i < partlen; i++)  			stat.buffer [i + index] = buffer [i + offset];  		transform (stat' stat.buffer' 0' decode_buf);  	}  	for (i = partlen; (i + 63) < length; i += 64) {  		transform (stat' buffer' i + offset' decode_buf);  	}  	index = 0;  }  else  	i = 0;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,update,The following statement contains a magic number: if (partlen == 64) {  	partlen = 0;  }  else {  	for (i = 0; i < partlen; i++)  		stat.buffer [i + index] = buffer [i + offset];  	transform (stat' stat.buffer' 0' decode_buf);  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,update,The following statement contains a magic number: for (i = partlen; (i + 63) < length; i += 64) {  	transform (stat' buffer' i + offset' decode_buf);  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,update,The following statement contains a magic number: for (i = partlen; (i + 63) < length; i += 64) {  	transform (stat' buffer' i + offset' decode_buf);  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,update,The following statement contains a magic number: i += 64
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,encode,The following statement contains a magic number: for (i = j = 0; j < len; i++' j += 4) {  	out_Renamed [j] = (sbyte)(input [i] & 0xff);  	out_Renamed [j + 1] = (sbyte)((SupportClass.URShift (input [i]' 8)) & 0xff);  	out_Renamed [j + 2] = (sbyte)((SupportClass.URShift (input [i]' 16)) & 0xff);  	out_Renamed [j + 3] = (sbyte)((SupportClass.URShift (input [i]' 24)) & 0xff);  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,encode,The following statement contains a magic number: for (i = j = 0; j < len; i++' j += 4) {  	out_Renamed [j] = (sbyte)(input [i] & 0xff);  	out_Renamed [j + 1] = (sbyte)((SupportClass.URShift (input [i]' 8)) & 0xff);  	out_Renamed [j + 2] = (sbyte)((SupportClass.URShift (input [i]' 16)) & 0xff);  	out_Renamed [j + 3] = (sbyte)((SupportClass.URShift (input [i]' 24)) & 0xff);  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,encode,The following statement contains a magic number: for (i = j = 0; j < len; i++' j += 4) {  	out_Renamed [j] = (sbyte)(input [i] & 0xff);  	out_Renamed [j + 1] = (sbyte)((SupportClass.URShift (input [i]' 8)) & 0xff);  	out_Renamed [j + 2] = (sbyte)((SupportClass.URShift (input [i]' 16)) & 0xff);  	out_Renamed [j + 3] = (sbyte)((SupportClass.URShift (input [i]' 24)) & 0xff);  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,encode,The following statement contains a magic number: for (i = j = 0; j < len; i++' j += 4) {  	out_Renamed [j] = (sbyte)(input [i] & 0xff);  	out_Renamed [j + 1] = (sbyte)((SupportClass.URShift (input [i]' 8)) & 0xff);  	out_Renamed [j + 2] = (sbyte)((SupportClass.URShift (input [i]' 16)) & 0xff);  	out_Renamed [j + 3] = (sbyte)((SupportClass.URShift (input [i]' 24)) & 0xff);  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,encode,The following statement contains a magic number: for (i = j = 0; j < len; i++' j += 4) {  	out_Renamed [j] = (sbyte)(input [i] & 0xff);  	out_Renamed [j + 1] = (sbyte)((SupportClass.URShift (input [i]' 8)) & 0xff);  	out_Renamed [j + 2] = (sbyte)((SupportClass.URShift (input [i]' 16)) & 0xff);  	out_Renamed [j + 3] = (sbyte)((SupportClass.URShift (input [i]' 24)) & 0xff);  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,encode,The following statement contains a magic number: for (i = j = 0; j < len; i++' j += 4) {  	out_Renamed [j] = (sbyte)(input [i] & 0xff);  	out_Renamed [j + 1] = (sbyte)((SupportClass.URShift (input [i]' 8)) & 0xff);  	out_Renamed [j + 2] = (sbyte)((SupportClass.URShift (input [i]' 16)) & 0xff);  	out_Renamed [j + 3] = (sbyte)((SupportClass.URShift (input [i]' 24)) & 0xff);  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,encode,The following statement contains a magic number: j += 4
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,encode,The following statement contains a magic number: out_Renamed [j + 1] = (sbyte)((SupportClass.URShift (input [i]' 8)) & 0xff);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,encode,The following statement contains a magic number: out_Renamed [j + 2] = (sbyte)((SupportClass.URShift (input [i]' 16)) & 0xff);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,encode,The following statement contains a magic number: out_Renamed [j + 2] = (sbyte)((SupportClass.URShift (input [i]' 16)) & 0xff);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,encode,The following statement contains a magic number: out_Renamed [j + 3] = (sbyte)((SupportClass.URShift (input [i]' 24)) & 0xff);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,encode,The following statement contains a magic number: out_Renamed [j + 3] = (sbyte)((SupportClass.URShift (input [i]' 24)) & 0xff);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,doFinal,The following statement contains a magic number: lock (this) {  	sbyte[] bits;  	int index' padlen;  	MD5State fin;  	if (finals == null) {  		fin = new MD5State (state);  		int[] count_ints = new int[] {  			(int)(fin.count << 3)'  			(int)(fin.count >> 29)  		};  		bits = encode (count_ints' 8);  		index = (int)(fin.count & 0x3f);  		padlen = (index < 56) ? (56 - index) : (120 - index);  		update (fin' padding' 0' padlen);  		update (fin' bits' 0' 8);  		/* Update() sets finals to null */finals = fin;  	}  	return encode (finals.state' 16);  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,doFinal,The following statement contains a magic number: lock (this) {  	sbyte[] bits;  	int index' padlen;  	MD5State fin;  	if (finals == null) {  		fin = new MD5State (state);  		int[] count_ints = new int[] {  			(int)(fin.count << 3)'  			(int)(fin.count >> 29)  		};  		bits = encode (count_ints' 8);  		index = (int)(fin.count & 0x3f);  		padlen = (index < 56) ? (56 - index) : (120 - index);  		update (fin' padding' 0' padlen);  		update (fin' bits' 0' 8);  		/* Update() sets finals to null */finals = fin;  	}  	return encode (finals.state' 16);  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,doFinal,The following statement contains a magic number: lock (this) {  	sbyte[] bits;  	int index' padlen;  	MD5State fin;  	if (finals == null) {  		fin = new MD5State (state);  		int[] count_ints = new int[] {  			(int)(fin.count << 3)'  			(int)(fin.count >> 29)  		};  		bits = encode (count_ints' 8);  		index = (int)(fin.count & 0x3f);  		padlen = (index < 56) ? (56 - index) : (120 - index);  		update (fin' padding' 0' padlen);  		update (fin' bits' 0' 8);  		/* Update() sets finals to null */finals = fin;  	}  	return encode (finals.state' 16);  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,doFinal,The following statement contains a magic number: lock (this) {  	sbyte[] bits;  	int index' padlen;  	MD5State fin;  	if (finals == null) {  		fin = new MD5State (state);  		int[] count_ints = new int[] {  			(int)(fin.count << 3)'  			(int)(fin.count >> 29)  		};  		bits = encode (count_ints' 8);  		index = (int)(fin.count & 0x3f);  		padlen = (index < 56) ? (56 - index) : (120 - index);  		update (fin' padding' 0' padlen);  		update (fin' bits' 0' 8);  		/* Update() sets finals to null */finals = fin;  	}  	return encode (finals.state' 16);  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,doFinal,The following statement contains a magic number: lock (this) {  	sbyte[] bits;  	int index' padlen;  	MD5State fin;  	if (finals == null) {  		fin = new MD5State (state);  		int[] count_ints = new int[] {  			(int)(fin.count << 3)'  			(int)(fin.count >> 29)  		};  		bits = encode (count_ints' 8);  		index = (int)(fin.count & 0x3f);  		padlen = (index < 56) ? (56 - index) : (120 - index);  		update (fin' padding' 0' padlen);  		update (fin' bits' 0' 8);  		/* Update() sets finals to null */finals = fin;  	}  	return encode (finals.state' 16);  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,doFinal,The following statement contains a magic number: lock (this) {  	sbyte[] bits;  	int index' padlen;  	MD5State fin;  	if (finals == null) {  		fin = new MD5State (state);  		int[] count_ints = new int[] {  			(int)(fin.count << 3)'  			(int)(fin.count >> 29)  		};  		bits = encode (count_ints' 8);  		index = (int)(fin.count & 0x3f);  		padlen = (index < 56) ? (56 - index) : (120 - index);  		update (fin' padding' 0' padlen);  		update (fin' bits' 0' 8);  		/* Update() sets finals to null */finals = fin;  	}  	return encode (finals.state' 16);  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,doFinal,The following statement contains a magic number: lock (this) {  	sbyte[] bits;  	int index' padlen;  	MD5State fin;  	if (finals == null) {  		fin = new MD5State (state);  		int[] count_ints = new int[] {  			(int)(fin.count << 3)'  			(int)(fin.count >> 29)  		};  		bits = encode (count_ints' 8);  		index = (int)(fin.count & 0x3f);  		padlen = (index < 56) ? (56 - index) : (120 - index);  		update (fin' padding' 0' padlen);  		update (fin' bits' 0' 8);  		/* Update() sets finals to null */finals = fin;  	}  	return encode (finals.state' 16);  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,doFinal,The following statement contains a magic number: lock (this) {  	sbyte[] bits;  	int index' padlen;  	MD5State fin;  	if (finals == null) {  		fin = new MD5State (state);  		int[] count_ints = new int[] {  			(int)(fin.count << 3)'  			(int)(fin.count >> 29)  		};  		bits = encode (count_ints' 8);  		index = (int)(fin.count & 0x3f);  		padlen = (index < 56) ? (56 - index) : (120 - index);  		update (fin' padding' 0' padlen);  		update (fin' bits' 0' 8);  		/* Update() sets finals to null */finals = fin;  	}  	return encode (finals.state' 16);  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,doFinal,The following statement contains a magic number: if (finals == null) {  	fin = new MD5State (state);  	int[] count_ints = new int[] {  		(int)(fin.count << 3)'  		(int)(fin.count >> 29)  	};  	bits = encode (count_ints' 8);  	index = (int)(fin.count & 0x3f);  	padlen = (index < 56) ? (56 - index) : (120 - index);  	update (fin' padding' 0' padlen);  	update (fin' bits' 0' 8);  	/* Update() sets finals to null */finals = fin;  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,doFinal,The following statement contains a magic number: if (finals == null) {  	fin = new MD5State (state);  	int[] count_ints = new int[] {  		(int)(fin.count << 3)'  		(int)(fin.count >> 29)  	};  	bits = encode (count_ints' 8);  	index = (int)(fin.count & 0x3f);  	padlen = (index < 56) ? (56 - index) : (120 - index);  	update (fin' padding' 0' padlen);  	update (fin' bits' 0' 8);  	/* Update() sets finals to null */finals = fin;  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,doFinal,The following statement contains a magic number: if (finals == null) {  	fin = new MD5State (state);  	int[] count_ints = new int[] {  		(int)(fin.count << 3)'  		(int)(fin.count >> 29)  	};  	bits = encode (count_ints' 8);  	index = (int)(fin.count & 0x3f);  	padlen = (index < 56) ? (56 - index) : (120 - index);  	update (fin' padding' 0' padlen);  	update (fin' bits' 0' 8);  	/* Update() sets finals to null */finals = fin;  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,doFinal,The following statement contains a magic number: if (finals == null) {  	fin = new MD5State (state);  	int[] count_ints = new int[] {  		(int)(fin.count << 3)'  		(int)(fin.count >> 29)  	};  	bits = encode (count_ints' 8);  	index = (int)(fin.count & 0x3f);  	padlen = (index < 56) ? (56 - index) : (120 - index);  	update (fin' padding' 0' padlen);  	update (fin' bits' 0' 8);  	/* Update() sets finals to null */finals = fin;  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,doFinal,The following statement contains a magic number: if (finals == null) {  	fin = new MD5State (state);  	int[] count_ints = new int[] {  		(int)(fin.count << 3)'  		(int)(fin.count >> 29)  	};  	bits = encode (count_ints' 8);  	index = (int)(fin.count & 0x3f);  	padlen = (index < 56) ? (56 - index) : (120 - index);  	update (fin' padding' 0' padlen);  	update (fin' bits' 0' 8);  	/* Update() sets finals to null */finals = fin;  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,doFinal,The following statement contains a magic number: if (finals == null) {  	fin = new MD5State (state);  	int[] count_ints = new int[] {  		(int)(fin.count << 3)'  		(int)(fin.count >> 29)  	};  	bits = encode (count_ints' 8);  	index = (int)(fin.count & 0x3f);  	padlen = (index < 56) ? (56 - index) : (120 - index);  	update (fin' padding' 0' padlen);  	update (fin' bits' 0' 8);  	/* Update() sets finals to null */finals = fin;  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,doFinal,The following statement contains a magic number: if (finals == null) {  	fin = new MD5State (state);  	int[] count_ints = new int[] {  		(int)(fin.count << 3)'  		(int)(fin.count >> 29)  	};  	bits = encode (count_ints' 8);  	index = (int)(fin.count & 0x3f);  	padlen = (index < 56) ? (56 - index) : (120 - index);  	update (fin' padding' 0' padlen);  	update (fin' bits' 0' 8);  	/* Update() sets finals to null */finals = fin;  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,doFinal,The following statement contains a magic number: bits = encode (count_ints' 8);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,doFinal,The following statement contains a magic number: padlen = (index < 56) ? (56 - index) : (120 - index);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,doFinal,The following statement contains a magic number: padlen = (index < 56) ? (56 - index) : (120 - index);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,doFinal,The following statement contains a magic number: padlen = (index < 56) ? (56 - index) : (120 - index);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,doFinal,The following statement contains a magic number: update (fin' bits' 0' 8);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,doFinal,The following statement contains a magic number: return encode (finals.state' 16);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,toHex,The following statement contains a magic number: for (int i = 0' x = 0; i < hash.Length; i++) {  	buf [x++] = HEX_CHARS [(SupportClass.URShift (hash [i]' 4)) & 0xf];  	buf [x++] = HEX_CHARS [hash [i] & 0xf];  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,toHex,The following statement contains a magic number: buf [x++] = HEX_CHARS [(SupportClass.URShift (hash [i]' 4)) & 0xf];  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,toBase64,The following statement contains a magic number: for (int i = 0' index = 0; i < data.Length; i += 3' index += 4) {  	bool quad = false;  	bool trip = false;  	int val = (0xFF & data [i]);  	val <<= 8;  	if ((i + 1) < data.Length) {  		val |= (0xFF & data [i + 1]);  		trip = true;  	}  	val <<= 8;  	if ((i + 2) < data.Length) {  		val |= (0xFF & data [i + 2]);  		quad = true;  	}  	out_Renamed [index + 3] = alphabet [(quad ? (val & 0x3F) : 64)];  	val >>= 6;  	out_Renamed [index + 2] = alphabet [(trip ? (val & 0x3F) : 64)];  	val >>= 6;  	out_Renamed [index + 1] = alphabet [val & 0x3F];  	val >>= 6;  	out_Renamed [index + 0] = alphabet [val & 0x3F];  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,toBase64,The following statement contains a magic number: for (int i = 0' index = 0; i < data.Length; i += 3' index += 4) {  	bool quad = false;  	bool trip = false;  	int val = (0xFF & data [i]);  	val <<= 8;  	if ((i + 1) < data.Length) {  		val |= (0xFF & data [i + 1]);  		trip = true;  	}  	val <<= 8;  	if ((i + 2) < data.Length) {  		val |= (0xFF & data [i + 2]);  		quad = true;  	}  	out_Renamed [index + 3] = alphabet [(quad ? (val & 0x3F) : 64)];  	val >>= 6;  	out_Renamed [index + 2] = alphabet [(trip ? (val & 0x3F) : 64)];  	val >>= 6;  	out_Renamed [index + 1] = alphabet [val & 0x3F];  	val >>= 6;  	out_Renamed [index + 0] = alphabet [val & 0x3F];  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,toBase64,The following statement contains a magic number: for (int i = 0' index = 0; i < data.Length; i += 3' index += 4) {  	bool quad = false;  	bool trip = false;  	int val = (0xFF & data [i]);  	val <<= 8;  	if ((i + 1) < data.Length) {  		val |= (0xFF & data [i + 1]);  		trip = true;  	}  	val <<= 8;  	if ((i + 2) < data.Length) {  		val |= (0xFF & data [i + 2]);  		quad = true;  	}  	out_Renamed [index + 3] = alphabet [(quad ? (val & 0x3F) : 64)];  	val >>= 6;  	out_Renamed [index + 2] = alphabet [(trip ? (val & 0x3F) : 64)];  	val >>= 6;  	out_Renamed [index + 1] = alphabet [val & 0x3F];  	val >>= 6;  	out_Renamed [index + 0] = alphabet [val & 0x3F];  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,toBase64,The following statement contains a magic number: for (int i = 0' index = 0; i < data.Length; i += 3' index += 4) {  	bool quad = false;  	bool trip = false;  	int val = (0xFF & data [i]);  	val <<= 8;  	if ((i + 1) < data.Length) {  		val |= (0xFF & data [i + 1]);  		trip = true;  	}  	val <<= 8;  	if ((i + 2) < data.Length) {  		val |= (0xFF & data [i + 2]);  		quad = true;  	}  	out_Renamed [index + 3] = alphabet [(quad ? (val & 0x3F) : 64)];  	val >>= 6;  	out_Renamed [index + 2] = alphabet [(trip ? (val & 0x3F) : 64)];  	val >>= 6;  	out_Renamed [index + 1] = alphabet [val & 0x3F];  	val >>= 6;  	out_Renamed [index + 0] = alphabet [val & 0x3F];  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,toBase64,The following statement contains a magic number: for (int i = 0' index = 0; i < data.Length; i += 3' index += 4) {  	bool quad = false;  	bool trip = false;  	int val = (0xFF & data [i]);  	val <<= 8;  	if ((i + 1) < data.Length) {  		val |= (0xFF & data [i + 1]);  		trip = true;  	}  	val <<= 8;  	if ((i + 2) < data.Length) {  		val |= (0xFF & data [i + 2]);  		quad = true;  	}  	out_Renamed [index + 3] = alphabet [(quad ? (val & 0x3F) : 64)];  	val >>= 6;  	out_Renamed [index + 2] = alphabet [(trip ? (val & 0x3F) : 64)];  	val >>= 6;  	out_Renamed [index + 1] = alphabet [val & 0x3F];  	val >>= 6;  	out_Renamed [index + 0] = alphabet [val & 0x3F];  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,toBase64,The following statement contains a magic number: for (int i = 0' index = 0; i < data.Length; i += 3' index += 4) {  	bool quad = false;  	bool trip = false;  	int val = (0xFF & data [i]);  	val <<= 8;  	if ((i + 1) < data.Length) {  		val |= (0xFF & data [i + 1]);  		trip = true;  	}  	val <<= 8;  	if ((i + 2) < data.Length) {  		val |= (0xFF & data [i + 2]);  		quad = true;  	}  	out_Renamed [index + 3] = alphabet [(quad ? (val & 0x3F) : 64)];  	val >>= 6;  	out_Renamed [index + 2] = alphabet [(trip ? (val & 0x3F) : 64)];  	val >>= 6;  	out_Renamed [index + 1] = alphabet [val & 0x3F];  	val >>= 6;  	out_Renamed [index + 0] = alphabet [val & 0x3F];  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,toBase64,The following statement contains a magic number: for (int i = 0' index = 0; i < data.Length; i += 3' index += 4) {  	bool quad = false;  	bool trip = false;  	int val = (0xFF & data [i]);  	val <<= 8;  	if ((i + 1) < data.Length) {  		val |= (0xFF & data [i + 1]);  		trip = true;  	}  	val <<= 8;  	if ((i + 2) < data.Length) {  		val |= (0xFF & data [i + 2]);  		quad = true;  	}  	out_Renamed [index + 3] = alphabet [(quad ? (val & 0x3F) : 64)];  	val >>= 6;  	out_Renamed [index + 2] = alphabet [(trip ? (val & 0x3F) : 64)];  	val >>= 6;  	out_Renamed [index + 1] = alphabet [val & 0x3F];  	val >>= 6;  	out_Renamed [index + 0] = alphabet [val & 0x3F];  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,toBase64,The following statement contains a magic number: for (int i = 0' index = 0; i < data.Length; i += 3' index += 4) {  	bool quad = false;  	bool trip = false;  	int val = (0xFF & data [i]);  	val <<= 8;  	if ((i + 1) < data.Length) {  		val |= (0xFF & data [i + 1]);  		trip = true;  	}  	val <<= 8;  	if ((i + 2) < data.Length) {  		val |= (0xFF & data [i + 2]);  		quad = true;  	}  	out_Renamed [index + 3] = alphabet [(quad ? (val & 0x3F) : 64)];  	val >>= 6;  	out_Renamed [index + 2] = alphabet [(trip ? (val & 0x3F) : 64)];  	val >>= 6;  	out_Renamed [index + 1] = alphabet [val & 0x3F];  	val >>= 6;  	out_Renamed [index + 0] = alphabet [val & 0x3F];  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,toBase64,The following statement contains a magic number: for (int i = 0' index = 0; i < data.Length; i += 3' index += 4) {  	bool quad = false;  	bool trip = false;  	int val = (0xFF & data [i]);  	val <<= 8;  	if ((i + 1) < data.Length) {  		val |= (0xFF & data [i + 1]);  		trip = true;  	}  	val <<= 8;  	if ((i + 2) < data.Length) {  		val |= (0xFF & data [i + 2]);  		quad = true;  	}  	out_Renamed [index + 3] = alphabet [(quad ? (val & 0x3F) : 64)];  	val >>= 6;  	out_Renamed [index + 2] = alphabet [(trip ? (val & 0x3F) : 64)];  	val >>= 6;  	out_Renamed [index + 1] = alphabet [val & 0x3F];  	val >>= 6;  	out_Renamed [index + 0] = alphabet [val & 0x3F];  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,toBase64,The following statement contains a magic number: for (int i = 0' index = 0; i < data.Length; i += 3' index += 4) {  	bool quad = false;  	bool trip = false;  	int val = (0xFF & data [i]);  	val <<= 8;  	if ((i + 1) < data.Length) {  		val |= (0xFF & data [i + 1]);  		trip = true;  	}  	val <<= 8;  	if ((i + 2) < data.Length) {  		val |= (0xFF & data [i + 2]);  		quad = true;  	}  	out_Renamed [index + 3] = alphabet [(quad ? (val & 0x3F) : 64)];  	val >>= 6;  	out_Renamed [index + 2] = alphabet [(trip ? (val & 0x3F) : 64)];  	val >>= 6;  	out_Renamed [index + 1] = alphabet [val & 0x3F];  	val >>= 6;  	out_Renamed [index + 0] = alphabet [val & 0x3F];  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,toBase64,The following statement contains a magic number: for (int i = 0' index = 0; i < data.Length; i += 3' index += 4) {  	bool quad = false;  	bool trip = false;  	int val = (0xFF & data [i]);  	val <<= 8;  	if ((i + 1) < data.Length) {  		val |= (0xFF & data [i + 1]);  		trip = true;  	}  	val <<= 8;  	if ((i + 2) < data.Length) {  		val |= (0xFF & data [i + 2]);  		quad = true;  	}  	out_Renamed [index + 3] = alphabet [(quad ? (val & 0x3F) : 64)];  	val >>= 6;  	out_Renamed [index + 2] = alphabet [(trip ? (val & 0x3F) : 64)];  	val >>= 6;  	out_Renamed [index + 1] = alphabet [val & 0x3F];  	val >>= 6;  	out_Renamed [index + 0] = alphabet [val & 0x3F];  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,toBase64,The following statement contains a magic number: for (int i = 0' index = 0; i < data.Length; i += 3' index += 4) {  	bool quad = false;  	bool trip = false;  	int val = (0xFF & data [i]);  	val <<= 8;  	if ((i + 1) < data.Length) {  		val |= (0xFF & data [i + 1]);  		trip = true;  	}  	val <<= 8;  	if ((i + 2) < data.Length) {  		val |= (0xFF & data [i + 2]);  		quad = true;  	}  	out_Renamed [index + 3] = alphabet [(quad ? (val & 0x3F) : 64)];  	val >>= 6;  	out_Renamed [index + 2] = alphabet [(trip ? (val & 0x3F) : 64)];  	val >>= 6;  	out_Renamed [index + 1] = alphabet [val & 0x3F];  	val >>= 6;  	out_Renamed [index + 0] = alphabet [val & 0x3F];  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,toBase64,The following statement contains a magic number: for (int i = 0' index = 0; i < data.Length; i += 3' index += 4) {  	bool quad = false;  	bool trip = false;  	int val = (0xFF & data [i]);  	val <<= 8;  	if ((i + 1) < data.Length) {  		val |= (0xFF & data [i + 1]);  		trip = true;  	}  	val <<= 8;  	if ((i + 2) < data.Length) {  		val |= (0xFF & data [i + 2]);  		quad = true;  	}  	out_Renamed [index + 3] = alphabet [(quad ? (val & 0x3F) : 64)];  	val >>= 6;  	out_Renamed [index + 2] = alphabet [(trip ? (val & 0x3F) : 64)];  	val >>= 6;  	out_Renamed [index + 1] = alphabet [val & 0x3F];  	val >>= 6;  	out_Renamed [index + 0] = alphabet [val & 0x3F];  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,toBase64,The following statement contains a magic number: i += 3
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,toBase64,The following statement contains a magic number: index += 4
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,toBase64,The following statement contains a magic number: val <<= 8;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,toBase64,The following statement contains a magic number: val <<= 8;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,toBase64,The following statement contains a magic number: if ((i + 2) < data.Length) {  	val |= (0xFF & data [i + 2]);  	quad = true;  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,toBase64,The following statement contains a magic number: if ((i + 2) < data.Length) {  	val |= (0xFF & data [i + 2]);  	quad = true;  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,toBase64,The following statement contains a magic number: val |= (0xFF & data [i + 2]);  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,toBase64,The following statement contains a magic number: out_Renamed [index + 3] = alphabet [(quad ? (val & 0x3F) : 64)];  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,toBase64,The following statement contains a magic number: out_Renamed [index + 3] = alphabet [(quad ? (val & 0x3F) : 64)];  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,toBase64,The following statement contains a magic number: val >>= 6;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,toBase64,The following statement contains a magic number: out_Renamed [index + 2] = alphabet [(trip ? (val & 0x3F) : 64)];  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,toBase64,The following statement contains a magic number: out_Renamed [index + 2] = alphabet [(trip ? (val & 0x3F) : 64)];  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,toBase64,The following statement contains a magic number: val >>= 6;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,toBase64,The following statement contains a magic number: val >>= 6;  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,equals,The following statement contains a magic number: if (hash1.Length < 16) {  	if (hash2.Length != hash1.Length)  		return false;  	targ = hash1.Length;  }  else if (hash2.Length < 16) {  	return false;  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,equals,The following statement contains a magic number: if (hash1.Length < 16) {  	if (hash2.Length != hash1.Length)  		return false;  	targ = hash1.Length;  }  else if (hash2.Length < 16) {  	return false;  }  
Magic Number,org.javarosa.core.util,MD5,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5.cs,equals,The following statement contains a magic number: if (hash2.Length < 16) {  	return false;  }  
Magic Number,org.javarosa.core.util,MD5State,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5State.cs,MD5State,The following statement contains a magic number: buffer = new sbyte[64];  
Magic Number,org.javarosa.core.util,MD5State,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5State.cs,MD5State,The following statement contains a magic number: state = new int[4];  
Magic Number,org.javarosa.core.util,MD5State,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5State.cs,MD5State,The following statement contains a magic number: state [2] = unchecked((int)0x98badcfe);  
Magic Number,org.javarosa.core.util,MD5State,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MD5State.cs,MD5State,The following statement contains a magic number: state [3] = 0x10325476;  
Magic Number,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,enableMemoryProfile,The following statement contains a magic number: memoryProfile = new long[MEMORY_PROFILE_SIZE * 2];  
Magic Number,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,printMemoryTest,The following statement contains a magic number: while (true) {  	System.GC.Collect ();  	try {  		int newAmount = lastSuccess + chunk;  		sbyte[] allocated = new sbyte[newAmount];  		lastSuccess = newAmount;  		//If we succeeded' keep trying a larger piece.   		chunk = chunk * 10;  	}  	catch (System.OutOfMemoryException oom) {  		chunk = chunk / 2;  		if (chunk < resolution) {  			break;  		}  	}  }  
Magic Number,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,printMemoryTest,The following statement contains a magic number: while (true) {  	System.GC.Collect ();  	try {  		int newAmount = lastSuccess + chunk;  		sbyte[] allocated = new sbyte[newAmount];  		lastSuccess = newAmount;  		//If we succeeded' keep trying a larger piece.   		chunk = chunk * 10;  	}  	catch (System.OutOfMemoryException oom) {  		chunk = chunk / 2;  		if (chunk < resolution) {  			break;  		}  	}  }  
Magic Number,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,printMemoryTest,The following statement contains a magic number: try {  	int newAmount = lastSuccess + chunk;  	sbyte[] allocated = new sbyte[newAmount];  	lastSuccess = newAmount;  	//If we succeeded' keep trying a larger piece.   	chunk = chunk * 10;  }  catch (System.OutOfMemoryException oom) {  	chunk = chunk / 2;  	if (chunk < resolution) {  		break;  	}  }  
Magic Number,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,printMemoryTest,The following statement contains a magic number: try {  	int newAmount = lastSuccess + chunk;  	sbyte[] allocated = new sbyte[newAmount];  	lastSuccess = newAmount;  	//If we succeeded' keep trying a larger piece.   	chunk = chunk * 10;  }  catch (System.OutOfMemoryException oom) {  	chunk = chunk / 2;  	if (chunk < resolution) {  		break;  	}  }  
Magic Number,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,printMemoryTest,The following statement contains a magic number: chunk = chunk * 10;  
Magic Number,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,printMemoryTest,The following statement contains a magic number: chunk = chunk / 2;  
Magic Number,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,printMemoryTest,The following statement contains a magic number: if (pause != -1) {  	try {  		//UPGRADE_TODO: Method 'java.lang.Thread.sleep' was converted to 'System.Threading.Thread.Sleep' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javalangThreadsleep_long'"  		System.Threading.Thread.Sleep (new System.TimeSpan ((System.Int64)10000 * pause));  	}  	catch (System.Threading.ThreadInterruptedException e) {  		// TODO Auto-generated catch block  		SupportClass.WriteStackTrace (e' Console.Error);  	}  }  
Magic Number,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,printMemoryTest,The following statement contains a magic number: try {  	//UPGRADE_TODO: Method 'java.lang.Thread.sleep' was converted to 'System.Threading.Thread.Sleep' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javalangThreadsleep_long'"  	System.Threading.Thread.Sleep (new System.TimeSpan ((System.Int64)10000 * pause));  }  catch (System.Threading.ThreadInterruptedException e) {  	// TODO Auto-generated catch block  	SupportClass.WriteStackTrace (e' Console.Error);  }  
Magic Number,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,printMemoryTest,The following statement contains a magic number: System.Threading.Thread.Sleep (new System.TimeSpan ((System.Int64)10000 * pause));  
Magic Number,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,profileMemory,The following statement contains a magic number: while (true) {  	if (currentCount >= MEMORY_PROFILE_SIZE) {  		System.Console.Out.WriteLine ("Memory profile is too small for this device's usage!");  		break;  	}  	if (chunkSize < threshold) {  		succeeded = true;  		break;  	}  	try {  		memoryHolders [currentCount] = new sbyte[chunkSize];  		memoryProfile [currentCount * 2] = (memoryHolders [currentCount].GetHashCode () & unchecked((int)0x00000000ffffffffL));  		memoryProfile [(currentCount * 2) + 1] = chunkSize;  		currentCount++;  		memoryAccountedFor += chunkSize;  	}  	catch (System.OutOfMemoryException oom) {  		chunkSize = chunkSize - (chunkSize < 100 ? 1 : 50);  	}  }  
Magic Number,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,profileMemory,The following statement contains a magic number: while (true) {  	if (currentCount >= MEMORY_PROFILE_SIZE) {  		System.Console.Out.WriteLine ("Memory profile is too small for this device's usage!");  		break;  	}  	if (chunkSize < threshold) {  		succeeded = true;  		break;  	}  	try {  		memoryHolders [currentCount] = new sbyte[chunkSize];  		memoryProfile [currentCount * 2] = (memoryHolders [currentCount].GetHashCode () & unchecked((int)0x00000000ffffffffL));  		memoryProfile [(currentCount * 2) + 1] = chunkSize;  		currentCount++;  		memoryAccountedFor += chunkSize;  	}  	catch (System.OutOfMemoryException oom) {  		chunkSize = chunkSize - (chunkSize < 100 ? 1 : 50);  	}  }  
Magic Number,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,profileMemory,The following statement contains a magic number: while (true) {  	if (currentCount >= MEMORY_PROFILE_SIZE) {  		System.Console.Out.WriteLine ("Memory profile is too small for this device's usage!");  		break;  	}  	if (chunkSize < threshold) {  		succeeded = true;  		break;  	}  	try {  		memoryHolders [currentCount] = new sbyte[chunkSize];  		memoryProfile [currentCount * 2] = (memoryHolders [currentCount].GetHashCode () & unchecked((int)0x00000000ffffffffL));  		memoryProfile [(currentCount * 2) + 1] = chunkSize;  		currentCount++;  		memoryAccountedFor += chunkSize;  	}  	catch (System.OutOfMemoryException oom) {  		chunkSize = chunkSize - (chunkSize < 100 ? 1 : 50);  	}  }  
Magic Number,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,profileMemory,The following statement contains a magic number: while (true) {  	if (currentCount >= MEMORY_PROFILE_SIZE) {  		System.Console.Out.WriteLine ("Memory profile is too small for this device's usage!");  		break;  	}  	if (chunkSize < threshold) {  		succeeded = true;  		break;  	}  	try {  		memoryHolders [currentCount] = new sbyte[chunkSize];  		memoryProfile [currentCount * 2] = (memoryHolders [currentCount].GetHashCode () & unchecked((int)0x00000000ffffffffL));  		memoryProfile [(currentCount * 2) + 1] = chunkSize;  		currentCount++;  		memoryAccountedFor += chunkSize;  	}  	catch (System.OutOfMemoryException oom) {  		chunkSize = chunkSize - (chunkSize < 100 ? 1 : 50);  	}  }  
Magic Number,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,profileMemory,The following statement contains a magic number: try {  	memoryHolders [currentCount] = new sbyte[chunkSize];  	memoryProfile [currentCount * 2] = (memoryHolders [currentCount].GetHashCode () & unchecked((int)0x00000000ffffffffL));  	memoryProfile [(currentCount * 2) + 1] = chunkSize;  	currentCount++;  	memoryAccountedFor += chunkSize;  }  catch (System.OutOfMemoryException oom) {  	chunkSize = chunkSize - (chunkSize < 100 ? 1 : 50);  }  
Magic Number,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,profileMemory,The following statement contains a magic number: try {  	memoryHolders [currentCount] = new sbyte[chunkSize];  	memoryProfile [currentCount * 2] = (memoryHolders [currentCount].GetHashCode () & unchecked((int)0x00000000ffffffffL));  	memoryProfile [(currentCount * 2) + 1] = chunkSize;  	currentCount++;  	memoryAccountedFor += chunkSize;  }  catch (System.OutOfMemoryException oom) {  	chunkSize = chunkSize - (chunkSize < 100 ? 1 : 50);  }  
Magic Number,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,profileMemory,The following statement contains a magic number: try {  	memoryHolders [currentCount] = new sbyte[chunkSize];  	memoryProfile [currentCount * 2] = (memoryHolders [currentCount].GetHashCode () & unchecked((int)0x00000000ffffffffL));  	memoryProfile [(currentCount * 2) + 1] = chunkSize;  	currentCount++;  	memoryAccountedFor += chunkSize;  }  catch (System.OutOfMemoryException oom) {  	chunkSize = chunkSize - (chunkSize < 100 ? 1 : 50);  }  
Magic Number,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,profileMemory,The following statement contains a magic number: try {  	memoryHolders [currentCount] = new sbyte[chunkSize];  	memoryProfile [currentCount * 2] = (memoryHolders [currentCount].GetHashCode () & unchecked((int)0x00000000ffffffffL));  	memoryProfile [(currentCount * 2) + 1] = chunkSize;  	currentCount++;  	memoryAccountedFor += chunkSize;  }  catch (System.OutOfMemoryException oom) {  	chunkSize = chunkSize - (chunkSize < 100 ? 1 : 50);  }  
Magic Number,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,profileMemory,The following statement contains a magic number: memoryProfile [currentCount * 2] = (memoryHolders [currentCount].GetHashCode () & unchecked((int)0x00000000ffffffffL));  
Magic Number,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,profileMemory,The following statement contains a magic number: memoryProfile [(currentCount * 2) + 1] = chunkSize;  
Magic Number,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,profileMemory,The following statement contains a magic number: chunkSize = chunkSize - (chunkSize < 100 ? 1 : 50);  
Magic Number,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,profileMemory,The following statement contains a magic number: chunkSize = chunkSize - (chunkSize < 100 ? 1 : 50);  
Magic Number,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,profileMemory,The following statement contains a magic number: if (succeeded) {  	System.Console.Out.WriteLine ("Acquired memory profile for " + memoryAccountedFor + " of the " + memory + " available bytes' with " + currentCount + " traces");  	for (int i = 0; i < currentCount * 2; i += 2) {  		System.Console.Out.WriteLine ("Address: " + memoryProfile [i] + " -> " + memoryProfile [i + 1]);  	}  }  
Magic Number,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,profileMemory,The following statement contains a magic number: if (succeeded) {  	System.Console.Out.WriteLine ("Acquired memory profile for " + memoryAccountedFor + " of the " + memory + " available bytes' with " + currentCount + " traces");  	for (int i = 0; i < currentCount * 2; i += 2) {  		System.Console.Out.WriteLine ("Address: " + memoryProfile [i] + " -> " + memoryProfile [i + 1]);  	}  }  
Magic Number,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,profileMemory,The following statement contains a magic number: for (int i = 0; i < currentCount * 2; i += 2) {  	System.Console.Out.WriteLine ("Address: " + memoryProfile [i] + " -> " + memoryProfile [i + 1]);  }  
Magic Number,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,profileMemory,The following statement contains a magic number: for (int i = 0; i < currentCount * 2; i += 2) {  	System.Console.Out.WriteLine ("Address: " + memoryProfile [i] + " -> " + memoryProfile [i + 1]);  }  
Magic Number,org.javarosa.core.util,MemoryUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\MemoryUtils.cs,profileMemory,The following statement contains a magic number: i += 2
Magic Number,org.javarosa.core.util,PrefixTree,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\PrefixTree.cs,PrefixTree,The following statement contains a magic number: this.minimumHeuristicLength = System.Math.Max ((int)(minimumPrefixLength / 2)' 3);  
Magic Number,org.javarosa.core.util,PrefixTree,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\PrefixTree.cs,PrefixTree,The following statement contains a magic number: this.minimumHeuristicLength = System.Math.Max ((int)(minimumPrefixLength / 2)' 3);  
Magic Number,org.javarosa.core.util,PropertyUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\PropertyUtils.cs,initializeProperty,The following statement contains a magic number: if (propVal == null || propVal.Count == 0) {  	propVal = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10));  	propVal.Add (defaultValue);  	PropertyManager._ ().setProperty (propName' propVal);  	//#if debug.output==verbose  	System.Console.Out.WriteLine ("No default value for [" + propName + "]; setting to [" + defaultValue + "]");  	// debug  	//#endif  	return defaultValue;  }  
Magic Number,org.javarosa.core.util,PropertyUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\PropertyUtils.cs,initializeProperty,The following statement contains a magic number: propVal = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10));  
Magic Number,org.javarosa.core.util,PropertyUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\PropertyUtils.cs,genUUID,The following statement contains a magic number: return randHex (8) + "-" + randHex (4) + "-4" + randHex (3) + "-" + System.Convert.ToString (8 + MathUtils.Rand.Next (4)' 16) + randHex (3) + "-" + randHex (12);  
Magic Number,org.javarosa.core.util,PropertyUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\PropertyUtils.cs,genUUID,The following statement contains a magic number: return randHex (8) + "-" + randHex (4) + "-4" + randHex (3) + "-" + System.Convert.ToString (8 + MathUtils.Rand.Next (4)' 16) + randHex (3) + "-" + randHex (12);  
Magic Number,org.javarosa.core.util,PropertyUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\PropertyUtils.cs,genUUID,The following statement contains a magic number: return randHex (8) + "-" + randHex (4) + "-4" + randHex (3) + "-" + System.Convert.ToString (8 + MathUtils.Rand.Next (4)' 16) + randHex (3) + "-" + randHex (12);  
Magic Number,org.javarosa.core.util,PropertyUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\PropertyUtils.cs,genUUID,The following statement contains a magic number: return randHex (8) + "-" + randHex (4) + "-4" + randHex (3) + "-" + System.Convert.ToString (8 + MathUtils.Rand.Next (4)' 16) + randHex (3) + "-" + randHex (12);  
Magic Number,org.javarosa.core.util,PropertyUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\PropertyUtils.cs,genUUID,The following statement contains a magic number: return randHex (8) + "-" + randHex (4) + "-4" + randHex (3) + "-" + System.Convert.ToString (8 + MathUtils.Rand.Next (4)' 16) + randHex (3) + "-" + randHex (12);  
Magic Number,org.javarosa.core.util,PropertyUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\PropertyUtils.cs,genUUID,The following statement contains a magic number: return randHex (8) + "-" + randHex (4) + "-4" + randHex (3) + "-" + System.Convert.ToString (8 + MathUtils.Rand.Next (4)' 16) + randHex (3) + "-" + randHex (12);  
Magic Number,org.javarosa.core.util,PropertyUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\PropertyUtils.cs,genUUID,The following statement contains a magic number: return randHex (8) + "-" + randHex (4) + "-4" + randHex (3) + "-" + System.Convert.ToString (8 + MathUtils.Rand.Next (4)' 16) + randHex (3) + "-" + randHex (12);  
Magic Number,org.javarosa.core.util,PropertyUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\PropertyUtils.cs,genUUID,The following statement contains a magic number: return randHex (8) + "-" + randHex (4) + "-4" + randHex (3) + "-" + System.Convert.ToString (8 + MathUtils.Rand.Next (4)' 16) + randHex (3) + "-" + randHex (12);  
Magic Number,org.javarosa.core.util,PropertyUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\PropertyUtils.cs,genGUID,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	// 25 == 128 bits of entropy  	b.append (System.Convert.ToString (MathUtils.Rand.Next (36)' 36));  }  
Magic Number,org.javarosa.core.util,PropertyUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\PropertyUtils.cs,genGUID,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	// 25 == 128 bits of entropy  	b.append (System.Convert.ToString (MathUtils.Rand.Next (36)' 36));  }  
Magic Number,org.javarosa.core.util,PropertyUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\PropertyUtils.cs,genGUID,The following statement contains a magic number: b.append (System.Convert.ToString (MathUtils.Rand.Next (36)' 36));  
Magic Number,org.javarosa.core.util,PropertyUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\PropertyUtils.cs,genGUID,The following statement contains a magic number: b.append (System.Convert.ToString (MathUtils.Rand.Next (36)' 36));  
Magic Number,org.javarosa.core.util,PropertyUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\PropertyUtils.cs,randHex,The following statement contains a magic number: for (int i = 0; i < len; ++i) {  	b.append (System.Convert.ToString (r.Next (16)' 16));  }  
Magic Number,org.javarosa.core.util,PropertyUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\PropertyUtils.cs,randHex,The following statement contains a magic number: for (int i = 0; i < len; ++i) {  	b.append (System.Convert.ToString (r.Next (16)' 16));  }  
Magic Number,org.javarosa.core.util,PropertyUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\PropertyUtils.cs,randHex,The following statement contains a magic number: b.append (System.Convert.ToString (r.Next (16)' 16));  
Magic Number,org.javarosa.core.util,PropertyUtils,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\PropertyUtils.cs,randHex,The following statement contains a magic number: b.append (System.Convert.ToString (r.Next (16)' 16));  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,rol,The following statement contains a magic number: return (num << cnt) | (SupportClass.URShift (num' (32 - cnt)));  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (i = 0; i < x.Length; i++) {  	blks [i >> 2] |= x [i] << (24 - (i % 4) * 8);  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (i = 0; i < x.Length; i++) {  	blks [i >> 2] |= x [i] << (24 - (i % 4) * 8);  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (i = 0; i < x.Length; i++) {  	blks [i >> 2] |= x [i] << (24 - (i % 4) * 8);  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (i = 0; i < x.Length; i++) {  	blks [i >> 2] |= x [i] << (24 - (i % 4) * 8);  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: blks [i >> 2] |= x [i] << (24 - (i % 4) * 8);  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: blks [i >> 2] |= x [i] << (24 - (i % 4) * 8);  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: blks [i >> 2] |= x [i] << (24 - (i % 4) * 8);  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: blks [i >> 2] |= x [i] << (24 - (i % 4) * 8);  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: blks [i >> 2] |= 0x80 << (24 - (i % 4) * 8);  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: blks [i >> 2] |= 0x80 << (24 - (i % 4) * 8);  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: blks [i >> 2] |= 0x80 << (24 - (i % 4) * 8);  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: blks [i >> 2] |= 0x80 << (24 - (i % 4) * 8);  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: blks [blks.Length - 1] = x.Length * 8;  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (i = 0; i < blks.Length; i += 16) {  	int olda = a;  	int oldb = b;  	int oldc = c;  	int oldd = d;  	int olde = e;  	for (int j = 0; j < 80; j++) {  		w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  		int t = rol (a' 5) + e + w [j] + ((j < 20) ? 1518500249 + ((b & c) | ((~b) & d)) : ((j < 40) ? 1859775393 + (b ^ c ^ d) : ((j < 60) ? -1894007588 + ((b & c) | (b & d) | (c & d)) : -899497514 + (b ^ c ^ d))));  		e = d;  		d = c;  		c = rol (b' 30);  		b = a;  		a = t;  	}  	a = a + olda;  	b = b + oldb;  	c = c + oldc;  	d = d + oldd;  	e = e + olde;  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (i = 0; i < blks.Length; i += 16) {  	int olda = a;  	int oldb = b;  	int oldc = c;  	int oldd = d;  	int olde = e;  	for (int j = 0; j < 80; j++) {  		w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  		int t = rol (a' 5) + e + w [j] + ((j < 20) ? 1518500249 + ((b & c) | ((~b) & d)) : ((j < 40) ? 1859775393 + (b ^ c ^ d) : ((j < 60) ? -1894007588 + ((b & c) | (b & d) | (c & d)) : -899497514 + (b ^ c ^ d))));  		e = d;  		d = c;  		c = rol (b' 30);  		b = a;  		a = t;  	}  	a = a + olda;  	b = b + oldb;  	c = c + oldc;  	d = d + oldd;  	e = e + olde;  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (i = 0; i < blks.Length; i += 16) {  	int olda = a;  	int oldb = b;  	int oldc = c;  	int oldd = d;  	int olde = e;  	for (int j = 0; j < 80; j++) {  		w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  		int t = rol (a' 5) + e + w [j] + ((j < 20) ? 1518500249 + ((b & c) | ((~b) & d)) : ((j < 40) ? 1859775393 + (b ^ c ^ d) : ((j < 60) ? -1894007588 + ((b & c) | (b & d) | (c & d)) : -899497514 + (b ^ c ^ d))));  		e = d;  		d = c;  		c = rol (b' 30);  		b = a;  		a = t;  	}  	a = a + olda;  	b = b + oldb;  	c = c + oldc;  	d = d + oldd;  	e = e + olde;  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (i = 0; i < blks.Length; i += 16) {  	int olda = a;  	int oldb = b;  	int oldc = c;  	int oldd = d;  	int olde = e;  	for (int j = 0; j < 80; j++) {  		w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  		int t = rol (a' 5) + e + w [j] + ((j < 20) ? 1518500249 + ((b & c) | ((~b) & d)) : ((j < 40) ? 1859775393 + (b ^ c ^ d) : ((j < 60) ? -1894007588 + ((b & c) | (b & d) | (c & d)) : -899497514 + (b ^ c ^ d))));  		e = d;  		d = c;  		c = rol (b' 30);  		b = a;  		a = t;  	}  	a = a + olda;  	b = b + oldb;  	c = c + oldc;  	d = d + oldd;  	e = e + olde;  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (i = 0; i < blks.Length; i += 16) {  	int olda = a;  	int oldb = b;  	int oldc = c;  	int oldd = d;  	int olde = e;  	for (int j = 0; j < 80; j++) {  		w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  		int t = rol (a' 5) + e + w [j] + ((j < 20) ? 1518500249 + ((b & c) | ((~b) & d)) : ((j < 40) ? 1859775393 + (b ^ c ^ d) : ((j < 60) ? -1894007588 + ((b & c) | (b & d) | (c & d)) : -899497514 + (b ^ c ^ d))));  		e = d;  		d = c;  		c = rol (b' 30);  		b = a;  		a = t;  	}  	a = a + olda;  	b = b + oldb;  	c = c + oldc;  	d = d + oldd;  	e = e + olde;  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (i = 0; i < blks.Length; i += 16) {  	int olda = a;  	int oldb = b;  	int oldc = c;  	int oldd = d;  	int olde = e;  	for (int j = 0; j < 80; j++) {  		w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  		int t = rol (a' 5) + e + w [j] + ((j < 20) ? 1518500249 + ((b & c) | ((~b) & d)) : ((j < 40) ? 1859775393 + (b ^ c ^ d) : ((j < 60) ? -1894007588 + ((b & c) | (b & d) | (c & d)) : -899497514 + (b ^ c ^ d))));  		e = d;  		d = c;  		c = rol (b' 30);  		b = a;  		a = t;  	}  	a = a + olda;  	b = b + oldb;  	c = c + oldc;  	d = d + oldd;  	e = e + olde;  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (i = 0; i < blks.Length; i += 16) {  	int olda = a;  	int oldb = b;  	int oldc = c;  	int oldd = d;  	int olde = e;  	for (int j = 0; j < 80; j++) {  		w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  		int t = rol (a' 5) + e + w [j] + ((j < 20) ? 1518500249 + ((b & c) | ((~b) & d)) : ((j < 40) ? 1859775393 + (b ^ c ^ d) : ((j < 60) ? -1894007588 + ((b & c) | (b & d) | (c & d)) : -899497514 + (b ^ c ^ d))));  		e = d;  		d = c;  		c = rol (b' 30);  		b = a;  		a = t;  	}  	a = a + olda;  	b = b + oldb;  	c = c + oldc;  	d = d + oldd;  	e = e + olde;  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (i = 0; i < blks.Length; i += 16) {  	int olda = a;  	int oldb = b;  	int oldc = c;  	int oldd = d;  	int olde = e;  	for (int j = 0; j < 80; j++) {  		w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  		int t = rol (a' 5) + e + w [j] + ((j < 20) ? 1518500249 + ((b & c) | ((~b) & d)) : ((j < 40) ? 1859775393 + (b ^ c ^ d) : ((j < 60) ? -1894007588 + ((b & c) | (b & d) | (c & d)) : -899497514 + (b ^ c ^ d))));  		e = d;  		d = c;  		c = rol (b' 30);  		b = a;  		a = t;  	}  	a = a + olda;  	b = b + oldb;  	c = c + oldc;  	d = d + oldd;  	e = e + olde;  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (i = 0; i < blks.Length; i += 16) {  	int olda = a;  	int oldb = b;  	int oldc = c;  	int oldd = d;  	int olde = e;  	for (int j = 0; j < 80; j++) {  		w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  		int t = rol (a' 5) + e + w [j] + ((j < 20) ? 1518500249 + ((b & c) | ((~b) & d)) : ((j < 40) ? 1859775393 + (b ^ c ^ d) : ((j < 60) ? -1894007588 + ((b & c) | (b & d) | (c & d)) : -899497514 + (b ^ c ^ d))));  		e = d;  		d = c;  		c = rol (b' 30);  		b = a;  		a = t;  	}  	a = a + olda;  	b = b + oldb;  	c = c + oldc;  	d = d + oldd;  	e = e + olde;  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (i = 0; i < blks.Length; i += 16) {  	int olda = a;  	int oldb = b;  	int oldc = c;  	int oldd = d;  	int olde = e;  	for (int j = 0; j < 80; j++) {  		w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  		int t = rol (a' 5) + e + w [j] + ((j < 20) ? 1518500249 + ((b & c) | ((~b) & d)) : ((j < 40) ? 1859775393 + (b ^ c ^ d) : ((j < 60) ? -1894007588 + ((b & c) | (b & d) | (c & d)) : -899497514 + (b ^ c ^ d))));  		e = d;  		d = c;  		c = rol (b' 30);  		b = a;  		a = t;  	}  	a = a + olda;  	b = b + oldb;  	c = c + oldc;  	d = d + oldd;  	e = e + olde;  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (i = 0; i < blks.Length; i += 16) {  	int olda = a;  	int oldb = b;  	int oldc = c;  	int oldd = d;  	int olde = e;  	for (int j = 0; j < 80; j++) {  		w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  		int t = rol (a' 5) + e + w [j] + ((j < 20) ? 1518500249 + ((b & c) | ((~b) & d)) : ((j < 40) ? 1859775393 + (b ^ c ^ d) : ((j < 60) ? -1894007588 + ((b & c) | (b & d) | (c & d)) : -899497514 + (b ^ c ^ d))));  		e = d;  		d = c;  		c = rol (b' 30);  		b = a;  		a = t;  	}  	a = a + olda;  	b = b + oldb;  	c = c + oldc;  	d = d + oldd;  	e = e + olde;  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (i = 0; i < blks.Length; i += 16) {  	int olda = a;  	int oldb = b;  	int oldc = c;  	int oldd = d;  	int olde = e;  	for (int j = 0; j < 80; j++) {  		w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  		int t = rol (a' 5) + e + w [j] + ((j < 20) ? 1518500249 + ((b & c) | ((~b) & d)) : ((j < 40) ? 1859775393 + (b ^ c ^ d) : ((j < 60) ? -1894007588 + ((b & c) | (b & d) | (c & d)) : -899497514 + (b ^ c ^ d))));  		e = d;  		d = c;  		c = rol (b' 30);  		b = a;  		a = t;  	}  	a = a + olda;  	b = b + oldb;  	c = c + oldc;  	d = d + oldd;  	e = e + olde;  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (i = 0; i < blks.Length; i += 16) {  	int olda = a;  	int oldb = b;  	int oldc = c;  	int oldd = d;  	int olde = e;  	for (int j = 0; j < 80; j++) {  		w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  		int t = rol (a' 5) + e + w [j] + ((j < 20) ? 1518500249 + ((b & c) | ((~b) & d)) : ((j < 40) ? 1859775393 + (b ^ c ^ d) : ((j < 60) ? -1894007588 + ((b & c) | (b & d) | (c & d)) : -899497514 + (b ^ c ^ d))));  		e = d;  		d = c;  		c = rol (b' 30);  		b = a;  		a = t;  	}  	a = a + olda;  	b = b + oldb;  	c = c + oldc;  	d = d + oldd;  	e = e + olde;  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (i = 0; i < blks.Length; i += 16) {  	int olda = a;  	int oldb = b;  	int oldc = c;  	int oldd = d;  	int olde = e;  	for (int j = 0; j < 80; j++) {  		w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  		int t = rol (a' 5) + e + w [j] + ((j < 20) ? 1518500249 + ((b & c) | ((~b) & d)) : ((j < 40) ? 1859775393 + (b ^ c ^ d) : ((j < 60) ? -1894007588 + ((b & c) | (b & d) | (c & d)) : -899497514 + (b ^ c ^ d))));  		e = d;  		d = c;  		c = rol (b' 30);  		b = a;  		a = t;  	}  	a = a + olda;  	b = b + oldb;  	c = c + oldc;  	d = d + oldd;  	e = e + olde;  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (i = 0; i < blks.Length; i += 16) {  	int olda = a;  	int oldb = b;  	int oldc = c;  	int oldd = d;  	int olde = e;  	for (int j = 0; j < 80; j++) {  		w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  		int t = rol (a' 5) + e + w [j] + ((j < 20) ? 1518500249 + ((b & c) | ((~b) & d)) : ((j < 40) ? 1859775393 + (b ^ c ^ d) : ((j < 60) ? -1894007588 + ((b & c) | (b & d) | (c & d)) : -899497514 + (b ^ c ^ d))));  		e = d;  		d = c;  		c = rol (b' 30);  		b = a;  		a = t;  	}  	a = a + olda;  	b = b + oldb;  	c = c + oldc;  	d = d + oldd;  	e = e + olde;  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (i = 0; i < blks.Length; i += 16) {  	int olda = a;  	int oldb = b;  	int oldc = c;  	int oldd = d;  	int olde = e;  	for (int j = 0; j < 80; j++) {  		w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  		int t = rol (a' 5) + e + w [j] + ((j < 20) ? 1518500249 + ((b & c) | ((~b) & d)) : ((j < 40) ? 1859775393 + (b ^ c ^ d) : ((j < 60) ? -1894007588 + ((b & c) | (b & d) | (c & d)) : -899497514 + (b ^ c ^ d))));  		e = d;  		d = c;  		c = rol (b' 30);  		b = a;  		a = t;  	}  	a = a + olda;  	b = b + oldb;  	c = c + oldc;  	d = d + oldd;  	e = e + olde;  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: i += 16
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (int j = 0; j < 80; j++) {  	w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  	int t = rol (a' 5) + e + w [j] + ((j < 20) ? 1518500249 + ((b & c) | ((~b) & d)) : ((j < 40) ? 1859775393 + (b ^ c ^ d) : ((j < 60) ? -1894007588 + ((b & c) | (b & d) | (c & d)) : -899497514 + (b ^ c ^ d))));  	e = d;  	d = c;  	c = rol (b' 30);  	b = a;  	a = t;  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (int j = 0; j < 80; j++) {  	w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  	int t = rol (a' 5) + e + w [j] + ((j < 20) ? 1518500249 + ((b & c) | ((~b) & d)) : ((j < 40) ? 1859775393 + (b ^ c ^ d) : ((j < 60) ? -1894007588 + ((b & c) | (b & d) | (c & d)) : -899497514 + (b ^ c ^ d))));  	e = d;  	d = c;  	c = rol (b' 30);  	b = a;  	a = t;  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (int j = 0; j < 80; j++) {  	w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  	int t = rol (a' 5) + e + w [j] + ((j < 20) ? 1518500249 + ((b & c) | ((~b) & d)) : ((j < 40) ? 1859775393 + (b ^ c ^ d) : ((j < 60) ? -1894007588 + ((b & c) | (b & d) | (c & d)) : -899497514 + (b ^ c ^ d))));  	e = d;  	d = c;  	c = rol (b' 30);  	b = a;  	a = t;  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (int j = 0; j < 80; j++) {  	w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  	int t = rol (a' 5) + e + w [j] + ((j < 20) ? 1518500249 + ((b & c) | ((~b) & d)) : ((j < 40) ? 1859775393 + (b ^ c ^ d) : ((j < 60) ? -1894007588 + ((b & c) | (b & d) | (c & d)) : -899497514 + (b ^ c ^ d))));  	e = d;  	d = c;  	c = rol (b' 30);  	b = a;  	a = t;  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (int j = 0; j < 80; j++) {  	w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  	int t = rol (a' 5) + e + w [j] + ((j < 20) ? 1518500249 + ((b & c) | ((~b) & d)) : ((j < 40) ? 1859775393 + (b ^ c ^ d) : ((j < 60) ? -1894007588 + ((b & c) | (b & d) | (c & d)) : -899497514 + (b ^ c ^ d))));  	e = d;  	d = c;  	c = rol (b' 30);  	b = a;  	a = t;  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (int j = 0; j < 80; j++) {  	w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  	int t = rol (a' 5) + e + w [j] + ((j < 20) ? 1518500249 + ((b & c) | ((~b) & d)) : ((j < 40) ? 1859775393 + (b ^ c ^ d) : ((j < 60) ? -1894007588 + ((b & c) | (b & d) | (c & d)) : -899497514 + (b ^ c ^ d))));  	e = d;  	d = c;  	c = rol (b' 30);  	b = a;  	a = t;  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (int j = 0; j < 80; j++) {  	w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  	int t = rol (a' 5) + e + w [j] + ((j < 20) ? 1518500249 + ((b & c) | ((~b) & d)) : ((j < 40) ? 1859775393 + (b ^ c ^ d) : ((j < 60) ? -1894007588 + ((b & c) | (b & d) | (c & d)) : -899497514 + (b ^ c ^ d))));  	e = d;  	d = c;  	c = rol (b' 30);  	b = a;  	a = t;  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (int j = 0; j < 80; j++) {  	w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  	int t = rol (a' 5) + e + w [j] + ((j < 20) ? 1518500249 + ((b & c) | ((~b) & d)) : ((j < 40) ? 1859775393 + (b ^ c ^ d) : ((j < 60) ? -1894007588 + ((b & c) | (b & d) | (c & d)) : -899497514 + (b ^ c ^ d))));  	e = d;  	d = c;  	c = rol (b' 30);  	b = a;  	a = t;  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (int j = 0; j < 80; j++) {  	w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  	int t = rol (a' 5) + e + w [j] + ((j < 20) ? 1518500249 + ((b & c) | ((~b) & d)) : ((j < 40) ? 1859775393 + (b ^ c ^ d) : ((j < 60) ? -1894007588 + ((b & c) | (b & d) | (c & d)) : -899497514 + (b ^ c ^ d))));  	e = d;  	d = c;  	c = rol (b' 30);  	b = a;  	a = t;  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (int j = 0; j < 80; j++) {  	w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  	int t = rol (a' 5) + e + w [j] + ((j < 20) ? 1518500249 + ((b & c) | ((~b) & d)) : ((j < 40) ? 1859775393 + (b ^ c ^ d) : ((j < 60) ? -1894007588 + ((b & c) | (b & d) | (c & d)) : -899497514 + (b ^ c ^ d))));  	e = d;  	d = c;  	c = rol (b' 30);  	b = a;  	a = t;  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (int j = 0; j < 80; j++) {  	w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  	int t = rol (a' 5) + e + w [j] + ((j < 20) ? 1518500249 + ((b & c) | ((~b) & d)) : ((j < 40) ? 1859775393 + (b ^ c ^ d) : ((j < 60) ? -1894007588 + ((b & c) | (b & d) | (c & d)) : -899497514 + (b ^ c ^ d))));  	e = d;  	d = c;  	c = rol (b' 30);  	b = a;  	a = t;  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (int j = 0; j < 80; j++) {  	w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  	int t = rol (a' 5) + e + w [j] + ((j < 20) ? 1518500249 + ((b & c) | ((~b) & d)) : ((j < 40) ? 1859775393 + (b ^ c ^ d) : ((j < 60) ? -1894007588 + ((b & c) | (b & d) | (c & d)) : -899497514 + (b ^ c ^ d))));  	e = d;  	d = c;  	c = rol (b' 30);  	b = a;  	a = t;  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (int j = 0; j < 80; j++) {  	w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  	int t = rol (a' 5) + e + w [j] + ((j < 20) ? 1518500249 + ((b & c) | ((~b) & d)) : ((j < 40) ? 1859775393 + (b ^ c ^ d) : ((j < 60) ? -1894007588 + ((b & c) | (b & d) | (c & d)) : -899497514 + (b ^ c ^ d))));  	e = d;  	d = c;  	c = rol (b' 30);  	b = a;  	a = t;  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (int j = 0; j < 80; j++) {  	w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  	int t = rol (a' 5) + e + w [j] + ((j < 20) ? 1518500249 + ((b & c) | ((~b) & d)) : ((j < 40) ? 1859775393 + (b ^ c ^ d) : ((j < 60) ? -1894007588 + ((b & c) | (b & d) | (c & d)) : -899497514 + (b ^ c ^ d))));  	e = d;  	d = c;  	c = rol (b' 30);  	b = a;  	a = t;  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (int j = 0; j < 80; j++) {  	w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  	int t = rol (a' 5) + e + w [j] + ((j < 20) ? 1518500249 + ((b & c) | ((~b) & d)) : ((j < 40) ? 1859775393 + (b ^ c ^ d) : ((j < 60) ? -1894007588 + ((b & c) | (b & d) | (c & d)) : -899497514 + (b ^ c ^ d))));  	e = d;  	d = c;  	c = rol (b' 30);  	b = a;  	a = t;  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: w [j] = (j < 16) ? blks [i + j] : (rol (w [j - 3] ^ w [j - 8] ^ w [j - 14] ^ w [j - 16]' 1));  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: c = rol (b' 30);  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (i = 0; i < 27; i++) {  	int start = i * 6;  	int word = start >> 5;  	int offset = start & 0x1f;  	if (offset <= 26) {  		result [i] = base64 [(words [word] >> (26 - offset)) & 0x3F];  	}  	else if (offset == 28) {  		result [i] = base64 [(((words [word] & 0x0F) << 2) | ((words [word + 1] >> 30) & 0x03)) & 0x3F];  	}  	else {  		result [i] = base64 [(((words [word] & 0x03) << 4) | ((words [word + 1] >> 28) & 0x0F)) & 0x3F];  	}  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (i = 0; i < 27; i++) {  	int start = i * 6;  	int word = start >> 5;  	int offset = start & 0x1f;  	if (offset <= 26) {  		result [i] = base64 [(words [word] >> (26 - offset)) & 0x3F];  	}  	else if (offset == 28) {  		result [i] = base64 [(((words [word] & 0x0F) << 2) | ((words [word + 1] >> 30) & 0x03)) & 0x3F];  	}  	else {  		result [i] = base64 [(((words [word] & 0x03) << 4) | ((words [word + 1] >> 28) & 0x0F)) & 0x3F];  	}  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (i = 0; i < 27; i++) {  	int start = i * 6;  	int word = start >> 5;  	int offset = start & 0x1f;  	if (offset <= 26) {  		result [i] = base64 [(words [word] >> (26 - offset)) & 0x3F];  	}  	else if (offset == 28) {  		result [i] = base64 [(((words [word] & 0x0F) << 2) | ((words [word + 1] >> 30) & 0x03)) & 0x3F];  	}  	else {  		result [i] = base64 [(((words [word] & 0x03) << 4) | ((words [word + 1] >> 28) & 0x0F)) & 0x3F];  	}  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (i = 0; i < 27; i++) {  	int start = i * 6;  	int word = start >> 5;  	int offset = start & 0x1f;  	if (offset <= 26) {  		result [i] = base64 [(words [word] >> (26 - offset)) & 0x3F];  	}  	else if (offset == 28) {  		result [i] = base64 [(((words [word] & 0x0F) << 2) | ((words [word + 1] >> 30) & 0x03)) & 0x3F];  	}  	else {  		result [i] = base64 [(((words [word] & 0x03) << 4) | ((words [word + 1] >> 28) & 0x0F)) & 0x3F];  	}  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (i = 0; i < 27; i++) {  	int start = i * 6;  	int word = start >> 5;  	int offset = start & 0x1f;  	if (offset <= 26) {  		result [i] = base64 [(words [word] >> (26 - offset)) & 0x3F];  	}  	else if (offset == 28) {  		result [i] = base64 [(((words [word] & 0x0F) << 2) | ((words [word + 1] >> 30) & 0x03)) & 0x3F];  	}  	else {  		result [i] = base64 [(((words [word] & 0x03) << 4) | ((words [word + 1] >> 28) & 0x0F)) & 0x3F];  	}  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (i = 0; i < 27; i++) {  	int start = i * 6;  	int word = start >> 5;  	int offset = start & 0x1f;  	if (offset <= 26) {  		result [i] = base64 [(words [word] >> (26 - offset)) & 0x3F];  	}  	else if (offset == 28) {  		result [i] = base64 [(((words [word] & 0x0F) << 2) | ((words [word + 1] >> 30) & 0x03)) & 0x3F];  	}  	else {  		result [i] = base64 [(((words [word] & 0x03) << 4) | ((words [word + 1] >> 28) & 0x0F)) & 0x3F];  	}  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (i = 0; i < 27; i++) {  	int start = i * 6;  	int word = start >> 5;  	int offset = start & 0x1f;  	if (offset <= 26) {  		result [i] = base64 [(words [word] >> (26 - offset)) & 0x3F];  	}  	else if (offset == 28) {  		result [i] = base64 [(((words [word] & 0x0F) << 2) | ((words [word + 1] >> 30) & 0x03)) & 0x3F];  	}  	else {  		result [i] = base64 [(((words [word] & 0x03) << 4) | ((words [word + 1] >> 28) & 0x0F)) & 0x3F];  	}  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (i = 0; i < 27; i++) {  	int start = i * 6;  	int word = start >> 5;  	int offset = start & 0x1f;  	if (offset <= 26) {  		result [i] = base64 [(words [word] >> (26 - offset)) & 0x3F];  	}  	else if (offset == 28) {  		result [i] = base64 [(((words [word] & 0x0F) << 2) | ((words [word + 1] >> 30) & 0x03)) & 0x3F];  	}  	else {  		result [i] = base64 [(((words [word] & 0x03) << 4) | ((words [word + 1] >> 28) & 0x0F)) & 0x3F];  	}  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (i = 0; i < 27; i++) {  	int start = i * 6;  	int word = start >> 5;  	int offset = start & 0x1f;  	if (offset <= 26) {  		result [i] = base64 [(words [word] >> (26 - offset)) & 0x3F];  	}  	else if (offset == 28) {  		result [i] = base64 [(((words [word] & 0x0F) << 2) | ((words [word + 1] >> 30) & 0x03)) & 0x3F];  	}  	else {  		result [i] = base64 [(((words [word] & 0x03) << 4) | ((words [word + 1] >> 28) & 0x0F)) & 0x3F];  	}  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: for (i = 0; i < 27; i++) {  	int start = i * 6;  	int word = start >> 5;  	int offset = start & 0x1f;  	if (offset <= 26) {  		result [i] = base64 [(words [word] >> (26 - offset)) & 0x3F];  	}  	else if (offset == 28) {  		result [i] = base64 [(((words [word] & 0x0F) << 2) | ((words [word + 1] >> 30) & 0x03)) & 0x3F];  	}  	else {  		result [i] = base64 [(((words [word] & 0x03) << 4) | ((words [word + 1] >> 28) & 0x0F)) & 0x3F];  	}  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: if (offset <= 26) {  	result [i] = base64 [(words [word] >> (26 - offset)) & 0x3F];  }  else if (offset == 28) {  	result [i] = base64 [(((words [word] & 0x0F) << 2) | ((words [word + 1] >> 30) & 0x03)) & 0x3F];  }  else {  	result [i] = base64 [(((words [word] & 0x03) << 4) | ((words [word + 1] >> 28) & 0x0F)) & 0x3F];  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: if (offset <= 26) {  	result [i] = base64 [(words [word] >> (26 - offset)) & 0x3F];  }  else if (offset == 28) {  	result [i] = base64 [(((words [word] & 0x0F) << 2) | ((words [word + 1] >> 30) & 0x03)) & 0x3F];  }  else {  	result [i] = base64 [(((words [word] & 0x03) << 4) | ((words [word + 1] >> 28) & 0x0F)) & 0x3F];  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: if (offset <= 26) {  	result [i] = base64 [(words [word] >> (26 - offset)) & 0x3F];  }  else if (offset == 28) {  	result [i] = base64 [(((words [word] & 0x0F) << 2) | ((words [word + 1] >> 30) & 0x03)) & 0x3F];  }  else {  	result [i] = base64 [(((words [word] & 0x03) << 4) | ((words [word + 1] >> 28) & 0x0F)) & 0x3F];  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: if (offset <= 26) {  	result [i] = base64 [(words [word] >> (26 - offset)) & 0x3F];  }  else if (offset == 28) {  	result [i] = base64 [(((words [word] & 0x0F) << 2) | ((words [word + 1] >> 30) & 0x03)) & 0x3F];  }  else {  	result [i] = base64 [(((words [word] & 0x03) << 4) | ((words [word + 1] >> 28) & 0x0F)) & 0x3F];  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: if (offset <= 26) {  	result [i] = base64 [(words [word] >> (26 - offset)) & 0x3F];  }  else if (offset == 28) {  	result [i] = base64 [(((words [word] & 0x0F) << 2) | ((words [word + 1] >> 30) & 0x03)) & 0x3F];  }  else {  	result [i] = base64 [(((words [word] & 0x03) << 4) | ((words [word + 1] >> 28) & 0x0F)) & 0x3F];  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: if (offset <= 26) {  	result [i] = base64 [(words [word] >> (26 - offset)) & 0x3F];  }  else if (offset == 28) {  	result [i] = base64 [(((words [word] & 0x0F) << 2) | ((words [word + 1] >> 30) & 0x03)) & 0x3F];  }  else {  	result [i] = base64 [(((words [word] & 0x03) << 4) | ((words [word + 1] >> 28) & 0x0F)) & 0x3F];  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: if (offset <= 26) {  	result [i] = base64 [(words [word] >> (26 - offset)) & 0x3F];  }  else if (offset == 28) {  	result [i] = base64 [(((words [word] & 0x0F) << 2) | ((words [word + 1] >> 30) & 0x03)) & 0x3F];  }  else {  	result [i] = base64 [(((words [word] & 0x03) << 4) | ((words [word + 1] >> 28) & 0x0F)) & 0x3F];  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: result [i] = base64 [(words [word] >> (26 - offset)) & 0x3F];  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: if (offset == 28) {  	result [i] = base64 [(((words [word] & 0x0F) << 2) | ((words [word + 1] >> 30) & 0x03)) & 0x3F];  }  else {  	result [i] = base64 [(((words [word] & 0x03) << 4) | ((words [word + 1] >> 28) & 0x0F)) & 0x3F];  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: if (offset == 28) {  	result [i] = base64 [(((words [word] & 0x0F) << 2) | ((words [word + 1] >> 30) & 0x03)) & 0x3F];  }  else {  	result [i] = base64 [(((words [word] & 0x03) << 4) | ((words [word + 1] >> 28) & 0x0F)) & 0x3F];  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: if (offset == 28) {  	result [i] = base64 [(((words [word] & 0x0F) << 2) | ((words [word + 1] >> 30) & 0x03)) & 0x3F];  }  else {  	result [i] = base64 [(((words [word] & 0x03) << 4) | ((words [word + 1] >> 28) & 0x0F)) & 0x3F];  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: if (offset == 28) {  	result [i] = base64 [(((words [word] & 0x0F) << 2) | ((words [word + 1] >> 30) & 0x03)) & 0x3F];  }  else {  	result [i] = base64 [(((words [word] & 0x03) << 4) | ((words [word + 1] >> 28) & 0x0F)) & 0x3F];  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: if (offset == 28) {  	result [i] = base64 [(((words [word] & 0x0F) << 2) | ((words [word + 1] >> 30) & 0x03)) & 0x3F];  }  else {  	result [i] = base64 [(((words [word] & 0x03) << 4) | ((words [word + 1] >> 28) & 0x0F)) & 0x3F];  }  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: result [i] = base64 [(((words [word] & 0x0F) << 2) | ((words [word + 1] >> 30) & 0x03)) & 0x3F];  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: result [i] = base64 [(((words [word] & 0x0F) << 2) | ((words [word + 1] >> 30) & 0x03)) & 0x3F];  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: result [i] = base64 [(((words [word] & 0x03) << 4) | ((words [word + 1] >> 28) & 0x0F)) & 0x3F];  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: result [i] = base64 [(((words [word] & 0x03) << 4) | ((words [word + 1] >> 28) & 0x0F)) & 0x3F];  
Magic Number,org.javarosa.core.util,SHA1,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SHA1.cs,encodeBase64,The following statement contains a magic number: result [27] = (sbyte)'=';  
Magic Number,org.javarosa.core.util,SortedIntSet,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SortedIntSet.cs,SortedIntSet,The following statement contains a magic number: v = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10));  
Magic Number,org.javarosa.core.util,SortedIntSet,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\SortedIntSet.cs,indexOf,The following statement contains a magic number: while (lo <= hi) {  	int mid = (lo + hi) / 2;  	int val = get_Renamed (mid);  	if (val < n) {  		lo = mid + 1;  	}  	else if (val > n) {  		hi = mid - 1;  	}  	else {  		return mid;  	}  }  
Magic Number,org.javarosa.core.util.externalizable,ExtWrapIntEncodingSmall,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtWrapIntEncodingSmall.cs,readExternal,The following statement contains a magic number: if (b == (sbyte)SupportClass.Identity (0xff)) {  	l = in_Renamed.ReadInt32 ();  }  else {  	l = (b < 0 ? b + 256 : b) - bias;  }  
Magic Number,org.javarosa.core.util.externalizable,ExtWrapIntEncodingSmall,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtWrapIntEncodingSmall.cs,readExternal,The following statement contains a magic number: l = (b < 0 ? b + 256 : b) - bias;  
Magic Number,org.javarosa.core.util.externalizable,ExtWrapIntEncodingSmall,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtWrapIntEncodingSmall.cs,writeExternal,The following statement contains a magic number: if (n >= -bias && n < 255 - bias) {  	n += bias;  	out_Renamed.Write ((byte)(n >= 128 ? n - 256 : n));  }  else {  	out_Renamed.Write ((System.Byte)0xff);  	out_Renamed.Write (n);  }  
Magic Number,org.javarosa.core.util.externalizable,ExtWrapIntEncodingSmall,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtWrapIntEncodingSmall.cs,writeExternal,The following statement contains a magic number: if (n >= -bias && n < 255 - bias) {  	n += bias;  	out_Renamed.Write ((byte)(n >= 128 ? n - 256 : n));  }  else {  	out_Renamed.Write ((System.Byte)0xff);  	out_Renamed.Write (n);  }  
Magic Number,org.javarosa.core.util.externalizable,ExtWrapIntEncodingSmall,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtWrapIntEncodingSmall.cs,writeExternal,The following statement contains a magic number: if (n >= -bias && n < 255 - bias) {  	n += bias;  	out_Renamed.Write ((byte)(n >= 128 ? n - 256 : n));  }  else {  	out_Renamed.Write ((System.Byte)0xff);  	out_Renamed.Write (n);  }  
Magic Number,org.javarosa.core.util.externalizable,ExtWrapIntEncodingSmall,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtWrapIntEncodingSmall.cs,writeExternal,The following statement contains a magic number: out_Renamed.Write ((byte)(n >= 128 ? n - 256 : n));  
Magic Number,org.javarosa.core.util.externalizable,ExtWrapIntEncodingSmall,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtWrapIntEncodingSmall.cs,writeExternal,The following statement contains a magic number: out_Renamed.Write ((byte)(n >= 128 ? n - 256 : n));  
Magic Number,org.javarosa.core.util.externalizable,ExtWrapIntEncodingUniform,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtWrapIntEncodingUniform.cs,readExternal,The following statement contains a magic number: do {  	b = (sbyte)in_Renamed.ReadByte ();  	if (firstByte) {  		firstByte = false;  		l = (((b >> 6) & 0x01) == 0 ? 0 : -1);  		//set initial sign  	}  	l = (l << 7) | (b & 0x7f);  }  while (((b >> 7) & 0x01) == 1);  
Magic Number,org.javarosa.core.util.externalizable,ExtWrapIntEncodingUniform,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtWrapIntEncodingUniform.cs,readExternal,The following statement contains a magic number: do {  	b = (sbyte)in_Renamed.ReadByte ();  	if (firstByte) {  		firstByte = false;  		l = (((b >> 6) & 0x01) == 0 ? 0 : -1);  		//set initial sign  	}  	l = (l << 7) | (b & 0x7f);  }  while (((b >> 7) & 0x01) == 1);  
Magic Number,org.javarosa.core.util.externalizable,ExtWrapIntEncodingUniform,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtWrapIntEncodingUniform.cs,readExternal,The following statement contains a magic number: do {  	b = (sbyte)in_Renamed.ReadByte ();  	if (firstByte) {  		firstByte = false;  		l = (((b >> 6) & 0x01) == 0 ? 0 : -1);  		//set initial sign  	}  	l = (l << 7) | (b & 0x7f);  }  while (((b >> 7) & 0x01) == 1);  
Magic Number,org.javarosa.core.util.externalizable,ExtWrapIntEncodingUniform,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtWrapIntEncodingUniform.cs,readExternal,The following statement contains a magic number: if (firstByte) {  	firstByte = false;  	l = (((b >> 6) & 0x01) == 0 ? 0 : -1);  	//set initial sign  }  
Magic Number,org.javarosa.core.util.externalizable,ExtWrapIntEncodingUniform,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtWrapIntEncodingUniform.cs,readExternal,The following statement contains a magic number: l = (((b >> 6) & 0x01) == 0 ? 0 : -1);  
Magic Number,org.javarosa.core.util.externalizable,ExtWrapIntEncodingUniform,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtWrapIntEncodingUniform.cs,readExternal,The following statement contains a magic number: l = (l << 7) | (b & 0x7f);  
Magic Number,org.javarosa.core.util.externalizable,ExtWrapIntEncodingUniform,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtWrapIntEncodingUniform.cs,writeExternal,The following statement contains a magic number: do {  	sig++;  	k = l >> (sig * 7);  }  while (k < (-1 << 6) || k > (1 << 6) - 1);  
Magic Number,org.javarosa.core.util.externalizable,ExtWrapIntEncodingUniform,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtWrapIntEncodingUniform.cs,writeExternal,The following statement contains a magic number: do {  	sig++;  	k = l >> (sig * 7);  }  while (k < (-1 << 6) || k > (1 << 6) - 1);  
Magic Number,org.javarosa.core.util.externalizable,ExtWrapIntEncodingUniform,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtWrapIntEncodingUniform.cs,writeExternal,The following statement contains a magic number: do {  	sig++;  	k = l >> (sig * 7);  }  while (k < (-1 << 6) || k > (1 << 6) - 1);  
Magic Number,org.javarosa.core.util.externalizable,ExtWrapIntEncodingUniform,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtWrapIntEncodingUniform.cs,writeExternal,The following statement contains a magic number: k = l >> (sig * 7);  
Magic Number,org.javarosa.core.util.externalizable,ExtWrapIntEncodingUniform,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\ExtWrapIntEncodingUniform.cs,writeExternal,The following statement contains a magic number: for (int i = sig; i >= 0; i--) {  	sbyte chunk = (sbyte)((l >> (i * 7)) & 0x7f);  	out_Renamed.Write ((System.Byte)((i > 0 ? 0x80 : 0x00) | chunk));  }  
Magic Number,org.javarosa.core.util.externalizable,PrototypeFactory,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\PrototypeFactory.cs,lazyInit,The following statement contains a magic number: classes = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10));  
Magic Number,org.javarosa.core.util.externalizable,PrototypeFactory,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\util\externalizable\PrototypeFactory.cs,lazyInit,The following statement contains a magic number: hashes = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10));  
Magic Number,org.javarosa.model.xform,SMSSerializingVisitor,C:\repos\samdubey_DotNetRosa\DotNetRosa\model\xform\SMSSerializingVisitor.cs,init,The following statement contains a magic number: dataPointers = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10));  
Magic Number,org.javarosa.model.xform,XFormSerializingVisitor,C:\repos\samdubey_DotNetRosa\DotNetRosa\model\xform\XFormSerializingVisitor.cs,init,The following statement contains a magic number: dataPointers = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10));  
Magic Number,org.javarosa.model.xform,XFormSerializingVisitor,C:\repos\samdubey_DotNetRosa\DotNetRosa\model\xform\XFormSerializingVisitor.cs,serializeNode,The following statement contains a magic number: if (instanceNode.Value != null) {  	System.Object serializedAnswer = serializer.serializeAnswerData (instanceNode.Value' instanceNode.DataType);  	if (serializedAnswer is Element) {  		e = (Element)serializedAnswer;  	}  	else if (serializedAnswer is System.String) {  		e = new Element ();  		e.addChild (Node.TEXT' (System.String)serializedAnswer);  	}  	else {  		//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Object.toString' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'"  		throw new System.SystemException ("Can't handle serialized output for" + instanceNode.Value.ToString () + "' " + serializedAnswer);  	}  	if (serializer.containsExternalData (instanceNode.Value)) {  		IDataPointer[] pointer = serializer.retrieveExternalDataPointer (instanceNode.Value);  		for (int i = 0; i < pointer.Length; ++i) {  			dataPointers.Add (pointer [i]);  		}  	}  }  else {  	//make sure all children of the same tag name are written en bloc  	System.Collections.ArrayList childNames = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10));  	for (int i = 0; i < instanceNode.NumChildren; i++) {  		System.String childName = instanceNode.getChildAt (i).Name;  		if (!childNames.Contains (childName))  			childNames.Add (childName);  	}  	for (int i = 0; i < childNames.Count; i++) {  		System.String childName = (System.String)childNames [i];  		int mult = instanceNode.getChildMultiplicity (childName);  		for (int j = 0; j < mult; j++) {  			Element child = serializeNode (instanceNode.getChild (childName' j));  			if (child != null) {  				e.addChild (Node.ELEMENT' child);  			}  		}  	}  }  
Magic Number,org.javarosa.xform.parse,XFormParser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xform\parse\XFormParser.cs,InitBlock,The following statement contains a magic number: while (!q.isEmpty ()) {  	Element e = q.pop ();  	bool[] toRemove = new bool[e.getChildCount () * 2];  	System.String accumulate = "";  	for (int i = 0; i < e.getChildCount (); ++i) {  		int type = e.getType (i);  		if (type == Element.TEXT) {  			System.String text = e.getText (i);  			accumulate += text;  			toRemove [i] = true;  		}  		else {  			if (type == Element.ELEMENT) {  				q.addElement (e.getElement (i));  			}  			System.String accumulatedString = accumulate.Trim ();  			if (accumulatedString.Length != 0) {  				if (stringCache == null) {  					e.addChild (i' Element.TEXT' accumulate);  				}  				else {  					e.addChild (i' Element.TEXT' stringCache.intern (accumulate));  				}  				accumulate = "";  				++i;  			}  			else {  				accumulate = "";  			}  		}  	}  	if (accumulate.Trim ().Length != 0) {  		if (stringCache == null) {  			e.addChild (Element.TEXT' accumulate);  		}  		else {  			e.addChild (Element.TEXT' stringCache.intern (accumulate));  		}  	}  	for (int i = e.getChildCount () - 1; i >= 0; i--) {  		if (toRemove [i]) {  			e.removeChild (i);  		}  	}  }  
Magic Number,org.javarosa.xpath.expr,XPathEqExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathEqExpr.cs,eval,The following statement contains a magic number: if (aval is System.Boolean || bval is System.Boolean) {  	if (!(aval is System.Boolean)) {  		aval = XPathFuncExpr.toBoolean (aval);  	}  	else if (!(bval is System.Boolean)) {  		bval = XPathFuncExpr.toBoolean (bval);  	}  	bool ba = ((System.Boolean)aval);  	bool bb = ((System.Boolean)bval);  	eq = (ba == bb);  }  else if (aval is System.Double || bval is System.Double) {  	if (!(aval is System.Double)) {  		aval = XPathFuncExpr.toNumeric (aval);  	}  	else if (!(bval is System.Double)) {  		bval = XPathFuncExpr.toNumeric (bval);  	}  	double fa = ((System.Double)aval);  	double fb = ((System.Double)bval);  	eq = System.Math.Abs (fa - fb) < 1.0e-12;  }  else {  	aval = XPathFuncExpr.toString (aval);  	bval = XPathFuncExpr.toString (bval);  	eq = (aval.Equals (bval));  }  
Magic Number,org.javarosa.xpath.expr,XPathEqExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathEqExpr.cs,eval,The following statement contains a magic number: if (aval is System.Double || bval is System.Double) {  	if (!(aval is System.Double)) {  		aval = XPathFuncExpr.toNumeric (aval);  	}  	else if (!(bval is System.Double)) {  		bval = XPathFuncExpr.toNumeric (bval);  	}  	double fa = ((System.Double)aval);  	double fb = ((System.Double)bval);  	eq = System.Math.Abs (fa - fb) < 1.0e-12;  }  else {  	aval = XPathFuncExpr.toString (aval);  	bval = XPathFuncExpr.toString (bval);  	eq = (aval.Equals (bval));  }  
Magic Number,org.javarosa.xpath.expr,XPathEqExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathEqExpr.cs,eval,The following statement contains a magic number: eq = System.Math.Abs (fa - fb) < 1.0e-12;  
Magic Number,org.javarosa.xpath.expr,XPathExpression,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathExpression.cs,printStr,The following statement contains a magic number: for (int i = 0; i < 2 * indent; i++)  	System.Console.Out.Write (" ");  
Magic Number,org.javarosa.xpath.expr,XPathFilterExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathFilterExpr.cs,Equals,The following statement contains a magic number: if (o is XPathFilterExpr) {  	XPathFilterExpr fe = (XPathFilterExpr)o;  	System.Collections.ArrayList a = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10));  	for (int i = 0; i < predicates.Length; i++)  		a.Add (predicates [i]);  	System.Collections.ArrayList b = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10));  	for (int i = 0; i < fe.predicates.Length; i++)  		b.Add (fe.predicates [i]);  	return x.Equals (fe.x) && ExtUtil.vectorEquals (a' b);  }  else {  	return false;  }  
Magic Number,org.javarosa.xpath.expr,XPathFilterExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathFilterExpr.cs,Equals,The following statement contains a magic number: if (o is XPathFilterExpr) {  	XPathFilterExpr fe = (XPathFilterExpr)o;  	System.Collections.ArrayList a = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10));  	for (int i = 0; i < predicates.Length; i++)  		a.Add (predicates [i]);  	System.Collections.ArrayList b = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10));  	for (int i = 0; i < fe.predicates.Length; i++)  		b.Add (fe.predicates [i]);  	return x.Equals (fe.x) && ExtUtil.vectorEquals (a' b);  }  else {  	return false;  }  
Magic Number,org.javarosa.xpath.parser.ast,ASTNode,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\ast\ASTNode.cs,printStr,The following statement contains a magic number: for (int i = 0; i < 2 * indent; i++)  	System.Console.Out.Write (" ");  
Magic Number,org.javarosa.xpath.parser.ast,ASTNodeAbstractExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\ast\ASTNodeAbstractExpr.cs,ASTNodeAbstractExpr,The following statement contains a magic number: content = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10));  
Magic Number,org.javarosa.xpath.parser.ast,ASTNodeBinaryOp,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\ast\ASTNodeBinaryOp.cs,ASTNodeBinaryOp,The following statement contains a magic number: exprs = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10));  
Magic Number,org.javarosa.xpath.parser.ast,ASTNodeBinaryOp,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\ast\ASTNodeBinaryOp.cs,ASTNodeBinaryOp,The following statement contains a magic number: ops = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10));  
Magic Number,org.javarosa.xpath.parser.ast,ASTNodeBinaryOp,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\ast\ASTNodeBinaryOp.cs,build,The following statement contains a magic number: if (associativity == ASSOC_LEFT) {  	x = ((ASTNode)exprs [0]).build ();  	for (int i = 1; i < exprs.Count; i++) {  		x = getBinOpExpr (Parser.vectInt (ops' i - 1)' x' ((ASTNode)exprs [i]).build ());  	}  }  else {  	x = ((ASTNode)exprs [exprs.Count - 1]).build ();  	for (int i = exprs.Count - 2; i >= 0; i--) {  		x = getBinOpExpr (Parser.vectInt (ops' i)' ((ASTNode)exprs [i]).build ()' x);  	}  }  
Magic Number,org.javarosa.xpath.parser.ast,ASTNodeBinaryOp,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\ast\ASTNodeBinaryOp.cs,build,The following statement contains a magic number: for (int i = exprs.Count - 2; i >= 0; i--) {  	x = getBinOpExpr (Parser.vectInt (ops' i)' ((ASTNode)exprs [i]).build ()' x);  }  
Magic Number,org.javarosa.xpath.parser.ast,ASTNodeFilterExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\ast\ASTNodeFilterExpr.cs,ASTNodeFilterExpr,The following statement contains a magic number: predicates = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10));  
Magic Number,org.javarosa.xpath.parser.ast,ASTNodeFunctionCall,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\ast\ASTNodeFunctionCall.cs,ASTNodeFunctionCall,The following statement contains a magic number: args = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10));  
Magic Number,org.javarosa.xpath.parser.ast,ASTNodeLocPath,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\ast\ASTNodeLocPath.cs,ASTNodeLocPath,The following statement contains a magic number: clauses = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10));  
Magic Number,org.javarosa.xpath.parser.ast,ASTNodeLocPath,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\ast\ASTNodeLocPath.cs,ASTNodeLocPath,The following statement contains a magic number: separators = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10));  
Magic Number,org.javarosa.xpath.parser.ast,ASTNodePathStep,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\ast\ASTNodePathStep.cs,ASTNodePathStep,The following statement contains a magic number: predicates = System.Collections.ArrayList.Synchronized (new System.Collections.ArrayList (10));  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: while (i < expr.Length) {  	int c = expr [i];  	int d = getChar (expr' i + 1);  	Token token = null;  	int skip = 1;  	if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  		/* whitespace; do nothing */}  	else if (c == '=') {  		token = new Token (Token.EQ);  	}  	else if (c == '!' && d == '=') {  		token = new Token (Token.NEQ);  		skip = 2;  	}  	else if (c == '<') {  		if (d == '=') {  			token = new Token (Token.LTE);  			skip = 2;  		}  		else {  			token = new Token (Token.LT);  		}  	}  	else if (c == '>') {  		if (d == '=') {  			token = new Token (Token.GTE);  			skip = 2;  		}  		else {  			token = new Token (Token.GT);  		}  	}  	else if (c == '+') {  		token = new Token (Token.PLUS);  	}  	else if (c == '-') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  		//not sure this is entirely correct  	}  	else if (c == '*') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  	}  	else if (c == '|') {  		token = new Token (Token.UNION);  	}  	else if (c == '/') {  		if (d == '/') {  			token = new Token (Token.DBL_SLASH);  			skip = 2;  		}  		else {  			token = new Token (Token.SLASH);  		}  	}  	else if (c == '[') {  		token = new Token (Token.LBRACK);  	}  	else if (c == ']') {  		token = new Token (Token.RBRACK);  	}  	else if (c == '(') {  		token = new Token (Token.LPAREN);  	}  	else if (c == ')') {  		token = new Token (Token.RPAREN);  	}  	else if (c == '.') {  		if (d == '.') {  			token = new Token (Token.DBL_DOT);  			skip = 2;  		}  		else if (isDigit (d)) {  			skip = matchNumeric (expr' i);  			token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  		}  		else {  			token = new Token (Token.DOT);  		}  	}  	else if (c == '@') {  		token = new Token (Token.AT);  	}  	else if (c == ''') {  		token = new Token (Token.COMMA);  	}  	else if (c == ':' && d == ':') {  		token = new Token (Token.DBL_COLON);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.AND);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  		token = new Token (Token.OR);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.DIV);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.MOD);  		skip = 3;  	}  	else if (c == '$') {  		int len = matchQName (expr' i + 1);  		if (len == 0) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  			skip = len + 1;  		}  	}  	else if (c == '\'' || c == '\"') {  		//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  		int end = expr.IndexOf ((System.Char)c' i + 1);  		if (end == -1) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  			skip = (end - i) + 1;  		}  	}  	else if (isDigit (c)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  		int len = matchQName (expr' i);  		System.String name = expr.Substring (i' (i + len) - (i));  		if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  			token = new Token (Token.NSWILDCARD' name);  			skip = len + 2;  		}  		else {  			token = new Token (Token.QNAME' new XPathQName (name));  			skip = len;  		}  	}  	else {  		badParse (expr' i' (char)c);  	}  	if (token != null) {  		if (token.type == Token.WILDCARD || token.type == Token.NSWILDCARD || token.type == Token.QNAME || token.type == Token.VAR || token.type == Token.NUM || token.type == Token.STR || token.type == Token.RBRACK || token.type == Token.RPAREN || token.type == Token.DOT || token.type == Token.DBL_DOT) {  			context = LEX_CONTEXT_OP;  		}  		else {  			context = LEX_CONTEXT_VAL;  		}  		tokens.Add (token);  	}  	i += skip;  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: while (i < expr.Length) {  	int c = expr [i];  	int d = getChar (expr' i + 1);  	Token token = null;  	int skip = 1;  	if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  		/* whitespace; do nothing */}  	else if (c == '=') {  		token = new Token (Token.EQ);  	}  	else if (c == '!' && d == '=') {  		token = new Token (Token.NEQ);  		skip = 2;  	}  	else if (c == '<') {  		if (d == '=') {  			token = new Token (Token.LTE);  			skip = 2;  		}  		else {  			token = new Token (Token.LT);  		}  	}  	else if (c == '>') {  		if (d == '=') {  			token = new Token (Token.GTE);  			skip = 2;  		}  		else {  			token = new Token (Token.GT);  		}  	}  	else if (c == '+') {  		token = new Token (Token.PLUS);  	}  	else if (c == '-') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  		//not sure this is entirely correct  	}  	else if (c == '*') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  	}  	else if (c == '|') {  		token = new Token (Token.UNION);  	}  	else if (c == '/') {  		if (d == '/') {  			token = new Token (Token.DBL_SLASH);  			skip = 2;  		}  		else {  			token = new Token (Token.SLASH);  		}  	}  	else if (c == '[') {  		token = new Token (Token.LBRACK);  	}  	else if (c == ']') {  		token = new Token (Token.RBRACK);  	}  	else if (c == '(') {  		token = new Token (Token.LPAREN);  	}  	else if (c == ')') {  		token = new Token (Token.RPAREN);  	}  	else if (c == '.') {  		if (d == '.') {  			token = new Token (Token.DBL_DOT);  			skip = 2;  		}  		else if (isDigit (d)) {  			skip = matchNumeric (expr' i);  			token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  		}  		else {  			token = new Token (Token.DOT);  		}  	}  	else if (c == '@') {  		token = new Token (Token.AT);  	}  	else if (c == ''') {  		token = new Token (Token.COMMA);  	}  	else if (c == ':' && d == ':') {  		token = new Token (Token.DBL_COLON);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.AND);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  		token = new Token (Token.OR);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.DIV);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.MOD);  		skip = 3;  	}  	else if (c == '$') {  		int len = matchQName (expr' i + 1);  		if (len == 0) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  			skip = len + 1;  		}  	}  	else if (c == '\'' || c == '\"') {  		//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  		int end = expr.IndexOf ((System.Char)c' i + 1);  		if (end == -1) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  			skip = (end - i) + 1;  		}  	}  	else if (isDigit (c)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  		int len = matchQName (expr' i);  		System.String name = expr.Substring (i' (i + len) - (i));  		if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  			token = new Token (Token.NSWILDCARD' name);  			skip = len + 2;  		}  		else {  			token = new Token (Token.QNAME' new XPathQName (name));  			skip = len;  		}  	}  	else {  		badParse (expr' i' (char)c);  	}  	if (token != null) {  		if (token.type == Token.WILDCARD || token.type == Token.NSWILDCARD || token.type == Token.QNAME || token.type == Token.VAR || token.type == Token.NUM || token.type == Token.STR || token.type == Token.RBRACK || token.type == Token.RPAREN || token.type == Token.DOT || token.type == Token.DBL_DOT) {  			context = LEX_CONTEXT_OP;  		}  		else {  			context = LEX_CONTEXT_VAL;  		}  		tokens.Add (token);  	}  	i += skip;  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: while (i < expr.Length) {  	int c = expr [i];  	int d = getChar (expr' i + 1);  	Token token = null;  	int skip = 1;  	if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  		/* whitespace; do nothing */}  	else if (c == '=') {  		token = new Token (Token.EQ);  	}  	else if (c == '!' && d == '=') {  		token = new Token (Token.NEQ);  		skip = 2;  	}  	else if (c == '<') {  		if (d == '=') {  			token = new Token (Token.LTE);  			skip = 2;  		}  		else {  			token = new Token (Token.LT);  		}  	}  	else if (c == '>') {  		if (d == '=') {  			token = new Token (Token.GTE);  			skip = 2;  		}  		else {  			token = new Token (Token.GT);  		}  	}  	else if (c == '+') {  		token = new Token (Token.PLUS);  	}  	else if (c == '-') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  		//not sure this is entirely correct  	}  	else if (c == '*') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  	}  	else if (c == '|') {  		token = new Token (Token.UNION);  	}  	else if (c == '/') {  		if (d == '/') {  			token = new Token (Token.DBL_SLASH);  			skip = 2;  		}  		else {  			token = new Token (Token.SLASH);  		}  	}  	else if (c == '[') {  		token = new Token (Token.LBRACK);  	}  	else if (c == ']') {  		token = new Token (Token.RBRACK);  	}  	else if (c == '(') {  		token = new Token (Token.LPAREN);  	}  	else if (c == ')') {  		token = new Token (Token.RPAREN);  	}  	else if (c == '.') {  		if (d == '.') {  			token = new Token (Token.DBL_DOT);  			skip = 2;  		}  		else if (isDigit (d)) {  			skip = matchNumeric (expr' i);  			token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  		}  		else {  			token = new Token (Token.DOT);  		}  	}  	else if (c == '@') {  		token = new Token (Token.AT);  	}  	else if (c == ''') {  		token = new Token (Token.COMMA);  	}  	else if (c == ':' && d == ':') {  		token = new Token (Token.DBL_COLON);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.AND);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  		token = new Token (Token.OR);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.DIV);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.MOD);  		skip = 3;  	}  	else if (c == '$') {  		int len = matchQName (expr' i + 1);  		if (len == 0) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  			skip = len + 1;  		}  	}  	else if (c == '\'' || c == '\"') {  		//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  		int end = expr.IndexOf ((System.Char)c' i + 1);  		if (end == -1) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  			skip = (end - i) + 1;  		}  	}  	else if (isDigit (c)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  		int len = matchQName (expr' i);  		System.String name = expr.Substring (i' (i + len) - (i));  		if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  			token = new Token (Token.NSWILDCARD' name);  			skip = len + 2;  		}  		else {  			token = new Token (Token.QNAME' new XPathQName (name));  			skip = len;  		}  	}  	else {  		badParse (expr' i' (char)c);  	}  	if (token != null) {  		if (token.type == Token.WILDCARD || token.type == Token.NSWILDCARD || token.type == Token.QNAME || token.type == Token.VAR || token.type == Token.NUM || token.type == Token.STR || token.type == Token.RBRACK || token.type == Token.RPAREN || token.type == Token.DOT || token.type == Token.DBL_DOT) {  			context = LEX_CONTEXT_OP;  		}  		else {  			context = LEX_CONTEXT_VAL;  		}  		tokens.Add (token);  	}  	i += skip;  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: while (i < expr.Length) {  	int c = expr [i];  	int d = getChar (expr' i + 1);  	Token token = null;  	int skip = 1;  	if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  		/* whitespace; do nothing */}  	else if (c == '=') {  		token = new Token (Token.EQ);  	}  	else if (c == '!' && d == '=') {  		token = new Token (Token.NEQ);  		skip = 2;  	}  	else if (c == '<') {  		if (d == '=') {  			token = new Token (Token.LTE);  			skip = 2;  		}  		else {  			token = new Token (Token.LT);  		}  	}  	else if (c == '>') {  		if (d == '=') {  			token = new Token (Token.GTE);  			skip = 2;  		}  		else {  			token = new Token (Token.GT);  		}  	}  	else if (c == '+') {  		token = new Token (Token.PLUS);  	}  	else if (c == '-') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  		//not sure this is entirely correct  	}  	else if (c == '*') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  	}  	else if (c == '|') {  		token = new Token (Token.UNION);  	}  	else if (c == '/') {  		if (d == '/') {  			token = new Token (Token.DBL_SLASH);  			skip = 2;  		}  		else {  			token = new Token (Token.SLASH);  		}  	}  	else if (c == '[') {  		token = new Token (Token.LBRACK);  	}  	else if (c == ']') {  		token = new Token (Token.RBRACK);  	}  	else if (c == '(') {  		token = new Token (Token.LPAREN);  	}  	else if (c == ')') {  		token = new Token (Token.RPAREN);  	}  	else if (c == '.') {  		if (d == '.') {  			token = new Token (Token.DBL_DOT);  			skip = 2;  		}  		else if (isDigit (d)) {  			skip = matchNumeric (expr' i);  			token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  		}  		else {  			token = new Token (Token.DOT);  		}  	}  	else if (c == '@') {  		token = new Token (Token.AT);  	}  	else if (c == ''') {  		token = new Token (Token.COMMA);  	}  	else if (c == ':' && d == ':') {  		token = new Token (Token.DBL_COLON);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.AND);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  		token = new Token (Token.OR);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.DIV);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.MOD);  		skip = 3;  	}  	else if (c == '$') {  		int len = matchQName (expr' i + 1);  		if (len == 0) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  			skip = len + 1;  		}  	}  	else if (c == '\'' || c == '\"') {  		//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  		int end = expr.IndexOf ((System.Char)c' i + 1);  		if (end == -1) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  			skip = (end - i) + 1;  		}  	}  	else if (isDigit (c)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  		int len = matchQName (expr' i);  		System.String name = expr.Substring (i' (i + len) - (i));  		if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  			token = new Token (Token.NSWILDCARD' name);  			skip = len + 2;  		}  		else {  			token = new Token (Token.QNAME' new XPathQName (name));  			skip = len;  		}  	}  	else {  		badParse (expr' i' (char)c);  	}  	if (token != null) {  		if (token.type == Token.WILDCARD || token.type == Token.NSWILDCARD || token.type == Token.QNAME || token.type == Token.VAR || token.type == Token.NUM || token.type == Token.STR || token.type == Token.RBRACK || token.type == Token.RPAREN || token.type == Token.DOT || token.type == Token.DBL_DOT) {  			context = LEX_CONTEXT_OP;  		}  		else {  			context = LEX_CONTEXT_VAL;  		}  		tokens.Add (token);  	}  	i += skip;  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: while (i < expr.Length) {  	int c = expr [i];  	int d = getChar (expr' i + 1);  	Token token = null;  	int skip = 1;  	if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  		/* whitespace; do nothing */}  	else if (c == '=') {  		token = new Token (Token.EQ);  	}  	else if (c == '!' && d == '=') {  		token = new Token (Token.NEQ);  		skip = 2;  	}  	else if (c == '<') {  		if (d == '=') {  			token = new Token (Token.LTE);  			skip = 2;  		}  		else {  			token = new Token (Token.LT);  		}  	}  	else if (c == '>') {  		if (d == '=') {  			token = new Token (Token.GTE);  			skip = 2;  		}  		else {  			token = new Token (Token.GT);  		}  	}  	else if (c == '+') {  		token = new Token (Token.PLUS);  	}  	else if (c == '-') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  		//not sure this is entirely correct  	}  	else if (c == '*') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  	}  	else if (c == '|') {  		token = new Token (Token.UNION);  	}  	else if (c == '/') {  		if (d == '/') {  			token = new Token (Token.DBL_SLASH);  			skip = 2;  		}  		else {  			token = new Token (Token.SLASH);  		}  	}  	else if (c == '[') {  		token = new Token (Token.LBRACK);  	}  	else if (c == ']') {  		token = new Token (Token.RBRACK);  	}  	else if (c == '(') {  		token = new Token (Token.LPAREN);  	}  	else if (c == ')') {  		token = new Token (Token.RPAREN);  	}  	else if (c == '.') {  		if (d == '.') {  			token = new Token (Token.DBL_DOT);  			skip = 2;  		}  		else if (isDigit (d)) {  			skip = matchNumeric (expr' i);  			token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  		}  		else {  			token = new Token (Token.DOT);  		}  	}  	else if (c == '@') {  		token = new Token (Token.AT);  	}  	else if (c == ''') {  		token = new Token (Token.COMMA);  	}  	else if (c == ':' && d == ':') {  		token = new Token (Token.DBL_COLON);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.AND);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  		token = new Token (Token.OR);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.DIV);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.MOD);  		skip = 3;  	}  	else if (c == '$') {  		int len = matchQName (expr' i + 1);  		if (len == 0) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  			skip = len + 1;  		}  	}  	else if (c == '\'' || c == '\"') {  		//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  		int end = expr.IndexOf ((System.Char)c' i + 1);  		if (end == -1) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  			skip = (end - i) + 1;  		}  	}  	else if (isDigit (c)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  		int len = matchQName (expr' i);  		System.String name = expr.Substring (i' (i + len) - (i));  		if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  			token = new Token (Token.NSWILDCARD' name);  			skip = len + 2;  		}  		else {  			token = new Token (Token.QNAME' new XPathQName (name));  			skip = len;  		}  	}  	else {  		badParse (expr' i' (char)c);  	}  	if (token != null) {  		if (token.type == Token.WILDCARD || token.type == Token.NSWILDCARD || token.type == Token.QNAME || token.type == Token.VAR || token.type == Token.NUM || token.type == Token.STR || token.type == Token.RBRACK || token.type == Token.RPAREN || token.type == Token.DOT || token.type == Token.DBL_DOT) {  			context = LEX_CONTEXT_OP;  		}  		else {  			context = LEX_CONTEXT_VAL;  		}  		tokens.Add (token);  	}  	i += skip;  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: while (i < expr.Length) {  	int c = expr [i];  	int d = getChar (expr' i + 1);  	Token token = null;  	int skip = 1;  	if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  		/* whitespace; do nothing */}  	else if (c == '=') {  		token = new Token (Token.EQ);  	}  	else if (c == '!' && d == '=') {  		token = new Token (Token.NEQ);  		skip = 2;  	}  	else if (c == '<') {  		if (d == '=') {  			token = new Token (Token.LTE);  			skip = 2;  		}  		else {  			token = new Token (Token.LT);  		}  	}  	else if (c == '>') {  		if (d == '=') {  			token = new Token (Token.GTE);  			skip = 2;  		}  		else {  			token = new Token (Token.GT);  		}  	}  	else if (c == '+') {  		token = new Token (Token.PLUS);  	}  	else if (c == '-') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  		//not sure this is entirely correct  	}  	else if (c == '*') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  	}  	else if (c == '|') {  		token = new Token (Token.UNION);  	}  	else if (c == '/') {  		if (d == '/') {  			token = new Token (Token.DBL_SLASH);  			skip = 2;  		}  		else {  			token = new Token (Token.SLASH);  		}  	}  	else if (c == '[') {  		token = new Token (Token.LBRACK);  	}  	else if (c == ']') {  		token = new Token (Token.RBRACK);  	}  	else if (c == '(') {  		token = new Token (Token.LPAREN);  	}  	else if (c == ')') {  		token = new Token (Token.RPAREN);  	}  	else if (c == '.') {  		if (d == '.') {  			token = new Token (Token.DBL_DOT);  			skip = 2;  		}  		else if (isDigit (d)) {  			skip = matchNumeric (expr' i);  			token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  		}  		else {  			token = new Token (Token.DOT);  		}  	}  	else if (c == '@') {  		token = new Token (Token.AT);  	}  	else if (c == ''') {  		token = new Token (Token.COMMA);  	}  	else if (c == ':' && d == ':') {  		token = new Token (Token.DBL_COLON);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.AND);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  		token = new Token (Token.OR);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.DIV);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.MOD);  		skip = 3;  	}  	else if (c == '$') {  		int len = matchQName (expr' i + 1);  		if (len == 0) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  			skip = len + 1;  		}  	}  	else if (c == '\'' || c == '\"') {  		//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  		int end = expr.IndexOf ((System.Char)c' i + 1);  		if (end == -1) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  			skip = (end - i) + 1;  		}  	}  	else if (isDigit (c)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  		int len = matchQName (expr' i);  		System.String name = expr.Substring (i' (i + len) - (i));  		if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  			token = new Token (Token.NSWILDCARD' name);  			skip = len + 2;  		}  		else {  			token = new Token (Token.QNAME' new XPathQName (name));  			skip = len;  		}  	}  	else {  		badParse (expr' i' (char)c);  	}  	if (token != null) {  		if (token.type == Token.WILDCARD || token.type == Token.NSWILDCARD || token.type == Token.QNAME || token.type == Token.VAR || token.type == Token.NUM || token.type == Token.STR || token.type == Token.RBRACK || token.type == Token.RPAREN || token.type == Token.DOT || token.type == Token.DBL_DOT) {  			context = LEX_CONTEXT_OP;  		}  		else {  			context = LEX_CONTEXT_VAL;  		}  		tokens.Add (token);  	}  	i += skip;  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: while (i < expr.Length) {  	int c = expr [i];  	int d = getChar (expr' i + 1);  	Token token = null;  	int skip = 1;  	if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  		/* whitespace; do nothing */}  	else if (c == '=') {  		token = new Token (Token.EQ);  	}  	else if (c == '!' && d == '=') {  		token = new Token (Token.NEQ);  		skip = 2;  	}  	else if (c == '<') {  		if (d == '=') {  			token = new Token (Token.LTE);  			skip = 2;  		}  		else {  			token = new Token (Token.LT);  		}  	}  	else if (c == '>') {  		if (d == '=') {  			token = new Token (Token.GTE);  			skip = 2;  		}  		else {  			token = new Token (Token.GT);  		}  	}  	else if (c == '+') {  		token = new Token (Token.PLUS);  	}  	else if (c == '-') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  		//not sure this is entirely correct  	}  	else if (c == '*') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  	}  	else if (c == '|') {  		token = new Token (Token.UNION);  	}  	else if (c == '/') {  		if (d == '/') {  			token = new Token (Token.DBL_SLASH);  			skip = 2;  		}  		else {  			token = new Token (Token.SLASH);  		}  	}  	else if (c == '[') {  		token = new Token (Token.LBRACK);  	}  	else if (c == ']') {  		token = new Token (Token.RBRACK);  	}  	else if (c == '(') {  		token = new Token (Token.LPAREN);  	}  	else if (c == ')') {  		token = new Token (Token.RPAREN);  	}  	else if (c == '.') {  		if (d == '.') {  			token = new Token (Token.DBL_DOT);  			skip = 2;  		}  		else if (isDigit (d)) {  			skip = matchNumeric (expr' i);  			token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  		}  		else {  			token = new Token (Token.DOT);  		}  	}  	else if (c == '@') {  		token = new Token (Token.AT);  	}  	else if (c == ''') {  		token = new Token (Token.COMMA);  	}  	else if (c == ':' && d == ':') {  		token = new Token (Token.DBL_COLON);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.AND);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  		token = new Token (Token.OR);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.DIV);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.MOD);  		skip = 3;  	}  	else if (c == '$') {  		int len = matchQName (expr' i + 1);  		if (len == 0) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  			skip = len + 1;  		}  	}  	else if (c == '\'' || c == '\"') {  		//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  		int end = expr.IndexOf ((System.Char)c' i + 1);  		if (end == -1) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  			skip = (end - i) + 1;  		}  	}  	else if (isDigit (c)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  		int len = matchQName (expr' i);  		System.String name = expr.Substring (i' (i + len) - (i));  		if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  			token = new Token (Token.NSWILDCARD' name);  			skip = len + 2;  		}  		else {  			token = new Token (Token.QNAME' new XPathQName (name));  			skip = len;  		}  	}  	else {  		badParse (expr' i' (char)c);  	}  	if (token != null) {  		if (token.type == Token.WILDCARD || token.type == Token.NSWILDCARD || token.type == Token.QNAME || token.type == Token.VAR || token.type == Token.NUM || token.type == Token.STR || token.type == Token.RBRACK || token.type == Token.RPAREN || token.type == Token.DOT || token.type == Token.DBL_DOT) {  			context = LEX_CONTEXT_OP;  		}  		else {  			context = LEX_CONTEXT_VAL;  		}  		tokens.Add (token);  	}  	i += skip;  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: while (i < expr.Length) {  	int c = expr [i];  	int d = getChar (expr' i + 1);  	Token token = null;  	int skip = 1;  	if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  		/* whitespace; do nothing */}  	else if (c == '=') {  		token = new Token (Token.EQ);  	}  	else if (c == '!' && d == '=') {  		token = new Token (Token.NEQ);  		skip = 2;  	}  	else if (c == '<') {  		if (d == '=') {  			token = new Token (Token.LTE);  			skip = 2;  		}  		else {  			token = new Token (Token.LT);  		}  	}  	else if (c == '>') {  		if (d == '=') {  			token = new Token (Token.GTE);  			skip = 2;  		}  		else {  			token = new Token (Token.GT);  		}  	}  	else if (c == '+') {  		token = new Token (Token.PLUS);  	}  	else if (c == '-') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  		//not sure this is entirely correct  	}  	else if (c == '*') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  	}  	else if (c == '|') {  		token = new Token (Token.UNION);  	}  	else if (c == '/') {  		if (d == '/') {  			token = new Token (Token.DBL_SLASH);  			skip = 2;  		}  		else {  			token = new Token (Token.SLASH);  		}  	}  	else if (c == '[') {  		token = new Token (Token.LBRACK);  	}  	else if (c == ']') {  		token = new Token (Token.RBRACK);  	}  	else if (c == '(') {  		token = new Token (Token.LPAREN);  	}  	else if (c == ')') {  		token = new Token (Token.RPAREN);  	}  	else if (c == '.') {  		if (d == '.') {  			token = new Token (Token.DBL_DOT);  			skip = 2;  		}  		else if (isDigit (d)) {  			skip = matchNumeric (expr' i);  			token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  		}  		else {  			token = new Token (Token.DOT);  		}  	}  	else if (c == '@') {  		token = new Token (Token.AT);  	}  	else if (c == ''') {  		token = new Token (Token.COMMA);  	}  	else if (c == ':' && d == ':') {  		token = new Token (Token.DBL_COLON);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.AND);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  		token = new Token (Token.OR);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.DIV);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.MOD);  		skip = 3;  	}  	else if (c == '$') {  		int len = matchQName (expr' i + 1);  		if (len == 0) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  			skip = len + 1;  		}  	}  	else if (c == '\'' || c == '\"') {  		//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  		int end = expr.IndexOf ((System.Char)c' i + 1);  		if (end == -1) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  			skip = (end - i) + 1;  		}  	}  	else if (isDigit (c)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  		int len = matchQName (expr' i);  		System.String name = expr.Substring (i' (i + len) - (i));  		if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  			token = new Token (Token.NSWILDCARD' name);  			skip = len + 2;  		}  		else {  			token = new Token (Token.QNAME' new XPathQName (name));  			skip = len;  		}  	}  	else {  		badParse (expr' i' (char)c);  	}  	if (token != null) {  		if (token.type == Token.WILDCARD || token.type == Token.NSWILDCARD || token.type == Token.QNAME || token.type == Token.VAR || token.type == Token.NUM || token.type == Token.STR || token.type == Token.RBRACK || token.type == Token.RPAREN || token.type == Token.DOT || token.type == Token.DBL_DOT) {  			context = LEX_CONTEXT_OP;  		}  		else {  			context = LEX_CONTEXT_VAL;  		}  		tokens.Add (token);  	}  	i += skip;  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: while (i < expr.Length) {  	int c = expr [i];  	int d = getChar (expr' i + 1);  	Token token = null;  	int skip = 1;  	if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  		/* whitespace; do nothing */}  	else if (c == '=') {  		token = new Token (Token.EQ);  	}  	else if (c == '!' && d == '=') {  		token = new Token (Token.NEQ);  		skip = 2;  	}  	else if (c == '<') {  		if (d == '=') {  			token = new Token (Token.LTE);  			skip = 2;  		}  		else {  			token = new Token (Token.LT);  		}  	}  	else if (c == '>') {  		if (d == '=') {  			token = new Token (Token.GTE);  			skip = 2;  		}  		else {  			token = new Token (Token.GT);  		}  	}  	else if (c == '+') {  		token = new Token (Token.PLUS);  	}  	else if (c == '-') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  		//not sure this is entirely correct  	}  	else if (c == '*') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  	}  	else if (c == '|') {  		token = new Token (Token.UNION);  	}  	else if (c == '/') {  		if (d == '/') {  			token = new Token (Token.DBL_SLASH);  			skip = 2;  		}  		else {  			token = new Token (Token.SLASH);  		}  	}  	else if (c == '[') {  		token = new Token (Token.LBRACK);  	}  	else if (c == ']') {  		token = new Token (Token.RBRACK);  	}  	else if (c == '(') {  		token = new Token (Token.LPAREN);  	}  	else if (c == ')') {  		token = new Token (Token.RPAREN);  	}  	else if (c == '.') {  		if (d == '.') {  			token = new Token (Token.DBL_DOT);  			skip = 2;  		}  		else if (isDigit (d)) {  			skip = matchNumeric (expr' i);  			token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  		}  		else {  			token = new Token (Token.DOT);  		}  	}  	else if (c == '@') {  		token = new Token (Token.AT);  	}  	else if (c == ''') {  		token = new Token (Token.COMMA);  	}  	else if (c == ':' && d == ':') {  		token = new Token (Token.DBL_COLON);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.AND);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  		token = new Token (Token.OR);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.DIV);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.MOD);  		skip = 3;  	}  	else if (c == '$') {  		int len = matchQName (expr' i + 1);  		if (len == 0) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  			skip = len + 1;  		}  	}  	else if (c == '\'' || c == '\"') {  		//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  		int end = expr.IndexOf ((System.Char)c' i + 1);  		if (end == -1) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  			skip = (end - i) + 1;  		}  	}  	else if (isDigit (c)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  		int len = matchQName (expr' i);  		System.String name = expr.Substring (i' (i + len) - (i));  		if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  			token = new Token (Token.NSWILDCARD' name);  			skip = len + 2;  		}  		else {  			token = new Token (Token.QNAME' new XPathQName (name));  			skip = len;  		}  	}  	else {  		badParse (expr' i' (char)c);  	}  	if (token != null) {  		if (token.type == Token.WILDCARD || token.type == Token.NSWILDCARD || token.type == Token.QNAME || token.type == Token.VAR || token.type == Token.NUM || token.type == Token.STR || token.type == Token.RBRACK || token.type == Token.RPAREN || token.type == Token.DOT || token.type == Token.DBL_DOT) {  			context = LEX_CONTEXT_OP;  		}  		else {  			context = LEX_CONTEXT_VAL;  		}  		tokens.Add (token);  	}  	i += skip;  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: while (i < expr.Length) {  	int c = expr [i];  	int d = getChar (expr' i + 1);  	Token token = null;  	int skip = 1;  	if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  		/* whitespace; do nothing */}  	else if (c == '=') {  		token = new Token (Token.EQ);  	}  	else if (c == '!' && d == '=') {  		token = new Token (Token.NEQ);  		skip = 2;  	}  	else if (c == '<') {  		if (d == '=') {  			token = new Token (Token.LTE);  			skip = 2;  		}  		else {  			token = new Token (Token.LT);  		}  	}  	else if (c == '>') {  		if (d == '=') {  			token = new Token (Token.GTE);  			skip = 2;  		}  		else {  			token = new Token (Token.GT);  		}  	}  	else if (c == '+') {  		token = new Token (Token.PLUS);  	}  	else if (c == '-') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  		//not sure this is entirely correct  	}  	else if (c == '*') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  	}  	else if (c == '|') {  		token = new Token (Token.UNION);  	}  	else if (c == '/') {  		if (d == '/') {  			token = new Token (Token.DBL_SLASH);  			skip = 2;  		}  		else {  			token = new Token (Token.SLASH);  		}  	}  	else if (c == '[') {  		token = new Token (Token.LBRACK);  	}  	else if (c == ']') {  		token = new Token (Token.RBRACK);  	}  	else if (c == '(') {  		token = new Token (Token.LPAREN);  	}  	else if (c == ')') {  		token = new Token (Token.RPAREN);  	}  	else if (c == '.') {  		if (d == '.') {  			token = new Token (Token.DBL_DOT);  			skip = 2;  		}  		else if (isDigit (d)) {  			skip = matchNumeric (expr' i);  			token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  		}  		else {  			token = new Token (Token.DOT);  		}  	}  	else if (c == '@') {  		token = new Token (Token.AT);  	}  	else if (c == ''') {  		token = new Token (Token.COMMA);  	}  	else if (c == ':' && d == ':') {  		token = new Token (Token.DBL_COLON);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.AND);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  		token = new Token (Token.OR);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.DIV);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.MOD);  		skip = 3;  	}  	else if (c == '$') {  		int len = matchQName (expr' i + 1);  		if (len == 0) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  			skip = len + 1;  		}  	}  	else if (c == '\'' || c == '\"') {  		//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  		int end = expr.IndexOf ((System.Char)c' i + 1);  		if (end == -1) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  			skip = (end - i) + 1;  		}  	}  	else if (isDigit (c)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  		int len = matchQName (expr' i);  		System.String name = expr.Substring (i' (i + len) - (i));  		if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  			token = new Token (Token.NSWILDCARD' name);  			skip = len + 2;  		}  		else {  			token = new Token (Token.QNAME' new XPathQName (name));  			skip = len;  		}  	}  	else {  		badParse (expr' i' (char)c);  	}  	if (token != null) {  		if (token.type == Token.WILDCARD || token.type == Token.NSWILDCARD || token.type == Token.QNAME || token.type == Token.VAR || token.type == Token.NUM || token.type == Token.STR || token.type == Token.RBRACK || token.type == Token.RPAREN || token.type == Token.DOT || token.type == Token.DBL_DOT) {  			context = LEX_CONTEXT_OP;  		}  		else {  			context = LEX_CONTEXT_VAL;  		}  		tokens.Add (token);  	}  	i += skip;  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: while (i < expr.Length) {  	int c = expr [i];  	int d = getChar (expr' i + 1);  	Token token = null;  	int skip = 1;  	if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  		/* whitespace; do nothing */}  	else if (c == '=') {  		token = new Token (Token.EQ);  	}  	else if (c == '!' && d == '=') {  		token = new Token (Token.NEQ);  		skip = 2;  	}  	else if (c == '<') {  		if (d == '=') {  			token = new Token (Token.LTE);  			skip = 2;  		}  		else {  			token = new Token (Token.LT);  		}  	}  	else if (c == '>') {  		if (d == '=') {  			token = new Token (Token.GTE);  			skip = 2;  		}  		else {  			token = new Token (Token.GT);  		}  	}  	else if (c == '+') {  		token = new Token (Token.PLUS);  	}  	else if (c == '-') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  		//not sure this is entirely correct  	}  	else if (c == '*') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  	}  	else if (c == '|') {  		token = new Token (Token.UNION);  	}  	else if (c == '/') {  		if (d == '/') {  			token = new Token (Token.DBL_SLASH);  			skip = 2;  		}  		else {  			token = new Token (Token.SLASH);  		}  	}  	else if (c == '[') {  		token = new Token (Token.LBRACK);  	}  	else if (c == ']') {  		token = new Token (Token.RBRACK);  	}  	else if (c == '(') {  		token = new Token (Token.LPAREN);  	}  	else if (c == ')') {  		token = new Token (Token.RPAREN);  	}  	else if (c == '.') {  		if (d == '.') {  			token = new Token (Token.DBL_DOT);  			skip = 2;  		}  		else if (isDigit (d)) {  			skip = matchNumeric (expr' i);  			token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  		}  		else {  			token = new Token (Token.DOT);  		}  	}  	else if (c == '@') {  		token = new Token (Token.AT);  	}  	else if (c == ''') {  		token = new Token (Token.COMMA);  	}  	else if (c == ':' && d == ':') {  		token = new Token (Token.DBL_COLON);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.AND);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  		token = new Token (Token.OR);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.DIV);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.MOD);  		skip = 3;  	}  	else if (c == '$') {  		int len = matchQName (expr' i + 1);  		if (len == 0) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  			skip = len + 1;  		}  	}  	else if (c == '\'' || c == '\"') {  		//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  		int end = expr.IndexOf ((System.Char)c' i + 1);  		if (end == -1) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  			skip = (end - i) + 1;  		}  	}  	else if (isDigit (c)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  		int len = matchQName (expr' i);  		System.String name = expr.Substring (i' (i + len) - (i));  		if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  			token = new Token (Token.NSWILDCARD' name);  			skip = len + 2;  		}  		else {  			token = new Token (Token.QNAME' new XPathQName (name));  			skip = len;  		}  	}  	else {  		badParse (expr' i' (char)c);  	}  	if (token != null) {  		if (token.type == Token.WILDCARD || token.type == Token.NSWILDCARD || token.type == Token.QNAME || token.type == Token.VAR || token.type == Token.NUM || token.type == Token.STR || token.type == Token.RBRACK || token.type == Token.RPAREN || token.type == Token.DOT || token.type == Token.DBL_DOT) {  			context = LEX_CONTEXT_OP;  		}  		else {  			context = LEX_CONTEXT_VAL;  		}  		tokens.Add (token);  	}  	i += skip;  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: while (i < expr.Length) {  	int c = expr [i];  	int d = getChar (expr' i + 1);  	Token token = null;  	int skip = 1;  	if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  		/* whitespace; do nothing */}  	else if (c == '=') {  		token = new Token (Token.EQ);  	}  	else if (c == '!' && d == '=') {  		token = new Token (Token.NEQ);  		skip = 2;  	}  	else if (c == '<') {  		if (d == '=') {  			token = new Token (Token.LTE);  			skip = 2;  		}  		else {  			token = new Token (Token.LT);  		}  	}  	else if (c == '>') {  		if (d == '=') {  			token = new Token (Token.GTE);  			skip = 2;  		}  		else {  			token = new Token (Token.GT);  		}  	}  	else if (c == '+') {  		token = new Token (Token.PLUS);  	}  	else if (c == '-') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  		//not sure this is entirely correct  	}  	else if (c == '*') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  	}  	else if (c == '|') {  		token = new Token (Token.UNION);  	}  	else if (c == '/') {  		if (d == '/') {  			token = new Token (Token.DBL_SLASH);  			skip = 2;  		}  		else {  			token = new Token (Token.SLASH);  		}  	}  	else if (c == '[') {  		token = new Token (Token.LBRACK);  	}  	else if (c == ']') {  		token = new Token (Token.RBRACK);  	}  	else if (c == '(') {  		token = new Token (Token.LPAREN);  	}  	else if (c == ')') {  		token = new Token (Token.RPAREN);  	}  	else if (c == '.') {  		if (d == '.') {  			token = new Token (Token.DBL_DOT);  			skip = 2;  		}  		else if (isDigit (d)) {  			skip = matchNumeric (expr' i);  			token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  		}  		else {  			token = new Token (Token.DOT);  		}  	}  	else if (c == '@') {  		token = new Token (Token.AT);  	}  	else if (c == ''') {  		token = new Token (Token.COMMA);  	}  	else if (c == ':' && d == ':') {  		token = new Token (Token.DBL_COLON);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.AND);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  		token = new Token (Token.OR);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.DIV);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.MOD);  		skip = 3;  	}  	else if (c == '$') {  		int len = matchQName (expr' i + 1);  		if (len == 0) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  			skip = len + 1;  		}  	}  	else if (c == '\'' || c == '\"') {  		//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  		int end = expr.IndexOf ((System.Char)c' i + 1);  		if (end == -1) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  			skip = (end - i) + 1;  		}  	}  	else if (isDigit (c)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  		int len = matchQName (expr' i);  		System.String name = expr.Substring (i' (i + len) - (i));  		if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  			token = new Token (Token.NSWILDCARD' name);  			skip = len + 2;  		}  		else {  			token = new Token (Token.QNAME' new XPathQName (name));  			skip = len;  		}  	}  	else {  		badParse (expr' i' (char)c);  	}  	if (token != null) {  		if (token.type == Token.WILDCARD || token.type == Token.NSWILDCARD || token.type == Token.QNAME || token.type == Token.VAR || token.type == Token.NUM || token.type == Token.STR || token.type == Token.RBRACK || token.type == Token.RPAREN || token.type == Token.DOT || token.type == Token.DBL_DOT) {  			context = LEX_CONTEXT_OP;  		}  		else {  			context = LEX_CONTEXT_VAL;  		}  		tokens.Add (token);  	}  	i += skip;  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: while (i < expr.Length) {  	int c = expr [i];  	int d = getChar (expr' i + 1);  	Token token = null;  	int skip = 1;  	if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  		/* whitespace; do nothing */}  	else if (c == '=') {  		token = new Token (Token.EQ);  	}  	else if (c == '!' && d == '=') {  		token = new Token (Token.NEQ);  		skip = 2;  	}  	else if (c == '<') {  		if (d == '=') {  			token = new Token (Token.LTE);  			skip = 2;  		}  		else {  			token = new Token (Token.LT);  		}  	}  	else if (c == '>') {  		if (d == '=') {  			token = new Token (Token.GTE);  			skip = 2;  		}  		else {  			token = new Token (Token.GT);  		}  	}  	else if (c == '+') {  		token = new Token (Token.PLUS);  	}  	else if (c == '-') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  		//not sure this is entirely correct  	}  	else if (c == '*') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  	}  	else if (c == '|') {  		token = new Token (Token.UNION);  	}  	else if (c == '/') {  		if (d == '/') {  			token = new Token (Token.DBL_SLASH);  			skip = 2;  		}  		else {  			token = new Token (Token.SLASH);  		}  	}  	else if (c == '[') {  		token = new Token (Token.LBRACK);  	}  	else if (c == ']') {  		token = new Token (Token.RBRACK);  	}  	else if (c == '(') {  		token = new Token (Token.LPAREN);  	}  	else if (c == ')') {  		token = new Token (Token.RPAREN);  	}  	else if (c == '.') {  		if (d == '.') {  			token = new Token (Token.DBL_DOT);  			skip = 2;  		}  		else if (isDigit (d)) {  			skip = matchNumeric (expr' i);  			token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  		}  		else {  			token = new Token (Token.DOT);  		}  	}  	else if (c == '@') {  		token = new Token (Token.AT);  	}  	else if (c == ''') {  		token = new Token (Token.COMMA);  	}  	else if (c == ':' && d == ':') {  		token = new Token (Token.DBL_COLON);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.AND);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  		token = new Token (Token.OR);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.DIV);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.MOD);  		skip = 3;  	}  	else if (c == '$') {  		int len = matchQName (expr' i + 1);  		if (len == 0) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  			skip = len + 1;  		}  	}  	else if (c == '\'' || c == '\"') {  		//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  		int end = expr.IndexOf ((System.Char)c' i + 1);  		if (end == -1) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  			skip = (end - i) + 1;  		}  	}  	else if (isDigit (c)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  		int len = matchQName (expr' i);  		System.String name = expr.Substring (i' (i + len) - (i));  		if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  			token = new Token (Token.NSWILDCARD' name);  			skip = len + 2;  		}  		else {  			token = new Token (Token.QNAME' new XPathQName (name));  			skip = len;  		}  	}  	else {  		badParse (expr' i' (char)c);  	}  	if (token != null) {  		if (token.type == Token.WILDCARD || token.type == Token.NSWILDCARD || token.type == Token.QNAME || token.type == Token.VAR || token.type == Token.NUM || token.type == Token.STR || token.type == Token.RBRACK || token.type == Token.RPAREN || token.type == Token.DOT || token.type == Token.DBL_DOT) {  			context = LEX_CONTEXT_OP;  		}  		else {  			context = LEX_CONTEXT_VAL;  		}  		tokens.Add (token);  	}  	i += skip;  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: while (i < expr.Length) {  	int c = expr [i];  	int d = getChar (expr' i + 1);  	Token token = null;  	int skip = 1;  	if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  		/* whitespace; do nothing */}  	else if (c == '=') {  		token = new Token (Token.EQ);  	}  	else if (c == '!' && d == '=') {  		token = new Token (Token.NEQ);  		skip = 2;  	}  	else if (c == '<') {  		if (d == '=') {  			token = new Token (Token.LTE);  			skip = 2;  		}  		else {  			token = new Token (Token.LT);  		}  	}  	else if (c == '>') {  		if (d == '=') {  			token = new Token (Token.GTE);  			skip = 2;  		}  		else {  			token = new Token (Token.GT);  		}  	}  	else if (c == '+') {  		token = new Token (Token.PLUS);  	}  	else if (c == '-') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  		//not sure this is entirely correct  	}  	else if (c == '*') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  	}  	else if (c == '|') {  		token = new Token (Token.UNION);  	}  	else if (c == '/') {  		if (d == '/') {  			token = new Token (Token.DBL_SLASH);  			skip = 2;  		}  		else {  			token = new Token (Token.SLASH);  		}  	}  	else if (c == '[') {  		token = new Token (Token.LBRACK);  	}  	else if (c == ']') {  		token = new Token (Token.RBRACK);  	}  	else if (c == '(') {  		token = new Token (Token.LPAREN);  	}  	else if (c == ')') {  		token = new Token (Token.RPAREN);  	}  	else if (c == '.') {  		if (d == '.') {  			token = new Token (Token.DBL_DOT);  			skip = 2;  		}  		else if (isDigit (d)) {  			skip = matchNumeric (expr' i);  			token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  		}  		else {  			token = new Token (Token.DOT);  		}  	}  	else if (c == '@') {  		token = new Token (Token.AT);  	}  	else if (c == ''') {  		token = new Token (Token.COMMA);  	}  	else if (c == ':' && d == ':') {  		token = new Token (Token.DBL_COLON);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.AND);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  		token = new Token (Token.OR);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.DIV);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.MOD);  		skip = 3;  	}  	else if (c == '$') {  		int len = matchQName (expr' i + 1);  		if (len == 0) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  			skip = len + 1;  		}  	}  	else if (c == '\'' || c == '\"') {  		//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  		int end = expr.IndexOf ((System.Char)c' i + 1);  		if (end == -1) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  			skip = (end - i) + 1;  		}  	}  	else if (isDigit (c)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  		int len = matchQName (expr' i);  		System.String name = expr.Substring (i' (i + len) - (i));  		if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  			token = new Token (Token.NSWILDCARD' name);  			skip = len + 2;  		}  		else {  			token = new Token (Token.QNAME' new XPathQName (name));  			skip = len;  		}  	}  	else {  		badParse (expr' i' (char)c);  	}  	if (token != null) {  		if (token.type == Token.WILDCARD || token.type == Token.NSWILDCARD || token.type == Token.QNAME || token.type == Token.VAR || token.type == Token.NUM || token.type == Token.STR || token.type == Token.RBRACK || token.type == Token.RPAREN || token.type == Token.DOT || token.type == Token.DBL_DOT) {  			context = LEX_CONTEXT_OP;  		}  		else {  			context = LEX_CONTEXT_VAL;  		}  		tokens.Add (token);  	}  	i += skip;  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: while (i < expr.Length) {  	int c = expr [i];  	int d = getChar (expr' i + 1);  	Token token = null;  	int skip = 1;  	if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  		/* whitespace; do nothing */}  	else if (c == '=') {  		token = new Token (Token.EQ);  	}  	else if (c == '!' && d == '=') {  		token = new Token (Token.NEQ);  		skip = 2;  	}  	else if (c == '<') {  		if (d == '=') {  			token = new Token (Token.LTE);  			skip = 2;  		}  		else {  			token = new Token (Token.LT);  		}  	}  	else if (c == '>') {  		if (d == '=') {  			token = new Token (Token.GTE);  			skip = 2;  		}  		else {  			token = new Token (Token.GT);  		}  	}  	else if (c == '+') {  		token = new Token (Token.PLUS);  	}  	else if (c == '-') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  		//not sure this is entirely correct  	}  	else if (c == '*') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  	}  	else if (c == '|') {  		token = new Token (Token.UNION);  	}  	else if (c == '/') {  		if (d == '/') {  			token = new Token (Token.DBL_SLASH);  			skip = 2;  		}  		else {  			token = new Token (Token.SLASH);  		}  	}  	else if (c == '[') {  		token = new Token (Token.LBRACK);  	}  	else if (c == ']') {  		token = new Token (Token.RBRACK);  	}  	else if (c == '(') {  		token = new Token (Token.LPAREN);  	}  	else if (c == ')') {  		token = new Token (Token.RPAREN);  	}  	else if (c == '.') {  		if (d == '.') {  			token = new Token (Token.DBL_DOT);  			skip = 2;  		}  		else if (isDigit (d)) {  			skip = matchNumeric (expr' i);  			token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  		}  		else {  			token = new Token (Token.DOT);  		}  	}  	else if (c == '@') {  		token = new Token (Token.AT);  	}  	else if (c == ''') {  		token = new Token (Token.COMMA);  	}  	else if (c == ':' && d == ':') {  		token = new Token (Token.DBL_COLON);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.AND);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  		token = new Token (Token.OR);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.DIV);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.MOD);  		skip = 3;  	}  	else if (c == '$') {  		int len = matchQName (expr' i + 1);  		if (len == 0) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  			skip = len + 1;  		}  	}  	else if (c == '\'' || c == '\"') {  		//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  		int end = expr.IndexOf ((System.Char)c' i + 1);  		if (end == -1) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  			skip = (end - i) + 1;  		}  	}  	else if (isDigit (c)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  		int len = matchQName (expr' i);  		System.String name = expr.Substring (i' (i + len) - (i));  		if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  			token = new Token (Token.NSWILDCARD' name);  			skip = len + 2;  		}  		else {  			token = new Token (Token.QNAME' new XPathQName (name));  			skip = len;  		}  	}  	else {  		badParse (expr' i' (char)c);  	}  	if (token != null) {  		if (token.type == Token.WILDCARD || token.type == Token.NSWILDCARD || token.type == Token.QNAME || token.type == Token.VAR || token.type == Token.NUM || token.type == Token.STR || token.type == Token.RBRACK || token.type == Token.RPAREN || token.type == Token.DOT || token.type == Token.DBL_DOT) {  			context = LEX_CONTEXT_OP;  		}  		else {  			context = LEX_CONTEXT_VAL;  		}  		tokens.Add (token);  	}  	i += skip;  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: while (i < expr.Length) {  	int c = expr [i];  	int d = getChar (expr' i + 1);  	Token token = null;  	int skip = 1;  	if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  		/* whitespace; do nothing */}  	else if (c == '=') {  		token = new Token (Token.EQ);  	}  	else if (c == '!' && d == '=') {  		token = new Token (Token.NEQ);  		skip = 2;  	}  	else if (c == '<') {  		if (d == '=') {  			token = new Token (Token.LTE);  			skip = 2;  		}  		else {  			token = new Token (Token.LT);  		}  	}  	else if (c == '>') {  		if (d == '=') {  			token = new Token (Token.GTE);  			skip = 2;  		}  		else {  			token = new Token (Token.GT);  		}  	}  	else if (c == '+') {  		token = new Token (Token.PLUS);  	}  	else if (c == '-') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  		//not sure this is entirely correct  	}  	else if (c == '*') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  	}  	else if (c == '|') {  		token = new Token (Token.UNION);  	}  	else if (c == '/') {  		if (d == '/') {  			token = new Token (Token.DBL_SLASH);  			skip = 2;  		}  		else {  			token = new Token (Token.SLASH);  		}  	}  	else if (c == '[') {  		token = new Token (Token.LBRACK);  	}  	else if (c == ']') {  		token = new Token (Token.RBRACK);  	}  	else if (c == '(') {  		token = new Token (Token.LPAREN);  	}  	else if (c == ')') {  		token = new Token (Token.RPAREN);  	}  	else if (c == '.') {  		if (d == '.') {  			token = new Token (Token.DBL_DOT);  			skip = 2;  		}  		else if (isDigit (d)) {  			skip = matchNumeric (expr' i);  			token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  		}  		else {  			token = new Token (Token.DOT);  		}  	}  	else if (c == '@') {  		token = new Token (Token.AT);  	}  	else if (c == ''') {  		token = new Token (Token.COMMA);  	}  	else if (c == ':' && d == ':') {  		token = new Token (Token.DBL_COLON);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.AND);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  		token = new Token (Token.OR);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.DIV);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.MOD);  		skip = 3;  	}  	else if (c == '$') {  		int len = matchQName (expr' i + 1);  		if (len == 0) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  			skip = len + 1;  		}  	}  	else if (c == '\'' || c == '\"') {  		//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  		int end = expr.IndexOf ((System.Char)c' i + 1);  		if (end == -1) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  			skip = (end - i) + 1;  		}  	}  	else if (isDigit (c)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  		int len = matchQName (expr' i);  		System.String name = expr.Substring (i' (i + len) - (i));  		if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  			token = new Token (Token.NSWILDCARD' name);  			skip = len + 2;  		}  		else {  			token = new Token (Token.QNAME' new XPathQName (name));  			skip = len;  		}  	}  	else {  		badParse (expr' i' (char)c);  	}  	if (token != null) {  		if (token.type == Token.WILDCARD || token.type == Token.NSWILDCARD || token.type == Token.QNAME || token.type == Token.VAR || token.type == Token.NUM || token.type == Token.STR || token.type == Token.RBRACK || token.type == Token.RPAREN || token.type == Token.DOT || token.type == Token.DBL_DOT) {  			context = LEX_CONTEXT_OP;  		}  		else {  			context = LEX_CONTEXT_VAL;  		}  		tokens.Add (token);  	}  	i += skip;  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: while (i < expr.Length) {  	int c = expr [i];  	int d = getChar (expr' i + 1);  	Token token = null;  	int skip = 1;  	if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  		/* whitespace; do nothing */}  	else if (c == '=') {  		token = new Token (Token.EQ);  	}  	else if (c == '!' && d == '=') {  		token = new Token (Token.NEQ);  		skip = 2;  	}  	else if (c == '<') {  		if (d == '=') {  			token = new Token (Token.LTE);  			skip = 2;  		}  		else {  			token = new Token (Token.LT);  		}  	}  	else if (c == '>') {  		if (d == '=') {  			token = new Token (Token.GTE);  			skip = 2;  		}  		else {  			token = new Token (Token.GT);  		}  	}  	else if (c == '+') {  		token = new Token (Token.PLUS);  	}  	else if (c == '-') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  		//not sure this is entirely correct  	}  	else if (c == '*') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  	}  	else if (c == '|') {  		token = new Token (Token.UNION);  	}  	else if (c == '/') {  		if (d == '/') {  			token = new Token (Token.DBL_SLASH);  			skip = 2;  		}  		else {  			token = new Token (Token.SLASH);  		}  	}  	else if (c == '[') {  		token = new Token (Token.LBRACK);  	}  	else if (c == ']') {  		token = new Token (Token.RBRACK);  	}  	else if (c == '(') {  		token = new Token (Token.LPAREN);  	}  	else if (c == ')') {  		token = new Token (Token.RPAREN);  	}  	else if (c == '.') {  		if (d == '.') {  			token = new Token (Token.DBL_DOT);  			skip = 2;  		}  		else if (isDigit (d)) {  			skip = matchNumeric (expr' i);  			token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  		}  		else {  			token = new Token (Token.DOT);  		}  	}  	else if (c == '@') {  		token = new Token (Token.AT);  	}  	else if (c == ''') {  		token = new Token (Token.COMMA);  	}  	else if (c == ':' && d == ':') {  		token = new Token (Token.DBL_COLON);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.AND);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  		token = new Token (Token.OR);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.DIV);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.MOD);  		skip = 3;  	}  	else if (c == '$') {  		int len = matchQName (expr' i + 1);  		if (len == 0) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  			skip = len + 1;  		}  	}  	else if (c == '\'' || c == '\"') {  		//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  		int end = expr.IndexOf ((System.Char)c' i + 1);  		if (end == -1) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  			skip = (end - i) + 1;  		}  	}  	else if (isDigit (c)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  		int len = matchQName (expr' i);  		System.String name = expr.Substring (i' (i + len) - (i));  		if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  			token = new Token (Token.NSWILDCARD' name);  			skip = len + 2;  		}  		else {  			token = new Token (Token.QNAME' new XPathQName (name));  			skip = len;  		}  	}  	else {  		badParse (expr' i' (char)c);  	}  	if (token != null) {  		if (token.type == Token.WILDCARD || token.type == Token.NSWILDCARD || token.type == Token.QNAME || token.type == Token.VAR || token.type == Token.NUM || token.type == Token.STR || token.type == Token.RBRACK || token.type == Token.RPAREN || token.type == Token.DOT || token.type == Token.DBL_DOT) {  			context = LEX_CONTEXT_OP;  		}  		else {  			context = LEX_CONTEXT_VAL;  		}  		tokens.Add (token);  	}  	i += skip;  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: while (i < expr.Length) {  	int c = expr [i];  	int d = getChar (expr' i + 1);  	Token token = null;  	int skip = 1;  	if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  		/* whitespace; do nothing */}  	else if (c == '=') {  		token = new Token (Token.EQ);  	}  	else if (c == '!' && d == '=') {  		token = new Token (Token.NEQ);  		skip = 2;  	}  	else if (c == '<') {  		if (d == '=') {  			token = new Token (Token.LTE);  			skip = 2;  		}  		else {  			token = new Token (Token.LT);  		}  	}  	else if (c == '>') {  		if (d == '=') {  			token = new Token (Token.GTE);  			skip = 2;  		}  		else {  			token = new Token (Token.GT);  		}  	}  	else if (c == '+') {  		token = new Token (Token.PLUS);  	}  	else if (c == '-') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  		//not sure this is entirely correct  	}  	else if (c == '*') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  	}  	else if (c == '|') {  		token = new Token (Token.UNION);  	}  	else if (c == '/') {  		if (d == '/') {  			token = new Token (Token.DBL_SLASH);  			skip = 2;  		}  		else {  			token = new Token (Token.SLASH);  		}  	}  	else if (c == '[') {  		token = new Token (Token.LBRACK);  	}  	else if (c == ']') {  		token = new Token (Token.RBRACK);  	}  	else if (c == '(') {  		token = new Token (Token.LPAREN);  	}  	else if (c == ')') {  		token = new Token (Token.RPAREN);  	}  	else if (c == '.') {  		if (d == '.') {  			token = new Token (Token.DBL_DOT);  			skip = 2;  		}  		else if (isDigit (d)) {  			skip = matchNumeric (expr' i);  			token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  		}  		else {  			token = new Token (Token.DOT);  		}  	}  	else if (c == '@') {  		token = new Token (Token.AT);  	}  	else if (c == ''') {  		token = new Token (Token.COMMA);  	}  	else if (c == ':' && d == ':') {  		token = new Token (Token.DBL_COLON);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.AND);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  		token = new Token (Token.OR);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.DIV);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.MOD);  		skip = 3;  	}  	else if (c == '$') {  		int len = matchQName (expr' i + 1);  		if (len == 0) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  			skip = len + 1;  		}  	}  	else if (c == '\'' || c == '\"') {  		//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  		int end = expr.IndexOf ((System.Char)c' i + 1);  		if (end == -1) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  			skip = (end - i) + 1;  		}  	}  	else if (isDigit (c)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  		int len = matchQName (expr' i);  		System.String name = expr.Substring (i' (i + len) - (i));  		if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  			token = new Token (Token.NSWILDCARD' name);  			skip = len + 2;  		}  		else {  			token = new Token (Token.QNAME' new XPathQName (name));  			skip = len;  		}  	}  	else {  		badParse (expr' i' (char)c);  	}  	if (token != null) {  		if (token.type == Token.WILDCARD || token.type == Token.NSWILDCARD || token.type == Token.QNAME || token.type == Token.VAR || token.type == Token.NUM || token.type == Token.STR || token.type == Token.RBRACK || token.type == Token.RPAREN || token.type == Token.DOT || token.type == Token.DBL_DOT) {  			context = LEX_CONTEXT_OP;  		}  		else {  			context = LEX_CONTEXT_VAL;  		}  		tokens.Add (token);  	}  	i += skip;  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: while (i < expr.Length) {  	int c = expr [i];  	int d = getChar (expr' i + 1);  	Token token = null;  	int skip = 1;  	if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  		/* whitespace; do nothing */}  	else if (c == '=') {  		token = new Token (Token.EQ);  	}  	else if (c == '!' && d == '=') {  		token = new Token (Token.NEQ);  		skip = 2;  	}  	else if (c == '<') {  		if (d == '=') {  			token = new Token (Token.LTE);  			skip = 2;  		}  		else {  			token = new Token (Token.LT);  		}  	}  	else if (c == '>') {  		if (d == '=') {  			token = new Token (Token.GTE);  			skip = 2;  		}  		else {  			token = new Token (Token.GT);  		}  	}  	else if (c == '+') {  		token = new Token (Token.PLUS);  	}  	else if (c == '-') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  		//not sure this is entirely correct  	}  	else if (c == '*') {  		token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  	}  	else if (c == '|') {  		token = new Token (Token.UNION);  	}  	else if (c == '/') {  		if (d == '/') {  			token = new Token (Token.DBL_SLASH);  			skip = 2;  		}  		else {  			token = new Token (Token.SLASH);  		}  	}  	else if (c == '[') {  		token = new Token (Token.LBRACK);  	}  	else if (c == ']') {  		token = new Token (Token.RBRACK);  	}  	else if (c == '(') {  		token = new Token (Token.LPAREN);  	}  	else if (c == ')') {  		token = new Token (Token.RPAREN);  	}  	else if (c == '.') {  		if (d == '.') {  			token = new Token (Token.DBL_DOT);  			skip = 2;  		}  		else if (isDigit (d)) {  			skip = matchNumeric (expr' i);  			token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  		}  		else {  			token = new Token (Token.DOT);  		}  	}  	else if (c == '@') {  		token = new Token (Token.AT);  	}  	else if (c == ''') {  		token = new Token (Token.COMMA);  	}  	else if (c == ':' && d == ':') {  		token = new Token (Token.DBL_COLON);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.AND);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  		token = new Token (Token.OR);  		skip = 2;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.DIV);  		skip = 3;  	}  	else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  		token = new Token (Token.MOD);  		skip = 3;  	}  	else if (c == '$') {  		int len = matchQName (expr' i + 1);  		if (len == 0) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  			skip = len + 1;  		}  	}  	else if (c == '\'' || c == '\"') {  		//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  		int end = expr.IndexOf ((System.Char)c' i + 1);  		if (end == -1) {  			badParse (expr' i' (char)c);  		}  		else {  			token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  			skip = (end - i) + 1;  		}  	}  	else if (isDigit (c)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  		int len = matchQName (expr' i);  		System.String name = expr.Substring (i' (i + len) - (i));  		if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  			token = new Token (Token.NSWILDCARD' name);  			skip = len + 2;  		}  		else {  			token = new Token (Token.QNAME' new XPathQName (name));  			skip = len;  		}  	}  	else {  		badParse (expr' i' (char)c);  	}  	if (token != null) {  		if (token.type == Token.WILDCARD || token.type == Token.NSWILDCARD || token.type == Token.QNAME || token.type == Token.VAR || token.type == Token.NUM || token.type == Token.STR || token.type == Token.RBRACK || token.type == Token.RPAREN || token.type == Token.DOT || token.type == Token.DBL_DOT) {  			context = LEX_CONTEXT_OP;  		}  		else {  			context = LEX_CONTEXT_VAL;  		}  		tokens.Add (token);  	}  	i += skip;  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  	/* whitespace; do nothing */}  else if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  	/* whitespace; do nothing */}  else if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  	/* whitespace; do nothing */}  else if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  	/* whitespace; do nothing */}  else if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  	/* whitespace; do nothing */}  else if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  	/* whitespace; do nothing */}  else if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  	/* whitespace; do nothing */}  else if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  	/* whitespace; do nothing */}  else if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  	/* whitespace; do nothing */}  else if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  	/* whitespace; do nothing */}  else if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  	/* whitespace; do nothing */}  else if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  	/* whitespace; do nothing */}  else if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  	/* whitespace; do nothing */}  else if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  	/* whitespace; do nothing */}  else if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  	/* whitespace; do nothing */}  else if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  	/* whitespace; do nothing */}  else if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  	/* whitespace; do nothing */}  else if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  	/* whitespace; do nothing */}  else if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (" \n\t\f\r".IndexOf ((System.Char)c) >= 0) {  	/* whitespace; do nothing */}  else if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '=') {  	token = new Token (Token.EQ);  }  else if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '!' && d == '=') {  	token = new Token (Token.NEQ);  	skip = 2;  }  else if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: skip = 2;  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '<') {  	if (d == '=') {  		token = new Token (Token.LTE);  		skip = 2;  	}  	else {  		token = new Token (Token.LT);  	}  }  else if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (d == '=') {  	token = new Token (Token.LTE);  	skip = 2;  }  else {  	token = new Token (Token.LT);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: skip = 2;  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '>') {  	if (d == '=') {  		token = new Token (Token.GTE);  		skip = 2;  	}  	else {  		token = new Token (Token.GT);  	}  }  else if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (d == '=') {  	token = new Token (Token.GTE);  	skip = 2;  }  else {  	token = new Token (Token.GT);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: skip = 2;  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '+') {  	token = new Token (Token.PLUS);  }  else if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '-') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);  	//not sure this is entirely correct  }  else if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '*') {  	token = new Token (context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);  }  else if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '|') {  	token = new Token (Token.UNION);  }  else if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '/') {  	if (d == '/') {  		token = new Token (Token.DBL_SLASH);  		skip = 2;  	}  	else {  		token = new Token (Token.SLASH);  	}  }  else if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (d == '/') {  	token = new Token (Token.DBL_SLASH);  	skip = 2;  }  else {  	token = new Token (Token.SLASH);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: skip = 2;  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '[') {  	token = new Token (Token.LBRACK);  }  else if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ']') {  	token = new Token (Token.RBRACK);  }  else if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '(') {  	token = new Token (Token.LPAREN);  }  else if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ')') {  	token = new Token (Token.RPAREN);  }  else if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '.') {  	if (d == '.') {  		token = new Token (Token.DBL_DOT);  		skip = 2;  	}  	else if (isDigit (d)) {  		skip = matchNumeric (expr' i);  		token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  	}  	else {  		token = new Token (Token.DOT);  	}  }  else if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (d == '.') {  	token = new Token (Token.DBL_DOT);  	skip = 2;  }  else if (isDigit (d)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else {  	token = new Token (Token.DOT);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: skip = 2;  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '@') {  	token = new Token (Token.AT);  }  else if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ''') {  	token = new Token (Token.COMMA);  }  else if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == ':' && d == ':') {  	token = new Token (Token.DBL_COLON);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: skip = 2;  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "and".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.AND);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: skip = 3;  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 2 <= expr.Length && "or".Equals (expr.Substring (i' (i + 2) - (i)))) {  	token = new Token (Token.OR);  	skip = 2;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: skip = 2;  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "div".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.DIV);  	skip = 3;  }  else if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: skip = 3;  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_OP && i + 3 <= expr.Length && "mod".Equals (expr.Substring (i' (i + 3) - (i)))) {  	token = new Token (Token.MOD);  	skip = 3;  }  else if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: skip = 3;  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '$') {  	int len = matchQName (expr' i + 1);  	if (len == 0) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.VAR' new XPathQName (expr.Substring (i + 1' (i + len + 1) - (i + 1))));  		skip = len + 1;  	}  }  else if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (c == '\'' || c == '\"') {  	//UPGRADE_WARNING: Method 'java.lang.String.indexOf' was converted to 'System.String.IndexOf' which may throw an exception. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1101'"  	int end = expr.IndexOf ((System.Char)c' i + 1);  	if (end == -1) {  		badParse (expr' i' (char)c);  	}  	else {  		token = new Token (Token.STR' expr.Substring (i + 1' (end) - (i + 1)));  		skip = (end - i) + 1;  	}  }  else if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (isDigit (c)) {  	skip = matchNumeric (expr' i);  	token = new Token (Token.NUM' (System.Object)System.Double.Parse (expr.Substring (i' (i + skip) - (i))));  }  else if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (context == LEX_CONTEXT_VAL && (isAlpha (c) || c == '_')) {  	int len = matchQName (expr' i);  	System.String name = expr.Substring (i' (i + len) - (i));  	if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  		token = new Token (Token.NSWILDCARD' name);  		skip = len + 2;  	}  	else {  		token = new Token (Token.QNAME' new XPathQName (name));  		skip = len;  	}  }  else {  	badParse (expr' i' (char)c);  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: if (name.IndexOf (':') == -1 && getChar (expr' i + len) == ':' && getChar (expr' i + len + 1) == '*') {  	token = new Token (Token.NSWILDCARD' name);  	skip = len + 2;  }  else {  	token = new Token (Token.QNAME' new XPathQName (name));  	skip = len;  }  
Magic Number,org.javarosa.xpath.parser,Lexer,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Lexer.cs,lex,The following statement contains a magic number: skip = len + 2;  
Magic Number,org.javarosa.xpath.parser,Parser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Parser.cs,parseStep,The following statement contains a magic number: if (node.content.Count == 1 && node.getTokenType (0) == Token.DOT) {  	step.axisType = ASTNodePathStep.AXIS_TYPE_NULL;  	step.nodeTestType = ASTNodePathStep.NODE_TEST_TYPE_ABBR_DOT;  }  else if (node.content.Count == 1 && node.getTokenType (0) == Token.DBL_DOT) {  	step.axisType = ASTNodePathStep.AXIS_TYPE_NULL;  	step.nodeTestType = ASTNodePathStep.NODE_TEST_TYPE_ABBR_DBL_DOT;  }  else {  	int i = 0;  	if (node.content.Count > 0 && node.getTokenType (0) == Token.AT) {  		step.axisType = ASTNodePathStep.AXIS_TYPE_ABBR;  		i += 1;  	}  	else if (node.content.Count > 1 && node.getTokenType (0) == Token.QNAME && node.getTokenType (1) == Token.DBL_COLON) {  		int axisVal = ASTNodePathStep.validateAxisName (((XPathQName)node.getToken (0).val).ToString ());  		if (axisVal == -1) {  			throw new XPathSyntaxException ("Invalid Axis: " + ((XPathQName)node.getToken (0).val).ToString ());  		}  		step.axisType = ASTNodePathStep.AXIS_TYPE_EXPLICIT;  		step.axisVal = axisVal;  		i += 2;  	}  	else {  		step.axisType = ASTNodePathStep.AXIS_TYPE_NULL;  	}  	if (node.content.Count > i && node.getTokenType (i) == Token.WILDCARD) {  		step.nodeTestType = ASTNodePathStep.NODE_TEST_TYPE_WILDCARD;  	}  	else if (node.content.Count > i && node.getTokenType (i) == Token.NSWILDCARD) {  		step.nodeTestType = ASTNodePathStep.NODE_TEST_TYPE_NSWILDCARD;  		step.nodeTestNamespace = ((System.String)node.getToken (i).val);  	}  	else if (node.content.Count > i && node.getTokenType (i) == Token.QNAME) {  		step.nodeTestType = ASTNodePathStep.NODE_TEST_TYPE_QNAME;  		step.nodeTestQName = (XPathQName)node.getToken (i).val;  	}  	else if (node.content.Count > i && node.content [i] is ASTNodeFunctionCall) {  		if (!ASTNodePathStep.validateNodeTypeTest ((ASTNodeFunctionCall)node.content [i])) {  			throw new XPathSyntaxException ();  		}  		step.nodeTestType = ASTNodePathStep.NODE_TEST_TYPE_FUNC;  		step.nodeTestFunc = (ASTNodeFunctionCall)node.content [i];  	}  	else {  		throw new XPathSyntaxException ();  	}  	i += 1;  	while (i < node.content.Count) {  		if (node.content [i] is ASTNodePredicate) {  			step.predicates.Add (node.content [i]);  		}  		else {  			throw new XPathSyntaxException ();  		}  		i++;  	}  }  
Magic Number,org.javarosa.xpath.parser,Parser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Parser.cs,parseStep,The following statement contains a magic number: if (node.content.Count == 1 && node.getTokenType (0) == Token.DBL_DOT) {  	step.axisType = ASTNodePathStep.AXIS_TYPE_NULL;  	step.nodeTestType = ASTNodePathStep.NODE_TEST_TYPE_ABBR_DBL_DOT;  }  else {  	int i = 0;  	if (node.content.Count > 0 && node.getTokenType (0) == Token.AT) {  		step.axisType = ASTNodePathStep.AXIS_TYPE_ABBR;  		i += 1;  	}  	else if (node.content.Count > 1 && node.getTokenType (0) == Token.QNAME && node.getTokenType (1) == Token.DBL_COLON) {  		int axisVal = ASTNodePathStep.validateAxisName (((XPathQName)node.getToken (0).val).ToString ());  		if (axisVal == -1) {  			throw new XPathSyntaxException ("Invalid Axis: " + ((XPathQName)node.getToken (0).val).ToString ());  		}  		step.axisType = ASTNodePathStep.AXIS_TYPE_EXPLICIT;  		step.axisVal = axisVal;  		i += 2;  	}  	else {  		step.axisType = ASTNodePathStep.AXIS_TYPE_NULL;  	}  	if (node.content.Count > i && node.getTokenType (i) == Token.WILDCARD) {  		step.nodeTestType = ASTNodePathStep.NODE_TEST_TYPE_WILDCARD;  	}  	else if (node.content.Count > i && node.getTokenType (i) == Token.NSWILDCARD) {  		step.nodeTestType = ASTNodePathStep.NODE_TEST_TYPE_NSWILDCARD;  		step.nodeTestNamespace = ((System.String)node.getToken (i).val);  	}  	else if (node.content.Count > i && node.getTokenType (i) == Token.QNAME) {  		step.nodeTestType = ASTNodePathStep.NODE_TEST_TYPE_QNAME;  		step.nodeTestQName = (XPathQName)node.getToken (i).val;  	}  	else if (node.content.Count > i && node.content [i] is ASTNodeFunctionCall) {  		if (!ASTNodePathStep.validateNodeTypeTest ((ASTNodeFunctionCall)node.content [i])) {  			throw new XPathSyntaxException ();  		}  		step.nodeTestType = ASTNodePathStep.NODE_TEST_TYPE_FUNC;  		step.nodeTestFunc = (ASTNodeFunctionCall)node.content [i];  	}  	else {  		throw new XPathSyntaxException ();  	}  	i += 1;  	while (i < node.content.Count) {  		if (node.content [i] is ASTNodePredicate) {  			step.predicates.Add (node.content [i]);  		}  		else {  			throw new XPathSyntaxException ();  		}  		i++;  	}  }  
Magic Number,org.javarosa.xpath.parser,Parser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Parser.cs,parseStep,The following statement contains a magic number: if (node.content.Count > 0 && node.getTokenType (0) == Token.AT) {  	step.axisType = ASTNodePathStep.AXIS_TYPE_ABBR;  	i += 1;  }  else if (node.content.Count > 1 && node.getTokenType (0) == Token.QNAME && node.getTokenType (1) == Token.DBL_COLON) {  	int axisVal = ASTNodePathStep.validateAxisName (((XPathQName)node.getToken (0).val).ToString ());  	if (axisVal == -1) {  		throw new XPathSyntaxException ("Invalid Axis: " + ((XPathQName)node.getToken (0).val).ToString ());  	}  	step.axisType = ASTNodePathStep.AXIS_TYPE_EXPLICIT;  	step.axisVal = axisVal;  	i += 2;  }  else {  	step.axisType = ASTNodePathStep.AXIS_TYPE_NULL;  }  
Magic Number,org.javarosa.xpath.parser,Parser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Parser.cs,parseStep,The following statement contains a magic number: if (node.content.Count > 1 && node.getTokenType (0) == Token.QNAME && node.getTokenType (1) == Token.DBL_COLON) {  	int axisVal = ASTNodePathStep.validateAxisName (((XPathQName)node.getToken (0).val).ToString ());  	if (axisVal == -1) {  		throw new XPathSyntaxException ("Invalid Axis: " + ((XPathQName)node.getToken (0).val).ToString ());  	}  	step.axisType = ASTNodePathStep.AXIS_TYPE_EXPLICIT;  	step.axisVal = axisVal;  	i += 2;  }  else {  	step.axisType = ASTNodePathStep.AXIS_TYPE_NULL;  }  
Magic Number,org.javarosa.xpath.parser,Parser,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Parser.cs,parseStep,The following statement contains a magic number: i += 2;  
Missing Default,org.javarosa.core.model.condition,Condition,C:\repos\samdubey_DotNetRosa\DotNetRosa\core\model\condition\Condition.cs,performAction,The following switch statement is missing a default case: switch (action) {  case ACTION_NULL:  	break;  case ACTION_SHOW:  	node.setRelevant (true);  	break;  case ACTION_HIDE:  	node.setRelevant (false);  	break;  case ACTION_ENABLE:  	node.setEnabled (true);  	break;  case ACTION_DISABLE:  	node.setEnabled (false);  	break;  case ACTION_LOCK:  	/* not supported */;  	break;  case ACTION_UNLOCK:  	/* not supported */;  	break;  case ACTION_REQUIRE:  	node.Required = true;  	break;  case ACTION_DONT_REQUIRE:  	node.Required = false;  	break;  }  
Missing Default,org.javarosa.xpath.expr,XPathArithExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathArithExpr.cs,eval,The following switch statement is missing a default case: switch (op) {  case ADD:  	result = aval + bval;  	break;  case SUBTRACT:  	result = aval - bval;  	break;  case MULTIPLY:  	result = aval * bval;  	break;  case DIVIDE:  	result = aval / bval;  	break;  case MODULO:  	result = aval % bval;  	break;  }  
Missing Default,org.javarosa.xpath.expr,XPathArithExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathArithExpr.cs,ToString,The following switch statement is missing a default case: switch (op) {  case ADD:  	sOp = "+";  	break;  case SUBTRACT:  	sOp = "-";  	break;  case MULTIPLY:  	sOp = "*";  	break;  case DIVIDE:  	sOp = "/";  	break;  case MODULO:  	sOp = "%";  	break;  }  
Missing Default,org.javarosa.xpath.expr,XPathBoolExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathBoolExpr.cs,eval,The following switch statement is missing a default case: switch (op) {  case AND:  	result = aval && bval;  	break;  case OR:  	result = aval || bval;  	break;  }  
Missing Default,org.javarosa.xpath.expr,XPathBoolExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathBoolExpr.cs,ToString,The following switch statement is missing a default case: switch (op) {  case AND:  	sOp = "and";  	break;  case OR:  	sOp = "or";  	break;  }  
Missing Default,org.javarosa.xpath.expr,XPathCmpExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathCmpExpr.cs,eval,The following switch statement is missing a default case: switch (op) {  case LT:  	result = fa < fb;  	break;  case GT:  	result = fa > fb;  	break;  case LTE:  	result = fa <= fb;  	break;  case GTE:  	result = fa >= fb;  	break;  }  
Missing Default,org.javarosa.xpath.expr,XPathCmpExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathCmpExpr.cs,ToString,The following switch statement is missing a default case: switch (op) {  case LT:  	sOp = "<";  	break;  case GT:  	sOp = ">";  	break;  case LTE:  	sOp = "<=";  	break;  case GTE:  	sOp = ">=";  	break;  }  
Missing Default,org.javarosa.xpath.expr,XPathExpression,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathExpression.cs,print,The following switch statement is missing a default case: switch (x.op) {  case XPathArithExpr.ADD:  	op = "add";  	break;  case XPathArithExpr.SUBTRACT:  	op = "subtr";  	break;  case XPathArithExpr.MULTIPLY:  	op = "mult";  	break;  case XPathArithExpr.DIVIDE:  	op = "div";  	break;  case XPathArithExpr.MODULO:  	op = "mod";  	break;  }  
Missing Default,org.javarosa.xpath.expr,XPathExpression,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathExpression.cs,print,The following switch statement is missing a default case: switch (x.op) {  case XPathBoolExpr.AND:  	op = "and";  	break;  case XPathBoolExpr.OR:  	op = "or";  	break;  }  
Missing Default,org.javarosa.xpath.expr,XPathExpression,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathExpression.cs,print,The following switch statement is missing a default case: switch (x.op) {  case XPathCmpExpr.LT:  	op = "lt";  	break;  case XPathCmpExpr.LTE:  	op = "lte";  	break;  case XPathCmpExpr.GT:  	op = "gt";  	break;  case XPathCmpExpr.GTE:  	op = "gte";  	break;  }  
Missing Default,org.javarosa.xpath.expr,XPathExpression,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathExpression.cs,print,The following switch statement is missing a default case: switch (x.init_context) {  case XPathPathExpr.INIT_CONTEXT_ROOT:  	init = "root";  	break;  case XPathPathExpr.INIT_CONTEXT_RELATIVE:  	init = "relative";  	break;  case XPathPathExpr.INIT_CONTEXT_EXPR:  	init = "expr";  	break;  }  
Missing Default,org.javarosa.xpath.expr,XPathPathExpr,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\expr\XPathPathExpr.cs,ToString,The following switch statement is missing a default case: switch (init_context) {  case INIT_CONTEXT_ROOT:  	sb.append ("abs");  	break;  case INIT_CONTEXT_RELATIVE:  	sb.append ("rel");  	break;  case INIT_CONTEXT_EXPR:  	sb.append (filtExpr.ToString ());  	break;  }  
Missing Default,org.javarosa.xpath.parser.ast,ASTNode,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\ast\ASTNode.cs,print,The following switch statement is missing a default case: switch (Parser.vectInt (x.ops' i)) {  case Token.AND:  	printStr ("and:");  	break;  case Token.OR:  	printStr ("or:");  	break;  case Token.EQ:  	printStr ("eq:");  	break;  case Token.NEQ:  	printStr ("neq:");  	break;  case Token.LT:  	printStr ("lt:");  	break;  case Token.LTE:  	printStr ("lte:");  	break;  case Token.GT:  	printStr ("gt:");  	break;  case Token.GTE:  	printStr ("gte:");  	break;  case Token.PLUS:  	printStr ("plus:");  	break;  case Token.MINUS:  	printStr ("minus:");  	break;  case Token.DIV:  	printStr ("div:");  	break;  case Token.MOD:  	printStr ("mod:");  	break;  case Token.MULT:  	printStr ("mult:");  	break;  case Token.UNION:  	printStr ("union:");  	break;  }  
Missing Default,org.javarosa.xpath.parser.ast,ASTNode,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\ast\ASTNode.cs,print,The following switch statement is missing a default case: switch (x.op) {  case Token.UMINUS:  	printStr ("num-neg:");  	break;  }  
Missing Default,org.javarosa.xpath.parser.ast,ASTNode,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\ast\ASTNode.cs,print,The following switch statement is missing a default case: switch (Parser.vectInt (x.separators' i)) {  case Token.DBL_SLASH:  	printStr ("dbl-slash:");  	break;  case Token.SLASH:  	printStr ("slash:");  	break;  }  
Missing Default,org.javarosa.xpath.parser,Token,C:\repos\samdubey_DotNetRosa\DotNetRosa\xpath\parser\Token.cs,ToString,The following switch statement is missing a default case: switch (type) {  case AND:  	s = "AND";  	break;  case AT:  	s = "AT";  	break;  case COMMA:  	s = "COMMA";  	break;  case DBL_COLON:  	s = "DBL_COLON";  	break;  case DBL_DOT:  	s = "DBL_DOT";  	break;  case DBL_SLASH:  	s = "DBL_SLASH";  	break;  case DIV:  	s = "DIV";  	break;  case DOT:  	s = "DOT";  	break;  case EQ:  	s = "EQ";  	break;  case GT:  	s = "GT";  	break;  case GTE:  	s = "GTE";  	break;  case LBRACK:  	s = "LBRACK";  	break;  case LPAREN:  	s = "LPAREN";  	break;  case LT:  	s = "LT";  	break;  case LTE:  	s = "LTE";  	break;  case MINUS:  	s = "MINUS";  	break;  case MOD:  	s = "MOD";  	break;  case MULT:  	s = "MULT";  	break;  case NEQ:  	s = "NEQ";  	break;  case NSWILDCARD:  	s = "NSWILDCARD(" + ((System.String)val) + ")";  	break;  case NUM:  	s = "NUM(" + ((System.Double)val).ToString () + ")";  	break;  case OR:  	s = "OR";  	break;  case PLUS:  	s = "PLUS";  	break;  case QNAME:  	s = "QNAME(" + ((XPathQName)val).ToString () + ")";  	break;  case RBRACK:  	s = "RBRACK";  	break;  case RPAREN:  	s = "RPAREN";  	break;  case SLASH:  	s = "SLASH";  	break;  case STR:  	s = "STR(" + ((System.String)val) + ")";  	break;  case UMINUS:  	s = "UMINUS";  	break;  case UNION:  	s = "UNION";  	break;  case VAR:  	s = "VAR(" + ((XPathQName)val).ToString () + ")";  	break;  case WILDCARD:  	s = "WILDCARD";  	break;  }  
