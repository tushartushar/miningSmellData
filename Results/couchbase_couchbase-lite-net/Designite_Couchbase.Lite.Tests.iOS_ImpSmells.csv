Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,RunReplication,The method has 5 parameters. Parameters: config' expectedErrCode' expectedErrDomain' reset' documentReplicated
Long Identifier,Test,WebSocketTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\WebSocketTest.cs,TestReplicatorOptionsDictionary,The length of the parameter ReplicatorOptionsDictionaryType is 31.
Long Statement,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestTypes,The length of the statement  "            array.Invoking(a => a.AddValue(new Dictionary<string' object> { ["encoding"] = new ASCIIEncoding() })).Should().Throw<ArgumentException>(); " is 139.
Long Statement,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestHttpMessageParser,The length of the statement  "Set-Cookie: 1P_JAR=2017-10-13-05; expires=Fri' 20-Oct-2017 05:54:52 GMT; path=/; domain=.google.co.jp'NID=114=Vzr79B7ISI0vlP54dhHQ1lyoyqxePhvy_k3w2ofp1oce73oG3m9ltBiUgdQNj4tSMkp-oWtzmhUi3rf314Fcrjy6J2DxtyEdA_suJlgfdN9973V2HO32OG9D3svImEJf; expires=Sat' 14-Apr-2018 05:54:52 GMT; path=/; domain=.google.co.jp; HttpOnly " is 317.
Long Statement,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestHttpMessageParser,The length of the statement  "                "1P_JAR=2017-10-13-05; expires=Fri' 20-Oct-2017 05:54:52 GMT; path=/; domain=.google.co.jp'NID=114=Vzr79B7ISI0vlP54dhHQ1lyoyqxePhvy_k3w2ofp1oce73oG3m9ltBiUgdQNj4tSMkp-oWtzmhUi3rf314Fcrjy6J2DxtyEdA_suJlgfdN9973V2HO32OG9D3svImEJf; expires=Sat' 14-Apr-2018 05:54:52 GMT; path=/; domain=.google.co.jp; HttpOnly"); " is 309.
Long Statement,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestAppenNullToHttpMessageParser,The length of the statement  "Set-Cookie: 1P_JAR=2017-10-13-05; expires=Fri' 20-Oct-2017 05:54:52 GMT; path=/; domain=.google.co.jp'NID=114=Vzr79B7ISI0vlP54dhHQ1lyoyqxePhvy_k3w2ofp1oce73oG3m9ltBiUgdQNj4tSMkp-oWtzmhUi3rf314Fcrjy6J2DxtyEdA_suJlgfdN9973V2HO32OG9D3svImEJf; expires=Sat' 14-Apr-2018 05:54:52 GMT; path=/; domain=.google.co.jp; HttpOnly " is 317.
Long Statement,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestTransientAndNetworkDependent,The length of the statement  "                Native.c4error_mayBeTransient(new C4Error(C4ErrorDomain.POSIXDomain' code)).Should().BeTrue($"because {err} should be transient"); " is 130.
Long Statement,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestTransientAndNetworkDependent,The length of the statement  "                Native.c4error_mayBeNetworkDependent(new C4Error(C4ErrorDomain.POSIXDomain' code)).Should().BeTrue($"because {err} should be network dependent"); " is 145.
Long Statement,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestAutoconvertJson,The length of the statement  "            var jsonString = "{\"level1\":{\"foo\":\"bar\"}'\"level2\":{\"list\":[1' 3.14' \"s\"]}' \"$type\":\"JSON .NET Object\"}"; " is 121.
Long Statement,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestCreateExceptions,The length of the statement  "                CouchbaseException.Create(new C4Error(C4ErrorDomain.SQLiteDomain' (int) SQLiteStatus.Misuse)) as CouchbaseSQLiteException; " is 122.
Long Statement,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestCreateExceptions,The length of the statement  "            var webSocketException = CouchbaseException.Create(new C4Error(C4ErrorDomain.WebSocketDomain' 1003)) as CouchbaseWebsocketException; " is 132.
Long Statement,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestCreateExceptions,The length of the statement  "            var posixException = CouchbaseException.Create(new C4Error(C4ErrorDomain.POSIXDomain' PosixBase.EACCES)) as CouchbasePosixException; " is 132.
Long Statement,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestCreateExceptions,The length of the statement  "            networkException = new CouchbaseNetworkException(C4NetworkErrorCode.InvalidURL' "You are trying to connect to an invalid url"); " is 127.
Long Statement,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestCreate,The length of the statement  "            options.Invoking(o => o.EncryptionKey = new EncryptionKey("foo")).Should().Throw<InvalidOperationException>("because the configuration is in use"); " is 147.
Long Statement,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestPurgeDocInDifferentDBInstance,The length of the statement  "                             e.Domain == CouchbaseLiteErrorType.CouchbaseLite' "because a document cannot be purged from another database instance"); " is 120.
Long Statement,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestTypes,The length of the statement  "                d.Invoking(d_ => d_.SetValue("test"' new Dictionary<string' object> { ["encoding"] = new ASCIIEncoding() })).Should().Throw<ArgumentException>(); " is 145.
Long Statement,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestReopenDB,The length of the statement  "            gotDoc.ToDictionary().Should().Equal(new Dictionary<string' object> { ["string"] = "str" }' "because otherwise the property didn't get saved"); " is 143.
Long Statement,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLiveQuery,The length of the statement  "            using (var q = QueryBuilder.Select(SelectResult.Expression(Expression.Property("number1"))).From(DataSource.Database(Db)) " is 121.
Long Statement,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLeftJoin,The length of the statement  "            using (var q = QueryBuilder.Select(SelectResult.Expression(number2Prop.From("main"))' SelectResult.Expression(Expression.Property("theone").From("secondary"))) " is 159.
Long Statement,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLeftJoin,The length of the statement  "            using (var q = QueryBuilder.Select(SelectResult.Expression(number2Prop.From("main"))' SelectResult.Expression(Expression.Property("theone").From("secondary"))) " is 159.
Long Statement,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestGroupBy,The length of the statement  "            using (var q = QueryBuilder.Select(SelectResult.Expression(STATE)' SelectResult.Expression(COUNT)' SelectResult.Expression(MAXZIP)) " is 131.
Long Statement,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestGroupBy,The length of the statement  "            using (var q = QueryBuilder.Select(SelectResult.Expression(STATE)' SelectResult.Expression(COUNT)' SelectResult.Expression(MAXZIP)) " is 131.
Long Statement,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestArrayFunctions,The length of the statement  "            using (var q = QueryBuilder.Select(SelectResult.Expression(ArrayFunction.Contains(Expression.Property("array")' Expression.String("650-123-0001")))' " is 148.
Long Statement,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQuantifiedOperatorVariableKeyPath,The length of the statement  "            var where = ArrayExpression.Any(ArrayExpression.Variable("path")).In(PATHS).Satisfies(VAR_PATH.EqualTo(Expression.String("San Francisco"))); " is 140.
Long Statement,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestSelectAll,The length of the statement  "            using (var q = QueryBuilder.Select(SelectResult.All().From("db")' SelectResult.Expression(Expression.Property("number1").From("db"))) " is 133.
Long Statement,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestFTSStemming,The length of the statement  "            Db.CreateIndex("passageIndexStemless"' IndexBuilder.FullTextIndex(FullTextIndexItem.Property("passage")).SetLanguage(null)); " is 124.
Long Statement,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestChannelRemovedEvent,The length of the statement  "                pullWait.RunConditionalAssert(() => !args.IsPush && args.Documents.Any(x => x.Flags.HasFlag(DocumentFlags.AccessRemoved))); " is 123.
Long Statement,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestP2PPassiveClose,The length of the statement  "            var listener = new MessageEndpointListener(new MessageEndpointListenerConfiguration(_otherDB' ProtocolType.MessageStream)); " is 123.
Long Statement,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestP2PPassiveCloseAll,The length of the statement  "            var listener = new MessageEndpointListener(new MessageEndpointListenerConfiguration(_otherDB' ProtocolType.MessageStream)); " is 123.
Long Statement,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestP2PChangeListener,The length of the statement  "            var listener = new MessageEndpointListener(new MessageEndpointListenerConfiguration(_otherDB' ProtocolType.ByteStream)); " is 120.
Long Statement,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestRemoveChangeListener,The length of the statement  "            var listener = new MessageEndpointListener(new MessageEndpointListenerConfiguration(_otherDB' ProtocolType.ByteStream)); " is 120.
Long Statement,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestConflictResolverNullDoc,The length of the statement  "                conflictResolved.Should().Be(true' "Because the DocumentReplicationEvent be notified after the conflict has being resolved."); " is 126.
Long Statement,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestConflictResolverExceptionThrown,The length of the statement  "                                    innerException.Message.Should().Contain("Resolved document's database different_db is different from expected database"); " is 121.
Long Statement,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,RunTwoStepContinuous,The length of the statement  "            var listener = new MessageEndpointListener(new MessageEndpointListenerConfiguration(_otherDB' ProtocolType.ByteStream)); " is 120.
Long Statement,Test,TestCase,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\TestCase.cs,ReadFileByLines,The length of the statement  "			var bundlePath = Foundation.NSBundle.MainBundle.PathForResource(Path.GetFileNameWithoutExtension(path)' Path.GetExtension(path)); " is 129.
Long Statement,Test,TestCase,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\TestCase.cs,GetTestAsset,The length of the statement  "			var bundlePath = Foundation.NSBundle.MainBundle.PathForResource(Path.GetFileNameWithoutExtension(path)' Path.GetExtension(path)); " is 129.
Long Statement,Test,WebSocketTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\WebSocketTest.cs,TestReplicatorOptionsDictionary,The length of the statement  "            var method = ReplicatorOptionsDictionaryType.GetMethod("BuildInternal"' BindingFlags.NonPublic | BindingFlags.Instance); " is 120.
Long Statement,Test.Util,Benchmark,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\Util\Benchmark.cs,PrintReport,The length of the statement  "            var line = $"Range: {r.Item1.TotalSeconds * scale:F3} ... {r.Item2.TotalSeconds * scale:F3} {scaleName}' median: {Median().TotalSeconds * scale:F3}' std dev: {Stddev().TotalSeconds * scale:G3}"; " is 194.
Long Statement,System.IO.Compression,ZipFileExtensions,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\Util\ZipFileExtensions.cs,DoCreateEntryFromFile,The length of the statement  "            using (Stream fs = new FileStream(sourceFileName' FileMode.Open' FileAccess.Read' FileShare.Read' bufferSize: 0x1000' useAsync: false)) { " is 137.
Long Statement,System.IO.Compression,ZipFileExtensions,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\Util\ZipFileExtensions.cs,DoCreateEntryFromFile,The length of the statement  "                // If file to be archived has an invalid last modified time' use the first datetime representable in the Zip timestamp format " is 125.
Long Statement,System.IO.Compression,ZipFileExtensions,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\Util\ZipFileExtensions.cs,ExtractToFile,The length of the statement  "            using (Stream fs = new FileStream(destinationFileName' fMode' FileAccess.Write' FileShare.None' bufferSize: 0x1000' useAsync: false)) { " is 135.
Complex Conditional,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestStopContinuousReplicator,The conditional expression  "(args.Status.Activity == when ||                                  (when == ReplicatorActivityLevel.Connecting && args.Status.Activity > when))                                  && Interlocked.Exchange(ref stopped' 1) == 0"  is complex.
Empty Catch Block,Test,WebSocketTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\WebSocketTest.cs,TestReachability,The method has an empty catch block.
Empty Catch Block,Test,WebSocketTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\WebSocketTest.cs,TestHttpLogic,The method has an empty catch block.
Empty Catch Block,Test.Util,XunitLogger,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\Util\XunitLogger.cs,Log,The method has an empty catch block.
Magic Number,Couchbase.Lite.Tests.iOS,AppDelegate,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.iOS\AppDelegate.cs,FinishedLaunching,The following statement contains a magic number: Writer = new TcpTextWriter(sr.ReadToEnd().TrimEnd()' 12345);
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddObjects,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(0).Should().Be(true' "because that is what was added");                  a.GetValue(1).Should().Be(false' "because that is what was added");                  a.GetValue(2).Should().Be("string"' "because that is what was added");                  a.GetInt(3).Should().Be(0' "because that is what was added");                  a.GetInt(4).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(6).Should().Be(1.1' "because that is what was added");                  a.GetDate(7).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(8);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(9);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] {"a"' "b"' "c"}' "because that is what was added");                  a.GetBlob(10).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddObjects,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(0).Should().Be(true' "because that is what was added");                  a.GetValue(1).Should().Be(false' "because that is what was added");                  a.GetValue(2).Should().Be("string"' "because that is what was added");                  a.GetInt(3).Should().Be(0' "because that is what was added");                  a.GetInt(4).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(6).Should().Be(1.1' "because that is what was added");                  a.GetDate(7).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(8);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(9);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] {"a"' "b"' "c"}' "because that is what was added");                  a.GetBlob(10).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddObjects,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(0).Should().Be(true' "because that is what was added");                  a.GetValue(1).Should().Be(false' "because that is what was added");                  a.GetValue(2).Should().Be("string"' "because that is what was added");                  a.GetInt(3).Should().Be(0' "because that is what was added");                  a.GetInt(4).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(6).Should().Be(1.1' "because that is what was added");                  a.GetDate(7).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(8);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(9);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] {"a"' "b"' "c"}' "because that is what was added");                  a.GetBlob(10).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddObjects,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(0).Should().Be(true' "because that is what was added");                  a.GetValue(1).Should().Be(false' "because that is what was added");                  a.GetValue(2).Should().Be("string"' "because that is what was added");                  a.GetInt(3).Should().Be(0' "because that is what was added");                  a.GetInt(4).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(6).Should().Be(1.1' "because that is what was added");                  a.GetDate(7).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(8);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(9);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] {"a"' "b"' "c"}' "because that is what was added");                  a.GetBlob(10).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddObjects,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(0).Should().Be(true' "because that is what was added");                  a.GetValue(1).Should().Be(false' "because that is what was added");                  a.GetValue(2).Should().Be("string"' "because that is what was added");                  a.GetInt(3).Should().Be(0' "because that is what was added");                  a.GetInt(4).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(6).Should().Be(1.1' "because that is what was added");                  a.GetDate(7).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(8);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(9);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] {"a"' "b"' "c"}' "because that is what was added");                  a.GetBlob(10).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddObjects,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(0).Should().Be(true' "because that is what was added");                  a.GetValue(1).Should().Be(false' "because that is what was added");                  a.GetValue(2).Should().Be("string"' "because that is what was added");                  a.GetInt(3).Should().Be(0' "because that is what was added");                  a.GetInt(4).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(6).Should().Be(1.1' "because that is what was added");                  a.GetDate(7).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(8);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(9);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] {"a"' "b"' "c"}' "because that is what was added");                  a.GetBlob(10).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddObjects,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(0).Should().Be(true' "because that is what was added");                  a.GetValue(1).Should().Be(false' "because that is what was added");                  a.GetValue(2).Should().Be("string"' "because that is what was added");                  a.GetInt(3).Should().Be(0' "because that is what was added");                  a.GetInt(4).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(6).Should().Be(1.1' "because that is what was added");                  a.GetDate(7).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(8);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(9);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] {"a"' "b"' "c"}' "because that is what was added");                  a.GetBlob(10).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddObjects,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(0).Should().Be(true' "because that is what was added");                  a.GetValue(1).Should().Be(false' "because that is what was added");                  a.GetValue(2).Should().Be("string"' "because that is what was added");                  a.GetInt(3).Should().Be(0' "because that is what was added");                  a.GetInt(4).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(6).Should().Be(1.1' "because that is what was added");                  a.GetDate(7).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(8);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(9);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] {"a"' "b"' "c"}' "because that is what was added");                  a.GetBlob(10).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddObjects,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(0).Should().Be(true' "because that is what was added");                  a.GetValue(1).Should().Be(false' "because that is what was added");                  a.GetValue(2).Should().Be("string"' "because that is what was added");                  a.GetInt(3).Should().Be(0' "because that is what was added");                  a.GetInt(4).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(6).Should().Be(1.1' "because that is what was added");                  a.GetDate(7).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(8);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(9);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] {"a"' "b"' "c"}' "because that is what was added");                  a.GetBlob(10).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddObjects,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(0).Should().Be(true' "because that is what was added");                  a.GetValue(1).Should().Be(false' "because that is what was added");                  a.GetValue(2).Should().Be("string"' "because that is what was added");                  a.GetInt(3).Should().Be(0' "because that is what was added");                  a.GetInt(4).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(6).Should().Be(1.1' "because that is what was added");                  a.GetDate(7).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(8);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(9);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] {"a"' "b"' "c"}' "because that is what was added");                  a.GetBlob(10).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddObjects,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(0).Should().Be(true' "because that is what was added");                  a.GetValue(1).Should().Be(false' "because that is what was added");                  a.GetValue(2).Should().Be("string"' "because that is what was added");                  a.GetInt(3).Should().Be(0' "because that is what was added");                  a.GetInt(4).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(6).Should().Be(1.1' "because that is what was added");                  a.GetDate(7).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(8);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(9);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] {"a"' "b"' "c"}' "because that is what was added");                  a.GetBlob(10).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddObjectsToExistingArray,The following statement contains a magic number: SaveDocument(doc' d =>                  {                      var a = d.GetArray("array");                      a.Count.Should().Be(22' "because 11 entries were added");                      a.GetValue(11).Should().Be(true' "because that is what was added");                      a.GetValue(12).Should().Be(false' "because that is what was added");                      a.GetValue(13).Should().Be("string"' "because that is what was added");                      a.GetInt(14).Should().Be(0' "because that is what was added");                      a.GetInt(15).Should().Be(1' "because that is what was added");                      a.GetInt(16).Should().Be(-1' "because that is what was added");                      a.GetValue(17).Should().Be(1.1' "because that is what was added");                      a.GetDate(18).Should().Be(ArrayTestDate' "because that is what was added");                        var subdict = a.GetDictionary(19);                      subdict.Should().NotBeNull("because a dictionary should be present at this index");                      subdict.ToDictionary()                          .Should().BeEquivalentTo(new Dictionary<string' object> { ["name"] = "Scott Tiger" }'                              "because that is what was added");                        var subarray = a.GetArray(20);                      subarray.Should().NotBeNull("because an array should be present at this index");                      subarray.ToList().Should()                          .ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                      a.GetBlob(21).Should().Be(ArrayTestBlob()' "because that is what was added");                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddObjectsToExistingArray,The following statement contains a magic number: SaveDocument(doc' d =>                  {                      var a = d.GetArray("array");                      a.Count.Should().Be(22' "because 11 entries were added");                      a.GetValue(11).Should().Be(true' "because that is what was added");                      a.GetValue(12).Should().Be(false' "because that is what was added");                      a.GetValue(13).Should().Be("string"' "because that is what was added");                      a.GetInt(14).Should().Be(0' "because that is what was added");                      a.GetInt(15).Should().Be(1' "because that is what was added");                      a.GetInt(16).Should().Be(-1' "because that is what was added");                      a.GetValue(17).Should().Be(1.1' "because that is what was added");                      a.GetDate(18).Should().Be(ArrayTestDate' "because that is what was added");                        var subdict = a.GetDictionary(19);                      subdict.Should().NotBeNull("because a dictionary should be present at this index");                      subdict.ToDictionary()                          .Should().BeEquivalentTo(new Dictionary<string' object> { ["name"] = "Scott Tiger" }'                              "because that is what was added");                        var subarray = a.GetArray(20);                      subarray.Should().NotBeNull("because an array should be present at this index");                      subarray.ToList().Should()                          .ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                      a.GetBlob(21).Should().Be(ArrayTestBlob()' "because that is what was added");                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddObjectsToExistingArray,The following statement contains a magic number: SaveDocument(doc' d =>                  {                      var a = d.GetArray("array");                      a.Count.Should().Be(22' "because 11 entries were added");                      a.GetValue(11).Should().Be(true' "because that is what was added");                      a.GetValue(12).Should().Be(false' "because that is what was added");                      a.GetValue(13).Should().Be("string"' "because that is what was added");                      a.GetInt(14).Should().Be(0' "because that is what was added");                      a.GetInt(15).Should().Be(1' "because that is what was added");                      a.GetInt(16).Should().Be(-1' "because that is what was added");                      a.GetValue(17).Should().Be(1.1' "because that is what was added");                      a.GetDate(18).Should().Be(ArrayTestDate' "because that is what was added");                        var subdict = a.GetDictionary(19);                      subdict.Should().NotBeNull("because a dictionary should be present at this index");                      subdict.ToDictionary()                          .Should().BeEquivalentTo(new Dictionary<string' object> { ["name"] = "Scott Tiger" }'                              "because that is what was added");                        var subarray = a.GetArray(20);                      subarray.Should().NotBeNull("because an array should be present at this index");                      subarray.ToList().Should()                          .ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                      a.GetBlob(21).Should().Be(ArrayTestBlob()' "because that is what was added");                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddObjectsToExistingArray,The following statement contains a magic number: SaveDocument(doc' d =>                  {                      var a = d.GetArray("array");                      a.Count.Should().Be(22' "because 11 entries were added");                      a.GetValue(11).Should().Be(true' "because that is what was added");                      a.GetValue(12).Should().Be(false' "because that is what was added");                      a.GetValue(13).Should().Be("string"' "because that is what was added");                      a.GetInt(14).Should().Be(0' "because that is what was added");                      a.GetInt(15).Should().Be(1' "because that is what was added");                      a.GetInt(16).Should().Be(-1' "because that is what was added");                      a.GetValue(17).Should().Be(1.1' "because that is what was added");                      a.GetDate(18).Should().Be(ArrayTestDate' "because that is what was added");                        var subdict = a.GetDictionary(19);                      subdict.Should().NotBeNull("because a dictionary should be present at this index");                      subdict.ToDictionary()                          .Should().BeEquivalentTo(new Dictionary<string' object> { ["name"] = "Scott Tiger" }'                              "because that is what was added");                        var subarray = a.GetArray(20);                      subarray.Should().NotBeNull("because an array should be present at this index");                      subarray.ToList().Should()                          .ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                      a.GetBlob(21).Should().Be(ArrayTestBlob()' "because that is what was added");                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddObjectsToExistingArray,The following statement contains a magic number: SaveDocument(doc' d =>                  {                      var a = d.GetArray("array");                      a.Count.Should().Be(22' "because 11 entries were added");                      a.GetValue(11).Should().Be(true' "because that is what was added");                      a.GetValue(12).Should().Be(false' "because that is what was added");                      a.GetValue(13).Should().Be("string"' "because that is what was added");                      a.GetInt(14).Should().Be(0' "because that is what was added");                      a.GetInt(15).Should().Be(1' "because that is what was added");                      a.GetInt(16).Should().Be(-1' "because that is what was added");                      a.GetValue(17).Should().Be(1.1' "because that is what was added");                      a.GetDate(18).Should().Be(ArrayTestDate' "because that is what was added");                        var subdict = a.GetDictionary(19);                      subdict.Should().NotBeNull("because a dictionary should be present at this index");                      subdict.ToDictionary()                          .Should().BeEquivalentTo(new Dictionary<string' object> { ["name"] = "Scott Tiger" }'                              "because that is what was added");                        var subarray = a.GetArray(20);                      subarray.Should().NotBeNull("because an array should be present at this index");                      subarray.ToList().Should()                          .ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                      a.GetBlob(21).Should().Be(ArrayTestBlob()' "because that is what was added");                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddObjectsToExistingArray,The following statement contains a magic number: SaveDocument(doc' d =>                  {                      var a = d.GetArray("array");                      a.Count.Should().Be(22' "because 11 entries were added");                      a.GetValue(11).Should().Be(true' "because that is what was added");                      a.GetValue(12).Should().Be(false' "because that is what was added");                      a.GetValue(13).Should().Be("string"' "because that is what was added");                      a.GetInt(14).Should().Be(0' "because that is what was added");                      a.GetInt(15).Should().Be(1' "because that is what was added");                      a.GetInt(16).Should().Be(-1' "because that is what was added");                      a.GetValue(17).Should().Be(1.1' "because that is what was added");                      a.GetDate(18).Should().Be(ArrayTestDate' "because that is what was added");                        var subdict = a.GetDictionary(19);                      subdict.Should().NotBeNull("because a dictionary should be present at this index");                      subdict.ToDictionary()                          .Should().BeEquivalentTo(new Dictionary<string' object> { ["name"] = "Scott Tiger" }'                              "because that is what was added");                        var subarray = a.GetArray(20);                      subarray.Should().NotBeNull("because an array should be present at this index");                      subarray.ToList().Should()                          .ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                      a.GetBlob(21).Should().Be(ArrayTestBlob()' "because that is what was added");                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddObjectsToExistingArray,The following statement contains a magic number: SaveDocument(doc' d =>                  {                      var a = d.GetArray("array");                      a.Count.Should().Be(22' "because 11 entries were added");                      a.GetValue(11).Should().Be(true' "because that is what was added");                      a.GetValue(12).Should().Be(false' "because that is what was added");                      a.GetValue(13).Should().Be("string"' "because that is what was added");                      a.GetInt(14).Should().Be(0' "because that is what was added");                      a.GetInt(15).Should().Be(1' "because that is what was added");                      a.GetInt(16).Should().Be(-1' "because that is what was added");                      a.GetValue(17).Should().Be(1.1' "because that is what was added");                      a.GetDate(18).Should().Be(ArrayTestDate' "because that is what was added");                        var subdict = a.GetDictionary(19);                      subdict.Should().NotBeNull("because a dictionary should be present at this index");                      subdict.ToDictionary()                          .Should().BeEquivalentTo(new Dictionary<string' object> { ["name"] = "Scott Tiger" }'                              "because that is what was added");                        var subarray = a.GetArray(20);                      subarray.Should().NotBeNull("because an array should be present at this index");                      subarray.ToList().Should()                          .ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                      a.GetBlob(21).Should().Be(ArrayTestBlob()' "because that is what was added");                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddObjectsToExistingArray,The following statement contains a magic number: SaveDocument(doc' d =>                  {                      var a = d.GetArray("array");                      a.Count.Should().Be(22' "because 11 entries were added");                      a.GetValue(11).Should().Be(true' "because that is what was added");                      a.GetValue(12).Should().Be(false' "because that is what was added");                      a.GetValue(13).Should().Be("string"' "because that is what was added");                      a.GetInt(14).Should().Be(0' "because that is what was added");                      a.GetInt(15).Should().Be(1' "because that is what was added");                      a.GetInt(16).Should().Be(-1' "because that is what was added");                      a.GetValue(17).Should().Be(1.1' "because that is what was added");                      a.GetDate(18).Should().Be(ArrayTestDate' "because that is what was added");                        var subdict = a.GetDictionary(19);                      subdict.Should().NotBeNull("because a dictionary should be present at this index");                      subdict.ToDictionary()                          .Should().BeEquivalentTo(new Dictionary<string' object> { ["name"] = "Scott Tiger" }'                              "because that is what was added");                        var subarray = a.GetArray(20);                      subarray.Should().NotBeNull("because an array should be present at this index");                      subarray.ToList().Should()                          .ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                      a.GetBlob(21).Should().Be(ArrayTestBlob()' "because that is what was added");                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddObjectsToExistingArray,The following statement contains a magic number: SaveDocument(doc' d =>                  {                      var a = d.GetArray("array");                      a.Count.Should().Be(22' "because 11 entries were added");                      a.GetValue(11).Should().Be(true' "because that is what was added");                      a.GetValue(12).Should().Be(false' "because that is what was added");                      a.GetValue(13).Should().Be("string"' "because that is what was added");                      a.GetInt(14).Should().Be(0' "because that is what was added");                      a.GetInt(15).Should().Be(1' "because that is what was added");                      a.GetInt(16).Should().Be(-1' "because that is what was added");                      a.GetValue(17).Should().Be(1.1' "because that is what was added");                      a.GetDate(18).Should().Be(ArrayTestDate' "because that is what was added");                        var subdict = a.GetDictionary(19);                      subdict.Should().NotBeNull("because a dictionary should be present at this index");                      subdict.ToDictionary()                          .Should().BeEquivalentTo(new Dictionary<string' object> { ["name"] = "Scott Tiger" }'                              "because that is what was added");                        var subarray = a.GetArray(20);                      subarray.Should().NotBeNull("because an array should be present at this index");                      subarray.ToList().Should()                          .ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                      a.GetBlob(21).Should().Be(ArrayTestBlob()' "because that is what was added");                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddObjectsToExistingArray,The following statement contains a magic number: SaveDocument(doc' d =>                  {                      var a = d.GetArray("array");                      a.Count.Should().Be(22' "because 11 entries were added");                      a.GetValue(11).Should().Be(true' "because that is what was added");                      a.GetValue(12).Should().Be(false' "because that is what was added");                      a.GetValue(13).Should().Be("string"' "because that is what was added");                      a.GetInt(14).Should().Be(0' "because that is what was added");                      a.GetInt(15).Should().Be(1' "because that is what was added");                      a.GetInt(16).Should().Be(-1' "because that is what was added");                      a.GetValue(17).Should().Be(1.1' "because that is what was added");                      a.GetDate(18).Should().Be(ArrayTestDate' "because that is what was added");                        var subdict = a.GetDictionary(19);                      subdict.Should().NotBeNull("because a dictionary should be present at this index");                      subdict.ToDictionary()                          .Should().BeEquivalentTo(new Dictionary<string' object> { ["name"] = "Scott Tiger" }'                              "because that is what was added");                        var subarray = a.GetArray(20);                      subarray.Should().NotBeNull("because an array should be present at this index");                      subarray.ToList().Should()                          .ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                      a.GetBlob(21).Should().Be(ArrayTestBlob()' "because that is what was added");                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddObjectsToExistingArray,The following statement contains a magic number: SaveDocument(doc' d =>                  {                      var a = d.GetArray("array");                      a.Count.Should().Be(22' "because 11 entries were added");                      a.GetValue(11).Should().Be(true' "because that is what was added");                      a.GetValue(12).Should().Be(false' "because that is what was added");                      a.GetValue(13).Should().Be("string"' "because that is what was added");                      a.GetInt(14).Should().Be(0' "because that is what was added");                      a.GetInt(15).Should().Be(1' "because that is what was added");                      a.GetInt(16).Should().Be(-1' "because that is what was added");                      a.GetValue(17).Should().Be(1.1' "because that is what was added");                      a.GetDate(18).Should().Be(ArrayTestDate' "because that is what was added");                        var subdict = a.GetDictionary(19);                      subdict.Should().NotBeNull("because a dictionary should be present at this index");                      subdict.ToDictionary()                          .Should().BeEquivalentTo(new Dictionary<string' object> { ["name"] = "Scott Tiger" }'                              "because that is what was added");                        var subarray = a.GetArray(20);                      subarray.Should().NotBeNull("because an array should be present at this index");                      subarray.ToList().Should()                          .ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                      a.GetBlob(21).Should().Be(ArrayTestBlob()' "because that is what was added");                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddObjectsToExistingArray,The following statement contains a magic number: SaveDocument(doc' d =>                  {                      var a = d.GetArray("array");                      a.Count.Should().Be(22' "because 11 entries were added");                      a.GetValue(11).Should().Be(true' "because that is what was added");                      a.GetValue(12).Should().Be(false' "because that is what was added");                      a.GetValue(13).Should().Be("string"' "because that is what was added");                      a.GetInt(14).Should().Be(0' "because that is what was added");                      a.GetInt(15).Should().Be(1' "because that is what was added");                      a.GetInt(16).Should().Be(-1' "because that is what was added");                      a.GetValue(17).Should().Be(1.1' "because that is what was added");                      a.GetDate(18).Should().Be(ArrayTestDate' "because that is what was added");                        var subdict = a.GetDictionary(19);                      subdict.Should().NotBeNull("because a dictionary should be present at this index");                      subdict.ToDictionary()                          .Should().BeEquivalentTo(new Dictionary<string' object> { ["name"] = "Scott Tiger" }'                              "because that is what was added");                        var subarray = a.GetArray(20);                      subarray.Should().NotBeNull("because an array should be present at this index");                      subarray.ToList().Should()                          .ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                      a.GetBlob(21).Should().Be(ArrayTestBlob()' "because that is what was added");                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddObjectsToExistingArray,The following statement contains a magic number: SaveDocument(doc' d =>                  {                      var a = d.GetArray("array");                      a.Count.Should().Be(22' "because 11 entries were added");                      a.GetValue(11).Should().Be(true' "because that is what was added");                      a.GetValue(12).Should().Be(false' "because that is what was added");                      a.GetValue(13).Should().Be("string"' "because that is what was added");                      a.GetInt(14).Should().Be(0' "because that is what was added");                      a.GetInt(15).Should().Be(1' "because that is what was added");                      a.GetInt(16).Should().Be(-1' "because that is what was added");                      a.GetValue(17).Should().Be(1.1' "because that is what was added");                      a.GetDate(18).Should().Be(ArrayTestDate' "because that is what was added");                        var subdict = a.GetDictionary(19);                      subdict.Should().NotBeNull("because a dictionary should be present at this index");                      subdict.ToDictionary()                          .Should().BeEquivalentTo(new Dictionary<string' object> { ["name"] = "Scott Tiger" }'                              "because that is what was added");                        var subarray = a.GetArray(20);                      subarray.Should().NotBeNull("because an array should be present at this index");                      subarray.ToList().Should()                          .ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                      a.GetBlob(21).Should().Be(ArrayTestBlob()' "because that is what was added");                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetObject,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(0).Should().Be(true' "because that is what was added");                  a.GetValue(1).Should().Be(false' "because that is what was added");                  a.GetValue(2).Should().Be("string"' "because that is what was added");                  a.GetInt(3).Should().Be(0' "because that is what was added");                  a.GetInt(4).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(6).Should().Be(1.1' "because that is what was added");                  a.GetDate(7).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(8);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(9);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                  a.GetBlob(10).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetObject,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(0).Should().Be(true' "because that is what was added");                  a.GetValue(1).Should().Be(false' "because that is what was added");                  a.GetValue(2).Should().Be("string"' "because that is what was added");                  a.GetInt(3).Should().Be(0' "because that is what was added");                  a.GetInt(4).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(6).Should().Be(1.1' "because that is what was added");                  a.GetDate(7).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(8);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(9);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                  a.GetBlob(10).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetObject,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(0).Should().Be(true' "because that is what was added");                  a.GetValue(1).Should().Be(false' "because that is what was added");                  a.GetValue(2).Should().Be("string"' "because that is what was added");                  a.GetInt(3).Should().Be(0' "because that is what was added");                  a.GetInt(4).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(6).Should().Be(1.1' "because that is what was added");                  a.GetDate(7).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(8);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(9);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                  a.GetBlob(10).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetObject,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(0).Should().Be(true' "because that is what was added");                  a.GetValue(1).Should().Be(false' "because that is what was added");                  a.GetValue(2).Should().Be("string"' "because that is what was added");                  a.GetInt(3).Should().Be(0' "because that is what was added");                  a.GetInt(4).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(6).Should().Be(1.1' "because that is what was added");                  a.GetDate(7).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(8);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(9);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                  a.GetBlob(10).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetObject,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(0).Should().Be(true' "because that is what was added");                  a.GetValue(1).Should().Be(false' "because that is what was added");                  a.GetValue(2).Should().Be("string"' "because that is what was added");                  a.GetInt(3).Should().Be(0' "because that is what was added");                  a.GetInt(4).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(6).Should().Be(1.1' "because that is what was added");                  a.GetDate(7).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(8);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(9);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                  a.GetBlob(10).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetObject,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(0).Should().Be(true' "because that is what was added");                  a.GetValue(1).Should().Be(false' "because that is what was added");                  a.GetValue(2).Should().Be("string"' "because that is what was added");                  a.GetInt(3).Should().Be(0' "because that is what was added");                  a.GetInt(4).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(6).Should().Be(1.1' "because that is what was added");                  a.GetDate(7).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(8);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(9);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                  a.GetBlob(10).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetObject,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(0).Should().Be(true' "because that is what was added");                  a.GetValue(1).Should().Be(false' "because that is what was added");                  a.GetValue(2).Should().Be("string"' "because that is what was added");                  a.GetInt(3).Should().Be(0' "because that is what was added");                  a.GetInt(4).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(6).Should().Be(1.1' "because that is what was added");                  a.GetDate(7).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(8);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(9);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                  a.GetBlob(10).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetObject,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(0).Should().Be(true' "because that is what was added");                  a.GetValue(1).Should().Be(false' "because that is what was added");                  a.GetValue(2).Should().Be("string"' "because that is what was added");                  a.GetInt(3).Should().Be(0' "because that is what was added");                  a.GetInt(4).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(6).Should().Be(1.1' "because that is what was added");                  a.GetDate(7).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(8);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(9);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                  a.GetBlob(10).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetObject,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(0).Should().Be(true' "because that is what was added");                  a.GetValue(1).Should().Be(false' "because that is what was added");                  a.GetValue(2).Should().Be("string"' "because that is what was added");                  a.GetInt(3).Should().Be(0' "because that is what was added");                  a.GetInt(4).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(6).Should().Be(1.1' "because that is what was added");                  a.GetDate(7).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(8);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(9);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                  a.GetBlob(10).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetObject,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(0).Should().Be(true' "because that is what was added");                  a.GetValue(1).Should().Be(false' "because that is what was added");                  a.GetValue(2).Should().Be("string"' "because that is what was added");                  a.GetInt(3).Should().Be(0' "because that is what was added");                  a.GetInt(4).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(6).Should().Be(1.1' "because that is what was added");                  a.GetDate(7).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(8);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(9);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                  a.GetBlob(10).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetObject,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(0).Should().Be(true' "because that is what was added");                  a.GetValue(1).Should().Be(false' "because that is what was added");                  a.GetValue(2).Should().Be("string"' "because that is what was added");                  a.GetInt(3).Should().Be(0' "because that is what was added");                  a.GetInt(4).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(6).Should().Be(1.1' "because that is what was added");                  a.GetDate(7).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(8);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(9);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                  a.GetBlob(10).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetObjectToExistingArray,The following statement contains a magic number: SaveArray(gotArray' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(10).Should().Be(true' "because that is what was added");                  a.GetValue(9).Should().Be(false' "because that is what was added");                  a.GetValue(8).Should().Be("string"' "because that is what was added");                  a.GetInt(7).Should().Be(0' "because that is what was added");                  a.GetInt(6).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(4).Should().Be(1.1' "because that is what was added");                  a.GetDate(3).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(2);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(1);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                  a.GetBlob(0).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetObjectToExistingArray,The following statement contains a magic number: SaveArray(gotArray' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(10).Should().Be(true' "because that is what was added");                  a.GetValue(9).Should().Be(false' "because that is what was added");                  a.GetValue(8).Should().Be("string"' "because that is what was added");                  a.GetInt(7).Should().Be(0' "because that is what was added");                  a.GetInt(6).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(4).Should().Be(1.1' "because that is what was added");                  a.GetDate(3).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(2);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(1);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                  a.GetBlob(0).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetObjectToExistingArray,The following statement contains a magic number: SaveArray(gotArray' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(10).Should().Be(true' "because that is what was added");                  a.GetValue(9).Should().Be(false' "because that is what was added");                  a.GetValue(8).Should().Be("string"' "because that is what was added");                  a.GetInt(7).Should().Be(0' "because that is what was added");                  a.GetInt(6).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(4).Should().Be(1.1' "because that is what was added");                  a.GetDate(3).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(2);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(1);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                  a.GetBlob(0).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetObjectToExistingArray,The following statement contains a magic number: SaveArray(gotArray' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(10).Should().Be(true' "because that is what was added");                  a.GetValue(9).Should().Be(false' "because that is what was added");                  a.GetValue(8).Should().Be("string"' "because that is what was added");                  a.GetInt(7).Should().Be(0' "because that is what was added");                  a.GetInt(6).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(4).Should().Be(1.1' "because that is what was added");                  a.GetDate(3).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(2);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(1);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                  a.GetBlob(0).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetObjectToExistingArray,The following statement contains a magic number: SaveArray(gotArray' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(10).Should().Be(true' "because that is what was added");                  a.GetValue(9).Should().Be(false' "because that is what was added");                  a.GetValue(8).Should().Be("string"' "because that is what was added");                  a.GetInt(7).Should().Be(0' "because that is what was added");                  a.GetInt(6).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(4).Should().Be(1.1' "because that is what was added");                  a.GetDate(3).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(2);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(1);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                  a.GetBlob(0).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetObjectToExistingArray,The following statement contains a magic number: SaveArray(gotArray' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(10).Should().Be(true' "because that is what was added");                  a.GetValue(9).Should().Be(false' "because that is what was added");                  a.GetValue(8).Should().Be("string"' "because that is what was added");                  a.GetInt(7).Should().Be(0' "because that is what was added");                  a.GetInt(6).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(4).Should().Be(1.1' "because that is what was added");                  a.GetDate(3).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(2);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(1);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                  a.GetBlob(0).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetObjectToExistingArray,The following statement contains a magic number: SaveArray(gotArray' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(10).Should().Be(true' "because that is what was added");                  a.GetValue(9).Should().Be(false' "because that is what was added");                  a.GetValue(8).Should().Be("string"' "because that is what was added");                  a.GetInt(7).Should().Be(0' "because that is what was added");                  a.GetInt(6).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(4).Should().Be(1.1' "because that is what was added");                  a.GetDate(3).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(2);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(1);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                  a.GetBlob(0).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetObjectToExistingArray,The following statement contains a magic number: SaveArray(gotArray' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(10).Should().Be(true' "because that is what was added");                  a.GetValue(9).Should().Be(false' "because that is what was added");                  a.GetValue(8).Should().Be("string"' "because that is what was added");                  a.GetInt(7).Should().Be(0' "because that is what was added");                  a.GetInt(6).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(4).Should().Be(1.1' "because that is what was added");                  a.GetDate(3).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(2);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(1);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                  a.GetBlob(0).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetObjectToExistingArray,The following statement contains a magic number: SaveArray(gotArray' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(10).Should().Be(true' "because that is what was added");                  a.GetValue(9).Should().Be(false' "because that is what was added");                  a.GetValue(8).Should().Be("string"' "because that is what was added");                  a.GetInt(7).Should().Be(0' "because that is what was added");                  a.GetInt(6).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(4).Should().Be(1.1' "because that is what was added");                  a.GetDate(3).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(2);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(1);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                  a.GetBlob(0).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetObjectToExistingArray,The following statement contains a magic number: SaveArray(gotArray' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(10).Should().Be(true' "because that is what was added");                  a.GetValue(9).Should().Be(false' "because that is what was added");                  a.GetValue(8).Should().Be("string"' "because that is what was added");                  a.GetInt(7).Should().Be(0' "because that is what was added");                  a.GetInt(6).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(4).Should().Be(1.1' "because that is what was added");                  a.GetDate(3).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(2);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(1);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                  a.GetBlob(0).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetObjectToExistingArray,The following statement contains a magic number: SaveArray(gotArray' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because 11 entries were added");                  a.GetValue(10).Should().Be(true' "because that is what was added");                  a.GetValue(9).Should().Be(false' "because that is what was added");                  a.GetValue(8).Should().Be("string"' "because that is what was added");                  a.GetInt(7).Should().Be(0' "because that is what was added");                  a.GetInt(6).Should().Be(1' "because that is what was added");                  a.GetInt(5).Should().Be(-1' "because that is what was added");                  a.GetValue(4).Should().Be(1.1' "because that is what was added");                  a.GetDate(3).Should().Be(ArrayTestDate' "because that is what was added");                    var subdict = a.GetDictionary(2);                  subdict.Should().NotBeNull("because a dictionary should be present at this index");                  subdict.ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is what was added");                    var subarray = a.GetArray(1);                  subarray.Should().NotBeNull("because an array should be present at this index");                  subarray.ToList().Should().ContainInOrder(new[] { "a"' "b"' "c" }' "because that is what was added");                  a.GetBlob(0).Should().Be(ArrayTestBlob()' "because that is what was added");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertObject,The following statement contains a magic number: array.Count.Should().Be(2' "because another item was inserted");
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertObject,The following statement contains a magic number: array.Count.Should().Be(3' "because another item was inserted");
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertObject,The following statement contains a magic number: array.InsertString(2' "e");
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertObject,The following statement contains a magic number: array.Count.Should().Be(4' "because another item was inserted");
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertObject,The following statement contains a magic number: array.InsertString(4' "f");
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertObject,The following statement contains a magic number: array.Count.Should().Be(5' "because another item was inserted");
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertObjectToExistingArray,The following statement contains a magic number: doc = SaveArray(array' doc' "array"' a =>              {                  a.Count.Should().Be(2' "because two items have been inserted");                  array.Should().ContainInOrder(new[] { "c"' "a" }' "because those are the correct contents");              }).ToMutable();
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertObjectToExistingArray,The following statement contains a magic number: doc = SaveArray(array' doc' "array"' a =>              {                  a.Count.Should().Be(3' "because three items have been inserted");                  array.Should().ContainInOrder(new[] { "c"' "d"' "a" }' "because those are the correct contents");              }).ToMutable();
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertObjectToExistingArray,The following statement contains a magic number: array.InsertString(2' "e");
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertObjectToExistingArray,The following statement contains a magic number: doc = SaveArray(array' doc' "array"' a =>              {                  a.Count.Should().Be(4' "because four items have been inserted");                  array.Should().ContainInOrder(new[] { "c"' "d"' "e"' "a" }' "because those are the correct contents");              }).ToMutable();
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertObjectToExistingArray,The following statement contains a magic number: array.InsertString(4' "f");
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertObjectToExistingArray,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.Count.Should().Be(5' "because five items have been inserted");                  array.Should().ContainInOrder(new[] { "c"' "d"' "e"' "a"' "f" }' "because those are the correct contents");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertObjectOutOfBound,The following statement contains a magic number: new[] {-1' 2}
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestCount,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.Count.Should().Be(11' "because that is how many elements were inserted");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetString,The following statement contains a magic number: array.Count.Should().Be(11' "because that is how many elements were inserted");
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetString,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetString(0).Should().BeNull("because that is the default value");                  a.GetString(1).Should().BeNull("because that is the default value");                  a.GetString(2).Should().Be("string"' "because that is the value at this index");                  a.GetString(3).Should().BeNull("because that is the default value");                  a.GetString(4).Should().BeNull("because that is the default value");                  a.GetString(5).Should().BeNull("because that is the default value");                  a.GetString(6).Should().BeNull("because that is the default value");                  a.GetString(7).Should().Be(ArrayTestDate.ToString("o")' "because the date at this index can be a string");                  a.GetString(8).Should().BeNull("because that is the default value");                  a.GetString(9).Should().BeNull("because that is the default value");                  a.GetString(10).Should().BeNull("because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetString,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetString(0).Should().BeNull("because that is the default value");                  a.GetString(1).Should().BeNull("because that is the default value");                  a.GetString(2).Should().Be("string"' "because that is the value at this index");                  a.GetString(3).Should().BeNull("because that is the default value");                  a.GetString(4).Should().BeNull("because that is the default value");                  a.GetString(5).Should().BeNull("because that is the default value");                  a.GetString(6).Should().BeNull("because that is the default value");                  a.GetString(7).Should().Be(ArrayTestDate.ToString("o")' "because the date at this index can be a string");                  a.GetString(8).Should().BeNull("because that is the default value");                  a.GetString(9).Should().BeNull("because that is the default value");                  a.GetString(10).Should().BeNull("because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetString,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetString(0).Should().BeNull("because that is the default value");                  a.GetString(1).Should().BeNull("because that is the default value");                  a.GetString(2).Should().Be("string"' "because that is the value at this index");                  a.GetString(3).Should().BeNull("because that is the default value");                  a.GetString(4).Should().BeNull("because that is the default value");                  a.GetString(5).Should().BeNull("because that is the default value");                  a.GetString(6).Should().BeNull("because that is the default value");                  a.GetString(7).Should().Be(ArrayTestDate.ToString("o")' "because the date at this index can be a string");                  a.GetString(8).Should().BeNull("because that is the default value");                  a.GetString(9).Should().BeNull("because that is the default value");                  a.GetString(10).Should().BeNull("because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetString,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetString(0).Should().BeNull("because that is the default value");                  a.GetString(1).Should().BeNull("because that is the default value");                  a.GetString(2).Should().Be("string"' "because that is the value at this index");                  a.GetString(3).Should().BeNull("because that is the default value");                  a.GetString(4).Should().BeNull("because that is the default value");                  a.GetString(5).Should().BeNull("because that is the default value");                  a.GetString(6).Should().BeNull("because that is the default value");                  a.GetString(7).Should().Be(ArrayTestDate.ToString("o")' "because the date at this index can be a string");                  a.GetString(8).Should().BeNull("because that is the default value");                  a.GetString(9).Should().BeNull("because that is the default value");                  a.GetString(10).Should().BeNull("because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetString,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetString(0).Should().BeNull("because that is the default value");                  a.GetString(1).Should().BeNull("because that is the default value");                  a.GetString(2).Should().Be("string"' "because that is the value at this index");                  a.GetString(3).Should().BeNull("because that is the default value");                  a.GetString(4).Should().BeNull("because that is the default value");                  a.GetString(5).Should().BeNull("because that is the default value");                  a.GetString(6).Should().BeNull("because that is the default value");                  a.GetString(7).Should().Be(ArrayTestDate.ToString("o")' "because the date at this index can be a string");                  a.GetString(8).Should().BeNull("because that is the default value");                  a.GetString(9).Should().BeNull("because that is the default value");                  a.GetString(10).Should().BeNull("because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetString,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetString(0).Should().BeNull("because that is the default value");                  a.GetString(1).Should().BeNull("because that is the default value");                  a.GetString(2).Should().Be("string"' "because that is the value at this index");                  a.GetString(3).Should().BeNull("because that is the default value");                  a.GetString(4).Should().BeNull("because that is the default value");                  a.GetString(5).Should().BeNull("because that is the default value");                  a.GetString(6).Should().BeNull("because that is the default value");                  a.GetString(7).Should().Be(ArrayTestDate.ToString("o")' "because the date at this index can be a string");                  a.GetString(8).Should().BeNull("because that is the default value");                  a.GetString(9).Should().BeNull("because that is the default value");                  a.GetString(10).Should().BeNull("because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetString,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetString(0).Should().BeNull("because that is the default value");                  a.GetString(1).Should().BeNull("because that is the default value");                  a.GetString(2).Should().Be("string"' "because that is the value at this index");                  a.GetString(3).Should().BeNull("because that is the default value");                  a.GetString(4).Should().BeNull("because that is the default value");                  a.GetString(5).Should().BeNull("because that is the default value");                  a.GetString(6).Should().BeNull("because that is the default value");                  a.GetString(7).Should().Be(ArrayTestDate.ToString("o")' "because the date at this index can be a string");                  a.GetString(8).Should().BeNull("because that is the default value");                  a.GetString(9).Should().BeNull("because that is the default value");                  a.GetString(10).Should().BeNull("because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetString,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetString(0).Should().BeNull("because that is the default value");                  a.GetString(1).Should().BeNull("because that is the default value");                  a.GetString(2).Should().Be("string"' "because that is the value at this index");                  a.GetString(3).Should().BeNull("because that is the default value");                  a.GetString(4).Should().BeNull("because that is the default value");                  a.GetString(5).Should().BeNull("because that is the default value");                  a.GetString(6).Should().BeNull("because that is the default value");                  a.GetString(7).Should().Be(ArrayTestDate.ToString("o")' "because the date at this index can be a string");                  a.GetString(8).Should().BeNull("because that is the default value");                  a.GetString(9).Should().BeNull("because that is the default value");                  a.GetString(10).Should().BeNull("because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetString,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetString(0).Should().BeNull("because that is the default value");                  a.GetString(1).Should().BeNull("because that is the default value");                  a.GetString(2).Should().Be("string"' "because that is the value at this index");                  a.GetString(3).Should().BeNull("because that is the default value");                  a.GetString(4).Should().BeNull("because that is the default value");                  a.GetString(5).Should().BeNull("because that is the default value");                  a.GetString(6).Should().BeNull("because that is the default value");                  a.GetString(7).Should().Be(ArrayTestDate.ToString("o")' "because the date at this index can be a string");                  a.GetString(8).Should().BeNull("because that is the default value");                  a.GetString(9).Should().BeNull("because that is the default value");                  a.GetString(10).Should().BeNull("because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetInteger,The following statement contains a magic number: array.Count.Should().Be(11' "because that is how many elements were inserted");
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetInteger,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetInt(0).Should().Be(1' "because a boolean true becomes 1");                  a.GetInt(1).Should().Be(0' "because a boolean false becomes 0");                  a.GetInt(2).Should().Be(0' "because that is the default value");                  a.GetInt(3).Should().Be(0' "because that is the stored value");                  a.GetInt(4).Should().Be(1' "because that is the stored value");                  a.GetInt(5).Should().Be(-1' "because that is the stored value");                  a.GetInt(6).Should().Be(1' "because that is the truncated value of 1.1");                  a.GetInt(7).Should().Be(0' "because that is the default value");                  a.GetInt(8).Should().Be(0' "because that is the default value");                  a.GetInt(9).Should().Be(0' "because that is the default value");                  a.GetInt(10).Should().Be(0' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetInteger,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetInt(0).Should().Be(1' "because a boolean true becomes 1");                  a.GetInt(1).Should().Be(0' "because a boolean false becomes 0");                  a.GetInt(2).Should().Be(0' "because that is the default value");                  a.GetInt(3).Should().Be(0' "because that is the stored value");                  a.GetInt(4).Should().Be(1' "because that is the stored value");                  a.GetInt(5).Should().Be(-1' "because that is the stored value");                  a.GetInt(6).Should().Be(1' "because that is the truncated value of 1.1");                  a.GetInt(7).Should().Be(0' "because that is the default value");                  a.GetInt(8).Should().Be(0' "because that is the default value");                  a.GetInt(9).Should().Be(0' "because that is the default value");                  a.GetInt(10).Should().Be(0' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetInteger,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetInt(0).Should().Be(1' "because a boolean true becomes 1");                  a.GetInt(1).Should().Be(0' "because a boolean false becomes 0");                  a.GetInt(2).Should().Be(0' "because that is the default value");                  a.GetInt(3).Should().Be(0' "because that is the stored value");                  a.GetInt(4).Should().Be(1' "because that is the stored value");                  a.GetInt(5).Should().Be(-1' "because that is the stored value");                  a.GetInt(6).Should().Be(1' "because that is the truncated value of 1.1");                  a.GetInt(7).Should().Be(0' "because that is the default value");                  a.GetInt(8).Should().Be(0' "because that is the default value");                  a.GetInt(9).Should().Be(0' "because that is the default value");                  a.GetInt(10).Should().Be(0' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetInteger,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetInt(0).Should().Be(1' "because a boolean true becomes 1");                  a.GetInt(1).Should().Be(0' "because a boolean false becomes 0");                  a.GetInt(2).Should().Be(0' "because that is the default value");                  a.GetInt(3).Should().Be(0' "because that is the stored value");                  a.GetInt(4).Should().Be(1' "because that is the stored value");                  a.GetInt(5).Should().Be(-1' "because that is the stored value");                  a.GetInt(6).Should().Be(1' "because that is the truncated value of 1.1");                  a.GetInt(7).Should().Be(0' "because that is the default value");                  a.GetInt(8).Should().Be(0' "because that is the default value");                  a.GetInt(9).Should().Be(0' "because that is the default value");                  a.GetInt(10).Should().Be(0' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetInteger,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetInt(0).Should().Be(1' "because a boolean true becomes 1");                  a.GetInt(1).Should().Be(0' "because a boolean false becomes 0");                  a.GetInt(2).Should().Be(0' "because that is the default value");                  a.GetInt(3).Should().Be(0' "because that is the stored value");                  a.GetInt(4).Should().Be(1' "because that is the stored value");                  a.GetInt(5).Should().Be(-1' "because that is the stored value");                  a.GetInt(6).Should().Be(1' "because that is the truncated value of 1.1");                  a.GetInt(7).Should().Be(0' "because that is the default value");                  a.GetInt(8).Should().Be(0' "because that is the default value");                  a.GetInt(9).Should().Be(0' "because that is the default value");                  a.GetInt(10).Should().Be(0' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetInteger,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetInt(0).Should().Be(1' "because a boolean true becomes 1");                  a.GetInt(1).Should().Be(0' "because a boolean false becomes 0");                  a.GetInt(2).Should().Be(0' "because that is the default value");                  a.GetInt(3).Should().Be(0' "because that is the stored value");                  a.GetInt(4).Should().Be(1' "because that is the stored value");                  a.GetInt(5).Should().Be(-1' "because that is the stored value");                  a.GetInt(6).Should().Be(1' "because that is the truncated value of 1.1");                  a.GetInt(7).Should().Be(0' "because that is the default value");                  a.GetInt(8).Should().Be(0' "because that is the default value");                  a.GetInt(9).Should().Be(0' "because that is the default value");                  a.GetInt(10).Should().Be(0' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetInteger,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetInt(0).Should().Be(1' "because a boolean true becomes 1");                  a.GetInt(1).Should().Be(0' "because a boolean false becomes 0");                  a.GetInt(2).Should().Be(0' "because that is the default value");                  a.GetInt(3).Should().Be(0' "because that is the stored value");                  a.GetInt(4).Should().Be(1' "because that is the stored value");                  a.GetInt(5).Should().Be(-1' "because that is the stored value");                  a.GetInt(6).Should().Be(1' "because that is the truncated value of 1.1");                  a.GetInt(7).Should().Be(0' "because that is the default value");                  a.GetInt(8).Should().Be(0' "because that is the default value");                  a.GetInt(9).Should().Be(0' "because that is the default value");                  a.GetInt(10).Should().Be(0' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetInteger,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetInt(0).Should().Be(1' "because a boolean true becomes 1");                  a.GetInt(1).Should().Be(0' "because a boolean false becomes 0");                  a.GetInt(2).Should().Be(0' "because that is the default value");                  a.GetInt(3).Should().Be(0' "because that is the stored value");                  a.GetInt(4).Should().Be(1' "because that is the stored value");                  a.GetInt(5).Should().Be(-1' "because that is the stored value");                  a.GetInt(6).Should().Be(1' "because that is the truncated value of 1.1");                  a.GetInt(7).Should().Be(0' "because that is the default value");                  a.GetInt(8).Should().Be(0' "because that is the default value");                  a.GetInt(9).Should().Be(0' "because that is the default value");                  a.GetInt(10).Should().Be(0' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetInteger,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetInt(0).Should().Be(1' "because a boolean true becomes 1");                  a.GetInt(1).Should().Be(0' "because a boolean false becomes 0");                  a.GetInt(2).Should().Be(0' "because that is the default value");                  a.GetInt(3).Should().Be(0' "because that is the stored value");                  a.GetInt(4).Should().Be(1' "because that is the stored value");                  a.GetInt(5).Should().Be(-1' "because that is the stored value");                  a.GetInt(6).Should().Be(1' "because that is the truncated value of 1.1");                  a.GetInt(7).Should().Be(0' "because that is the default value");                  a.GetInt(8).Should().Be(0' "because that is the default value");                  a.GetInt(9).Should().Be(0' "because that is the default value");                  a.GetInt(10).Should().Be(0' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetLong,The following statement contains a magic number: array.Count.Should().Be(11' "because that is how many elements were inserted");
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetLong,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetLong(0).Should().Be(1L' "because a boolean true becomes 1L");                  a.GetLong(1).Should().Be(0L' "because a boolean false becomes 0");                  a.GetLong(2).Should().Be(0L' "because that is the default value");                  a.GetLong(3).Should().Be(0L' "because that is the stored value");                  a.GetLong(4).Should().Be(1L' "because that is the stored value");                  a.GetLong(5).Should().Be(-1L' "because that is the stored value");                  a.GetLong(6).Should().Be(1L' "because that is the truncated value of 1L.1L");                  a.GetLong(7).Should().Be(0L' "because that is the default value");                  a.GetLong(8).Should().Be(0L' "because that is the default value");                  a.GetLong(9).Should().Be(0L' "because that is the default value");                  a.GetLong(10).Should().Be(0L' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetLong,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetLong(0).Should().Be(1L' "because a boolean true becomes 1L");                  a.GetLong(1).Should().Be(0L' "because a boolean false becomes 0");                  a.GetLong(2).Should().Be(0L' "because that is the default value");                  a.GetLong(3).Should().Be(0L' "because that is the stored value");                  a.GetLong(4).Should().Be(1L' "because that is the stored value");                  a.GetLong(5).Should().Be(-1L' "because that is the stored value");                  a.GetLong(6).Should().Be(1L' "because that is the truncated value of 1L.1L");                  a.GetLong(7).Should().Be(0L' "because that is the default value");                  a.GetLong(8).Should().Be(0L' "because that is the default value");                  a.GetLong(9).Should().Be(0L' "because that is the default value");                  a.GetLong(10).Should().Be(0L' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetLong,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetLong(0).Should().Be(1L' "because a boolean true becomes 1L");                  a.GetLong(1).Should().Be(0L' "because a boolean false becomes 0");                  a.GetLong(2).Should().Be(0L' "because that is the default value");                  a.GetLong(3).Should().Be(0L' "because that is the stored value");                  a.GetLong(4).Should().Be(1L' "because that is the stored value");                  a.GetLong(5).Should().Be(-1L' "because that is the stored value");                  a.GetLong(6).Should().Be(1L' "because that is the truncated value of 1L.1L");                  a.GetLong(7).Should().Be(0L' "because that is the default value");                  a.GetLong(8).Should().Be(0L' "because that is the default value");                  a.GetLong(9).Should().Be(0L' "because that is the default value");                  a.GetLong(10).Should().Be(0L' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetLong,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetLong(0).Should().Be(1L' "because a boolean true becomes 1L");                  a.GetLong(1).Should().Be(0L' "because a boolean false becomes 0");                  a.GetLong(2).Should().Be(0L' "because that is the default value");                  a.GetLong(3).Should().Be(0L' "because that is the stored value");                  a.GetLong(4).Should().Be(1L' "because that is the stored value");                  a.GetLong(5).Should().Be(-1L' "because that is the stored value");                  a.GetLong(6).Should().Be(1L' "because that is the truncated value of 1L.1L");                  a.GetLong(7).Should().Be(0L' "because that is the default value");                  a.GetLong(8).Should().Be(0L' "because that is the default value");                  a.GetLong(9).Should().Be(0L' "because that is the default value");                  a.GetLong(10).Should().Be(0L' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetLong,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetLong(0).Should().Be(1L' "because a boolean true becomes 1L");                  a.GetLong(1).Should().Be(0L' "because a boolean false becomes 0");                  a.GetLong(2).Should().Be(0L' "because that is the default value");                  a.GetLong(3).Should().Be(0L' "because that is the stored value");                  a.GetLong(4).Should().Be(1L' "because that is the stored value");                  a.GetLong(5).Should().Be(-1L' "because that is the stored value");                  a.GetLong(6).Should().Be(1L' "because that is the truncated value of 1L.1L");                  a.GetLong(7).Should().Be(0L' "because that is the default value");                  a.GetLong(8).Should().Be(0L' "because that is the default value");                  a.GetLong(9).Should().Be(0L' "because that is the default value");                  a.GetLong(10).Should().Be(0L' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetLong,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetLong(0).Should().Be(1L' "because a boolean true becomes 1L");                  a.GetLong(1).Should().Be(0L' "because a boolean false becomes 0");                  a.GetLong(2).Should().Be(0L' "because that is the default value");                  a.GetLong(3).Should().Be(0L' "because that is the stored value");                  a.GetLong(4).Should().Be(1L' "because that is the stored value");                  a.GetLong(5).Should().Be(-1L' "because that is the stored value");                  a.GetLong(6).Should().Be(1L' "because that is the truncated value of 1L.1L");                  a.GetLong(7).Should().Be(0L' "because that is the default value");                  a.GetLong(8).Should().Be(0L' "because that is the default value");                  a.GetLong(9).Should().Be(0L' "because that is the default value");                  a.GetLong(10).Should().Be(0L' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetLong,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetLong(0).Should().Be(1L' "because a boolean true becomes 1L");                  a.GetLong(1).Should().Be(0L' "because a boolean false becomes 0");                  a.GetLong(2).Should().Be(0L' "because that is the default value");                  a.GetLong(3).Should().Be(0L' "because that is the stored value");                  a.GetLong(4).Should().Be(1L' "because that is the stored value");                  a.GetLong(5).Should().Be(-1L' "because that is the stored value");                  a.GetLong(6).Should().Be(1L' "because that is the truncated value of 1L.1L");                  a.GetLong(7).Should().Be(0L' "because that is the default value");                  a.GetLong(8).Should().Be(0L' "because that is the default value");                  a.GetLong(9).Should().Be(0L' "because that is the default value");                  a.GetLong(10).Should().Be(0L' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetLong,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetLong(0).Should().Be(1L' "because a boolean true becomes 1L");                  a.GetLong(1).Should().Be(0L' "because a boolean false becomes 0");                  a.GetLong(2).Should().Be(0L' "because that is the default value");                  a.GetLong(3).Should().Be(0L' "because that is the stored value");                  a.GetLong(4).Should().Be(1L' "because that is the stored value");                  a.GetLong(5).Should().Be(-1L' "because that is the stored value");                  a.GetLong(6).Should().Be(1L' "because that is the truncated value of 1L.1L");                  a.GetLong(7).Should().Be(0L' "because that is the default value");                  a.GetLong(8).Should().Be(0L' "because that is the default value");                  a.GetLong(9).Should().Be(0L' "because that is the default value");                  a.GetLong(10).Should().Be(0L' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetLong,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetLong(0).Should().Be(1L' "because a boolean true becomes 1L");                  a.GetLong(1).Should().Be(0L' "because a boolean false becomes 0");                  a.GetLong(2).Should().Be(0L' "because that is the default value");                  a.GetLong(3).Should().Be(0L' "because that is the stored value");                  a.GetLong(4).Should().Be(1L' "because that is the stored value");                  a.GetLong(5).Should().Be(-1L' "because that is the stored value");                  a.GetLong(6).Should().Be(1L' "because that is the truncated value of 1L.1L");                  a.GetLong(7).Should().Be(0L' "because that is the default value");                  a.GetLong(8).Should().Be(0L' "because that is the default value");                  a.GetLong(9).Should().Be(0L' "because that is the default value");                  a.GetLong(10).Should().Be(0L' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetDouble,The following statement contains a magic number: array.Count.Should().Be(11' "because that is how many elements were inserted");
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetDouble,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetDouble(0).Should().Be(1.0' "because a boolean true becomes 1.0");                  a.GetDouble(1).Should().Be(0.0' "because a boolean false becomes 0.0");                  a.GetDouble(2).Should().Be(0.0' "because that is the default value");                  a.GetDouble(3).Should().Be(0.0' "because 0 becomes 0.0");                  a.GetDouble(4).Should().Be(1.0' "because 1 becomes 1.0");                  a.GetDouble(5).Should().Be(-1.0' "because -1 becomes -1.0");                  a.GetDouble(6).Should().Be(1.1' "because that is the stored value");                  a.GetDouble(7).Should().Be(0.0' "because that is the default value");                  a.GetDouble(8).Should().Be(0.0' "because that is the default value");                  a.GetDouble(9).Should().Be(0.0' "because that is the default value");                  a.GetDouble(10).Should().Be(0.0' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetDouble,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetDouble(0).Should().Be(1.0' "because a boolean true becomes 1.0");                  a.GetDouble(1).Should().Be(0.0' "because a boolean false becomes 0.0");                  a.GetDouble(2).Should().Be(0.0' "because that is the default value");                  a.GetDouble(3).Should().Be(0.0' "because 0 becomes 0.0");                  a.GetDouble(4).Should().Be(1.0' "because 1 becomes 1.0");                  a.GetDouble(5).Should().Be(-1.0' "because -1 becomes -1.0");                  a.GetDouble(6).Should().Be(1.1' "because that is the stored value");                  a.GetDouble(7).Should().Be(0.0' "because that is the default value");                  a.GetDouble(8).Should().Be(0.0' "because that is the default value");                  a.GetDouble(9).Should().Be(0.0' "because that is the default value");                  a.GetDouble(10).Should().Be(0.0' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetDouble,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetDouble(0).Should().Be(1.0' "because a boolean true becomes 1.0");                  a.GetDouble(1).Should().Be(0.0' "because a boolean false becomes 0.0");                  a.GetDouble(2).Should().Be(0.0' "because that is the default value");                  a.GetDouble(3).Should().Be(0.0' "because 0 becomes 0.0");                  a.GetDouble(4).Should().Be(1.0' "because 1 becomes 1.0");                  a.GetDouble(5).Should().Be(-1.0' "because -1 becomes -1.0");                  a.GetDouble(6).Should().Be(1.1' "because that is the stored value");                  a.GetDouble(7).Should().Be(0.0' "because that is the default value");                  a.GetDouble(8).Should().Be(0.0' "because that is the default value");                  a.GetDouble(9).Should().Be(0.0' "because that is the default value");                  a.GetDouble(10).Should().Be(0.0' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetDouble,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetDouble(0).Should().Be(1.0' "because a boolean true becomes 1.0");                  a.GetDouble(1).Should().Be(0.0' "because a boolean false becomes 0.0");                  a.GetDouble(2).Should().Be(0.0' "because that is the default value");                  a.GetDouble(3).Should().Be(0.0' "because 0 becomes 0.0");                  a.GetDouble(4).Should().Be(1.0' "because 1 becomes 1.0");                  a.GetDouble(5).Should().Be(-1.0' "because -1 becomes -1.0");                  a.GetDouble(6).Should().Be(1.1' "because that is the stored value");                  a.GetDouble(7).Should().Be(0.0' "because that is the default value");                  a.GetDouble(8).Should().Be(0.0' "because that is the default value");                  a.GetDouble(9).Should().Be(0.0' "because that is the default value");                  a.GetDouble(10).Should().Be(0.0' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetDouble,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetDouble(0).Should().Be(1.0' "because a boolean true becomes 1.0");                  a.GetDouble(1).Should().Be(0.0' "because a boolean false becomes 0.0");                  a.GetDouble(2).Should().Be(0.0' "because that is the default value");                  a.GetDouble(3).Should().Be(0.0' "because 0 becomes 0.0");                  a.GetDouble(4).Should().Be(1.0' "because 1 becomes 1.0");                  a.GetDouble(5).Should().Be(-1.0' "because -1 becomes -1.0");                  a.GetDouble(6).Should().Be(1.1' "because that is the stored value");                  a.GetDouble(7).Should().Be(0.0' "because that is the default value");                  a.GetDouble(8).Should().Be(0.0' "because that is the default value");                  a.GetDouble(9).Should().Be(0.0' "because that is the default value");                  a.GetDouble(10).Should().Be(0.0' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetDouble,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetDouble(0).Should().Be(1.0' "because a boolean true becomes 1.0");                  a.GetDouble(1).Should().Be(0.0' "because a boolean false becomes 0.0");                  a.GetDouble(2).Should().Be(0.0' "because that is the default value");                  a.GetDouble(3).Should().Be(0.0' "because 0 becomes 0.0");                  a.GetDouble(4).Should().Be(1.0' "because 1 becomes 1.0");                  a.GetDouble(5).Should().Be(-1.0' "because -1 becomes -1.0");                  a.GetDouble(6).Should().Be(1.1' "because that is the stored value");                  a.GetDouble(7).Should().Be(0.0' "because that is the default value");                  a.GetDouble(8).Should().Be(0.0' "because that is the default value");                  a.GetDouble(9).Should().Be(0.0' "because that is the default value");                  a.GetDouble(10).Should().Be(0.0' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetDouble,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetDouble(0).Should().Be(1.0' "because a boolean true becomes 1.0");                  a.GetDouble(1).Should().Be(0.0' "because a boolean false becomes 0.0");                  a.GetDouble(2).Should().Be(0.0' "because that is the default value");                  a.GetDouble(3).Should().Be(0.0' "because 0 becomes 0.0");                  a.GetDouble(4).Should().Be(1.0' "because 1 becomes 1.0");                  a.GetDouble(5).Should().Be(-1.0' "because -1 becomes -1.0");                  a.GetDouble(6).Should().Be(1.1' "because that is the stored value");                  a.GetDouble(7).Should().Be(0.0' "because that is the default value");                  a.GetDouble(8).Should().Be(0.0' "because that is the default value");                  a.GetDouble(9).Should().Be(0.0' "because that is the default value");                  a.GetDouble(10).Should().Be(0.0' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetDouble,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetDouble(0).Should().Be(1.0' "because a boolean true becomes 1.0");                  a.GetDouble(1).Should().Be(0.0' "because a boolean false becomes 0.0");                  a.GetDouble(2).Should().Be(0.0' "because that is the default value");                  a.GetDouble(3).Should().Be(0.0' "because 0 becomes 0.0");                  a.GetDouble(4).Should().Be(1.0' "because 1 becomes 1.0");                  a.GetDouble(5).Should().Be(-1.0' "because -1 becomes -1.0");                  a.GetDouble(6).Should().Be(1.1' "because that is the stored value");                  a.GetDouble(7).Should().Be(0.0' "because that is the default value");                  a.GetDouble(8).Should().Be(0.0' "because that is the default value");                  a.GetDouble(9).Should().Be(0.0' "because that is the default value");                  a.GetDouble(10).Should().Be(0.0' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetDouble,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetDouble(0).Should().Be(1.0' "because a boolean true becomes 1.0");                  a.GetDouble(1).Should().Be(0.0' "because a boolean false becomes 0.0");                  a.GetDouble(2).Should().Be(0.0' "because that is the default value");                  a.GetDouble(3).Should().Be(0.0' "because 0 becomes 0.0");                  a.GetDouble(4).Should().Be(1.0' "because 1 becomes 1.0");                  a.GetDouble(5).Should().Be(-1.0' "because -1 becomes -1.0");                  a.GetDouble(6).Should().Be(1.1' "because that is the stored value");                  a.GetDouble(7).Should().Be(0.0' "because that is the default value");                  a.GetDouble(8).Should().Be(0.0' "because that is the default value");                  a.GetDouble(9).Should().Be(0.0' "because that is the default value");                  a.GetDouble(10).Should().Be(0.0' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetDouble,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetDouble(0).Should().Be(1.0' "because a boolean true becomes 1.0");                  a.GetDouble(1).Should().Be(0.0' "because a boolean false becomes 0.0");                  a.GetDouble(2).Should().Be(0.0' "because that is the default value");                  a.GetDouble(3).Should().Be(0.0' "because 0 becomes 0.0");                  a.GetDouble(4).Should().Be(1.0' "because 1 becomes 1.0");                  a.GetDouble(5).Should().Be(-1.0' "because -1 becomes -1.0");                  a.GetDouble(6).Should().Be(1.1' "because that is the stored value");                  a.GetDouble(7).Should().Be(0.0' "because that is the default value");                  a.GetDouble(8).Should().Be(0.0' "because that is the default value");                  a.GetDouble(9).Should().Be(0.0' "because that is the default value");                  a.GetDouble(10).Should().Be(0.0' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetFloat,The following statement contains a magic number: array.Count.Should().Be(11' "because that is how many elements were inserted");
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetFloat,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetFloat(0).Should().Be(1.0f' "because a boolean true becomes 1.0f");                  a.GetFloat(1).Should().Be(0.0f' "because a boolean false becomes 0.0f");                  a.GetFloat(2).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(3).Should().Be(0.0f' "because 0 becomes 0.0f");                  a.GetFloat(4).Should().Be(1.0f' "because 1 becomes 1.0f");                  a.GetFloat(5).Should().Be(-1.0f' "because -1 becomes -1.0f");                  a.GetFloat(6).Should().Be(1.1f' "because that is the stored value");                  a.GetFloat(7).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(8).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(9).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(10).Should().Be(0.0f' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetFloat,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetFloat(0).Should().Be(1.0f' "because a boolean true becomes 1.0f");                  a.GetFloat(1).Should().Be(0.0f' "because a boolean false becomes 0.0f");                  a.GetFloat(2).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(3).Should().Be(0.0f' "because 0 becomes 0.0f");                  a.GetFloat(4).Should().Be(1.0f' "because 1 becomes 1.0f");                  a.GetFloat(5).Should().Be(-1.0f' "because -1 becomes -1.0f");                  a.GetFloat(6).Should().Be(1.1f' "because that is the stored value");                  a.GetFloat(7).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(8).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(9).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(10).Should().Be(0.0f' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetFloat,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetFloat(0).Should().Be(1.0f' "because a boolean true becomes 1.0f");                  a.GetFloat(1).Should().Be(0.0f' "because a boolean false becomes 0.0f");                  a.GetFloat(2).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(3).Should().Be(0.0f' "because 0 becomes 0.0f");                  a.GetFloat(4).Should().Be(1.0f' "because 1 becomes 1.0f");                  a.GetFloat(5).Should().Be(-1.0f' "because -1 becomes -1.0f");                  a.GetFloat(6).Should().Be(1.1f' "because that is the stored value");                  a.GetFloat(7).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(8).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(9).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(10).Should().Be(0.0f' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetFloat,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetFloat(0).Should().Be(1.0f' "because a boolean true becomes 1.0f");                  a.GetFloat(1).Should().Be(0.0f' "because a boolean false becomes 0.0f");                  a.GetFloat(2).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(3).Should().Be(0.0f' "because 0 becomes 0.0f");                  a.GetFloat(4).Should().Be(1.0f' "because 1 becomes 1.0f");                  a.GetFloat(5).Should().Be(-1.0f' "because -1 becomes -1.0f");                  a.GetFloat(6).Should().Be(1.1f' "because that is the stored value");                  a.GetFloat(7).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(8).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(9).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(10).Should().Be(0.0f' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetFloat,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetFloat(0).Should().Be(1.0f' "because a boolean true becomes 1.0f");                  a.GetFloat(1).Should().Be(0.0f' "because a boolean false becomes 0.0f");                  a.GetFloat(2).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(3).Should().Be(0.0f' "because 0 becomes 0.0f");                  a.GetFloat(4).Should().Be(1.0f' "because 1 becomes 1.0f");                  a.GetFloat(5).Should().Be(-1.0f' "because -1 becomes -1.0f");                  a.GetFloat(6).Should().Be(1.1f' "because that is the stored value");                  a.GetFloat(7).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(8).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(9).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(10).Should().Be(0.0f' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetFloat,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetFloat(0).Should().Be(1.0f' "because a boolean true becomes 1.0f");                  a.GetFloat(1).Should().Be(0.0f' "because a boolean false becomes 0.0f");                  a.GetFloat(2).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(3).Should().Be(0.0f' "because 0 becomes 0.0f");                  a.GetFloat(4).Should().Be(1.0f' "because 1 becomes 1.0f");                  a.GetFloat(5).Should().Be(-1.0f' "because -1 becomes -1.0f");                  a.GetFloat(6).Should().Be(1.1f' "because that is the stored value");                  a.GetFloat(7).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(8).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(9).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(10).Should().Be(0.0f' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetFloat,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetFloat(0).Should().Be(1.0f' "because a boolean true becomes 1.0f");                  a.GetFloat(1).Should().Be(0.0f' "because a boolean false becomes 0.0f");                  a.GetFloat(2).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(3).Should().Be(0.0f' "because 0 becomes 0.0f");                  a.GetFloat(4).Should().Be(1.0f' "because 1 becomes 1.0f");                  a.GetFloat(5).Should().Be(-1.0f' "because -1 becomes -1.0f");                  a.GetFloat(6).Should().Be(1.1f' "because that is the stored value");                  a.GetFloat(7).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(8).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(9).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(10).Should().Be(0.0f' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetFloat,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetFloat(0).Should().Be(1.0f' "because a boolean true becomes 1.0f");                  a.GetFloat(1).Should().Be(0.0f' "because a boolean false becomes 0.0f");                  a.GetFloat(2).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(3).Should().Be(0.0f' "because 0 becomes 0.0f");                  a.GetFloat(4).Should().Be(1.0f' "because 1 becomes 1.0f");                  a.GetFloat(5).Should().Be(-1.0f' "because -1 becomes -1.0f");                  a.GetFloat(6).Should().Be(1.1f' "because that is the stored value");                  a.GetFloat(7).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(8).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(9).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(10).Should().Be(0.0f' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetFloat,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetFloat(0).Should().Be(1.0f' "because a boolean true becomes 1.0f");                  a.GetFloat(1).Should().Be(0.0f' "because a boolean false becomes 0.0f");                  a.GetFloat(2).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(3).Should().Be(0.0f' "because 0 becomes 0.0f");                  a.GetFloat(4).Should().Be(1.0f' "because 1 becomes 1.0f");                  a.GetFloat(5).Should().Be(-1.0f' "because -1 becomes -1.0f");                  a.GetFloat(6).Should().Be(1.1f' "because that is the stored value");                  a.GetFloat(7).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(8).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(9).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(10).Should().Be(0.0f' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetFloat,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetFloat(0).Should().Be(1.0f' "because a boolean true becomes 1.0f");                  a.GetFloat(1).Should().Be(0.0f' "because a boolean false becomes 0.0f");                  a.GetFloat(2).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(3).Should().Be(0.0f' "because 0 becomes 0.0f");                  a.GetFloat(4).Should().Be(1.0f' "because 1 becomes 1.0f");                  a.GetFloat(5).Should().Be(-1.0f' "because -1 becomes -1.0f");                  a.GetFloat(6).Should().Be(1.1f' "because that is the stored value");                  a.GetFloat(7).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(8).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(9).Should().Be(0.0f' "because that is the default value");                  a.GetFloat(10).Should().Be(0.0f' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetGetMinMaxNumbers,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetValue(0).Should().Be(Int64.MaxValue' "because that is the stored value");                  a.GetValue(1).Should().Be(Int64.MinValue' "because that is the stored value");                  a.GetLong(0).Should().Be(Int64.MaxValue' "because that is the stored value");                  a.GetLong(1).Should().Be(Int64.MinValue' "because that is the stored value");                  a.GetValue(2).Should().Be(Double.MaxValue' "because that is the stored value");                  a.GetValue(3).Should().Be(Double.MinValue' "because that is the stored value");                  a.GetDouble(2).Should().Be(Double.MaxValue' "because that is the stored value");                  a.GetDouble(3).Should().Be(Double.MinValue' "because that is the stored value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetGetMinMaxNumbers,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetValue(0).Should().Be(Int64.MaxValue' "because that is the stored value");                  a.GetValue(1).Should().Be(Int64.MinValue' "because that is the stored value");                  a.GetLong(0).Should().Be(Int64.MaxValue' "because that is the stored value");                  a.GetLong(1).Should().Be(Int64.MinValue' "because that is the stored value");                  a.GetValue(2).Should().Be(Double.MaxValue' "because that is the stored value");                  a.GetValue(3).Should().Be(Double.MinValue' "because that is the stored value");                  a.GetDouble(2).Should().Be(Double.MaxValue' "because that is the stored value");                  a.GetDouble(3).Should().Be(Double.MinValue' "because that is the stored value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetGetMinMaxNumbers,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetValue(0).Should().Be(Int64.MaxValue' "because that is the stored value");                  a.GetValue(1).Should().Be(Int64.MinValue' "because that is the stored value");                  a.GetLong(0).Should().Be(Int64.MaxValue' "because that is the stored value");                  a.GetLong(1).Should().Be(Int64.MinValue' "because that is the stored value");                  a.GetValue(2).Should().Be(Double.MaxValue' "because that is the stored value");                  a.GetValue(3).Should().Be(Double.MinValue' "because that is the stored value");                  a.GetDouble(2).Should().Be(Double.MaxValue' "because that is the stored value");                  a.GetDouble(3).Should().Be(Double.MinValue' "because that is the stored value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetGetMinMaxNumbers,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetValue(0).Should().Be(Int64.MaxValue' "because that is the stored value");                  a.GetValue(1).Should().Be(Int64.MinValue' "because that is the stored value");                  a.GetLong(0).Should().Be(Int64.MaxValue' "because that is the stored value");                  a.GetLong(1).Should().Be(Int64.MinValue' "because that is the stored value");                  a.GetValue(2).Should().Be(Double.MaxValue' "because that is the stored value");                  a.GetValue(3).Should().Be(Double.MinValue' "because that is the stored value");                  a.GetDouble(2).Should().Be(Double.MaxValue' "because that is the stored value");                  a.GetDouble(3).Should().Be(Double.MinValue' "because that is the stored value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: array.AddDouble(1.00)                  .AddDouble(1.49)                  .AddDouble(1.50)                  .AddDouble(1.51)                  .AddDouble(1.99);
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: array.AddDouble(1.00)                  .AddDouble(1.49)                  .AddDouble(1.50)                  .AddDouble(1.51)                  .AddDouble(1.99);
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: array.AddDouble(1.00)                  .AddDouble(1.49)                  .AddDouble(1.50)                  .AddDouble(1.51)                  .AddDouble(1.99);
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: array.AddDouble(1.00)                  .AddDouble(1.49)                  .AddDouble(1.50)                  .AddDouble(1.51)                  .AddDouble(1.99);
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetInt(0).Should().Be(1' "because that is the converted value");                  a.GetLong(0).Should().Be(1L' "because that is the converted value");                  a.GetDouble(0).Should().Be(1.00' "because that is the stored value");                  a.GetInt(1).Should().Be(1' "because that is the converted value");                  a.GetLong(1).Should().Be(1L' "because that is the converted value");                  a.GetDouble(1).Should().Be(1.49' "because that is the stored value");                  a.GetInt(2).Should().Be(1' "because that is the converted value");                  a.GetLong(2).Should().Be(1L' "because that is the converted value");                  a.GetDouble(2).Should().Be(1.50' "because that is the stored value");                  a.GetInt(3).Should().Be(1' "because that is the converted value");                  a.GetLong(3).Should().Be(1L' "because that is the converted value");                  a.GetDouble(3).Should().Be(1.51' "because that is the stored value");                  a.GetInt(4).Should().Be(1' "because that is the converted value");                  a.GetLong(4).Should().Be(1L' "because that is the converted value");                  a.GetDouble(4).Should().Be(1.99' "because that is the stored value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetInt(0).Should().Be(1' "because that is the converted value");                  a.GetLong(0).Should().Be(1L' "because that is the converted value");                  a.GetDouble(0).Should().Be(1.00' "because that is the stored value");                  a.GetInt(1).Should().Be(1' "because that is the converted value");                  a.GetLong(1).Should().Be(1L' "because that is the converted value");                  a.GetDouble(1).Should().Be(1.49' "because that is the stored value");                  a.GetInt(2).Should().Be(1' "because that is the converted value");                  a.GetLong(2).Should().Be(1L' "because that is the converted value");                  a.GetDouble(2).Should().Be(1.50' "because that is the stored value");                  a.GetInt(3).Should().Be(1' "because that is the converted value");                  a.GetLong(3).Should().Be(1L' "because that is the converted value");                  a.GetDouble(3).Should().Be(1.51' "because that is the stored value");                  a.GetInt(4).Should().Be(1' "because that is the converted value");                  a.GetLong(4).Should().Be(1L' "because that is the converted value");                  a.GetDouble(4).Should().Be(1.99' "because that is the stored value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetInt(0).Should().Be(1' "because that is the converted value");                  a.GetLong(0).Should().Be(1L' "because that is the converted value");                  a.GetDouble(0).Should().Be(1.00' "because that is the stored value");                  a.GetInt(1).Should().Be(1' "because that is the converted value");                  a.GetLong(1).Should().Be(1L' "because that is the converted value");                  a.GetDouble(1).Should().Be(1.49' "because that is the stored value");                  a.GetInt(2).Should().Be(1' "because that is the converted value");                  a.GetLong(2).Should().Be(1L' "because that is the converted value");                  a.GetDouble(2).Should().Be(1.50' "because that is the stored value");                  a.GetInt(3).Should().Be(1' "because that is the converted value");                  a.GetLong(3).Should().Be(1L' "because that is the converted value");                  a.GetDouble(3).Should().Be(1.51' "because that is the stored value");                  a.GetInt(4).Should().Be(1' "because that is the converted value");                  a.GetLong(4).Should().Be(1L' "because that is the converted value");                  a.GetDouble(4).Should().Be(1.99' "because that is the stored value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetInt(0).Should().Be(1' "because that is the converted value");                  a.GetLong(0).Should().Be(1L' "because that is the converted value");                  a.GetDouble(0).Should().Be(1.00' "because that is the stored value");                  a.GetInt(1).Should().Be(1' "because that is the converted value");                  a.GetLong(1).Should().Be(1L' "because that is the converted value");                  a.GetDouble(1).Should().Be(1.49' "because that is the stored value");                  a.GetInt(2).Should().Be(1' "because that is the converted value");                  a.GetLong(2).Should().Be(1L' "because that is the converted value");                  a.GetDouble(2).Should().Be(1.50' "because that is the stored value");                  a.GetInt(3).Should().Be(1' "because that is the converted value");                  a.GetLong(3).Should().Be(1L' "because that is the converted value");                  a.GetDouble(3).Should().Be(1.51' "because that is the stored value");                  a.GetInt(4).Should().Be(1' "because that is the converted value");                  a.GetLong(4).Should().Be(1L' "because that is the converted value");                  a.GetDouble(4).Should().Be(1.99' "because that is the stored value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetInt(0).Should().Be(1' "because that is the converted value");                  a.GetLong(0).Should().Be(1L' "because that is the converted value");                  a.GetDouble(0).Should().Be(1.00' "because that is the stored value");                  a.GetInt(1).Should().Be(1' "because that is the converted value");                  a.GetLong(1).Should().Be(1L' "because that is the converted value");                  a.GetDouble(1).Should().Be(1.49' "because that is the stored value");                  a.GetInt(2).Should().Be(1' "because that is the converted value");                  a.GetLong(2).Should().Be(1L' "because that is the converted value");                  a.GetDouble(2).Should().Be(1.50' "because that is the stored value");                  a.GetInt(3).Should().Be(1' "because that is the converted value");                  a.GetLong(3).Should().Be(1L' "because that is the converted value");                  a.GetDouble(3).Should().Be(1.51' "because that is the stored value");                  a.GetInt(4).Should().Be(1' "because that is the converted value");                  a.GetLong(4).Should().Be(1L' "because that is the converted value");                  a.GetDouble(4).Should().Be(1.99' "because that is the stored value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetInt(0).Should().Be(1' "because that is the converted value");                  a.GetLong(0).Should().Be(1L' "because that is the converted value");                  a.GetDouble(0).Should().Be(1.00' "because that is the stored value");                  a.GetInt(1).Should().Be(1' "because that is the converted value");                  a.GetLong(1).Should().Be(1L' "because that is the converted value");                  a.GetDouble(1).Should().Be(1.49' "because that is the stored value");                  a.GetInt(2).Should().Be(1' "because that is the converted value");                  a.GetLong(2).Should().Be(1L' "because that is the converted value");                  a.GetDouble(2).Should().Be(1.50' "because that is the stored value");                  a.GetInt(3).Should().Be(1' "because that is the converted value");                  a.GetLong(3).Should().Be(1L' "because that is the converted value");                  a.GetDouble(3).Should().Be(1.51' "because that is the stored value");                  a.GetInt(4).Should().Be(1' "because that is the converted value");                  a.GetLong(4).Should().Be(1L' "because that is the converted value");                  a.GetDouble(4).Should().Be(1.99' "because that is the stored value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetInt(0).Should().Be(1' "because that is the converted value");                  a.GetLong(0).Should().Be(1L' "because that is the converted value");                  a.GetDouble(0).Should().Be(1.00' "because that is the stored value");                  a.GetInt(1).Should().Be(1' "because that is the converted value");                  a.GetLong(1).Should().Be(1L' "because that is the converted value");                  a.GetDouble(1).Should().Be(1.49' "because that is the stored value");                  a.GetInt(2).Should().Be(1' "because that is the converted value");                  a.GetLong(2).Should().Be(1L' "because that is the converted value");                  a.GetDouble(2).Should().Be(1.50' "because that is the stored value");                  a.GetInt(3).Should().Be(1' "because that is the converted value");                  a.GetLong(3).Should().Be(1L' "because that is the converted value");                  a.GetDouble(3).Should().Be(1.51' "because that is the stored value");                  a.GetInt(4).Should().Be(1' "because that is the converted value");                  a.GetLong(4).Should().Be(1L' "because that is the converted value");                  a.GetDouble(4).Should().Be(1.99' "because that is the stored value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetInt(0).Should().Be(1' "because that is the converted value");                  a.GetLong(0).Should().Be(1L' "because that is the converted value");                  a.GetDouble(0).Should().Be(1.00' "because that is the stored value");                  a.GetInt(1).Should().Be(1' "because that is the converted value");                  a.GetLong(1).Should().Be(1L' "because that is the converted value");                  a.GetDouble(1).Should().Be(1.49' "because that is the stored value");                  a.GetInt(2).Should().Be(1' "because that is the converted value");                  a.GetLong(2).Should().Be(1L' "because that is the converted value");                  a.GetDouble(2).Should().Be(1.50' "because that is the stored value");                  a.GetInt(3).Should().Be(1' "because that is the converted value");                  a.GetLong(3).Should().Be(1L' "because that is the converted value");                  a.GetDouble(3).Should().Be(1.51' "because that is the stored value");                  a.GetInt(4).Should().Be(1' "because that is the converted value");                  a.GetLong(4).Should().Be(1L' "because that is the converted value");                  a.GetDouble(4).Should().Be(1.99' "because that is the stored value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetInt(0).Should().Be(1' "because that is the converted value");                  a.GetLong(0).Should().Be(1L' "because that is the converted value");                  a.GetDouble(0).Should().Be(1.00' "because that is the stored value");                  a.GetInt(1).Should().Be(1' "because that is the converted value");                  a.GetLong(1).Should().Be(1L' "because that is the converted value");                  a.GetDouble(1).Should().Be(1.49' "because that is the stored value");                  a.GetInt(2).Should().Be(1' "because that is the converted value");                  a.GetLong(2).Should().Be(1L' "because that is the converted value");                  a.GetDouble(2).Should().Be(1.50' "because that is the stored value");                  a.GetInt(3).Should().Be(1' "because that is the converted value");                  a.GetLong(3).Should().Be(1L' "because that is the converted value");                  a.GetDouble(3).Should().Be(1.51' "because that is the stored value");                  a.GetInt(4).Should().Be(1' "because that is the converted value");                  a.GetLong(4).Should().Be(1L' "because that is the converted value");                  a.GetDouble(4).Should().Be(1.99' "because that is the stored value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetInt(0).Should().Be(1' "because that is the converted value");                  a.GetLong(0).Should().Be(1L' "because that is the converted value");                  a.GetDouble(0).Should().Be(1.00' "because that is the stored value");                  a.GetInt(1).Should().Be(1' "because that is the converted value");                  a.GetLong(1).Should().Be(1L' "because that is the converted value");                  a.GetDouble(1).Should().Be(1.49' "because that is the stored value");                  a.GetInt(2).Should().Be(1' "because that is the converted value");                  a.GetLong(2).Should().Be(1L' "because that is the converted value");                  a.GetDouble(2).Should().Be(1.50' "because that is the stored value");                  a.GetInt(3).Should().Be(1' "because that is the converted value");                  a.GetLong(3).Should().Be(1L' "because that is the converted value");                  a.GetDouble(3).Should().Be(1.51' "because that is the stored value");                  a.GetInt(4).Should().Be(1' "because that is the converted value");                  a.GetLong(4).Should().Be(1L' "because that is the converted value");                  a.GetDouble(4).Should().Be(1.99' "because that is the stored value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetInt(0).Should().Be(1' "because that is the converted value");                  a.GetLong(0).Should().Be(1L' "because that is the converted value");                  a.GetDouble(0).Should().Be(1.00' "because that is the stored value");                  a.GetInt(1).Should().Be(1' "because that is the converted value");                  a.GetLong(1).Should().Be(1L' "because that is the converted value");                  a.GetDouble(1).Should().Be(1.49' "because that is the stored value");                  a.GetInt(2).Should().Be(1' "because that is the converted value");                  a.GetLong(2).Should().Be(1L' "because that is the converted value");                  a.GetDouble(2).Should().Be(1.50' "because that is the stored value");                  a.GetInt(3).Should().Be(1' "because that is the converted value");                  a.GetLong(3).Should().Be(1L' "because that is the converted value");                  a.GetDouble(3).Should().Be(1.51' "because that is the stored value");                  a.GetInt(4).Should().Be(1' "because that is the converted value");                  a.GetLong(4).Should().Be(1L' "because that is the converted value");                  a.GetDouble(4).Should().Be(1.99' "because that is the stored value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetInt(0).Should().Be(1' "because that is the converted value");                  a.GetLong(0).Should().Be(1L' "because that is the converted value");                  a.GetDouble(0).Should().Be(1.00' "because that is the stored value");                  a.GetInt(1).Should().Be(1' "because that is the converted value");                  a.GetLong(1).Should().Be(1L' "because that is the converted value");                  a.GetDouble(1).Should().Be(1.49' "because that is the stored value");                  a.GetInt(2).Should().Be(1' "because that is the converted value");                  a.GetLong(2).Should().Be(1L' "because that is the converted value");                  a.GetDouble(2).Should().Be(1.50' "because that is the stored value");                  a.GetInt(3).Should().Be(1' "because that is the converted value");                  a.GetLong(3).Should().Be(1L' "because that is the converted value");                  a.GetDouble(3).Should().Be(1.51' "because that is the stored value");                  a.GetInt(4).Should().Be(1' "because that is the converted value");                  a.GetLong(4).Should().Be(1L' "because that is the converted value");                  a.GetDouble(4).Should().Be(1.99' "because that is the stored value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetInt(0).Should().Be(1' "because that is the converted value");                  a.GetLong(0).Should().Be(1L' "because that is the converted value");                  a.GetDouble(0).Should().Be(1.00' "because that is the stored value");                  a.GetInt(1).Should().Be(1' "because that is the converted value");                  a.GetLong(1).Should().Be(1L' "because that is the converted value");                  a.GetDouble(1).Should().Be(1.49' "because that is the stored value");                  a.GetInt(2).Should().Be(1' "because that is the converted value");                  a.GetLong(2).Should().Be(1L' "because that is the converted value");                  a.GetDouble(2).Should().Be(1.50' "because that is the stored value");                  a.GetInt(3).Should().Be(1' "because that is the converted value");                  a.GetLong(3).Should().Be(1L' "because that is the converted value");                  a.GetDouble(3).Should().Be(1.51' "because that is the stored value");                  a.GetInt(4).Should().Be(1' "because that is the converted value");                  a.GetLong(4).Should().Be(1L' "because that is the converted value");                  a.GetDouble(4).Should().Be(1.99' "because that is the stored value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetBoolean,The following statement contains a magic number: array.Count.Should().Be(11' "because that is how many elements were inserted");
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetBoolean,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetBoolean(0).Should().Be(true' "because that is the stored value");                  a.GetBoolean(1).Should().Be(false' "because that is the stored value");                  a.GetBoolean(2).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(3).Should().Be(false' "because zero means false");                  a.GetBoolean(4).Should().Be(true' "because non-zero means true");                  a.GetBoolean(5).Should().Be(true' "because non-zero means true");                  a.GetBoolean(6).Should().Be(true' "because non-zero means true");                  a.GetBoolean(7).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(8).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(9).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(10).Should().Be(true' "because that is the value for non-zero objects");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetBoolean,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetBoolean(0).Should().Be(true' "because that is the stored value");                  a.GetBoolean(1).Should().Be(false' "because that is the stored value");                  a.GetBoolean(2).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(3).Should().Be(false' "because zero means false");                  a.GetBoolean(4).Should().Be(true' "because non-zero means true");                  a.GetBoolean(5).Should().Be(true' "because non-zero means true");                  a.GetBoolean(6).Should().Be(true' "because non-zero means true");                  a.GetBoolean(7).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(8).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(9).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(10).Should().Be(true' "because that is the value for non-zero objects");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetBoolean,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetBoolean(0).Should().Be(true' "because that is the stored value");                  a.GetBoolean(1).Should().Be(false' "because that is the stored value");                  a.GetBoolean(2).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(3).Should().Be(false' "because zero means false");                  a.GetBoolean(4).Should().Be(true' "because non-zero means true");                  a.GetBoolean(5).Should().Be(true' "because non-zero means true");                  a.GetBoolean(6).Should().Be(true' "because non-zero means true");                  a.GetBoolean(7).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(8).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(9).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(10).Should().Be(true' "because that is the value for non-zero objects");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetBoolean,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetBoolean(0).Should().Be(true' "because that is the stored value");                  a.GetBoolean(1).Should().Be(false' "because that is the stored value");                  a.GetBoolean(2).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(3).Should().Be(false' "because zero means false");                  a.GetBoolean(4).Should().Be(true' "because non-zero means true");                  a.GetBoolean(5).Should().Be(true' "because non-zero means true");                  a.GetBoolean(6).Should().Be(true' "because non-zero means true");                  a.GetBoolean(7).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(8).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(9).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(10).Should().Be(true' "because that is the value for non-zero objects");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetBoolean,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetBoolean(0).Should().Be(true' "because that is the stored value");                  a.GetBoolean(1).Should().Be(false' "because that is the stored value");                  a.GetBoolean(2).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(3).Should().Be(false' "because zero means false");                  a.GetBoolean(4).Should().Be(true' "because non-zero means true");                  a.GetBoolean(5).Should().Be(true' "because non-zero means true");                  a.GetBoolean(6).Should().Be(true' "because non-zero means true");                  a.GetBoolean(7).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(8).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(9).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(10).Should().Be(true' "because that is the value for non-zero objects");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetBoolean,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetBoolean(0).Should().Be(true' "because that is the stored value");                  a.GetBoolean(1).Should().Be(false' "because that is the stored value");                  a.GetBoolean(2).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(3).Should().Be(false' "because zero means false");                  a.GetBoolean(4).Should().Be(true' "because non-zero means true");                  a.GetBoolean(5).Should().Be(true' "because non-zero means true");                  a.GetBoolean(6).Should().Be(true' "because non-zero means true");                  a.GetBoolean(7).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(8).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(9).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(10).Should().Be(true' "because that is the value for non-zero objects");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetBoolean,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetBoolean(0).Should().Be(true' "because that is the stored value");                  a.GetBoolean(1).Should().Be(false' "because that is the stored value");                  a.GetBoolean(2).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(3).Should().Be(false' "because zero means false");                  a.GetBoolean(4).Should().Be(true' "because non-zero means true");                  a.GetBoolean(5).Should().Be(true' "because non-zero means true");                  a.GetBoolean(6).Should().Be(true' "because non-zero means true");                  a.GetBoolean(7).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(8).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(9).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(10).Should().Be(true' "because that is the value for non-zero objects");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetBoolean,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetBoolean(0).Should().Be(true' "because that is the stored value");                  a.GetBoolean(1).Should().Be(false' "because that is the stored value");                  a.GetBoolean(2).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(3).Should().Be(false' "because zero means false");                  a.GetBoolean(4).Should().Be(true' "because non-zero means true");                  a.GetBoolean(5).Should().Be(true' "because non-zero means true");                  a.GetBoolean(6).Should().Be(true' "because non-zero means true");                  a.GetBoolean(7).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(8).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(9).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(10).Should().Be(true' "because that is the value for non-zero objects");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetBoolean,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetBoolean(0).Should().Be(true' "because that is the stored value");                  a.GetBoolean(1).Should().Be(false' "because that is the stored value");                  a.GetBoolean(2).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(3).Should().Be(false' "because zero means false");                  a.GetBoolean(4).Should().Be(true' "because non-zero means true");                  a.GetBoolean(5).Should().Be(true' "because non-zero means true");                  a.GetBoolean(6).Should().Be(true' "because non-zero means true");                  a.GetBoolean(7).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(8).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(9).Should().Be(true' "because that is the value for non-zero objects");                  a.GetBoolean(10).Should().Be(true' "because that is the value for non-zero objects");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetDate,The following statement contains a magic number: array.Count.Should().Be(11' "because that is how many elements were inserted");
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetDate,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetDate(0).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(1).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(2).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(3).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(4).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(5).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(6).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(7).Should().Be(ArrayTestDate' "because that is the value that was stored");                  a.GetDate(8).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(9).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(10).Should().Be(DateTimeOffset.MinValue' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetDate,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetDate(0).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(1).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(2).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(3).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(4).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(5).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(6).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(7).Should().Be(ArrayTestDate' "because that is the value that was stored");                  a.GetDate(8).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(9).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(10).Should().Be(DateTimeOffset.MinValue' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetDate,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetDate(0).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(1).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(2).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(3).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(4).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(5).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(6).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(7).Should().Be(ArrayTestDate' "because that is the value that was stored");                  a.GetDate(8).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(9).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(10).Should().Be(DateTimeOffset.MinValue' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetDate,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetDate(0).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(1).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(2).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(3).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(4).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(5).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(6).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(7).Should().Be(ArrayTestDate' "because that is the value that was stored");                  a.GetDate(8).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(9).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(10).Should().Be(DateTimeOffset.MinValue' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetDate,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetDate(0).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(1).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(2).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(3).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(4).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(5).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(6).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(7).Should().Be(ArrayTestDate' "because that is the value that was stored");                  a.GetDate(8).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(9).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(10).Should().Be(DateTimeOffset.MinValue' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetDate,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetDate(0).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(1).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(2).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(3).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(4).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(5).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(6).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(7).Should().Be(ArrayTestDate' "because that is the value that was stored");                  a.GetDate(8).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(9).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(10).Should().Be(DateTimeOffset.MinValue' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetDate,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetDate(0).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(1).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(2).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(3).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(4).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(5).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(6).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(7).Should().Be(ArrayTestDate' "because that is the value that was stored");                  a.GetDate(8).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(9).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(10).Should().Be(DateTimeOffset.MinValue' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetDate,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetDate(0).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(1).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(2).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(3).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(4).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(5).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(6).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(7).Should().Be(ArrayTestDate' "because that is the value that was stored");                  a.GetDate(8).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(9).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(10).Should().Be(DateTimeOffset.MinValue' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetDate,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetDate(0).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(1).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(2).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(3).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(4).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(5).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(6).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(7).Should().Be(ArrayTestDate' "because that is the value that was stored");                  a.GetDate(8).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(9).Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  a.GetDate(10).Should().Be(DateTimeOffset.MinValue' "because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetDictionary,The following statement contains a magic number: array.Count.Should().Be(11' "because that is how many elements were inserted");
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetDictionary,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetDictionary(0).Should().BeNull("because that is the default value");                  a.GetDictionary(1).Should().BeNull("because that is the default value");                  a.GetDictionary(2).Should().BeNull("because that is the default value");                  a.GetDictionary(3).Should().BeNull("because that is the default value");                  a.GetDictionary(4).Should().BeNull("because that is the default value");                  a.GetDictionary(5).Should().BeNull("because that is the default value");                  a.GetDictionary(6).Should().BeNull("because that is the default value");                  a.GetDictionary(7).Should().BeNull("because that is the default value");                  a.GetDictionary(8)                      .ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is the stored value");                  a.GetDictionary(9).Should().BeNull("because that is the default value");                  a.GetDictionary(10).Should().BeNull("because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetDictionary,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetDictionary(0).Should().BeNull("because that is the default value");                  a.GetDictionary(1).Should().BeNull("because that is the default value");                  a.GetDictionary(2).Should().BeNull("because that is the default value");                  a.GetDictionary(3).Should().BeNull("because that is the default value");                  a.GetDictionary(4).Should().BeNull("because that is the default value");                  a.GetDictionary(5).Should().BeNull("because that is the default value");                  a.GetDictionary(6).Should().BeNull("because that is the default value");                  a.GetDictionary(7).Should().BeNull("because that is the default value");                  a.GetDictionary(8)                      .ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is the stored value");                  a.GetDictionary(9).Should().BeNull("because that is the default value");                  a.GetDictionary(10).Should().BeNull("because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetDictionary,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetDictionary(0).Should().BeNull("because that is the default value");                  a.GetDictionary(1).Should().BeNull("because that is the default value");                  a.GetDictionary(2).Should().BeNull("because that is the default value");                  a.GetDictionary(3).Should().BeNull("because that is the default value");                  a.GetDictionary(4).Should().BeNull("because that is the default value");                  a.GetDictionary(5).Should().BeNull("because that is the default value");                  a.GetDictionary(6).Should().BeNull("because that is the default value");                  a.GetDictionary(7).Should().BeNull("because that is the default value");                  a.GetDictionary(8)                      .ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is the stored value");                  a.GetDictionary(9).Should().BeNull("because that is the default value");                  a.GetDictionary(10).Should().BeNull("because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetDictionary,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetDictionary(0).Should().BeNull("because that is the default value");                  a.GetDictionary(1).Should().BeNull("because that is the default value");                  a.GetDictionary(2).Should().BeNull("because that is the default value");                  a.GetDictionary(3).Should().BeNull("because that is the default value");                  a.GetDictionary(4).Should().BeNull("because that is the default value");                  a.GetDictionary(5).Should().BeNull("because that is the default value");                  a.GetDictionary(6).Should().BeNull("because that is the default value");                  a.GetDictionary(7).Should().BeNull("because that is the default value");                  a.GetDictionary(8)                      .ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is the stored value");                  a.GetDictionary(9).Should().BeNull("because that is the default value");                  a.GetDictionary(10).Should().BeNull("because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetDictionary,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetDictionary(0).Should().BeNull("because that is the default value");                  a.GetDictionary(1).Should().BeNull("because that is the default value");                  a.GetDictionary(2).Should().BeNull("because that is the default value");                  a.GetDictionary(3).Should().BeNull("because that is the default value");                  a.GetDictionary(4).Should().BeNull("because that is the default value");                  a.GetDictionary(5).Should().BeNull("because that is the default value");                  a.GetDictionary(6).Should().BeNull("because that is the default value");                  a.GetDictionary(7).Should().BeNull("because that is the default value");                  a.GetDictionary(8)                      .ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is the stored value");                  a.GetDictionary(9).Should().BeNull("because that is the default value");                  a.GetDictionary(10).Should().BeNull("because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetDictionary,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetDictionary(0).Should().BeNull("because that is the default value");                  a.GetDictionary(1).Should().BeNull("because that is the default value");                  a.GetDictionary(2).Should().BeNull("because that is the default value");                  a.GetDictionary(3).Should().BeNull("because that is the default value");                  a.GetDictionary(4).Should().BeNull("because that is the default value");                  a.GetDictionary(5).Should().BeNull("because that is the default value");                  a.GetDictionary(6).Should().BeNull("because that is the default value");                  a.GetDictionary(7).Should().BeNull("because that is the default value");                  a.GetDictionary(8)                      .ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is the stored value");                  a.GetDictionary(9).Should().BeNull("because that is the default value");                  a.GetDictionary(10).Should().BeNull("because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetDictionary,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetDictionary(0).Should().BeNull("because that is the default value");                  a.GetDictionary(1).Should().BeNull("because that is the default value");                  a.GetDictionary(2).Should().BeNull("because that is the default value");                  a.GetDictionary(3).Should().BeNull("because that is the default value");                  a.GetDictionary(4).Should().BeNull("because that is the default value");                  a.GetDictionary(5).Should().BeNull("because that is the default value");                  a.GetDictionary(6).Should().BeNull("because that is the default value");                  a.GetDictionary(7).Should().BeNull("because that is the default value");                  a.GetDictionary(8)                      .ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is the stored value");                  a.GetDictionary(9).Should().BeNull("because that is the default value");                  a.GetDictionary(10).Should().BeNull("because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetDictionary,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetDictionary(0).Should().BeNull("because that is the default value");                  a.GetDictionary(1).Should().BeNull("because that is the default value");                  a.GetDictionary(2).Should().BeNull("because that is the default value");                  a.GetDictionary(3).Should().BeNull("because that is the default value");                  a.GetDictionary(4).Should().BeNull("because that is the default value");                  a.GetDictionary(5).Should().BeNull("because that is the default value");                  a.GetDictionary(6).Should().BeNull("because that is the default value");                  a.GetDictionary(7).Should().BeNull("because that is the default value");                  a.GetDictionary(8)                      .ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is the stored value");                  a.GetDictionary(9).Should().BeNull("because that is the default value");                  a.GetDictionary(10).Should().BeNull("because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetDictionary,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetDictionary(0).Should().BeNull("because that is the default value");                  a.GetDictionary(1).Should().BeNull("because that is the default value");                  a.GetDictionary(2).Should().BeNull("because that is the default value");                  a.GetDictionary(3).Should().BeNull("because that is the default value");                  a.GetDictionary(4).Should().BeNull("because that is the default value");                  a.GetDictionary(5).Should().BeNull("because that is the default value");                  a.GetDictionary(6).Should().BeNull("because that is the default value");                  a.GetDictionary(7).Should().BeNull("because that is the default value");                  a.GetDictionary(8)                      .ToDictionary()                      .Should().BeEquivalentTo(new Dictionary<string' object> {                          ["name"] = "Scott Tiger"                      }' "because that is the stored value");                  a.GetDictionary(9).Should().BeNull("because that is the default value");                  a.GetDictionary(10).Should().BeNull("because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetArray,The following statement contains a magic number: array.Count.Should().Be(11' "because that is how many elements were inserted");
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetArray,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetArray(0).Should().BeNull("because that is the default value");                  a.GetArray(1).Should().BeNull("because that is the default value");                  a.GetArray(2).Should().BeNull("because that is the default value");                  a.GetArray(3).Should().BeNull("because that is the default value");                  a.GetArray(4).Should().BeNull("because that is the default value");                  a.GetArray(5).Should().BeNull("because that is the default value");                  a.GetArray(6).Should().BeNull("because that is the default value");                  a.GetArray(7).Should().BeNull("because that is the default value");                  a.GetArray(8).Should().BeNull("because that is the default value");                  a.GetArray(9).Should().ContainInOrder(new[] {"a"' "b"' "c"}' "because that is the stored value");                  a.GetArray(10).Should().BeNull("because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetArray,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetArray(0).Should().BeNull("because that is the default value");                  a.GetArray(1).Should().BeNull("because that is the default value");                  a.GetArray(2).Should().BeNull("because that is the default value");                  a.GetArray(3).Should().BeNull("because that is the default value");                  a.GetArray(4).Should().BeNull("because that is the default value");                  a.GetArray(5).Should().BeNull("because that is the default value");                  a.GetArray(6).Should().BeNull("because that is the default value");                  a.GetArray(7).Should().BeNull("because that is the default value");                  a.GetArray(8).Should().BeNull("because that is the default value");                  a.GetArray(9).Should().ContainInOrder(new[] {"a"' "b"' "c"}' "because that is the stored value");                  a.GetArray(10).Should().BeNull("because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetArray,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetArray(0).Should().BeNull("because that is the default value");                  a.GetArray(1).Should().BeNull("because that is the default value");                  a.GetArray(2).Should().BeNull("because that is the default value");                  a.GetArray(3).Should().BeNull("because that is the default value");                  a.GetArray(4).Should().BeNull("because that is the default value");                  a.GetArray(5).Should().BeNull("because that is the default value");                  a.GetArray(6).Should().BeNull("because that is the default value");                  a.GetArray(7).Should().BeNull("because that is the default value");                  a.GetArray(8).Should().BeNull("because that is the default value");                  a.GetArray(9).Should().ContainInOrder(new[] {"a"' "b"' "c"}' "because that is the stored value");                  a.GetArray(10).Should().BeNull("because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetArray,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetArray(0).Should().BeNull("because that is the default value");                  a.GetArray(1).Should().BeNull("because that is the default value");                  a.GetArray(2).Should().BeNull("because that is the default value");                  a.GetArray(3).Should().BeNull("because that is the default value");                  a.GetArray(4).Should().BeNull("because that is the default value");                  a.GetArray(5).Should().BeNull("because that is the default value");                  a.GetArray(6).Should().BeNull("because that is the default value");                  a.GetArray(7).Should().BeNull("because that is the default value");                  a.GetArray(8).Should().BeNull("because that is the default value");                  a.GetArray(9).Should().ContainInOrder(new[] {"a"' "b"' "c"}' "because that is the stored value");                  a.GetArray(10).Should().BeNull("because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetArray,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetArray(0).Should().BeNull("because that is the default value");                  a.GetArray(1).Should().BeNull("because that is the default value");                  a.GetArray(2).Should().BeNull("because that is the default value");                  a.GetArray(3).Should().BeNull("because that is the default value");                  a.GetArray(4).Should().BeNull("because that is the default value");                  a.GetArray(5).Should().BeNull("because that is the default value");                  a.GetArray(6).Should().BeNull("because that is the default value");                  a.GetArray(7).Should().BeNull("because that is the default value");                  a.GetArray(8).Should().BeNull("because that is the default value");                  a.GetArray(9).Should().ContainInOrder(new[] {"a"' "b"' "c"}' "because that is the stored value");                  a.GetArray(10).Should().BeNull("because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetArray,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetArray(0).Should().BeNull("because that is the default value");                  a.GetArray(1).Should().BeNull("because that is the default value");                  a.GetArray(2).Should().BeNull("because that is the default value");                  a.GetArray(3).Should().BeNull("because that is the default value");                  a.GetArray(4).Should().BeNull("because that is the default value");                  a.GetArray(5).Should().BeNull("because that is the default value");                  a.GetArray(6).Should().BeNull("because that is the default value");                  a.GetArray(7).Should().BeNull("because that is the default value");                  a.GetArray(8).Should().BeNull("because that is the default value");                  a.GetArray(9).Should().ContainInOrder(new[] {"a"' "b"' "c"}' "because that is the stored value");                  a.GetArray(10).Should().BeNull("because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetArray,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetArray(0).Should().BeNull("because that is the default value");                  a.GetArray(1).Should().BeNull("because that is the default value");                  a.GetArray(2).Should().BeNull("because that is the default value");                  a.GetArray(3).Should().BeNull("because that is the default value");                  a.GetArray(4).Should().BeNull("because that is the default value");                  a.GetArray(5).Should().BeNull("because that is the default value");                  a.GetArray(6).Should().BeNull("because that is the default value");                  a.GetArray(7).Should().BeNull("because that is the default value");                  a.GetArray(8).Should().BeNull("because that is the default value");                  a.GetArray(9).Should().ContainInOrder(new[] {"a"' "b"' "c"}' "because that is the stored value");                  a.GetArray(10).Should().BeNull("because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetArray,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetArray(0).Should().BeNull("because that is the default value");                  a.GetArray(1).Should().BeNull("because that is the default value");                  a.GetArray(2).Should().BeNull("because that is the default value");                  a.GetArray(3).Should().BeNull("because that is the default value");                  a.GetArray(4).Should().BeNull("because that is the default value");                  a.GetArray(5).Should().BeNull("because that is the default value");                  a.GetArray(6).Should().BeNull("because that is the default value");                  a.GetArray(7).Should().BeNull("because that is the default value");                  a.GetArray(8).Should().BeNull("because that is the default value");                  a.GetArray(9).Should().ContainInOrder(new[] {"a"' "b"' "c"}' "because that is the stored value");                  a.GetArray(10).Should().BeNull("because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetArray,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  a.GetArray(0).Should().BeNull("because that is the default value");                  a.GetArray(1).Should().BeNull("because that is the default value");                  a.GetArray(2).Should().BeNull("because that is the default value");                  a.GetArray(3).Should().BeNull("because that is the default value");                  a.GetArray(4).Should().BeNull("because that is the default value");                  a.GetArray(5).Should().BeNull("because that is the default value");                  a.GetArray(6).Should().BeNull("because that is the default value");                  a.GetArray(7).Should().BeNull("because that is the default value");                  a.GetArray(8).Should().BeNull("because that is the default value");                  a.GetArray(9).Should().ContainInOrder(new[] {"a"' "b"' "c"}' "because that is the stored value");                  a.GetArray(10).Should().BeNull("because that is the default value");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetArray2,The following statement contains a magic number: array.GetArray(2).Should().BeNull();
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetArray2,The following statement contains a magic number: array.GetArray(3).Should().NotBeNull();
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestGetArray2,The following statement contains a magic number: var nestedArray = array.GetArray(3);
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetNestedArray,The following statement contains a magic number: SaveArray(array1' doc' "array"' a =>              {                  var a1 = a;                  a1.Count.Should().Be(1' "because this array has one element");                  var a2 = a1.GetArray(0);                  a2.Count.Should().Be(1' "because this array has one element");                  var a3 = a2.GetArray(0);                  a3.Count.Should().Be(3' "because this array has three elements");                  a3.Should().ContainInOrder(new[] {"a"' "b"' "c"}' "because otherwise the contents are incorrect");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetNull,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(4);                      array.GetValue(0).Should().BeNull();                      array.GetValue(1).Should().BeNull();                      array.GetValue(2).Should().BeNull();                      array.GetValue(3).Should().BeNull();                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetNull,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(4);                      array.GetValue(0).Should().BeNull();                      array.GetValue(1).Should().BeNull();                      array.GetValue(2).Should().BeNull();                      array.GetValue(3).Should().BeNull();                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetNull,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(4);                      array.GetValue(0).Should().BeNull();                      array.GetValue(1).Should().BeNull();                      array.GetValue(2).Should().BeNull();                      array.GetValue(3).Should().BeNull();                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestReplaceArray,The following statement contains a magic number: array1.Count.Should().Be(3' "because the array has three elements inside");
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestReplaceArray,The following statement contains a magic number: array2.Count.Should().Be(3' "because the array has three elements inside");
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestReplaceArray,The following statement contains a magic number: array1.Count.Should().Be(4' "because another element was added");
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestReplaceArray,The following statement contains a magic number: array2.Count.Should().Be(3' "because array1 should not affect array2");
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestReplaceArray,The following statement contains a magic number: SaveDocument(doc' d =>              {                  var savedArray = d.GetArray("array");                  savedArray.Count.Should().Be(3' "because there are still just three items");                  savedArray.Should().ContainInOrder(new[] { "x"' "y"' "z" }' "because otherwise the contents are incorrect");              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestReplaceArrayDifferentType,The following statement contains a magic number: array1.Count.Should().Be(3' "because the array has three elements inside");
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestReplaceArrayDifferentType,The following statement contains a magic number: array1.Count.Should().Be(4' "because another element was added");
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestEnumeratingArray,The following statement contains a magic number: i < 20
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestEnumeratingArray,The following statement contains a magic number: array.AddInt(20).AddInt(21);
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestEnumeratingArray,The following statement contains a magic number: array.AddInt(20).AddInt(21);
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestEnumeratingArray,The following statement contains a magic number: SaveArray(array' doc' "array"' a =>              {                  result = new List<object>();                  result.AddRange(a);                  for (int i = 0; i < 20; i++) {                      Convert.ToInt32(result[i]).Should().Be(Convert.ToInt32(content[i])'                          $"because that is the correct entry for index {i}");                  }              });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddInt,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(3);                      array.GetInt(0).Should().Be(0);                      array.GetInt(1).Should().Be(Int32.MaxValue);                      array.GetInt(2).Should().Be(Int32.MinValue);                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddInt,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(3);                      array.GetInt(0).Should().Be(0);                      array.GetInt(1).Should().Be(Int32.MaxValue);                      array.GetInt(2).Should().Be(Int32.MinValue);                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetInt,The following statement contains a magic number: mArray.SetInt(2' 0);
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetInt,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(3);                      array.GetInt(2).Should().Be(0);                      array.GetInt(0).Should().Be(Int32.MaxValue);                      array.GetInt(1).Should().Be(Int32.MinValue);                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetInt,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(3);                      array.GetInt(2).Should().Be(0);                      array.GetInt(0).Should().Be(Int32.MaxValue);                      array.GetInt(1).Should().Be(Int32.MinValue);                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertInt,The following statement contains a magic number: mArray.AddInt(10);
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertInt,The following statement contains a magic number: mArray.InsertInt(2' Int32.MinValue);
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertInt,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(4);                      array.GetInt(0).Should().Be(0);                      array.GetInt(1).Should().Be(Int32.MaxValue);                      array.GetInt(2).Should().Be(Int32.MinValue);                      array.GetInt(3).Should().Be(10);                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertInt,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(4);                      array.GetInt(0).Should().Be(0);                      array.GetInt(1).Should().Be(Int32.MaxValue);                      array.GetInt(2).Should().Be(Int32.MinValue);                      array.GetInt(3).Should().Be(10);                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertInt,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(4);                      array.GetInt(0).Should().Be(0);                      array.GetInt(1).Should().Be(Int32.MaxValue);                      array.GetInt(2).Should().Be(Int32.MinValue);                      array.GetInt(3).Should().Be(10);                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertInt,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(4);                      array.GetInt(0).Should().Be(0);                      array.GetInt(1).Should().Be(Int32.MaxValue);                      array.GetInt(2).Should().Be(Int32.MinValue);                      array.GetInt(3).Should().Be(10);                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddLong,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(3);                      array.GetLong(0).Should().Be(0);                      array.GetLong(1).Should().Be(Int64.MaxValue);                      array.GetLong(2).Should().Be(Int64.MinValue);                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddLong,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(3);                      array.GetLong(0).Should().Be(0);                      array.GetLong(1).Should().Be(Int64.MaxValue);                      array.GetLong(2).Should().Be(Int64.MinValue);                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetLong,The following statement contains a magic number: mArray.SetLong(2' 0);
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetLong,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(3);                      array.GetLong(2).Should().Be(0);                      array.GetLong(0).Should().Be(Int64.MaxValue);                      array.GetLong(1).Should().Be(Int64.MinValue);                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetLong,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(3);                      array.GetLong(2).Should().Be(0);                      array.GetLong(0).Should().Be(Int64.MaxValue);                      array.GetLong(1).Should().Be(Int64.MinValue);                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertLong,The following statement contains a magic number: mArray.AddLong(10);
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertLong,The following statement contains a magic number: mArray.InsertLong(2' Int64.MinValue);
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertLong,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(4);                      array.GetLong(0).Should().Be(0);                      array.GetLong(1).Should().Be(Int64.MaxValue);                      array.GetLong(2).Should().Be(Int64.MinValue);                      array.GetLong(3).Should().Be(10);                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertLong,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(4);                      array.GetLong(0).Should().Be(0);                      array.GetLong(1).Should().Be(Int64.MaxValue);                      array.GetLong(2).Should().Be(Int64.MinValue);                      array.GetLong(3).Should().Be(10);                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertLong,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(4);                      array.GetLong(0).Should().Be(0);                      array.GetLong(1).Should().Be(Int64.MaxValue);                      array.GetLong(2).Should().Be(Int64.MinValue);                      array.GetLong(3).Should().Be(10);                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertLong,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(4);                      array.GetLong(0).Should().Be(0);                      array.GetLong(1).Should().Be(Int64.MaxValue);                      array.GetLong(2).Should().Be(Int64.MinValue);                      array.GetLong(3).Should().Be(10);                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddFloat,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(3);                      array.GetFloat(0).Should().Be(0);                      array.GetFloat(1).Should().Be(Single.MaxValue);                      array.GetFloat(2).Should().Be(Single.MinValue);                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddFloat,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(3);                      array.GetFloat(0).Should().Be(0);                      array.GetFloat(1).Should().Be(Single.MaxValue);                      array.GetFloat(2).Should().Be(Single.MinValue);                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetFloat,The following statement contains a magic number: mArray.SetFloat(2' 0);
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetFloat,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(3);                      array.GetFloat(2).Should().Be(0);                      array.GetFloat(0).Should().Be(Single.MaxValue);                      array.GetFloat(1).Should().Be(Single.MinValue);                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetFloat,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(3);                      array.GetFloat(2).Should().Be(0);                      array.GetFloat(0).Should().Be(Single.MaxValue);                      array.GetFloat(1).Should().Be(Single.MinValue);                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertFloat,The following statement contains a magic number: mArray.AddFloat(10);
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertFloat,The following statement contains a magic number: mArray.InsertFloat(2' Single.MinValue);
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertFloat,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(4);                      array.GetFloat(0).Should().Be(0);                      array.GetFloat(1).Should().Be(Single.MaxValue);                      array.GetFloat(2).Should().Be(Single.MinValue);                      array.GetFloat(3).Should().Be(10);                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertFloat,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(4);                      array.GetFloat(0).Should().Be(0);                      array.GetFloat(1).Should().Be(Single.MaxValue);                      array.GetFloat(2).Should().Be(Single.MinValue);                      array.GetFloat(3).Should().Be(10);                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertFloat,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(4);                      array.GetFloat(0).Should().Be(0);                      array.GetFloat(1).Should().Be(Single.MaxValue);                      array.GetFloat(2).Should().Be(Single.MinValue);                      array.GetFloat(3).Should().Be(10);                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertFloat,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(4);                      array.GetFloat(0).Should().Be(0);                      array.GetFloat(1).Should().Be(Single.MaxValue);                      array.GetFloat(2).Should().Be(Single.MinValue);                      array.GetFloat(3).Should().Be(10);                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddDouble,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(3);                      array.GetDouble(0).Should().Be(0);                      array.GetDouble(1).Should().Be(Double.MaxValue);                      array.GetDouble(2).Should().Be(Double.MinValue);                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddDouble,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(3);                      array.GetDouble(0).Should().Be(0);                      array.GetDouble(1).Should().Be(Double.MaxValue);                      array.GetDouble(2).Should().Be(Double.MinValue);                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetDouble,The following statement contains a magic number: mArray.SetDouble(2' 0);
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetDouble,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(3);                      array.GetDouble(2).Should().Be(0);                      array.GetDouble(0).Should().Be(Double.MaxValue);                      array.GetDouble(1).Should().Be(Double.MinValue);                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetDouble,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(3);                      array.GetDouble(2).Should().Be(0);                      array.GetDouble(0).Should().Be(Double.MaxValue);                      array.GetDouble(1).Should().Be(Double.MinValue);                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertDouble,The following statement contains a magic number: mArray.AddDouble(10);
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertDouble,The following statement contains a magic number: mArray.InsertDouble(2' Double.MinValue);
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertDouble,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(4);                      array.GetDouble(0).Should().Be(0);                      array.GetDouble(1).Should().Be(Double.MaxValue);                      array.GetDouble(2).Should().Be(Double.MinValue);                      array.GetDouble(3).Should().Be(10);                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertDouble,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(4);                      array.GetDouble(0).Should().Be(0);                      array.GetDouble(1).Should().Be(Double.MaxValue);                      array.GetDouble(2).Should().Be(Double.MinValue);                      array.GetDouble(3).Should().Be(10);                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertDouble,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(4);                      array.GetDouble(0).Should().Be(0);                      array.GetDouble(1).Should().Be(Double.MaxValue);                      array.GetDouble(2).Should().Be(Double.MinValue);                      array.GetDouble(3).Should().Be(10);                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertDouble,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(4);                      array.GetDouble(0).Should().Be(0);                      array.GetDouble(1).Should().Be(Double.MaxValue);                      array.GetDouble(2).Should().Be(Double.MinValue);                      array.GetDouble(3).Should().Be(10);                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddString,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(3);                      array.GetString(0).Should().Be("");                      array.GetString(1).Should().Be("Hello");                      array.GetString(2).Should().Be("World");                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddString,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(3);                      array.GetString(0).Should().Be("");                      array.GetString(1).Should().Be("Hello");                      array.GetString(2).Should().Be("World");                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetString,The following statement contains a magic number: mArray.SetString(2' "");
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetString,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(3);                      array.GetString(2).Should().Be("");                      array.GetString(0).Should().Be("Hello");                      array.GetString(1).Should().Be("World");                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetString,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(3);                      array.GetString(2).Should().Be("");                      array.GetString(0).Should().Be("Hello");                      array.GetString(1).Should().Be("World");                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertString,The following statement contains a magic number: mArray.InsertString(2' "!");
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertString,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(4);                      array.GetString(0).Should().Be("Hello");                      array.GetString(1).Should().Be("World");                      array.GetString(2).Should().Be("!");                      array.GetString(3).Should().Be("");                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertString,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(4);                      array.GetString(0).Should().Be("Hello");                      array.GetString(1).Should().Be("World");                      array.GetString(2).Should().Be("!");                      array.GetString(3).Should().Be("");                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertString,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(4);                      array.GetString(0).Should().Be("Hello");                      array.GetString(1).Should().Be("World");                      array.GetString(2).Should().Be("!");                      array.GetString(3).Should().Be("");                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestAddBoolean,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(2);                      array.GetBoolean(0).Should().BeTrue();                      array.GetBoolean(1).Should().BeFalse();                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestSetBoolean,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(2);                      array.GetBoolean(1).Should().BeTrue();                      array.GetBoolean(0).Should().BeFalse();                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertBoolean,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(4);                      array.GetBoolean(0).Should().BeTrue();                      array.GetBoolean(1).Should().BeFalse();                      array.GetBoolean(2).Should().BeFalse();                      array.GetBoolean(3).Should().BeTrue();                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertBoolean,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(4);                      array.GetBoolean(0).Should().BeTrue();                      array.GetBoolean(1).Should().BeFalse();                      array.GetBoolean(2).Should().BeFalse();                      array.GetBoolean(3).Should().BeTrue();                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestInsertBoolean,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("array").Should().BeTrue();                      var array = doc.GetArray("array");                      array.Should().NotBeNull();                      array.Count.Should().Be(4);                      array.GetBoolean(0).Should().BeTrue();                      array.GetBoolean(1).Should().BeFalse();                      array.GetBoolean(2).Should().BeFalse();                      array.GetBoolean(3).Should().BeTrue();                  });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestTypes,The following statement contains a magic number: array.AddValue(1.1f);
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestTypes,The following statement contains a magic number: array.AddValue(1.1);
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestTypes,The following statement contains a magic number: array.AddValue(new[] { 1' 2' 3' });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,TestTypes,The following statement contains a magic number: array.AddValue(new[] { 1' 2' 3' });
Magic Number,Test,ArrayTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ArrayTest.cs,CreateArrayOfAllTypes,The following statement contains a magic number: var array = new List<object> {                  true'                  false'                  "string"'                  0'                  1'                  -1'                  1.1'                  ArrayTestDate              };
Magic Number,Test,BlobTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\BlobTest.cs,TestBlobStream,The following statement contains a magic number: stream.Invoking(s => s.Position = 10).Should().Throw<NotSupportedException>();
Magic Number,Test,BlobTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\BlobTest.cs,TestBlobStream,The following statement contains a magic number: stream.Invoking(s => s.SetLength(100)).Should().Throw<NotSupportedException>();
Magic Number,Test,BlobTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\BlobTest.cs,TestBlobStream,The following statement contains a magic number: stream.Invoking(s => s.SetLength(100)).Should().Throw<NotSupportedException>();
Magic Number,Test,BlobTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\BlobTest.cs,TestBlobStream,The following statement contains a magic number: stream.Seek(2' SeekOrigin.Begin);
Magic Number,Test,BlobTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\BlobTest.cs,TestBlobStream,The following statement contains a magic number: stream.Position.Should().Be(2);
Magic Number,Test,BlobTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\BlobTest.cs,TestBlobStream,The following statement contains a magic number: stream.ReadByte().Should().Be(bytes[2]);
Magic Number,Test,BlobTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\BlobTest.cs,TestBlobStream,The following statement contains a magic number: stream.Position.Should().Be(4);
Magic Number,Test,BlobTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\BlobTest.cs,TestBlobStream,The following statement contains a magic number: stream.ReadByte().Should().Be(bytes[4]);
Magic Number,Test,BlobTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\BlobTest.cs,TestBlobStream,The following statement contains a magic number: stream.Seek(-2' SeekOrigin.End);
Magic Number,Test,BlobTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\BlobTest.cs,TestBlobStream,The following statement contains a magic number: stream.Position.Should().Be(bytes.Length - 2);
Magic Number,Test,BlobTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\BlobTest.cs,TestBlobStream,The following statement contains a magic number: stream.ReadByte().Should().Be(bytes[bytes.Length - 2]);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestEncryptionKey,The following statement contains a magic number: Action badAction = (() => new EncryptionKey(new byte[] {1' 2' 3' 4}));
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestEncryptionKey,The following statement contains a magic number: Action badAction = (() => new EncryptionKey(new byte[] {1' 2' 3' 4}));
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestEncryptionKey,The following statement contains a magic number: Action badAction = (() => new EncryptionKey(new byte[] {1' 2' 3' 4}));
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestEncryptionKey,The following statement contains a magic number: badAction = (() => new EncryptionKey("foo"' new byte[] {1}' 200));
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestEncryptionKey,The following statement contains a magic number: badAction = (() => new EncryptionKey("foo"' new byte[] {1' 2' 3' 4' 5}' 5));
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestEncryptionKey,The following statement contains a magic number: badAction = (() => new EncryptionKey("foo"' new byte[] {1' 2' 3' 4' 5}' 5));
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestEncryptionKey,The following statement contains a magic number: badAction = (() => new EncryptionKey("foo"' new byte[] {1' 2' 3' 4' 5}' 5));
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestEncryptionKey,The following statement contains a magic number: badAction = (() => new EncryptionKey("foo"' new byte[] {1' 2' 3' 4' 5}' 5));
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestEncryptionKey,The following statement contains a magic number: badAction = (() => new EncryptionKey("foo"' new byte[] {1' 2' 3' 4' 5}' 5));
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestReadOnlyArray,The following statement contains a magic number: var nestedArray = new[] {1L' 2L' 3L};
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestReadOnlyArray,The following statement contains a magic number: var nestedArray = new[] {1L' 2L' 3L};
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestReadOnlyArray,The following statement contains a magic number: deserializedArray.GetArray(2).Should().Equal(1L' 2L' 3L);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestReadOnlyArray,The following statement contains a magic number: deserializedArray.GetArray(2).Should().Equal(1L' 2L' 3L);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestReadOnlyArray,The following statement contains a magic number: deserializedArray.GetArray(2).Should().Equal(1L' 2L' 3L);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestReadOnlyArray,The following statement contains a magic number: deserializedArray.GetArray(3).Should().BeNull();
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestReadOnlyArray,The following statement contains a magic number: deserializedArray.GetDate(3).Should().Be(now);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestReadOnlyArray,The following statement contains a magic number: deserializedArray.GetDate(4).Should().Be(DateTimeOffset.MinValue);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestReadOnlyArray,The following statement contains a magic number: deserializedArray.GetString(2).Should().BeNull();
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestReadOnlyArray,The following statement contains a magic number: deserializedArray.GetDictionary(4).Should().BeEquivalentTo(nestedDict);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestReadOnlyArray,The following statement contains a magic number: list[2].Should().BeAssignableTo<IList<object>>();
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestReadOnlyArray,The following statement contains a magic number: list[4].Should().BeAssignableTo<IDictionary<string' object>>();
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestArrayObject,The following statement contains a magic number: ao.AddFloat(1.1f);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestArrayObject,The following statement contains a magic number: var arr = new MutableArrayObject(new[] {5' 4' 3' 2' 1});
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestArrayObject,The following statement contains a magic number: var arr = new MutableArrayObject(new[] {5' 4' 3' 2' 1});
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestArrayObject,The following statement contains a magic number: var arr = new MutableArrayObject(new[] {5' 4' 3' 2' 1});
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestArrayObject,The following statement contains a magic number: var arr = new MutableArrayObject(new[] {5' 4' 3' 2' 1});
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestArrayObject,The following statement contains a magic number: ao.InsertInt(0' 42);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestArrayObject,The following statement contains a magic number: ao.InsertFloat(0' 3.14f);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestArrayObject,The following statement contains a magic number: ao.Should().Equal(dict' arr' nowStr' blob' true' Math.PI' 3.14f' Int64.MaxValue' 42' 1.1f' blob'                  nowStr'                  dict);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestArrayObject,The following statement contains a magic number: ao.Should().Equal(dict' arr' nowStr' blob' true' Math.PI' 3.14f' Int64.MaxValue' 42' 1.1f' blob'                  nowStr'                  dict);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestArrayObject,The following statement contains a magic number: ao.Should().Equal(dict' arr' nowStr' blob' true' Math.PI' 3.14f' Int64.MaxValue' 42' 1.1f' blob'                  nowStr'                  dict);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestArrayObject,The following statement contains a magic number: ao.SetFloat(1' 3.14f);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestArrayObject,The following statement contains a magic number: ao.SetDouble(2' Math.PI);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestArrayObject,The following statement contains a magic number: ao.SetBoolean(3' true);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestArrayObject,The following statement contains a magic number: ao.SetBlob(4' blob);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestArrayObject,The following statement contains a magic number: ao.SetArray(5' arr);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestArrayObject,The following statement contains a magic number: ao.SetDictionary(6' dict);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestArrayObject,The following statement contains a magic number: ao.SetDate(7' now);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestArrayObject,The following statement contains a magic number: ao.Should().Equal(Int64.MaxValue' 3.14f' Math.PI' true' blob' arr' dict' nowStr' 42' 1.1f' blob'                  nowStr'                  dict);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestArrayObject,The following statement contains a magic number: ao.Should().Equal(Int64.MaxValue' 3.14f' Math.PI' true' blob' arr' dict' nowStr' 42' 1.1f' blob'                  nowStr'                  dict);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestArrayObject,The following statement contains a magic number: ao.Should().Equal(Int64.MaxValue' 3.14f' Math.PI' true' blob' arr' dict' nowStr' 42' 1.1f' blob'                  nowStr'                  dict);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestReadOnlyDictionary,The following statement contains a magic number: var nestedArray = new[] {1L' 2L' 3L};
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestReadOnlyDictionary,The following statement contains a magic number: var nestedArray = new[] {1L' 2L' 3L};
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestReadOnlyDictionary,The following statement contains a magic number: deserializedDict.GetArray("array").Should().Equal(1L' 2L' 3L);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestReadOnlyDictionary,The following statement contains a magic number: deserializedDict.GetArray("array").Should().Equal(1L' 2L' 3L);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestReadOnlyDictionary,The following statement contains a magic number: dict["array"].As<IList>().Should().Equal(1L' 2L' 3L);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestReadOnlyDictionary,The following statement contains a magic number: dict["array"].As<IList>().Should().Equal(1L' 2L' 3L);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestNewlineInHeader,The following statement contains a magic number: dataString.IndexOf("\r\n\r\n").Should().Be(dataString.Length - 4);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestGettingPortFromHTTPLogic,The following statement contains a magic number: logic.Port.Should().Be(59840);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestFLEncode,The following statement contains a magic number: TestRoundTrip(42);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestFLEncode,The following statement contains a magic number: TestRoundTrip(3.14f);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestRecursiveEqual,The following statement contains a magic number: var dict = new Dictionary<string' object>              {                  ["string_val"] = "string"'                  ["numbers"] = numbers'                  ["dict"] = new MutableDictionaryObject().SetString("foo"' "bar")'                  ["array"] = new MutableArrayObject().AddInt(42)              };
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestRecursiveEqual,The following statement contains a magic number: 42.RecursiveEqual(num).Should().BeTrue();
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestRecursiveEqual,The following statement contains a magic number: new object[] { (sbyte) 42' (short) 42' 42L }
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestRecursiveEqual,The following statement contains a magic number: new object[] { (sbyte) 42' (short) 42' 42L }
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestRecursiveEqual,The following statement contains a magic number: new object[] { (sbyte) 42' (short) 42' 42L }
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestRecursiveEqual,The following statement contains a magic number: 42U.RecursiveEqual(num).Should().BeTrue();
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestRecursiveEqual,The following statement contains a magic number: new object[] { (byte) 42' (ushort) 42' 42UL }
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestRecursiveEqual,The following statement contains a magic number: new object[] { (byte) 42' (ushort) 42' 42UL }
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestRecursiveEqual,The following statement contains a magic number: new object[] { (byte) 42' (ushort) 42' 42UL }
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestRecursiveEqual,The following statement contains a magic number: 3.14m.RecursiveEqual(num).Should().BeTrue();
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestRecursiveEqual,The following statement contains a magic number: new object[] { 3.14f' 3.14 }
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestRecursiveEqual,The following statement contains a magic number: new object[] { 3.14f' 3.14 }
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestSerialQueue,The following statement contains a magic number: await Task.Delay(250);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestSerialQueue,The following statement contains a magic number: await Task.Delay(800);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestSerialQueue,The following statement contains a magic number: var t = queue.DispatchAfter(() => Volatile.Read(ref testBool)' TimeSpan.FromMilliseconds(500));
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestAutoconvertJson,The following statement contains a magic number: converted["level2"]["list"][1].Double.Should().Be(3.14);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestAutoconvertJson,The following statement contains a magic number: converted["level2"]["list"][2].String.Should().Be("s");
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestCreateExceptions,The following statement contains a magic number: sqliteException = new CouchbaseSQLiteException(999991);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestCreateExceptions,The following statement contains a magic number: sqliteException = new CouchbaseSQLiteException(999991' "new sql lite exception");
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestCreateExceptions,The following statement contains a magic number: var webSocketException = CouchbaseException.Create(new C4Error(C4ErrorDomain.WebSocketDomain' 1003)) as CouchbaseWebsocketException;
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestCreateExceptions,The following statement contains a magic number: webSocketException = new CouchbaseWebsocketException(10404);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestCreateExceptions,The following statement contains a magic number: webSocketException = new CouchbaseWebsocketException(10404' "HTTP Not Found");
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestCreateExceptions,The following statement contains a magic number: posixException = new CouchbasePosixException(999992);
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestCreateExceptions,The following statement contains a magic number: posixException = new CouchbasePosixException(999992' "new posix lite exception");
Magic Number,Test,CSharpTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\CSharpTest.cs,TestCBDebugItemsMustNotBeNull,The following statement contains a magic number: items.Count().Should().Be(2);
Magic Number,Test,DatabaseEncryptionTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseEncryptionTest.cs,TestCompactEncryptedDatabase,The following statement contains a magic number: doc.SetInt("answer"' 84);
Magic Number,Test,DatabaseEncryptionTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseEncryptionTest.cs,TestCompactEncryptedDatabase,The following statement contains a magic number: doc.SetInt("answer"' 85);
Magic Number,Test,DatabaseEncryptionTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseEncryptionTest.cs,Rekey,The following statement contains a magic number: seekrit.InBatch(() =>                  {                      for (var i = 0; i < 100; i++) {                          using (var doc = new MutableDocument(new Dictionary<string' object>                              { ["seq"] = i })) {                              seekrit.Save(doc);                          }                      }                  });
Magic Number,Test,DatabaseEncryptionTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseEncryptionTest.cs,Rekey,The following statement contains a magic number: i.Should().Be(100);
Magic Number,Test,DatabaseEncryptionTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseEncryptionTest.cs,TestEncryptedBlobsInternal,The following statement contains a magic number: var fileName = blob.Digest.Substring(5).Replace("/"' "_");
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestSaveAndGetMultipleDocs,The following statement contains a magic number: const int NumDocs = 10;
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestGetExistingDocWithIDInBatch,The following statement contains a magic number: var docs = CreateDocs(10);
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestGetExistingDocWithIDInBatch,The following statement contains a magic number: Db.InBatch(() => ValidateDocs(10));
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestSaveDoc,The following statement contains a magic number: doc.SetInt("key"' 2);
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestSaveDoc,The following statement contains a magic number: VerifyGetDocument(docID' 2);
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestSaveDocInDifferentDBInstance,The following statement contains a magic number: doc.SetInt("key"' 2);
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestSaveDocInDifferentDB,The following statement contains a magic number: doc.SetInt("key"' 2);
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestSaveInBatch,The following statement contains a magic number: Db.InBatch(() => CreateDocs(10));
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestSaveInBatch,The following statement contains a magic number: Db.Count.Should().Be(10UL' "because 10 documents were added");
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestSaveInBatch,The following statement contains a magic number: ValidateDocs(10);
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestConflictHandlerWithMultipleIncomingConflicts,The following statement contains a magic number: Task task2 = Task.Factory.StartNew(() => {                      doc1a.SetString("name"' "Kim");                      Db.Save(doc1a' (updated' current) => {                          waitObj.Set();                          Thread.Sleep(250);                          waitObj.WaitOne(TimeSpan.FromMilliseconds(250));                          return false;                      });                      waitObj.Set();                      Thread.Sleep(250);                  });
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestConflictHandlerWithMultipleIncomingConflicts,The following statement contains a magic number: Task task2 = Task.Factory.StartNew(() => {                      doc1a.SetString("name"' "Kim");                      Db.Save(doc1a' (updated' current) => {                          waitObj.Set();                          Thread.Sleep(250);                          waitObj.WaitOne(TimeSpan.FromMilliseconds(250));                          return false;                      });                      waitObj.Set();                      Thread.Sleep(250);                  });
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestConflictHandlerWithMultipleIncomingConflicts,The following statement contains a magic number: Task task2 = Task.Factory.StartNew(() => {                      doc1a.SetString("name"' "Kim");                      Db.Save(doc1a' (updated' current) => {                          waitObj.Set();                          Thread.Sleep(250);                          waitObj.WaitOne(TimeSpan.FromMilliseconds(250));                          return false;                      });                      waitObj.Set();                      Thread.Sleep(250);                  });
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestConflictHandlerWithMultipleIncomingConflicts,The following statement contains a magic number: waitObj.WaitOne(TimeSpan.FromMilliseconds(250));
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestConflictHandlerWithMultipleIncomingConflicts,The following statement contains a magic number: Thread.Sleep(250);
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestConflictHandlerWithMultipleIncomingConflicts,The following statement contains a magic number: waitObj.WaitOne(TimeSpan.FromMilliseconds(250));
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestDeleteDocInBatch,The following statement contains a magic number: CreateDocs(10);
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestDeleteDocInBatch,The following statement contains a magic number: Db.InBatch(() =>              {                  for (int i = 0; i < 10; i++) {                      var docID = $"doc_{i:D3}";                      var doc = Db.GetDocument(docID);                      Db.Delete(doc);                      Db.Count.Should().Be(9UL - (ulong)i' "because the document count should be accurate after deletion");                  }              });
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestDeleteDocInBatch,The following statement contains a magic number: Db.InBatch(() =>              {                  for (int i = 0; i < 10; i++) {                      var docID = $"doc_{i:D3}";                      var doc = Db.GetDocument(docID);                      Db.Delete(doc);                      Db.Count.Should().Be(9UL - (ulong)i' "because the document count should be accurate after deletion");                  }              });
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestPurgeDocInBatch,The following statement contains a magic number: CreateDocs(10);
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestPurgeDocInBatch,The following statement contains a magic number: Db.InBatch(() =>              {                  for (int i = 0; i < 10; i++) {                      var docID = $"doc_{i:D3}";                      var doc = Db.GetDocument(docID);                      PurgeDocAndVerify(doc);                      Db.Count.Should().Be(9UL - (ulong)i' "because the document count should be accurate after deletion");                  }              });
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestPurgeDocInBatch,The following statement contains a magic number: Db.InBatch(() =>              {                  for (int i = 0; i < 10; i++) {                      var docID = $"doc_{i:D3}";                      var doc = Db.GetDocument(docID);                      PurgeDocAndVerify(doc);                      Db.Count.Should().Be(9UL - (ulong)i' "because the document count should be accurate after deletion");                  }              });
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestClose,The following statement contains a magic number: Thread.Sleep(1500);
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestCloseThenAccessDoc,The following statement contains a magic number: updatedDoc.SetInt("key"' 2);
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestCloseThenAccessBlob,The following statement contains a magic number: blob.Length.Should().Be(5' "because the blob's metadata should still be accessible");
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestDeleteThenAccessDoc,The following statement contains a magic number: updatedDoc.SetInt("key"' 2);
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestCompact,The following statement contains a magic number: var docs = CreateDocs(20);
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestCompact,The following statement contains a magic number: Db.InBatch(() =>              {                  foreach (var doc in docs) {                      var docToUse = doc;                      for (int i = 0; i < 25; i++) {                          var mDoc = docToUse.ToMutable();                          mDoc.SetInt("number"' i);                          SaveDocument(mDoc);                      };                  }              });
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestCompact,The following statement contains a magic number: Db.Count.Should().Be(20' "because that is the number of documents that were added");
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestCompact,The following statement contains a magic number: atts.Should().HaveCount(20' "because there should be one blob per document");
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestCopy,The following statement contains a magic number: i < 10
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestCopy,The following statement contains a magic number: nudb.Count.Should().Be(10' "because it is a copy of another database with 10 items");
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestDeleteAndOpenDB,The following statement contains a magic number: database2.InBatch(() =>                      {                          for (var i = 0; i < 100; i++) {                              using (var doc = new MutableDocument()) {                                  doc.SetInt("index"' i);                                  for (var j = 0; j < 10; j++) {                                      doc.SetInt($"item_{j}"' j);                                  }                                    database2.Save(doc);                              }                          }                      });
Magic Number,Test,DatabaseTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DatabaseTest.cs,TestDeleteAndOpenDB,The following statement contains a magic number: database2.InBatch(() =>                      {                          for (var i = 0; i < 100; i++) {                              using (var doc = new MutableDocument()) {                                  doc.SetInt("index"' i);                                  for (var j = 0; j < 10; j++) {                                      doc.SetInt($"item_{j}"' j);                                  }                                    database2.Save(doc);                              }                          }                      });
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestSetNull,The following statement contains a magic number: SaveDocument(mDoc' doc =>                  {                      doc.Count.Should().Be(1);                      doc.Contains("dict").Should().BeTrue();                      var d = doc.GetDictionary("dict");                      d.Should().NotBeNull();                      d.Count.Should().Be(4);                      d.Contains("obj-null").Should().BeTrue();                      d.Contains("string-null").Should().BeTrue();                      d.Contains("array-null").Should().BeTrue();                      d.Contains("dict-null").Should().BeTrue();                      d.GetValue("obj-null").Should().BeNull();;                      d.GetValue("string-null").Should().BeNull();;                      d.GetValue("array-null").Should().BeNull();;                      d.GetValue("dict-null").Should().BeNull();                  });
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestSetOthers,The following statement contains a magic number: dict.SetFloat("pi"' 3.14f);
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestSetOthers,The following statement contains a magic number: dict.SetDouble("better_pi"' 3.14159);
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestSetOthers,The following statement contains a magic number: dict.GetFloat("pi").Should().Be(3.14f);
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestSetOthers,The following statement contains a magic number: dict.GetDouble("better_pi").Should().Be(3.14159);
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestSetOthers,The following statement contains a magic number: dict.GetDouble("pi").Should().BeApproximately(3.14' 0.00001);
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestSetOthers,The following statement contains a magic number: dict.GetDouble("pi").Should().BeApproximately(3.14' 0.00001);
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestSetOthers,The following statement contains a magic number: dict.GetFloat("better_pi").Should().BeApproximately(3.14159f' 0.0000000001f);
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestSetOthers,The following statement contains a magic number: dict.GetFloat("better_pi").Should().BeApproximately(3.14159f' 0.0000000001f);
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestDictionaryArray,The following statement contains a magic number: dicts.Count.Should().Be(4' "because that is the number of entries added");
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestDictionaryArray,The following statement contains a magic number: var d3 = dicts.GetDictionary(2);
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestDictionaryArray,The following statement contains a magic number: var d4 = dicts.GetDictionary(3);
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestDictionaryArray,The following statement contains a magic number: savedDicts.Count.Should().Be(4' "because that is the number of entries");
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestDictionaryArray,The following statement contains a magic number: var savedD3 = savedDicts.GetDictionary(2);
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestDictionaryArray,The following statement contains a magic number: var savedD4 = savedDicts.GetDictionary(3);
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestReplaceDictionary,The following statement contains a magic number: profile1.SetInt("age"' 20);
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestReplaceDictionary,The following statement contains a magic number: profile1.GetInt("age").Should().Be(20' "because profile1 should be detached now");
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestReplaceDictionaryDifferentType,The following statement contains a magic number: profile1.SetInt("age"' 20);
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestReplaceDictionaryDifferentType,The following statement contains a magic number: profile1.GetInt("age").Should().Be(20' "because profile1 should be detached now");
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestRemoveDictionary,The following statement contains a magic number: profile1.SetInt("age"' 20);
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestRemoveDictionary,The following statement contains a magic number: profile1.GetInt("age").Should().Be(20' "because the dictionary should still be editable");
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestEnumeratingDictionary,The following statement contains a magic number: i < 20
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestEnumeratingDictionary,The following statement contains a magic number: content = dict.Remove("key2").SetInt("key20"' 20).SetInt("key21"' 21).ToDictionary();
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestEnumeratingDictionary,The following statement contains a magic number: content = dict.Remove("key2").SetInt("key20"' 20).SetInt("key21"' 21).ToDictionary();
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestLargeLongValue,The following statement contains a magic number: var num1 = 1234567L;
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestLargeLongValue,The following statement contains a magic number: var num2 = 12345678L;
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestLargeLongValue,The following statement contains a magic number: var num3 = 123456789L;
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestLargeLongValue2,The following statement contains a magic number: var num1 = 11989091L;
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestLargeLongValue2,The following statement contains a magic number: var num2 = 231548688L;
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestGetArray,The following statement contains a magic number: array.GetArray(2).Should().BeNull();
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestGetArray,The following statement contains a magic number: array.GetArray(3).Should().NotBeNull();
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestGetArray,The following statement contains a magic number: var nestedArray = array.GetArray(3);
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestTypes,The following statement contains a magic number: d.SetValue("test"' 1.1f);
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestTypes,The following statement contains a magic number: d.SetValue("test"' 1.1);
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestTypes,The following statement contains a magic number: d.SetValue("test"' new[] { 1' 2' 3' });
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestTypes,The following statement contains a magic number: d.SetValue("test"' new[] { 1' 2' 3' });
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestInMemoryDictionary,The following statement contains a magic number: idic.Add("two"' 2);
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestInMemoryDictionary,The following statement contains a magic number: idic.Add("three"' 3);
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestInMemoryDictionary,The following statement contains a magic number: idic.Add("four"' 4);
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestInMemoryDictionary,The following statement contains a magic number: idic.Add("five"' 5);
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestInMemoryDictionary,The following statement contains a magic number: idic.Add("six"' 6);
Magic Number,Test,DictionaryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DictionaryTest.cs,TestInMemoryDictionary,The following statement contains a magic number: inmemorydict1.Count.Should().Be(6);
Magic Number,Test,DocPerfTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocPerfTest.cs,Test,The following statement contains a magic number: const uint revs = 10000;
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestCreateDocWithDict,The following statement contains a magic number: var dict = new Dictionary<string' object> {                  ["name"] = "Scott Tiger"'                  ["age"] = 30'                  ["address"] = new Dictionary<string' object> {                      ["street"] = "1 Main Street."'                      ["city"] = "Mountain View"'                      ["state"] = "CA"                  }'                  ["phones"] = new List<object> {"650-123-0001"' "650-123-0002"}              };
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestCreateDocWithIDAndDict,The following statement contains a magic number: var dict = new Dictionary<string' object> {                  ["name"] = "Scott Tiger"'                  ["age"] = 30'                  ["address"] = new Dictionary<string' object> {                      ["street"] = "1 Main Street."'                      ["city"] = "Mountain View"'                      ["state"] = "CA"                  }'                  ["phones"] = new List<object> { "650-123-0001"' "650-123-0002" }              };
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetDictionaryContent,The following statement contains a magic number: var dict = new Dictionary<string' object> {                  ["name"] = "Scott Tiger"'                  ["age"] = 30'                  ["address"] = new Dictionary<string' object> {                      ["street"] = "1 Main Street."'                      ["city"] = "Mountain View"'                      ["state"] = "CA"                  }'                  ["phones"] = new List<object> { "650-123-0001"' "650-123-0002" }              };
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetDictionaryContent,The following statement contains a magic number: var nuDict = new Dictionary<string' object> {                  ["name"] = "Danial Tiger"'                  ["age"] = 32'                  ["address"] = new Dictionary<string' object> {                      ["street"] = "2 Main Street."'                      ["city"] = "Palo Alto"'                      ["state"] = "CA"                  }'                  ["phones"] = new List<object> { "650-234-0001"' "650-234-0002" }              };
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetNumber,The following statement contains a magic number: doc.SetDouble("number4"' 1.1);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetNumber,The following statement contains a magic number: SaveDocument(doc' d =>              {                  d.GetInt("number1").Should().Be(1' "because that is the value of the first revision of number1");                  d.GetInt("number2").Should().Be(0' "because that is the value of the first revision of number2");                  d.GetInt("number3").Should().Be(-1' "because that is the value of the first revision of number3");                  d.GetDouble("number4").Should().Be(1.1' "because that is the value of the first revision of number4");              });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetNumber,The following statement contains a magic number: doc.SetDouble("number3"' 1.1);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetNumber,The following statement contains a magic number: SaveDocument(doc' d =>              {                  d.GetInt("number1").Should().Be(0' "because that is the value of the second revision of number1");                  d.GetInt("number2").Should().Be(1' "because that is the value of the second revision of number2");                  d.GetDouble("number3").Should().Be(1.1' "because that is the value of the second revision of number3");                  d.GetInt("number4").Should().Be(-1' "because that is the value of the second revision of number4");              });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestGetDouble,The following statement contains a magic number: SaveDocument(doc' d =>              {                  d.GetDouble("true").Should().Be(1.0' "because a true bool value will be coalesced to 1.0");                  d.GetDouble("false").Should().Be(0.0' "because a false bool value will be coalesced to 0.0");                  d.GetDouble("string").Should().Be(0.0' "because that is the default value");                  d.GetDouble("zero").Should().Be(0.0' "because zero was stored in this key");                  d.GetDouble("one").Should().Be(1.0' "because one was stored in this key");                  d.GetDouble("minus_one").Should().Be(-1.0' "because -1 was stored in this key");                  d.GetDouble("one_dot_one").Should().Be(1.1' "because 1.1 was stored in this key");                  d.GetDouble("date").Should().Be(0.0' "because that is the default value");                  d.GetDouble("dict").Should().Be(0.0' "because that is the default value");                  d.GetDouble("array").Should().Be(0.0' "because that is the default value");                  d.GetDouble("blob").Should().Be(0.0' "because that is the default value");                  d.GetDouble("non_existing_key").Should().Be(0.0' "because that key has no value");              });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestGetFloat,The following statement contains a magic number: SaveDocument(doc' d =>              {                  d.GetFloat("true").Should().Be(1.0f' "because a true bool value will be coalesced to 1.0f");                  d.GetFloat("false").Should().Be(0.0f' "because a false bool value will be coalesced to 0.0f");                  d.GetFloat("string").Should().Be(0.0f' "because that is the default value");                  d.GetFloat("zero").Should().Be(0.0f' "because zero was stored in this key");                  d.GetFloat("one").Should().Be(1.0f' "because one was stored in this key");                  d.GetFloat("minus_one").Should().Be(-1.0f' "because -1 was stored in this key");                  d.GetFloat("one_dot_one").Should().Be(1.1f' "because 1.1f was stored in this key");                  d.GetFloat("date").Should().Be(0.0f' "because that is the default value");                  d.GetFloat("dict").Should().Be(0.0f' "because that is the default value");                  d.GetFloat("array").Should().Be(0.0f' "because that is the default value");                  d.GetFloat("blob").Should().Be(0.0f' "because that is the default value");                  d.GetFloat("non_existing_key").Should().Be(0.0f' "because that key has no value");              });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: doc.SetFloat("number1"' 1.00f)                      .SetFloat("number2"' 1.49f)                      .SetFloat("number3"' 1.50f)                      .SetFloat("number4"' 1.51f)                      .SetDouble("number5"' 1.99);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: doc.SetFloat("number1"' 1.00f)                      .SetFloat("number2"' 1.49f)                      .SetFloat("number3"' 1.50f)                      .SetFloat("number4"' 1.51f)                      .SetDouble("number5"' 1.99);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: doc.SetFloat("number1"' 1.00f)                      .SetFloat("number2"' 1.49f)                      .SetFloat("number3"' 1.50f)                      .SetFloat("number4"' 1.51f)                      .SetDouble("number5"' 1.99);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: doc.SetFloat("number1"' 1.00f)                      .SetFloat("number2"' 1.49f)                      .SetFloat("number3"' 1.50f)                      .SetFloat("number4"' 1.51f)                      .SetDouble("number5"' 1.99);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: SaveDocument(doc' d =>                  {                      d.GetInt("number1").Should().Be(1);                      d.GetFloat("number1").Should().Be(1.00f);                      d.GetDouble("number1").Should().Be(1.00);                        d.GetInt("number2").Should().Be(1);                      d.GetFloat("number2").Should().Be(1.49f);                      d.GetDouble("number2").Should().BeApproximately(1.49' 0.00001);                        d.GetInt("number3").Should().Be(1);                      d.GetFloat("number3").Should().Be(1.50f);                      d.GetDouble("number3").Should().BeApproximately(1.50' 0.00001);                        d.GetInt("number4").Should().Be(1);                      d.GetFloat("number4").Should().Be(1.51f);                      d.GetDouble("number4").Should().BeApproximately(1.51' 0.00001);                        d.GetInt("number5").Should().Be(1);                      d.GetFloat("number5").Should().Be(1.99f);                      d.GetDouble("number5").Should().BeApproximately(1.99' 0.00001);                  });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: SaveDocument(doc' d =>                  {                      d.GetInt("number1").Should().Be(1);                      d.GetFloat("number1").Should().Be(1.00f);                      d.GetDouble("number1").Should().Be(1.00);                        d.GetInt("number2").Should().Be(1);                      d.GetFloat("number2").Should().Be(1.49f);                      d.GetDouble("number2").Should().BeApproximately(1.49' 0.00001);                        d.GetInt("number3").Should().Be(1);                      d.GetFloat("number3").Should().Be(1.50f);                      d.GetDouble("number3").Should().BeApproximately(1.50' 0.00001);                        d.GetInt("number4").Should().Be(1);                      d.GetFloat("number4").Should().Be(1.51f);                      d.GetDouble("number4").Should().BeApproximately(1.51' 0.00001);                        d.GetInt("number5").Should().Be(1);                      d.GetFloat("number5").Should().Be(1.99f);                      d.GetDouble("number5").Should().BeApproximately(1.99' 0.00001);                  });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: SaveDocument(doc' d =>                  {                      d.GetInt("number1").Should().Be(1);                      d.GetFloat("number1").Should().Be(1.00f);                      d.GetDouble("number1").Should().Be(1.00);                        d.GetInt("number2").Should().Be(1);                      d.GetFloat("number2").Should().Be(1.49f);                      d.GetDouble("number2").Should().BeApproximately(1.49' 0.00001);                        d.GetInt("number3").Should().Be(1);                      d.GetFloat("number3").Should().Be(1.50f);                      d.GetDouble("number3").Should().BeApproximately(1.50' 0.00001);                        d.GetInt("number4").Should().Be(1);                      d.GetFloat("number4").Should().Be(1.51f);                      d.GetDouble("number4").Should().BeApproximately(1.51' 0.00001);                        d.GetInt("number5").Should().Be(1);                      d.GetFloat("number5").Should().Be(1.99f);                      d.GetDouble("number5").Should().BeApproximately(1.99' 0.00001);                  });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: SaveDocument(doc' d =>                  {                      d.GetInt("number1").Should().Be(1);                      d.GetFloat("number1").Should().Be(1.00f);                      d.GetDouble("number1").Should().Be(1.00);                        d.GetInt("number2").Should().Be(1);                      d.GetFloat("number2").Should().Be(1.49f);                      d.GetDouble("number2").Should().BeApproximately(1.49' 0.00001);                        d.GetInt("number3").Should().Be(1);                      d.GetFloat("number3").Should().Be(1.50f);                      d.GetDouble("number3").Should().BeApproximately(1.50' 0.00001);                        d.GetInt("number4").Should().Be(1);                      d.GetFloat("number4").Should().Be(1.51f);                      d.GetDouble("number4").Should().BeApproximately(1.51' 0.00001);                        d.GetInt("number5").Should().Be(1);                      d.GetFloat("number5").Should().Be(1.99f);                      d.GetDouble("number5").Should().BeApproximately(1.99' 0.00001);                  });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: SaveDocument(doc' d =>                  {                      d.GetInt("number1").Should().Be(1);                      d.GetFloat("number1").Should().Be(1.00f);                      d.GetDouble("number1").Should().Be(1.00);                        d.GetInt("number2").Should().Be(1);                      d.GetFloat("number2").Should().Be(1.49f);                      d.GetDouble("number2").Should().BeApproximately(1.49' 0.00001);                        d.GetInt("number3").Should().Be(1);                      d.GetFloat("number3").Should().Be(1.50f);                      d.GetDouble("number3").Should().BeApproximately(1.50' 0.00001);                        d.GetInt("number4").Should().Be(1);                      d.GetFloat("number4").Should().Be(1.51f);                      d.GetDouble("number4").Should().BeApproximately(1.51' 0.00001);                        d.GetInt("number5").Should().Be(1);                      d.GetFloat("number5").Should().Be(1.99f);                      d.GetDouble("number5").Should().BeApproximately(1.99' 0.00001);                  });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: SaveDocument(doc' d =>                  {                      d.GetInt("number1").Should().Be(1);                      d.GetFloat("number1").Should().Be(1.00f);                      d.GetDouble("number1").Should().Be(1.00);                        d.GetInt("number2").Should().Be(1);                      d.GetFloat("number2").Should().Be(1.49f);                      d.GetDouble("number2").Should().BeApproximately(1.49' 0.00001);                        d.GetInt("number3").Should().Be(1);                      d.GetFloat("number3").Should().Be(1.50f);                      d.GetDouble("number3").Should().BeApproximately(1.50' 0.00001);                        d.GetInt("number4").Should().Be(1);                      d.GetFloat("number4").Should().Be(1.51f);                      d.GetDouble("number4").Should().BeApproximately(1.51' 0.00001);                        d.GetInt("number5").Should().Be(1);                      d.GetFloat("number5").Should().Be(1.99f);                      d.GetDouble("number5").Should().BeApproximately(1.99' 0.00001);                  });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: SaveDocument(doc' d =>                  {                      d.GetInt("number1").Should().Be(1);                      d.GetFloat("number1").Should().Be(1.00f);                      d.GetDouble("number1").Should().Be(1.00);                        d.GetInt("number2").Should().Be(1);                      d.GetFloat("number2").Should().Be(1.49f);                      d.GetDouble("number2").Should().BeApproximately(1.49' 0.00001);                        d.GetInt("number3").Should().Be(1);                      d.GetFloat("number3").Should().Be(1.50f);                      d.GetDouble("number3").Should().BeApproximately(1.50' 0.00001);                        d.GetInt("number4").Should().Be(1);                      d.GetFloat("number4").Should().Be(1.51f);                      d.GetDouble("number4").Should().BeApproximately(1.51' 0.00001);                        d.GetInt("number5").Should().Be(1);                      d.GetFloat("number5").Should().Be(1.99f);                      d.GetDouble("number5").Should().BeApproximately(1.99' 0.00001);                  });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: SaveDocument(doc' d =>                  {                      d.GetInt("number1").Should().Be(1);                      d.GetFloat("number1").Should().Be(1.00f);                      d.GetDouble("number1").Should().Be(1.00);                        d.GetInt("number2").Should().Be(1);                      d.GetFloat("number2").Should().Be(1.49f);                      d.GetDouble("number2").Should().BeApproximately(1.49' 0.00001);                        d.GetInt("number3").Should().Be(1);                      d.GetFloat("number3").Should().Be(1.50f);                      d.GetDouble("number3").Should().BeApproximately(1.50' 0.00001);                        d.GetInt("number4").Should().Be(1);                      d.GetFloat("number4").Should().Be(1.51f);                      d.GetDouble("number4").Should().BeApproximately(1.51' 0.00001);                        d.GetInt("number5").Should().Be(1);                      d.GetFloat("number5").Should().Be(1.99f);                      d.GetDouble("number5").Should().BeApproximately(1.99' 0.00001);                  });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: SaveDocument(doc' d =>                  {                      d.GetInt("number1").Should().Be(1);                      d.GetFloat("number1").Should().Be(1.00f);                      d.GetDouble("number1").Should().Be(1.00);                        d.GetInt("number2").Should().Be(1);                      d.GetFloat("number2").Should().Be(1.49f);                      d.GetDouble("number2").Should().BeApproximately(1.49' 0.00001);                        d.GetInt("number3").Should().Be(1);                      d.GetFloat("number3").Should().Be(1.50f);                      d.GetDouble("number3").Should().BeApproximately(1.50' 0.00001);                        d.GetInt("number4").Should().Be(1);                      d.GetFloat("number4").Should().Be(1.51f);                      d.GetDouble("number4").Should().BeApproximately(1.51' 0.00001);                        d.GetInt("number5").Should().Be(1);                      d.GetFloat("number5").Should().Be(1.99f);                      d.GetDouble("number5").Should().BeApproximately(1.99' 0.00001);                  });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: SaveDocument(doc' d =>                  {                      d.GetInt("number1").Should().Be(1);                      d.GetFloat("number1").Should().Be(1.00f);                      d.GetDouble("number1").Should().Be(1.00);                        d.GetInt("number2").Should().Be(1);                      d.GetFloat("number2").Should().Be(1.49f);                      d.GetDouble("number2").Should().BeApproximately(1.49' 0.00001);                        d.GetInt("number3").Should().Be(1);                      d.GetFloat("number3").Should().Be(1.50f);                      d.GetDouble("number3").Should().BeApproximately(1.50' 0.00001);                        d.GetInt("number4").Should().Be(1);                      d.GetFloat("number4").Should().Be(1.51f);                      d.GetDouble("number4").Should().BeApproximately(1.51' 0.00001);                        d.GetInt("number5").Should().Be(1);                      d.GetFloat("number5").Should().Be(1.99f);                      d.GetDouble("number5").Should().BeApproximately(1.99' 0.00001);                  });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: SaveDocument(doc' d =>                  {                      d.GetInt("number1").Should().Be(1);                      d.GetFloat("number1").Should().Be(1.00f);                      d.GetDouble("number1").Should().Be(1.00);                        d.GetInt("number2").Should().Be(1);                      d.GetFloat("number2").Should().Be(1.49f);                      d.GetDouble("number2").Should().BeApproximately(1.49' 0.00001);                        d.GetInt("number3").Should().Be(1);                      d.GetFloat("number3").Should().Be(1.50f);                      d.GetDouble("number3").Should().BeApproximately(1.50' 0.00001);                        d.GetInt("number4").Should().Be(1);                      d.GetFloat("number4").Should().Be(1.51f);                      d.GetDouble("number4").Should().BeApproximately(1.51' 0.00001);                        d.GetInt("number5").Should().Be(1);                      d.GetFloat("number5").Should().Be(1.99f);                      d.GetDouble("number5").Should().BeApproximately(1.99' 0.00001);                  });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetGetFloatNumbers,The following statement contains a magic number: SaveDocument(doc' d =>                  {                      d.GetInt("number1").Should().Be(1);                      d.GetFloat("number1").Should().Be(1.00f);                      d.GetDouble("number1").Should().Be(1.00);                        d.GetInt("number2").Should().Be(1);                      d.GetFloat("number2").Should().Be(1.49f);                      d.GetDouble("number2").Should().BeApproximately(1.49' 0.00001);                        d.GetInt("number3").Should().Be(1);                      d.GetFloat("number3").Should().Be(1.50f);                      d.GetDouble("number3").Should().BeApproximately(1.50' 0.00001);                        d.GetInt("number4").Should().Be(1);                      d.GetFloat("number4").Should().Be(1.51f);                      d.GetDouble("number4").Should().BeApproximately(1.51' 0.00001);                        d.GetInt("number5").Should().Be(1);                      d.GetFloat("number5").Should().Be(1.99f);                      d.GetDouble("number5").Should().BeApproximately(1.99' 0.00001);                  });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetDate,The following statement contains a magic number: var nuDate = date + TimeSpan.FromSeconds(60);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetCSharpList,The following statement contains a magic number: members.Count.Should().Be(3' "because there are three elements inside");
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetCSharpList,The following statement contains a magic number: members.Count.Should().Be(3' "because there are three elements inside");
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetCSharpList,The following statement contains a magic number: nuMembers.Count.Should().Be(4' "because another element was added");
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetCSharpList,The following statement contains a magic number: nuMembers.GetValue(3).Should().Be("g"' "because that is what was added");
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetCSharpList,The following statement contains a magic number: members.Count.Should().Be(3' "beacuse members still has three elements");
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestUpdateNestedArray,The following statement contains a magic number: group2.AddInt(1).AddInt(2).AddInt(3);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestUpdateNestedArray,The following statement contains a magic number: group2.AddInt(1).AddInt(2).AddInt(3);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestUpdateNestedArray,The following statement contains a magic number: SaveDocument(doc' d =>              {                  var result = new Dictionary<string' object>                  {                      ["groups"] = new List<object>                      {                          new List<object>                              { "a"' "b"' "c" }'                          new List<object>                              { 1' 2' 3 }                      }                  };                  d.ToDictionary().Should().BeEquivalentTo(result);              });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestUpdateNestedArray,The following statement contains a magic number: SaveDocument(doc' d =>              {                  var result = new Dictionary<string' object>                  {                      ["groups"] = new List<object>                      {                          new List<object>                              { "a"' "b"' "c" }'                          new List<object>                              { 1' 2' 3 }                      }                  };                  d.ToDictionary().Should().BeEquivalentTo(result);              });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestUpdateNestedArray,The following statement contains a magic number: group1.SetString(2' "f");
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestUpdateNestedArray,The following statement contains a magic number: group2.SetInt(0' 4);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestUpdateNestedArray,The following statement contains a magic number: group2.SetInt(1' 5);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestUpdateNestedArray,The following statement contains a magic number: group2.SetInt(2' 6);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestUpdateNestedArray,The following statement contains a magic number: group2.SetInt(2' 6);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestUpdateNestedArray,The following statement contains a magic number: SaveDocument(doc' d =>              {                  var result = new Dictionary<string' object>                  {                      ["groups"] = new List<object>                      {                          new List<object>                              { "d"' "e"' "f" }'                          new List<object>                              { 4' 5' 6 }                      }                  };                  d.ToDictionary().Should().BeEquivalentTo(result);              });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestUpdateNestedArray,The following statement contains a magic number: SaveDocument(doc' d =>              {                  var result = new Dictionary<string' object>                  {                      ["groups"] = new List<object>                      {                          new List<object>                              { "d"' "e"' "f" }'                          new List<object>                              { 4' 5' 6 }                      }                  };                  d.ToDictionary().Should().BeEquivalentTo(result);              });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestUpdateNestedArray,The following statement contains a magic number: SaveDocument(doc' d =>              {                  var result = new Dictionary<string' object>                  {                      ["groups"] = new List<object>                      {                          new List<object>                              { "d"' "e"' "f" }'                          new List<object>                              { 4' 5' 6 }                      }                  };                  d.ToDictionary().Should().BeEquivalentTo(result);              });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestUpdateArrayInDictionary,The following statement contains a magic number: member2.AddInt(1).AddInt(2).AddInt(3);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestUpdateArrayInDictionary,The following statement contains a magic number: member2.AddInt(1).AddInt(2).AddInt(3);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestUpdateArrayInDictionary,The following statement contains a magic number: SaveDocument(doc' d =>              {                  var result = new Dictionary<string' object>                  {                      ["group1"] = new Dictionary<string' object>                      {                          ["member"] = new List<object>                          {                              "a"' "b"' "c"                          }                      }'                      ["group2"] = new Dictionary<string' object>                      {                          ["member"] = new List<object>                          {                              1' 2' 3                          }                      }                  };                  d.ToDictionary().Should().BeEquivalentTo(result);              });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestUpdateArrayInDictionary,The following statement contains a magic number: SaveDocument(doc' d =>              {                  var result = new Dictionary<string' object>                  {                      ["group1"] = new Dictionary<string' object>                      {                          ["member"] = new List<object>                          {                              "a"' "b"' "c"                          }                      }'                      ["group2"] = new Dictionary<string' object>                      {                          ["member"] = new List<object>                          {                              1' 2' 3                          }                      }                  };                  d.ToDictionary().Should().BeEquivalentTo(result);              });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestUpdateArrayInDictionary,The following statement contains a magic number: member1.SetString(2' "f");
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestUpdateArrayInDictionary,The following statement contains a magic number: member2.SetInt(0' 4);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestUpdateArrayInDictionary,The following statement contains a magic number: member2.SetInt(1' 5);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestUpdateArrayInDictionary,The following statement contains a magic number: member2.SetInt(2' 6);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestUpdateArrayInDictionary,The following statement contains a magic number: member2.SetInt(2' 6);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestUpdateArrayInDictionary,The following statement contains a magic number: SaveDocument(doc' d =>              {                  var result = new Dictionary<string' object>                  {                      ["group1"] = new Dictionary<string' object>                      {                          ["member"] = new List<object>                          {                              "d"' "e"' "f"                          }                      }'                      ["group2"] = new Dictionary<string' object>                      {                          ["member"] = new List<object>                          {                              4' 5' 6                          }                      }                  };                  d.ToDictionary().Should().BeEquivalentTo(result);              });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestUpdateArrayInDictionary,The following statement contains a magic number: SaveDocument(doc' d =>              {                  var result = new Dictionary<string' object>                  {                      ["group1"] = new Dictionary<string' object>                      {                          ["member"] = new List<object>                          {                              "d"' "e"' "f"                          }                      }'                      ["group2"] = new Dictionary<string' object>                      {                          ["member"] = new List<object>                          {                              4' 5' 6                          }                      }                  };                  d.ToDictionary().Should().BeEquivalentTo(result);              });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestUpdateArrayInDictionary,The following statement contains a magic number: SaveDocument(doc' d =>              {                  var result = new Dictionary<string' object>                  {                      ["group1"] = new Dictionary<string' object>                      {                          ["member"] = new List<object>                          {                              "d"' "e"' "f"                          }                      }'                      ["group2"] = new Dictionary<string' object>                      {                          ["member"] = new List<object>                          {                              4' 5' 6                          }                      }                  };                  d.ToDictionary().Should().BeEquivalentTo(result);              });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestCount,The following statement contains a magic number: SaveDocument(doc' d =>              {                  d.Count.Should().Be(11' "because that is the number of entries that were added");                  d.Count.Should()                      .Be(doc.ToDictionary().Count' "because the count should not change when converting to dictionary");              });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestRemoveKeys,The following statement contains a magic number: doc.SetData(new Dictionary<string' object> {                  ["type"] = "profile"'                  ["name"] = "Jason"'                  ["weight"] = 130.5'                  ["address"] = new Dictionary<string' object> {                      ["street"] = "1 milky way."'                      ["city"] = "galaxy city"'                      ["zip"] = 12345                  }              });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestRemoveKeys,The following statement contains a magic number: doc.SetData(new Dictionary<string' object> {                  ["type"] = "profile"'                  ["name"] = "Jason"'                  ["weight"] = 130.5'                  ["address"] = new Dictionary<string' object> {                      ["street"] = "1 milky way."'                      ["city"] = "galaxy city"'                      ["zip"] = 12345                  }              });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestRemoveKeys,The following statement contains a magic number: doc.ToDictionary().Should().BeEquivalentTo(new Dictionary<string' object> {                  ["type"] = "profile"'                  ["address"] = new Dictionary<string' object> {                      ["street"] = "1 milky way."'                      ["zip"] = 12345L                  }              });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestRemoveKeys,The following statement contains a magic number: address.ToDictionary().Should().BeEquivalentTo(new Dictionary<string' object> {                  ["street"] = "1 milky way."'                  ["zip"] = 12345L              });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestRemoveKeysBySettingDictionary,The following statement contains a magic number: var props = new Dictionary<string' object> {                  ["PropName1"] = "Val1"'                  ["PropName2"] = 42              };
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestRemoveKeysBySettingDictionary,The following statement contains a magic number: var newProps = new Dictionary<string' object> {                  ["PropName3"] = "Val3"'                  ["PropName4"] = 84              };
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestRemoveKeysBySettingDictionary,The following statement contains a magic number: existingDoc.ToDictionary().Should().BeEquivalentTo(new Dictionary<string' object> {                  ["PropName3"] = "Val3"'                  ["PropName4"] = 84              });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestContainsKey,The following statement contains a magic number: doc.SetData(new Dictionary<string' object> {                  ["type"] = "profile"'                  ["name"] = "Jason"'                  ["age"] = 30'                  ["address"] = new Dictionary<string' object> {                      ["street"] = "1 milky way."                  }              });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestArrayAfterDeleteDocument,The following statement contains a magic number: members.Count.Should().Be(3' "because three elements were added");
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestArrayAfterDeleteDocument,The following statement contains a magic number: members.Count.Should().Be(3' "because the array is independent of the document");
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestBlob,The following statement contains a magic number: data.Length.Should().Be(5' "because the data is 5 bytes long");
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestBlob,The following statement contains a magic number: var buffer = new byte[10];
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestBlob,The following statement contains a magic number: var bytesRead = contentStream.Read(buffer' 0' 10);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestBlob,The following statement contains a magic number: bytesRead.Should().Be(5' "because the data is 5 bytes long");
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestEmptyBlob,The following statement contains a magic number: var buffer = new byte[10];
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestEmptyBlob,The following statement contains a magic number: var bytesRead = contentStream.Read(buffer' 0' 10);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestBlobWithStream,The following statement contains a magic number: var buffer = new byte[10];
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestBlobWithStream,The following statement contains a magic number: var bytesRead = contentStream.Read(buffer' 0' 10);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestMultipleBlobRead,The following statement contains a magic number: var buffer = new byte[10];
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestMultipleBlobRead,The following statement contains a magic number: var bytesRead = contentStream.Read(buffer' 0' 10);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestMultipleBlobRead,The following statement contains a magic number: bytesRead.Should().Be(5' "because the data has 5 bytes");
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestMultipleBlobRead,The following statement contains a magic number: i < 5
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestMultipleBlobRead,The following statement contains a magic number: data.Length.Should().Be(5' "because the data is 5 bytes long");
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestMultipleBlobRead,The following statement contains a magic number: var buffer = new byte[10];
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestMultipleBlobRead,The following statement contains a magic number: var bytesRead = contentStream.Read(buffer' 0' 10);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestMultipleBlobRead,The following statement contains a magic number: bytesRead.Should().Be(5' "because the data is 5 bytes long");
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestEnumeratingDocument,The following statement contains a magic number: i < 20
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestEnumeratingDocument,The following statement contains a magic number: content = doc.Remove("key2").SetInt("key20"' 20).SetInt("key21"' 21).ToDictionary();
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestEnumeratingDocument,The following statement contains a magic number: content = doc.Remove("key2").SetInt("key20"' 20).SetInt("key21"' 21).ToDictionary();
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestToMutable,The following statement contains a magic number: mDoc1.SetInt("score"' 10);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestEquality,The following statement contains a magic number: doc1a.SetInt("answer"' 42);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestEquality,The following statement contains a magic number: doc1a.SetValue("options"' new[] { 1' 2' 3 });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestEquality,The following statement contains a magic number: doc1a.SetValue("options"' new[] { 1' 2' 3 });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestEquality,The following statement contains a magic number: doc1b.SetInt("answer"' 42);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestEquality,The following statement contains a magic number: doc1b.SetValue("options"' new[] { 1' 2' 3 });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestEquality,The following statement contains a magic number: doc1b.SetValue("options"' new[] { 1' 2' 3 });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestEquality,The following statement contains a magic number: doc1c.SetInt("answer"' 41);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestEquality,The following statement contains a magic number: doc1c.SetValue("options"' new[] { 1' 2 });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestEquality,The following statement contains a magic number: mDoc.SetInt("answer"' 50);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestEqualityDifferentDocID,The following statement contains a magic number: doc1.SetInt("answer"' 42);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestEqualityDifferentDocID,The following statement contains a magic number: doc2.SetInt("answer"' 42);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestEqualityDifferentDB,The following statement contains a magic number: doc1a.SetInt("answer"' 42);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestEqualityDifferentDB,The following statement contains a magic number: doc1b.SetInt("answer"' 42);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetAndGetExpirationFromDoc,The following statement contains a magic number: var dto30 = DateTimeOffset.UtcNow.AddSeconds(30);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetAndGetExpirationFromDoc,The following statement contains a magic number: doc1a.SetInt("answer"' 12);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetAndGetExpirationFromDoc,The following statement contains a magic number: doc1a.SetValue("options"' new[] { 1' 2' 3 });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetAndGetExpirationFromDoc,The following statement contains a magic number: doc1a.SetValue("options"' new[] { 1' 2' 3 });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetAndGetExpirationFromDoc,The following statement contains a magic number: doc1b.SetInt("answer"' 22);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetAndGetExpirationFromDoc,The following statement contains a magic number: doc1b.SetValue("options"' new[] { 1' 2' 3 });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetAndGetExpirationFromDoc,The following statement contains a magic number: doc1b.SetValue("options"' new[] { 1' 2' 3 });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetAndGetExpirationFromDoc,The following statement contains a magic number: doc1c.SetInt("answer"' 32);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetAndGetExpirationFromDoc,The following statement contains a magic number: doc1c.SetValue("options"' new[] { 1' 2' 3 });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetAndGetExpirationFromDoc,The following statement contains a magic number: doc1c.SetValue("options"' new[] { 1' 2' 3 });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetExpirationOnDoc,The following statement contains a magic number: var dto3 = DateTimeOffset.UtcNow.AddSeconds(3);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetExpirationOnDoc,The following statement contains a magic number: doc1a.SetInt("answer"' 12);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetExpirationOnDoc,The following statement contains a magic number: doc1a.SetValue("options"' new[] { 1' 2' 3 });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetExpirationOnDoc,The following statement contains a magic number: doc1a.SetValue("options"' new[] { 1' 2' 3 });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetExpirationOnDoc,The following statement contains a magic number: Thread.Sleep(3100);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetExpirationOnDoc,The following statement contains a magic number: Try.Condition(() => Db.GetDocument("doc_to_expired") == null)                  .Times(5)                  .WriteProgress(WriteLine)                  .Delay(TimeSpan.FromMilliseconds(500))                  .Go().Should().BeTrue();
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetExpirationOnDoc,The following statement contains a magic number: Try.Condition(() => Db.GetDocument("doc_to_expired") == null)                  .Times(5)                  .WriteProgress(WriteLine)                  .Delay(TimeSpan.FromMilliseconds(500))                  .Go().Should().BeTrue();
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetExpirationOnDeletedDoc,The following statement contains a magic number: var dto3 = DateTimeOffset.Now.AddSeconds(3);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetExpirationOnDeletedDoc,The following statement contains a magic number: doc1a.SetInt("answer"' 12);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetExpirationOnDeletedDoc,The following statement contains a magic number: doc1a.SetValue("options"' new[] { 1' 2' 3 });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetExpirationOnDeletedDoc,The following statement contains a magic number: doc1a.SetValue("options"' new[] { 1' 2' 3 });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetExpirationOnDeletedDoc,The following statement contains a magic number: Thread.Sleep(3100);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetExpirationOnDeletedDoc,The following statement contains a magic number: Try.Assertion(() => badAction.Should().Throw<CouchbaseLiteException>("Cannot find the document."))                      .Times(5).WriteProgress(WriteLine).Delay(TimeSpan.FromMilliseconds(500)).Go().Should().BeTrue();
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetExpirationOnDeletedDoc,The following statement contains a magic number: Try.Assertion(() => badAction.Should().Throw<CouchbaseLiteException>("Cannot find the document."))                      .Times(5).WriteProgress(WriteLine).Delay(TimeSpan.FromMilliseconds(500)).Go().Should().BeTrue();
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestGetExpirationFromDeletedDoc,The following statement contains a magic number: DateTimeOffset dto3 = DateTimeOffset.UtcNow.AddSeconds(3);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestGetExpirationFromDeletedDoc,The following statement contains a magic number: doc1a.SetInt("answer"' 12);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestGetExpirationFromDeletedDoc,The following statement contains a magic number: doc1a.SetValue("options"' new[] { 1' 2' 3 });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestGetExpirationFromDeletedDoc,The following statement contains a magic number: doc1a.SetValue("options"' new[] { 1' 2' 3 });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetExpirationOnNoneExistDoc,The following statement contains a magic number: var dto30 = DateTimeOffset.Now.AddSeconds(30);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestLongExpiration,The following statement contains a magic number: doc.SetInt("answer"' 42);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestLongExpiration,The following statement contains a magic number: doc.SetValue("options"' new[] { 1' 2' 3 });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestLongExpiration,The following statement contains a magic number: doc.SetValue("options"' new[] { 1' 2' 3 });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestLongExpiration,The following statement contains a magic number: Db.SetDocumentExpiration("doc"' DateTimeOffset.UtcNow.AddDays(60));
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestLongExpiration,The following statement contains a magic number: (Math.Abs((exp.Value - now).TotalDays - 60.0) < 1.0).Should().BeTrue();
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetAndUnsetExpirationOnDoc,The following statement contains a magic number: var dto3 = DateTimeOffset.UtcNow.AddSeconds(3);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetAndUnsetExpirationOnDoc,The following statement contains a magic number: doc1a.SetInt("answer"' 12);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetAndUnsetExpirationOnDoc,The following statement contains a magic number: doc1a.SetValue("options"' new[] { 1' 2' 3 });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetAndUnsetExpirationOnDoc,The following statement contains a magic number: doc1a.SetValue("options"' new[] { 1' 2' 3 });
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestSetAndUnsetExpirationOnDoc,The following statement contains a magic number: Thread.Sleep(3100);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestDocumentExpirationAfterDocsExpired,The following statement contains a magic number: var dto2 = DateTimeOffset.Now.AddSeconds(2);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestDocumentExpirationAfterDocsExpired,The following statement contains a magic number: var dto3 = DateTimeOffset.Now.AddSeconds(3);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestDocumentExpirationAfterDocsExpired,The following statement contains a magic number: var dto4 = DateTimeOffset.Now.AddSeconds(4);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestDocumentExpirationAfterDocsExpired,The following statement contains a magic number: doc1a.SetInt("answer"' 42);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestDocumentExpirationAfterDocsExpired,The following statement contains a magic number: doc1b.SetInt("answer"' 42);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestDocumentExpirationAfterDocsExpired,The following statement contains a magic number: doc1c.SetInt("answer"' 42);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestDocumentExpirationAfterDocsExpired,The following statement contains a magic number: Thread.Sleep(4100);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestDocumentExpirationAfterDocsExpired,The following statement contains a magic number: Try.Assertion(() =>              {                  Db.GetDocument("doc1").Should().BeNull();                  Db.GetDocument("doc2").Should().BeNull();                  Db.GetDocument("doc3").Should().BeNull();              }).Times(5).WriteProgress(WriteLine).Delay(TimeSpan.FromMilliseconds(500)).Go().Should().BeTrue();
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestDocumentExpirationAfterDocsExpired,The following statement contains a magic number: Try.Assertion(() =>              {                  Db.GetDocument("doc1").Should().BeNull();                  Db.GetDocument("doc2").Should().BeNull();                  Db.GetDocument("doc3").Should().BeNull();              }).Times(5).WriteProgress(WriteLine).Delay(TimeSpan.FromMilliseconds(500)).Go().Should().BeTrue();
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestPurgeEvent,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,TestRevisionIDExistingDoc,The following statement contains a magic number: mutabledoc.SetInt("int"' 88);
Magic Number,Test,DocumentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\DocumentTest.cs,PopulateData,The following statement contains a magic number: doc.SetBoolean("true"' true)                  .SetBoolean("false"' false)                  .SetString("string"' "string")                  .SetInt("zero"' 0)                  .SetInt("one"' 1)                  .SetInt("minus_one"' -1)                  .SetDouble("one_dot_one"' 1.1)                  .SetDate("date"' date);
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetFragmentFromInteger,The following statement contains a magic number: doc.SetInt("integer"' 10);
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetFragmentFromInteger,The following statement contains a magic number: SaveDocument(doc' d =>              {                  var fragment = d["integer"];                  fragment.Exists.Should().BeTrue("because this portion of the data exists");                  fragment.String.Should().BeNull("because this fragment is not of this type");                  fragment.Array.Should().BeNull("because this fragment is not of this type");                  fragment.Dictionary.Should().BeNull("because this fragment is not of this type");                  fragment.Int.Should().Be(10' "because that is the stored value");                  fragment.Long.Should().Be(10L' "because that is the converted value");                  fragment.Double.Should().Be(10.0' "because that is the converted value");                  fragment.Float.Should().Be(10.0f' "because that is the converted value");                  fragment.Boolean.Should().Be(true' "because that is the converted value");                  fragment.Date.Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  fragment.Value.Should().NotBeNull("because this fragment has a value");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetFragmentFromInteger,The following statement contains a magic number: SaveDocument(doc' d =>              {                  var fragment = d["integer"];                  fragment.Exists.Should().BeTrue("because this portion of the data exists");                  fragment.String.Should().BeNull("because this fragment is not of this type");                  fragment.Array.Should().BeNull("because this fragment is not of this type");                  fragment.Dictionary.Should().BeNull("because this fragment is not of this type");                  fragment.Int.Should().Be(10' "because that is the stored value");                  fragment.Long.Should().Be(10L' "because that is the converted value");                  fragment.Double.Should().Be(10.0' "because that is the converted value");                  fragment.Float.Should().Be(10.0f' "because that is the converted value");                  fragment.Boolean.Should().Be(true' "because that is the converted value");                  fragment.Date.Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  fragment.Value.Should().NotBeNull("because this fragment has a value");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetFragmentFromInteger,The following statement contains a magic number: SaveDocument(doc' d =>              {                  var fragment = d["integer"];                  fragment.Exists.Should().BeTrue("because this portion of the data exists");                  fragment.String.Should().BeNull("because this fragment is not of this type");                  fragment.Array.Should().BeNull("because this fragment is not of this type");                  fragment.Dictionary.Should().BeNull("because this fragment is not of this type");                  fragment.Int.Should().Be(10' "because that is the stored value");                  fragment.Long.Should().Be(10L' "because that is the converted value");                  fragment.Double.Should().Be(10.0' "because that is the converted value");                  fragment.Float.Should().Be(10.0f' "because that is the converted value");                  fragment.Boolean.Should().Be(true' "because that is the converted value");                  fragment.Date.Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  fragment.Value.Should().NotBeNull("because this fragment has a value");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetFragmentFromInteger,The following statement contains a magic number: SaveDocument(doc' d =>              {                  var fragment = d["integer"];                  fragment.Exists.Should().BeTrue("because this portion of the data exists");                  fragment.String.Should().BeNull("because this fragment is not of this type");                  fragment.Array.Should().BeNull("because this fragment is not of this type");                  fragment.Dictionary.Should().BeNull("because this fragment is not of this type");                  fragment.Int.Should().Be(10' "because that is the stored value");                  fragment.Long.Should().Be(10L' "because that is the converted value");                  fragment.Double.Should().Be(10.0' "because that is the converted value");                  fragment.Float.Should().Be(10.0f' "because that is the converted value");                  fragment.Boolean.Should().Be(true' "because that is the converted value");                  fragment.Date.Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  fragment.Value.Should().NotBeNull("because this fragment has a value");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetFragmentFromFloat,The following statement contains a magic number: doc.SetFloat("float"' 100.10f);
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetFragmentFromFloat,The following statement contains a magic number: SaveDocument(doc' d =>              {                  var fragment = d["float"];                  fragment.Exists.Should().BeTrue("because this portion of the data exists");                  fragment.String.Should().BeNull("because this fragment is not of this type");                  fragment.Array.Should().BeNull("because this fragment is not of this type");                  fragment.Dictionary.Should().BeNull("because this fragment is not of this type");                  fragment.Int.Should().Be(100' "because that is the stored value");                  fragment.Long.Should().Be(100L' "because that is the converted value");                  fragment.Float.Should().Be(100.10f' "because that is the stored value");                  fragment.Double.Should().BeApproximately(100.10' 0.0001' "because that is the converted value");                  fragment.Boolean.Should().Be(true' "because that is the converted value");                  fragment.Date.Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  fragment.Value.Should().NotBeNull("because this fragment has a value");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetFragmentFromFloat,The following statement contains a magic number: SaveDocument(doc' d =>              {                  var fragment = d["float"];                  fragment.Exists.Should().BeTrue("because this portion of the data exists");                  fragment.String.Should().BeNull("because this fragment is not of this type");                  fragment.Array.Should().BeNull("because this fragment is not of this type");                  fragment.Dictionary.Should().BeNull("because this fragment is not of this type");                  fragment.Int.Should().Be(100' "because that is the stored value");                  fragment.Long.Should().Be(100L' "because that is the converted value");                  fragment.Float.Should().Be(100.10f' "because that is the stored value");                  fragment.Double.Should().BeApproximately(100.10' 0.0001' "because that is the converted value");                  fragment.Boolean.Should().Be(true' "because that is the converted value");                  fragment.Date.Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  fragment.Value.Should().NotBeNull("because this fragment has a value");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetFragmentFromFloat,The following statement contains a magic number: SaveDocument(doc' d =>              {                  var fragment = d["float"];                  fragment.Exists.Should().BeTrue("because this portion of the data exists");                  fragment.String.Should().BeNull("because this fragment is not of this type");                  fragment.Array.Should().BeNull("because this fragment is not of this type");                  fragment.Dictionary.Should().BeNull("because this fragment is not of this type");                  fragment.Int.Should().Be(100' "because that is the stored value");                  fragment.Long.Should().Be(100L' "because that is the converted value");                  fragment.Float.Should().Be(100.10f' "because that is the stored value");                  fragment.Double.Should().BeApproximately(100.10' 0.0001' "because that is the converted value");                  fragment.Boolean.Should().Be(true' "because that is the converted value");                  fragment.Date.Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  fragment.Value.Should().NotBeNull("because this fragment has a value");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetFragmentFromFloat,The following statement contains a magic number: SaveDocument(doc' d =>              {                  var fragment = d["float"];                  fragment.Exists.Should().BeTrue("because this portion of the data exists");                  fragment.String.Should().BeNull("because this fragment is not of this type");                  fragment.Array.Should().BeNull("because this fragment is not of this type");                  fragment.Dictionary.Should().BeNull("because this fragment is not of this type");                  fragment.Int.Should().Be(100' "because that is the stored value");                  fragment.Long.Should().Be(100L' "because that is the converted value");                  fragment.Float.Should().Be(100.10f' "because that is the stored value");                  fragment.Double.Should().BeApproximately(100.10' 0.0001' "because that is the converted value");                  fragment.Boolean.Should().Be(true' "because that is the converted value");                  fragment.Date.Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  fragment.Value.Should().NotBeNull("because this fragment has a value");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetFragmentFromFloat,The following statement contains a magic number: SaveDocument(doc' d =>              {                  var fragment = d["float"];                  fragment.Exists.Should().BeTrue("because this portion of the data exists");                  fragment.String.Should().BeNull("because this fragment is not of this type");                  fragment.Array.Should().BeNull("because this fragment is not of this type");                  fragment.Dictionary.Should().BeNull("because this fragment is not of this type");                  fragment.Int.Should().Be(100' "because that is the stored value");                  fragment.Long.Should().Be(100L' "because that is the converted value");                  fragment.Float.Should().Be(100.10f' "because that is the stored value");                  fragment.Double.Should().BeApproximately(100.10' 0.0001' "because that is the converted value");                  fragment.Boolean.Should().Be(true' "because that is the converted value");                  fragment.Date.Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  fragment.Value.Should().NotBeNull("because this fragment has a value");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetFragmentFromLong,The following statement contains a magic number: doc.SetLong("long"' 10L);
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetFragmentFromLong,The following statement contains a magic number: SaveDocument(doc' d =>              {                  var fragment = d["long"];                  fragment.Exists.Should().BeTrue("because this portion of the data exists");                  fragment.String.Should().BeNull("because this fragment is not of this type");                  fragment.Array.Should().BeNull("because this fragment is not of this type");                  fragment.Dictionary.Should().BeNull("because this fragment is not of this type");                  fragment.Int.Should().Be(10' "because that is the converted value");                  fragment.Long.Should().Be(10L' "because that is the stored value");                  fragment.Double.Should().Be(10.0' "because that is the converted value");                  fragment.Float.Should().Be(10.0f' "because that is the converted value");                  fragment.Boolean.Should().Be(true' "because that is the converted value");                  fragment.Date.Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  fragment.Value.Should().NotBeNull("because this fragment has a value");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetFragmentFromLong,The following statement contains a magic number: SaveDocument(doc' d =>              {                  var fragment = d["long"];                  fragment.Exists.Should().BeTrue("because this portion of the data exists");                  fragment.String.Should().BeNull("because this fragment is not of this type");                  fragment.Array.Should().BeNull("because this fragment is not of this type");                  fragment.Dictionary.Should().BeNull("because this fragment is not of this type");                  fragment.Int.Should().Be(10' "because that is the converted value");                  fragment.Long.Should().Be(10L' "because that is the stored value");                  fragment.Double.Should().Be(10.0' "because that is the converted value");                  fragment.Float.Should().Be(10.0f' "because that is the converted value");                  fragment.Boolean.Should().Be(true' "because that is the converted value");                  fragment.Date.Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  fragment.Value.Should().NotBeNull("because this fragment has a value");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetFragmentFromLong,The following statement contains a magic number: SaveDocument(doc' d =>              {                  var fragment = d["long"];                  fragment.Exists.Should().BeTrue("because this portion of the data exists");                  fragment.String.Should().BeNull("because this fragment is not of this type");                  fragment.Array.Should().BeNull("because this fragment is not of this type");                  fragment.Dictionary.Should().BeNull("because this fragment is not of this type");                  fragment.Int.Should().Be(10' "because that is the converted value");                  fragment.Long.Should().Be(10L' "because that is the stored value");                  fragment.Double.Should().Be(10.0' "because that is the converted value");                  fragment.Float.Should().Be(10.0f' "because that is the converted value");                  fragment.Boolean.Should().Be(true' "because that is the converted value");                  fragment.Date.Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  fragment.Value.Should().NotBeNull("because this fragment has a value");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetFragmentFromLong,The following statement contains a magic number: SaveDocument(doc' d =>              {                  var fragment = d["long"];                  fragment.Exists.Should().BeTrue("because this portion of the data exists");                  fragment.String.Should().BeNull("because this fragment is not of this type");                  fragment.Array.Should().BeNull("because this fragment is not of this type");                  fragment.Dictionary.Should().BeNull("because this fragment is not of this type");                  fragment.Int.Should().Be(10' "because that is the converted value");                  fragment.Long.Should().Be(10L' "because that is the stored value");                  fragment.Double.Should().Be(10.0' "because that is the converted value");                  fragment.Float.Should().Be(10.0f' "because that is the converted value");                  fragment.Boolean.Should().Be(true' "because that is the converted value");                  fragment.Date.Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  fragment.Value.Should().NotBeNull("because this fragment has a value");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetFragmentFromDouble,The following statement contains a magic number: doc.SetDouble("double"' 100.10);
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetFragmentFromDouble,The following statement contains a magic number: SaveDocument(doc' d =>              {                  var fragment = d["double"];                  fragment.Exists.Should().BeTrue("because this portion of the data exists");                  fragment.String.Should().BeNull("because this fragment is not of this type");                  fragment.Array.Should().BeNull("because this fragment is not of this type");                  fragment.Dictionary.Should().BeNull("because this fragment is not of this type");                  fragment.Int.Should().Be(100' "because that is the converted value");                  fragment.Long.Should().Be(100L' "because that is the converted value");                  fragment.Double.Should().Be(100.10' "because that is the stored value");                  fragment.Float.Should().Be(100.10f' "because that is the default value");                  fragment.Boolean.Should().Be(true' "because that is the converted value");                  fragment.Date.Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  fragment.Value.Should().NotBeNull("because this fragment has a value");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetFragmentFromDouble,The following statement contains a magic number: SaveDocument(doc' d =>              {                  var fragment = d["double"];                  fragment.Exists.Should().BeTrue("because this portion of the data exists");                  fragment.String.Should().BeNull("because this fragment is not of this type");                  fragment.Array.Should().BeNull("because this fragment is not of this type");                  fragment.Dictionary.Should().BeNull("because this fragment is not of this type");                  fragment.Int.Should().Be(100' "because that is the converted value");                  fragment.Long.Should().Be(100L' "because that is the converted value");                  fragment.Double.Should().Be(100.10' "because that is the stored value");                  fragment.Float.Should().Be(100.10f' "because that is the default value");                  fragment.Boolean.Should().Be(true' "because that is the converted value");                  fragment.Date.Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  fragment.Value.Should().NotBeNull("because this fragment has a value");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetFragmentFromDouble,The following statement contains a magic number: SaveDocument(doc' d =>              {                  var fragment = d["double"];                  fragment.Exists.Should().BeTrue("because this portion of the data exists");                  fragment.String.Should().BeNull("because this fragment is not of this type");                  fragment.Array.Should().BeNull("because this fragment is not of this type");                  fragment.Dictionary.Should().BeNull("because this fragment is not of this type");                  fragment.Int.Should().Be(100' "because that is the converted value");                  fragment.Long.Should().Be(100L' "because that is the converted value");                  fragment.Double.Should().Be(100.10' "because that is the stored value");                  fragment.Float.Should().Be(100.10f' "because that is the default value");                  fragment.Boolean.Should().Be(true' "because that is the converted value");                  fragment.Date.Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  fragment.Value.Should().NotBeNull("because this fragment has a value");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetFragmentFromDouble,The following statement contains a magic number: SaveDocument(doc' d =>              {                  var fragment = d["double"];                  fragment.Exists.Should().BeTrue("because this portion of the data exists");                  fragment.String.Should().BeNull("because this fragment is not of this type");                  fragment.Array.Should().BeNull("because this fragment is not of this type");                  fragment.Dictionary.Should().BeNull("because this fragment is not of this type");                  fragment.Int.Should().Be(100' "because that is the converted value");                  fragment.Long.Should().Be(100L' "because that is the converted value");                  fragment.Double.Should().Be(100.10' "because that is the stored value");                  fragment.Float.Should().Be(100.10f' "because that is the default value");                  fragment.Boolean.Should().Be(true' "because that is the converted value");                  fragment.Date.Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  fragment.Value.Should().NotBeNull("because this fragment has a value");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetNestedArrayFragments,The following statement contains a magic number: var nested = new[] {4L' 5L' 6L};
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetNestedArrayFragments,The following statement contains a magic number: var nested = new[] {4L' 5L' 6L};
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetNestedArrayFragments,The following statement contains a magic number: var nested = new[] {4L' 5L' 6L};
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetNestedArrayFragments,The following statement contains a magic number: var dict = new Dictionary<string' object> {                  ["nested-array"] = new object[] {                      new[] {1' 2' 3}'                      nested                  }              };
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetNestedArrayFragments,The following statement contains a magic number: var dict = new Dictionary<string' object> {                  ["nested-array"] = new object[] {                      new[] {1' 2' 3}'                      nested                  }              };
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetNestedArrayFragments,The following statement contains a magic number: SaveDocument(doc' d =>              {                  var fragment = d["nested-array"][1];                  fragment.Exists.Should().BeTrue("because this portion of the data exists");                  fragment.String.Should().BeNull("because that is the default value");                  fragment.Int.Should().Be(0' "because that is the default value");                  fragment.Long.Should().Be(0L' "because that is the default value");                  fragment.Double.Should().Be(0.0' "because that is the default value");                  fragment.Float.Should().Be(0.0f' "because that is the default value");                  fragment.Boolean.Should().Be(true' "because that is the default value");                  fragment.Date.Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  fragment.Value.Should().NotBeNull("because this fragment has a value");                  fragment.Dictionary.Should().BeNull("because that is the default value");                  fragment.Array.Should().NotBeNull("because this fragment is of this type");                  fragment.Value.As<ArrayObject>()                      .Should()                      .ContainInOrder(fragment.Array'                          "because both of these accessors should return the same value");                  fragment.Array.Should().ContainInOrder(nested' "because that is what was stored");                  fragment.Array.Count.Should().Be(3' "because there are three elements inside");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetNestedNonExistingArrayFragments,The following statement contains a magic number: var nested = new[] { 1' 2' 3 };
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetNestedNonExistingArrayFragments,The following statement contains a magic number: var nested = new[] { 1' 2' 3 };
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetNestedNonExistingArrayFragments,The following statement contains a magic number: var dict = new Dictionary<string' object> {                  ["nested-array"] = new object[] {                      nested'                      new[] {4' 5' 6}                  }              };
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetNestedNonExistingArrayFragments,The following statement contains a magic number: var dict = new Dictionary<string' object> {                  ["nested-array"] = new object[] {                      nested'                      new[] {4' 5' 6}                  }              };
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetNestedNonExistingArrayFragments,The following statement contains a magic number: var dict = new Dictionary<string' object> {                  ["nested-array"] = new object[] {                      nested'                      new[] {4' 5' 6}                  }              };
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestGetNestedNonExistingArrayFragments,The following statement contains a magic number: SaveDocument(doc' d =>              {                  var fragment = d["nested-array"][2];                  fragment.Exists.Should().BeFalse("because this portion of the data doesn't exist");                  fragment.String.Should().BeNull("because that is the default value");                  fragment.Array.Should().BeNull("because that is the default value");                  fragment.Int.Should().Be(0' "because that is the default value");                  fragment.Long.Should().Be(0L' "because that is the default value");                  fragment.Double.Should().Be(0.0' "because that is the default value");                  fragment.Float.Should().Be(0.0f' "because that is the default value");                  fragment.Boolean.Should().Be(false' "because that is the default value");                  fragment.Date.Should().Be(DateTimeOffset.MinValue' "because that is the default value");                  fragment.Value.Should().BeNull("because this fragment doesn't have a value");                  fragment.Dictionary.Should().BeNull("because that is the default value");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestDictionaryFragmentSet,The following statement contains a magic number: doc["int"].Value = 7;
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestDictionaryFragmentSet,The following statement contains a magic number: doc["long"].Value = 8L;
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestDictionaryFragmentSet,The following statement contains a magic number: doc["float"].Value = 2.2f;
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestDictionaryFragmentSet,The following statement contains a magic number: doc["double"].Value = 3.3;
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestDictionaryFragmentSet,The following statement contains a magic number: SaveDocument(doc' d =>              {                  d["string"].String.Should().Be("value"' "because that is what was stored");                  d["bool"].Boolean.Should().BeTrue("because that is what was stored");                  d["int"].Int.Should().Be(7' "because that is what was stored");                  d["long"].Long.Should().Be(8L' "because that is what was stored");                  d["double"].Double.Should().Be(3.3' "because that is what was stored");                  d["float"].Float.Should().Be(2.2f' "because that is what was stored");                  d["date"].Date.Should().Be(date' "because that is what was stored");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestDictionaryFragmentSet,The following statement contains a magic number: SaveDocument(doc' d =>              {                  d["string"].String.Should().Be("value"' "because that is what was stored");                  d["bool"].Boolean.Should().BeTrue("because that is what was stored");                  d["int"].Int.Should().Be(7' "because that is what was stored");                  d["long"].Long.Should().Be(8L' "because that is what was stored");                  d["double"].Double.Should().Be(3.3' "because that is what was stored");                  d["float"].Float.Should().Be(2.2f' "because that is what was stored");                  d["date"].Date.Should().Be(date' "because that is what was stored");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestDictionaryFragmentSet,The following statement contains a magic number: SaveDocument(doc' d =>              {                  d["string"].String.Should().Be("value"' "because that is what was stored");                  d["bool"].Boolean.Should().BeTrue("because that is what was stored");                  d["int"].Int.Should().Be(7' "because that is what was stored");                  d["long"].Long.Should().Be(8L' "because that is what was stored");                  d["double"].Double.Should().Be(3.3' "because that is what was stored");                  d["float"].Float.Should().Be(2.2f' "because that is what was stored");                  d["date"].Date.Should().Be(date' "because that is what was stored");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestDictionaryFragmentSet,The following statement contains a magic number: SaveDocument(doc' d =>              {                  d["string"].String.Should().Be("value"' "because that is what was stored");                  d["bool"].Boolean.Should().BeTrue("because that is what was stored");                  d["int"].Int.Should().Be(7' "because that is what was stored");                  d["long"].Long.Should().Be(8L' "because that is what was stored");                  d["double"].Double.Should().Be(3.3' "because that is what was stored");                  d["float"].Float.Should().Be(2.2f' "because that is what was stored");                  d["date"].Date.Should().Be(date' "because that is what was stored");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestDictionaryFragmentSetArray,The following statement contains a magic number: array.AddInt(0).AddInt(1).AddInt(2);
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestDictionaryFragmentSetArray,The following statement contains a magic number: SaveDocument(doc' d =>              {                  d["array"][-1].Value.Should().BeNull("because that is an invalid index");                  d["array"][-1].Exists.Should().BeFalse("because there is no data at the invalid index");                  d["array"][0].Int.Should().Be(0' "because that is what was stored");                  d["array"][1].Int.Should().Be(1' "because that is what was stored");                  d["array"][2].Int.Should().Be(2' "because that is what was stored");                  d["array"][3].Value.Should().BeNull("because that is an invalid index");                  d["array"][3].Exists.Should().BeFalse("because there is no data at the invalid index");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestDictionaryFragmentSetArray,The following statement contains a magic number: SaveDocument(doc' d =>              {                  d["array"][-1].Value.Should().BeNull("because that is an invalid index");                  d["array"][-1].Exists.Should().BeFalse("because there is no data at the invalid index");                  d["array"][0].Int.Should().Be(0' "because that is what was stored");                  d["array"][1].Int.Should().Be(1' "because that is what was stored");                  d["array"][2].Int.Should().Be(2' "because that is what was stored");                  d["array"][3].Value.Should().BeNull("because that is an invalid index");                  d["array"][3].Exists.Should().BeFalse("because there is no data at the invalid index");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestDictionaryFragmentSetArray,The following statement contains a magic number: SaveDocument(doc' d =>              {                  d["array"][-1].Value.Should().BeNull("because that is an invalid index");                  d["array"][-1].Exists.Should().BeFalse("because there is no data at the invalid index");                  d["array"][0].Int.Should().Be(0' "because that is what was stored");                  d["array"][1].Int.Should().Be(1' "because that is what was stored");                  d["array"][2].Int.Should().Be(2' "because that is what was stored");                  d["array"][3].Value.Should().BeNull("because that is an invalid index");                  d["array"][3].Exists.Should().BeFalse("because there is no data at the invalid index");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestDictionaryFragmentSetArray,The following statement contains a magic number: SaveDocument(doc' d =>              {                  d["array"][-1].Value.Should().BeNull("because that is an invalid index");                  d["array"][-1].Exists.Should().BeFalse("because there is no data at the invalid index");                  d["array"][0].Int.Should().Be(0' "because that is what was stored");                  d["array"][1].Int.Should().Be(1' "because that is what was stored");                  d["array"][2].Int.Should().Be(2' "because that is what was stored");                  d["array"][3].Value.Should().BeNull("because that is an invalid index");                  d["array"][3].Exists.Should().BeFalse("because there is no data at the invalid index");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestDictionaryFragmentSetCSharpList,The following statement contains a magic number: doc["dict"]["array"].Value = new[] {0' 1' 2};
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestDictionaryFragmentSetCSharpList,The following statement contains a magic number: SaveDocument(doc' d =>              {                  d["dict"]["array"][-1].Value.Should().BeNull("because that is an invalid index");                  d["dict"]["array"][-1].Exists.Should().BeFalse("because there is no data at the invalid index");                  d["dict"]["array"][0].Int.Should().Be(0' "because that is what was stored");                  d["dict"]["array"][1].Int.Should().Be(1' "because that is what was stored");                  d["dict"]["array"][2].Int.Should().Be(2' "because that is what was stored");                  d["dict"]["array"][3].Value.Should().BeNull("because that is an invalid index");                  d["dict"]["array"][3].Exists.Should().BeFalse("because there is no data at the invalid index");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestDictionaryFragmentSetCSharpList,The following statement contains a magic number: SaveDocument(doc' d =>              {                  d["dict"]["array"][-1].Value.Should().BeNull("because that is an invalid index");                  d["dict"]["array"][-1].Exists.Should().BeFalse("because there is no data at the invalid index");                  d["dict"]["array"][0].Int.Should().Be(0' "because that is what was stored");                  d["dict"]["array"][1].Int.Should().Be(1' "because that is what was stored");                  d["dict"]["array"][2].Int.Should().Be(2' "because that is what was stored");                  d["dict"]["array"][3].Value.Should().BeNull("because that is an invalid index");                  d["dict"]["array"][3].Exists.Should().BeFalse("because there is no data at the invalid index");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestDictionaryFragmentSetCSharpList,The following statement contains a magic number: SaveDocument(doc' d =>              {                  d["dict"]["array"][-1].Value.Should().BeNull("because that is an invalid index");                  d["dict"]["array"][-1].Exists.Should().BeFalse("because there is no data at the invalid index");                  d["dict"]["array"][0].Int.Should().Be(0' "because that is what was stored");                  d["dict"]["array"][1].Int.Should().Be(1' "because that is what was stored");                  d["dict"]["array"][2].Int.Should().Be(2' "because that is what was stored");                  d["dict"]["array"][3].Value.Should().BeNull("because that is an invalid index");                  d["dict"]["array"][3].Exists.Should().BeFalse("because there is no data at the invalid index");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestDictionaryFragmentSetCSharpList,The following statement contains a magic number: SaveDocument(doc' d =>              {                  d["dict"]["array"][-1].Value.Should().BeNull("because that is an invalid index");                  d["dict"]["array"][-1].Exists.Should().BeFalse("because there is no data at the invalid index");                  d["dict"]["array"][0].Int.Should().Be(0' "because that is what was stored");                  d["dict"]["array"][1].Int.Should().Be(1' "because that is what was stored");                  d["dict"]["array"][2].Int.Should().Be(2' "because that is what was stored");                  d["dict"]["array"][3].Value.Should().BeNull("because that is an invalid index");                  d["dict"]["array"][3].Exists.Should().BeFalse("because there is no data at the invalid index");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestNonDictionaryFragmentSetValue,The following statement contains a magic number: SaveDocument(doc' d =>              {                  var md = d.ToMutable();                  md["string1"].Value = 10;                  md["string1"].Int.Should().Be(10' "because the value was changed");                  md["string2"].String.Should().Be("value2"' "because that is what was stored");                  md.Dispose();              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestNonDictionaryFragmentSetValue,The following statement contains a magic number: SaveDocument(doc' d =>              {                  var md = d.ToMutable();                  md["string1"].Value = 10;                  md["string1"].Int.Should().Be(10' "because the value was changed");                  md["string2"].String.Should().Be("value2"' "because that is what was stored");                  md.Dispose();              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestArrayFragmentSet,The following statement contains a magic number: doc["array"].Value = new object[] {                  "string"'                  10'                  10.10'                  true'                  date              };
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestArrayFragmentSet,The following statement contains a magic number: doc["array"].Value = new object[] {                  "string"'                  10'                  10.10'                  true'                  date              };
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestArrayFragmentSet,The following statement contains a magic number: SaveDocument(doc' d =>              {                  d["array"][-1].Should().NotBeNull("because the subscript operator should never return null");                  d["array"][-1].Exists.Should().BeFalse("because there is no data at an invalid index");                  for (int i = 0; i < 5; i++) {                      d["array"][i].Should().NotBeNull("because the subscript operator should never return null");                      d["array"][i].Exists.Should().BeTrue("because there is data at this index");                  }                    d["array"][5].Should().NotBeNull("because the subscript operator should never return null");                  d["array"][5].Exists.Should().BeFalse("because there is no data at an invalid index");                    d["array"][0].String.Should().Be("string"' "because that is what was stored");                  d["array"][1].Int.Should().Be(10' "because that is what was stored");                  d["array"][2].Double.Should().Be(10.10' "because that is what was stored");                  d["array"][3].Boolean.Should().Be(true' "because that is what was stored");                  d["array"][4].Date.Should().Be(date' "because that is what was stored");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestArrayFragmentSet,The following statement contains a magic number: SaveDocument(doc' d =>              {                  d["array"][-1].Should().NotBeNull("because the subscript operator should never return null");                  d["array"][-1].Exists.Should().BeFalse("because there is no data at an invalid index");                  for (int i = 0; i < 5; i++) {                      d["array"][i].Should().NotBeNull("because the subscript operator should never return null");                      d["array"][i].Exists.Should().BeTrue("because there is data at this index");                  }                    d["array"][5].Should().NotBeNull("because the subscript operator should never return null");                  d["array"][5].Exists.Should().BeFalse("because there is no data at an invalid index");                    d["array"][0].String.Should().Be("string"' "because that is what was stored");                  d["array"][1].Int.Should().Be(10' "because that is what was stored");                  d["array"][2].Double.Should().Be(10.10' "because that is what was stored");                  d["array"][3].Boolean.Should().Be(true' "because that is what was stored");                  d["array"][4].Date.Should().Be(date' "because that is what was stored");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestArrayFragmentSet,The following statement contains a magic number: SaveDocument(doc' d =>              {                  d["array"][-1].Should().NotBeNull("because the subscript operator should never return null");                  d["array"][-1].Exists.Should().BeFalse("because there is no data at an invalid index");                  for (int i = 0; i < 5; i++) {                      d["array"][i].Should().NotBeNull("because the subscript operator should never return null");                      d["array"][i].Exists.Should().BeTrue("because there is data at this index");                  }                    d["array"][5].Should().NotBeNull("because the subscript operator should never return null");                  d["array"][5].Exists.Should().BeFalse("because there is no data at an invalid index");                    d["array"][0].String.Should().Be("string"' "because that is what was stored");                  d["array"][1].Int.Should().Be(10' "because that is what was stored");                  d["array"][2].Double.Should().Be(10.10' "because that is what was stored");                  d["array"][3].Boolean.Should().Be(true' "because that is what was stored");                  d["array"][4].Date.Should().Be(date' "because that is what was stored");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestArrayFragmentSet,The following statement contains a magic number: SaveDocument(doc' d =>              {                  d["array"][-1].Should().NotBeNull("because the subscript operator should never return null");                  d["array"][-1].Exists.Should().BeFalse("because there is no data at an invalid index");                  for (int i = 0; i < 5; i++) {                      d["array"][i].Should().NotBeNull("because the subscript operator should never return null");                      d["array"][i].Exists.Should().BeTrue("because there is data at this index");                  }                    d["array"][5].Should().NotBeNull("because the subscript operator should never return null");                  d["array"][5].Exists.Should().BeFalse("because there is no data at an invalid index");                    d["array"][0].String.Should().Be("string"' "because that is what was stored");                  d["array"][1].Int.Should().Be(10' "because that is what was stored");                  d["array"][2].Double.Should().Be(10.10' "because that is what was stored");                  d["array"][3].Boolean.Should().Be(true' "because that is what was stored");                  d["array"][4].Date.Should().Be(date' "because that is what was stored");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestArrayFragmentSet,The following statement contains a magic number: SaveDocument(doc' d =>              {                  d["array"][-1].Should().NotBeNull("because the subscript operator should never return null");                  d["array"][-1].Exists.Should().BeFalse("because there is no data at an invalid index");                  for (int i = 0; i < 5; i++) {                      d["array"][i].Should().NotBeNull("because the subscript operator should never return null");                      d["array"][i].Exists.Should().BeTrue("because there is data at this index");                  }                    d["array"][5].Should().NotBeNull("because the subscript operator should never return null");                  d["array"][5].Exists.Should().BeFalse("because there is no data at an invalid index");                    d["array"][0].String.Should().Be("string"' "because that is what was stored");                  d["array"][1].Int.Should().Be(10' "because that is what was stored");                  d["array"][2].Double.Should().Be(10.10' "because that is what was stored");                  d["array"][3].Boolean.Should().Be(true' "because that is what was stored");                  d["array"][4].Date.Should().Be(date' "because that is what was stored");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestArrayFragmentSet,The following statement contains a magic number: SaveDocument(doc' d =>              {                  d["array"][-1].Should().NotBeNull("because the subscript operator should never return null");                  d["array"][-1].Exists.Should().BeFalse("because there is no data at an invalid index");                  for (int i = 0; i < 5; i++) {                      d["array"][i].Should().NotBeNull("because the subscript operator should never return null");                      d["array"][i].Exists.Should().BeTrue("because there is data at this index");                  }                    d["array"][5].Should().NotBeNull("because the subscript operator should never return null");                  d["array"][5].Exists.Should().BeFalse("because there is no data at an invalid index");                    d["array"][0].String.Should().Be("string"' "because that is what was stored");                  d["array"][1].Int.Should().Be(10' "because that is what was stored");                  d["array"][2].Double.Should().Be(10.10' "because that is what was stored");                  d["array"][3].Boolean.Should().Be(true' "because that is what was stored");                  d["array"][4].Date.Should().Be(date' "because that is what was stored");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestArrayFragmentSet,The following statement contains a magic number: SaveDocument(doc' d =>              {                  d["array"][-1].Should().NotBeNull("because the subscript operator should never return null");                  d["array"][-1].Exists.Should().BeFalse("because there is no data at an invalid index");                  for (int i = 0; i < 5; i++) {                      d["array"][i].Should().NotBeNull("because the subscript operator should never return null");                      d["array"][i].Exists.Should().BeTrue("because there is data at this index");                  }                    d["array"][5].Should().NotBeNull("because the subscript operator should never return null");                  d["array"][5].Exists.Should().BeFalse("because there is no data at an invalid index");                    d["array"][0].String.Should().Be("string"' "because that is what was stored");                  d["array"][1].Int.Should().Be(10' "because that is what was stored");                  d["array"][2].Double.Should().Be(10.10' "because that is what was stored");                  d["array"][3].Boolean.Should().Be(true' "because that is what was stored");                  d["array"][4].Date.Should().Be(date' "because that is what was stored");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestArrayFragmentSet,The following statement contains a magic number: SaveDocument(doc' d =>              {                  d["array"][-1].Should().NotBeNull("because the subscript operator should never return null");                  d["array"][-1].Exists.Should().BeFalse("because there is no data at an invalid index");                  for (int i = 0; i < 5; i++) {                      d["array"][i].Should().NotBeNull("because the subscript operator should never return null");                      d["array"][i].Exists.Should().BeTrue("because there is data at this index");                  }                    d["array"][5].Should().NotBeNull("because the subscript operator should never return null");                  d["array"][5].Exists.Should().BeFalse("because there is no data at an invalid index");                    d["array"][0].String.Should().Be("string"' "because that is what was stored");                  d["array"][1].Int.Should().Be(10' "because that is what was stored");                  d["array"][2].Double.Should().Be(10.10' "because that is what was stored");                  d["array"][3].Boolean.Should().Be(true' "because that is what was stored");                  d["array"][4].Date.Should().Be(date' "because that is what was stored");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestArrayFragmentSetArrayObject,The following statement contains a magic number: array.AddString("Jason").AddDouble(5.5).AddBoolean(true);
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestArrayFragmentSetArrayObject,The following statement contains a magic number: SaveDocument(doc' d =>              {                  d["array"][0][0].String.Should().Be("Jason"' "because that is the value that was stored");                  d["array"][0][1].Double.Should().Be(5.5' "because that is the value that was stored");                  d["array"][0][2].Boolean.Should().Be(true' "because that is the value that was stored");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestArrayFragmentSetArrayObject,The following statement contains a magic number: SaveDocument(doc' d =>              {                  d["array"][0][0].String.Should().Be("Jason"' "because that is the value that was stored");                  d["array"][0][1].Double.Should().Be(5.5' "because that is the value that was stored");                  d["array"][0][2].Boolean.Should().Be(true' "because that is the value that was stored");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestArrayFragmentSetArray,The following statement contains a magic number: doc["array"].Array.AddValue(new object[] {"Jason"' 5.5' true});
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestArrayFragmentSetArray,The following statement contains a magic number: SaveDocument(doc' d =>              {                  d["array"][0][0].String.Should().Be("Jason"' "because that is the value that was stored");                  d["array"][0][1].Double.Should().Be(5.5' "because that is the value that was stored");                  d["array"][0][2].Boolean.Should().Be(true' "because that is the value that was stored");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestArrayFragmentSetArray,The following statement contains a magic number: SaveDocument(doc' d =>              {                  d["array"][0][0].String.Should().Be("Jason"' "because that is the value that was stored");                  d["array"][0][1].Double.Should().Be(5.5' "because that is the value that was stored");                  d["array"][0][2].Boolean.Should().Be(true' "because that is the value that was stored");              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestNonExistingArrayFragmentSetObject,The following statement contains a magic number: doc.Invoking(d => d["array"][0][2].Value = "hello")                  .Should().Throw<InvalidOperationException>("because the path does not exist");
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestNonExistingArrayFragmentSetObject,The following statement contains a magic number: SaveDocument(doc' d =>              {                  d["array"][0][0].Int.Should().Be(0);                  d["array"][0][1].Boolean.Should().Be(false);                  d["array"][0][2].String.Should().BeNull();              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestOutOfRangeArrayFragmentSetObject,The following statement contains a magic number: doc["array"].Array.AddValue(new object[] { "Jason"' 5.5' true });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestOutOfRangeArrayFragmentSetObject,The following statement contains a magic number: doc.Invoking(d => d["array"][0][3].Value = 1).Should().Throw<InvalidOperationException>();
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestOutOfRangeArrayFragmentSetObject,The following statement contains a magic number: SaveDocument(doc' d =>              {                  d["array"][0][3].Exists.Should().BeFalse();              });
Magic Number,Test,FragmentTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\FragmentTest.cs,TestBasicGetFragmentValues,The following statement contains a magic number: doc["references"][2]["name"].Value.Should().BeNull("because this is an invalid index");
Magic Number,Test,LogTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\LogTest.cs,TestMaxSize,The following statement contains a magic number: var config = new LogFileConfiguration(logDirectory)              {                  UsePlaintext = true'                  MaxSize = 1024              };
Magic Number,Test,LogTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\LogTest.cs,TestMaxSize,The following statement contains a magic number: TestWithConfiguration(LogLevel.Debug' config' () =>              {                  for (int i = 0; i < 45; i++) {                      WriteLog.To.Database.E("TEST"' $"MESSAGE {i}");                      WriteLog.To.Database.W("TEST"' $"MESSAGE {i}");                      WriteLog.To.Database.I("TEST"' $"MESSAGE {i}");                      WriteLog.To.Database.V("TEST"' $"MESSAGE {i}");                      WriteLog.To.Database.D("TEST"' $"MESSAGE {i}");                  }                                    var totalCount = (Database.Log.File.Config.MaxRotateCount + 1) * 5;  #if !DEBUG                  totalCount -= 1; // Non-debug builds won't log debug files  #endif                    Directory.EnumerateFiles(logDirectory).Should()                      .HaveCount(totalCount' "because old log files should be getting pruned");              });
Magic Number,Test,LogTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\LogTest.cs,TestMaxSize,The following statement contains a magic number: TestWithConfiguration(LogLevel.Debug' config' () =>              {                  for (int i = 0; i < 45; i++) {                      WriteLog.To.Database.E("TEST"' $"MESSAGE {i}");                      WriteLog.To.Database.W("TEST"' $"MESSAGE {i}");                      WriteLog.To.Database.I("TEST"' $"MESSAGE {i}");                      WriteLog.To.Database.V("TEST"' $"MESSAGE {i}");                      WriteLog.To.Database.D("TEST"' $"MESSAGE {i}");                  }                                    var totalCount = (Database.Log.File.Config.MaxRotateCount + 1) * 5;  #if !DEBUG                  totalCount -= 1; // Non-debug builds won't log debug files  #endif                    Directory.EnumerateFiles(logDirectory).Should()                      .HaveCount(totalCount' "because old log files should be getting pruned");              });
Magic Number,Test,LogTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\LogTest.cs,TestLogHeader,The following statement contains a magic number: var config = new LogFileConfiguration(logDirectory)              {                  UsePlaintext = true'                  MaxSize = 1024              };
Magic Number,Test,LogTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\LogTest.cs,TestLogHeader,The following statement contains a magic number: TestWithConfiguration(LogLevel.Verbose' config' () =>              {                  for (int i = 0; i < 45; i++) {                      WriteLog.To.Database.E("TEST"' $"MESSAGE {i}");                      WriteLog.To.Database.W("TEST"' $"MESSAGE {i}");                      WriteLog.To.Database.I("TEST"' $"MESSAGE {i}");                      WriteLog.To.Database.V("TEST"' $"MESSAGE {i}");                  }                    foreach (var file in Directory.EnumerateFiles(logDirectory' "*.cbllog")) {                      var lines = ReadAllLines(file);                      lines[0].Should().Contain("CouchbaseLite/").And.Subject.Should().Contain("Build/")                          .And.Subject.Should().Contain("Commit/");                  }              });
Magic Number,Test,LogTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\LogTest.cs,TestConsoleLoggingLevels,The following statement contains a magic number: stringWriter.ToString().Split(Environment.NewLine' StringSplitOptions.RemoveEmptyEntries).Should()                  .HaveCount(4' "because all levels should be logged");
Magic Number,Test,LogTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\LogTest.cs,TestCustomLoggingLevels,The following statement contains a magic number: customLogger.Lines.Should().HaveCount(4' "because all levels should be logged");
Magic Number,Test,LogTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\LogTest.cs,TestPlaintextLoggingLevels,The following statement contains a magic number: TestWithConfiguration(LogLevel.Info' config' () =>              {                  foreach (var level in new[]                      { LogLevel.None' LogLevel.Error' LogLevel.Warning' LogLevel.Info' LogLevel.Verbose }) {                      Database.Log.File.Level = level;                      WriteLog.To.Database.V("TEST"' "TEST VERBOSE");                      WriteLog.To.Database.I("TEST"' "TEST INFO");                      WriteLog.To.Database.W("TEST"' "TEST WARNING");                      WriteLog.To.Database.E("TEST"' "TEST ERROR");                  }                    foreach (var file in Directory.EnumerateFiles(logDirectory)) {                      if (file.Contains(LogLevel.Verbose.ToString().ToLowerInvariant())) {                          ReadAllLines(file).Should()                              .HaveCount(2' "because there should be 1 log line and 1 meta line");                      } else if (file.Contains(LogLevel.Info.ToString().ToLowerInvariant())) {                          ReadAllLines(file).Should()                              .HaveCount(3' "because there should be 2 log lines and 1 meta line");                      } else if (file.Contains(LogLevel.Warning.ToString().ToLowerInvariant())) {                          ReadAllLines(file).Should()                              .HaveCount(4' "because there should be 3 log lines and 1 meta line");                      } else if (file.Contains(LogLevel.Error.ToString().ToLowerInvariant())) {                          ReadAllLines(file).Should()                              .HaveCount(5' "because there should be 4 log lines and 1 meta line");                      }                  }              });
Magic Number,Test,LogTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\LogTest.cs,TestPlaintextLoggingLevels,The following statement contains a magic number: TestWithConfiguration(LogLevel.Info' config' () =>              {                  foreach (var level in new[]                      { LogLevel.None' LogLevel.Error' LogLevel.Warning' LogLevel.Info' LogLevel.Verbose }) {                      Database.Log.File.Level = level;                      WriteLog.To.Database.V("TEST"' "TEST VERBOSE");                      WriteLog.To.Database.I("TEST"' "TEST INFO");                      WriteLog.To.Database.W("TEST"' "TEST WARNING");                      WriteLog.To.Database.E("TEST"' "TEST ERROR");                  }                    foreach (var file in Directory.EnumerateFiles(logDirectory)) {                      if (file.Contains(LogLevel.Verbose.ToString().ToLowerInvariant())) {                          ReadAllLines(file).Should()                              .HaveCount(2' "because there should be 1 log line and 1 meta line");                      } else if (file.Contains(LogLevel.Info.ToString().ToLowerInvariant())) {                          ReadAllLines(file).Should()                              .HaveCount(3' "because there should be 2 log lines and 1 meta line");                      } else if (file.Contains(LogLevel.Warning.ToString().ToLowerInvariant())) {                          ReadAllLines(file).Should()                              .HaveCount(4' "because there should be 3 log lines and 1 meta line");                      } else if (file.Contains(LogLevel.Error.ToString().ToLowerInvariant())) {                          ReadAllLines(file).Should()                              .HaveCount(5' "because there should be 4 log lines and 1 meta line");                      }                  }              });
Magic Number,Test,LogTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\LogTest.cs,TestPlaintextLoggingLevels,The following statement contains a magic number: TestWithConfiguration(LogLevel.Info' config' () =>              {                  foreach (var level in new[]                      { LogLevel.None' LogLevel.Error' LogLevel.Warning' LogLevel.Info' LogLevel.Verbose }) {                      Database.Log.File.Level = level;                      WriteLog.To.Database.V("TEST"' "TEST VERBOSE");                      WriteLog.To.Database.I("TEST"' "TEST INFO");                      WriteLog.To.Database.W("TEST"' "TEST WARNING");                      WriteLog.To.Database.E("TEST"' "TEST ERROR");                  }                    foreach (var file in Directory.EnumerateFiles(logDirectory)) {                      if (file.Contains(LogLevel.Verbose.ToString().ToLowerInvariant())) {                          ReadAllLines(file).Should()                              .HaveCount(2' "because there should be 1 log line and 1 meta line");                      } else if (file.Contains(LogLevel.Info.ToString().ToLowerInvariant())) {                          ReadAllLines(file).Should()                              .HaveCount(3' "because there should be 2 log lines and 1 meta line");                      } else if (file.Contains(LogLevel.Warning.ToString().ToLowerInvariant())) {                          ReadAllLines(file).Should()                              .HaveCount(4' "because there should be 3 log lines and 1 meta line");                      } else if (file.Contains(LogLevel.Error.ToString().ToLowerInvariant())) {                          ReadAllLines(file).Should()                              .HaveCount(5' "because there should be 4 log lines and 1 meta line");                      }                  }              });
Magic Number,Test,LogTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\LogTest.cs,TestPlaintextLoggingLevels,The following statement contains a magic number: TestWithConfiguration(LogLevel.Info' config' () =>              {                  foreach (var level in new[]                      { LogLevel.None' LogLevel.Error' LogLevel.Warning' LogLevel.Info' LogLevel.Verbose }) {                      Database.Log.File.Level = level;                      WriteLog.To.Database.V("TEST"' "TEST VERBOSE");                      WriteLog.To.Database.I("TEST"' "TEST INFO");                      WriteLog.To.Database.W("TEST"' "TEST WARNING");                      WriteLog.To.Database.E("TEST"' "TEST ERROR");                  }                    foreach (var file in Directory.EnumerateFiles(logDirectory)) {                      if (file.Contains(LogLevel.Verbose.ToString().ToLowerInvariant())) {                          ReadAllLines(file).Should()                              .HaveCount(2' "because there should be 1 log line and 1 meta line");                      } else if (file.Contains(LogLevel.Info.ToString().ToLowerInvariant())) {                          ReadAllLines(file).Should()                              .HaveCount(3' "because there should be 2 log lines and 1 meta line");                      } else if (file.Contains(LogLevel.Warning.ToString().ToLowerInvariant())) {                          ReadAllLines(file).Should()                              .HaveCount(4' "because there should be 3 log lines and 1 meta line");                      } else if (file.Contains(LogLevel.Error.ToString().ToLowerInvariant())) {                          ReadAllLines(file).Should()                              .HaveCount(5' "because there should be 4 log lines and 1 meta line");                      }                  }              });
Magic Number,Test,MigrationTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\MigrationTest.cs,TestOpenExistingDBv1x,The following statement contains a magic number: db.Count.Should().Be(2);
Magic Number,Test,MigrationTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\MigrationTest.cs,TestOpenExistingDBv1x,The following statement contains a magic number: i < 2
Magic Number,Test,MigrationTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\MigrationTest.cs,TestOpenExistingDBv1xNoAttachment,The following statement contains a magic number: db.Count.Should().Be(2);
Magic Number,Test,MigrationTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\MigrationTest.cs,TestOpenExistingDBv1xNoAttachment,The following statement contains a magic number: i < 2
Magic Number,Test,MigrationTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\MigrationTest.cs,TestOpenExistingDB,The following statement contains a magic number: db.Count.Should().Be(2);
Magic Number,Test,MigrationTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\MigrationTest.cs,TestOpenExistingDB,The following statement contains a magic number: i < 2
Magic Number,Test,NotificationTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\NotificationTest.cs,TestDatabaseChange,The following statement contains a magic number: Db.AddChangeListener(null' (sender' args) =>              {                  var docIDs = args.DocumentIDs;                  wa.RunAssert(() =>                  {                      args.Database.Should().Be(Db);                      docIDs.Should().HaveCount(10' "because that is the number of expected rows");                  });              });
Magic Number,Test,NotificationTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\NotificationTest.cs,TestDatabaseChange,The following statement contains a magic number: Db.InBatch(() =>              {                  for (uint i = 0; i < 10; i++) {                      var doc = new MutableDocument($"doc-{i}");                      doc.SetString("type"' "demo");                      Db.Save(doc);                  }              });
Magic Number,Test,NotificationTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\NotificationTest.cs,TestDatabaseChange,The following statement contains a magic number: wa.WaitForResult(TimeSpan.FromSeconds(5));
Magic Number,Test,NotificationTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\NotificationTest.cs,TestDocumentChange,The following statement contains a magic number: _wa.WaitForResult(TimeSpan.FromSeconds(5));
Magic Number,Test,NotificationTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\NotificationTest.cs,TestAddSameChangeListeners,The following statement contains a magic number: await Task.Delay(500);
Magic Number,Test,NotificationTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\NotificationTest.cs,TestRemoveDocumentChangeListener,The following statement contains a magic number: _wa.WaitForResult(TimeSpan.FromSeconds(5));
Magic Number,Test,NotificationTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\NotificationTest.cs,TestRemoveDocumentChangeListener,The following statement contains a magic number: await Task.Delay(500);
Magic Number,Test,NotificationTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\NotificationTest.cs,TestExternalChanges,The following statement contains a magic number: db2.AddChangeListener((sender' args) =>                  {                      args.Should().NotBeNull();                      args.DocumentIDs.Count.Should().Be(10);                      countdownDB.CurrentCount.Should().Be(1);                      countdownDB.Signal();                  });
Magic Number,Test,NotificationTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\NotificationTest.cs,TestExternalChanges,The following statement contains a magic number: db2.InBatch(() =>                  {                      for (var i = 0; i < 10; i++) {                          using (var doc = new MutableDocument($"doc-{i}")) {                              doc.SetString("type"' "demo");                              db2.Save(doc);                          }                      }                  });
Magic Number,Test,NotificationTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\NotificationTest.cs,TestExternalChanges,The following statement contains a magic number: countdownDB.Wait(TimeSpan.FromSeconds(5)).Should().BeTrue();
Magic Number,Test,NotificationTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\NotificationTest.cs,TestExternalChanges,The following statement contains a magic number: countdownDoc.Wait(TimeSpan.FromSeconds(5)).Should().BeTrue();
Magic Number,Test,PerfTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PerfTest.cs,Measure,The following statement contains a magic number: const int reps = 10;
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestRegisterAndUnregisterModel,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestRegisterAndUnregisterModel,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestRegisterAndUnregisterModel,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestRegisterAndUnregisterModel,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestRegisterAndUnregisterModel,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestRegisterAndUnregisterModel,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestRegisterAndUnregisterModel,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestRegisterAndUnregisterModel,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestRegisterAndUnregisterModel,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestRegisterAndUnregisterModel,The following statement contains a magic number: numRows.Should().Be(2);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestRegisterMultipleModelsWithSameName,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestRegisterMultipleModelsWithSameName,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestRegisterMultipleModelsWithSameName,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestRegisterMultipleModelsWithSameName,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestRegisterMultipleModelsWithSameName,The following statement contains a magic number: var rows = VerifyQuery(q' (n' result) =>                      {                          var pred = result.GetDictionary(0);                          pred.GetInt("sum").Should().Be(15);                      });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestRegisterMultipleModelsWithSameName,The following statement contains a magic number: rows = VerifyQuery(q' (n' result) =>                      {                          var pred = result.GetDictionary(0);                          pred.GetValue("sum").Should().BeNull("because the model should have been replaced");                          pred.GetArray("numbers").Should().ContainInOrder(new[] { 1L' 2L' 3L' 4L' 5L }'                              "because the document should simply be echoed back");                      });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestRegisterMultipleModelsWithSameName,The following statement contains a magic number: rows = VerifyQuery(q' (n' result) =>                      {                          var pred = result.GetDictionary(0);                          pred.GetValue("sum").Should().BeNull("because the model should have been replaced");                          pred.GetArray("numbers").Should().ContainInOrder(new[] { 1L' 2L' 3L' 4L' 5L }'                              "because the document should simply be echoed back");                      });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestRegisterMultipleModelsWithSameName,The following statement contains a magic number: rows = VerifyQuery(q' (n' result) =>                      {                          var pred = result.GetDictionary(0);                          pred.GetValue("sum").Should().BeNull("because the model should have been replaced");                          pred.GetArray("numbers").Should().ContainInOrder(new[] { 1L' 2L' 3L' 4L' 5L }'                              "because the document should simply be echoed back");                      });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestRegisterMultipleModelsWithSameName,The following statement contains a magic number: rows = VerifyQuery(q' (n' result) =>                      {                          var pred = result.GetDictionary(0);                          pred.GetValue("sum").Should().BeNull("because the model should have been replaced");                          pred.GetArray("numbers").Should().ContainInOrder(new[] { 1L' 2L' 3L' 4L' 5L }'                              "because the document should simply be echoed back");                      });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictionInputOutput,The following statement contains a magic number: doc.SetInt("number"' 2);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictionInputOutput,The following statement contains a magic number: var power = Function.Power(Expression.Property("number")' Expression.Int(2));
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictionInputOutput,The following statement contains a magic number: var map = new Dictionary<string' object>              {                  ["null"] = null'                  ["number1"] = 10'                  ["number2"] = 10.1'                  ["int_min"] = Int32.MinValue'                  ["int_max"] = Int32.MaxValue'                  ["int64_min"] = Int64.MinValue'                  ["int64_max"] = Int64.MaxValue'                  ["float_min"] = Single.MinValue'                  ["float_max"] = Single.MaxValue' // NOTE: Double limits are not guaranteed                  ["boolean_true"] = true'                  ["boolean_false"] = false'                  ["string"] = "hello"'                  ["date"] = date'                  ["expr_property"] = Expression.Property("name")'                  ["expr_value_number1"] = Expression.Value(20)'                  ["expr_value_number2"] = Expression.Value(20.1)'                  ["expr_value_boolean"] = Expression.Value(true)'                  ["expr_value_string"] = Expression.Value("hi")'                  ["expr_value_date"] = Expression.Value(date)'                  ["expr_value_null"] = Expression.Value(null)'                  ["expr_power"] = power              };
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictionInputOutput,The following statement contains a magic number: var map = new Dictionary<string' object>              {                  ["null"] = null'                  ["number1"] = 10'                  ["number2"] = 10.1'                  ["int_min"] = Int32.MinValue'                  ["int_max"] = Int32.MaxValue'                  ["int64_min"] = Int64.MinValue'                  ["int64_max"] = Int64.MaxValue'                  ["float_min"] = Single.MinValue'                  ["float_max"] = Single.MaxValue' // NOTE: Double limits are not guaranteed                  ["boolean_true"] = true'                  ["boolean_false"] = false'                  ["string"] = "hello"'                  ["date"] = date'                  ["expr_property"] = Expression.Property("name")'                  ["expr_value_number1"] = Expression.Value(20)'                  ["expr_value_number2"] = Expression.Value(20.1)'                  ["expr_value_boolean"] = Expression.Value(true)'                  ["expr_value_string"] = Expression.Value("hi")'                  ["expr_value_date"] = Expression.Value(date)'                  ["expr_value_null"] = Expression.Value(null)'                  ["expr_power"] = power              };
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictionInputOutput,The following statement contains a magic number: var map = new Dictionary<string' object>              {                  ["null"] = null'                  ["number1"] = 10'                  ["number2"] = 10.1'                  ["int_min"] = Int32.MinValue'                  ["int_max"] = Int32.MaxValue'                  ["int64_min"] = Int64.MinValue'                  ["int64_max"] = Int64.MaxValue'                  ["float_min"] = Single.MinValue'                  ["float_max"] = Single.MaxValue' // NOTE: Double limits are not guaranteed                  ["boolean_true"] = true'                  ["boolean_false"] = false'                  ["string"] = "hello"'                  ["date"] = date'                  ["expr_property"] = Expression.Property("name")'                  ["expr_value_number1"] = Expression.Value(20)'                  ["expr_value_number2"] = Expression.Value(20.1)'                  ["expr_value_boolean"] = Expression.Value(true)'                  ["expr_value_string"] = Expression.Value("hi")'                  ["expr_value_date"] = Expression.Value(date)'                  ["expr_value_null"] = Expression.Value(null)'                  ["expr_power"] = power              };
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictionInputOutput,The following statement contains a magic number: var map = new Dictionary<string' object>              {                  ["null"] = null'                  ["number1"] = 10'                  ["number2"] = 10.1'                  ["int_min"] = Int32.MinValue'                  ["int_max"] = Int32.MaxValue'                  ["int64_min"] = Int64.MinValue'                  ["int64_max"] = Int64.MaxValue'                  ["float_min"] = Single.MinValue'                  ["float_max"] = Single.MaxValue' // NOTE: Double limits are not guaranteed                  ["boolean_true"] = true'                  ["boolean_false"] = false'                  ["string"] = "hello"'                  ["date"] = date'                  ["expr_property"] = Expression.Property("name")'                  ["expr_value_number1"] = Expression.Value(20)'                  ["expr_value_number2"] = Expression.Value(20.1)'                  ["expr_value_boolean"] = Expression.Value(true)'                  ["expr_value_string"] = Expression.Value("hi")'                  ["expr_value_date"] = Expression.Value(date)'                  ["expr_value_null"] = Expression.Value(null)'                  ["expr_power"] = power              };
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictionInputOutput,The following statement contains a magic number: var rows = VerifyQuery(q' (n' result) =>                  {                      var pred = result.GetDictionary(0);                      pred.Count.Should().Be(map.Count'                          "because all properties should be serialized and recovered correctly");                      pred.GetInt("number1").Should().Be(10);                      pred.GetDouble("number2").Should().Be(10.1);                      pred.GetInt("int_min").Should().Be(Int32.MinValue);                      pred.GetInt("int_max").Should().Be(Int32.MaxValue);                      pred.GetLong("int64_min").Should().Be(Int64.MinValue);                      pred.GetLong("int64_max").Should().Be(Int64.MaxValue);                      pred.GetFloat("float_min").Should().Be(Single.MinValue);                      pred.GetFloat("float_max").Should().Be(Single.MaxValue);                      pred.GetBoolean("boolean_true").Should().BeTrue();                      pred.GetBoolean("boolean_false").Should().BeFalse();                      pred.GetString("string").Should().Be("hello");                      pred.GetDate("date").Should().Be(date);                      pred.GetString("null").Should().BeNull();                      pred.GetDictionary("dict").Should().Contain(submap);                      pred.GetArray("array").Should().ContainInOrder(subList);                        pred.GetString("expr_property").Should().Be("Daniel");                      pred.GetInt("expr_value_number1").Should().Be(20);                      pred.GetDouble("expr_value_number2").Should().Be(20.1);                      pred.GetBoolean("expr_value_boolean").Should().BeTrue();                      pred.GetString("expr_value_string").Should().Be("hi");                      pred.GetDate("expr_value_date").Should().Be(date);                      pred.GetString("expr_value_null").Should().BeNull();                      pred.GetDictionary("expr_value_dict").Should().Contain(subExprMap);                      pred.GetArray("expr_value_array").Should().ContainInOrder(subExprList);                      pred.GetInt("expr_power").Should().Be(4);                  });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictionInputOutput,The following statement contains a magic number: var rows = VerifyQuery(q' (n' result) =>                  {                      var pred = result.GetDictionary(0);                      pred.Count.Should().Be(map.Count'                          "because all properties should be serialized and recovered correctly");                      pred.GetInt("number1").Should().Be(10);                      pred.GetDouble("number2").Should().Be(10.1);                      pred.GetInt("int_min").Should().Be(Int32.MinValue);                      pred.GetInt("int_max").Should().Be(Int32.MaxValue);                      pred.GetLong("int64_min").Should().Be(Int64.MinValue);                      pred.GetLong("int64_max").Should().Be(Int64.MaxValue);                      pred.GetFloat("float_min").Should().Be(Single.MinValue);                      pred.GetFloat("float_max").Should().Be(Single.MaxValue);                      pred.GetBoolean("boolean_true").Should().BeTrue();                      pred.GetBoolean("boolean_false").Should().BeFalse();                      pred.GetString("string").Should().Be("hello");                      pred.GetDate("date").Should().Be(date);                      pred.GetString("null").Should().BeNull();                      pred.GetDictionary("dict").Should().Contain(submap);                      pred.GetArray("array").Should().ContainInOrder(subList);                        pred.GetString("expr_property").Should().Be("Daniel");                      pred.GetInt("expr_value_number1").Should().Be(20);                      pred.GetDouble("expr_value_number2").Should().Be(20.1);                      pred.GetBoolean("expr_value_boolean").Should().BeTrue();                      pred.GetString("expr_value_string").Should().Be("hi");                      pred.GetDate("expr_value_date").Should().Be(date);                      pred.GetString("expr_value_null").Should().BeNull();                      pred.GetDictionary("expr_value_dict").Should().Contain(subExprMap);                      pred.GetArray("expr_value_array").Should().ContainInOrder(subExprList);                      pred.GetInt("expr_power").Should().Be(4);                  });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictionInputOutput,The following statement contains a magic number: var rows = VerifyQuery(q' (n' result) =>                  {                      var pred = result.GetDictionary(0);                      pred.Count.Should().Be(map.Count'                          "because all properties should be serialized and recovered correctly");                      pred.GetInt("number1").Should().Be(10);                      pred.GetDouble("number2").Should().Be(10.1);                      pred.GetInt("int_min").Should().Be(Int32.MinValue);                      pred.GetInt("int_max").Should().Be(Int32.MaxValue);                      pred.GetLong("int64_min").Should().Be(Int64.MinValue);                      pred.GetLong("int64_max").Should().Be(Int64.MaxValue);                      pred.GetFloat("float_min").Should().Be(Single.MinValue);                      pred.GetFloat("float_max").Should().Be(Single.MaxValue);                      pred.GetBoolean("boolean_true").Should().BeTrue();                      pred.GetBoolean("boolean_false").Should().BeFalse();                      pred.GetString("string").Should().Be("hello");                      pred.GetDate("date").Should().Be(date);                      pred.GetString("null").Should().BeNull();                      pred.GetDictionary("dict").Should().Contain(submap);                      pred.GetArray("array").Should().ContainInOrder(subList);                        pred.GetString("expr_property").Should().Be("Daniel");                      pred.GetInt("expr_value_number1").Should().Be(20);                      pred.GetDouble("expr_value_number2").Should().Be(20.1);                      pred.GetBoolean("expr_value_boolean").Should().BeTrue();                      pred.GetString("expr_value_string").Should().Be("hi");                      pred.GetDate("expr_value_date").Should().Be(date);                      pred.GetString("expr_value_null").Should().BeNull();                      pred.GetDictionary("expr_value_dict").Should().Contain(subExprMap);                      pred.GetArray("expr_value_array").Should().ContainInOrder(subExprList);                      pred.GetInt("expr_power").Should().Be(4);                  });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictionInputOutput,The following statement contains a magic number: var rows = VerifyQuery(q' (n' result) =>                  {                      var pred = result.GetDictionary(0);                      pred.Count.Should().Be(map.Count'                          "because all properties should be serialized and recovered correctly");                      pred.GetInt("number1").Should().Be(10);                      pred.GetDouble("number2").Should().Be(10.1);                      pred.GetInt("int_min").Should().Be(Int32.MinValue);                      pred.GetInt("int_max").Should().Be(Int32.MaxValue);                      pred.GetLong("int64_min").Should().Be(Int64.MinValue);                      pred.GetLong("int64_max").Should().Be(Int64.MaxValue);                      pred.GetFloat("float_min").Should().Be(Single.MinValue);                      pred.GetFloat("float_max").Should().Be(Single.MaxValue);                      pred.GetBoolean("boolean_true").Should().BeTrue();                      pred.GetBoolean("boolean_false").Should().BeFalse();                      pred.GetString("string").Should().Be("hello");                      pred.GetDate("date").Should().Be(date);                      pred.GetString("null").Should().BeNull();                      pred.GetDictionary("dict").Should().Contain(submap);                      pred.GetArray("array").Should().ContainInOrder(subList);                        pred.GetString("expr_property").Should().Be("Daniel");                      pred.GetInt("expr_value_number1").Should().Be(20);                      pred.GetDouble("expr_value_number2").Should().Be(20.1);                      pred.GetBoolean("expr_value_boolean").Should().BeTrue();                      pred.GetString("expr_value_string").Should().Be("hi");                      pred.GetDate("expr_value_date").Should().Be(date);                      pred.GetString("expr_value_null").Should().BeNull();                      pred.GetDictionary("expr_value_dict").Should().Contain(subExprMap);                      pred.GetArray("expr_value_array").Should().ContainInOrder(subExprList);                      pred.GetInt("expr_power").Should().Be(4);                  });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictionInputOutput,The following statement contains a magic number: var rows = VerifyQuery(q' (n' result) =>                  {                      var pred = result.GetDictionary(0);                      pred.Count.Should().Be(map.Count'                          "because all properties should be serialized and recovered correctly");                      pred.GetInt("number1").Should().Be(10);                      pred.GetDouble("number2").Should().Be(10.1);                      pred.GetInt("int_min").Should().Be(Int32.MinValue);                      pred.GetInt("int_max").Should().Be(Int32.MaxValue);                      pred.GetLong("int64_min").Should().Be(Int64.MinValue);                      pred.GetLong("int64_max").Should().Be(Int64.MaxValue);                      pred.GetFloat("float_min").Should().Be(Single.MinValue);                      pred.GetFloat("float_max").Should().Be(Single.MaxValue);                      pred.GetBoolean("boolean_true").Should().BeTrue();                      pred.GetBoolean("boolean_false").Should().BeFalse();                      pred.GetString("string").Should().Be("hello");                      pred.GetDate("date").Should().Be(date);                      pred.GetString("null").Should().BeNull();                      pred.GetDictionary("dict").Should().Contain(submap);                      pred.GetArray("array").Should().ContainInOrder(subList);                        pred.GetString("expr_property").Should().Be("Daniel");                      pred.GetInt("expr_value_number1").Should().Be(20);                      pred.GetDouble("expr_value_number2").Should().Be(20.1);                      pred.GetBoolean("expr_value_boolean").Should().BeTrue();                      pred.GetString("expr_value_string").Should().Be("hi");                      pred.GetDate("expr_value_date").Should().Be(date);                      pred.GetString("expr_value_null").Should().BeNull();                      pred.GetDictionary("expr_value_dict").Should().Contain(subExprMap);                      pred.GetArray("expr_value_array").Should().ContainInOrder(subExprList);                      pred.GetInt("expr_power").Should().Be(4);                  });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestQueryValueFromDictionaryResult,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestQueryValueFromDictionaryResult,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestQueryValueFromDictionaryResult,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestQueryValueFromDictionaryResult,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestQueryValueFromDictionaryResult,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestQueryValueFromDictionaryResult,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestQueryValueFromDictionaryResult,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestQueryValueFromDictionaryResult,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestQueryValueFromDictionaryResult,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestQueryValueFromDictionaryResult,The following statement contains a magic number: numRows.Should().Be(2);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestQueryPredictionValues,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestQueryPredictionValues,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestQueryPredictionValues,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestQueryPredictionValues,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestQueryPredictionValues,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestQueryPredictionValues,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestQueryPredictionValues,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestQueryPredictionValues,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestQueryPredictionValues,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestQueryPredictionValues,The following statement contains a magic number: var rows = VerifyQuery(q' (n' result) =>                  {                      var numbers = result.GetArray(0);                      var dict = new MutableDictionaryObject();                      dict.SetArray("numbers"' numbers);                      var expected = aggregateModel.Predict(dict);                        var sum = result.GetInt(1);                      var min = result.GetInt(2);                      var max = result.GetInt(3);                      var avg = result.GetDouble(4);                        result.GetInt("sum").Should().Be(sum);                      result.GetInt("min").Should().Be(min);                      result.GetInt("max").Should().Be(max);                      result.GetDouble("avg").Should().Be(avg);                        sum.Should().Be(expected.GetInt("sum"));                      min.Should().Be(expected.GetInt("min"));                      max.Should().Be(expected.GetInt("max"));                      avg.Should().Be(expected.GetDouble("avg"));                  });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestQueryPredictionValues,The following statement contains a magic number: var rows = VerifyQuery(q' (n' result) =>                  {                      var numbers = result.GetArray(0);                      var dict = new MutableDictionaryObject();                      dict.SetArray("numbers"' numbers);                      var expected = aggregateModel.Predict(dict);                        var sum = result.GetInt(1);                      var min = result.GetInt(2);                      var max = result.GetInt(3);                      var avg = result.GetDouble(4);                        result.GetInt("sum").Should().Be(sum);                      result.GetInt("min").Should().Be(min);                      result.GetInt("max").Should().Be(max);                      result.GetDouble("avg").Should().Be(avg);                        sum.Should().Be(expected.GetInt("sum"));                      min.Should().Be(expected.GetInt("min"));                      max.Should().Be(expected.GetInt("max"));                      avg.Should().Be(expected.GetDouble("avg"));                  });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestQueryPredictionValues,The following statement contains a magic number: var rows = VerifyQuery(q' (n' result) =>                  {                      var numbers = result.GetArray(0);                      var dict = new MutableDictionaryObject();                      dict.SetArray("numbers"' numbers);                      var expected = aggregateModel.Predict(dict);                        var sum = result.GetInt(1);                      var min = result.GetInt(2);                      var max = result.GetInt(3);                      var avg = result.GetDouble(4);                        result.GetInt("sum").Should().Be(sum);                      result.GetInt("min").Should().Be(min);                      result.GetInt("max").Should().Be(max);                      result.GetDouble("avg").Should().Be(avg);                        sum.Should().Be(expected.GetInt("sum"));                      min.Should().Be(expected.GetInt("min"));                      max.Should().Be(expected.GetInt("max"));                      avg.Should().Be(expected.GetDouble("avg"));                  });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestQueryPredictionValues,The following statement contains a magic number: rows.Should().Be(2);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestQueryWithBlobParameter,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' r) =>                      {                          r.GetLong(0).Should().Be(14' "because that is the word count of the sentence in the parameter");                      });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestWhere,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestWhere,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestWhere,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestWhere,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestWhere,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestWhere,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestWhere,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestWhere,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestWhere,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestWhere,The following statement contains a magic number: var rows = VerifyQuery(q' (n' result) =>                  {                      var sum = result.GetInt(1);                      var min = result.GetInt(2);                      var max = result.GetInt(3);                      var avg = result.GetDouble(4);                        sum.Should().Be(15);                      min.Should().Be(1);                      max.Should().Be(5);                      avg.Should().Be(3.0);                  });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestWhere,The following statement contains a magic number: var rows = VerifyQuery(q' (n' result) =>                  {                      var sum = result.GetInt(1);                      var min = result.GetInt(2);                      var max = result.GetInt(3);                      var avg = result.GetDouble(4);                        sum.Should().Be(15);                      min.Should().Be(1);                      max.Should().Be(5);                      avg.Should().Be(3.0);                  });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestWhere,The following statement contains a magic number: var rows = VerifyQuery(q' (n' result) =>                  {                      var sum = result.GetInt(1);                      var min = result.GetInt(2);                      var max = result.GetInt(3);                      var avg = result.GetDouble(4);                        sum.Should().Be(15);                      min.Should().Be(1);                      max.Should().Be(5);                      avg.Should().Be(3.0);                  });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestWhere,The following statement contains a magic number: var rows = VerifyQuery(q' (n' result) =>                  {                      var sum = result.GetInt(1);                      var min = result.GetInt(2);                      var max = result.GetInt(3);                      var avg = result.GetDouble(4);                        sum.Should().Be(15);                      min.Should().Be(1);                      max.Should().Be(5);                      avg.Should().Be(3.0);                  });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestWhere,The following statement contains a magic number: var rows = VerifyQuery(q' (n' result) =>                  {                      var sum = result.GetInt(1);                      var min = result.GetInt(2);                      var max = result.GetInt(3);                      var avg = result.GetDouble(4);                        sum.Should().Be(15);                      min.Should().Be(1);                      max.Should().Be(5);                      avg.Should().Be(3.0);                  });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestWhere,The following statement contains a magic number: var rows = VerifyQuery(q' (n' result) =>                  {                      var sum = result.GetInt(1);                      var min = result.GetInt(2);                      var max = result.GetInt(3);                      var avg = result.GetDouble(4);                        sum.Should().Be(15);                      min.Should().Be(1);                      max.Should().Be(5);                      avg.Should().Be(3.0);                  });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestOrderBy,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestOrderBy,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestOrderBy,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestOrderBy,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestOrderBy,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestOrderBy,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestOrderBy,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestOrderBy,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestOrderBy,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestOrderBy,The following statement contains a magic number: var rows = VerifyQuery(q' (n' result) =>                  {                      var sum = result.GetInt(0);                      sum.Should().Be(n == 1 ? 40 : 15);                  });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestOrderBy,The following statement contains a magic number: var rows = VerifyQuery(q' (n' result) =>                  {                      var sum = result.GetInt(0);                      sum.Should().Be(n == 1 ? 40 : 15);                  });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestOrderBy,The following statement contains a magic number: rows.Should().Be(2);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestModelReturningNull,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestModelReturningNull,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestModelReturningNull,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestModelReturningNull,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestModelReturningNull,The following statement contains a magic number: var rows = VerifyQuery(q' (n' result) =>                  {                      if (n == 1) {                          result.GetDictionary(0).Should().NotBeNull();                          result.GetInt(1).Should().Be(15);                      } else {                          result.GetDictionary(0).Should().BeNull();                          result.GetValue(1).Should().BeNull();                      }                  });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestModelReturningNull,The following statement contains a magic number: rows.Should().Be(2);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestModelReturningNull,The following statement contains a magic number: var rows = VerifyQuery(q' (n' result) =>                  {                      result.GetDictionary(0).Should().NotBeNull();                      result.GetInt(1).Should().Be(15);                  });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndex,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndex,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndex,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndex,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndex,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndex,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndex,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndex,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndex,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndex,The following statement contains a magic number: aggregateModel.NumberOfCalls.Should().Be(2'                      "because the value should be cached and not call the prediction function again");
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndexMultipleValues,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndexMultipleValues,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndexMultipleValues,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndexMultipleValues,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndexMultipleValues,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndexMultipleValues,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndexMultipleValues,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndexMultipleValues,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndexMultipleValues,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndexMultipleValues,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' r) =>                  {                      r.Should().Match<Result>(x => x.GetLong(0) == 15 || x.GetLong(1) == 8);                  });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndexMultipleValues,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' r) =>                  {                      r.Should().Match<Result>(x => x.GetLong(0) == 15 || x.GetLong(1) == 8);                  });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndexMultipleValues,The following statement contains a magic number: numRows.Should().Be(2);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndexCompoundValues,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndexCompoundValues,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndexCompoundValues,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndexCompoundValues,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndexCompoundValues,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndexCompoundValues,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndexCompoundValues,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndexCompoundValues,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndexCompoundValues,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndexCompoundValues,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' r) =>                  {                      r.GetLong(0).Should().Be(15);                      r.GetLong(1).Should().Be(3);                  });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndexCompoundValues,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' r) =>                  {                      r.GetLong(0).Should().Be(15);                      r.GetLong(1).Should().Be(3);                  });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestValueIndexCompoundValues,The following statement contains a magic number: aggregateModel.NumberOfCalls.Should().Be(4);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndex,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndex,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndex,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndex,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndex,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndex,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndex,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndex,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndex,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndex,The following statement contains a magic number: var rows = VerifyQuery(q' (n' result) => { result.GetInt(1).Should().Be(15); });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndex,The following statement contains a magic number: aggregateModel.NumberOfCalls.Should().Be(2);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexOnValues,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexOnValues,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexOnValues,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexOnValues,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexOnValues,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexOnValues,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexOnValues,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexOnValues,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexOnValues,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexOnValues,The following statement contains a magic number: var rows = VerifyQuery(q' (n' result) => { result.GetInt(1).Should().Be(15); });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexOnValues,The following statement contains a magic number: aggregateModel.NumberOfCalls.Should().Be(2);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexMultipleValues,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexMultipleValues,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexMultipleValues,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexMultipleValues,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexMultipleValues,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexMultipleValues,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexMultipleValues,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexMultipleValues,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexMultipleValues,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexMultipleValues,The following statement contains a magic number: var rows = VerifyQuery(q' (n' result) =>                      {                          result.Should().Match<Result>(x => x.GetInt(0) == 15 || x.GetInt(1) == 8);                      });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexMultipleValues,The following statement contains a magic number: var rows = VerifyQuery(q' (n' result) =>                      {                          result.Should().Match<Result>(x => x.GetInt(0) == 15 || x.GetInt(1) == 8);                      });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexMultipleValues,The following statement contains a magic number: rows.Should().Be(2);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexMultipleValues,The following statement contains a magic number: aggregateModel.NumberOfCalls.Should().Be(2);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexCompoundValue,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexCompoundValue,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexCompoundValue,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexCompoundValue,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexCompoundValue,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexCompoundValue,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexCompoundValue,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexCompoundValue,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexCompoundValue,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexCompoundValue,The following statement contains a magic number: var rows = VerifyQuery(q' (n' result) =>                  {                      result.GetInt(0).Should().Be(15);                      result.GetInt(1).Should().Be(3);                  });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexCompoundValue,The following statement contains a magic number: var rows = VerifyQuery(q' (n' result) =>                  {                      result.GetInt(0).Should().Be(15);                      result.GetInt(1).Should().Be(3);                  });
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestPredictiveIndexCompoundValue,The following statement contains a magic number: aggregateModel.NumberOfCalls.Should().Be(2);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestDeletePredictiveIndex,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestDeletePredictiveIndex,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestDeletePredictiveIndex,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestDeletePredictiveIndex,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestDeletePredictiveIndex,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestDeletePredictiveIndex,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestDeletePredictiveIndex,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestDeletePredictiveIndex,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestDeletePredictiveIndex,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestDeletePredictiveIndex,The following statement contains a magic number: aggregateModel.NumberOfCalls.Should().Be(2);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestDeletePredictiveIndex,The following statement contains a magic number: aggregateModel.NumberOfCalls.Should().Be(2);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestDeletePredictiveIndexesSharedCache,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestDeletePredictiveIndexesSharedCache,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestDeletePredictiveIndexesSharedCache,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestDeletePredictiveIndexesSharedCache,The following statement contains a magic number: CreateDocument(1' 2' 3' 4' 5);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestDeletePredictiveIndexesSharedCache,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestDeletePredictiveIndexesSharedCache,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestDeletePredictiveIndexesSharedCache,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestDeletePredictiveIndexesSharedCache,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestDeletePredictiveIndexesSharedCache,The following statement contains a magic number: CreateDocument(6' 7' 8' 9' 10);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestDeletePredictiveIndexesSharedCache,The following statement contains a magic number: rows.Should().Be(2);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestDeletePredictiveIndexesSharedCache,The following statement contains a magic number: aggregateModel.NumberOfCalls.Should().Be(2);
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestDeletePredictiveIndexesSharedCache,The following statement contains a magic number: i < 2
Magic Number,Test,PredictiveQueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\PredictiveQueryTest.cs,TestDistanceFunction,The following statement contains a magic number: doc.SetValue("distance"' t[2]);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryDocumentExpirationAfterDocsExpired,The following statement contains a magic number: var dto2 = DateTimeOffset.Now.AddSeconds(2);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryDocumentExpirationAfterDocsExpired,The following statement contains a magic number: var dto3 = DateTimeOffset.Now.AddSeconds(3);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryDocumentExpirationAfterDocsExpired,The following statement contains a magic number: var dto4 = DateTimeOffset.Now.AddSeconds(4);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryDocumentExpirationAfterDocsExpired,The following statement contains a magic number: var dto6InMS = DateTimeOffset.Now.AddSeconds(6).ToUnixTimeMilliseconds();
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryDocumentExpirationAfterDocsExpired,The following statement contains a magic number: doc1a.SetInt("answer"' 42);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryDocumentExpirationAfterDocsExpired,The following statement contains a magic number: doc1b.SetInt("answer"' 42);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryDocumentExpirationAfterDocsExpired,The following statement contains a magic number: doc1c.SetInt("answer"' 42);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryDocumentExpirationAfterDocsExpired,The following statement contains a magic number: Thread.Sleep(4100);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryDocumentExpirationAfterDocsExpired,The following statement contains a magic number: Try.Assertion(() =>              {                  using (var r = QueryBuilder.Select(DocID' Expiration)                      .From(DataSource.Database(Db))                      .Where(Meta.Expiration                          .LessThan(Expression.Long(dto6InMS)))) {                        var b = r.Execute().AllResults();                      b.Count.Should().Be(0);                  }              }).Times(5).Delay(TimeSpan.FromMilliseconds(500)).Go().Should().BeTrue();
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryDocumentExpirationAfterDocsExpired,The following statement contains a magic number: Try.Assertion(() =>              {                  using (var r = QueryBuilder.Select(DocID' Expiration)                      .From(DataSource.Database(Db))                      .Where(Meta.Expiration                          .LessThan(Expression.Long(dto6InMS)))) {                        var b = r.Execute().AllResults();                      b.Count.Should().Be(0);                  }              }).Times(5).Delay(TimeSpan.FromMilliseconds(500)).Go().Should().BeTrue();
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryDocumentExpiration,The following statement contains a magic number: var dto20 = DateTimeOffset.Now.AddSeconds(20);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryDocumentExpiration,The following statement contains a magic number: var dto30 = DateTimeOffset.Now.AddSeconds(30);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryDocumentExpiration,The following statement contains a magic number: var dto40 = DateTimeOffset.Now.AddSeconds(40);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryDocumentExpiration,The following statement contains a magic number: var dto60InMS = DateTimeOffset.Now.AddSeconds(60).ToUnixTimeMilliseconds();
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryDocumentExpiration,The following statement contains a magic number: doc1a.SetInt("answer"' 42);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryDocumentExpiration,The following statement contains a magic number: doc1b.SetInt("answer"' 42);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryDocumentExpiration,The following statement contains a magic number: doc1c.SetInt("answer"' 42);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryDocumentExpiration,The following statement contains a magic number: b.Should().HaveCount(3);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryDocumentIsNotDeleted,The following statement contains a magic number: doc1.SetInt("answer"' 42);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryDocumentIsNotDeleted,The following statement contains a magic number: doc2.SetInt("answer"' 42);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryDocumentIsDeleted,The following statement contains a magic number: doc1.SetInt("answer"' 42);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryDocumentIsDeleted,The following statement contains a magic number: doc2.SetInt("answer"' 42);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestNoWhereQuery,The following statement contains a magic number: numRows.Should().Be(100' "because otherwise the incorrect number of rows was returned");
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereNullOrMissing,The following statement contains a magic number: doc2.SetInt("age"' 20);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereComparison,The following statement contains a magic number: var l3 = new Func<int' bool>(n => n < 3);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereComparison,The following statement contains a magic number: var le3 = new Func<int' bool>(n => n <= 3);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereComparison,The following statement contains a magic number: var g6 = new Func<int' bool>(n => n > 6);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereComparison,The following statement contains a magic number: var ge6 = new Func<int' bool>(n => n >= 6);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereComparison,The following statement contains a magic number: var e7 = new Func<int' bool>(n => n == 7);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereComparison,The following statement contains a magic number: var ne7 = new Func<int' bool>(n => n != 7);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereComparison,The following statement contains a magic number: var cases = new[] {                  Tuple.Create(n1.LessThan(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)l3)'                  Tuple.Create(n1.LessThanOrEqualTo(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)le3)'                  Tuple.Create(n1.GreaterThan(Expression.Int(6))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)g6)'                  Tuple.Create(n1.GreaterThanOrEqualTo(Expression.Int(6))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)ge6)'                  Tuple.Create(n1.EqualTo(Expression.Int(7))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)e7)'                  Tuple.Create(n1.NotEqualTo(Expression.Int(7))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)ne7)              };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereComparison,The following statement contains a magic number: var cases = new[] {                  Tuple.Create(n1.LessThan(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)l3)'                  Tuple.Create(n1.LessThanOrEqualTo(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)le3)'                  Tuple.Create(n1.GreaterThan(Expression.Int(6))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)g6)'                  Tuple.Create(n1.GreaterThanOrEqualTo(Expression.Int(6))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)ge6)'                  Tuple.Create(n1.EqualTo(Expression.Int(7))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)e7)'                  Tuple.Create(n1.NotEqualTo(Expression.Int(7))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)ne7)              };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereComparison,The following statement contains a magic number: var cases = new[] {                  Tuple.Create(n1.LessThan(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)l3)'                  Tuple.Create(n1.LessThanOrEqualTo(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)le3)'                  Tuple.Create(n1.GreaterThan(Expression.Int(6))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)g6)'                  Tuple.Create(n1.GreaterThanOrEqualTo(Expression.Int(6))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)ge6)'                  Tuple.Create(n1.EqualTo(Expression.Int(7))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)e7)'                  Tuple.Create(n1.NotEqualTo(Expression.Int(7))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)ne7)              };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereComparison,The following statement contains a magic number: var cases = new[] {                  Tuple.Create(n1.LessThan(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)l3)'                  Tuple.Create(n1.LessThanOrEqualTo(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)le3)'                  Tuple.Create(n1.GreaterThan(Expression.Int(6))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)g6)'                  Tuple.Create(n1.GreaterThanOrEqualTo(Expression.Int(6))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)ge6)'                  Tuple.Create(n1.EqualTo(Expression.Int(7))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)e7)'                  Tuple.Create(n1.NotEqualTo(Expression.Int(7))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)ne7)              };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereComparison,The following statement contains a magic number: var cases = new[] {                  Tuple.Create(n1.LessThan(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)l3)'                  Tuple.Create(n1.LessThanOrEqualTo(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)le3)'                  Tuple.Create(n1.GreaterThan(Expression.Int(6))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)g6)'                  Tuple.Create(n1.GreaterThanOrEqualTo(Expression.Int(6))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)ge6)'                  Tuple.Create(n1.EqualTo(Expression.Int(7))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)e7)'                  Tuple.Create(n1.NotEqualTo(Expression.Int(7))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)ne7)              };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereComparison,The following statement contains a magic number: var cases = new[] {                  Tuple.Create(n1.LessThan(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)l3)'                  Tuple.Create(n1.LessThanOrEqualTo(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)le3)'                  Tuple.Create(n1.GreaterThan(Expression.Int(6))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)g6)'                  Tuple.Create(n1.GreaterThanOrEqualTo(Expression.Int(6))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)ge6)'                  Tuple.Create(n1.EqualTo(Expression.Int(7))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)e7)'                  Tuple.Create(n1.NotEqualTo(Expression.Int(7))'                      (Func<IDictionary<string' object>' object' bool>) TestWhereCompareValidator' (object)ne7)              };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereComparison,The following statement contains a magic number: LoadNumbers(10);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereComparison,The following statement contains a magic number: RunTestWithNumbers(new[] { 2' 3' 4' 5' 1' 9 }' cases);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereComparison,The following statement contains a magic number: RunTestWithNumbers(new[] { 2' 3' 4' 5' 1' 9 }' cases);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereComparison,The following statement contains a magic number: RunTestWithNumbers(new[] { 2' 3' 4' 5' 1' 9 }' cases);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereComparison,The following statement contains a magic number: RunTestWithNumbers(new[] { 2' 3' 4' 5' 1' 9 }' cases);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereComparison,The following statement contains a magic number: RunTestWithNumbers(new[] { 2' 3' 4' 5' 1' 9 }' cases);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: var m2g8 = new Func<int' int' bool>((x1' x2) => x1 * 2 > 8);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: var m2g8 = new Func<int' int' bool>((x1' x2) => x1 * 2 > 8);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: var d2g3 = new Func<int' int' bool>((x1' x2) => x1 / 2 > 3);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: var d2g3 = new Func<int' int' bool>((x1' x2) => x1 / 2 > 3);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: var m2e0 = new Func<int' int' bool>((x1' x2) => (x1 % 2) == 0);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: var a5g10 = new Func<int' int' bool>((x1' x2) => x1 + 5 > 10);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: var a5g10 = new Func<int' int' bool>((x1' x2) => x1 + 5 > 10);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: var s5g0 = new Func<int' int' bool>((x1' x2) => x1 - 5 > 0);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: var mn2g10 = new Func<int' int' bool>((x1' x2) => x1 * x2 > 10);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: var dn1g3 = new Func<int' int' bool>((x1' x2) => x2 / x1 > 3);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: var an2e10 = new Func<int' int' bool>((x1' x2) => x1 + x2 == 10);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: var cases = new[] {                  Tuple.Create(n1.Multiply(Expression.Int(2)).GreaterThan(Expression.Int(8))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)m2g8)'                  Tuple.Create(n1.Divide(Expression.Int(2)).GreaterThan(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)d2g3)'                  Tuple.Create(n1.Modulo(Expression.Int(2)).EqualTo(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)m2e0)'                  Tuple.Create(n1.Add(Expression.Int(5)).GreaterThan(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)a5g10)'                  Tuple.Create(n1.Subtract(Expression.Int(5)).GreaterThan(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)s5g0)'                  Tuple.Create(n1.Multiply(n2).GreaterThan(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)mn2g10)'                  Tuple.Create(n2.Divide(n1).GreaterThan(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)dn1g3)'                  Tuple.Create(n1.Modulo(n2).EqualTo(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)mn2e0)'                  Tuple.Create(n1.Add(n2).EqualTo(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)an2e10)'                  Tuple.Create(n1.Subtract(n2).GreaterThan(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)sn2g0)              };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: var cases = new[] {                  Tuple.Create(n1.Multiply(Expression.Int(2)).GreaterThan(Expression.Int(8))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)m2g8)'                  Tuple.Create(n1.Divide(Expression.Int(2)).GreaterThan(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)d2g3)'                  Tuple.Create(n1.Modulo(Expression.Int(2)).EqualTo(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)m2e0)'                  Tuple.Create(n1.Add(Expression.Int(5)).GreaterThan(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)a5g10)'                  Tuple.Create(n1.Subtract(Expression.Int(5)).GreaterThan(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)s5g0)'                  Tuple.Create(n1.Multiply(n2).GreaterThan(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)mn2g10)'                  Tuple.Create(n2.Divide(n1).GreaterThan(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)dn1g3)'                  Tuple.Create(n1.Modulo(n2).EqualTo(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)mn2e0)'                  Tuple.Create(n1.Add(n2).EqualTo(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)an2e10)'                  Tuple.Create(n1.Subtract(n2).GreaterThan(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)sn2g0)              };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: var cases = new[] {                  Tuple.Create(n1.Multiply(Expression.Int(2)).GreaterThan(Expression.Int(8))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)m2g8)'                  Tuple.Create(n1.Divide(Expression.Int(2)).GreaterThan(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)d2g3)'                  Tuple.Create(n1.Modulo(Expression.Int(2)).EqualTo(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)m2e0)'                  Tuple.Create(n1.Add(Expression.Int(5)).GreaterThan(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)a5g10)'                  Tuple.Create(n1.Subtract(Expression.Int(5)).GreaterThan(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)s5g0)'                  Tuple.Create(n1.Multiply(n2).GreaterThan(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)mn2g10)'                  Tuple.Create(n2.Divide(n1).GreaterThan(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)dn1g3)'                  Tuple.Create(n1.Modulo(n2).EqualTo(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)mn2e0)'                  Tuple.Create(n1.Add(n2).EqualTo(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)an2e10)'                  Tuple.Create(n1.Subtract(n2).GreaterThan(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)sn2g0)              };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: var cases = new[] {                  Tuple.Create(n1.Multiply(Expression.Int(2)).GreaterThan(Expression.Int(8))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)m2g8)'                  Tuple.Create(n1.Divide(Expression.Int(2)).GreaterThan(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)d2g3)'                  Tuple.Create(n1.Modulo(Expression.Int(2)).EqualTo(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)m2e0)'                  Tuple.Create(n1.Add(Expression.Int(5)).GreaterThan(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)a5g10)'                  Tuple.Create(n1.Subtract(Expression.Int(5)).GreaterThan(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)s5g0)'                  Tuple.Create(n1.Multiply(n2).GreaterThan(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)mn2g10)'                  Tuple.Create(n2.Divide(n1).GreaterThan(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)dn1g3)'                  Tuple.Create(n1.Modulo(n2).EqualTo(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)mn2e0)'                  Tuple.Create(n1.Add(n2).EqualTo(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)an2e10)'                  Tuple.Create(n1.Subtract(n2).GreaterThan(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)sn2g0)              };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: var cases = new[] {                  Tuple.Create(n1.Multiply(Expression.Int(2)).GreaterThan(Expression.Int(8))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)m2g8)'                  Tuple.Create(n1.Divide(Expression.Int(2)).GreaterThan(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)d2g3)'                  Tuple.Create(n1.Modulo(Expression.Int(2)).EqualTo(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)m2e0)'                  Tuple.Create(n1.Add(Expression.Int(5)).GreaterThan(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)a5g10)'                  Tuple.Create(n1.Subtract(Expression.Int(5)).GreaterThan(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)s5g0)'                  Tuple.Create(n1.Multiply(n2).GreaterThan(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)mn2g10)'                  Tuple.Create(n2.Divide(n1).GreaterThan(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)dn1g3)'                  Tuple.Create(n1.Modulo(n2).EqualTo(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)mn2e0)'                  Tuple.Create(n1.Add(n2).EqualTo(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)an2e10)'                  Tuple.Create(n1.Subtract(n2).GreaterThan(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)sn2g0)              };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: var cases = new[] {                  Tuple.Create(n1.Multiply(Expression.Int(2)).GreaterThan(Expression.Int(8))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)m2g8)'                  Tuple.Create(n1.Divide(Expression.Int(2)).GreaterThan(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)d2g3)'                  Tuple.Create(n1.Modulo(Expression.Int(2)).EqualTo(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)m2e0)'                  Tuple.Create(n1.Add(Expression.Int(5)).GreaterThan(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)a5g10)'                  Tuple.Create(n1.Subtract(Expression.Int(5)).GreaterThan(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)s5g0)'                  Tuple.Create(n1.Multiply(n2).GreaterThan(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)mn2g10)'                  Tuple.Create(n2.Divide(n1).GreaterThan(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)dn1g3)'                  Tuple.Create(n1.Modulo(n2).EqualTo(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)mn2e0)'                  Tuple.Create(n1.Add(n2).EqualTo(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)an2e10)'                  Tuple.Create(n1.Subtract(n2).GreaterThan(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)sn2g0)              };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: var cases = new[] {                  Tuple.Create(n1.Multiply(Expression.Int(2)).GreaterThan(Expression.Int(8))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)m2g8)'                  Tuple.Create(n1.Divide(Expression.Int(2)).GreaterThan(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)d2g3)'                  Tuple.Create(n1.Modulo(Expression.Int(2)).EqualTo(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)m2e0)'                  Tuple.Create(n1.Add(Expression.Int(5)).GreaterThan(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)a5g10)'                  Tuple.Create(n1.Subtract(Expression.Int(5)).GreaterThan(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)s5g0)'                  Tuple.Create(n1.Multiply(n2).GreaterThan(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)mn2g10)'                  Tuple.Create(n2.Divide(n1).GreaterThan(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)dn1g3)'                  Tuple.Create(n1.Modulo(n2).EqualTo(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)mn2e0)'                  Tuple.Create(n1.Add(n2).EqualTo(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)an2e10)'                  Tuple.Create(n1.Subtract(n2).GreaterThan(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)sn2g0)              };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: var cases = new[] {                  Tuple.Create(n1.Multiply(Expression.Int(2)).GreaterThan(Expression.Int(8))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)m2g8)'                  Tuple.Create(n1.Divide(Expression.Int(2)).GreaterThan(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)d2g3)'                  Tuple.Create(n1.Modulo(Expression.Int(2)).EqualTo(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)m2e0)'                  Tuple.Create(n1.Add(Expression.Int(5)).GreaterThan(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)a5g10)'                  Tuple.Create(n1.Subtract(Expression.Int(5)).GreaterThan(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)s5g0)'                  Tuple.Create(n1.Multiply(n2).GreaterThan(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)mn2g10)'                  Tuple.Create(n2.Divide(n1).GreaterThan(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)dn1g3)'                  Tuple.Create(n1.Modulo(n2).EqualTo(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)mn2e0)'                  Tuple.Create(n1.Add(n2).EqualTo(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)an2e10)'                  Tuple.Create(n1.Subtract(n2).GreaterThan(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)sn2g0)              };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: var cases = new[] {                  Tuple.Create(n1.Multiply(Expression.Int(2)).GreaterThan(Expression.Int(8))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)m2g8)'                  Tuple.Create(n1.Divide(Expression.Int(2)).GreaterThan(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)d2g3)'                  Tuple.Create(n1.Modulo(Expression.Int(2)).EqualTo(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)m2e0)'                  Tuple.Create(n1.Add(Expression.Int(5)).GreaterThan(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)a5g10)'                  Tuple.Create(n1.Subtract(Expression.Int(5)).GreaterThan(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)s5g0)'                  Tuple.Create(n1.Multiply(n2).GreaterThan(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)mn2g10)'                  Tuple.Create(n2.Divide(n1).GreaterThan(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)dn1g3)'                  Tuple.Create(n1.Modulo(n2).EqualTo(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)mn2e0)'                  Tuple.Create(n1.Add(n2).EqualTo(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)an2e10)'                  Tuple.Create(n1.Subtract(n2).GreaterThan(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)sn2g0)              };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: var cases = new[] {                  Tuple.Create(n1.Multiply(Expression.Int(2)).GreaterThan(Expression.Int(8))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)m2g8)'                  Tuple.Create(n1.Divide(Expression.Int(2)).GreaterThan(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)d2g3)'                  Tuple.Create(n1.Modulo(Expression.Int(2)).EqualTo(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)m2e0)'                  Tuple.Create(n1.Add(Expression.Int(5)).GreaterThan(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)a5g10)'                  Tuple.Create(n1.Subtract(Expression.Int(5)).GreaterThan(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)s5g0)'                  Tuple.Create(n1.Multiply(n2).GreaterThan(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)mn2g10)'                  Tuple.Create(n2.Divide(n1).GreaterThan(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)dn1g3)'                  Tuple.Create(n1.Modulo(n2).EqualTo(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)mn2e0)'                  Tuple.Create(n1.Add(n2).EqualTo(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)an2e10)'                  Tuple.Create(n1.Subtract(n2).GreaterThan(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)sn2g0)              };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: var cases = new[] {                  Tuple.Create(n1.Multiply(Expression.Int(2)).GreaterThan(Expression.Int(8))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)m2g8)'                  Tuple.Create(n1.Divide(Expression.Int(2)).GreaterThan(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)d2g3)'                  Tuple.Create(n1.Modulo(Expression.Int(2)).EqualTo(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)m2e0)'                  Tuple.Create(n1.Add(Expression.Int(5)).GreaterThan(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)a5g10)'                  Tuple.Create(n1.Subtract(Expression.Int(5)).GreaterThan(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)s5g0)'                  Tuple.Create(n1.Multiply(n2).GreaterThan(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)mn2g10)'                  Tuple.Create(n2.Divide(n1).GreaterThan(Expression.Int(3))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)dn1g3)'                  Tuple.Create(n1.Modulo(n2).EqualTo(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)mn2e0)'                  Tuple.Create(n1.Add(n2).EqualTo(Expression.Int(10))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)an2e10)'                  Tuple.Create(n1.Subtract(n2).GreaterThan(Expression.Int(0))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereMathValidator' (object)sn2g0)              };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: LoadNumbers(10);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: RunTestWithNumbers(new[] { 6' 3' 5' 5' 5' 7' 2' 3' 10' 5 }' cases);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: RunTestWithNumbers(new[] { 6' 3' 5' 5' 5' 7' 2' 3' 10' 5 }' cases);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: RunTestWithNumbers(new[] { 6' 3' 5' 5' 5' 7' 2' 3' 10' 5 }' cases);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: RunTestWithNumbers(new[] { 6' 3' 5' 5' 5' 7' 2' 3' 10' 5 }' cases);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: RunTestWithNumbers(new[] { 6' 3' 5' 5' 5' 7' 2' 3' 10' 5 }' cases);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: RunTestWithNumbers(new[] { 6' 3' 5' 5' 5' 7' 2' 3' 10' 5 }' cases);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: RunTestWithNumbers(new[] { 6' 3' 5' 5' 5' 7' 2' 3' 10' 5 }' cases);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: RunTestWithNumbers(new[] { 6' 3' 5' 5' 5' 7' 2' 3' 10' 5 }' cases);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: RunTestWithNumbers(new[] { 6' 3' 5' 5' 5' 7' 2' 3' 10' 5 }' cases);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereArithmetic,The following statement contains a magic number: RunTestWithNumbers(new[] { 6' 3' 5' 5' 5' 7' 2' 3' 10' 5 }' cases);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereAndOr,The following statement contains a magic number: var cases = new[] {                  Tuple.Create(n1.GreaterThan(Expression.Int(3)).And(n2.GreaterThan(Expression.Int(3)))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereAndValidator' default(object))'                  Tuple.Create(n1.LessThan(Expression.Int(3)).Or(n2.LessThan(Expression.Int(3)))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereOrValidator' default(object))              };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereAndOr,The following statement contains a magic number: var cases = new[] {                  Tuple.Create(n1.GreaterThan(Expression.Int(3)).And(n2.GreaterThan(Expression.Int(3)))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereAndValidator' default(object))'                  Tuple.Create(n1.LessThan(Expression.Int(3)).Or(n2.LessThan(Expression.Int(3)))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereOrValidator' default(object))              };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereAndOr,The following statement contains a magic number: var cases = new[] {                  Tuple.Create(n1.GreaterThan(Expression.Int(3)).And(n2.GreaterThan(Expression.Int(3)))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereAndValidator' default(object))'                  Tuple.Create(n1.LessThan(Expression.Int(3)).Or(n2.LessThan(Expression.Int(3)))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereOrValidator' default(object))              };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereAndOr,The following statement contains a magic number: var cases = new[] {                  Tuple.Create(n1.GreaterThan(Expression.Int(3)).And(n2.GreaterThan(Expression.Int(3)))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereAndValidator' default(object))'                  Tuple.Create(n1.LessThan(Expression.Int(3)).Or(n2.LessThan(Expression.Int(3)))'                      (Func<IDictionary<string' object>' object' bool>)TestWhereOrValidator' default(object))              };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereAndOr,The following statement contains a magic number: LoadNumbers(10);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereAndOr,The following statement contains a magic number: RunTestWithNumbers(new[] { 3' 5 }' cases);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereAndOr,The following statement contains a magic number: RunTestWithNumbers(new[] { 3' 5 }' cases);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereBetween,The following statement contains a magic number: LoadNumbers(10);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereBetween,The following statement contains a magic number: var cases = new[] {                  Tuple.Create(n1.Between(Expression.Int(3)' Expression.Int(7))'                   (Func<IDictionary<string' object>' object' bool>) TestWhereBetweenValidator' (object)null)              };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereBetween,The following statement contains a magic number: var cases = new[] {                  Tuple.Create(n1.Between(Expression.Int(3)' Expression.Int(7))'                   (Func<IDictionary<string' object>' object' bool>) TestWhereBetweenValidator' (object)null)              };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereBetween,The following statement contains a magic number: RunTestWithNumbers(new[] { 5 }' cases);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereLike,The following statement contains a magic number: numRows.Should().Be(5' "because there are 5 rows like that in the data source");
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereRegex,The following statement contains a magic number: numRows.Should().Be(5' "because there are 5 rows like that in the data source");
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereMatch,The following statement contains a magic number: numRows.Should().Be(2' "because two rows in the data match the query");
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestOrderBy,The following statement contains a magic number: numRows.Should().Be(100' "because otherwise the wrong number of rows was retrieved");
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLiveQuery,The following statement contains a magic number: LoadNumbers(100);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLiveQuery,The following statement contains a magic number: q.AddChangeListener(null' (sender' args) =>                  {                      if (count++ == 1) {                          wa.RunConditionalAssert(                              () => args.Results.Count() == 9);                      } else {                          var list = args.Results.ToList();                          wa2.RunConditionalAssert(                              () => list.Count() == 10 && list.First().GetInt(0) == -1);                      }                                          });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLiveQuery,The following statement contains a magic number: q.AddChangeListener(null' (sender' args) =>                  {                      if (count++ == 1) {                          wa.RunConditionalAssert(                              () => args.Results.Count() == 9);                      } else {                          var list = args.Results.ToList();                          wa2.RunConditionalAssert(                              () => list.Count() == 10 && list.First().GetInt(0) == -1);                      }                                          });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLiveQuery,The following statement contains a magic number: await Task.Delay(500);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLiveQuery,The following statement contains a magic number: wa.WaitForResult(TimeSpan.FromSeconds(5));
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLiveQuery,The following statement contains a magic number: CreateDocInSeries(-1' 100);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLiveQuery,The following statement contains a magic number: wa2.WaitForResult(TimeSpan.FromSeconds(5));
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestJoin,The following statement contains a magic number: LoadNumbers(100);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestJoin,The following statement contains a magic number: testDoc.SetInt("theone"' 42);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestJoin,The following statement contains a magic number: results.First().GetInt(0).Should().Be(58'                      "because that was the number stored in 'number2' of the matching doc");
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLeftJoin,The following statement contains a magic number: LoadNumbers(100);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLeftJoin,The following statement contains a magic number: testDoc.SetInt("theone"' 42);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLeftJoin,The following statement contains a magic number: results.Should().HaveCount(101);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLeftJoin,The following statement contains a magic number: results[41].GetInt(0).Should().Be(58);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLeftJoin,The following statement contains a magic number: results[41].GetInt(0).Should().Be(58);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLeftJoin,The following statement contains a magic number: results[41].GetInt(1).Should().Be(42);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLeftJoin,The following statement contains a magic number: results[41].GetInt(1).Should().Be(42);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLeftJoin,The following statement contains a magic number: results[42].GetInt(0).Should().Be(57);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLeftJoin,The following statement contains a magic number: results[42].GetInt(0).Should().Be(57);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLeftJoin,The following statement contains a magic number: results[42].GetValue(1).Should().BeNull();
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLeftJoin,The following statement contains a magic number: results.Should().HaveCount(101);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLeftJoin,The following statement contains a magic number: results[41].GetInt(0).Should().Be(58);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLeftJoin,The following statement contains a magic number: results[41].GetInt(0).Should().Be(58);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLeftJoin,The following statement contains a magic number: results[41].GetInt(1).Should().Be(42);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLeftJoin,The following statement contains a magic number: results[41].GetInt(1).Should().Be(42);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLeftJoin,The following statement contains a magic number: results[42].GetInt(0).Should().Be(57);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLeftJoin,The following statement contains a magic number: results[42].GetInt(0).Should().Be(57);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLeftJoin,The following statement contains a magic number: results[42].GetValue(1).Should().BeNull();
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLeftJoinWithSelectAll,The following statement contains a magic number: LoadNumbers(100);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLeftJoinWithSelectAll,The following statement contains a magic number: joinme.SetInt("theone"' 42);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLeftJoinWithSelectAll,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' r) =>                  {                      var main = r.GetDictionary(0);                      var secondary = r.GetDictionary(1);                        var number1 = main.GetInt("number1");                      if (number1 == 42) {                          secondary.Should().NotBeNull("because the JOIN matched");                          secondary.GetInt("theone").Should().Be(number1' "because this is the join entry");                      } else {                          secondary.Should().BeNull("because the JOIN didn't match");                      }                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLeftJoinWithSelectAll,The following statement contains a magic number: numRows.Should().Be(101);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestCrossJoin,The following statement contains a magic number: LoadNumbers(10);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestCrossJoin,The following statement contains a magic number: var count = VerifyQuery(q' (n' row) =>                  {                      ((row.GetInt(0) - 1) % 10).Should().Be((n - 1) % 10);                      row.GetInt(1).Should().Be((n - 1) / 10);                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestCrossJoin,The following statement contains a magic number: var count = VerifyQuery(q' (n' row) =>                  {                      ((row.GetInt(0) - 1) % 10).Should().Be((n - 1) % 10);                      row.GetInt(1).Should().Be((n - 1) / 10);                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestCrossJoin,The following statement contains a magic number: var count = VerifyQuery(q' (n' row) =>                  {                      ((row.GetInt(0) - 1) % 10).Should().Be((n - 1) % 10);                      row.GetInt(1).Should().Be((n - 1) / 10);                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestCrossJoin,The following statement contains a magic number: count.Should().Be(100);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestAggregateFunctions,The following statement contains a magic number: LoadNumbers(100);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestAggregateFunctions,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' row) =>                  {                      row.GetDouble(0).Should().BeApproximately(50.5' Double.Epsilon);                      row.GetInt(1).Should().Be(100);                      row.GetInt(2).Should().Be(1);                      row.GetInt(3).Should().Be(100);                      row.GetInt(4).Should().Be(5050);                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestAggregateFunctions,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' row) =>                  {                      row.GetDouble(0).Should().BeApproximately(50.5' Double.Epsilon);                      row.GetInt(1).Should().Be(100);                      row.GetInt(2).Should().Be(1);                      row.GetInt(3).Should().Be(100);                      row.GetInt(4).Should().Be(5050);                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestAggregateFunctions,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' row) =>                  {                      row.GetDouble(0).Should().BeApproximately(50.5' Double.Epsilon);                      row.GetInt(1).Should().Be(100);                      row.GetInt(2).Should().Be(1);                      row.GetInt(3).Should().Be(100);                      row.GetInt(4).Should().Be(5050);                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestAggregateFunctions,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' row) =>                  {                      row.GetDouble(0).Should().BeApproximately(50.5' Double.Epsilon);                      row.GetInt(1).Should().Be(100);                      row.GetInt(2).Should().Be(1);                      row.GetInt(3).Should().Be(100);                      row.GetInt(4).Should().Be(5050);                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestAggregateFunctions,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' row) =>                  {                      row.GetDouble(0).Should().BeApproximately(50.5' Double.Epsilon);                      row.GetInt(1).Should().Be(100);                      row.GetInt(2).Should().Be(1);                      row.GetInt(3).Should().Be(100);                      row.GetInt(4).Should().Be(5050);                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestAggregateFunctions,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' row) =>                  {                      row.GetDouble(0).Should().BeApproximately(50.5' Double.Epsilon);                      row.GetInt(1).Should().Be(100);                      row.GetInt(2).Should().Be(1);                      row.GetInt(3).Should().Be(100);                      row.GetInt(4).Should().Be(5050);                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestAggregateFunctions,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' row) =>                  {                      row.GetDouble(0).Should().BeApproximately(50.5' Double.Epsilon);                      row.GetInt(1).Should().Be(100);                      row.GetInt(2).Should().Be(1);                      row.GetInt(3).Should().Be(100);                      row.GetInt(4).Should().Be(5050);                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestGroupBy,The following statement contains a magic number: var expectedCounts = new[] { 1' 6' 1' 1' 3 };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestGroupBy,The following statement contains a magic number: var expectedCounts = new[] { 1' 6' 1' 1' 3 };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestGroupBy,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' row) =>                  {                      var state = row.GetString(0);                      var count = row.GetInt(1);                      var maxZip = row.GetString(2);                      if (n - 1 < expectedStates.Length) {                          state.Should().Be(expectedStates[n - 1]);                          count.Should().Be(expectedCounts[n - 1]);                          maxZip.Should().Be(expectedZips[n - 1]);                      }                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestGroupBy,The following statement contains a magic number: numRows.Should().Be(31);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestGroupBy,The following statement contains a magic number: expectedCounts = new[] { 6' 3' 2 };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestGroupBy,The following statement contains a magic number: expectedCounts = new[] { 6' 3' 2 };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestGroupBy,The following statement contains a magic number: expectedCounts = new[] { 6' 3' 2 };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestGroupBy,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' row) =>                  {                      var state = row.GetString(0);                      var count = row.GetInt(1);                      var maxZip = row.GetString(2);                      if (n - 1 < expectedStates.Length) {                          state.Should().Be(expectedStates[n - 1]);                          count.Should().Be(expectedCounts[n - 1]);                          maxZip.Should().Be(expectedZips[n - 1]);                      }                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestGroupBy,The following statement contains a magic number: numRows.Should().Be(15);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestParameters,The following statement contains a magic number: LoadNumbers(10);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestParameters,The following statement contains a magic number: var parameters = new Parameters().SetInt("num1"' 2).SetInt("num2"' 5);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestParameters,The following statement contains a magic number: var parameters = new Parameters().SetInt("num1"' 2).SetInt("num2"' 5);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestParameters,The following statement contains a magic number: var expectedNumbers = new[] {2' 3' 4' 5};
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestParameters,The following statement contains a magic number: var expectedNumbers = new[] {2' 3' 4' 5};
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestParameters,The following statement contains a magic number: var expectedNumbers = new[] {2' 3' 4' 5};
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestParameters,The following statement contains a magic number: var expectedNumbers = new[] {2' 3' 4' 5};
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestParameters,The following statement contains a magic number: numRows.Should().Be(4);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestMeta,The following statement contains a magic number: LoadNumbers(5);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestMeta,The following statement contains a magic number: var expectedSeqs = new[] {1' 2' 3' 4' 5};
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestMeta,The following statement contains a magic number: var expectedSeqs = new[] {1' 2' 3' 4' 5};
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestMeta,The following statement contains a magic number: var expectedSeqs = new[] {1' 2' 3' 4' 5};
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestMeta,The following statement contains a magic number: var expectedSeqs = new[] {1' 2' 3' 4' 5};
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestMeta,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' row) =>                  {                      var docID = row.GetString(0);                      var docID2 = row.GetString("id");                      docID.Should().Be(docID2' "because these calls are two ways of accessing the same info");                      var seq = row.GetInt(1);                      var seq2 = row.GetInt("sequence");                      seq.Should().Be(seq2' "because these calls are two ways of accessing the same info");                      var number = row.GetInt(2);                        docID.Should().Be(expectedDocIDs[n - 1]);                      seq.Should().Be(expectedSeqs[n - 1]);                      number.Should().Be(expectedNumbers[n - 1]);                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestMeta,The following statement contains a magic number: numRows.Should().Be(5);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLimit,The following statement contains a magic number: LoadNumbers(10);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLimit,The following statement contains a magic number: var expectedNumbers = new[] {1' 2' 3' 4' 5};
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLimit,The following statement contains a magic number: var expectedNumbers = new[] {1' 2' 3' 4' 5};
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLimit,The following statement contains a magic number: var expectedNumbers = new[] {1' 2' 3' 4' 5};
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLimit,The following statement contains a magic number: var expectedNumbers = new[] {1' 2' 3' 4' 5};
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLimit,The following statement contains a magic number: numRows.Should().Be(5);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLimit,The following statement contains a magic number: var parameters = new Parameters().SetInt("limit"' 3);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLimit,The following statement contains a magic number: var expectedNumbers = new[] {1' 2' 3};
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLimit,The following statement contains a magic number: var expectedNumbers = new[] {1' 2' 3};
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLimit,The following statement contains a magic number: numRows.Should().Be(3);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLimitOffset,The following statement contains a magic number: LoadNumbers(10);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLimitOffset,The following statement contains a magic number: var expectedNumbers = new[] {4' 5' 6' 7' 8};
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLimitOffset,The following statement contains a magic number: var expectedNumbers = new[] {4' 5' 6' 7' 8};
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLimitOffset,The following statement contains a magic number: var expectedNumbers = new[] {4' 5' 6' 7' 8};
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLimitOffset,The following statement contains a magic number: var expectedNumbers = new[] {4' 5' 6' 7' 8};
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLimitOffset,The following statement contains a magic number: var expectedNumbers = new[] {4' 5' 6' 7' 8};
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLimitOffset,The following statement contains a magic number: numRows.Should().Be(5);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLimitOffset,The following statement contains a magic number: var parameters = new Parameters().SetInt("limit"' 3).SetInt("offset"' 5);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLimitOffset,The following statement contains a magic number: var parameters = new Parameters().SetInt("limit"' 3).SetInt("offset"' 5);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLimitOffset,The following statement contains a magic number: var expectedNumbers = new[] {6' 7' 8};
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLimitOffset,The following statement contains a magic number: var expectedNumbers = new[] {6' 7' 8};
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLimitOffset,The following statement contains a magic number: var expectedNumbers = new[] {6' 7' 8};
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLimitOffset,The following statement contains a magic number: numRows.Should().Be(3);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryResult,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' r) =>                  {                      r.GetValue("firstname").Should().Be(r.GetValue(0));                      r.GetValue("lastname").Should().Be(r.GetValue(1));                      r.GetValue("gender").Should().Be(r.GetValue(2));                      r.GetValue("city").Should().Be(r.GetValue(3));                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryResult,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' r) =>                  {                      r.GetValue("firstname").Should().Be(r.GetValue(0));                      r.GetValue("lastname").Should().Be(r.GetValue(1));                      r.GetValue("gender").Should().Be(r.GetValue(2));                      r.GetValue("city").Should().Be(r.GetValue(3));                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryResult,The following statement contains a magic number: numRows.Should().Be(100);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryProjectingKeys,The following statement contains a magic number: LoadNumbers(100);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryProjectingKeys,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' r) =>                  {                      r.GetDouble("$1").Should().Be(r.GetDouble(0));                      r.GetInt("$2").Should().Be(r.GetInt(1));                      r.GetInt("min").Should().Be(r.GetInt(2));                      r.GetInt("$3").Should().Be(r.GetInt(3));                      r.GetInt("sum").Should().Be(r.GetInt(4));                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryProjectingKeys,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' r) =>                  {                      r.GetDouble("$1").Should().Be(r.GetDouble(0));                      r.GetInt("$2").Should().Be(r.GetInt(1));                      r.GetInt("min").Should().Be(r.GetInt(2));                      r.GetInt("$3").Should().Be(r.GetInt(3));                      r.GetInt("sum").Should().Be(r.GetInt(4));                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryProjectingKeys,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' r) =>                  {                      r.GetDouble("$1").Should().Be(r.GetDouble(0));                      r.GetInt("$2").Should().Be(r.GetInt(1));                      r.GetInt("min").Should().Be(r.GetInt(2));                      r.GetInt("$3").Should().Be(r.GetInt(3));                      r.GetInt("sum").Should().Be(r.GetInt(4));                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestArrayFunctions,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' r) =>                  {                      r.GetInt(0).Should().Be(2);                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestMathFunctions,The following statement contains a magic number: const double num = 0.6;
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestMathFunctions,The following statement contains a magic number: var expectedValues = new[] {                  Math.Abs(num)' Math.Acos(num)' Math.Asin(num)' Math.Atan(num)' Math.Atan2(90' num)' // Note that Atan2 is (y' x)                  Math.Ceiling(num)' Math.Cos(num)' num * 180.0 / Math.PI' Math.Exp(num)'                  Math.Floor(num)' Math.Log(num)' Math.Log10(num)' Math.Pow(num' 2)' num * Math.PI / 180.0'                  Math.Round(num)' Math.Round(num' 1)' Math.Sign(num)' Math.Sin(num)' Math.Sqrt(num)'                  Math.Tan(num)' Math.Truncate(num)' Math.Truncate(num * 10.0) / 10.0              };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestMathFunctions,The following statement contains a magic number: var expectedValues = new[] {                  Math.Abs(num)' Math.Acos(num)' Math.Asin(num)' Math.Atan(num)' Math.Atan2(90' num)' // Note that Atan2 is (y' x)                  Math.Ceiling(num)' Math.Cos(num)' num * 180.0 / Math.PI' Math.Exp(num)'                  Math.Floor(num)' Math.Log(num)' Math.Log10(num)' Math.Pow(num' 2)' num * Math.PI / 180.0'                  Math.Round(num)' Math.Round(num' 1)' Math.Sign(num)' Math.Sin(num)' Math.Sqrt(num)'                  Math.Tan(num)' Math.Truncate(num)' Math.Truncate(num * 10.0) / 10.0              };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestMathFunctions,The following statement contains a magic number: var expectedValues = new[] {                  Math.Abs(num)' Math.Acos(num)' Math.Asin(num)' Math.Atan(num)' Math.Atan2(90' num)' // Note that Atan2 is (y' x)                  Math.Ceiling(num)' Math.Cos(num)' num * 180.0 / Math.PI' Math.Exp(num)'                  Math.Floor(num)' Math.Log(num)' Math.Log10(num)' Math.Pow(num' 2)' num * Math.PI / 180.0'                  Math.Round(num)' Math.Round(num' 1)' Math.Sign(num)' Math.Sin(num)' Math.Sqrt(num)'                  Math.Tan(num)' Math.Truncate(num)' Math.Truncate(num * 10.0) / 10.0              };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestMathFunctions,The following statement contains a magic number: var expectedValues = new[] {                  Math.Abs(num)' Math.Acos(num)' Math.Asin(num)' Math.Atan(num)' Math.Atan2(90' num)' // Note that Atan2 is (y' x)                  Math.Ceiling(num)' Math.Cos(num)' num * 180.0 / Math.PI' Math.Exp(num)'                  Math.Floor(num)' Math.Log(num)' Math.Log10(num)' Math.Pow(num' 2)' num * Math.PI / 180.0'                  Math.Round(num)' Math.Round(num' 1)' Math.Sign(num)' Math.Sin(num)' Math.Sqrt(num)'                  Math.Tan(num)' Math.Truncate(num)' Math.Truncate(num * 10.0) / 10.0              };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestMathFunctions,The following statement contains a magic number: var expectedValues = new[] {                  Math.Abs(num)' Math.Acos(num)' Math.Asin(num)' Math.Atan(num)' Math.Atan2(90' num)' // Note that Atan2 is (y' x)                  Math.Ceiling(num)' Math.Cos(num)' num * 180.0 / Math.PI' Math.Exp(num)'                  Math.Floor(num)' Math.Log(num)' Math.Log10(num)' Math.Pow(num' 2)' num * Math.PI / 180.0'                  Math.Round(num)' Math.Round(num' 1)' Math.Sign(num)' Math.Sin(num)' Math.Sqrt(num)'                  Math.Tan(num)' Math.Truncate(num)' Math.Truncate(num * 10.0) / 10.0              };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestMathFunctions,The following statement contains a magic number: var expectedValues = new[] {                  Math.Abs(num)' Math.Acos(num)' Math.Asin(num)' Math.Atan(num)' Math.Atan2(90' num)' // Note that Atan2 is (y' x)                  Math.Ceiling(num)' Math.Cos(num)' num * 180.0 / Math.PI' Math.Exp(num)'                  Math.Floor(num)' Math.Log(num)' Math.Log10(num)' Math.Pow(num' 2)' num * Math.PI / 180.0'                  Math.Round(num)' Math.Round(num' 1)' Math.Sign(num)' Math.Sin(num)' Math.Sqrt(num)'                  Math.Tan(num)' Math.Truncate(num)' Math.Truncate(num * 10.0) / 10.0              };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestMathFunctions,The following statement contains a magic number: new[] {                  Function.Abs(prop)' Function.Acos(prop)' Function.Asin(prop)' Function.Atan(prop)'                  Function.Atan2(prop' Expression.Int(90))' // Note: N1QL function definition is the basis for this call' so (x' y)                  Function.Ceil(prop)' Function.Cos(prop)' Function.Degrees(prop)' Function.Exp(prop)'                  Function.Floor(prop)'                  Function.Ln(prop)' Function.Log(prop)' Function.Power(prop' Expression.Int(2))' Function.Radians(prop)'                  Function.Round(prop)'                  Function.Round(prop' Expression.Int(1))' Function.Sign(prop)' Function.Sin(prop)' Function.Sqrt(prop)'                  Function.Tan(prop)'                  Function.Trunc(prop)' Function.Trunc(prop' Expression.Int(1))              }
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestMathFunctions,The following statement contains a magic number: new[] {                  Function.Abs(prop)' Function.Acos(prop)' Function.Asin(prop)' Function.Atan(prop)'                  Function.Atan2(prop' Expression.Int(90))' // Note: N1QL function definition is the basis for this call' so (x' y)                  Function.Ceil(prop)' Function.Cos(prop)' Function.Degrees(prop)' Function.Exp(prop)'                  Function.Floor(prop)'                  Function.Ln(prop)' Function.Log(prop)' Function.Power(prop' Expression.Int(2))' Function.Radians(prop)'                  Function.Round(prop)'                  Function.Round(prop' Expression.Int(1))' Function.Sign(prop)' Function.Sin(prop)' Function.Sqrt(prop)'                  Function.Tan(prop)'                  Function.Trunc(prop)' Function.Trunc(prop' Expression.Int(1))              }
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestMathFunctions,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' r) =>                  {                      r.GetDouble(0).Should().Be(Math.E * 2);                      r.GetDouble(1).Should().Be(Math.PI * 2);                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestMathFunctions,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' r) =>                  {                      r.GetDouble(0).Should().Be(Math.E * 2);                      r.GetDouble(1).Should().Be(Math.PI * 2);                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestStringFunctions,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' r) =>                  {                      r.GetString(0).Should().Be(str.ToLowerInvariant());                      r.GetString(1).Should().Be(str.TrimStart());                      r.GetString(2).Should().Be(str.TrimEnd());                      r.GetString(3).Should().Be(str.Trim());                      r.GetString(4).Should().Be(str.ToUpperInvariant());                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestStringFunctions,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' r) =>                  {                      r.GetString(0).Should().Be(str.ToLowerInvariant());                      r.GetString(1).Should().Be(str.TrimStart());                      r.GetString(2).Should().Be(str.TrimEnd());                      r.GetString(3).Should().Be(str.Trim());                      r.GetString(4).Should().Be(str.ToUpperInvariant());                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestStringFunctions,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' r) =>                  {                      r.GetString(0).Should().Be(str.ToLowerInvariant());                      r.GetString(1).Should().Be(str.TrimStart());                      r.GetString(2).Should().Be(str.TrimEnd());                      r.GetString(3).Should().Be(str.Trim());                      r.GetString(4).Should().Be(str.ToUpperInvariant());                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQuantifiedOperators,The following statement contains a magic number: received.Count.Should().Be(42' "because empty array results are included");
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestSelectAll,The following statement contains a magic number: LoadNumbers(100);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestSelectAll,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' r) =>                  {                      var all = r.GetDictionary(0);                      all.GetInt("number1").Should().Be(n);                      all.GetInt("number2").Should().Be(100 - n);                      r.GetInt(1).Should().Be(n);                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestSelectAll,The following statement contains a magic number: numRows.Should().Be(100);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestSelectAll,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' r) =>                  {                      var all = r.GetDictionary(0);                      all.GetInt("number1").Should().Be(n);                      all.GetInt("number2").Should().Be(100 - n);                      r.GetInt(1).Should().Be(n);                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestSelectAll,The following statement contains a magic number: numRows.Should().Be(100);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLiveQueryBlocksClose,The following statement contains a magic number: doc1Listener.WaitForResult(TimeSpan.FromSeconds(20));
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestCountFunctions,The following statement contains a magic number: LoadNumbers(100);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestCountFunctions,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' row) => { row.GetInt(0).Should().Be(100); });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryDeletedDocument,The following statement contains a magic number: counter.Should().Be(2);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryWhereBooleanExpression,The following statement contains a magic number: Db.Count.Should().Be(3);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryWhereBooleanExpression,The following statement contains a magic number: numRows.Should().Be(2);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryWhereBooleanExpression,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' row) =>                      {                          WriteLine($"res -> {JsonConvert.SerializeObject(row.ToDictionary())}");                          row.GetInt(0).Should().Be(2);                      });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestJoinAll,The following statement contains a magic number: LoadNumbers(100);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestJoinAll,The following statement contains a magic number: doc1.SetInt("theone"' 42);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestJoinAll,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' row) =>                  {                      var mainAll1 = row.GetDictionary(0);                      var mainAll2 = row.GetDictionary("main");                      var secondAll1 = row.GetDictionary(1);                      var secondAll2 = row.GetDictionary("secondary");                      WriteLine($"mainAll1 -> {JsonConvert.SerializeObject(mainAll1)}");                      WriteLine($"mainAll2 -> {JsonConvert.SerializeObject(mainAll2)}");                      WriteLine($"secondAll1 -> {JsonConvert.SerializeObject(secondAll1)}");                      WriteLine($"secondAll2 -> {JsonConvert.SerializeObject(secondAll2)}");                        mainAll1.GetInt("number1").Should().Be(42);                      mainAll2.GetInt("number1").Should().Be(42);                      mainAll1.GetInt("number2").Should().Be(58);                      mainAll1.GetInt("number2").Should().Be(58);                      secondAll1.GetInt("theone").Should().Be(42);                      secondAll2.GetInt("theone").Should().Be(42);                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestJoinAll,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' row) =>                  {                      var mainAll1 = row.GetDictionary(0);                      var mainAll2 = row.GetDictionary("main");                      var secondAll1 = row.GetDictionary(1);                      var secondAll2 = row.GetDictionary("secondary");                      WriteLine($"mainAll1 -> {JsonConvert.SerializeObject(mainAll1)}");                      WriteLine($"mainAll2 -> {JsonConvert.SerializeObject(mainAll2)}");                      WriteLine($"secondAll1 -> {JsonConvert.SerializeObject(secondAll1)}");                      WriteLine($"secondAll2 -> {JsonConvert.SerializeObject(secondAll2)}");                        mainAll1.GetInt("number1").Should().Be(42);                      mainAll2.GetInt("number1").Should().Be(42);                      mainAll1.GetInt("number2").Should().Be(58);                      mainAll1.GetInt("number2").Should().Be(58);                      secondAll1.GetInt("theone").Should().Be(42);                      secondAll2.GetInt("theone").Should().Be(42);                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestJoinAll,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' row) =>                  {                      var mainAll1 = row.GetDictionary(0);                      var mainAll2 = row.GetDictionary("main");                      var secondAll1 = row.GetDictionary(1);                      var secondAll2 = row.GetDictionary("secondary");                      WriteLine($"mainAll1 -> {JsonConvert.SerializeObject(mainAll1)}");                      WriteLine($"mainAll2 -> {JsonConvert.SerializeObject(mainAll2)}");                      WriteLine($"secondAll1 -> {JsonConvert.SerializeObject(secondAll1)}");                      WriteLine($"secondAll2 -> {JsonConvert.SerializeObject(secondAll2)}");                        mainAll1.GetInt("number1").Should().Be(42);                      mainAll2.GetInt("number1").Should().Be(42);                      mainAll1.GetInt("number2").Should().Be(58);                      mainAll1.GetInt("number2").Should().Be(58);                      secondAll1.GetInt("theone").Should().Be(42);                      secondAll2.GetInt("theone").Should().Be(42);                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestJoinAll,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' row) =>                  {                      var mainAll1 = row.GetDictionary(0);                      var mainAll2 = row.GetDictionary("main");                      var secondAll1 = row.GetDictionary(1);                      var secondAll2 = row.GetDictionary("secondary");                      WriteLine($"mainAll1 -> {JsonConvert.SerializeObject(mainAll1)}");                      WriteLine($"mainAll2 -> {JsonConvert.SerializeObject(mainAll2)}");                      WriteLine($"secondAll1 -> {JsonConvert.SerializeObject(secondAll1)}");                      WriteLine($"secondAll2 -> {JsonConvert.SerializeObject(secondAll2)}");                        mainAll1.GetInt("number1").Should().Be(42);                      mainAll2.GetInt("number1").Should().Be(42);                      mainAll1.GetInt("number2").Should().Be(58);                      mainAll1.GetInt("number2").Should().Be(58);                      secondAll1.GetInt("theone").Should().Be(42);                      secondAll2.GetInt("theone").Should().Be(42);                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestJoinAll,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' row) =>                  {                      var mainAll1 = row.GetDictionary(0);                      var mainAll2 = row.GetDictionary("main");                      var secondAll1 = row.GetDictionary(1);                      var secondAll2 = row.GetDictionary("secondary");                      WriteLine($"mainAll1 -> {JsonConvert.SerializeObject(mainAll1)}");                      WriteLine($"mainAll2 -> {JsonConvert.SerializeObject(mainAll2)}");                      WriteLine($"secondAll1 -> {JsonConvert.SerializeObject(secondAll1)}");                      WriteLine($"secondAll2 -> {JsonConvert.SerializeObject(secondAll2)}");                        mainAll1.GetInt("number1").Should().Be(42);                      mainAll2.GetInt("number1").Should().Be(42);                      mainAll1.GetInt("number2").Should().Be(58);                      mainAll1.GetInt("number2").Should().Be(58);                      secondAll1.GetInt("theone").Should().Be(42);                      secondAll2.GetInt("theone").Should().Be(42);                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestJoinAll,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' row) =>                  {                      var mainAll1 = row.GetDictionary(0);                      var mainAll2 = row.GetDictionary("main");                      var secondAll1 = row.GetDictionary(1);                      var secondAll2 = row.GetDictionary("secondary");                      WriteLine($"mainAll1 -> {JsonConvert.SerializeObject(mainAll1)}");                      WriteLine($"mainAll2 -> {JsonConvert.SerializeObject(mainAll2)}");                      WriteLine($"secondAll1 -> {JsonConvert.SerializeObject(secondAll1)}");                      WriteLine($"secondAll2 -> {JsonConvert.SerializeObject(secondAll2)}");                        mainAll1.GetInt("number1").Should().Be(42);                      mainAll2.GetInt("number1").Should().Be(42);                      mainAll1.GetInt("number2").Should().Be(58);                      mainAll1.GetInt("number2").Should().Be(58);                      secondAll1.GetInt("theone").Should().Be(42);                      secondAll2.GetInt("theone").Should().Be(42);                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestJoinByDocID,The following statement contains a magic number: LoadNumbers(100);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestJoinByDocID,The following statement contains a magic number: doc1.SetInt("theone"' 42);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestJoinByDocID,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' row) =>                  {                      n.Should().Be(1);                      var docID = row.GetString("mainDocID");                      using (var doc = Db.GetDocument(docID)) {                          doc.GetInt("number1").Should().Be(1);                          doc.GetInt("number2").Should().Be(99);                            row.GetString("secondaryDocID").Should().Be("joinme");                          row.GetInt("theone").Should().Be(42);                      }                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestJoinByDocID,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' row) =>                  {                      n.Should().Be(1);                      var docID = row.GetString("mainDocID");                      using (var doc = Db.GetDocument(docID)) {                          doc.GetInt("number1").Should().Be(1);                          doc.GetInt("number2").Should().Be(99);                            row.GetString("secondaryDocID").Should().Be("joinme");                          row.GetInt("theone").Should().Be(42);                      }                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestMissingValues,The following statement contains a magic number: doc1.SetInt("theone"' 42);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryParameters,The following statement contains a magic number: var builder = new Parameters()                  .SetBoolean("true"' true)                  .SetDate("now"' now)                  .SetDouble("pi"' Math.PI)                  .SetFloat("simple_pi"' 3.14159f)                  .SetLong("big_num"' Int64.MaxValue)                  .SetString("name"' "Jim");
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryParameters,The following statement contains a magic number: builder.Invoking(b => b.SetValue("bad"' new[] { 1' 2' 3 })).Should().Throw<ArgumentException>();
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryParameters,The following statement contains a magic number: builder.Invoking(b => b.SetValue("bad"' new[] { 1' 2' 3 })).Should().Throw<ArgumentException>();
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryParameters,The following statement contains a magic number: parameters.GetValue("simple_pi").As<float>().Should().Be(3.14159f);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryResultTypes,The following statement contains a magic number: var array = new MutableArrayObject(new[] { 1' 2' 3 });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryResultTypes,The following statement contains a magic number: var array = new MutableArrayObject(new[] { 1' 2' 3 });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryResultTypes,The following statement contains a magic number: doc.SetFloat("simple_pi"' 3.14159f);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryResultTypes,The following statement contains a magic number: VerifyQuery(q' (n' row) =>                  {                      row.GetArray(0).Should().ContainInOrder(1L' 2L' 3L);                      row.GetArray("array").Should().ContainInOrder(1L' 2L' 3L);                      row.GetBlob(1).Content.Should().ContainInOrder(blobContent);                      row.GetBlob("blob").Content.Should().ContainInOrder(blobContent);                      row.GetDate(2).Should().Be(now);                      row.GetDate("created_at").Should().Be(now);                      row.GetFloat(3).Should().Be(3.14159f);                      row.GetFloat("simple_pi").Should().Be(3.14159f);                      row.GetLong(4).Should().Be(Int64.MaxValue);                      row.GetLong("big_num").Should().Be(Int64.MaxValue);                        row[4].Long.Should().Be(Int64.MaxValue);                      row["big_num"].Long.Should().Be(Int64.MaxValue);                      row.GetBoolean(5).Should().Be(true);                      row.GetBoolean("boolean").Should().Be(true);                        var resultList = row.ToList();                      resultList.Count.Should().Be(6);                      resultList.ElementAtOrDefault(2).Should().Be(now.ToString("o"));                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryResultTypes,The following statement contains a magic number: VerifyQuery(q' (n' row) =>                  {                      row.GetArray(0).Should().ContainInOrder(1L' 2L' 3L);                      row.GetArray("array").Should().ContainInOrder(1L' 2L' 3L);                      row.GetBlob(1).Content.Should().ContainInOrder(blobContent);                      row.GetBlob("blob").Content.Should().ContainInOrder(blobContent);                      row.GetDate(2).Should().Be(now);                      row.GetDate("created_at").Should().Be(now);                      row.GetFloat(3).Should().Be(3.14159f);                      row.GetFloat("simple_pi").Should().Be(3.14159f);                      row.GetLong(4).Should().Be(Int64.MaxValue);                      row.GetLong("big_num").Should().Be(Int64.MaxValue);                        row[4].Long.Should().Be(Int64.MaxValue);                      row["big_num"].Long.Should().Be(Int64.MaxValue);                      row.GetBoolean(5).Should().Be(true);                      row.GetBoolean("boolean").Should().Be(true);                        var resultList = row.ToList();                      resultList.Count.Should().Be(6);                      resultList.ElementAtOrDefault(2).Should().Be(now.ToString("o"));                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryResultTypes,The following statement contains a magic number: VerifyQuery(q' (n' row) =>                  {                      row.GetArray(0).Should().ContainInOrder(1L' 2L' 3L);                      row.GetArray("array").Should().ContainInOrder(1L' 2L' 3L);                      row.GetBlob(1).Content.Should().ContainInOrder(blobContent);                      row.GetBlob("blob").Content.Should().ContainInOrder(blobContent);                      row.GetDate(2).Should().Be(now);                      row.GetDate("created_at").Should().Be(now);                      row.GetFloat(3).Should().Be(3.14159f);                      row.GetFloat("simple_pi").Should().Be(3.14159f);                      row.GetLong(4).Should().Be(Int64.MaxValue);                      row.GetLong("big_num").Should().Be(Int64.MaxValue);                        row[4].Long.Should().Be(Int64.MaxValue);                      row["big_num"].Long.Should().Be(Int64.MaxValue);                      row.GetBoolean(5).Should().Be(true);                      row.GetBoolean("boolean").Should().Be(true);                        var resultList = row.ToList();                      resultList.Count.Should().Be(6);                      resultList.ElementAtOrDefault(2).Should().Be(now.ToString("o"));                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryResultTypes,The following statement contains a magic number: VerifyQuery(q' (n' row) =>                  {                      row.GetArray(0).Should().ContainInOrder(1L' 2L' 3L);                      row.GetArray("array").Should().ContainInOrder(1L' 2L' 3L);                      row.GetBlob(1).Content.Should().ContainInOrder(blobContent);                      row.GetBlob("blob").Content.Should().ContainInOrder(blobContent);                      row.GetDate(2).Should().Be(now);                      row.GetDate("created_at").Should().Be(now);                      row.GetFloat(3).Should().Be(3.14159f);                      row.GetFloat("simple_pi").Should().Be(3.14159f);                      row.GetLong(4).Should().Be(Int64.MaxValue);                      row.GetLong("big_num").Should().Be(Int64.MaxValue);                        row[4].Long.Should().Be(Int64.MaxValue);                      row["big_num"].Long.Should().Be(Int64.MaxValue);                      row.GetBoolean(5).Should().Be(true);                      row.GetBoolean("boolean").Should().Be(true);                        var resultList = row.ToList();                      resultList.Count.Should().Be(6);                      resultList.ElementAtOrDefault(2).Should().Be(now.ToString("o"));                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryResultTypes,The following statement contains a magic number: VerifyQuery(q' (n' row) =>                  {                      row.GetArray(0).Should().ContainInOrder(1L' 2L' 3L);                      row.GetArray("array").Should().ContainInOrder(1L' 2L' 3L);                      row.GetBlob(1).Content.Should().ContainInOrder(blobContent);                      row.GetBlob("blob").Content.Should().ContainInOrder(blobContent);                      row.GetDate(2).Should().Be(now);                      row.GetDate("created_at").Should().Be(now);                      row.GetFloat(3).Should().Be(3.14159f);                      row.GetFloat("simple_pi").Should().Be(3.14159f);                      row.GetLong(4).Should().Be(Int64.MaxValue);                      row.GetLong("big_num").Should().Be(Int64.MaxValue);                        row[4].Long.Should().Be(Int64.MaxValue);                      row["big_num"].Long.Should().Be(Int64.MaxValue);                      row.GetBoolean(5).Should().Be(true);                      row.GetBoolean("boolean").Should().Be(true);                        var resultList = row.ToList();                      resultList.Count.Should().Be(6);                      resultList.ElementAtOrDefault(2).Should().Be(now.ToString("o"));                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryResultTypes,The following statement contains a magic number: VerifyQuery(q' (n' row) =>                  {                      row.GetArray(0).Should().ContainInOrder(1L' 2L' 3L);                      row.GetArray("array").Should().ContainInOrder(1L' 2L' 3L);                      row.GetBlob(1).Content.Should().ContainInOrder(blobContent);                      row.GetBlob("blob").Content.Should().ContainInOrder(blobContent);                      row.GetDate(2).Should().Be(now);                      row.GetDate("created_at").Should().Be(now);                      row.GetFloat(3).Should().Be(3.14159f);                      row.GetFloat("simple_pi").Should().Be(3.14159f);                      row.GetLong(4).Should().Be(Int64.MaxValue);                      row.GetLong("big_num").Should().Be(Int64.MaxValue);                        row[4].Long.Should().Be(Int64.MaxValue);                      row["big_num"].Long.Should().Be(Int64.MaxValue);                      row.GetBoolean(5).Should().Be(true);                      row.GetBoolean("boolean").Should().Be(true);                        var resultList = row.ToList();                      resultList.Count.Should().Be(6);                      resultList.ElementAtOrDefault(2).Should().Be(now.ToString("o"));                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryResultTypes,The following statement contains a magic number: VerifyQuery(q' (n' row) =>                  {                      row.GetArray(0).Should().ContainInOrder(1L' 2L' 3L);                      row.GetArray("array").Should().ContainInOrder(1L' 2L' 3L);                      row.GetBlob(1).Content.Should().ContainInOrder(blobContent);                      row.GetBlob("blob").Content.Should().ContainInOrder(blobContent);                      row.GetDate(2).Should().Be(now);                      row.GetDate("created_at").Should().Be(now);                      row.GetFloat(3).Should().Be(3.14159f);                      row.GetFloat("simple_pi").Should().Be(3.14159f);                      row.GetLong(4).Should().Be(Int64.MaxValue);                      row.GetLong("big_num").Should().Be(Int64.MaxValue);                        row[4].Long.Should().Be(Int64.MaxValue);                      row["big_num"].Long.Should().Be(Int64.MaxValue);                      row.GetBoolean(5).Should().Be(true);                      row.GetBoolean("boolean").Should().Be(true);                        var resultList = row.ToList();                      resultList.Count.Should().Be(6);                      resultList.ElementAtOrDefault(2).Should().Be(now.ToString("o"));                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryResultTypes,The following statement contains a magic number: VerifyQuery(q' (n' row) =>                  {                      row.GetArray(0).Should().ContainInOrder(1L' 2L' 3L);                      row.GetArray("array").Should().ContainInOrder(1L' 2L' 3L);                      row.GetBlob(1).Content.Should().ContainInOrder(blobContent);                      row.GetBlob("blob").Content.Should().ContainInOrder(blobContent);                      row.GetDate(2).Should().Be(now);                      row.GetDate("created_at").Should().Be(now);                      row.GetFloat(3).Should().Be(3.14159f);                      row.GetFloat("simple_pi").Should().Be(3.14159f);                      row.GetLong(4).Should().Be(Int64.MaxValue);                      row.GetLong("big_num").Should().Be(Int64.MaxValue);                        row[4].Long.Should().Be(Int64.MaxValue);                      row["big_num"].Long.Should().Be(Int64.MaxValue);                      row.GetBoolean(5).Should().Be(true);                      row.GetBoolean("boolean").Should().Be(true);                        var resultList = row.ToList();                      resultList.Count.Should().Be(6);                      resultList.ElementAtOrDefault(2).Should().Be(now.ToString("o"));                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryResultTypes,The following statement contains a magic number: VerifyQuery(q' (n' row) =>                  {                      row.GetArray(0).Should().ContainInOrder(1L' 2L' 3L);                      row.GetArray("array").Should().ContainInOrder(1L' 2L' 3L);                      row.GetBlob(1).Content.Should().ContainInOrder(blobContent);                      row.GetBlob("blob").Content.Should().ContainInOrder(blobContent);                      row.GetDate(2).Should().Be(now);                      row.GetDate("created_at").Should().Be(now);                      row.GetFloat(3).Should().Be(3.14159f);                      row.GetFloat("simple_pi").Should().Be(3.14159f);                      row.GetLong(4).Should().Be(Int64.MaxValue);                      row.GetLong("big_num").Should().Be(Int64.MaxValue);                        row[4].Long.Should().Be(Int64.MaxValue);                      row["big_num"].Long.Should().Be(Int64.MaxValue);                      row.GetBoolean(5).Should().Be(true);                      row.GetBoolean("boolean").Should().Be(true);                        var resultList = row.ToList();                      resultList.Count.Should().Be(6);                      resultList.ElementAtOrDefault(2).Should().Be(now.ToString("o"));                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryResultTypes,The following statement contains a magic number: VerifyQuery(q' (n' row) =>                  {                      row.GetArray(0).Should().ContainInOrder(1L' 2L' 3L);                      row.GetArray("array").Should().ContainInOrder(1L' 2L' 3L);                      row.GetBlob(1).Content.Should().ContainInOrder(blobContent);                      row.GetBlob("blob").Content.Should().ContainInOrder(blobContent);                      row.GetDate(2).Should().Be(now);                      row.GetDate("created_at").Should().Be(now);                      row.GetFloat(3).Should().Be(3.14159f);                      row.GetFloat("simple_pi").Should().Be(3.14159f);                      row.GetLong(4).Should().Be(Int64.MaxValue);                      row.GetLong("big_num").Should().Be(Int64.MaxValue);                        row[4].Long.Should().Be(Int64.MaxValue);                      row["big_num"].Long.Should().Be(Int64.MaxValue);                      row.GetBoolean(5).Should().Be(true);                      row.GetBoolean("boolean").Should().Be(true);                        var resultList = row.ToList();                      resultList.Count.Should().Be(6);                      resultList.ElementAtOrDefault(2).Should().Be(now.ToString("o"));                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryResultTypes,The following statement contains a magic number: VerifyQuery(q' (n' row) =>                  {                      row.GetArray(0).Should().ContainInOrder(1L' 2L' 3L);                      row.GetArray("array").Should().ContainInOrder(1L' 2L' 3L);                      row.GetBlob(1).Content.Should().ContainInOrder(blobContent);                      row.GetBlob("blob").Content.Should().ContainInOrder(blobContent);                      row.GetDate(2).Should().Be(now);                      row.GetDate("created_at").Should().Be(now);                      row.GetFloat(3).Should().Be(3.14159f);                      row.GetFloat("simple_pi").Should().Be(3.14159f);                      row.GetLong(4).Should().Be(Int64.MaxValue);                      row.GetLong("big_num").Should().Be(Int64.MaxValue);                        row[4].Long.Should().Be(Int64.MaxValue);                      row["big_num"].Long.Should().Be(Int64.MaxValue);                      row.GetBoolean(5).Should().Be(true);                      row.GetBoolean("boolean").Should().Be(true);                        var resultList = row.ToList();                      resultList.Count.Should().Be(6);                      resultList.ElementAtOrDefault(2).Should().Be(now.ToString("o"));                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryResultTypes,The following statement contains a magic number: VerifyQuery(q' (n' row) =>                  {                      row.GetArray(0).Should().ContainInOrder(1L' 2L' 3L);                      row.GetArray("array").Should().ContainInOrder(1L' 2L' 3L);                      row.GetBlob(1).Content.Should().ContainInOrder(blobContent);                      row.GetBlob("blob").Content.Should().ContainInOrder(blobContent);                      row.GetDate(2).Should().Be(now);                      row.GetDate("created_at").Should().Be(now);                      row.GetFloat(3).Should().Be(3.14159f);                      row.GetFloat("simple_pi").Should().Be(3.14159f);                      row.GetLong(4).Should().Be(Int64.MaxValue);                      row.GetLong("big_num").Should().Be(Int64.MaxValue);                        row[4].Long.Should().Be(Int64.MaxValue);                      row["big_num"].Long.Should().Be(Int64.MaxValue);                      row.GetBoolean(5).Should().Be(true);                      row.GetBoolean("boolean").Should().Be(true);                        var resultList = row.ToList();                      resultList.Count.Should().Be(6);                      resultList.ElementAtOrDefault(2).Should().Be(now.ToString("o"));                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryResultTypes,The following statement contains a magic number: VerifyQuery(q' (n' row) =>                  {                      row.GetArray(0).Should().ContainInOrder(1L' 2L' 3L);                      row.GetArray("array").Should().ContainInOrder(1L' 2L' 3L);                      row.GetBlob(1).Content.Should().ContainInOrder(blobContent);                      row.GetBlob("blob").Content.Should().ContainInOrder(blobContent);                      row.GetDate(2).Should().Be(now);                      row.GetDate("created_at").Should().Be(now);                      row.GetFloat(3).Should().Be(3.14159f);                      row.GetFloat("simple_pi").Should().Be(3.14159f);                      row.GetLong(4).Should().Be(Int64.MaxValue);                      row.GetLong("big_num").Should().Be(Int64.MaxValue);                        row[4].Long.Should().Be(Int64.MaxValue);                      row["big_num"].Long.Should().Be(Int64.MaxValue);                      row.GetBoolean(5).Should().Be(true);                      row.GetBoolean("boolean").Should().Be(true);                        var resultList = row.ToList();                      resultList.Count.Should().Be(6);                      resultList.ElementAtOrDefault(2).Should().Be(now.ToString("o"));                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestFTSStemming,The following statement contains a magic number: count.Should().Be(2);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryExpressions,The following statement contains a magic number: var floatValue = 1.5F;
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryExpressions,The following statement contains a magic number: var longValue = 4294967296L;
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryExpression,The following statement contains a magic number: var dto1 = 168;
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryExpression,The following statement contains a magic number: var dto2 = 68;
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryDateTimeOffset,The following statement contains a magic number: var dto2 = new DateTimeOffset(15' new TimeSpan(0));
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryDateTimeOffset,The following statement contains a magic number: var dto3 = new DateTimeOffset(15000' new TimeSpan(0));
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryJoinAndSelectAll,The following statement contains a magic number: LoadNumbers(100);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryJoinAndSelectAll,The following statement contains a magic number: doc1.SetInt("theone"' 42);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryJoinAndSelectAll,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' row) =>                  {                      if (n == 41) {                          WriteLine($"41: {JsonConvert.SerializeObject(row.ToDictionary())}");                          row.GetDictionary("main").GetInt("number2").Should().Be(59);                          row.GetDictionary("secondary").Should().BeNull();                      } else if (n == 42) {                          WriteLine($"42: {JsonConvert.SerializeObject(row.ToDictionary())}");                          row.GetDictionary("main").GetInt("number2").Should().Be(58);                          row.GetDictionary("secondary").GetInt("theone").Should().Be(42);                      }                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryJoinAndSelectAll,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' row) =>                  {                      if (n == 41) {                          WriteLine($"41: {JsonConvert.SerializeObject(row.ToDictionary())}");                          row.GetDictionary("main").GetInt("number2").Should().Be(59);                          row.GetDictionary("secondary").Should().BeNull();                      } else if (n == 42) {                          WriteLine($"42: {JsonConvert.SerializeObject(row.ToDictionary())}");                          row.GetDictionary("main").GetInt("number2").Should().Be(58);                          row.GetDictionary("secondary").GetInt("theone").Should().Be(42);                      }                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryJoinAndSelectAll,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' row) =>                  {                      if (n == 41) {                          WriteLine($"41: {JsonConvert.SerializeObject(row.ToDictionary())}");                          row.GetDictionary("main").GetInt("number2").Should().Be(59);                          row.GetDictionary("secondary").Should().BeNull();                      } else if (n == 42) {                          WriteLine($"42: {JsonConvert.SerializeObject(row.ToDictionary())}");                          row.GetDictionary("main").GetInt("number2").Should().Be(58);                          row.GetDictionary("secondary").GetInt("theone").Should().Be(42);                      }                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryJoinAndSelectAll,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' row) =>                  {                      if (n == 41) {                          WriteLine($"41: {JsonConvert.SerializeObject(row.ToDictionary())}");                          row.GetDictionary("main").GetInt("number2").Should().Be(59);                          row.GetDictionary("secondary").Should().BeNull();                      } else if (n == 42) {                          WriteLine($"42: {JsonConvert.SerializeObject(row.ToDictionary())}");                          row.GetDictionary("main").GetInt("number2").Should().Be(58);                          row.GetDictionary("secondary").GetInt("theone").Should().Be(42);                      }                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryJoinAndSelectAll,The following statement contains a magic number: var numRows = VerifyQuery(q' (n' row) =>                  {                      if (n == 41) {                          WriteLine($"41: {JsonConvert.SerializeObject(row.ToDictionary())}");                          row.GetDictionary("main").GetInt("number2").Should().Be(59);                          row.GetDictionary("secondary").Should().BeNull();                      } else if (n == 42) {                          WriteLine($"42: {JsonConvert.SerializeObject(row.ToDictionary())}");                          row.GetDictionary("main").GetInt("number2").Should().Be(58);                          row.GetDictionary("secondary").GetInt("theone").Should().Be(42);                      }                  });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestQueryJoinAndSelectAll,The following statement contains a magic number: numRows.Should().Be(101);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestStringToMillis,The following statement contains a magic number: var expectedJST = new[] { 0L' 499105260000' 499105290000' 499105290500' 499105290550' 499105290555 };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestStringToMillis,The following statement contains a magic number: var expectedJST = new[] { 0L' 499105260000' 499105290000' 499105290500' 499105290550' 499105290555 };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestStringToMillis,The following statement contains a magic number: var expectedJST = new[] { 0L' 499105260000' 499105290000' 499105290500' 499105290550' 499105290555 };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestStringToMillis,The following statement contains a magic number: var expectedJST = new[] { 0L' 499105260000' 499105290000' 499105290500' 499105290550' 499105290555 };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestStringToMillis,The following statement contains a magic number: var expectedJST = new[] { 0L' 499105260000' 499105290000' 499105290500' 499105290550' 499105290555 };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestStringToMillis,The following statement contains a magic number: var expectedPST = new[] { 0L' 499166460000' 499166490000' 499166490500' 499166490550' 499166490555 };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestStringToMillis,The following statement contains a magic number: var expectedPST = new[] { 0L' 499166460000' 499166490000' 499166490500' 499166490550' 499166490555 };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestStringToMillis,The following statement contains a magic number: var expectedPST = new[] { 0L' 499166460000' 499166490000' 499166490500' 499166490550' 499166490555 };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestStringToMillis,The following statement contains a magic number: var expectedPST = new[] { 0L' 499166460000' 499166490000' 499166490500' 499166490550' 499166490555 };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestStringToMillis,The following statement contains a magic number: var expectedPST = new[] { 0L' 499166460000' 499166490000' 499166490500' 499166490550' 499166490555 };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestStringToMillis,The following statement contains a magic number: var expectedUTC = new[] { 0L' 499137660000' 499137690000' 499137690500' 499137690550' 499137690555 };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestStringToMillis,The following statement contains a magic number: var expectedUTC = new[] { 0L' 499137660000' 499137690000' 499137690500' 499137690550' 499137690555 };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestStringToMillis,The following statement contains a magic number: var expectedUTC = new[] { 0L' 499137660000' 499137690000' 499137690500' 499137690550' 499137690555 };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestStringToMillis,The following statement contains a magic number: var expectedUTC = new[] { 0L' 499137660000' 499137690000' 499137690500' 499137690550' 499137690555 };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestStringToMillis,The following statement contains a magic number: var expectedUTC = new[] { 0L' 499137660000' 499137690000' 499137690500' 499137690550' 499137690555 };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestStringToMillis,The following statement contains a magic number: var dto = DateTimeOffset.FromUnixTimeMilliseconds(499132800000);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestStringToMillis,The following statement contains a magic number: offset += 3600000;
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestStringToMillis,The following statement contains a magic number: expectedLocal.Add(499132800000 - offset);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestStringToMillis,The following statement contains a magic number: result.GetLong(2).Should().Be(expectedJST[i]);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestStringToMillis,The following statement contains a magic number: result.GetLong(3).Should().Be(expectedPST[i]);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestStringToMillis,The following statement contains a magic number: result.GetLong(4).Should().Be(expectedPST[i]);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestStringToMillis,The following statement contains a magic number: result.GetLong(5).Should().Be(expectedUTC[i]);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestStringToUTC,The following statement contains a magic number: result.GetString(2).Should().Be(expectedJST[i]);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestStringToUTC,The following statement contains a magic number: result.GetString(3).Should().Be(expectedPST[i]);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestStringToUTC,The following statement contains a magic number: result.GetString(4).Should().Be(expectedPST[i]);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestStringToUTC,The following statement contains a magic number: result.GetString(5).Should().Be(expectedUTC[i]);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestMillisConversion,The following statement contains a magic number: var millisToUse = new[] { 499132800000' 499137660000' 499137690000' 499137690500' 499137690550' 499137690555 };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestMillisConversion,The following statement contains a magic number: var millisToUse = new[] { 499132800000' 499137660000' 499137690000' 499137690500' 499137690550' 499137690555 };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestMillisConversion,The following statement contains a magic number: var millisToUse = new[] { 499132800000' 499137660000' 499137690000' 499137690500' 499137690550' 499137690555 };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestMillisConversion,The following statement contains a magic number: var millisToUse = new[] { 499132800000' 499137660000' 499137690000' 499137690500' 499137690550' 499137690555 };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestMillisConversion,The following statement contains a magic number: var millisToUse = new[] { 499132800000' 499137660000' 499137690000' 499137690500' 499137690550' 499137690555 };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestMillisConversion,The following statement contains a magic number: var millisToUse = new[] { 499132800000' 499137660000' 499137690000' 499137690500' 499137690550' 499137690555 };
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestMillisConversion,The following statement contains a magic number: var expectedLocal = millisToUse.Select(x =>              {                  var date = DateTimeOffset.FromUnixTimeMilliseconds(x).ToLocalTime();                  if (date.Offset == TimeSpan.Zero) {                      return date.ToString("yyyy-MM-ddTHH:mm:ss.fffZ").Replace(".000"' "");                  }                      var almost = date.ToString("yyyy-MM-ddTHH:mm:ss.fffzzz").Replace(".000"' "");                  return almost.Remove(almost.Length - 3' 1); // Remove colon since formatting cannot do it              });
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestSelectEmptyClause,The following statement contains a magic number: LoadNumbers(100);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLiveQueryNoUpdateInternal,The following statement contains a magic number: LoadNumbers(100);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLiveQueryNoUpdateInternal,The following statement contains a magic number: await Task.Delay(500);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLiveQueryNoUpdateInternal,The following statement contains a magic number: CreateDocInSeries(111' 100);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLiveQueryNoUpdateInternal,The following statement contains a magic number: CreateDocInSeries(111' 100);
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLiveQueryNoUpdateInternal,The following statement contains a magic number: are.WaitOne(5000).Should()                          .BeTrue("because the Changed event should fire once for the initial results");
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestLiveQueryNoUpdateInternal,The following statement contains a magic number: are.WaitOne(5000).Should().BeFalse("because the Changed event should not fire needlessly");
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereBetweenValidator,The following statement contains a magic number: return Convert.ToInt32(properties["number1"]) >= 3 &&                     Convert.ToInt32(properties["number1"]) <= 7;
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereBetweenValidator,The following statement contains a magic number: return Convert.ToInt32(properties["number1"]) >= 3 &&                     Convert.ToInt32(properties["number1"]) <= 7;
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereAndValidator,The following statement contains a magic number: return Convert.ToInt32(properties["number1"]) > 3 &&                     Convert.ToInt32(properties["number2"]) > 3;
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereAndValidator,The following statement contains a magic number: return Convert.ToInt32(properties["number1"]) > 3 &&                     Convert.ToInt32(properties["number2"]) > 3;
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereOrValidator,The following statement contains a magic number: return Convert.ToInt32(properties["number1"]) < 3 ||                     Convert.ToInt32(properties["number2"]) < 3;
Magic Number,Test,QueryTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\QueryTest.cs,TestWhereOrValidator,The following statement contains a magic number: return Convert.ToInt32(properties["number1"]) < 3 ||                     Convert.ToInt32(properties["number2"]) < 3;
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestReplicatorStopsWhenEndpointInvalid,The following statement contains a magic number: Thread.Sleep(TimeSpan.FromSeconds(51));
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestReplicatorStopsWhenEndpointInvalid,The following statement contains a magic number: await Task.Delay(500);
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestReplicatorStopsWhenEndpointInvalid,The following statement contains a magic number: count++ <= 10 && repl.Status.Activity != ReplicatorActivityLevel.Stopped
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestReplicatorStopsWhenEndpointInvalid,The following statement contains a magic number: count.Should().BeLessThan(10' "because otherwise the replicator never stopped");
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestPushPullKeepsFilter,The following statement contains a magic number: i < 2
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestRevisionIdInPushPullFilters,The following statement contains a magic number: doc2.SetInt("Two"' 2);
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestRevisionIdInPushPullFilters,The following statement contains a magic number: config.PullFilter = (doc' isPush) =>              {                  try {                      doc.GetInt("Two").Should().Be(2);                      doc.RevisionID.Should().NotBeNull();                      Action act = () => doc.ToMutable();                      act.Should().Throw<InvalidOperationException>()                        .WithMessage(CouchbaseLiteErrorMessage.NoDocEditInReplicationFilter);                  } catch (Exception e) {                      exceptions.Add(e);                  }                    return true;              };
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestBlobAccessInFilter,The following statement contains a magic number: var content1 = new byte[] { 1' 2' 3 };
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestBlobAccessInFilter,The following statement contains a magic number: var content1 = new byte[] { 1' 2' 3 };
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestBlobAccessInFilter,The following statement contains a magic number: var content2 = new byte[] { 4' 5' 6 };
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestBlobAccessInFilter,The following statement contains a magic number: var content2 = new byte[] { 4' 5' 6 };
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestBlobAccessInFilter,The following statement contains a magic number: var content2 = new byte[] { 4' 5' 6 };
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestPushDoc,The following statement contains a magic number: _otherDB.Count.Should().Be(2UL);
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestPushDocContinuous,The following statement contains a magic number: _otherDB.Count.Should().Be(2UL);
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestPullDoc,The following statement contains a magic number: Db.Count.Should().Be(2' "because the replicator should have pulled doc2 from the other DB");
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestPullDocContinuous,The following statement contains a magic number: Db.Count.Should().Be(2' "because the replicator should have pulled doc2 from the other DB");
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestDocIDFilter,The following statement contains a magic number: Db.Count.Should().Be(3' "because only one document should have been pulled");
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestDocIDFilter,The following statement contains a magic number: _otherDB.Count.Should().Be(3' "because only one document should have been pushed");
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestReplicatorStopWhenClosed,The following statement contains a magic number: await Task.Delay(500);
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestReplicatorStopWhenClosed,The following statement contains a magic number: await Task.Delay(500);
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestStopContinuousReplicator,The following statement contains a magic number: waitAssert.WaitForResult(TimeSpan.FromSeconds(5));
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestStopContinuousReplicator,The following statement contains a magic number: Task.Delay(100).Wait();
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestDocumentEndedEvent,The following statement contains a magic number: _waitAssert.WaitForResult(TimeSpan.FromSeconds(30));
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestDocumentEndedEvent,The following statement contains a magic number: _replicationEvents.Should().HaveCount(2);
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestDocumentErrorEvent,The following statement contains a magic number: wa.WaitForResult(TimeSpan.FromSeconds(10));
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestDocumentErrorEvent,The following statement contains a magic number: Try.Condition(() => repl.Status.Activity == ReplicatorActivityLevel.Stopped)                      .Times(5)                      .Delay(TimeSpan.FromMilliseconds(500))                      .Go().Should().BeTrue();
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestDocumentErrorEvent,The following statement contains a magic number: Try.Condition(() => repl.Status.Activity == ReplicatorActivityLevel.Stopped)                      .Times(5)                      .Delay(TimeSpan.FromMilliseconds(500))                      .Go().Should().BeTrue();
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestDocumentDeletedEvent,The following statement contains a magic number: pushWait.WaitForResult(TimeSpan.FromSeconds(5));
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestChannelRemovedEvent,The following statement contains a magic number: pullWait.WaitForResult(TimeSpan.FromSeconds(5));
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestResetCheckpoint,The following statement contains a magic number: _otherDB.Count.Should().Be(2UL);
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestResetCheckpoint,The following statement contains a magic number: Db.Count.Should().Be(2UL' "because the replicator was reset");
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestShortP2P,The following statement contains a magic number: _otherDB.Count.Should().Be(2UL' "because it contains the original and new");
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestShortP2P,The following statement contains a magic number: Db.Count.Should().Be(2UL' "because the pull should add the document from otherDB");
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestShortP2P,The following statement contains a magic number: Db.Count.Should().Be(2UL' "because no new documents were added");
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestP2PPassiveClose,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestP2PPassiveClose,The following statement contains a magic number: count.Should().BeLessThan(10' "because otherwise the replicator never went idle");
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestP2PPassiveClose,The following statement contains a magic number: count++ < 10 && replicator.Status.Activity != ReplicatorActivityLevel.Idle
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestP2PPassiveClose,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestP2PPassiveClose,The following statement contains a magic number: count.Should().BeLessThan(10' "because otherwise the replicator never stopped");
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestP2PPassiveClose,The following statement contains a magic number: count++ < 10 && replicator.Status.Activity != ReplicatorActivityLevel.Stopped
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestP2PPassiveClose,The following statement contains a magic number: awaiter.WaitHandle.WaitOne(TimeSpan.FromSeconds(10)).Should().BeTrue();
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestP2PPassiveCloseAll,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestP2PPassiveCloseAll,The following statement contains a magic number: count.Should().BeLessThan(10' "because otherwise the replicator(s) never went idle");
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestP2PPassiveCloseAll,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestP2PPassiveCloseAll,The following statement contains a magic number: count.Should().BeLessThan(10' "because otherwise the replicator(s) never stopped");
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestP2PPassiveCloseAll,The following statement contains a magic number: closeWait1.Wait(TimeSpan.FromSeconds(5)).Should()                      .BeTrue("because otherwise the first listener did not stop");
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestP2PPassiveCloseAll,The following statement contains a magic number: closeWait2.Wait(TimeSpan.FromSeconds(5)).Should()                      .BeTrue("because otherwise the second listener did not stop");
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestP2PChangeListener,The following statement contains a magic number: awaiter.WaitHandle.WaitOne(TimeSpan.FromSeconds(10)).Should().BeTrue();
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestRemoveChangeListener,The following statement contains a magic number: awaiter.WaitHandle.WaitOne(TimeSpan.FromSeconds(10)).Should().BeTrue();
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestPushAndForget,The following statement contains a magic number: i < 10
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestPushAndForget,The following statement contains a magic number: var success = Try.Condition(() => Db.Count == 0).Times(5).Go();
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestPushAndForget,The following statement contains a magic number: _otherDB.Count.Should().Be(10' "because the documents should have been pushed");
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestConflictResolverCalledTwice,The following statement contains a magic number: resolveCnt.Should().Be(2);
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestNonBlockingConflictResolver,The following statement contains a magic number: config.ConflictResolver = new TestConflictResolver((conflict) =>              {                  var cnt = 0;                  lock (q) {                      q.Enqueue(conflict.LocalDocument.Id);                      cnt = q.Count;                  }                    if (cnt == 1) {                      manualResetEvent.WaitOne();                  }                    q.Enqueue(conflict.LocalDocument.Id);                  wa.RunConditionalAssert(() => q.Count.Equals(4));                    if (cnt != 1) {                      manualResetEvent.Set();                  }                    return conflict.RemoteDocument;              });
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestNonBlockingConflictResolver,The following statement contains a magic number: wa.WaitForResult(TimeSpan.FromMilliseconds(5000));
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestNonBlockingConflictResolver,The following statement contains a magic number: q.ElementAt(0).Should().Be(q.ElementAt(3));
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestNonBlockingConflictResolver,The following statement contains a magic number: q.ElementAt(1).Should().Be(q.ElementAt(2));
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestDoubleConflictResolutionOnSameConflicts,The following statement contains a magic number: config.ConflictResolver = new TestConflictResolver((conflict) =>              {                  firstReplicatorStart.Set();                  secondReplicatorFinish.Wait();                  Thread.Sleep(500);                  resolveCnt++;                  return conflict.LocalDocument;              });
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestDoubleConflictResolutionOnSameConflicts,The following statement contains a magic number: config1.ConflictResolver = new TestConflictResolver((conflict) =>              {                  resolveCnt++;                  Task.Delay(500).ContinueWith(t => secondReplicatorFinish.Set()); // Set after return                  return conflict.RemoteDocument;              });
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestDoubleConflictResolutionOnSameConflicts,The following statement contains a magic number: _waitAssert.WaitForResult(TimeSpan.FromSeconds(10));
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestDoubleConflictResolutionOnSameConflicts,The following statement contains a magic number: _waitAssert1.WaitForResult(TimeSpan.FromSeconds(10));
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestDoubleConflictResolutionOnSameConflicts,The following statement contains a magic number: doc.GetBlob("blob")?.Content.Should().Contain(new byte[] { 7' 7' 7 });
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestDoubleConflictResolutionOnSameConflicts,The following statement contains a magic number: doc.GetBlob("blob")?.Content.Should().Contain(new byte[] { 7' 7' 7 });
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestDoubleConflictResolutionOnSameConflicts,The following statement contains a magic number: doc.GetBlob("blob")?.Content.Should().Contain(new byte[] { 7' 7' 7 });
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestConflictResolverReturningBlob,The following statement contains a magic number: config.ConflictResolver = new TestConflictResolver((conflict) =>              {                  var evilByteArray = new byte[] { 6' 6' 6 };                    var doc = new MutableDocument();                  doc.SetBlob("blob"' new Blob("text/plaintext"' evilByteArray));                  return doc;              });
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestConflictResolverReturningBlob,The following statement contains a magic number: config.ConflictResolver = new TestConflictResolver((conflict) =>              {                  var evilByteArray = new byte[] { 6' 6' 6 };                    var doc = new MutableDocument();                  doc.SetBlob("blob"' new Blob("text/plaintext"' evilByteArray));                  return doc;              });
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestConflictResolverReturningBlob,The following statement contains a magic number: config.ConflictResolver = new TestConflictResolver((conflict) =>              {                  var evilByteArray = new byte[] { 6' 6' 6 };                    var doc = new MutableDocument();                  doc.SetBlob("blob"' new Blob("text/plaintext"' evilByteArray));                  return doc;              });
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestConflictResolverReturningBlob,The following statement contains a magic number: doc.GetBlob("blob")?.Content.Should().ContainInOrder(new byte[] { 6' 6' 6 });
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestConflictResolverReturningBlob,The following statement contains a magic number: doc.GetBlob("blob")?.Content.Should().ContainInOrder(new byte[] { 6' 6' 6 });
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestConflictResolverReturningBlob,The following statement contains a magic number: doc.GetBlob("blob")?.Content.Should().ContainInOrder(new byte[] { 6' 6' 6 });
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestConflictResolverExceptionThrown,The following statement contains a magic number: wa.WaitForResult(TimeSpan.FromSeconds(10));
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestConflictResolverExceptionThrown,The following statement contains a magic number: Try.Condition(() => repl.Status.Activity == ReplicatorActivityLevel.Stopped)                      .Times(5)                      .Delay(TimeSpan.FromMilliseconds(500))                      .Go().Should().BeTrue();
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestConflictResolverExceptionThrown,The following statement contains a magic number: Try.Condition(() => repl.Status.Activity == ReplicatorActivityLevel.Stopped)                      .Times(5)                      .Delay(TimeSpan.FromMilliseconds(500))                      .Go().Should().BeTrue();
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestConflictResolverWins,The following statement contains a magic number: doc.GetBlob("blob")?.Content.Should().ContainInOrder(new byte[] { 7' 7' 7 });
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestConflictResolverWins,The following statement contains a magic number: doc.GetBlob("blob")?.Content.Should().ContainInOrder(new byte[] { 7' 7' 7 });
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,TestConflictResolverWins,The following statement contains a magic number: doc.GetBlob("blob")?.Content.Should().ContainInOrder(new byte[] { 7' 7' 7 });
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,CreateReplicationConflict,The following statement contains a magic number: var oddByteArray = new byte[] { 1' 3' 5 };
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,CreateReplicationConflict,The following statement contains a magic number: var oddByteArray = new byte[] { 1' 3' 5 };
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,CreateReplicationConflict,The following statement contains a magic number: var evilByteArray = new byte[] { 6' 6' 6 };
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,CreateReplicationConflict,The following statement contains a magic number: var evilByteArray = new byte[] { 6' 6' 6 };
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,CreateReplicationConflict,The following statement contains a magic number: var evilByteArray = new byte[] { 6' 6' 6 };
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,CreateReplicationConflict,The following statement contains a magic number: var luckyByteArray = new byte[] { 7' 7' 7 };
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,CreateReplicationConflict,The following statement contains a magic number: var luckyByteArray = new byte[] { 7' 7' 7 };
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,CreateReplicationConflict,The following statement contains a magic number: var luckyByteArray = new byte[] { 7' 7' 7 };
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,RunTwoStepContinuous,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,RunTwoStepContinuous,The following statement contains a magic number: count.Should().BeLessThan(10' "because otherwise the replicator did not advance");
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,RunTwoStepContinuous,The following statement contains a magic number: mdoc.SetInt("version"' 2);
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,RunTwoStepContinuous,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,RunTwoStepContinuous,The following statement contains a magic number: count.Should().BeLessThan(10' "because otherwise the replicator did not advance");
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,RunTwoStepContinuous,The following statement contains a magic number: savedDoc.GetInt("version").Should().Be(2);
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,RunTwoStepContinuous,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,RunReplication,The following statement contains a magic number: _waitAssert.WaitForResult(TimeSpan.FromSeconds(10));
Magic Number,Test,ReplicatorTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\ReplicationTest.cs,Dispose,The following statement contains a magic number: var success = Try.Condition(() =>              {                  try {                      if (name != null) {                          Database.Delete(name' Directory);                      }                  } catch (Exception e) {                      ex = e;                      return false;                  }                    return true;              }).Times(5).Delay(TimeSpan.FromSeconds(1)).WriteProgress(WriteLine).Go();
Magic Number,Test,TestCase,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\TestCase.cs,Dispose,The following statement contains a magic number: var success = Try.Condition(() =>              {                  try {                      if (name != null) {                          Database.Delete(name' Directory);                      }                  } catch (Exception e) {                      ex = e;                      return false;                  }                    return true;              }).Times(5).Delay(TimeSpan.FromSeconds(1)).WriteProgress(WriteLine).Go();
Magic Number,Test,WebSocketTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\WebSocketTest.cs,TestCheckHeader,The following statement contains a magic number: var res = method.Invoke(null' new object[4] { parser' key' expectedValue' caseSens });
Magic Number,Test,WebSocketTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\WebSocketTest.cs,TestCheckHeader,The following statement contains a magic number: res = method.Invoke(null' new object[4] { parser' key' expectedValue' caseSens });
Magic Number,Test,WebSocketTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\WebSocketTest.cs,TestCheckHeader,The following statement contains a magic number: res = method.Invoke(null' new object[4] { parser' key' expectedValue' caseSens });
Magic Number,Test,WebSocketTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\WebSocketTest.cs,TestCheckHeader,The following statement contains a magic number: res = method.Invoke(null' new object[4] { parser' key' expectedValue' caseSens });
Magic Number,Test,WebSocketTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\WebSocketTest.cs,TestReachability,The following statement contains a magic number: res = method.Invoke(_reachability' new object[2] { asender' e });
Magic Number,Test,WebSocketTest,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\WebSocketTest.cs,TestReachability,The following statement contains a magic number: res = method.Invoke(replicator' new object[2] { asender' e });
Magic Number,Test.Util,Benchmark,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\Util\Benchmark.cs,Median,The following statement contains a magic number: return _times[_times.Count / 2];
Magic Number,Test.Util,Benchmark,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\Util\Benchmark.cs,Average,The following statement contains a magic number: var skip = n / 10;
Magic Number,Test.Util,Benchmark,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\Util\Benchmark.cs,Average,The following statement contains a magic number: return TimeSpan.FromTicks(total / (n - 2 * skip));
Magic Number,Test.Util,Benchmark,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\Util\Benchmark.cs,Stddev,The following statement contains a magic number: var skip = n / 10;
Magic Number,Test.Util,Benchmark,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\Util\Benchmark.cs,Stddev,The following statement contains a magic number: total += Math.Pow(t.TotalMilliseconds - avg' 2.0);
Magic Number,Test.Util,Benchmark,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\Util\Benchmark.cs,Stddev,The following statement contains a magic number: return TimeSpan.FromMilliseconds(Math.Sqrt(total / (n - 2.0 * skip)));
Magic Number,Test.Util,Benchmark,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\Util\Benchmark.cs,PrintReport,The following statement contains a magic number: scale *= 1000;
Magic Number,System.IO.Compression,ZipFileExtensions,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\Util\ZipFileExtensions.cs,DoCreateEntryFromFile,The following statement contains a magic number: lastWrite = new DateTime(1980' 1' 1' 0' 0' 0);
Magic Number,System.IO.Compression,ZipFileExtensions,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\Util\ZipFileExtensions.cs,DoCreateEntryFromFile,The following statement contains a magic number: lastWrite.Year < 1980 || lastWrite.Year > 2107
Magic Number,System.IO.Compression,ZipFileExtensions,D:\research\architectureSmells\repos\couchbase_couchbase-lite-net\src\Couchbase.Lite.Tests.Shared\Util\ZipFileExtensions.cs,DoCreateEntryFromFile,The following statement contains a magic number: lastWrite.Year < 1980 || lastWrite.Year > 2107
