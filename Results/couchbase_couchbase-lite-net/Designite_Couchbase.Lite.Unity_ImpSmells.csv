Implementation smell,Namespace,Class,File,Method,Description
Long Method,Couchbase.Lite.Internal,RemoteSession,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\RemoteSession.cs,SendAsyncMultipartDownloaderRequest,The method has 106 lines of code.
Long Method,Couchbase.Lite.Internal,ChunkedChanges,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ChunkedChanges.cs,ReadHeader,The method has 117 lines of code.
Complex Method,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,GetFilter,Cyclomatic complexity of the method is 11
Complex Method,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,ForceInsert,Cyclomatic complexity of the method is 8
Complex Method,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,GetAllDocs,Cyclomatic complexity of the method is 9
Complex Method,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,UpdateAttachment,Cyclomatic complexity of the method is 10
Complex Method,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,OpenWithOptions,Cyclomatic complexity of the method is 16
Complex Method,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,DatabaseStorageChanged,Cyclomatic complexity of the method is 8
Complex Method,Couchbase.Lite,Document,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Document.cs,Update,Cyclomatic complexity of the method is 9
Complex Method,Couchbase.Lite,Manager,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager.cs,ReplaceDatabase,Cyclomatic complexity of the method is 18
Complex Method,Couchbase.Lite,Manager,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager.cs,ReadVersion,Cyclomatic complexity of the method is 8
Complex Method,Couchbase.Lite,Manager,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager.cs,ReplicationWithProperties,Cyclomatic complexity of the method is 9
Complex Method,Couchbase.Lite,Manager,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager.cs,ParseReplicationProperties,Cyclomatic complexity of the method is 21
Complex Method,Couchbase.Lite,Replication,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication.cs,StatusFromBulkDocsResponseItem,Cyclomatic complexity of the method is 8
Complex Method,Couchbase.Lite,Replication,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication.cs,StartInternal,Cyclomatic complexity of the method is 8
Complex Method,Couchbase.Lite,Replication,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication.cs,RemoteCheckpointDocID,Cyclomatic complexity of the method is 10
Complex Method,Couchbase.Lite,Replication,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication.cs,SaveLastSequence,Cyclomatic complexity of the method is 9
Complex Method,Couchbase.Lite.Auth,OpenIDAuthenticator,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Auth\OpenIDAuthenticator.cs,ProcessLoginResponse,Cyclomatic complexity of the method is 8
Complex Method,Couchbase.Lite.Internal,AttachmentInternal,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Documents\AttachmentInternal.cs,AttachmentInternal,Cyclomatic complexity of the method is 14
Complex Method,Couchbase.Lite.Internal,RevisionInternal,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Revisions\RevisionInternal.cs,MutateAttachments,Cyclomatic complexity of the method is 8
Complex Method,Couchbase.Lite.Internal,SocketChangeTracker,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\SocketChangeTracker.cs,RetryOrStopIfNecessary,Cyclomatic complexity of the method is 24
Complex Method,Couchbase.Lite.Internal,SocketChangeTracker,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\SocketChangeTracker.cs,RetryOrStopIfNecessary,Cyclomatic complexity of the method is 13
Complex Method,Couchbase.Lite.Internal,ChangeTracker,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ChangeTracker.cs,GetChangesFeedPath,Cyclomatic complexity of the method is 12
Complex Method,Couchbase.Lite.Internal,OneShotOrLongPollLogic,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\OneShotOrLongPollLogic.cs,ReceivedPollResponse,Cyclomatic complexity of the method is 8
Complex Method,Couchbase.Lite.Internal,OneShotOrLongPollLogic,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\OneShotOrLongPollLogic.cs,ProcessResponseStream,Cyclomatic complexity of the method is 9
Complex Method,Couchbase.Lite.Internal,ChunkedChanges,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ChunkedChanges.cs,Process,Cyclomatic complexity of the method is 10
Complex Method,Couchbase.Lite.Internal,ChunkedChanges,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ChunkedChanges.cs,ReadHeader,Cyclomatic complexity of the method is 26
Complex Method,Couchbase.Lite.Internal,ExceptionResolver,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ExceptionResolver.cs,Analyze,Cyclomatic complexity of the method is 32
Complex Method,Couchbase.Lite.Util,LogicalDictionaryRule,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\LogicalDictionary.cs,Validate,Cyclomatic complexity of the method is 12
Complex Method,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,GetQueryParameter,Cyclomatic complexity of the method is 8
Complex Method,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,Encode,Cyclomatic complexity of the method is 10
Complex Method,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,Decode,Cyclomatic complexity of the method is 10
Complex Method,Couchbase.Lite.Util,TransientErrorRetryHandler,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\TransientErrorRetryHandler.cs,HandleTransientErrors,Cyclomatic complexity of the method is 12
Complex Method,Couchbase.Lite.Util,CookieParser,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\CookieParser.cs,ParseSegment,Cyclomatic complexity of the method is 13
Complex Method,Couchbase.Lite.Util,TimeSeries,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\TimeSeries.cs,GetEventsInRange,Cyclomatic complexity of the method is 11
Complex Method,Couchbase.Lite.Support,MultipartDocumentReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartDocumentReader.cs,RegisterAttachments,Cyclomatic complexity of the method is 15
Complex Method,Couchbase.Lite.Support,MultipartDocumentReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartDocumentReader.cs,StartedPart,Cyclomatic complexity of the method is 10
Complex Method,Couchbase.Lite.Support,MultipartReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartReader.cs,AppendData,Cyclomatic complexity of the method is 30
Complex Method,Couchbase.Lite.Support,MultipartReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartReader.cs,ParseContentType,Cyclomatic complexity of the method is 8
Complex Method,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,ProcessChangeTrackerStopped,Cyclomatic complexity of the method is 8
Complex Method,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,QueueDownloadedRevision,Cyclomatic complexity of the method is 9
Complex Method,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,ChangeTrackerReceivedChange,Cyclomatic complexity of the method is 12
Complex Method,Couchbase.Lite.Replicator,DefaultAuthHandler,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\DefaultAuthHandler.cs,ProcessResponse,Cyclomatic complexity of the method is 9
Complex Method,Couchbase.Lite.Views,BuiltinReduceFunctions,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\View\BuiltinReduceFunctions.cs,Partition,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.IO,RecyclableMemoryStream,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\RecyclableMemoryStream.cs,Dispose,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.IO,RecyclableMemoryStream,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\RecyclableMemoryStream.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.IO,RecyclableMemoryStream,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\RecyclableMemoryStream.cs,Seek,Cyclomatic complexity of the method is 13
Long Parameter List,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,PutDocument,The method has 5 parameters.
Long Parameter List,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,UpdateAttachment,The method has 7 parameters.
Long Parameter List,Couchbase.Lite,Replication,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication.cs,Replication,The method has 5 parameters.
Long Parameter List,Couchbase.Lite,Replication,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication.cs,SetCookie,The method has 6 parameters.
Long Parameter List,Couchbase.Lite,QueryRow,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Query\QueryRow.cs,QueryRow,The method has 6 parameters.
Long Parameter List,Couchbase.Lite,ExtensionMethods,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\ExtensionMethods.cs,RegionMatches,The method has 5 parameters.
Long Parameter List,Couchbase.Lite,Misc,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\Misc.cs,CreateExceptionAndLog,The method has 5 parameters.
Long Parameter List,Couchbase.Lite,Misc,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\Misc.cs,CreateExceptionAndLog,The method has 5 parameters.
Long Parameter List,Couchbase.Lite,Misc,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\Misc.cs,CreateExceptionAndLog,The method has 5 parameters.
Long Parameter List,Couchbase.Lite,Misc,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\Misc.cs,CreateExceptionAndLog,The method has 6 parameters.
Long Parameter List,Couchbase.Lite.Internal,RemoteSession,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\RemoteSession.cs,SendAsyncRequest,The method has 5 parameters.
Long Parameter List,Couchbase.Lite.Internal,RemoteSession,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\RemoteSession.cs,SendAsyncRequest,The method has 5 parameters.
Long Parameter List,Couchbase.Lite.Internal,RemoteSession,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\RemoteSession.cs,SendAsyncMultipartDownloaderRequest,The method has 5 parameters.
Long Parameter List,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,Puller,The method has 5 parameters.
Long Parameter List,Couchbase.Lite.Replicator,Pusher,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Pusher.cs,Pusher,The method has 5 parameters.
Long Parameter List,Couchbase.Lite.Store,ICouchStore,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database\ICouchStore.cs,PutRevision,The method has 7 parameters.
Long Statement,Couchbase.Lite,Attachment,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Attachment.cs,InstallAttachmentBodies,The length of the statement  "					throw Misc.CreateExceptionAndLog (Log.To.Database' StatusCode.BadAttachment' Tag' "Error installing attachment body ({0})"' errMsg); " is 132.
Long Statement,Couchbase.Lite,Attachment,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Attachment.cs,InstallAttachmentBodies,The length of the statement  "			throw Misc.CreateExceptionAndLog (Log.To.Database' StatusCode.BadParam' Tag' "AttachmentInternal objects not expected here.  Could indicate a bug"); " is 148.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,StripDocumentJSON,The length of the statement  "			Log.To.Database.W (Tag' "Invalid top-level key '{0}' in document to be inserted' " + "returning null from StripDocumentJSON..."' pair.Key); " is 139.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,RegisterAttachmentBodies,The length of the statement  "					Log.To.Database.W (Tag' "Attachment '{0}' body digest ({1}) doesn't match " + "'digest' property {2}"' name' sha1Digest' digest); " is 129.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,ForceInsert,The length of the statement  "		throw Misc.CreateExceptionAndLog (Log.To.Database' StatusCode.DbError' Tag' "Cannot perform ForceInsert on a closed database"); " is 127.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,ForceInsert,The length of the statement  "			throw Misc.CreateExceptionAndLog (Log.To.Database' StatusCode.BadId' Tag' "Cannot force insert a revision with a null revision ID"); " is 132.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,ForceInsert,The length of the statement  "		throw Misc.CreateExceptionAndLog (Log.To.Database' StatusCode.BadId' Tag' "{0} is not a valid document ID"' new SecureLogString (rev.DocID' LogMessageSensitivity.PotentiallyInsecure)); " is 184.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,AddActiveReplication,The length of the statement  "		if (e.ReplicationStateTransition != null && (e.ReplicationStateTransition.Trigger == ReplicationTrigger.StopGraceful || e.ReplicationStateTransition.Trigger == ReplicationTrigger.StopImmediate)) { " is 196.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,QueryViewNamed,The length of the statement  "			throw Misc.CreateExceptionAndLog (Log.To.Query' StatusCode.NotFound' Tag' "Unable to query view named `{0}` (not found)"' viewName); " is 132.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,QueryViewNamed,The length of the statement  "				throw Misc.CreateExceptionAndLog (Log.To.Query' status.Code' Tag' "Failed to update index for `{0}`: {1}' "' viewName' status.Code); " is 132.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,PutDocument,The length of the statement  "	Log.To.Database.V (Tag' "PUT _id={0}' _rev={1}' _deleted={2}' allowConflict={3}"' new SecureLogString (docId' LogMessageSensitivity.PotentiallyInsecure)' prevRevId' deleting' allowConflict); " is 190.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,PutDocument,The length of the statement  "		throw Misc.CreateExceptionAndLog (Log.To.Database' StatusCode.BadId' Tag' "prevRevId {0} specified in PutDocument' but docId not specified"' prevRevId); " is 152.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,PutDocument,The length of the statement  "		throw Misc.CreateExceptionAndLog (Log.To.Database' StatusCode.BadId' Tag' "No document ID specified on a delete request"); " is 122.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,PostChangeNotifications,The length of the statement  "	while ((Storage == null || !Storage.InTransaction) && IsOpen && !_isPostingChangeNotifications && _changesToNotify != null && _changesToNotify.Count > 0) { " is 155.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,PostChangeNotifications,The length of the statement  "			Log.To.Database.I (Tag' "{0} posting change notifications: seq {1}"' this' new LogJsonString (from change in outgoingChanges " is 124.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,InstallAttachment,The length of the statement  "		throw Misc.CreateExceptionAndLog (Log.To.Database' StatusCode.BadAttachment' Tag' "InstallAttachment received an attachment without a digest"); " is 143.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,InstallAttachment,The length of the statement  "			Log.To.Database.E (Tag' "Error installing attachment '{0}'' rethrowing..."' new SecureLogString (attachment.Name' LogMessageSensitivity.PotentiallyInsecure)); " is 158.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,InstallAttachment,The length of the statement  "			throw Misc.CreateExceptionAndLog (Log.To.Database' e' Tag' "Error installing attachment '{0}'"' new SecureLogString (attachment.Name' LogMessageSensitivity.PotentiallyInsecure)); " is 178.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,ExpandAttachments,The length of the statement  "		throw Misc.CreateExceptionAndLog (Log.To.Database' StatusCode.DbError' Tag' "{0} ExpandAttachments called on a closed database"' this); " is 135.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,ExpandAttachments,The length of the statement  "				Log.To.Database.W (Tag' "Can't get binary data of attachment '{0}' of {1}' " + "returning attachment without data"' name' rev); " is 127.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,ProcessAttachmentsForRevision,The length of the statement  "			Log.To.Database.W (Tag' "Error creating attachment object for '{0}' ('{1}')' " + "returning null"' new SecureLogString (name' LogMessageSensitivity.PotentiallyInsecure)' new SecureLogJsonString (attachInfo' LogMessageSensitivity.PotentiallyInsecure)); " is 251.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,ProcessAttachmentsForRevision,The length of the statement  "				throw Misc.CreateExceptionAndLog (Log.To.Database' e' Tag' "Exception during attachment writing '{0}'"' new SecureLogString (name' LogMessageSensitivity.PotentiallyInsecure)); " is 175.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,ProcessAttachmentsForRevision,The length of the statement  "					throw Misc.CreateExceptionAndLog (Log.To.Database' StatusCode.BadAttachment' Tag' "Unable to find 'stub' attachment {0} in history (1)"' new SecureLogString (name' LogMessageSensitivity.PotentiallyInsecure)); " is 208.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,ProcessAttachmentsForRevision,The length of the statement  "				throw Misc.CreateExceptionAndLog (Log.To.Database' StatusCode.BadAttachment' Tag' "Unable to find 'stub' attachment {0} in history (2)"' new SecureLogString (name' LogMessageSensitivity.PotentiallyInsecure)); " is 208.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,ProcessAttachmentsForRevision,The length of the statement  "			throw Misc.CreateExceptionAndLog (Log.To.Database' StatusCode.BadAttachment' Tag' "Attachment specifies revision generation {0} but document is only at revision generation {1}"' attachment.RevPos' generation); " is 209.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,LoadRevisionBody,The length of the statement  "			throw Misc.CreateExceptionAndLog (Log.To.Database' StatusCode.NotFound' Tag' "Attempting to load the body of a compacted revision ({0} {1})"' new SecureLogString (rev.DocID' LogMessageSensitivity.PotentiallyInsecure)' rev.RevID); " is 229.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,UpdateAttachment,The length of the statement  "		throw Misc.CreateExceptionAndLog (Log.To.Database' StatusCode.BadAttachment' Tag' "Invalid filename (null or whitespace) in UpdateAttachment"); " is 143.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,UpdateAttachment,The length of the statement  "		throw Misc.CreateExceptionAndLog (Log.To.Database' StatusCode.BadAttachment' Tag' "Body provided' but content type is null in UpdateAttachment"); " is 145.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,UpdateAttachment,The length of the statement  "		throw Misc.CreateExceptionAndLog (Log.To.Database' StatusCode.BadAttachment' Tag' "oldRevID provided ({0}) but docID is null in UpdateAttachment"' oldRevID); " is 157.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,UpdateAttachment,The length of the statement  "		throw Misc.CreateExceptionAndLog (Log.To.Database' StatusCode.BadAttachment' Tag' "body provided but docID is null in UpdateAttachment"); " is 137.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,UpdateAttachment,The length of the statement  "			throw Misc.CreateExceptionAndLog (Log.To.Database' StatusCode.AttachmentNotFound' Tag' "Attachment {0} not found"' new SecureLogString (filename' LogMessageSensitivity.PotentiallyInsecure)); " is 190.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,ValidateRevision,The length of the statement  "			Log.To.Database.E (Tag' String.Format ("Validation block '{0}' got exception' " + "aborting validation process..."' validationName)' e); " is 136.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,ValidateRevision,The length of the statement  "			Log.To.Validation.I (Tag' "Failed update of {0}: {1}:{2} Old doc = {3}{2} New doc = {4}"' oldRev' context.RejectMessage' Environment.NewLine' oldRev == null ? null : oldRev.GetProperties ()' newRev.GetProperties ()); " is 216.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,OpenWithOptions,The length of the statement  "			throw Misc.CreateExceptionAndLog (Log.To.Database' StatusCode.InvalidStorageType' Tag' "No implementation found for SQLite storage.  For more information' see " + "https://github.com/couchbase/couchbase-lite-net/wiki/Error-Dictionary#cblcs0001"); " is 246.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,OpenWithOptions,The length of the statement  "			throw Misc.CreateExceptionAndLog (Log.To.Database' StatusCode.InvalidStorageType' Tag' "No implementation found for ForestDB storage.  For more information' see " + "https://github.com/couchbase/couchbase-lite-net/wiki/Error-Dictionary#cblcs0002"); " is 248.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,OpenWithOptions,The length of the statement  "	var otherStorage = primarySQLite ? GetStorageClass (StorageEngineTypes.ForestDB) : GetStorageClass (StorageEngineTypes.SQLite); " is 127.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,OpenWithOptions,The length of the statement  "		upgrade = otherStorageInstance != null && otherStorageInstance.DatabaseExistsIn (DbDirectory) && !primaryStorageInstance.DatabaseExistsIn (DbDirectory); " is 152.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,OpenWithOptions,The length of the statement  "			throw Misc.CreateExceptionAndLog (Log.To.Upgrade' StatusCode.InvalidStorageType' Tag' "Upgrades from ForestDB to SQLite are not supported.  For more information see " + "https://github.com/couchbase/couchbase-lite-net/wiki/Error-Dictionary#cbldb0001"); " is 252.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,OpenWithOptions,The length of the statement  "		throw Misc.CreateExceptionAndLog (Log.To.Database' e' Tag' "Got exception creating blob store at {0}"' attachmentsPath); " is 120.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,OpenWithOptions,The length of the statement  "		var upgrader = primarySQLite ? Storage.CreateUpgrader (this' DbDirectory) : otherStorageInstance.CreateUpgrader (this' DbDirectory); " is 132.
Long Statement,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,GetStorageClass,The length of the statement  "		throw Misc.CreateExceptionAndLog (Log.To.Database' StatusCode.InvalidStorageType' "Unknown store type {0}"' identifier); " is 120.
Long Statement,Couchbase.Lite,Document,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Document.cs,PutExistingRevision,The length of the statement  "		Log.To.Database.E (Tag' "Invalid revision history in PutExistingRevision (must contain at " + "least one revision ID)' throwing..."); " is 133.
Long Statement,Couchbase.Lite,Document,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Document.cs,PropertiesToInsert,The length of the statement  "		Log.To.Database.W (Tag' "Trying to PUT wrong _id to {0}: {1}"' this' new SecureLogJsonString (properties' LogMessageSensitivity.PotentiallyInsecure)); " is 150.
Long Statement,Couchbase.Lite,Manager,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager.cs,ReplaceDatabase,The length of the statement  "		Log.To.Database.E (TAG' "Given name ({0}) does not match name given in zip file ({1}) " + "and autoRename is false' throwing..."' name' zipDbName); " is 147.
Long Statement,Couchbase.Lite,Manager,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager.cs,GetDbNameAndExtFromZip,The length of the statement  "			var fileInfo = next.IsDirectory ? (FileSystemInfo)new DirectoryInfo (next.Name) : (FileSystemInfo)new FileInfo (next.Name); " is 123.
Long Statement,Couchbase.Lite,Manager,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager.cs,UpgradeDatabase,The length of the statement  "			var msg = String.Format ("Cannot move {0} to {1}' {2} already exists' returning false..."' oldFilename' newFilename' newFilename); " is 130.
Long Statement,Couchbase.Lite,Manager,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager.cs,ReplicationWithProperties,The length of the statement  "		existing = activeReplicators.FirstOrDefault (x => x.LocalDatabase == rep.LocalDatabase && x.RemoteUrl == rep.RemoteUrl && x.IsPull == rep.IsPull && x.RemoteCheckpointDocID ().Equals (rep.RemoteCheckpointDocID ())); " is 214.
Long Statement,Couchbase.Lite,Manager,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager.cs,ParseReplicationProperties,The length of the statement  "	if (!remote.Scheme.Equals ("http") && !remote.Scheme.Equals ("https") && !remote.Scheme.Equals ("ws") && !remote.Scheme.Equals ("wss")) { " is 137.
Long Statement,Couchbase.Lite,Manager,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager.cs,RunAsync,The length of the statement  "	var task = token == CancellationToken.None ? workExecutor.StartNew<T> (action) : workExecutor.StartNew<T> (action' token); " is 122.
Long Statement,Couchbase.Lite,Query,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Query.cs,ToString,The length of the statement  "	return string.Format ("[Query: Database={0}' Limit={1}' Skip={2}' Descending={3}' StartKey={4}'{19}" + "EndKey={5}' StartKeyDocId={6}' EndKeyDocId={7}' InclusiveStart={8}' InclusiveEnd={9}'{19}" + "IndexUpdateMode={10}' AllDocsMode={11}' Keys={12}' MapOnly={13}' GroupLevel={14}' Prefetch={15}'{19}" + "IncludeDeleted={16}' PostFilter={17}' PrefixMatchLevel={18}]"' Database' Limit' Skip' Descending' new SecureLogJsonString (StartKey' LogMessageSensitivity.PotentiallyInsecure)' new SecureLogJsonString (EndKey' LogMessageSensitivity.PotentiallyInsecure)' new SecureLogString (StartKeyDocId' LogMessageSensitivity.PotentiallyInsecure)' new SecureLogString (EndKeyDocId' LogMessageSensitivity.PotentiallyInsecure)' InclusiveStart' InclusiveEnd' IndexUpdateMode' AllDocsMode' Keys' MapOnly' GroupLevel' Prefetch' IncludeDeleted' PostFilter' PrefixMatchLevel' Environment.NewLine); " is 879.
Long Statement,Couchbase.Lite,Replication,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication.cs,GetPendingDocumentIDs,The length of the statement  "	var revs = LocalDatabase.UnpushedRevisionsSince (lastSequence.ToString ()' LocalDatabase.GetFilter (Filter)' FilterParams); " is 123.
Long Statement,Couchbase.Lite,Replication,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication.cs,SetCookie,The length of the statement  "		Log.To.Sync.W (Tag' "Cookie being constructed with DateTimeKind.Unspecified for expiration date.  " + "This has been known to cause issues with expiration dates being incorrect."); " is 180.
Long Statement,Couchbase.Lite,Replication,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication.cs,ScheduleRetryIfReady,The length of the statement  "	var source = Interlocked.Exchange (ref _retryIfReadyTokenSource' CancellationTokenSource.CreateLinkedTokenSource (CancellationTokenSource.Token)); " is 146.
Long Statement,Couchbase.Lite,Replication,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication.cs,StartInternal,The length of the statement  "	if (!LocalDatabase.Manager.NetworkReachabilityManager.CanReach (_remoteSession' RemoteUrl.AbsoluteUri' ReplicationOptions.RequestTimeout)) { " is 140.
Long Statement,Couchbase.Lite,Replication,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication.cs,StartInternal,The length of the statement  "				Log.To.Sync.W (Tag' "Not starting because identical {0} already exists ({1})"' IsPull ? "puller" : "pusher"' existing._replicatorID); " is 133.
Long Statement,Couchbase.Lite,Replication,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication.cs,HasSameSettingsAs,The length of the statement  "	return LocalDatabase == other.LocalDatabase && IsPull == other.IsPull && RemoteCheckpointDocID ("").Equals (other.RemoteCheckpointDocID ("")); " is 142.
Long Statement,Couchbase.Lite,Replication,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication.cs,Stopping,The length of the statement  "		Log.To.Sync.I (Tag' "{0} stopped.  Elapsed time {1} sec"' this' (DateTime.UtcNow - _startTime).TotalSeconds.ToString ("F3")); " is 125.
Long Statement,Couchbase.Lite,Replication,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication.cs,TransformRevision,The length of the statement  "							throw Misc.CreateExceptionAndLog (Log.To.Sync' StatusCode.InternalServerError' Tag' "Transformer added attachment without adding data"); " is 136.
Long Statement,Couchbase.Lite,Replication,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication.cs,TransformRevision,The length of the statement  "			Log.To.Sync.W (Tag' String.Format ("Exception transforming a revision of doc '{0}'' aborting..."' new SecureLogString (rev.DocID' LogMessageSensitivity.PotentiallyInsecure))' e); " is 178.
Long Statement,Couchbase.Lite,Replication,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication.cs,FetchRemoteCheckpointDoc,The length of the statement  "					Log.To.Sync.I (Tag' "{0} lastSequence mismatch: I had {1}' remote had {2} (response = {3}' " + "resetting lastSequence to 0"' this' localLastSequence' remoteLastSequence' response); " is 181.
Long Statement,Couchbase.Lite,Replication,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication.cs,SaveLastSequence,The length of the statement  "	var message = _remoteSession.SendAsyncRequest (HttpMethod.Put' "/_local/" + remoteCheckpointDocID' body' (result' e) => { " is 121.
Long Statement,Couchbase.Lite,Replication,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication.cs,InitializeStateMachine,The length of the statement  "	_stateMachine.Configure (ReplicationState.Running).Permit (ReplicationTrigger.WaitingForChanges' ReplicationState.Idle); " is 120.
Long Statement,Couchbase.Lite,Replication,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication.cs,InitializeStateMachine,The length of the statement  "	_stateMachine.Configure (ReplicationState.Offline).PermitIf (ReplicationTrigger.GoOnline' ReplicationState.Running' () => LocalDatabase.Manager.NetworkReachabilityManager.CanReach (_remoteSession' RemoteUrl.AbsoluteUri' ReplicationOptions.RequestTimeout)); " is 256.
Long Statement,Couchbase.Lite,Replication,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication.cs,InitializeStateMachine,The length of the statement  "	_stateMachine.Configure (ReplicationState.Stopping).Permit (ReplicationTrigger.StopImmediate' ReplicationState.Stopped); " is 120.
Long Statement,Couchbase.Lite,Replication,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication.cs,InitializeStateMachine,The length of the statement  "	_stateMachine.Configure (ReplicationState.Running).OnExit (transition => Log.To.Sync.V (Tag' "{0} => {1} ({2})"' transition.Source' transition.Destination' _replicatorID)); " is 172.
Long Statement,Couchbase.Lite,Replication,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication.cs,NotifyChangeListeners,The length of the statement  "	Log.To.Sync.V (Tag' "NotifyChangeListeners ({0}/{1}' state={2} (batch={3}' net={4}))"' CompletedChangesCount' ChangesCount' _stateMachine.State' Batcher == null ? 0 : Batcher.Count ()' _remoteSession.RequestCount); " is 214.
Long Statement,Couchbase.Lite,View,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\View.cs,Compile,The length of the statement  "		Log.To.View.W (TAG' "{0} could not compile {1} map fn: {2}"' Name' language' new SecureLogString (mapSource' LogMessageSensitivity.PotentiallyInsecure)); " is 153.
Long Statement,Couchbase.Lite,View,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\View.cs,Compile,The length of the statement  "			Log.To.View.W (TAG' "{0} could not compile {1} reduce fn: {2}"' Name' language' new SecureLogString (reduceSource' LogMessageSensitivity.PotentiallyInsecure)); " is 159.
Long Statement,Couchbase.Lite,DocumentChange,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Documents\DocumentChange.cs,Equals,The length of the statement  "	return RevisionInternal.Equals (AddedRevision' other.AddedRevision) && String.Equals (WinningRevisionId' other.WinningRevisionId) && Uri.Equals (SourceUrl' other.SourceUrl); " is 173.
Long Statement,Couchbase.Lite,DocumentChange,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Documents\DocumentChange.cs,ToString,The length of the statement  "	return String.Format ("DocumentChange[AddedRevision={0}' IsWinner={1}]"' AddedRevision' WinningRevisionId == RevisionId.AsRevID ()); " is 132.
Long Statement,Couchbase.Lite,ManagerOptions,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager\ManagerOptions.cs,ToString,The length of the statement  "	return String.Format ("ManagerOptions[ReadOnly={0}' CallbackScheduler={1}' DefaultReplicationOptions={2}]"' ReadOnly' CallbackScheduler.GetType ().Name' DefaultReplicationOptions); " is 180.
Long Statement,Couchbase.Lite,LiveQuery,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Query\LiveQuery.cs,Update,The length of the statement  "	UpdateQueryTask = Task.Factory.StartNew<QueryEnumerator> (base.Run' UpdateQueryTokenSource.Token).ContinueWith (UpdateFinished' _eventContext.Scheduler); " is 153.
Long Statement,Couchbase.Lite,LiveQuery,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Query\LiveQuery.cs,UpdateFinished,The length of the statement  "		Log.To.Query.W (TAG' String.Format ("Query Updated task did not run to completion ({0})"' runTask.Status)' runTask.Exception); " is 126.
Long Statement,Couchbase.Lite,QueryRow,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Query\QueryRow.cs,Equals,The length of the statement  "	if (Database == other.Database && Misc.IsEqual (Key' other.Key) && Misc.IsEqual (SourceDocumentId' other.SourceDocumentId) && documentPropertiesEqual) { " is 152.
Long Statement,Couchbase.Lite,ChangesOptions,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Revisions\ChangesOptions.cs,ToString,The length of the statement  "	return string.Format ("[ChangesOptions: Descending={0}' Limit={1}' IncludeConflicts={2}' IncludeDocs={3}'{6}" + "SortBySequence={4}' ContentOptions={5}]"' Descending' Limit' IncludeConflicts' IncludeDocs' SortBySequence' ContentOptions' Environment.NewLine); " is 258.
Long Statement,Couchbase.Lite,SavedRevision,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Revisions\SavedRevision.cs,ToString,The length of the statement  "	return string.Format ("[SavedRevision[ID={0}' Rev={1}' Deletion={2}]"' new SecureLogString (docId' LogMessageSensitivity.PotentiallyInsecure)' Id' IsDeletion); " is 159.
Long Statement,Couchbase.Lite,UnsavedRevision,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Revisions\UnsavedRevision.cs,ToString,The length of the statement  "	return String.Format ("UnsavedRevision[ID={0}' ParentRev={1}' Deletion={2}]"' new SecureLogString (docId' LogMessageSensitivity.PotentiallyInsecure)' ParentId' IsDeletion); " is 172.
Long Statement,Couchbase.Lite,BlobKey,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Store\BlobKey.cs,ConvertFromHex,The length of the statement  "	return Enumerable.Range (0' s.Length).Where (x => x % 2 == 0).Select (x => Convert.ToByte (s.Substring (x' 2)' 16)).ToArray (); " is 127.
Long Statement,Couchbase.Lite,BlobStore,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Store\BlobStore.cs,StoreBlob,The length of the statement  "		throw Misc.CreateExceptionAndLog (Log.To.Database' e' StatusCode.AttachmentError' TAG' "Unable to get file for output"); " is 120.
Long Statement,Couchbase.Lite,BlobStore,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Store\BlobStore.cs,StoreBlob,The length of the statement  "		throw Misc.CreateExceptionAndLog (Log.To.Database' ioe' StatusCode.AttachmentError' TAG' "Unable to write to output file"); " is 123.
Long Statement,Couchbase.Lite,BlobStore,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Store\BlobStore.cs,TempDir,The length of the statement  "		throw Misc.CreateExceptionAndLog (Log.To.Database' StatusCode.DbError' TAG' "Unable to create directory for: {0}"' path); " is 121.
Long Statement,Couchbase.Lite,BlobStore,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Store\BlobStore.cs,VerifyExistingStore,The length of the statement  "			throw Misc.CreateExceptionAndLog (Log.To.Database' StatusCode.Unauthorized' TAG' "Opening encrypted blob-store without providing a key"); " is 137.
Long Statement,Couchbase.Lite,BlobStore,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Store\BlobStore.cs,VerifyExistingStore,The length of the statement  "			throw Misc.CreateExceptionAndLog (Log.To.Database' StatusCode.Unauthorized' TAG' "Blob-store uses unrecognized encryption '{0}'"' encryptionAlg); " is 145.
Long Statement,Couchbase.Lite,BlobStoreWriter,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Store\BlobStoreWriter.cs,OpenTempFile,The length of the statement  "		outStream = store.EncryptionKey.CreateStream (new BufferedStream (File.Open (tempFile' FileMode.Create' FileAccess.ReadWrite' FileShare.ReadWrite))); " is 149.
Long Statement,Couchbase.Lite,BlobStoreWriter,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Store\BlobStoreWriter.cs,ToString,The length of the statement  "	return String.Format ("BlobStoreWriter len={0}kb' digest={1}' SHA1={2}"' (double)length / 1024.0' MD5DigestString ()' SHA1DigestString ()); " is 139.
Long Statement,Couchbase.Lite,ObjectWriter,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\ObjectWriter.cs,WriterWithDefaultPrettyPrinter,The length of the statement  "	// Currently doesn't do anything' but could use something like http://www.limilabs.com/blog/json-net-formatter in the future. " is 125.
Long Statement,Couchbase.Lite,ObjectWriter,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\ObjectWriter.cs,ReadValue,The length of the statement  "	using (var jsonStream = RecyclableMemoryStreamManager.SharedInstance.GetStream ("ObjectWriter"' realized' 0' realized.Length)) { " is 128.
Long Statement,Couchbase.Lite,NetworkReachabilityManager,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager\NetworkReachabilityManager.cs,OnNetworkChange,The length of the statement  "	// https://social.msdn.microsoft.com/Forums/vstudio/en-US/a6b3541b-b7de-49e2-a7a6-ba0687761af5/networkavailabilitychanged-event-does-not-fire " is 141.
Long Statement,Couchbase.Lite,NetworkReachabilityManager,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager\NetworkReachabilityManager.cs,OnNetworkChange,The length of the statement  "		var firstValidIP = NetworkInterface.GetAllNetworkInterfaces ().Where (IsInterfaceValid).SelectMany (x => x.GetIPProperties ().UnicastAddresses).Select (x => x.Address).FirstOrDefault (); " is 186.
Long Statement,Couchbase.Lite,NetworkReachabilityManager,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager\NetworkReachabilityManager.cs,OnNetworkChange,The length of the statement  "			Log.To.Sync.I (TAG' "At least one acceptable IP address found ({0})' signaling network reachable"' new SecureLogString (firstValidIP' LogMessageSensitivity.PotentiallyInsecure)); " is 178.
Long Statement,Couchbase.Lite,NetworkReachabilityManager,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager\NetworkReachabilityManager.cs,IsInterfaceValid,The length of the statement  "	if ((!AllowLoopback && ni.NetworkInterfaceType == NetworkInterfaceType.Loopback) || ni.NetworkInterfaceType == NetworkInterfaceType.Tunnel || ni.Description.IndexOf ("Loopback"' StringComparison.OrdinalIgnoreCase) >= 0) { " is 221.
Long Statement,Couchbase.Lite,NewtonsoftJsonSerializer,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager\NewtonsoftJsonSerializer.cs,DeserializeObject,The length of the statement  "		throw Misc.CreateExceptionAndLog (Log.To.NoDomain' e' StatusCode.BadJson' TAG' "Error deserializing json ({0})"' new SecureLogString (json' LogMessageSensitivity.PotentiallyInsecure)); " is 184.
Long Statement,Couchbase.Lite,ReplicationOptions,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ReplicationOptions.cs,ToString,The length of the statement  "	return string.Format ("ReplicationOptions[Reset={0}' RequestTimeout={1}' SocketTimeout={2}' Heartbeat={3}' PollInterval={4}' UseWebSocket={5}' RemoteUUID={6}' MaxOpenHttpConnections={7}' MaxRevsToGetInBulk={8}' RetryStrategy={9}' ReplicationRetryDelay={10}]"' Reset' RequestTimeout' SocketTimeout' Heartbeat' PollInterval' UseWebSocket' RemoteUUID' MaxOpenHttpConnections' MaxRevsToGetInBulk' RetryStrategy' ReplicationRetryDelay); " is 431.
Long Statement,Couchbase.Lite,EnumEx,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Unity\..\Couchbase.Lite.Net35\EnumEx.cs,HasFlag,The length of the statement  "		throw new ArgumentException (string.Format ("Enumeration type mismatch.  The flag is of type '{0}'' was expecting '{1}'."' value.GetType ()' variable.GetType ())); " is 163.
Long Statement,Couchbase.Lite.Auth,OpenIDAuthenticator,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Auth\OpenIDAuthenticator.cs,ContinueAsyncLogin,The length of the statement  "					if (String.Compare (authUrl.Host' remoteUrl.Host' StringComparison.InvariantCultureIgnoreCase) != 0 || authUrl.Port != remoteUrl.Port ||  != authUrl.GetLeftPart (UriPartial.Path)) { " is 181.
Long Statement,Couchbase.Lite.Auth,OpenIDAuthenticator,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Auth\OpenIDAuthenticator.cs,ContinueAsyncLogin,The length of the statement  "						Log.To.Sync.W (Tag' "{0} app-provided authUrl <{1}> doesn't match server URL; ignoring it"' this' authUrl.AbsolutePath); " is 120.
Long Statement,Couchbase.Lite.Auth,RemoteLogin,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Auth\RemoteLogin.cs,CheckSessionAtPath,The length of the statement  "			var userName = result.AsDictionary<string' object> ().Get ("userCtx").AsDictionary<string' object> ().GetCast<string> ("name"); " is 127.
Long Statement,Couchbase.Lite.Auth,RemoteLogin,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Auth\RemoteLogin.cs,CheckSessionAtPath,The length of the statement  "				Log.To.Sync.I (Tag' "{0}: Active session' logged in as '{1}'"' this' new SecureLogString (userName' LogMessageSensitivity.PotentiallyInsecure)); " is 144.
Long Statement,Couchbase.Lite.Auth,RemoteLogin,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Auth\RemoteLogin.cs,Login,The length of the statement  "	Log.To.Sync.I (Tag' "{0} logging in with {1} at {2}"' this' _session.Authenticator.GetType ()' new SecureLogString (loginPath' LogMessageSensitivity.Insecure)); " is 160.
Long Statement,Couchbase.Lite.Auth,RemoteLogin,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Auth\RemoteLogin.cs,Login,The length of the statement  "		loginAuth.ProcessLoginResponse (result.AsDictionary<string' object> ()' resultMessage.Headers' e' (loginAgain' contError) => { " is 126.
Long Statement,Couchbase.Lite.Auth,FacebookAuthorizer,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Auth\FacebookAuthorizer.cs,RegisterAccessToken,The length of the statement  "	Log.To.Sync.I (Tag' "Registering Facebook key [{0}' {1}]"' new SecureLogString (email' LogMessageSensitivity.PotentiallyInsecure)' origin.Host); " is 144.
Long Statement,Couchbase.Lite.Auth,FacebookAuthorizer,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Auth\FacebookAuthorizer.cs,GetToken,The length of the statement  "	Log.To.Sync.V (Tag' "Searching for Facebook key [{0}' {1}]"' new SecureLogString (_emailAddress' LogMessageSensitivity.PotentiallyInsecure)' RemoteUrl.Host); " is 157.
Long Statement,Couchbase.Lite.Auth,FacebookAuthorizer,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Auth\FacebookAuthorizer.cs,ToString,The length of the statement  "			sb.AppendFormat ("key={0} value={1}' "' new SecureLogJsonString (pair.Key' LogMessageSensitivity.PotentiallyInsecure)' new SecureLogString (pair.Value' LogMessageSensitivity.Insecure)); " is 185.
Long Statement,Couchbase.Lite.Auth,PersonaAuthorizer,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Auth\PersonaAuthorizer.cs,RegisterAssertion,The length of the statement  "		Log.To.Sync.W (Tag' "Unable to parse assertion {0}' returning null..."' new SecureLogString (assertion' LogMessageSensitivity.Insecure)); " is 137.
Long Statement,Couchbase.Lite.Auth,PersonaAuthorizer,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Auth\PersonaAuthorizer.cs,GetAssertion,The length of the statement  "		Log.To.Sync.W (Tag' "Assertion invalid or expired {0}"' new SecureLogString (assertion' LogMessageSensitivity.Insecure)); " is 121.
Long Statement,Couchbase.Lite.Auth,AuthenticatorFactory,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Auth\AuthenticatorFactory.cs,CreateFromUri,The length of the statement  "	return (IAuthenticator)FacebookAuthorizer.FromUri (uri) ?? (IAuthenticator)PersonaAuthorizer.FromUri (uri) ?? BasicAuthenticator.FromUri (uri); " is 143.
Long Statement,Couchbase.Lite.Auth,BasicAuthenticator,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Auth\BasicAuthenticator.cs,FromUri,The length of the statement  "			Log.To.Sync.W (Tag' "Unable to parse user info from URL ({0})' not creating Authenticator..."' new SecureLogString (userInfo' LogMessageSensitivity.Insecure)); " is 159.
Long Statement,Couchbase.Lite.Auth,BasicAuthenticator,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Auth\BasicAuthenticator.cs,ToString,The length of the statement  "	return String.Format ("[BasicAuthenticator ({0}:{1})]"' new SecureLogString (Credentials.UserName' LogMessageSensitivity.PotentiallyInsecure)' new SecureLogString (Credentials.Password' LogMessageSensitivity.Insecure)); " is 219.
Long Statement,Couchbase.Lite.Auth,DigestAuthenticator,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Auth\DigestAuthenticator.cs,ToString,The length of the statement  "	return String.Format ("[DigestAuthenticator ({0}:{1})"' new SecureLogString (_username' LogMessageSensitivity.PotentiallyInsecure)' new SecureLogString (_password' LogMessageSensitivity.Insecure)); " is 197.
Long Statement,Couchbase.Lite.Auth,DigestCalculator,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Auth\DigestCalculator.cs,Calculate,The length of the statement  "	var ha1Str = String.Format ("{0}:{1}:{2}"' components.Get ("username")' components.Get ("realm")' components.Get ("password")); " is 127.
Long Statement,Couchbase.Lite.Auth,DigestCalculator,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Auth\DigestCalculator.cs,Calculate,The length of the statement  "	var responseStr = String.Format ("{0}:{1}:{2}:{3}:{4}:{5}"' ha1' components.Get ("nonce")' components.Get ("nc")' components.Get ("cnonce")' components.Get ("qop")' ha2); " is 170.
Long Statement,Couchbase.Lite.Auth,DigestCalculator,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Auth\DigestCalculator.cs,Calculate,The length of the statement  "	var responseStr = String.Format ("{0}:{1}:{2}:{3}:{4}:{5}"' ha1' components.Get ("nonce")' components.Get ("nc")' components.Get ("cnonce")' components.Get ("qop")' ha2); " is 170.
Long Statement,Couchbase.Lite.Internal,RemoteSession,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\RemoteSession.cs,SendAsyncRequest,The length of the statement  "		throw Misc.CreateExceptionAndLog (Log.To.Sync' e' Tag' "Error sending async request {0}"' new SecureLogString (relativePath' LogMessageSensitivity.PotentiallyInsecure)); " is 169.
Long Statement,Couchbase.Lite.Internal,RemoteSession,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\RemoteSession.cs,SendAsyncRequest,The length of the statement  "				Log.To.Sync.W (Tag' String.Format ("Http Message failed to send' or got error response' " + "passing to callback... {0}' "' new SecureLogUri (message.RequestUri))' response.Exception); " is 184.
Long Statement,Couchbase.Lite.Internal,RemoteSession,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\RemoteSession.cs,SendAsyncRequest,The length of the statement  "					Log.To.Sync.W (Tag' "SendAsyncRequest got an exception while processing response' " + "passing it on to the callback."' e); " is 123.
Long Statement,Couchbase.Lite.Internal,RemoteSession,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\RemoteSession.cs,SendAsyncMultipartDownloaderRequest,The length of the statement  "			Log.To.Sync.I (Tag' "Client is disposed' aborting request to {0}"' new SecureLogString (relativePath' LogMessageSensitivity.PotentiallyInsecure)); " is 146.
Long Statement,Couchbase.Lite.Internal,RemoteSession,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\RemoteSession.cs,SendAsyncMultipartDownloaderRequest,The length of the statement  "		var request = client.SendAsync (message' _cancellationTokenSource.Token).ContinueWith (new Action<Task<HttpResponseMessage>> (responseMessage => { " is 146.
Long Statement,Couchbase.Lite.Internal,RemoteSession,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\RemoteSession.cs,SendAsyncMultipartRequest,The length of the statement  "		Log.To.Sync.E (Tag' "Invalid path received for request: {0}' throwing..."' new SecureLogString (relativePath' LogMessageSensitivity.PotentiallyInsecure)); " is 154.
Long Statement,Couchbase.Lite.Internal,RemoteSession,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\RemoteSession.cs,SendAsyncMultipartRequest,The length of the statement  "		Log.To.Sync.I (Tag' "Client is disposed' aborting request to {0}"' new SecureLogString (relativePath' LogMessageSensitivity.PotentiallyInsecure)); " is 146.
Long Statement,Couchbase.Lite.Internal,RevisionInternal,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Revisions\RevisionInternal.cs,IsValid,The length of the statement  "	return body.GetPropertyForKey ("_id") != null || (body.GetPropertyForKey ("_rev") == null && body.GetPropertyForKey ("_deleted") == null); " is 138.
Long Statement,Couchbase.Lite.Internal,RevisionInternal,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Revisions\RevisionInternal.cs,ToString,The length of the statement  "	return String.Format ("{{{0} #{1}{2}}}"' new SecureLogString (_docId' LogMessageSensitivity.PotentiallyInsecure)' _revId' Deleted ? "DEL" : String.Empty); " is 154.
Long Statement,Couchbase.Lite.Internal,SharedState,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager\SharedState.cs,SetValue,The length of the statement  "		ConcurrentDictionary<string' object> typeDict = dbDict.GetOrAdd (type' k => new ConcurrentDictionary<string' object> ()); " is 121.
Long Statement,Couchbase.Lite.Internal,SharedState,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager\SharedState.cs,SetValue,The length of the statement  "		ConcurrentDictionary<string' object> typeDict = dbDict.GetOrAdd (type' k => new ConcurrentDictionary<string' object> ()); " is 121.
Long Statement,Couchbase.Lite.Internal,SharedState,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager\SharedState.cs,TryGetValue,The length of the statement  "	ConcurrentDictionary<string' object> typeDict = dbDict.GetOrAdd (type' k => new ConcurrentDictionary<string' object> ()); " is 121.
Long Statement,Couchbase.Lite.Internal,SharedState,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager\SharedState.cs,HasValues,The length of the statement  "	ConcurrentDictionary<string' object> typeDict = dbDict.GetOrAdd (type' k => new ConcurrentDictionary<string' object> ()); " is 121.
Long Statement,Couchbase.Lite.Internal,SharedState,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager\SharedState.cs,GetValues,The length of the statement  "	ConcurrentDictionary<string' object> typeDict = dbDict.GetOrAdd (type' k => new ConcurrentDictionary<string' object> ()); " is 121.
Long Statement,Couchbase.Lite.Internal,WebSocketChangeTracker,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\WebSocketChangeTracker.cs,OnClose,The length of the statement  "				Log.To.ChangeTracker.I (Tag' "{0} connection with {1} was closed ({2} {3})"' this' args.WasClean ? "cleanly" : "forcibly"' args.Code' args.Reason); " is 147.
Long Statement,Couchbase.Lite.Internal,WebSocketChangeTracker,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\WebSocketChangeTracker.cs,OnReceive,The length of the statement  "		var responseStream = RecyclableMemoryStreamManager.SharedInstance.GetStream ("WebSocketChangeTracker"' args.RawData.Length + 1); " is 128.
Long Statement,Couchbase.Lite.Internal,SocketChangeTracker,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\SocketChangeTracker.cs,Run,The length of the statement  "		var feedTokenSource = Interlocked.Exchange (ref changesFeedRequestTokenSource' CancellationTokenSource.CreateLinkedTokenSource (tokenSource.Token)); " is 148.
Long Statement,Couchbase.Lite.Internal,SocketChangeTracker,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\SocketChangeTracker.cs,Run,The length of the statement  "		var info = _remoteSession.SendAsyncRequest (Request' HttpCompletionOption.ResponseHeadersRead' changesFeedRequestTokenSource.Token); " is 132.
Long Statement,Couchbase.Lite.Internal,SocketChangeTracker,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\SocketChangeTracker.cs,Run,The length of the statement  "		info.ContinueWith (ChangeFeedResponseHandler' changesFeedRequestTokenSource.Token ?? CancellationToken.None' TaskContinuationOptions.LongRunning' TaskScheduler.Default); " is 169.
Long Statement,Couchbase.Lite.Internal,SocketChangeTracker,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\SocketChangeTracker.cs,RetryIfFailedPost,The length of the statement  "	if (!statusCode.HasValue || (statusCode.Value != HttpStatusCode.MethodNotAllowed && statusCode.Value != HttpStatusCode.NotFound)) { " is 131.
Long Statement,Couchbase.Lite.Internal,SocketChangeTracker,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\SocketChangeTracker.cs,ChangeFeedResponseHandler,The length of the statement  "		throw Misc.CreateExceptionAndLog (Log.To.ChangeTracker' response.StatusCode.GetStatusCode ()' Tag' "Got empty change tracker response"); " is 136.
Long Statement,Couchbase.Lite.Internal,SocketChangeTracker,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\SocketChangeTracker.cs,ChangeFeedResponseHandler,The length of the statement  "			var result = _responseLogic.ProcessResponseStream (responseStream' changesFeedRequestTokenSource.Token ?? CancellationToken.None); " is 130.
Long Statement,Couchbase.Lite.Internal,SocketChangeTracker,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\SocketChangeTracker.cs,ChangeFeedResponseHandler,The length of the statement  "					Log.To.ChangeTracker.W (Tag' "{0} Couldn't parse JSON from remote' " + "retrying in {1}ms"' this' Backoff.GetSleepTime ().TotalMilliseconds); " is 141.
Long Statement,Couchbase.Lite.Internal,ChangeTracker,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ChangeTracker.cs,GetChangesFeedPath,The length of the statement  "						Log.To.ChangeTracker.W (Tag' "Illegal filter parameter {0} = {1}"' new SecureLogString (pair.Key' LogMessageSensitivity.PotentiallyInsecure)' new SecureLogJsonString (pair.Value' LogMessageSensitivity.PotentiallyInsecure)); " is 223.
Long Statement,Couchbase.Lite.Internal,WebSocketLogic,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\WebSocketLogic.cs,ProcessResponseStream,The length of the statement  "	Log.To.ChangeTracker.D (Tag' "{0} received a {1} stream ({2} bytes)"' this' compressed ? "compressed" : "plaintext"' stream.Length); " is 132.
Long Statement,Couchbase.Lite.Internal,ChunkedChanges,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ChunkedChanges.cs,Process,The length of the statement  "			Log.To.ChangeTracker.I (Tag' "Parsed {0} (nested count: {1})"' new LogString (unzipBuffer.Take (decodedBytes))' nestedCount); " is 125.
Long Statement,Couchbase.Lite.Internal,ExceptionResolver,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ExceptionResolver.cs,Solve,The length of the statement  "		return new ErrorResolution_Impl (statusCode.ToString ()' ErrorResolutionFlags.Transient | ErrorResolutionFlags.OutOfRetries) { " is 126.
Long Statement,Couchbase.Lite.Internal,ExceptionResolver,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ExceptionResolver.cs,Solve,The length of the statement  "		return new ErrorResolution_Impl (statusCode.ToString ()' ErrorResolutionFlags.Transient | ErrorResolutionFlags.OutOfRetries) { " is 126.
Long Statement,Couchbase.Lite.Internal,ExceptionResolver,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ExceptionResolver.cs,Analyze,The length of the statement  "			Log.To.Sync.V (Tag' "Rule #1: Exception is IOException' TimeoutException' or TaskCanceledException' " + "ruling transient..."' exception); " is 138.
Long Statement,Couchbase.Lite.Internal,ExceptionResolver,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ExceptionResolver.cs,Analyze,The length of the statement  "			Log.To.Sync.V (Tag' "No further information can be gained from this exception' " + "attempting to find other nested exceptions..."' exception); " is 143.
Long Statement,Couchbase.Lite.Internal,ExceptionResolver,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ExceptionResolver.cs,Analyze,The length of the statement  "		if (we.Status == WebExceptionStatus.ConnectFailure || we.Status == WebExceptionStatus.Timeout || we.Status == WebExceptionStatus.ConnectionClosed || we.Status == WebExceptionStatus.RequestCanceled || we.Status == WebExceptionStatus.NameResolutionFailure) { " is 256.
Long Statement,Couchbase.Lite.Internal,ExceptionResolver,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ExceptionResolver.cs,Analyze,The length of the statement  "			Log.To.Sync.V (Tag' "Rule #3: Exception is WebException and status is ConnectFailure' Timeout' " + "ConnectionClosed' RequestCanceled' or NameResolutionFailure' ruling transient..."' we); " is 187.
Long Statement,Couchbase.Lite.Internal,ExceptionResolver,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ExceptionResolver.cs,Analyze,The length of the statement  "			Log.To.Sync.V (Tag' "No further information can be gained from this WebException (missing response?)' " + "attempting to find other nested exceptions..."' we); " is 159.
Long Statement,Couchbase.Lite.Internal,ExceptionResolver,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ExceptionResolver.cs,Analyze,The length of the statement  "			Log.To.Sync.V (Tag' "Rule #3: {0} is considered a transient error code' ruling transient..."' ((HttpWebResponse)we.Response).StatusCode); " is 137.
Long Statement,Couchbase.Lite.Internal,ExceptionResolver,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ExceptionResolver.cs,IsTransientError,The length of the statement  "	return status == HttpStatusCode.InternalServerError || status == HttpStatusCode.BadGateway || status == HttpStatusCode.ServiceUnavailable || status == HttpStatusCode.GatewayTimeout || status == HttpStatusCode.RequestTimeout; " is 224.
Long Statement,Couchbase.Lite.Util,Log,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\Log.cs,SetDefaultLoggerWithLevel,The length of the statement  "		if (level.HasFlag (SourceLevels.Information) || level.HasFlag (SourceLevels.Warning) || level.HasFlag (SourceLevels.Error)) { " is 125.
Long Statement,Couchbase.Lite.Util,LruCache,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\LruCache.cs,Get,The length of the statement  "			Log.To.NoDomain.V (Tag' "LruCache hit for {0}' returning {1}..."' new SecureLogString (key' LogMessageSensitivity.PotentiallyInsecure)' new SecureLogString (mapValue' LogMessageSensitivity.PotentiallyInsecure)); " is 211.
Long Statement,Couchbase.Lite.Util,LruCache,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\LruCache.cs,Get,The length of the statement  "		Log.To.NoDomain.V (Tag' "LruCache miss for {0}' searching alive objects..."' new SecureLogString (key' LogMessageSensitivity.PotentiallyInsecure)); " is 147.
Long Statement,Couchbase.Lite.Util,LruCache,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\LruCache.cs,Get,The length of the statement  "			Log.To.NoDomain.V (Tag' "...Alive object {0} found!"' new SecureLogString (mapValue' LogMessageSensitivity.PotentiallyInsecure)); " is 129.
Long Statement,Couchbase.Lite.Util,LruCache,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\LruCache.cs,Get,The length of the statement  "	Log.To.NoDomain.V (Tag' "Autocreated default object {0}' inserting into cache"' new SecureLogString (createdValue' LogMessageSensitivity.PotentiallyInsecure)); " is 159.
Long Statement,Couchbase.Lite.Util,LruCache,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\LruCache.cs,Get,The length of the statement  "			Log.To.NoDomain.W (Tag' "Cache already has a value for {0}' aborting insert"' new SecureLogString (key' LogMessageSensitivity.PotentiallyInsecure)); " is 148.
Long Statement,Couchbase.Lite.Util,LruCache,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\LruCache.cs,Put,The length of the statement  "			Log.To.NoDomain.W (Tag' "Cache already has a value for {0} ({1})' aborting insert"' new SecureLogString (key' LogMessageSensitivity.PotentiallyInsecure)' new SecureLogString (previous' LogMessageSensitivity.PotentiallyInsecure)); " is 229.
Long Statement,Couchbase.Lite.Util,LruCache,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\LruCache.cs,Put,The length of the statement  "			Log.To.NoDomain.V (Tag' "Adding {0} for key {1} into cache"' new SecureLogString (value' LogMessageSensitivity.PotentiallyInsecure)' new SecureLogString (key' LogMessageSensitivity.PotentiallyInsecure)); " is 203.
Long Statement,Couchbase.Lite.Util,LruCache,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\LruCache.cs,Trim,The length of the statement  "				Log.To.NoDomain.E (Tag' "Size is reporting inconsistent results (Size={0} CacheCount={1} NodeCount={2})' throwing..."' Size' _recents.Count' _nodes.Count); " is 155.
Long Statement,Couchbase.Lite.Util,LruCache,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\LruCache.cs,Remove,The length of the statement  "		Log.To.NoDomain.V (Tag' "Attempting to remove {0}..."' new SecureLogString (key' LogMessageSensitivity.PotentiallyInsecure)); " is 125.
Long Statement,Couchbase.Lite.Util,LruCache,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\LruCache.cs,SafeSizeOf,The length of the statement  "		Log.To.NoDomain.E (Tag' "SizeOf reported an invalid size for <{0} / {1}> ({2})' throwing..."' new SecureLogString (key' LogMessageSensitivity.PotentiallyInsecure)' new SecureLogString (value' LogMessageSensitivity.PotentiallyInsecure)' result); " is 244.
Long Statement,Couchbase.Lite.Util,LruCache,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\LruCache.cs,ToString,The length of the statement  "		return string.Format ("LruCache[maxSize={0}'hits={1}'misses={2}'hitRate={3:P}%]"' MaxSize' HitCount' MissCount' hitPercent); " is 124.
Long Statement,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,Append,The length of the statement  "	return new Uri (paths.Where (x => x != null).Aggregate (uri.AbsoluteUri' (current' path) => string.Format ("{0}/{1}"' current.TrimEnd ('/')' path.TrimStart ('/')))); " is 165.
Long Statement,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,IsAllowed,The length of the statement  "	return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9') || "_-!.~'()*".IndexOf (c) != NotFound || (allow != null && allow.IndexOf (c) != NotFound); " is 173.
Long Statement,Couchbase.Lite.Util,CookieStore,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\CookieStore.cs,Add,The length of the statement  "		if (existingCookie.Name == newCookie.Name && existingCookie.Domain == newCookie.Domain && existingCookie.Path == newCookie.Path) { " is 130.
Long Statement,Couchbase.Lite.Util,TransientErrorRetryHandler,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\TransientErrorRetryHandler.cs,HandleTransientErrors,The length of the statement  "			if (response.StatusCode == HttpStatusCode.Unauthorized || response.StatusCode == HttpStatusCode.ProxyAuthenticationRequired) { " is 126.
Long Statement,Couchbase.Lite.Util,SingleTaskThreadpoolScheduler,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\SingleTaskThreadpoolScheduler.cs,TryExecuteTaskInline,The length of the statement  "		Log.To.TaskScheduling.V (Tag' "Thread {0} not processing items' so cannot execute inline"' Thread.CurrentThread.ManagedThreadId); " is 129.
Long Statement,Couchbase.Lite.Util,CookieParser,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\CookieParser.cs,ParseSegment,The length of the statement  "		if (DateTimeOffset.TryParseExact (value' dateFormats' DateTimeFormatInfo.InvariantInfo' DateTimeStyles.AllowWhiteSpaces | DateTimeStyles.AssumeUniversal' out expires)) { " is 169.
Long Statement,Couchbase.Lite.Util,AtomicAction,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\AtomicAction.cs,Perform,The length of the statement  "			Log.To.NoDomain.E (TAG' String.Format ("Error backing out step #{0}' throwing CouchbaseLiteException..."' _nextStep)' e); " is 121.
Long Statement,Couchbase.Lite.Util,LogDomains,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\LogDomains.cs,GetAll,The length of the statement  "	return new LogGroup (Database' Query' View' Router' Sync' ChangeTracker' Validation' Upgrade' Listener' Discovery' TaskScheduling); " is 131.
Long Statement,Couchbase.Lite.Util,JsonUtility,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\JsonUtility.cs,PopulateNetObject_Internal,The length of the statement  "			Log.To.NoDomain.E ("JsonUtility"' "JsonTypeHints specified an object' " + "but json portion is not an object ({0})"' jsonObject.GetType ().Name); " is 145.
Long Statement,Couchbase.Lite.Util,JsonUtility,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\JsonUtility.cs,PopulateNetObject_Internal,The length of the statement  "			Log.To.NoDomain.E ("JsonUtility"' "JsonTypeHints specified an array' " + "but json portion is not an array ({0})"' jsonObject.GetType ().Name); " is 143.
Long Statement,Couchbase.Lite.Util,RetryStrategyExecutor,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\RetryStrategyExecutor.cs,Retry,The length of the statement  "		Log.To.Sync.V (Tag' "{0} returned {1} for the next delay ({2} attempts remaining)"' _strategy.GetType ().Name' _strategy.NextDelay (false)' _strategy.RetriesRemaining - 1); " is 172.
Long Statement,Couchbase.Lite.Util,ConstructorOptions,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\ConstructorOptions.cs,Validate,The length of the statement  "	var allProps = GetType ().GetProperties (BindingFlags.Instance | BindingFlags.FlattenHierarchy | BindingFlags.Public | BindingFlags.NonPublic); " is 143.
Long Statement,Couchbase.Lite.Util,ConstructorOptions,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\ConstructorOptions.cs,Validate,The length of the statement  "		var reqAtt = (RequiredPropertyAttribute)prop.GetCustomAttributes (typeof(RequiredPropertyAttribute)' false).FirstOrDefault (); " is 126.
Long Statement,Couchbase.Lite.Util,TimeSeries,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\TimeSeries.cs,CreatePushReplication,The length of the statement  "	_db.SetFilter ("com.couchbase.DocIDPrefix"' (rev' props) => rev.Document.Id.StartsWith (props.GetCast<string> ("prefix"))); " is 123.
Long Statement,Couchbase.Lite.Util,TimeSeries,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\TimeSeries.cs,AddEventsToDB,The length of the statement  "	if (Interlocked.CompareExchange<ConcurrentQueue<IDictionary<string' object>>> (ref _docsToAdd' new ConcurrentQueue<IDictionary<string' object>> ()' null) == null) { " is 164.
Long Statement,Couchbase.Lite.Support,Batcher,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Batcher.cs,DelayToUse,The length of the statement  "	Log.To.NoDomain.D (TAG' "DelayToUse() delta: {0}' delayToUse: {1}' delay: {2} [last: {3}]"' delta' delayToUse' _options.Delay' _lastProcessedTime.ToString ()); " is 159.
Long Statement,Couchbase.Lite.Support,Batcher,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Batcher.cs,ScheduleWithDelay,The length of the statement  "				Log.To.NoDomain.E (TAG' "Batcher got into an inconsistent state' flush future is scheduled " + "but missing.  Throwing..."); " is 124.
Long Statement,Couchbase.Lite.Support,CouchbaseLiteHttpClientFactory,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\CouchbaseLiteHttpClientFactory.cs,SetupSslCallback,The length of the statement  "	ServicePointManager.ServerCertificateValidationCallback = (object sender' X509Certificate certificate' X509Chain chain' SslPolicyErrors sslPolicyErrors) => { " is 157.
Long Statement,Couchbase.Lite.Support,CouchbaseLiteHttpClientFactory,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\CouchbaseLiteHttpClientFactory.cs,GetHttpClient,The length of the statement  "	client.DefaultRequestHeaders.TryAddWithoutValidation ("User-Agent"' String.Format ("CouchbaseLite/{0} ({1})"' Replication.SyncProtocolVersion' Manager.VersionString)); " is 167.
Long Statement,Couchbase.Lite.Support,MultipartDocumentReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartDocumentReader.cs,SetHeaders,The length of the statement  "	} else if (contentType == null || contentType.StartsWith ("application/json") || contentType.StartsWith ("text/plain")) { " is 121.
Long Statement,Couchbase.Lite.Support,MultipartDocumentReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartDocumentReader.cs,ParseJsonBuffer,The length of the statement  "				throw Misc.CreateExceptionAndLog (Log.To.Sync' StatusCode.UpStreamError' TAG' "Received corrupt gzip encoded JSON part"); " is 121.
Long Statement,Couchbase.Lite.Support,MultipartDocumentReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartDocumentReader.cs,SetContentType,The length of the statement  "	if (contentType == null || contentType.StartsWith ("application/json"' StringComparison.Ordinal) || contentType.StartsWith ("text/plain"' StringComparison.Ordinal)) { " is 166.
Long Statement,Couchbase.Lite.Support,MultipartDocumentReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartDocumentReader.cs,SetContentType,The length of the statement  "		Log.To.Sync.E (TAG' "Invalid contentType in SetContentType ({0}); does not start with multipart/' throwing..."' contentType); " is 125.
Long Statement,Couchbase.Lite.Support,MultipartDocumentReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartDocumentReader.cs,Finish,The length of the statement  "	Log.To.Sync.V (TAG' "{0} finished loading ({1} attachments)"' this' attachmentsByDigest == null ? 0 : attachmentsByDigest.Count); " is 129.
Long Statement,Couchbase.Lite.Support,MultipartDocumentReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartDocumentReader.cs,Finish,The length of the statement  "			throw Misc.CreateExceptionAndLog (Log.To.Sync' StatusCode.UpStreamError' TAG' "{0} received incomplete MIME response"' this); " is 125.
Long Statement,Couchbase.Lite.Support,MultipartDocumentReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartDocumentReader.cs,RegisterAttachments,The length of the statement  "		throw Misc.CreateExceptionAndLog (Log.To.Sync' StatusCode.AttachmentError' TAG' "_attachments property is not a dictionary"); " is 125.
Long Statement,Couchbase.Lite.Support,MultipartDocumentReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartDocumentReader.cs,RegisterAttachments,The length of the statement  "					throw Misc.CreateExceptionAndLog (Log.To.Sync' StatusCode.AttachmentError' TAG' "Attachment '{0}' has incorrect digest ({1}; should be either {2} or {3})"' new SecureLogString (attachmentName' LogMessageSensitivity.PotentiallyInsecure)' digest' actualDigest' writer.MD5DigestString ()); " is 286.
Long Statement,Couchbase.Lite.Support,MultipartDocumentReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartDocumentReader.cs,RegisterAttachments,The length of the statement  "					throw Misc.CreateExceptionAndLog (Log.To.Sync' StatusCode.AttachmentError' TAG' "Attachment '{0}' does not appear in MIME body "' new SecureLogString (attachmentName' LogMessageSensitivity.PotentiallyInsecure)); " is 211.
Long Statement,Couchbase.Lite.Support,MultipartDocumentReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartDocumentReader.cs,RegisterAttachments,The length of the statement  "				throw Misc.CreateExceptionAndLog (Log.To.Sync' StatusCode.AttachmentError' TAG' "Attachment '{0}' has no digest metadata; cannot identify MIME body"' new SecureLogString (attachmentName' LogMessageSensitivity.PotentiallyInsecure)); " is 231.
Long Statement,Couchbase.Lite.Support,MultipartDocumentReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartDocumentReader.cs,RegisterAttachments,The length of the statement  "				throw Misc.CreateExceptionAndLog (Log.To.Sync' StatusCode.AttachmentError' TAG' "Attachment '{0}' has incorrect length field {1} (should be {2})"' new SecureLogString (attachmentName' LogMessageSensitivity.PotentiallyInsecure)' length' writer.GetLength ()); " is 257.
Long Statement,Couchbase.Lite.Support,MultipartDocumentReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartDocumentReader.cs,RegisterAttachments,The length of the statement  "			var msg = String.Format ("Attachment '{0}' sent inline (len={1}).  Large attachments " + "should be sent in MIME parts for reduced memory overhead."' attachmentName' length); " is 174.
Long Statement,Couchbase.Lite.Support,MultipartDocumentReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartDocumentReader.cs,RegisterAttachments,The length of the statement  "		throw Misc.CreateExceptionAndLog (Log.To.Sync' StatusCode.AttachmentError' TAG' "More MIME bodies ({0}) than attachments ({1}) "' attachmentsByDigest.Count' numAttachmentsInDoc); " is 178.
Long Statement,Couchbase.Lite.Support,MultipartDocumentReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartDocumentReader.cs,StartedPart,The length of the statement  "			throw Misc.CreateExceptionAndLog (Log.To.Sync' StatusCode.AttachmentError' TAG' "Cannot create blob store writer for the attachment"); " is 134.
Long Statement,Couchbase.Lite.Support,MultipartDocumentReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartDocumentReader.cs,StartedPart,The length of the statement  "					var attachEncoding = document.GetCast<IDictionary<string' object>> ("_attachments").GetCast<IDictionary<string' object>> (name).GetCast<string> ("encoding"); " is 157.
Long Statement,Couchbase.Lite.Support,MultipartDocumentReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartDocumentReader.cs,StartedPart,The length of the statement  "						throw Misc.CreateExceptionAndLog (Log.To.Sync' StatusCode.UnsupportedType' TAG' "Attachment '{0}' MIME body is gzipped but attachment isn't"' new SecureLogString (name' LogMessageSensitivity.PotentiallyInsecure)); " is 213.
Long Statement,Couchbase.Lite.Support,MultipartDocumentReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartDocumentReader.cs,StartedPart,The length of the statement  "					throw Misc.CreateExceptionAndLog (Log.To.Sync' StatusCode.UnsupportedType' TAG' "NullReferenceException caught; _attachments was not present or encoding was " + "not present in _attachments"); " is 192.
Long Statement,Couchbase.Lite.Support,MultipartDocumentReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartDocumentReader.cs,StartedPart,The length of the statement  "			throw Misc.CreateExceptionAndLog (Log.To.Sync' StatusCode.UnsupportedType' TAG' "Received unsupported Content-Encoding '{0}'"' contentEncoding); " is 144.
Long Statement,Couchbase.Lite.Support,MultipartWriter,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartWriter.cs,AddInput,The length of the statement  "			headers.AppendFormat ("{0}: {1}\r\n"' entry.Key' entry.Value.Replace ("\r"' string.Empty).Replace ("\n"' string.Empty)); " is 120.
Long Statement,Couchbase.Lite.Support,MultiStreamWriter,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultiStreamWriter.cs,WriteAsync,The length of the statement  "	ThreadPool.RegisterWaitForSingleObject (mre.WaitHandle' (o' timeout) => tcs.SetResult (!timeout)' null' TimeSpan.FromSeconds (30)' true); " is 137.
Long Statement,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,PullBulkRevisions,The length of the statement  "		var rev = props.CblID () != null ? new RevisionInternal (props) : new RevisionInternal (props.GetCast<string> ("id")' props.GetCast<string> ("rev").AsRevID ()' false); " is 167.
Long Statement,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,PullBulkWithAllDocs,The length of the statement  "			Log.To.Sync.I (TAG' "Bulk-fetch didn't work for {0} of {1} revs; getting individually for {2}"' remainingRevs.Count' bulkRevs.Count' ReplicatorID); " is 147.
Long Statement,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,QueueDownloadedRevision,The length of the statement  "			Log.To.Sync.W (TAG' "{0} failed to queue {1} for download because it is already queued' marking completed..."' this' rev); " is 122.
Long Statement,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,PullRemoteRevision,The length of the statement  "					Log.To.Sync.W (TAG' "{0} failed to queue {1} for download because it is already queued' marking completed..."' this' rev); " is 122.
Long Statement,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,IsDocumentError,The length of the statement  "	return e.StatusCode == System.Net.HttpStatusCode.NotFound || e.StatusCode == System.Net.HttpStatusCode.Forbidden || e.StatusCode == System.Net.HttpStatusCode.Gone; " is 163.
Long Statement,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,InsertDownloads,The length of the statement  "				Log.To.Sync.V (TAG' String.Format ("Inserting {0} {1}"' new SecureLogString (rev.DocID' LogMessageSensitivity.PotentiallyInsecure)' new LogJsonString (history))); " is 162.
Long Statement,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,InsertDownloads,The length of the statement  "						Log.To.Sync.W (TAG' "{0} revision {1} has invalid attachment metadata: {2}"' this' rev' new SecureLogJsonString (rev.GetAttachments ()' LogMessageSensitivity.PotentiallyInsecure)); " is 180.
Long Statement,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,ProcessInbox,The length of the statement  "		Log.To.Sync.I (TAG' "{4} queued {0} remote revisions from seq={1} ({2} in bulk' {3} individually)"' inboxCount' ((PulledRevision)inbox [0]).GetRemoteSequenceID ()' numBulked' inboxCount - numBulked' this); " is 205.
Long Statement,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,BeginReplicating,The length of the statement  "	Log.To.Sync.I (TAG' "{2} will use MaxOpenHttpConnections({0})' MaxRevsToGetInBulk({1})"' ReplicationOptions.MaxOpenHttpConnections' ReplicationOptions.MaxRevsToGetInBulk' this); " is 177.
Long Statement,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,ChangeTrackerReceivedChange,The length of the statement  "			Log.To.Sync.W (TAG' "{0}: Received invalid doc ID from _changes: {1} ({2})"' this' new SecureLogString (docID' LogMessageSensitivity.PotentiallyInsecure)' new LogJsonString (change)); " is 183.
Long Statement,Couchbase.Lite.Replicator,DefaultAuthHandler,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\DefaultAuthHandler.cs,ProcessResponse,The length of the statement  "		if (CookieParser.TryParse (response.Headers.GetValues ("Set-Cookie").ElementAt (0)' response.RequestMessage.RequestUri.Host' out cookie)) { " is 139.
Long Statement,Couchbase.Lite.Replicator,BulkDownloader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\BulkDownloader.cs,Start,The length of the statement  "		requestMessage.Headers.TryAddWithoutValidation ("User-Agent"' String.Format ("CouchbaseLite/{0} ({1})"' Replication.SyncProtocolVersion' Manager.VersionString)); " is 161.
Long Statement,Couchbase.Lite.Replicator,BulkDownloader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\BulkDownloader.cs,ExecuteRequest,The length of the statement  "		RespondWithResult (fullBody' new Exception (string.Format ("{0}: Request {1} has been aborted"' this' request))' response); " is 123.
Long Statement,Couchbase.Lite.Replicator,BulkDownloader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\BulkDownloader.cs,ExecuteRequest,The length of the statement  "	return _session.SendAsyncRequest (request' HttpCompletionOption.ResponseContentRead' requestTokenSource.Token).ContinueWith (t => { " is 131.
Long Statement,Couchbase.Lite.Replicator,BulkDownloader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\BulkDownloader.cs,ExecuteRequest,The length of the statement  "				Log.To.Sync.I (Tag' "Got error status: {0} for {1}.  Reason: {2}"' status.GetStatusCode ()' request' response.ReasonPhrase); " is 124.
Long Statement,Couchbase.Lite.Replicator,BulkDownloader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\BulkDownloader.cs,CreatePostBody,The length of the statement  "	Log.To.Sync.V (Tag' "Created bulk download request {0}{1}Body: {2}"' _bulkGetUri' Environment.NewLine' new LogJsonString (keys)); " is 129.
Long Statement,Couchbase.Lite.Views,BuiltinReduceFunctions,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\View\BuiltinReduceFunctions.cs,TotalValues,The length of the statement  "			Log.To.View.W (Tag' "Non-numeric value found in totalValues: {0}"' new SecureLogJsonString (o' LogMessageSensitivity.PotentiallyInsecure)); " is 139.
Long Statement,Couchbase.Lite.Store,SymmetricKey,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Store\SymmetricKey.cs,Create,The length of the statement  "		Log.To.Database.E (Tag' "Invalid keyOrPassword type ({0}) received' must be string " + "or IEnumerable<byte>' throwing..."' keyOrPassword.GetType ().FullName); " is 159.
Long Statement,Couchbase.Lite.Store,SymmetricKey,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Store\SymmetricKey.cs,DecryptData,The length of the statement  "	using (var ms = RecyclableMemoryStreamManager.SharedInstance.GetStream ("SymmetricKey"' encryptedData' 0' encryptedData.Length)) " is 128.
Long Statement,Microsoft.IO,RecyclableMemoryStreamManager,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\RecyclableMemoryStreamManager.cs,ReturnLargeBuffer,The length of the statement  "		throw new ArgumentException ("buffer did not originate from this memory manager. The size is not a multiple of " + this.LargeBufferMultiple); " is 141.
Long Statement,Microsoft.IO,RecyclableMemoryStreamManager,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\RecyclableMemoryStreamManager.cs,ReturnLargeBuffer,The length of the statement  "		if ((this.largePools [poolIndex].Count + 1) * buffer.Length <= this.MaximumFreeLargePoolBytes || this.MaximumFreeLargePoolBytes == 0) { " is 135.
Long Statement,Microsoft.IO,RecyclableMemoryStream,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\RecyclableMemoryStream.cs,CheckDisposed,The length of the statement  "		throw new ObjectDisposedException (string.Format ("The stream with Id {0} and Tag {1} is disposed."' this.id' this.tag)); " is 121.
Long Statement,Microsoft.IO,RecyclableMemoryStream,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\RecyclableMemoryStream.cs,InternalRead,The length of the statement  "			Buffer.BlockCopy (this.blocks [blockAndOffset.Block]' blockAndOffset.Offset' buffer' bytesWritten + offset' amountToCopy); " is 122.
Long Statement,Microsoft.IO,RecyclableMemoryStream,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\RecyclableMemoryStream.cs,EnsureCapacity,The length of the statement  "		throw new InvalidOperationException ("Requested capacity is too large: " + newCapacity + ". Limit is " + this.memoryManager.MaximumStreamCapacity); " is 147.
Long Statement,Couchbase.Lite.Unity,AOTHelper,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Unity\AOTHelper.cs,Dummy,The length of the statement  "	var dummy3 = new SplitOrderedList<string' ConcurrentDictionary<string' object>> (new GenericEqualityComparer<string> ()); " is 121.
Long Statement,Couchbase.Lite.Unity,AOTHelper,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Unity\AOTHelper.cs,Dummy,The length of the statement  "	var dummy4 = new SplitOrderedList<string' KeyValuePair<string' ConcurrentDictionary<string' ConcurrentDictionary<string' object>>>> (new GenericEqualityComparer<string> ()); " is 173.
Complex Conditional,Couchbase.Lite,Manager,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager.cs,IsValidDatabaseName,The conditional expression  "name.Length > 0 && name.Length < 240 && ContainsOnlyLegalCharacters (name) && Char.IsLower (name [0])"  is complex.
Complex Conditional,Couchbase.Lite,Manager,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager.cs,ParseReplicationProperties,The conditional expression  "!remote.Scheme.Equals ("http") && !remote.Scheme.Equals ("https") && !remote.Scheme.Equals ("ws") && !remote.Scheme.Equals ("wss")"  is complex.
Complex Conditional,Couchbase.Lite,QueryRow,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Query\QueryRow.cs,Equals,The conditional expression  "Database == other.Database && Misc.IsEqual (Key' other.Key) && Misc.IsEqual (SourceDocumentId' other.SourceDocumentId) && documentPropertiesEqual"  is complex.
Complex Conditional,Couchbase.Lite,ExtensionMethods,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\ExtensionMethods.cs,RegionMatches,The conditional expression  "toOffset < 0 || ooffset < 0 || toOffset + len > str.Length || ooffset + len > other.Length"  is complex.
Complex Conditional,Couchbase.Lite,NetworkReachabilityManager,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager\NetworkReachabilityManager.cs,IsInterfaceValid,The conditional expression  "(!AllowLoopback && ni.NetworkInterfaceType == NetworkInterfaceType.Loopback) || ni.NetworkInterfaceType == NetworkInterfaceType.Tunnel || ni.Description.IndexOf ("Loopback"' StringComparison.OrdinalIgnoreCase) >= 0"  is complex.
Complex Conditional,Couchbase.Lite.Internal,ExceptionResolver,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ExceptionResolver.cs,Analyze,The conditional expression  "we.Status == WebExceptionStatus.ConnectFailure || we.Status == WebExceptionStatus.Timeout || we.Status == WebExceptionStatus.ConnectionClosed || we.Status == WebExceptionStatus.RequestCanceled || we.Status == WebExceptionStatus.NameResolutionFailure"  is complex.
Complex Conditional,Couchbase.Lite.Revisions,RevisionID,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Revisions\RevisionID.cs,CBLCollateRevIDs,The conditional expression  "(dash1 == 1 && dash2 == 1) || dash1 > 8 || dash2 > 8 || dash1 == -1 || dash2 == -1"  is complex.
Complex Conditional,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,ProcessInbox,The conditional expression  "_canBulkGet || (rev.Generation == 1 && !rev.Deleted && !rev.IsConflicted)"  is complex.
Virtual Method Call from Constructor,Couchbase.Lite,BlobStoreWriter,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Store\BlobStoreWriter.cs,BlobStoreWriter,The constructor "BlobStoreWriter" calls a virtual method "Reset".
Virtual Method Call from Constructor,Couchbase.Lite,BlobStoreWriter,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Store\BlobStoreWriter.cs,BlobStoreWriter,The constructor "BlobStoreWriter" calls a virtual method "Reset".
Empty Catch Block,Couchbase.Lite,BlobStore,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Store\BlobStore.cs,StoreBlob,The method has an empty catch block.
Empty Catch Block,Couchbase.Lite.Internal,RemoteSession,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\RemoteSession.cs,SendAsyncRequest,The method has an empty catch block.
Empty Catch Block,Couchbase.Lite.Internal,RemoteSession,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\RemoteSession.cs,SendAsyncMultipartDownloaderRequest,The method has an empty catch block.
Empty Catch Block,Couchbase.Lite.Internal,RemoteSession,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\RemoteSession.cs,SendAsyncMultipartDownloaderRequest,The method has an empty catch block.
Empty Catch Block,Couchbase.Lite.Support,Batcher,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Batcher.cs,Unschedule,The method has an empty catch block.
Empty Catch Block,Couchbase.Lite.Replicator,BulkDownloader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\BulkDownloader.cs,ExecuteRequest,The method has an empty catch block.
Empty Catch Block,Couchbase.Lite.Replicator,BulkDownloader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\BulkDownloader.cs,ExecuteRequest,The method has an empty catch block.
Magic Number,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,Close,The following statement contains a magic number: if (ActiveReplicators.AcquireAndDispose (out activeReplicatorCopy) && activeReplicatorCopy.Count > 0) {  	// Give a chance for replicators to clean up before closing the DB  	var evt = new CountdownEvent (activeReplicatorCopy.Count);  	lock (_activeReplicatorsLocker) {  		foreach (var repl in activeReplicatorCopy) {  			repl.DatabaseClosing (evt);  		}  	}  	ThreadPool.RegisterWaitForSingleObject (evt.WaitHandle' (state' timedOut) => {  		ActiveReplicators.Release ();  		CloseStorage ();  		tcs.SetResult (!timedOut);  	}' null' 15000' true);  } else {  	ActiveReplicators.Release ();  	CloseStorage ();  	tcs.SetResult (true);  }  
Magic Number,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,Close,The following statement contains a magic number: ThreadPool.RegisterWaitForSingleObject (evt.WaitHandle' (state' timedOut) => {  	ActiveReplicators.Release ();  	CloseStorage ();  	tcs.SetResult (!timedOut);  }' null' 15000' true);  
Magic Number,Couchbase.Lite,Database,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Database.cs,GetDesignDocFunction,The following statement contains a magic number: if (path.Length != 2) {  	return null;  }  
Magic Number,Couchbase.Lite,Manager,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager.cs,IsValidDatabaseName,The following statement contains a magic number: if (name.Length > 0 && name.Length < 240 && ContainsOnlyLegalCharacters (name) && Char.IsLower (name [0])) {  	return true;  }  
Magic Number,Couchbase.Lite,Manager,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager.cs,ReadVersion,The following statement contains a magic number: try {  	using (Stream stream = assembly.GetManifestResourceStream ("version")) {  		if (stream != null) {  			using (StreamReader reader = new StreamReader (stream)) {  				hash = reader.ReadToEnd ();  			}  		} else {  			return false;  		}  	}  	var colonPos = hash.IndexOf (':');  	if (colonPos != -1) {  		branch = hash.Substring (0' colonPos);  		hash = hash.Substring (colonPos + 2);  	}  	return true;  } catch (NotSupportedException) {  	Log.To.NoDomain.I (TAG' "Loaded assembly {0} but unable to read commit hash"' assembly.FullName);  }  
Magic Number,Couchbase.Lite,Manager,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager.cs,ReadVersion,The following statement contains a magic number: if (colonPos != -1) {  	branch = hash.Substring (0' colonPos);  	hash = hash.Substring (colonPos + 2);  }  
Magic Number,Couchbase.Lite,Manager,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager.cs,ReadVersion,The following statement contains a magic number: hash = hash.Substring (colonPos + 2);  
Magic Number,Couchbase.Lite,Replication,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication.cs,StatusFromBulkDocsResponseItem,The following statement contains a magic number: try {  	if (!item.ContainsKey ("error")) {  		return new Status (StatusCode.Ok);  	}  	var errorStr = item.Get ("error") as string;  	if (StringEx.IsNullOrWhiteSpace (errorStr)) {  		return new Status (StatusCode.Ok);  	}  	// 'status' property is nonstandard; TouchDB returns it' others don't.  	var status = item.GetCast<int> ("status");  	if (status >= 400) {  		return new Status ((StatusCode)status);  	}  	// If no 'status' present' interpret magic hardcoded CouchDB error strings:  	if (errorStr.Equals ("unauthorized"' StringComparison.InvariantCultureIgnoreCase)) {  		return new Status (StatusCode.Unauthorized);  	} else {  		if (errorStr.Equals ("forbidden"' StringComparison.InvariantCultureIgnoreCase)) {  			return new Status (StatusCode.Forbidden);  		} else {  			if (errorStr.Equals ("conflict"' StringComparison.InvariantCultureIgnoreCase)) {  				return new Status (StatusCode.Conflict);  			} else {  				return new Status (StatusCode.UpStreamError);  			}  		}  	}  } catch (Exception e) {  	Log.To.Sync.E (Tag' String.Format ("Exception getting status from {0}' continuing..."' item)' e);  }  
Magic Number,Couchbase.Lite,Replication,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication.cs,StatusFromBulkDocsResponseItem,The following statement contains a magic number: if (status >= 400) {  	return new Status ((StatusCode)status);  }  
Magic Number,Couchbase.Lite,Replication,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication.cs,RemoteCheckpointDocID,The following statement contains a magic number: if (ReplicationOptions.RemoteUUID != null) {  	spec ["remoteURL"] = ReplicationOptions.RemoteUUID;  } else {  	#pragma  	var hasValue = Options.TryGetValue<string> (ReplicationOptionsDictionary.REMOTE_UUID_KEY' out remoteUUID);  	#pragma  	if (hasValue) {  		Log.To.Sync.W (Tag' "ReplicationOptionsDictionary support is deprecated' switch to ReplicationOptions");  		spec ["remoteURL"] = remoteUUID;  	} else {  		spec ["remoteURL"] = ReplicationOptions.RemoteUUID ?? RemoteUrl.AbsoluteUri;  	}  }  
Magic Number,Couchbase.Lite,Replication,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication.cs,RemoteCheckpointDocID,The following statement contains a magic number: if (ReplicationOptions.RemoteUUID != null) {  	spec ["remoteURL"] = ReplicationOptions.RemoteUUID;  } else {  	#pragma  	var hasValue = Options.TryGetValue<string> (ReplicationOptionsDictionary.REMOTE_UUID_KEY' out remoteUUID);  	#pragma  	if (hasValue) {  		Log.To.Sync.W (Tag' "ReplicationOptionsDictionary support is deprecated' switch to ReplicationOptions");  		spec ["remoteURL"] = remoteUUID;  	} else {  		spec ["remoteURL"] = ReplicationOptions.RemoteUUID ?? RemoteUrl.AbsoluteUri;  	}  }  
Magic Number,Couchbase.Lite,Replication,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication.cs,SaveLastSequence,The following statement contains a magic number: if (_savingCheckpoint) {  	// If a save is already in progress' don't do anything. (The completion block will trigger  	// another save after the first one finishes.)  	Task.Delay (500).ContinueWith (t => SaveLastSequence (completionHandler));  	return;  }  
Magic Number,Couchbase.Lite,Replication,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication.cs,SaveLastSequence,The following statement contains a magic number: Task.Delay (500).ContinueWith (t => SaveLastSequence (completionHandler));  
Magic Number,Couchbase.Lite,Body,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Documents\Body.cs,Body,The following statement contains a magic number: if (json != null && count < 2) {  	_jsonObject = new NonNullDictionary<string' object> {  		{  			"_id"'  			docID  		}'  		{  			"_rev"'  			revID.ToString ()  		}'  		{  			"_deleted"'  			deleted ? (object)true : null  		}  	};  	return;  }  
Magic Number,Couchbase.Lite,Body,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Documents\Body.cs,Body,The following statement contains a magic number: bytes.InsertRange (bytes.Count - 1' json.Skip (1).Take (count - 2));  
Magic Number,Couchbase.Lite,Body,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Documents\Body.cs,GetProperties,The following statement contains a magic number: try {  	_lock.AcquireReaderLock (5000);  	return new Dictionary<string' object> (AsDictionary ());  } finally {  	_lock.ReleaseReaderLock ();  }  
Magic Number,Couchbase.Lite,Body,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Documents\Body.cs,GetProperties,The following statement contains a magic number: _lock.AcquireReaderLock (5000);  
Magic Number,Couchbase.Lite,Body,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Documents\Body.cs,GetPropertyForKey,The following statement contains a magic number: try {  	_lock.AcquireReaderLock (5000);  	IDictionary<string' object> theProperties = AsDictionary ();  	if (theProperties == null) {  		return null;  	}  	return theProperties.Get (key);  } finally {  	_lock.ReleaseReaderLock ();  }  
Magic Number,Couchbase.Lite,Body,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Documents\Body.cs,GetPropertyForKey,The following statement contains a magic number: _lock.AcquireReaderLock (5000);  
Magic Number,Couchbase.Lite,Body,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Documents\Body.cs,GetPropertyForKey,The following statement contains a magic number: try {  	_lock.AcquireReaderLock (5000);  	IDictionary<string' object> theProperties = AsDictionary ();  	if (theProperties == null) {  		return defaultVal;  	}  	return theProperties.GetCast<T> (key' defaultVal);  } finally {  	_lock.ReleaseReaderLock ();  }  
Magic Number,Couchbase.Lite,Body,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Documents\Body.cs,GetPropertyForKey,The following statement contains a magic number: _lock.AcquireReaderLock (5000);  
Magic Number,Couchbase.Lite,Body,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Documents\Body.cs,TryGetPropertyForKey,The following statement contains a magic number: try {  	_lock.AcquireReaderLock (5000);  	val = default(T);  	IDictionary<string' object> theProperties = GetProperties ();  	if (theProperties == null) {  		return false;  	}  	object valueObj;  	if (!theProperties.TryGetValue (key' out valueObj)) {  		return false;  	}  	return ExtensionMethods.TryCast<T> (valueObj' out val);  } finally {  	_lock.ReleaseReaderLock ();  }  
Magic Number,Couchbase.Lite,Body,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Documents\Body.cs,TryGetPropertyForKey,The following statement contains a magic number: _lock.AcquireReaderLock (5000);  
Magic Number,Couchbase.Lite,Body,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Documents\Body.cs,SetPropertyForKey,The following statement contains a magic number: try {  	_lock.AcquireWriterLock (10000);  	IDictionary<string' object> theProperties = AsDictionary ();  	if (theProperties == null) {  		Log.To.NoDomain.E (Tag' "{0} unable to parse properties' throwing..."' this);  		throw new InvalidDataException ("Cannot parse body properties");  	}  	theProperties [key] = value;  } finally {  	_lock.ReleaseWriterLock ();  }  
Magic Number,Couchbase.Lite,Body,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Documents\Body.cs,SetPropertyForKey,The following statement contains a magic number: _lock.AcquireWriterLock (10000);  
Magic Number,Couchbase.Lite,ManagerOptions,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager\ManagerOptions.cs,RestoreDefaults,The following statement contains a magic number: MaxRetries = 2;  
Magic Number,Couchbase.Lite,ManagerOptions,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager\ManagerOptions.cs,RestoreDefaults,The following statement contains a magic number: MaxOpenHttpConnections = 8;  
Magic Number,Couchbase.Lite,ManagerOptions,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager\ManagerOptions.cs,RestoreDefaults,The following statement contains a magic number: MaxRevsToGetInBulk = 50;  
Magic Number,Couchbase.Lite,ManagerOptions,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager\ManagerOptions.cs,RestoreDefaults,The following statement contains a magic number: RequestTimeout = TimeSpan.FromSeconds (60);  
Magic Number,Couchbase.Lite,ManagerOptions,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Manager\ManagerOptions.cs,RestoreDefaults,The following statement contains a magic number: ServicePointManager.DefaultConnectionLimit = Environment.ProcessorCount * 12;  
Magic Number,Couchbase.Lite,LiveQuery,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Query\LiveQuery.cs,OnDatabaseChanged,The following statement contains a magic number: foreach (var change in e.Changes) {  	if (change.SourceUrl == null) {  		updateInterval /= 2;  		break;  	}  }  
Magic Number,Couchbase.Lite,LiveQuery,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Query\LiveQuery.cs,OnDatabaseChanged,The following statement contains a magic number: if (change.SourceUrl == null) {  	updateInterval /= 2;  	break;  }  
Magic Number,Couchbase.Lite,LiveQuery,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Query\LiveQuery.cs,OnDatabaseChanged,The following statement contains a magic number: updateInterval /= 2;  
Magic Number,Couchbase.Lite,RevisionList,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Revisions\RevisionList.cs,ToString,The following statement contains a magic number: sb.Remove (sb.Length - 2' 2);  
Magic Number,Couchbase.Lite,RevisionList,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Revisions\RevisionList.cs,ToString,The following statement contains a magic number: sb.Remove (sb.Length - 2' 2);  
Magic Number,Couchbase.Lite,BlobKey,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Store\BlobKey.cs,ConvertFromHex,The following statement contains a magic number: return Enumerable.Range (0' s.Length).Where (x => x % 2 == 0).Select (x => Convert.ToByte (s.Substring (x' 2)' 16)).ToArray ();  
Magic Number,Couchbase.Lite,BlobKey,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Store\BlobKey.cs,ConvertFromHex,The following statement contains a magic number: return Enumerable.Range (0' s.Length).Where (x => x % 2 == 0).Select (x => Convert.ToByte (s.Substring (x' 2)' 16)).ToArray ();  
Magic Number,Couchbase.Lite,BlobKey,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Store\BlobKey.cs,ConvertFromHex,The following statement contains a magic number: return Enumerable.Range (0' s.Length).Where (x => x % 2 == 0).Select (x => Convert.ToByte (s.Substring (x' 2)' 16)).ToArray ();  
Magic Number,Couchbase.Lite,BlobKey,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Store\BlobKey.cs,DecodeBase64Digest,The following statement contains a magic number: if (!base64Digest.StartsWith (expectedPrefix' StringComparison.Ordinal)) {  	return Enumerable.Repeat<byte> (0' 20).ToArray ();  	// MD5 is no longer valid  }  
Magic Number,Couchbase.Lite,BlobKey,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Store\BlobKey.cs,DecodeBase64Digest,The following statement contains a magic number: return Enumerable.Repeat<byte> (0' 20).ToArray ();  
Magic Number,Couchbase.Lite,BlobKey,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Store\BlobKey.cs,GetHashCode,The following statement contains a magic number: foreach (var item in Bytes) {  	hashCode = 31 * hashCode + item.GetHashCode ();  }  
Magic Number,Couchbase.Lite,BlobKey,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Store\BlobKey.cs,GetHashCode,The following statement contains a magic number: hashCode = 31 * hashCode + item.GetHashCode ();  
Magic Number,Couchbase.Lite,BlobStore,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Store\BlobStore.cs,KeyForBlobFromFile,The following statement contains a magic number: try {  	using (var fis = new FileStream (file' FileMode.Open' FileAccess.Read' FileShare.ReadWrite)) {  		byte[] buffer = new byte[65536];  		int lenRead = fis.Read (buffer' 0' buffer.Length);  		while (lenRead > 0) {  			md.Update (buffer' 0' lenRead);  			lenRead = fis.Read (buffer' 0' buffer.Length);  		}  	}  } catch (IOException e) {  	Log.To.Database.E (TAG' "Error reading tmp file to compute key (returning null)"' e);  	return null;  }  
Magic Number,Couchbase.Lite,BlobStore,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Store\BlobStore.cs,KeyForBlobFromFile,The following statement contains a magic number: using (var fis = new FileStream (file' FileMode.Open' FileAccess.Read' FileShare.ReadWrite)) {  	byte[] buffer = new byte[65536];  	int lenRead = fis.Read (buffer' 0' buffer.Length);  	while (lenRead > 0) {  		md.Update (buffer' 0' lenRead);  		lenRead = fis.Read (buffer' 0' buffer.Length);  	}  }  
Magic Number,Couchbase.Lite,BlobStoreWriter,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Store\BlobStoreWriter.cs,ToString,The following statement contains a magic number: return String.Format ("BlobStoreWriter len={0}kb' digest={1}' SHA1={2}"' (double)length / 1024.0' MD5DigestString ()' SHA1DigestString ());  
Magic Number,Couchbase.Lite,Misc,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\Misc.cs,ConvertToHex,The following statement contains a magic number: for (int i = 0; i < numBytes; i++) {  	int halfbyte = (data [i] >> 4) & unchecked((0x0F));  	int two_halfs = 0;  	do {  		if ((0 <= halfbyte) && (halfbyte <= 9)) {  			buf.Append ((char)('0' + halfbyte));  		} else {  			buf.Append ((char)('a' + (halfbyte - 10)));  		}  		halfbyte = data [i] & unchecked((0x0F));  	} while (two_halfs++ < 1);  }  
Magic Number,Couchbase.Lite,Misc,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\Misc.cs,ConvertToHex,The following statement contains a magic number: for (int i = 0; i < numBytes; i++) {  	int halfbyte = (data [i] >> 4) & unchecked((0x0F));  	int two_halfs = 0;  	do {  		if ((0 <= halfbyte) && (halfbyte <= 9)) {  			buf.Append ((char)('0' + halfbyte));  		} else {  			buf.Append ((char)('a' + (halfbyte - 10)));  		}  		halfbyte = data [i] & unchecked((0x0F));  	} while (two_halfs++ < 1);  }  
Magic Number,Couchbase.Lite,Misc,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\Misc.cs,ConvertToHex,The following statement contains a magic number: for (int i = 0; i < numBytes; i++) {  	int halfbyte = (data [i] >> 4) & unchecked((0x0F));  	int two_halfs = 0;  	do {  		if ((0 <= halfbyte) && (halfbyte <= 9)) {  			buf.Append ((char)('0' + halfbyte));  		} else {  			buf.Append ((char)('a' + (halfbyte - 10)));  		}  		halfbyte = data [i] & unchecked((0x0F));  	} while (two_halfs++ < 1);  }  
Magic Number,Couchbase.Lite,Misc,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\Misc.cs,ConvertToHex,The following statement contains a magic number: do {  	if ((0 <= halfbyte) && (halfbyte <= 9)) {  		buf.Append ((char)('0' + halfbyte));  	} else {  		buf.Append ((char)('a' + (halfbyte - 10)));  	}  	halfbyte = data [i] & unchecked((0x0F));  } while (two_halfs++ < 1);  
Magic Number,Couchbase.Lite,Misc,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\Misc.cs,ConvertToHex,The following statement contains a magic number: do {  	if ((0 <= halfbyte) && (halfbyte <= 9)) {  		buf.Append ((char)('0' + halfbyte));  	} else {  		buf.Append ((char)('a' + (halfbyte - 10)));  	}  	halfbyte = data [i] & unchecked((0x0F));  } while (two_halfs++ < 1);  
Magic Number,Couchbase.Lite,Misc,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\Misc.cs,ConvertToHex,The following statement contains a magic number: if ((0 <= halfbyte) && (halfbyte <= 9)) {  	buf.Append ((char)('0' + halfbyte));  } else {  	buf.Append ((char)('a' + (halfbyte - 10)));  }  
Magic Number,Couchbase.Lite,Misc,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\Misc.cs,ConvertToHex,The following statement contains a magic number: if ((0 <= halfbyte) && (halfbyte <= 9)) {  	buf.Append ((char)('0' + halfbyte));  } else {  	buf.Append ((char)('a' + (halfbyte - 10)));  }  
Magic Number,Couchbase.Lite,Misc,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\Misc.cs,ConvertToHex,The following statement contains a magic number: buf.Append ((char)('a' + (halfbyte - 10)));  
Magic Number,Couchbase.Lite,UpdateJob,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\View\UpdateJob.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hash = 17;  	foreach (var name in Names) {  		hash = hash * 23 + name.GetHashCode ();  	}  	foreach (var sequence in LastSequences) {  		hash = hash * 23 + sequence.GetHashCode ();  	}  	return hash;  }  
Magic Number,Couchbase.Lite,UpdateJob,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\View\UpdateJob.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hash = 17;  	foreach (var name in Names) {  		hash = hash * 23 + name.GetHashCode ();  	}  	foreach (var sequence in LastSequences) {  		hash = hash * 23 + sequence.GetHashCode ();  	}  	return hash;  }  
Magic Number,Couchbase.Lite,UpdateJob,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\View\UpdateJob.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hash = 17;  	foreach (var name in Names) {  		hash = hash * 23 + name.GetHashCode ();  	}  	foreach (var sequence in LastSequences) {  		hash = hash * 23 + sequence.GetHashCode ();  	}  	return hash;  }  
Magic Number,Couchbase.Lite,UpdateJob,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\View\UpdateJob.cs,GetHashCode,The following statement contains a magic number: foreach (var name in Names) {  	hash = hash * 23 + name.GetHashCode ();  }  
Magic Number,Couchbase.Lite,UpdateJob,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\View\UpdateJob.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + name.GetHashCode ();  
Magic Number,Couchbase.Lite,UpdateJob,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\View\UpdateJob.cs,GetHashCode,The following statement contains a magic number: foreach (var sequence in LastSequences) {  	hash = hash * 23 + sequence.GetHashCode ();  }  
Magic Number,Couchbase.Lite,UpdateJob,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\View\UpdateJob.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + sequence.GetHashCode ();  
Magic Number,Couchbase.Lite,RemoteServerVersion,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\RemoteServerVersion.cs,RemoteServerVersion,The following statement contains a magic number: if (newPatternMatch.Success) {  	Name = "Couchbase Sync Gateway";  	Version = newPatternMatch.Groups [1].Value;  	Branch = newPatternMatch.Groups [2].Value.TrimEnd ();  	Commit = newPatternMatch.Groups [3].Value;  } else {  	Branch = Commit = String.Empty;  	var fallbackMatch = fallback.Match (versionString);  	if (!fallbackMatch.Success) {  		Version = String.Empty;  		Name = String.Empty;  	} else {  		Version = fallbackMatch.Groups [2].Value;  		Name = fallbackMatch.Groups [1].Value;  	}  }  
Magic Number,Couchbase.Lite,RemoteServerVersion,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\RemoteServerVersion.cs,RemoteServerVersion,The following statement contains a magic number: if (newPatternMatch.Success) {  	Name = "Couchbase Sync Gateway";  	Version = newPatternMatch.Groups [1].Value;  	Branch = newPatternMatch.Groups [2].Value.TrimEnd ();  	Commit = newPatternMatch.Groups [3].Value;  } else {  	Branch = Commit = String.Empty;  	var fallbackMatch = fallback.Match (versionString);  	if (!fallbackMatch.Success) {  		Version = String.Empty;  		Name = String.Empty;  	} else {  		Version = fallbackMatch.Groups [2].Value;  		Name = fallbackMatch.Groups [1].Value;  	}  }  
Magic Number,Couchbase.Lite,RemoteServerVersion,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\RemoteServerVersion.cs,RemoteServerVersion,The following statement contains a magic number: if (newPatternMatch.Success) {  	Name = "Couchbase Sync Gateway";  	Version = newPatternMatch.Groups [1].Value;  	Branch = newPatternMatch.Groups [2].Value.TrimEnd ();  	Commit = newPatternMatch.Groups [3].Value;  } else {  	Branch = Commit = String.Empty;  	var fallbackMatch = fallback.Match (versionString);  	if (!fallbackMatch.Success) {  		Version = String.Empty;  		Name = String.Empty;  	} else {  		Version = fallbackMatch.Groups [2].Value;  		Name = fallbackMatch.Groups [1].Value;  	}  }  
Magic Number,Couchbase.Lite,RemoteServerVersion,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\RemoteServerVersion.cs,RemoteServerVersion,The following statement contains a magic number: Branch = newPatternMatch.Groups [2].Value.TrimEnd ();  
Magic Number,Couchbase.Lite,RemoteServerVersion,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\RemoteServerVersion.cs,RemoteServerVersion,The following statement contains a magic number: Commit = newPatternMatch.Groups [3].Value;  
Magic Number,Couchbase.Lite,RemoteServerVersion,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\RemoteServerVersion.cs,RemoteServerVersion,The following statement contains a magic number: if (!fallbackMatch.Success) {  	Version = String.Empty;  	Name = String.Empty;  } else {  	Version = fallbackMatch.Groups [2].Value;  	Name = fallbackMatch.Groups [1].Value;  }  
Magic Number,Couchbase.Lite,RemoteServerVersion,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\RemoteServerVersion.cs,RemoteServerVersion,The following statement contains a magic number: Version = fallbackMatch.Groups [2].Value;  
Magic Number,Couchbase.Lite,CompressedContent,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\CompressedContent.cs,SerializeToStreamAsync,The following statement contains a magic number: if (encodingType == "gzip") {  	compressedStream = new GZipStream (stream' CompressionMode.Compress' true);  	compressedStream = new BufferedStream (compressedStream' 8192);  } else if (encodingType == "deflate") {  	compressedStream = new DeflateStream (stream' CompressionMode.Compress' true);  	compressedStream = new BufferedStream (compressedStream' 8192);  }  
Magic Number,Couchbase.Lite,CompressedContent,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\CompressedContent.cs,SerializeToStreamAsync,The following statement contains a magic number: if (encodingType == "gzip") {  	compressedStream = new GZipStream (stream' CompressionMode.Compress' true);  	compressedStream = new BufferedStream (compressedStream' 8192);  } else if (encodingType == "deflate") {  	compressedStream = new DeflateStream (stream' CompressionMode.Compress' true);  	compressedStream = new BufferedStream (compressedStream' 8192);  }  
Magic Number,Couchbase.Lite,CompressedContent,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\CompressedContent.cs,SerializeToStreamAsync,The following statement contains a magic number: compressedStream = new BufferedStream (compressedStream' 8192);  
Magic Number,Couchbase.Lite,CompressedContent,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\CompressedContent.cs,SerializeToStreamAsync,The following statement contains a magic number: if (encodingType == "deflate") {  	compressedStream = new DeflateStream (stream' CompressionMode.Compress' true);  	compressedStream = new BufferedStream (compressedStream' 8192);  }  
Magic Number,Couchbase.Lite,CompressedContent,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\CompressedContent.cs,SerializeToStreamAsync,The following statement contains a magic number: compressedStream = new BufferedStream (compressedStream' 8192);  
Magic Number,Couchbase.Lite,CouchbaseLiteHttpClient,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\CouchbaseLiteHttpClient.cs,SendAsync,The following statement contains a magic number: if (_connectionCount >= _connectionLimit) {  	return Task.Delay (500).ContinueWith (t => SendAsync (message' option' token)).Unwrap ();  }  
Magic Number,Couchbase.Lite,CouchbaseLiteHttpClient,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\CouchbaseLiteHttpClient.cs,SendAsync,The following statement contains a magic number: return Task.Delay (500).ContinueWith (t => SendAsync (message' option' token)).Unwrap ();  
Magic Number,Couchbase.Lite,ReplicationOptions,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ReplicationOptions.cs,ReplicationOptions,The following statement contains a magic number: if (dictionary.TryGetValue<long> ("poll"' out pollIntervalMs)) {  	if (pollIntervalMs >= 30000) {  		PollInterval = TimeSpan.FromMilliseconds (pollIntervalMs);  	} else {  		Log.To.Sync.W (Tag);  	}  }  
Magic Number,Couchbase.Lite,ReplicationOptions,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ReplicationOptions.cs,ReplicationOptions,The following statement contains a magic number: if (pollIntervalMs >= 30000) {  	PollInterval = TimeSpan.FromMilliseconds (pollIntervalMs);  } else {  	Log.To.Sync.W (Tag);  }  
Magic Number,Couchbase.Lite.Auth,AuthUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Auth\AuthUtils.cs,ParseAuthHeader,The following statement contains a magic number: if (matches.Count > 0) {  	var groups = matches [0].Groups;  	var key = groups [1].Value;  	var k = groups [3];  	if (!k.Success) {  		k = groups [4];  	}  	retVal [key] = k.Value;  	retVal ["Scheme"] = header.Scheme;  }  
Magic Number,Couchbase.Lite.Auth,AuthUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Auth\AuthUtils.cs,ParseAuthHeader,The following statement contains a magic number: if (matches.Count > 0) {  	var groups = matches [0].Groups;  	var key = groups [1].Value;  	var k = groups [3];  	if (!k.Success) {  		k = groups [4];  	}  	retVal [key] = k.Value;  	retVal ["Scheme"] = header.Scheme;  }  
Magic Number,Couchbase.Lite.Auth,AuthUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Auth\AuthUtils.cs,ParseAuthHeader,The following statement contains a magic number: if (!k.Success) {  	k = groups [4];  }  
Magic Number,Couchbase.Lite.Auth,AuthUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Auth\AuthUtils.cs,ParseAuthHeader,The following statement contains a magic number: k = groups [4];  
Magic Number,Couchbase.Lite.Auth,FacebookAuthorizer,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Auth\FacebookAuthorizer.cs,ToString,The following statement contains a magic number: sb.Remove (sb.Length - 2' 2);  
Magic Number,Couchbase.Lite.Auth,FacebookAuthorizer,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Auth\FacebookAuthorizer.cs,ToString,The following statement contains a magic number: sb.Remove (sb.Length - 2' 2);  
Magic Number,Couchbase.Lite.Auth,PersonaAuthorizer,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Auth\PersonaAuthorizer.cs,ParseAssertion,The following statement contains a magic number: if (components.Length < 4) {  	return false;  }  
Magic Number,Couchbase.Lite.Auth,PersonaAuthorizer,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Auth\PersonaAuthorizer.cs,ParseAssertion,The following statement contains a magic number: body = DecodeComponent (components' 3);  
Magic Number,Couchbase.Lite.Auth,BasicAuthenticator,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Auth\BasicAuthenticator.cs,FromUri,The following statement contains a magic number: if (!String.IsNullOrEmpty (userInfo)) {  	var parts = userInfo.Split (':');  	if (parts.Length != 2) {  		Log.To.Sync.W (Tag' "Unable to parse user info from URL ({0})' not creating Authenticator..."' new SecureLogString (userInfo' LogMessageSensitivity.Insecure));  		return null;  	}  	return new BasicAuthenticator (parts [0]' parts [1]);  }  
Magic Number,Couchbase.Lite.Auth,BasicAuthenticator,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Auth\BasicAuthenticator.cs,FromUri,The following statement contains a magic number: if (parts.Length != 2) {  	Log.To.Sync.W (Tag' "Unable to parse user info from URL ({0})' not creating Authenticator..."' new SecureLogString (userInfo' LogMessageSensitivity.Insecure));  	return null;  }  
Magic Number,Couchbase.Lite.Internal,RemoteSession,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\RemoteSession.cs,SendAsyncMultipartDownloaderRequest,The following statement contains a magic number: try {  	var url = _baseUrl.Append (relativePath);  	var message = new HttpRequestMessage (method' url);  	message.Headers.Add ("Accept"' "*/*");  	AddRequestHeaders (message);  	var client = default(CouchbaseLiteHttpClient);  	if (!_client.AcquireFor (TimeSpan.FromSeconds (1)' out client)) {  		Log.To.Sync.I (Tag' "Client is disposed' aborting request to {0}"' new SecureLogString (relativePath' LogMessageSensitivity.PotentiallyInsecure));  		return;  	}  	client.Authenticator = Authenticator;  	var request = client.SendAsync (message' _cancellationTokenSource.Token).ContinueWith (new Action<Task<HttpResponseMessage>> (responseMessage => {  		object fullBody = null;  		Exception error = null;  		try {  			if (responseMessage.IsFaulted) {  				error = responseMessage.Exception.InnerException;  				if (onCompletion != null) {  					onCompletion (null' error);  				}  				return;  			}  			var response = responseMessage.Result;  			// add in cookies to global store  			//CouchbaseLiteHttpClientFactory.Instance.AddCoIokies(clientFactory.HttpHandler.CookieContainer.GetCookies(url));  			var status = response.StatusCode;  			if ((Int32)status.GetStatusCode () >= 300) {  				Log.To.Sync.W (Tag' "Got error {0}"' status.GetStatusCode ());  				Log.To.Sync.W (Tag' "Request was for: " + message);  				Log.To.Sync.W (Tag' "Status reason: " + response.ReasonPhrase);  				Log.To.Sync.W (Tag' "Passing error onto callback...");  				error = new HttpResponseException (status);  				if (onCompletion != null) {  					onCompletion (null' error);  				}  			} else {  				var entity = response.Content;  				var contentTypeHeader = response.Content.Headers.ContentType;  				Stream inputStream = null;  				if (contentTypeHeader != null && contentTypeHeader.ToString ().Contains ("multipart/related")) {  					try {  						var reader = new MultipartDocumentReader (db);  						var contentType = contentTypeHeader.ToString ();  						reader.SetContentType (contentType);  						var inputStreamTask = entity.ReadAsStreamAsync ();  						//inputStreamTask.Wait(90000' CancellationTokenSource.Token);  						inputStream = inputStreamTask.Result;  						const int bufLen = 1024;  						var buffer = new byte[bufLen];  						int numBytesRead = 0;  						while ((numBytesRead = inputStream.Read (buffer' 0' buffer.Length)) > 0) {  							if (numBytesRead != bufLen) {  								var bufferToAppend = new Couchbase.Lite.Util.ArraySegment<Byte> (buffer' 0' numBytesRead);  								reader.AppendData (bufferToAppend);  							} else {  								reader.AppendData (buffer);  							}  						}  						reader.Finish ();  						fullBody = reader.GetDocumentProperties ();  						if (onCompletion != null) {  							onCompletion (fullBody' error);  						}  					} catch (Exception ex) {  						Log.To.Sync.W (Tag' "SendAsyncMultipartDownloaderRequest got an exception' aborting..."' ex);  					} finally {  						try {  							inputStream.Close ();  						} catch (Exception) {  						}  					}  				} else {  					if (entity != null) {  						try {  							var readTask = entity.ReadAsStreamAsync ();  							//readTask.Wait(); // TODO: This should be scaled based on content length.  							inputStream = readTask.Result;  							fullBody = Manager.GetObjectMapper ().ReadValue<Object> (inputStream);  							if (onCompletion != null)  								onCompletion (fullBody' error);  						} catch (Exception ex) {  							Log.To.Sync.W (Tag' "SendAsyncMultipartDownloaderRequest got an exception' aborting..."' ex);  						} finally {  							try {  								inputStream.Close ();  							} catch (Exception) {  							}  						}  					}  				}  			}  		} catch (Exception e) {  			Log.To.Sync.W (Tag' "Got exception during SendAsyncMultipartDownload' aborting...");  			error = e;  		} finally {  			Task dummy;  			_requests.TryRemove (message' out dummy);  			responseMessage.Result.Dispose ();  		}  	})' _workExecutor.Scheduler);  	_requests.TryAdd (message' request);  } catch (UriFormatException e) {  	Log.To.Sync.W (Tag' "Malformed URL for async request' aborting..."' e);  }  
Magic Number,Couchbase.Lite.Internal,RemoteSession,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\RemoteSession.cs,SendAsyncMultipartDownloaderRequest,The following statement contains a magic number: try {  	var url = _baseUrl.Append (relativePath);  	var message = new HttpRequestMessage (method' url);  	message.Headers.Add ("Accept"' "*/*");  	AddRequestHeaders (message);  	var client = default(CouchbaseLiteHttpClient);  	if (!_client.AcquireFor (TimeSpan.FromSeconds (1)' out client)) {  		Log.To.Sync.I (Tag' "Client is disposed' aborting request to {0}"' new SecureLogString (relativePath' LogMessageSensitivity.PotentiallyInsecure));  		return;  	}  	client.Authenticator = Authenticator;  	var request = client.SendAsync (message' _cancellationTokenSource.Token).ContinueWith (new Action<Task<HttpResponseMessage>> (responseMessage => {  		object fullBody = null;  		Exception error = null;  		try {  			if (responseMessage.IsFaulted) {  				error = responseMessage.Exception.InnerException;  				if (onCompletion != null) {  					onCompletion (null' error);  				}  				return;  			}  			var response = responseMessage.Result;  			// add in cookies to global store  			//CouchbaseLiteHttpClientFactory.Instance.AddCoIokies(clientFactory.HttpHandler.CookieContainer.GetCookies(url));  			var status = response.StatusCode;  			if ((Int32)status.GetStatusCode () >= 300) {  				Log.To.Sync.W (Tag' "Got error {0}"' status.GetStatusCode ());  				Log.To.Sync.W (Tag' "Request was for: " + message);  				Log.To.Sync.W (Tag' "Status reason: " + response.ReasonPhrase);  				Log.To.Sync.W (Tag' "Passing error onto callback...");  				error = new HttpResponseException (status);  				if (onCompletion != null) {  					onCompletion (null' error);  				}  			} else {  				var entity = response.Content;  				var contentTypeHeader = response.Content.Headers.ContentType;  				Stream inputStream = null;  				if (contentTypeHeader != null && contentTypeHeader.ToString ().Contains ("multipart/related")) {  					try {  						var reader = new MultipartDocumentReader (db);  						var contentType = contentTypeHeader.ToString ();  						reader.SetContentType (contentType);  						var inputStreamTask = entity.ReadAsStreamAsync ();  						//inputStreamTask.Wait(90000' CancellationTokenSource.Token);  						inputStream = inputStreamTask.Result;  						const int bufLen = 1024;  						var buffer = new byte[bufLen];  						int numBytesRead = 0;  						while ((numBytesRead = inputStream.Read (buffer' 0' buffer.Length)) > 0) {  							if (numBytesRead != bufLen) {  								var bufferToAppend = new Couchbase.Lite.Util.ArraySegment<Byte> (buffer' 0' numBytesRead);  								reader.AppendData (bufferToAppend);  							} else {  								reader.AppendData (buffer);  							}  						}  						reader.Finish ();  						fullBody = reader.GetDocumentProperties ();  						if (onCompletion != null) {  							onCompletion (fullBody' error);  						}  					} catch (Exception ex) {  						Log.To.Sync.W (Tag' "SendAsyncMultipartDownloaderRequest got an exception' aborting..."' ex);  					} finally {  						try {  							inputStream.Close ();  						} catch (Exception) {  						}  					}  				} else {  					if (entity != null) {  						try {  							var readTask = entity.ReadAsStreamAsync ();  							//readTask.Wait(); // TODO: This should be scaled based on content length.  							inputStream = readTask.Result;  							fullBody = Manager.GetObjectMapper ().ReadValue<Object> (inputStream);  							if (onCompletion != null)  								onCompletion (fullBody' error);  						} catch (Exception ex) {  							Log.To.Sync.W (Tag' "SendAsyncMultipartDownloaderRequest got an exception' aborting..."' ex);  						} finally {  							try {  								inputStream.Close ();  							} catch (Exception) {  							}  						}  					}  				}  			}  		} catch (Exception e) {  			Log.To.Sync.W (Tag' "Got exception during SendAsyncMultipartDownload' aborting...");  			error = e;  		} finally {  			Task dummy;  			_requests.TryRemove (message' out dummy);  			responseMessage.Result.Dispose ();  		}  	})' _workExecutor.Scheduler);  	_requests.TryAdd (message' request);  } catch (UriFormatException e) {  	Log.To.Sync.W (Tag' "Malformed URL for async request' aborting..."' e);  }  
Magic Number,Couchbase.Lite.Internal,RemoteSession,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\RemoteSession.cs,SendAsyncMultipartDownloaderRequest,The following statement contains a magic number: try {  	if (responseMessage.IsFaulted) {  		error = responseMessage.Exception.InnerException;  		if (onCompletion != null) {  			onCompletion (null' error);  		}  		return;  	}  	var response = responseMessage.Result;  	// add in cookies to global store  	//CouchbaseLiteHttpClientFactory.Instance.AddCoIokies(clientFactory.HttpHandler.CookieContainer.GetCookies(url));  	var status = response.StatusCode;  	if ((Int32)status.GetStatusCode () >= 300) {  		Log.To.Sync.W (Tag' "Got error {0}"' status.GetStatusCode ());  		Log.To.Sync.W (Tag' "Request was for: " + message);  		Log.To.Sync.W (Tag' "Status reason: " + response.ReasonPhrase);  		Log.To.Sync.W (Tag' "Passing error onto callback...");  		error = new HttpResponseException (status);  		if (onCompletion != null) {  			onCompletion (null' error);  		}  	} else {  		var entity = response.Content;  		var contentTypeHeader = response.Content.Headers.ContentType;  		Stream inputStream = null;  		if (contentTypeHeader != null && contentTypeHeader.ToString ().Contains ("multipart/related")) {  			try {  				var reader = new MultipartDocumentReader (db);  				var contentType = contentTypeHeader.ToString ();  				reader.SetContentType (contentType);  				var inputStreamTask = entity.ReadAsStreamAsync ();  				//inputStreamTask.Wait(90000' CancellationTokenSource.Token);  				inputStream = inputStreamTask.Result;  				const int bufLen = 1024;  				var buffer = new byte[bufLen];  				int numBytesRead = 0;  				while ((numBytesRead = inputStream.Read (buffer' 0' buffer.Length)) > 0) {  					if (numBytesRead != bufLen) {  						var bufferToAppend = new Couchbase.Lite.Util.ArraySegment<Byte> (buffer' 0' numBytesRead);  						reader.AppendData (bufferToAppend);  					} else {  						reader.AppendData (buffer);  					}  				}  				reader.Finish ();  				fullBody = reader.GetDocumentProperties ();  				if (onCompletion != null) {  					onCompletion (fullBody' error);  				}  			} catch (Exception ex) {  				Log.To.Sync.W (Tag' "SendAsyncMultipartDownloaderRequest got an exception' aborting..."' ex);  			} finally {  				try {  					inputStream.Close ();  				} catch (Exception) {  				}  			}  		} else {  			if (entity != null) {  				try {  					var readTask = entity.ReadAsStreamAsync ();  					//readTask.Wait(); // TODO: This should be scaled based on content length.  					inputStream = readTask.Result;  					fullBody = Manager.GetObjectMapper ().ReadValue<Object> (inputStream);  					if (onCompletion != null)  						onCompletion (fullBody' error);  				} catch (Exception ex) {  					Log.To.Sync.W (Tag' "SendAsyncMultipartDownloaderRequest got an exception' aborting..."' ex);  				} finally {  					try {  						inputStream.Close ();  					} catch (Exception) {  					}  				}  			}  		}  	}  } catch (Exception e) {  	Log.To.Sync.W (Tag' "Got exception during SendAsyncMultipartDownload' aborting...");  	error = e;  } finally {  	Task dummy;  	_requests.TryRemove (message' out dummy);  	responseMessage.Result.Dispose ();  }  
Magic Number,Couchbase.Lite.Internal,RemoteSession,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\RemoteSession.cs,SendAsyncMultipartDownloaderRequest,The following statement contains a magic number: try {  	if (responseMessage.IsFaulted) {  		error = responseMessage.Exception.InnerException;  		if (onCompletion != null) {  			onCompletion (null' error);  		}  		return;  	}  	var response = responseMessage.Result;  	// add in cookies to global store  	//CouchbaseLiteHttpClientFactory.Instance.AddCoIokies(clientFactory.HttpHandler.CookieContainer.GetCookies(url));  	var status = response.StatusCode;  	if ((Int32)status.GetStatusCode () >= 300) {  		Log.To.Sync.W (Tag' "Got error {0}"' status.GetStatusCode ());  		Log.To.Sync.W (Tag' "Request was for: " + message);  		Log.To.Sync.W (Tag' "Status reason: " + response.ReasonPhrase);  		Log.To.Sync.W (Tag' "Passing error onto callback...");  		error = new HttpResponseException (status);  		if (onCompletion != null) {  			onCompletion (null' error);  		}  	} else {  		var entity = response.Content;  		var contentTypeHeader = response.Content.Headers.ContentType;  		Stream inputStream = null;  		if (contentTypeHeader != null && contentTypeHeader.ToString ().Contains ("multipart/related")) {  			try {  				var reader = new MultipartDocumentReader (db);  				var contentType = contentTypeHeader.ToString ();  				reader.SetContentType (contentType);  				var inputStreamTask = entity.ReadAsStreamAsync ();  				//inputStreamTask.Wait(90000' CancellationTokenSource.Token);  				inputStream = inputStreamTask.Result;  				const int bufLen = 1024;  				var buffer = new byte[bufLen];  				int numBytesRead = 0;  				while ((numBytesRead = inputStream.Read (buffer' 0' buffer.Length)) > 0) {  					if (numBytesRead != bufLen) {  						var bufferToAppend = new Couchbase.Lite.Util.ArraySegment<Byte> (buffer' 0' numBytesRead);  						reader.AppendData (bufferToAppend);  					} else {  						reader.AppendData (buffer);  					}  				}  				reader.Finish ();  				fullBody = reader.GetDocumentProperties ();  				if (onCompletion != null) {  					onCompletion (fullBody' error);  				}  			} catch (Exception ex) {  				Log.To.Sync.W (Tag' "SendAsyncMultipartDownloaderRequest got an exception' aborting..."' ex);  			} finally {  				try {  					inputStream.Close ();  				} catch (Exception) {  				}  			}  		} else {  			if (entity != null) {  				try {  					var readTask = entity.ReadAsStreamAsync ();  					//readTask.Wait(); // TODO: This should be scaled based on content length.  					inputStream = readTask.Result;  					fullBody = Manager.GetObjectMapper ().ReadValue<Object> (inputStream);  					if (onCompletion != null)  						onCompletion (fullBody' error);  				} catch (Exception ex) {  					Log.To.Sync.W (Tag' "SendAsyncMultipartDownloaderRequest got an exception' aborting..."' ex);  				} finally {  					try {  						inputStream.Close ();  					} catch (Exception) {  					}  				}  			}  		}  	}  } catch (Exception e) {  	Log.To.Sync.W (Tag' "Got exception during SendAsyncMultipartDownload' aborting...");  	error = e;  } finally {  	Task dummy;  	_requests.TryRemove (message' out dummy);  	responseMessage.Result.Dispose ();  }  
Magic Number,Couchbase.Lite.Internal,RemoteSession,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\RemoteSession.cs,SendAsyncMultipartDownloaderRequest,The following statement contains a magic number: if ((Int32)status.GetStatusCode () >= 300) {  	Log.To.Sync.W (Tag' "Got error {0}"' status.GetStatusCode ());  	Log.To.Sync.W (Tag' "Request was for: " + message);  	Log.To.Sync.W (Tag' "Status reason: " + response.ReasonPhrase);  	Log.To.Sync.W (Tag' "Passing error onto callback...");  	error = new HttpResponseException (status);  	if (onCompletion != null) {  		onCompletion (null' error);  	}  } else {  	var entity = response.Content;  	var contentTypeHeader = response.Content.Headers.ContentType;  	Stream inputStream = null;  	if (contentTypeHeader != null && contentTypeHeader.ToString ().Contains ("multipart/related")) {  		try {  			var reader = new MultipartDocumentReader (db);  			var contentType = contentTypeHeader.ToString ();  			reader.SetContentType (contentType);  			var inputStreamTask = entity.ReadAsStreamAsync ();  			//inputStreamTask.Wait(90000' CancellationTokenSource.Token);  			inputStream = inputStreamTask.Result;  			const int bufLen = 1024;  			var buffer = new byte[bufLen];  			int numBytesRead = 0;  			while ((numBytesRead = inputStream.Read (buffer' 0' buffer.Length)) > 0) {  				if (numBytesRead != bufLen) {  					var bufferToAppend = new Couchbase.Lite.Util.ArraySegment<Byte> (buffer' 0' numBytesRead);  					reader.AppendData (bufferToAppend);  				} else {  					reader.AppendData (buffer);  				}  			}  			reader.Finish ();  			fullBody = reader.GetDocumentProperties ();  			if (onCompletion != null) {  				onCompletion (fullBody' error);  			}  		} catch (Exception ex) {  			Log.To.Sync.W (Tag' "SendAsyncMultipartDownloaderRequest got an exception' aborting..."' ex);  		} finally {  			try {  				inputStream.Close ();  			} catch (Exception) {  			}  		}  	} else {  		if (entity != null) {  			try {  				var readTask = entity.ReadAsStreamAsync ();  				//readTask.Wait(); // TODO: This should be scaled based on content length.  				inputStream = readTask.Result;  				fullBody = Manager.GetObjectMapper ().ReadValue<Object> (inputStream);  				if (onCompletion != null)  					onCompletion (fullBody' error);  			} catch (Exception ex) {  				Log.To.Sync.W (Tag' "SendAsyncMultipartDownloaderRequest got an exception' aborting..."' ex);  			} finally {  				try {  					inputStream.Close ();  				} catch (Exception) {  				}  			}  		}  	}  }  
Magic Number,Couchbase.Lite.Internal,RemoteSession,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\RemoteSession.cs,SendAsyncMultipartDownloaderRequest,The following statement contains a magic number: if ((Int32)status.GetStatusCode () >= 300) {  	Log.To.Sync.W (Tag' "Got error {0}"' status.GetStatusCode ());  	Log.To.Sync.W (Tag' "Request was for: " + message);  	Log.To.Sync.W (Tag' "Status reason: " + response.ReasonPhrase);  	Log.To.Sync.W (Tag' "Passing error onto callback...");  	error = new HttpResponseException (status);  	if (onCompletion != null) {  		onCompletion (null' error);  	}  } else {  	var entity = response.Content;  	var contentTypeHeader = response.Content.Headers.ContentType;  	Stream inputStream = null;  	if (contentTypeHeader != null && contentTypeHeader.ToString ().Contains ("multipart/related")) {  		try {  			var reader = new MultipartDocumentReader (db);  			var contentType = contentTypeHeader.ToString ();  			reader.SetContentType (contentType);  			var inputStreamTask = entity.ReadAsStreamAsync ();  			//inputStreamTask.Wait(90000' CancellationTokenSource.Token);  			inputStream = inputStreamTask.Result;  			const int bufLen = 1024;  			var buffer = new byte[bufLen];  			int numBytesRead = 0;  			while ((numBytesRead = inputStream.Read (buffer' 0' buffer.Length)) > 0) {  				if (numBytesRead != bufLen) {  					var bufferToAppend = new Couchbase.Lite.Util.ArraySegment<Byte> (buffer' 0' numBytesRead);  					reader.AppendData (bufferToAppend);  				} else {  					reader.AppendData (buffer);  				}  			}  			reader.Finish ();  			fullBody = reader.GetDocumentProperties ();  			if (onCompletion != null) {  				onCompletion (fullBody' error);  			}  		} catch (Exception ex) {  			Log.To.Sync.W (Tag' "SendAsyncMultipartDownloaderRequest got an exception' aborting..."' ex);  		} finally {  			try {  				inputStream.Close ();  			} catch (Exception) {  			}  		}  	} else {  		if (entity != null) {  			try {  				var readTask = entity.ReadAsStreamAsync ();  				//readTask.Wait(); // TODO: This should be scaled based on content length.  				inputStream = readTask.Result;  				fullBody = Manager.GetObjectMapper ().ReadValue<Object> (inputStream);  				if (onCompletion != null)  					onCompletion (fullBody' error);  			} catch (Exception ex) {  				Log.To.Sync.W (Tag' "SendAsyncMultipartDownloaderRequest got an exception' aborting..."' ex);  			} finally {  				try {  					inputStream.Close ();  				} catch (Exception) {  				}  			}  		}  	}  }  
Magic Number,Couchbase.Lite.Internal,RemoteSession,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\RemoteSession.cs,SendAsyncMultipartDownloaderRequest,The following statement contains a magic number: if (contentTypeHeader != null && contentTypeHeader.ToString ().Contains ("multipart/related")) {  	try {  		var reader = new MultipartDocumentReader (db);  		var contentType = contentTypeHeader.ToString ();  		reader.SetContentType (contentType);  		var inputStreamTask = entity.ReadAsStreamAsync ();  		//inputStreamTask.Wait(90000' CancellationTokenSource.Token);  		inputStream = inputStreamTask.Result;  		const int bufLen = 1024;  		var buffer = new byte[bufLen];  		int numBytesRead = 0;  		while ((numBytesRead = inputStream.Read (buffer' 0' buffer.Length)) > 0) {  			if (numBytesRead != bufLen) {  				var bufferToAppend = new Couchbase.Lite.Util.ArraySegment<Byte> (buffer' 0' numBytesRead);  				reader.AppendData (bufferToAppend);  			} else {  				reader.AppendData (buffer);  			}  		}  		reader.Finish ();  		fullBody = reader.GetDocumentProperties ();  		if (onCompletion != null) {  			onCompletion (fullBody' error);  		}  	} catch (Exception ex) {  		Log.To.Sync.W (Tag' "SendAsyncMultipartDownloaderRequest got an exception' aborting..."' ex);  	} finally {  		try {  			inputStream.Close ();  		} catch (Exception) {  		}  	}  } else {  	if (entity != null) {  		try {  			var readTask = entity.ReadAsStreamAsync ();  			//readTask.Wait(); // TODO: This should be scaled based on content length.  			inputStream = readTask.Result;  			fullBody = Manager.GetObjectMapper ().ReadValue<Object> (inputStream);  			if (onCompletion != null)  				onCompletion (fullBody' error);  		} catch (Exception ex) {  			Log.To.Sync.W (Tag' "SendAsyncMultipartDownloaderRequest got an exception' aborting..."' ex);  		} finally {  			try {  				inputStream.Close ();  			} catch (Exception) {  			}  		}  	}  }  
Magic Number,Couchbase.Lite.Internal,RemoteSession,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\RemoteSession.cs,SendAsyncMultipartDownloaderRequest,The following statement contains a magic number: try {  	var reader = new MultipartDocumentReader (db);  	var contentType = contentTypeHeader.ToString ();  	reader.SetContentType (contentType);  	var inputStreamTask = entity.ReadAsStreamAsync ();  	//inputStreamTask.Wait(90000' CancellationTokenSource.Token);  	inputStream = inputStreamTask.Result;  	const int bufLen = 1024;  	var buffer = new byte[bufLen];  	int numBytesRead = 0;  	while ((numBytesRead = inputStream.Read (buffer' 0' buffer.Length)) > 0) {  		if (numBytesRead != bufLen) {  			var bufferToAppend = new Couchbase.Lite.Util.ArraySegment<Byte> (buffer' 0' numBytesRead);  			reader.AppendData (bufferToAppend);  		} else {  			reader.AppendData (buffer);  		}  	}  	reader.Finish ();  	fullBody = reader.GetDocumentProperties ();  	if (onCompletion != null) {  		onCompletion (fullBody' error);  	}  } catch (Exception ex) {  	Log.To.Sync.W (Tag' "SendAsyncMultipartDownloaderRequest got an exception' aborting..."' ex);  } finally {  	try {  		inputStream.Close ();  	} catch (Exception) {  	}  }  
Magic Number,Couchbase.Lite.Internal,RemoteSession,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\RemoteSession.cs,SendAsyncMultipartRequest,The following statement contains a magic number: if ((int)response.Result.StatusCode > 300) {  	_lastError = new HttpResponseException (response.Result.StatusCode);  	Log.To.Sync.W (Tag' "Server returned HTTP Error' returning null...");  	return Task.FromResult ((Stream)null);  }  
Magic Number,Couchbase.Lite.Internal,WebSocketChangeTracker,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\WebSocketChangeTracker.cs,OnReceive,The following statement contains a magic number: try {  	if (args.RawData.Length == 0) {  		return;  	}  	var code = ChangeTrackerMessageType.Unknown;  	if (args.IsText) {  		if (args.RawData.Length == 2 && args.RawData [0] == '[' && args.RawData [1] == ']') {  			code = ChangeTrackerMessageType.EOF;  		} else {  			code = ChangeTrackerMessageType.Plaintext;  		}  	} else {  		code = ChangeTrackerMessageType.GZip;  	}  	var responseStream = RecyclableMemoryStreamManager.SharedInstance.GetStream ("WebSocketChangeTracker"' args.RawData.Length + 1);  	try {  		responseStream.WriteByte ((byte)code);  		responseStream.Write (args.RawData' 0' args.RawData.Length);  		responseStream.Seek (0' SeekOrigin.Begin);  		_responseLogic.ProcessResponseStream (responseStream' _cts.Token);  	} finally {  		responseStream.Dispose ();  	}  } catch (Exception e) {  	Log.To.ChangeTracker.E (Tag' String.Format ("{0} is not parseable"' GetLogString (args))' e);  }  
Magic Number,Couchbase.Lite.Internal,WebSocketChangeTracker,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\WebSocketChangeTracker.cs,OnReceive,The following statement contains a magic number: if (args.IsText) {  	if (args.RawData.Length == 2 && args.RawData [0] == '[' && args.RawData [1] == ']') {  		code = ChangeTrackerMessageType.EOF;  	} else {  		code = ChangeTrackerMessageType.Plaintext;  	}  } else {  	code = ChangeTrackerMessageType.GZip;  }  
Magic Number,Couchbase.Lite.Internal,WebSocketChangeTracker,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\WebSocketChangeTracker.cs,OnReceive,The following statement contains a magic number: if (args.RawData.Length == 2 && args.RawData [0] == '[' && args.RawData [1] == ']') {  	code = ChangeTrackerMessageType.EOF;  } else {  	code = ChangeTrackerMessageType.Plaintext;  }  
Magic Number,Couchbase.Lite.Internal,WebSocketChangeTracker,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\WebSocketChangeTracker.cs,Start,The following statement contains a magic number: _client.WaitTime = TimeSpan.FromSeconds (5);  
Magic Number,Couchbase.Lite.Internal,SocketChangeTracker,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\SocketChangeTracker.cs,RetryOrStopIfNecessary,The following statement contains a magic number: if (!IsRunning || ((int)statusCode >= 200 && (int)statusCode <= 299)) {  	return;  }  
Magic Number,Couchbase.Lite.Internal,SocketChangeTracker,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\SocketChangeTracker.cs,RetryOrStopIfNecessary,The following statement contains a magic number: if (!IsRunning || ((int)statusCode >= 200 && (int)statusCode <= 299)) {  	return;  }  
Magic Number,Couchbase.Lite.Internal,SocketChangeTracker,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\SocketChangeTracker.cs,ResponseFailed,The following statement contains a magic number: if ((Int32)status >= 300) {  	if (RetryIfFailedPost (status)) {  		return true;  	}  	RetryOrStopIfNecessary (status);  	response.Dispose ();  	return true;  }  
Magic Number,Couchbase.Lite.Internal,ChunkStream,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ChunkStream.cs,Read,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	if (_current == null || _current.Count == 0) {  		if (!ReadNextQueue (i == 0)) {  			break;  		}  	}  	var next = _current.Dequeue ();  	if (next > 255) {  		// bookmark  		Log.To.ChangeTracker.D (Tag' "{0} bookmark reached (code: {1})"' this' next - 255);  		BookmarkReached.Invoke (this' new BookmarkEventArgs ((byte)(next - 255)));  		_current = null;  		if (!ReadNextQueue (i == 0)) {  			break;  		}  		next = _current.Dequeue ();  	}  	// We have a new batch of data' so continue to copy it into the buffer  	buffer [offset + i] = (byte)next;  	readCount++;  }  
Magic Number,Couchbase.Lite.Internal,ChunkStream,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ChunkStream.cs,Read,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	if (_current == null || _current.Count == 0) {  		if (!ReadNextQueue (i == 0)) {  			break;  		}  	}  	var next = _current.Dequeue ();  	if (next > 255) {  		// bookmark  		Log.To.ChangeTracker.D (Tag' "{0} bookmark reached (code: {1})"' this' next - 255);  		BookmarkReached.Invoke (this' new BookmarkEventArgs ((byte)(next - 255)));  		_current = null;  		if (!ReadNextQueue (i == 0)) {  			break;  		}  		next = _current.Dequeue ();  	}  	// We have a new batch of data' so continue to copy it into the buffer  	buffer [offset + i] = (byte)next;  	readCount++;  }  
Magic Number,Couchbase.Lite.Internal,ChunkStream,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ChunkStream.cs,Read,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	if (_current == null || _current.Count == 0) {  		if (!ReadNextQueue (i == 0)) {  			break;  		}  	}  	var next = _current.Dequeue ();  	if (next > 255) {  		// bookmark  		Log.To.ChangeTracker.D (Tag' "{0} bookmark reached (code: {1})"' this' next - 255);  		BookmarkReached.Invoke (this' new BookmarkEventArgs ((byte)(next - 255)));  		_current = null;  		if (!ReadNextQueue (i == 0)) {  			break;  		}  		next = _current.Dequeue ();  	}  	// We have a new batch of data' so continue to copy it into the buffer  	buffer [offset + i] = (byte)next;  	readCount++;  }  
Magic Number,Couchbase.Lite.Internal,ChunkStream,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ChunkStream.cs,Read,The following statement contains a magic number: if (next > 255) {  	// bookmark  	Log.To.ChangeTracker.D (Tag' "{0} bookmark reached (code: {1})"' this' next - 255);  	BookmarkReached.Invoke (this' new BookmarkEventArgs ((byte)(next - 255)));  	_current = null;  	if (!ReadNextQueue (i == 0)) {  		break;  	}  	next = _current.Dequeue ();  }  
Magic Number,Couchbase.Lite.Internal,ChunkStream,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ChunkStream.cs,Read,The following statement contains a magic number: if (next > 255) {  	// bookmark  	Log.To.ChangeTracker.D (Tag' "{0} bookmark reached (code: {1})"' this' next - 255);  	BookmarkReached.Invoke (this' new BookmarkEventArgs ((byte)(next - 255)));  	_current = null;  	if (!ReadNextQueue (i == 0)) {  		break;  	}  	next = _current.Dequeue ();  }  
Magic Number,Couchbase.Lite.Internal,ChunkStream,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ChunkStream.cs,Read,The following statement contains a magic number: if (next > 255) {  	// bookmark  	Log.To.ChangeTracker.D (Tag' "{0} bookmark reached (code: {1})"' this' next - 255);  	BookmarkReached.Invoke (this' new BookmarkEventArgs ((byte)(next - 255)));  	_current = null;  	if (!ReadNextQueue (i == 0)) {  		break;  	}  	next = _current.Dequeue ();  }  
Magic Number,Couchbase.Lite.Internal,ChunkStream,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ChunkStream.cs,Read,The following statement contains a magic number: Log.To.ChangeTracker.D (Tag' "{0} bookmark reached (code: {1})"' this' next - 255);  
Magic Number,Couchbase.Lite.Internal,ChunkStream,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ChunkStream.cs,Read,The following statement contains a magic number: BookmarkReached.Invoke (this' new BookmarkEventArgs ((byte)(next - 255)));  
Magic Number,Couchbase.Lite.Internal,OneShotOrLongPollLogic,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\OneShotOrLongPollLogic.cs,ReceivedPollResponse,The following statement contains a magic number: try {  	while (jsonReader.Read () && !token.IsCancellationRequested) {  		_pauseWait.Wait ();  		if (jsonReader.CurrentToken == JsonToken.StartArray) {  			timedOut = true;  			started = true;  		} else if (jsonReader.CurrentToken == JsonToken.EndArray) {  			started = false;  		} else if (started) {  			IDictionary<string' object> change;  			try {  				change = jsonReader.DeserializeNextObject<IDictionary<string' object>> ();  			} catch (Exception e) {  				var ex = e as CouchbaseLiteException;  				if (ex == null || ex.Code != StatusCode.BadJson) {  					Log.To.ChangeTracker.W (Tag' "Failure during change tracker JSON parsing"' e);  					throw;  				}  				return false;  			}  			if (OnChangeFound != null) {  				OnChangeFound (change);  			}  			timedOut = false;  		}  	}  } catch (CouchbaseLiteException e) {  	var elapsed = DateTime.Now - start;  	timedOut = timedOut && elapsed.TotalSeconds >= 30;  	if (e.CBLStatus.Code == StatusCode.BadJson && timedOut) {  		return false;  	}  	throw;  }  
Magic Number,Couchbase.Lite.Internal,OneShotOrLongPollLogic,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\OneShotOrLongPollLogic.cs,ReceivedPollResponse,The following statement contains a magic number: timedOut = timedOut && elapsed.TotalSeconds >= 30;  
Magic Number,Couchbase.Lite.Internal,OneShotOrLongPollLogic,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\OneShotOrLongPollLogic.cs,ProcessResponseStream,The following statement contains a magic number: if (responseOK) {  	var response = ChangeTrackerResponseCode.Normal;  	if (!_caughtUp) {  		_caughtUp = true;  		if (OnCaughtUp != null) {  			OnCaughtUp ();  		}  	}  	if (OnFinished != null) {  		OnFinished (null);  	}  	return response;  } else {  	if (beforeFirstItem) {  		var elapsed = DateTime.Now - _startTime;  		Log.To.ChangeTracker.W (Tag' "{0} longpoll connection closed (by proxy?) after {0} sec"' this' elapsed.TotalSeconds);  		// Looks like the connection got closed by a proxy (like AWS' load balancer) while the  		// server was waiting for a change to send' due to lack of activity.  		// Lower the heartbeat time to work around this' and reconnect:  		long newTicks = (long)(elapsed.Ticks * 0.75);  		Heartbeat = new TimeSpan (newTicks);  		return ChangeTrackerResponseCode.ChangeHeartbeat;  	} else {  		Log.To.ChangeTracker.W (Tag' "{0} Received improper _changes feed response"' this);  		if (OnFinished != null) {  			OnFinished (new CouchbaseLiteException (StatusCode.BadJson));  		}  		return ChangeTrackerResponseCode.Failed;  	}  }  
Magic Number,Couchbase.Lite.Internal,OneShotOrLongPollLogic,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\OneShotOrLongPollLogic.cs,ProcessResponseStream,The following statement contains a magic number: if (beforeFirstItem) {  	var elapsed = DateTime.Now - _startTime;  	Log.To.ChangeTracker.W (Tag' "{0} longpoll connection closed (by proxy?) after {0} sec"' this' elapsed.TotalSeconds);  	// Looks like the connection got closed by a proxy (like AWS' load balancer) while the  	// server was waiting for a change to send' due to lack of activity.  	// Lower the heartbeat time to work around this' and reconnect:  	long newTicks = (long)(elapsed.Ticks * 0.75);  	Heartbeat = new TimeSpan (newTicks);  	return ChangeTrackerResponseCode.ChangeHeartbeat;  } else {  	Log.To.ChangeTracker.W (Tag' "{0} Received improper _changes feed response"' this);  	if (OnFinished != null) {  		OnFinished (new CouchbaseLiteException (StatusCode.BadJson));  	}  	return ChangeTrackerResponseCode.Failed;  }  
Magic Number,Couchbase.Lite.Internal,ChunkedChanges,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ChunkedChanges.cs,ReadHeader,The following statement contains a magic number: if (magic != (GZipConstants.GZIP_MAGIC >> 8)) {  	throw new GZipException ("Error GZIP header' first magic byte doesn't match");  }  
Magic Number,Couchbase.Lite.Internal,ChunkedChanges,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ChunkedChanges.cs,ReadHeader,The following statement contains a magic number: if (compressionType != 8) {  	throw new GZipException ("Error GZIP header' data not in deflate format");  }  
Magic Number,Couchbase.Lite.Internal,ChunkedChanges,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ChunkedChanges.cs,ReadHeader,The following statement contains a magic number: for (int i = 0; i < 6; i++) {  	int readByte = stream.ReadByte ();  	if (readByte < 0) {  		throw new GZipException ("EOS reading GZIP header");  	}  	headCRC.Update (readByte);  }  
Magic Number,Couchbase.Lite.Internal,ChunkedChanges,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ChunkedChanges.cs,ReadHeader,The following statement contains a magic number: if ((flags & GZipConstants.FEXTRA) != 0) {  	// XLEN is total length of extra subfields' we will skip them all  	int len1' len2;  	len1 = stream.ReadByte ();  	len2 = stream.ReadByte ();  	if ((len1 < 0) || (len2 < 0)) {  		throw new GZipException ("EOS reading GZIP header");  	}  	int extraLen = (len2 << 8) | len1;  	// gzip is LSB first  	for (int i = 0; i < extraLen; i++) {  		int readByte = stream.ReadByte ();  		if (readByte < 0) {  			throw new GZipException ("EOS reading GZIP header");  		}  		headCRC.Update (readByte);  	}  }  
Magic Number,Couchbase.Lite.Internal,ChunkedChanges,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ChunkedChanges.cs,ReadHeader,The following statement contains a magic number: if ((flags & GZipConstants.FHCRC) != 0) {  	int tempByte;  	int crcval = stream.ReadByte ();  	if (crcval < 0) {  		throw new GZipException ("EOS reading GZIP header");  	}  	tempByte = stream.ReadByte ();  	if (tempByte < 0) {  		throw new GZipException ("EOS reading GZIP header");  	}  	crcval = (crcval << 8) | tempByte;  	if (crcval != ((int)headCRC.Value & 0xffff)) {  		throw new GZipException ("Header CRC value mismatch");  	}  }  
Magic Number,Couchbase.Lite.Internal,ChunkedChanges,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\ChunkedChanges.cs,ReadHeader,The following statement contains a magic number: crcval = (crcval << 8) | tempByte;  
Magic Number,Couchbase.Lite.Revisions,RevisionID,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Revisions\RevisionID.cs,CBLCollateRevIDs,The following statement contains a magic number: if ((dash1 == 1 && dash2 == 1) || dash1 > 8 || dash2 > 8 || dash1 == -1 || dash2 == -1) {  	// Single digit generation #s' or improper rev IDs; just compare as plain text  	return DefaultCollate (revID1' revID2);  }  
Magic Number,Couchbase.Lite.Revisions,RevisionID,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Revisions\RevisionID.cs,CBLCollateRevIDs,The following statement contains a magic number: if ((dash1 == 1 && dash2 == 1) || dash1 > 8 || dash2 > 8 || dash1 == -1 || dash2 == -1) {  	// Single digit generation #s' or improper rev IDs; just compare as plain text  	return DefaultCollate (revID1' revID2);  }  
Magic Number,Couchbase.Lite.Revisions,RevisionID,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Revisions\RevisionID.cs,ParseDigits,The following statement contains a magic number: for (int i = 0; i < position; i++) {  	var current = revID [i];  	if (current < (byte)'0' || current > (byte)'9') {  		return 0;  	}  	result = 10 * result + (current - '0');  }  
Magic Number,Couchbase.Lite.Revisions,RevisionID,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Revisions\RevisionID.cs,ParseDigits,The following statement contains a magic number: result = 10 * result + (current - '0');  
Magic Number,Couchbase.Lite.Util,Hasher,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\Hasher.cs,Hash,The following statement contains a magic number: unchecked {  	int hash = 13;  	foreach (var obj in items) {  		hash = (hash * 7) + obj.GetHashCode ();  	}  	return hash;  }  
Magic Number,Couchbase.Lite.Util,Hasher,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\Hasher.cs,Hash,The following statement contains a magic number: unchecked {  	int hash = 13;  	foreach (var obj in items) {  		hash = (hash * 7) + obj.GetHashCode ();  	}  	return hash;  }  
Magic Number,Couchbase.Lite.Util,Hasher,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\Hasher.cs,Hash,The following statement contains a magic number: foreach (var obj in items) {  	hash = (hash * 7) + obj.GetHashCode ();  }  
Magic Number,Couchbase.Lite.Util,Hasher,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\Hasher.cs,Hash,The following statement contains a magic number: hash = (hash * 7) + obj.GetHashCode ();  
Magic Number,Couchbase.Lite.Util,Hasher,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\Hasher.cs,HashList,The following statement contains a magic number: unchecked {  	int hash = 13;  	foreach (var obj in items) {  		hash = (hash * 7) + obj.GetHashCode ();  	}  	return hash;  }  
Magic Number,Couchbase.Lite.Util,Hasher,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\Hasher.cs,HashList,The following statement contains a magic number: unchecked {  	int hash = 13;  	foreach (var obj in items) {  		hash = (hash * 7) + obj.GetHashCode ();  	}  	return hash;  }  
Magic Number,Couchbase.Lite.Util,Hasher,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\Hasher.cs,HashList,The following statement contains a magic number: foreach (var obj in items) {  	hash = (hash * 7) + obj.GetHashCode ();  }  
Magic Number,Couchbase.Lite.Util,Hasher,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\Hasher.cs,HashList,The following statement contains a magic number: hash = (hash * 7) + obj.GetHashCode ();  
Magic Number,Couchbase.Lite.Util,LruCache,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\LruCache.cs,LruCache,The following statement contains a magic number: _gcTimer = new Timer (o => {  	var self = (LruCache<TKey' TValue>)o;  	lock (self._locker) {  		TValue item;  		foreach (var k in self._allValues.Where (x => !x.Value.TryGetTarget (out item)).ToList ()) {  			self._allValues.Remove (k.Key);  		}  	}  }' this' TimeSpan.FromSeconds (60)' TimeSpan.FromSeconds (60));  
Magic Number,Couchbase.Lite.Util,LruCache,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\LruCache.cs,LruCache,The following statement contains a magic number: _gcTimer = new Timer (o => {  	var self = (LruCache<TKey' TValue>)o;  	lock (self._locker) {  		TValue item;  		foreach (var k in self._allValues.Where (x => !x.Value.TryGetTarget (out item)).ToList ()) {  			self._allValues.Remove (k.Key);  		}  	}  }' this' TimeSpan.FromSeconds (60)' TimeSpan.FromSeconds (60));  
Magic Number,Couchbase.Lite.Util,LruCache,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\LruCache.cs,ToString,The following statement contains a magic number: lock (_locker) {  	int accesses = HitCount + MissCount;  	int hitPercent = accesses != 0 ? (int)Math.Round ((100 * (HitCount / (double)accesses))) : 0;  	Log.To.NoDomain.D (Tag' "Exiting lock via return");  	return string.Format ("LruCache[maxSize={0}'hits={1}'misses={2}'hitRate={3:P}%]"' MaxSize' HitCount' MissCount' hitPercent);  }  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,Encode,The following statement contains a magic number: while (current < oldLength) {  	// Start in "copying" mode where we copy over allowed chars.  	// Find the next character which needs to be encoded.  	int nextToEncode = current;  	while (nextToEncode < oldLength && IsAllowed (s [nextToEncode]' allow)) {  		nextToEncode++;  	}  	// If there's nothing more to encode...  	if (nextToEncode == oldLength) {  		if (current == 0) {  			// We didn't need to encode anything!  			return s;  		} else {  			// Presumably' we've already done some encoding.  			encoded.Append (s' current' oldLength - current);  			return encoded.ToString ();  		}  	}  	if (encoded == null) {  		encoded = new StringBuilder ();  	}  	if (nextToEncode > current) {  		// Append allowed characters leading up to this point.  		encoded.Append (s' current' nextToEncode - current);  	}  	// assert nextToEncode == current  	// Switch to "encoding" mode.  	// Find the next allowed character.  	current = nextToEncode;  	int nextAllowed = current + 1;  	while (nextAllowed < oldLength && !IsAllowed (s [nextAllowed]' allow)) {  		nextAllowed++;  	}  	// Convert the substring to bytes and encode the bytes as  	// '%'-escaped octets.  	string toEncode = s.Substring (current' nextAllowed - current);  	byte[] bytes = Encoding.UTF8.GetBytes (toEncode);  	int bytesLength = bytes.Length;  	for (int i = 0; i < bytesLength; i++) {  		encoded.Append ('%');  		encoded.Append (HexDigits [(bytes [i] & unchecked((int)(0xf0))) >> 4]);  		encoded.Append (HexDigits [bytes [i] & unchecked((int)(0xf))]);  	}  	current = nextAllowed;  }  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,Encode,The following statement contains a magic number: for (int i = 0; i < bytesLength; i++) {  	encoded.Append ('%');  	encoded.Append (HexDigits [(bytes [i] & unchecked((int)(0xf0))) >> 4]);  	encoded.Append (HexDigits [bytes [i] & unchecked((int)(0xf))]);  }  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,Encode,The following statement contains a magic number: encoded.Append (HexDigits [(bytes [i] & unchecked((int)(0xf0))) >> 4]);  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,Decode,The following statement contains a magic number: using (MemoryStream outStream = RecyclableMemoryStreamManager.SharedInstance.GetStream ()) {  	for (int i = 0; i < s.Length;) {  		char c = s [i];  		if (c == '%') {  			do {  				if (i + 2 >= s.Length) {  					throw new ArgumentException (String.Format ("Incomplete % sequence at: {0}"' i));  				}  				int d1 = HexToInt (s [i + 1]);  				int d2 = HexToInt (s [i + 2]);  				if (d1 == -1 || d2 == -1) {  					throw new ArgumentException ("Invalid % sequence " + s.Substring (i' 3) + " at " + i);  				}  				outStream.WriteByte (unchecked((byte)((d1 << 4) + d2)));  				i += 3;  			} while (i < s.Length && s [i] == '%');  			result.Append (charset.GetString (outStream.ToArray ()));  			outStream.Reset ();  		} else {  			if (convertPlus && c == '+') {  				c = ' ';  			}  			result.Append (c);  			i++;  		}  	}  }  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,Decode,The following statement contains a magic number: using (MemoryStream outStream = RecyclableMemoryStreamManager.SharedInstance.GetStream ()) {  	for (int i = 0; i < s.Length;) {  		char c = s [i];  		if (c == '%') {  			do {  				if (i + 2 >= s.Length) {  					throw new ArgumentException (String.Format ("Incomplete % sequence at: {0}"' i));  				}  				int d1 = HexToInt (s [i + 1]);  				int d2 = HexToInt (s [i + 2]);  				if (d1 == -1 || d2 == -1) {  					throw new ArgumentException ("Invalid % sequence " + s.Substring (i' 3) + " at " + i);  				}  				outStream.WriteByte (unchecked((byte)((d1 << 4) + d2)));  				i += 3;  			} while (i < s.Length && s [i] == '%');  			result.Append (charset.GetString (outStream.ToArray ()));  			outStream.Reset ();  		} else {  			if (convertPlus && c == '+') {  				c = ' ';  			}  			result.Append (c);  			i++;  		}  	}  }  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,Decode,The following statement contains a magic number: using (MemoryStream outStream = RecyclableMemoryStreamManager.SharedInstance.GetStream ()) {  	for (int i = 0; i < s.Length;) {  		char c = s [i];  		if (c == '%') {  			do {  				if (i + 2 >= s.Length) {  					throw new ArgumentException (String.Format ("Incomplete % sequence at: {0}"' i));  				}  				int d1 = HexToInt (s [i + 1]);  				int d2 = HexToInt (s [i + 2]);  				if (d1 == -1 || d2 == -1) {  					throw new ArgumentException ("Invalid % sequence " + s.Substring (i' 3) + " at " + i);  				}  				outStream.WriteByte (unchecked((byte)((d1 << 4) + d2)));  				i += 3;  			} while (i < s.Length && s [i] == '%');  			result.Append (charset.GetString (outStream.ToArray ()));  			outStream.Reset ();  		} else {  			if (convertPlus && c == '+') {  				c = ' ';  			}  			result.Append (c);  			i++;  		}  	}  }  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,Decode,The following statement contains a magic number: using (MemoryStream outStream = RecyclableMemoryStreamManager.SharedInstance.GetStream ()) {  	for (int i = 0; i < s.Length;) {  		char c = s [i];  		if (c == '%') {  			do {  				if (i + 2 >= s.Length) {  					throw new ArgumentException (String.Format ("Incomplete % sequence at: {0}"' i));  				}  				int d1 = HexToInt (s [i + 1]);  				int d2 = HexToInt (s [i + 2]);  				if (d1 == -1 || d2 == -1) {  					throw new ArgumentException ("Invalid % sequence " + s.Substring (i' 3) + " at " + i);  				}  				outStream.WriteByte (unchecked((byte)((d1 << 4) + d2)));  				i += 3;  			} while (i < s.Length && s [i] == '%');  			result.Append (charset.GetString (outStream.ToArray ()));  			outStream.Reset ();  		} else {  			if (convertPlus && c == '+') {  				c = ' ';  			}  			result.Append (c);  			i++;  		}  	}  }  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,Decode,The following statement contains a magic number: using (MemoryStream outStream = RecyclableMemoryStreamManager.SharedInstance.GetStream ()) {  	for (int i = 0; i < s.Length;) {  		char c = s [i];  		if (c == '%') {  			do {  				if (i + 2 >= s.Length) {  					throw new ArgumentException (String.Format ("Incomplete % sequence at: {0}"' i));  				}  				int d1 = HexToInt (s [i + 1]);  				int d2 = HexToInt (s [i + 2]);  				if (d1 == -1 || d2 == -1) {  					throw new ArgumentException ("Invalid % sequence " + s.Substring (i' 3) + " at " + i);  				}  				outStream.WriteByte (unchecked((byte)((d1 << 4) + d2)));  				i += 3;  			} while (i < s.Length && s [i] == '%');  			result.Append (charset.GetString (outStream.ToArray ()));  			outStream.Reset ();  		} else {  			if (convertPlus && c == '+') {  				c = ' ';  			}  			result.Append (c);  			i++;  		}  	}  }  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,Decode,The following statement contains a magic number: for (int i = 0; i < s.Length;) {  	char c = s [i];  	if (c == '%') {  		do {  			if (i + 2 >= s.Length) {  				throw new ArgumentException (String.Format ("Incomplete % sequence at: {0}"' i));  			}  			int d1 = HexToInt (s [i + 1]);  			int d2 = HexToInt (s [i + 2]);  			if (d1 == -1 || d2 == -1) {  				throw new ArgumentException ("Invalid % sequence " + s.Substring (i' 3) + " at " + i);  			}  			outStream.WriteByte (unchecked((byte)((d1 << 4) + d2)));  			i += 3;  		} while (i < s.Length && s [i] == '%');  		result.Append (charset.GetString (outStream.ToArray ()));  		outStream.Reset ();  	} else {  		if (convertPlus && c == '+') {  			c = ' ';  		}  		result.Append (c);  		i++;  	}  }  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,Decode,The following statement contains a magic number: for (int i = 0; i < s.Length;) {  	char c = s [i];  	if (c == '%') {  		do {  			if (i + 2 >= s.Length) {  				throw new ArgumentException (String.Format ("Incomplete % sequence at: {0}"' i));  			}  			int d1 = HexToInt (s [i + 1]);  			int d2 = HexToInt (s [i + 2]);  			if (d1 == -1 || d2 == -1) {  				throw new ArgumentException ("Invalid % sequence " + s.Substring (i' 3) + " at " + i);  			}  			outStream.WriteByte (unchecked((byte)((d1 << 4) + d2)));  			i += 3;  		} while (i < s.Length && s [i] == '%');  		result.Append (charset.GetString (outStream.ToArray ()));  		outStream.Reset ();  	} else {  		if (convertPlus && c == '+') {  			c = ' ';  		}  		result.Append (c);  		i++;  	}  }  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,Decode,The following statement contains a magic number: for (int i = 0; i < s.Length;) {  	char c = s [i];  	if (c == '%') {  		do {  			if (i + 2 >= s.Length) {  				throw new ArgumentException (String.Format ("Incomplete % sequence at: {0}"' i));  			}  			int d1 = HexToInt (s [i + 1]);  			int d2 = HexToInt (s [i + 2]);  			if (d1 == -1 || d2 == -1) {  				throw new ArgumentException ("Invalid % sequence " + s.Substring (i' 3) + " at " + i);  			}  			outStream.WriteByte (unchecked((byte)((d1 << 4) + d2)));  			i += 3;  		} while (i < s.Length && s [i] == '%');  		result.Append (charset.GetString (outStream.ToArray ()));  		outStream.Reset ();  	} else {  		if (convertPlus && c == '+') {  			c = ' ';  		}  		result.Append (c);  		i++;  	}  }  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,Decode,The following statement contains a magic number: for (int i = 0; i < s.Length;) {  	char c = s [i];  	if (c == '%') {  		do {  			if (i + 2 >= s.Length) {  				throw new ArgumentException (String.Format ("Incomplete % sequence at: {0}"' i));  			}  			int d1 = HexToInt (s [i + 1]);  			int d2 = HexToInt (s [i + 2]);  			if (d1 == -1 || d2 == -1) {  				throw new ArgumentException ("Invalid % sequence " + s.Substring (i' 3) + " at " + i);  			}  			outStream.WriteByte (unchecked((byte)((d1 << 4) + d2)));  			i += 3;  		} while (i < s.Length && s [i] == '%');  		result.Append (charset.GetString (outStream.ToArray ()));  		outStream.Reset ();  	} else {  		if (convertPlus && c == '+') {  			c = ' ';  		}  		result.Append (c);  		i++;  	}  }  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,Decode,The following statement contains a magic number: for (int i = 0; i < s.Length;) {  	char c = s [i];  	if (c == '%') {  		do {  			if (i + 2 >= s.Length) {  				throw new ArgumentException (String.Format ("Incomplete % sequence at: {0}"' i));  			}  			int d1 = HexToInt (s [i + 1]);  			int d2 = HexToInt (s [i + 2]);  			if (d1 == -1 || d2 == -1) {  				throw new ArgumentException ("Invalid % sequence " + s.Substring (i' 3) + " at " + i);  			}  			outStream.WriteByte (unchecked((byte)((d1 << 4) + d2)));  			i += 3;  		} while (i < s.Length && s [i] == '%');  		result.Append (charset.GetString (outStream.ToArray ()));  		outStream.Reset ();  	} else {  		if (convertPlus && c == '+') {  			c = ' ';  		}  		result.Append (c);  		i++;  	}  }  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,Decode,The following statement contains a magic number: if (c == '%') {  	do {  		if (i + 2 >= s.Length) {  			throw new ArgumentException (String.Format ("Incomplete % sequence at: {0}"' i));  		}  		int d1 = HexToInt (s [i + 1]);  		int d2 = HexToInt (s [i + 2]);  		if (d1 == -1 || d2 == -1) {  			throw new ArgumentException ("Invalid % sequence " + s.Substring (i' 3) + " at " + i);  		}  		outStream.WriteByte (unchecked((byte)((d1 << 4) + d2)));  		i += 3;  	} while (i < s.Length && s [i] == '%');  	result.Append (charset.GetString (outStream.ToArray ()));  	outStream.Reset ();  } else {  	if (convertPlus && c == '+') {  		c = ' ';  	}  	result.Append (c);  	i++;  }  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,Decode,The following statement contains a magic number: if (c == '%') {  	do {  		if (i + 2 >= s.Length) {  			throw new ArgumentException (String.Format ("Incomplete % sequence at: {0}"' i));  		}  		int d1 = HexToInt (s [i + 1]);  		int d2 = HexToInt (s [i + 2]);  		if (d1 == -1 || d2 == -1) {  			throw new ArgumentException ("Invalid % sequence " + s.Substring (i' 3) + " at " + i);  		}  		outStream.WriteByte (unchecked((byte)((d1 << 4) + d2)));  		i += 3;  	} while (i < s.Length && s [i] == '%');  	result.Append (charset.GetString (outStream.ToArray ()));  	outStream.Reset ();  } else {  	if (convertPlus && c == '+') {  		c = ' ';  	}  	result.Append (c);  	i++;  }  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,Decode,The following statement contains a magic number: if (c == '%') {  	do {  		if (i + 2 >= s.Length) {  			throw new ArgumentException (String.Format ("Incomplete % sequence at: {0}"' i));  		}  		int d1 = HexToInt (s [i + 1]);  		int d2 = HexToInt (s [i + 2]);  		if (d1 == -1 || d2 == -1) {  			throw new ArgumentException ("Invalid % sequence " + s.Substring (i' 3) + " at " + i);  		}  		outStream.WriteByte (unchecked((byte)((d1 << 4) + d2)));  		i += 3;  	} while (i < s.Length && s [i] == '%');  	result.Append (charset.GetString (outStream.ToArray ()));  	outStream.Reset ();  } else {  	if (convertPlus && c == '+') {  		c = ' ';  	}  	result.Append (c);  	i++;  }  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,Decode,The following statement contains a magic number: if (c == '%') {  	do {  		if (i + 2 >= s.Length) {  			throw new ArgumentException (String.Format ("Incomplete % sequence at: {0}"' i));  		}  		int d1 = HexToInt (s [i + 1]);  		int d2 = HexToInt (s [i + 2]);  		if (d1 == -1 || d2 == -1) {  			throw new ArgumentException ("Invalid % sequence " + s.Substring (i' 3) + " at " + i);  		}  		outStream.WriteByte (unchecked((byte)((d1 << 4) + d2)));  		i += 3;  	} while (i < s.Length && s [i] == '%');  	result.Append (charset.GetString (outStream.ToArray ()));  	outStream.Reset ();  } else {  	if (convertPlus && c == '+') {  		c = ' ';  	}  	result.Append (c);  	i++;  }  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,Decode,The following statement contains a magic number: if (c == '%') {  	do {  		if (i + 2 >= s.Length) {  			throw new ArgumentException (String.Format ("Incomplete % sequence at: {0}"' i));  		}  		int d1 = HexToInt (s [i + 1]);  		int d2 = HexToInt (s [i + 2]);  		if (d1 == -1 || d2 == -1) {  			throw new ArgumentException ("Invalid % sequence " + s.Substring (i' 3) + " at " + i);  		}  		outStream.WriteByte (unchecked((byte)((d1 << 4) + d2)));  		i += 3;  	} while (i < s.Length && s [i] == '%');  	result.Append (charset.GetString (outStream.ToArray ()));  	outStream.Reset ();  } else {  	if (convertPlus && c == '+') {  		c = ' ';  	}  	result.Append (c);  	i++;  }  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,Decode,The following statement contains a magic number: do {  	if (i + 2 >= s.Length) {  		throw new ArgumentException (String.Format ("Incomplete % sequence at: {0}"' i));  	}  	int d1 = HexToInt (s [i + 1]);  	int d2 = HexToInt (s [i + 2]);  	if (d1 == -1 || d2 == -1) {  		throw new ArgumentException ("Invalid % sequence " + s.Substring (i' 3) + " at " + i);  	}  	outStream.WriteByte (unchecked((byte)((d1 << 4) + d2)));  	i += 3;  } while (i < s.Length && s [i] == '%');  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,Decode,The following statement contains a magic number: do {  	if (i + 2 >= s.Length) {  		throw new ArgumentException (String.Format ("Incomplete % sequence at: {0}"' i));  	}  	int d1 = HexToInt (s [i + 1]);  	int d2 = HexToInt (s [i + 2]);  	if (d1 == -1 || d2 == -1) {  		throw new ArgumentException ("Invalid % sequence " + s.Substring (i' 3) + " at " + i);  	}  	outStream.WriteByte (unchecked((byte)((d1 << 4) + d2)));  	i += 3;  } while (i < s.Length && s [i] == '%');  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,Decode,The following statement contains a magic number: do {  	if (i + 2 >= s.Length) {  		throw new ArgumentException (String.Format ("Incomplete % sequence at: {0}"' i));  	}  	int d1 = HexToInt (s [i + 1]);  	int d2 = HexToInt (s [i + 2]);  	if (d1 == -1 || d2 == -1) {  		throw new ArgumentException ("Invalid % sequence " + s.Substring (i' 3) + " at " + i);  	}  	outStream.WriteByte (unchecked((byte)((d1 << 4) + d2)));  	i += 3;  } while (i < s.Length && s [i] == '%');  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,Decode,The following statement contains a magic number: do {  	if (i + 2 >= s.Length) {  		throw new ArgumentException (String.Format ("Incomplete % sequence at: {0}"' i));  	}  	int d1 = HexToInt (s [i + 1]);  	int d2 = HexToInt (s [i + 2]);  	if (d1 == -1 || d2 == -1) {  		throw new ArgumentException ("Invalid % sequence " + s.Substring (i' 3) + " at " + i);  	}  	outStream.WriteByte (unchecked((byte)((d1 << 4) + d2)));  	i += 3;  } while (i < s.Length && s [i] == '%');  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,Decode,The following statement contains a magic number: do {  	if (i + 2 >= s.Length) {  		throw new ArgumentException (String.Format ("Incomplete % sequence at: {0}"' i));  	}  	int d1 = HexToInt (s [i + 1]);  	int d2 = HexToInt (s [i + 2]);  	if (d1 == -1 || d2 == -1) {  		throw new ArgumentException ("Invalid % sequence " + s.Substring (i' 3) + " at " + i);  	}  	outStream.WriteByte (unchecked((byte)((d1 << 4) + d2)));  	i += 3;  } while (i < s.Length && s [i] == '%');  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,Decode,The following statement contains a magic number: if (i + 2 >= s.Length) {  	throw new ArgumentException (String.Format ("Incomplete % sequence at: {0}"' i));  }  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,Decode,The following statement contains a magic number: if (d1 == -1 || d2 == -1) {  	throw new ArgumentException ("Invalid % sequence " + s.Substring (i' 3) + " at " + i);  }  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,Decode,The following statement contains a magic number: throw new ArgumentException ("Invalid % sequence " + s.Substring (i' 3) + " at " + i);  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,Decode,The following statement contains a magic number: outStream.WriteByte (unchecked((byte)((d1 << 4) + d2)));  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,Decode,The following statement contains a magic number: i += 3;  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,HexToInt,The following statement contains a magic number: if ('0' <= c && c <= '9') {  	return c - '0';  } else {  	if ('a' <= c && c <= 'f') {  		return 10 + (c - 'a');  	} else {  		if ('A' <= c && c <= 'F') {  			return 10 + (c - 'A');  		} else {  			return -1;  		}  	}  }  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,HexToInt,The following statement contains a magic number: if ('0' <= c && c <= '9') {  	return c - '0';  } else {  	if ('a' <= c && c <= 'f') {  		return 10 + (c - 'a');  	} else {  		if ('A' <= c && c <= 'F') {  			return 10 + (c - 'A');  		} else {  			return -1;  		}  	}  }  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,HexToInt,The following statement contains a magic number: if ('a' <= c && c <= 'f') {  	return 10 + (c - 'a');  } else {  	if ('A' <= c && c <= 'F') {  		return 10 + (c - 'A');  	} else {  		return -1;  	}  }  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,HexToInt,The following statement contains a magic number: if ('a' <= c && c <= 'f') {  	return 10 + (c - 'a');  } else {  	if ('A' <= c && c <= 'F') {  		return 10 + (c - 'A');  	} else {  		return -1;  	}  }  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,HexToInt,The following statement contains a magic number: return 10 + (c - 'a');  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,HexToInt,The following statement contains a magic number: if ('A' <= c && c <= 'F') {  	return 10 + (c - 'A');  } else {  	return -1;  }  
Magic Number,Couchbase.Lite.Util,URIUtils,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\URIUtils.cs,HexToInt,The following statement contains a magic number: return 10 + (c - 'A');  
Magic Number,Couchbase.Lite.Util,CookieStore,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\CookieStore.cs,Delete,The following statement contains a magic number: lock (locker) {  	var delete = false;  	var cookies = GetCookies (uri);  	foreach (Cookie cookie in cookies) {  		if (name.Equals (cookie.Name)) {  			cookie.Discard = true;  			cookie.Expired = true;  			cookie.Expires = DateTime.Now.Subtract (TimeSpan.FromDays (2));  			if (!delete) {  				delete = true;  			}  		}  	}  	if (delete) {  		// Trigger container cookie list refreshment  		GetCookies (uri);  		Save ();  	}  }  
Magic Number,Couchbase.Lite.Util,CookieStore,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\CookieStore.cs,Delete,The following statement contains a magic number: foreach (Cookie cookie in cookies) {  	if (name.Equals (cookie.Name)) {  		cookie.Discard = true;  		cookie.Expired = true;  		cookie.Expires = DateTime.Now.Subtract (TimeSpan.FromDays (2));  		if (!delete) {  			delete = true;  		}  	}  }  
Magic Number,Couchbase.Lite.Util,CookieStore,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\CookieStore.cs,Delete,The following statement contains a magic number: if (name.Equals (cookie.Name)) {  	cookie.Discard = true;  	cookie.Expired = true;  	cookie.Expires = DateTime.Now.Subtract (TimeSpan.FromDays (2));  	if (!delete) {  		delete = true;  	}  }  
Magic Number,Couchbase.Lite.Util,CookieStore,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\CookieStore.cs,Delete,The following statement contains a magic number: cookie.Expires = DateTime.Now.Subtract (TimeSpan.FromDays (2));  
Magic Number,Couchbase.Lite.Util,CookieStore,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\CookieStore.cs,Delete,The following statement contains a magic number: lock (locker) {  	var delete = false;  	var cookies = GetCookies (uri);  	foreach (Cookie cookie in cookies) {  		cookie.Discard = true;  		cookie.Expired = true;  		cookie.Expires = DateTime.Now.Subtract (TimeSpan.FromDays (2));  		if (!delete) {  			delete = true;  		}  	}  	if (delete) {  		_cookieUriReference.Remove (uri);  		// Trigger container cookie list refreshment  		GetCookies (uri);  		Save ();  	}  }  
Magic Number,Couchbase.Lite.Util,CookieStore,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\CookieStore.cs,Delete,The following statement contains a magic number: foreach (Cookie cookie in cookies) {  	cookie.Discard = true;  	cookie.Expired = true;  	cookie.Expires = DateTime.Now.Subtract (TimeSpan.FromDays (2));  	if (!delete) {  		delete = true;  	}  }  
Magic Number,Couchbase.Lite.Util,CookieStore,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\CookieStore.cs,Delete,The following statement contains a magic number: cookie.Expires = DateTime.Now.Subtract (TimeSpan.FromDays (2));  
Magic Number,Couchbase.Lite.Util,ExponentialBackoffStrategy,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\ExponentialBackoffStrategy.cs,Reset,The following statement contains a magic number: _currentDelay = TimeSpan.FromSeconds (2);  
Magic Number,Couchbase.Lite.Util,ExponentialBackoffStrategy,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\ExponentialBackoffStrategy.cs,ToString,The following statement contains a magic number: return String.Format ("ExponentialBackoffStrategy[StartTime={0} MaxRetries={1}]"' TimeSpan.FromSeconds (4)' _maxTries);  
Magic Number,Couchbase.Lite.Util,Platform,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\Platform.cs,Platform,The following statement contains a magic number: if (isWindows) {  	Name = GetWindowsName ();  	Architecture = GetWindowsArchitecture ();  } else {  	var buf = new utsname ();  	if (uname (ref buf) != 0) {  		Name = "Unknown";  		Architecture = "Unknown";  	}  	Architecture = Encoding.ASCII.GetString (buf.machine.TakeWhile (x => x != 0).ToArray ());  	var systemName = Encoding.ASCII.GetString (buf.sysname.TakeWhile (x => x != 0).ToArray ());  	var version = Encoding.ASCII.GetString (buf.release.TakeWhile (x => x != 0).ToArray ());  	if (systemName == "Darwin") {  		systemName = "OS X";  		var darwinVesion = Int32.Parse (version.Split ('.').First ());  		version = String.Format ("10.{0}"' darwinVesion - 4);  	}  	Name = String.Format ("{0} {1}"' systemName' version);  }  
Magic Number,Couchbase.Lite.Util,Platform,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\Platform.cs,Platform,The following statement contains a magic number: if (systemName == "Darwin") {  	systemName = "OS X";  	var darwinVesion = Int32.Parse (version.Split ('.').First ());  	version = String.Format ("10.{0}"' darwinVesion - 4);  }  
Magic Number,Couchbase.Lite.Util,Platform,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\Platform.cs,Platform,The following statement contains a magic number: version = String.Format ("10.{0}"' darwinVesion - 4);  
Magic Number,Couchbase.Lite.Util,MessageDigest,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\MessageDigest.cs,GetDigestLength,The following statement contains a magic number: return (_hash.HashSize / 8);  
Magic Number,Couchbase.Lite.Util,TimeSeries,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\TimeSeries.cs,AddEvent,The following statement contains a magic number: _scheduler.StartNew (() => {  	props ["t"] = (ulong)time.TimeSinceEpoch ().TotalMilliseconds;  	var json = default(byte[]);  	try {  		json = Manager.GetObjectMapper ().WriteValueAsBytes (props).ToArray ();  	} catch (Exception e) {  		Log.To.NoDomain.W (Tag' "Got exception trying to serialize json' aborting save..."' e);  		return;  	}  	var pos = _out.Position;  	if (pos + json.Length + 20 > MaxDocSize || _eventsInFile >= MaxDocEventCount) {  		TransferToDB ();  		pos = 0;  	}  	try {  		if (pos == 0) {  			_out.WriteByte ((byte)'[');  		} else {  			_out.WriteByte ((byte)''');  			_out.WriteByte ((byte)'\n');  		}  		_out.Write (json' 0' json.Length);  		_out.Flush ();  	} catch (Exception e) {  		Log.To.NoDomain.W (Tag' "Error while writing event to file' recording...");  		_error = e;  	}  	++_eventsInFile;  });  
Magic Number,Couchbase.Lite.Util,TimeSeries,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\TimeSeries.cs,AddEvent,The following statement contains a magic number: if (pos + json.Length + 20 > MaxDocSize || _eventsInFile >= MaxDocEventCount) {  	TransferToDB ();  	pos = 0;  }  
Magic Number,Couchbase.Lite.Support,MultipartDocumentReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartDocumentReader.cs,RegisterAttachments,The following statement contains a magic number: foreach (var attmt in attachments) {  	var attachmentName = attmt.Key;  	var attachment = attmt.Value.AsDictionary<string' object> ();  	long length = attachment.GetCast<long> ("encoded_length"' -1L);  	if (length == -1) {  		length = attachment.GetCast<long> ("length"' -1L);  	}  	if (length == -1) {  		throw Misc.CreateExceptionAndLog (Log.To.Sync' StatusCode.AttachmentError' TAG);  	}  	if (attachment.GetCast<bool> ("follows")) {  		// Check that each attachment in the JSON corresponds to an attachment MIME body.  		// Look up the attachment by either its MIME Content-Disposition header or digest  		var digest = attachment.GetCast<string> ("digest");  		var writer = attachmentsByName.Get (attachmentName);  		if (writer != null) {  			// Identified the MIME body by the filename in its Disposition header:  			var actualDigest = writer.SHA1DigestString ();  			if (digest != null && !digest.Equals (actualDigest) && !digest.Equals (writer.MD5DigestString ())) {  				throw Misc.CreateExceptionAndLog (Log.To.Sync' StatusCode.AttachmentError' TAG' "Attachment '{0}' has incorrect digest ({1}; should be either {2} or {3})"' new SecureLogString (attachmentName' LogMessageSensitivity.PotentiallyInsecure)' digest' actualDigest' writer.MD5DigestString ());  			}  			attachment ["digest"] = actualDigest;  		} else if (digest != null) {  			writer = attachmentsByDigest.Get (digest);  			if (writer == null) {  				throw Misc.CreateExceptionAndLog (Log.To.Sync' StatusCode.AttachmentError' TAG' "Attachment '{0}' does not appear in MIME body "' new SecureLogString (attachmentName' LogMessageSensitivity.PotentiallyInsecure));  			}  		} else if (attachments.Count == 1 && attachmentsByDigest.Count == 1) {  			// Else there's only one attachment' so just assume it matches & use it:  			writer = attachmentsByDigest.Values.First ();  			attachment ["digest"] = writer.SHA1DigestString ();  		} else {  			// No digest metatata' no filename in MIME body; give up:  			throw Misc.CreateExceptionAndLog (Log.To.Sync' StatusCode.AttachmentError' TAG' "Attachment '{0}' has no digest metadata; cannot identify MIME body"' new SecureLogString (attachmentName' LogMessageSensitivity.PotentiallyInsecure));  		}  		// Check that the length matches:  		if (writer.GetLength () != length) {  			throw Misc.CreateExceptionAndLog (Log.To.Sync' StatusCode.AttachmentError' TAG' "Attachment '{0}' has incorrect length field {1} (should be {2})"' new SecureLogString (attachmentName' LogMessageSensitivity.PotentiallyInsecure)' length' writer.GetLength ());  		}  		++numAttachmentsInDoc;  	} else if (attachment.Get ("data") != null && length > 1000) {  		// This isn't harmful but it's quite inefficient of the server  		var msg = String.Format ("Attachment '{0}' sent inline (len={1}).  Large attachments " + "should be sent in MIME parts for reduced memory overhead."' attachmentName' length);  		Log.To.Sync.W (TAG' msg);  	}  	nuAttachments [attachmentName] = attachment;  }  
Magic Number,Couchbase.Lite.Support,MultipartDocumentReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartDocumentReader.cs,RegisterAttachments,The following statement contains a magic number: if (attachment.GetCast<bool> ("follows")) {  	// Check that each attachment in the JSON corresponds to an attachment MIME body.  	// Look up the attachment by either its MIME Content-Disposition header or digest  	var digest = attachment.GetCast<string> ("digest");  	var writer = attachmentsByName.Get (attachmentName);  	if (writer != null) {  		// Identified the MIME body by the filename in its Disposition header:  		var actualDigest = writer.SHA1DigestString ();  		if (digest != null && !digest.Equals (actualDigest) && !digest.Equals (writer.MD5DigestString ())) {  			throw Misc.CreateExceptionAndLog (Log.To.Sync' StatusCode.AttachmentError' TAG' "Attachment '{0}' has incorrect digest ({1}; should be either {2} or {3})"' new SecureLogString (attachmentName' LogMessageSensitivity.PotentiallyInsecure)' digest' actualDigest' writer.MD5DigestString ());  		}  		attachment ["digest"] = actualDigest;  	} else if (digest != null) {  		writer = attachmentsByDigest.Get (digest);  		if (writer == null) {  			throw Misc.CreateExceptionAndLog (Log.To.Sync' StatusCode.AttachmentError' TAG' "Attachment '{0}' does not appear in MIME body "' new SecureLogString (attachmentName' LogMessageSensitivity.PotentiallyInsecure));  		}  	} else if (attachments.Count == 1 && attachmentsByDigest.Count == 1) {  		// Else there's only one attachment' so just assume it matches & use it:  		writer = attachmentsByDigest.Values.First ();  		attachment ["digest"] = writer.SHA1DigestString ();  	} else {  		// No digest metatata' no filename in MIME body; give up:  		throw Misc.CreateExceptionAndLog (Log.To.Sync' StatusCode.AttachmentError' TAG' "Attachment '{0}' has no digest metadata; cannot identify MIME body"' new SecureLogString (attachmentName' LogMessageSensitivity.PotentiallyInsecure));  	}  	// Check that the length matches:  	if (writer.GetLength () != length) {  		throw Misc.CreateExceptionAndLog (Log.To.Sync' StatusCode.AttachmentError' TAG' "Attachment '{0}' has incorrect length field {1} (should be {2})"' new SecureLogString (attachmentName' LogMessageSensitivity.PotentiallyInsecure)' length' writer.GetLength ());  	}  	++numAttachmentsInDoc;  } else if (attachment.Get ("data") != null && length > 1000) {  	// This isn't harmful but it's quite inefficient of the server  	var msg = String.Format ("Attachment '{0}' sent inline (len={1}).  Large attachments " + "should be sent in MIME parts for reduced memory overhead."' attachmentName' length);  	Log.To.Sync.W (TAG' msg);  }  
Magic Number,Couchbase.Lite.Support,MultipartDocumentReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartDocumentReader.cs,RegisterAttachments,The following statement contains a magic number: if (attachment.Get ("data") != null && length > 1000) {  	// This isn't harmful but it's quite inefficient of the server  	var msg = String.Format ("Attachment '{0}' sent inline (len={1}).  Large attachments " + "should be sent in MIME parts for reduced memory overhead."' attachmentName' length);  	Log.To.Sync.W (TAG' msg);  }  
Magic Number,Couchbase.Lite.Support,MultipartDocumentReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartDocumentReader.cs,StartedPart,The following statement contains a magic number: if (document == null) {  	StartJsonBuffer (headers);  } else {  	Log.To.Sync.V (TAG' "{0} starting attachment #{1}..."' this' attachmentsByDigest.Count + 1);  	curAttachment = database.AttachmentWriter;  	if (curAttachment == null) {  		throw Misc.CreateExceptionAndLog (Log.To.Sync' StatusCode.AttachmentError' TAG' "Cannot create blob store writer for the attachment");  	}  	var name = default(string);  	var contentDisposition = headers.Get ("Content-Disposition");  	if (contentDisposition != null && contentDisposition.StartsWith ("attachment; filename=")) {  		// TODO: Parse this less simplistically. Right now it assumes it's in exactly the same  		// format generated by -[CBL_Pusher uploadMultipartRevision:]. CouchDB (as of 1.2) doesn't  		// output any headers at all on attachments so there's no compatibility issue yet.  		var contentDispositionUnquoted = Misc.UnquoteString (contentDisposition);  		name = contentDispositionUnquoted.Substring (21);  		if (name != null) {  			attachmentsByName [name] = curAttachment;  		}  	}  	var contentEncoding = headers.Get ("Content-Encoding");  	if (contentEncoding == "gzip") {  		if (name != null) {  			try {  				var attachEncoding = document.GetCast<IDictionary<string' object>> ("_attachments").GetCast<IDictionary<string' object>> (name).GetCast<string> ("encoding");  				if (attachEncoding != "gzip") {  					throw Misc.CreateExceptionAndLog (Log.To.Sync' StatusCode.UnsupportedType' TAG' "Attachment '{0}' MIME body is gzipped but attachment isn't"' new SecureLogString (name' LogMessageSensitivity.PotentiallyInsecure));  				}  			} catch (NullReferenceException) {  				throw Misc.CreateExceptionAndLog (Log.To.Sync' StatusCode.UnsupportedType' TAG' "NullReferenceException caught; _attachments was not present or encoding was " + "not present in _attachments");  			}  		}  	} else if (contentEncoding != null) {  		throw Misc.CreateExceptionAndLog (Log.To.Sync' StatusCode.UnsupportedType' TAG' "Received unsupported Content-Encoding '{0}'"' contentEncoding);  	}  }  
Magic Number,Couchbase.Lite.Support,MultipartDocumentReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartDocumentReader.cs,StartedPart,The following statement contains a magic number: if (contentDisposition != null && contentDisposition.StartsWith ("attachment; filename=")) {  	// TODO: Parse this less simplistically. Right now it assumes it's in exactly the same  	// format generated by -[CBL_Pusher uploadMultipartRevision:]. CouchDB (as of 1.2) doesn't  	// output any headers at all on attachments so there's no compatibility issue yet.  	var contentDispositionUnquoted = Misc.UnquoteString (contentDisposition);  	name = contentDispositionUnquoted.Substring (21);  	if (name != null) {  		attachmentsByName [name] = curAttachment;  	}  }  
Magic Number,Couchbase.Lite.Support,MultipartDocumentReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartDocumentReader.cs,StartedPart,The following statement contains a magic number: name = contentDispositionUnquoted.Substring (21);  
Magic Number,Couchbase.Lite.Support,MultipartDocumentReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartDocumentReader.cs,StartJsonBuffer,The following statement contains a magic number: jsonBuffer = new List<Byte> (1024);  
Magic Number,Couchbase.Lite.Support,MultipartReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartReader.cs,MultipartReader,The following statement contains a magic number: _buffer = new List<Byte> (1024);  
Magic Number,Couchbase.Lite.Support,MultipartReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartReader.cs,AppendData,The following statement contains a magic number: do {  	nextState = MultipartReader.MultipartReaderState.Uninitialized;  	var bufLen = _buffer.Count;  	switch (state) {  	case MultipartReader.MultipartReaderState.AtStart:  		// The entire message might start with a boundary without a leading CRLF.  		var boundaryWithoutLeadingCRLF = TrimmedBoundary.ToArray ();  		if (bufLen >= boundaryWithoutLeadingCRLF.Length) {  			// if (Arrays.equals(buffer.toByteArray()' boundaryWithoutLeadingCRLF)) {  			if (Memcmp (_buffer.ToArray ()' boundaryWithoutLeadingCRLF' boundaryWithoutLeadingCRLF.Length)) {  				DeleteUpThrough (boundaryWithoutLeadingCRLF.Length);  				nextState = MultipartReader.MultipartReaderState.InHeaders;  			} else {  				nextState = MultipartReader.MultipartReaderState.InPrologue;  			}  		}  		break;  	case MultipartReader.MultipartReaderState.InPrologue:  	case MultipartReader.MultipartReaderState.InBody:  		// Look for the next part boundary in the data we just added and the ending bytes of  		// the previous data (in case the boundary string is split across calls)  		if (bufLen < _boundary.Length) {  			break;  		}  		var start = Math.Max (0' bufLen - data.Length - _boundary.Length);  		var r = SearchFor (_boundary' start);  		if (r.Length > 0) {  			if (state == MultipartReader.MultipartReaderState.InBody) {  				var dataToAppend = new byte[r.Location];  				Array.Copy (_buffer.ToArray ()' 0' dataToAppend' 0' dataToAppend.Length);  				_readerDelegate.AppendToPart (dataToAppend);  				_readerDelegate.FinishedPart ();  			}  			DeleteUpThrough (r.Location + r.Length);  			nextState = MultipartReader.MultipartReaderState.InHeaders;  		} else {  			TrimBuffer ();  		}  		break;  	case MultipartReader.MultipartReaderState.InHeaders:  		// First check for the end-of-message string ("--" after separator):  		if (bufLen >= 2 && Memcmp (_buffer.ToArray ()' EOM_BYTES' 2)) {  			state = MultipartReader.MultipartReaderState.AtEnd;  			Close ();  			return;  		}  		// Otherwise look for two CRLFs that delimit the end of the headers:  		var headerEnd = SearchFor (CRLF_CRLF' 0);  		if (headerEnd.Length > 0) {  			var headersBytes = new Couchbase.Lite.Util.ArraySegment<Byte> (_buffer.ToArray ()' 0' headerEnd.Location);  			// <-- better?  			var headersString = Encoding.UTF8.GetString (headersBytes.ToArray ());  			ParseHeaders (headersString);  			DeleteUpThrough (headerEnd.Location + headerEnd.Length);  			_readerDelegate.StartedPart (_headers);  			nextState = MultipartReader.MultipartReaderState.InBody;  		}  		break;  	default:  		Log.To.Sync.E (Tag' "Unexpected data after end of MIME body' throwing...");  		throw new InvalidOperationException ("Unexpected data after end of MIME body");  	}  	if (nextState != MultipartReader.MultipartReaderState.Uninitialized) {  		state = nextState;  	}  } while (nextState != MultipartReader.MultipartReaderState.Uninitialized && _buffer.Count > 0);  
Magic Number,Couchbase.Lite.Support,MultipartReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartReader.cs,AppendData,The following statement contains a magic number: do {  	nextState = MultipartReader.MultipartReaderState.Uninitialized;  	var bufLen = _buffer.Count;  	switch (state) {  	case MultipartReader.MultipartReaderState.AtStart:  		// The entire message might start with a boundary without a leading CRLF.  		var boundaryWithoutLeadingCRLF = TrimmedBoundary.ToArray ();  		if (bufLen >= boundaryWithoutLeadingCRLF.Length) {  			// if (Arrays.equals(buffer.toByteArray()' boundaryWithoutLeadingCRLF)) {  			if (Memcmp (_buffer.ToArray ()' boundaryWithoutLeadingCRLF' boundaryWithoutLeadingCRLF.Length)) {  				DeleteUpThrough (boundaryWithoutLeadingCRLF.Length);  				nextState = MultipartReader.MultipartReaderState.InHeaders;  			} else {  				nextState = MultipartReader.MultipartReaderState.InPrologue;  			}  		}  		break;  	case MultipartReader.MultipartReaderState.InPrologue:  	case MultipartReader.MultipartReaderState.InBody:  		// Look for the next part boundary in the data we just added and the ending bytes of  		// the previous data (in case the boundary string is split across calls)  		if (bufLen < _boundary.Length) {  			break;  		}  		var start = Math.Max (0' bufLen - data.Length - _boundary.Length);  		var r = SearchFor (_boundary' start);  		if (r.Length > 0) {  			if (state == MultipartReader.MultipartReaderState.InBody) {  				var dataToAppend = new byte[r.Location];  				Array.Copy (_buffer.ToArray ()' 0' dataToAppend' 0' dataToAppend.Length);  				_readerDelegate.AppendToPart (dataToAppend);  				_readerDelegate.FinishedPart ();  			}  			DeleteUpThrough (r.Location + r.Length);  			nextState = MultipartReader.MultipartReaderState.InHeaders;  		} else {  			TrimBuffer ();  		}  		break;  	case MultipartReader.MultipartReaderState.InHeaders:  		// First check for the end-of-message string ("--" after separator):  		if (bufLen >= 2 && Memcmp (_buffer.ToArray ()' EOM_BYTES' 2)) {  			state = MultipartReader.MultipartReaderState.AtEnd;  			Close ();  			return;  		}  		// Otherwise look for two CRLFs that delimit the end of the headers:  		var headerEnd = SearchFor (CRLF_CRLF' 0);  		if (headerEnd.Length > 0) {  			var headersBytes = new Couchbase.Lite.Util.ArraySegment<Byte> (_buffer.ToArray ()' 0' headerEnd.Location);  			// <-- better?  			var headersString = Encoding.UTF8.GetString (headersBytes.ToArray ());  			ParseHeaders (headersString);  			DeleteUpThrough (headerEnd.Location + headerEnd.Length);  			_readerDelegate.StartedPart (_headers);  			nextState = MultipartReader.MultipartReaderState.InBody;  		}  		break;  	default:  		Log.To.Sync.E (Tag' "Unexpected data after end of MIME body' throwing...");  		throw new InvalidOperationException ("Unexpected data after end of MIME body");  	}  	if (nextState != MultipartReader.MultipartReaderState.Uninitialized) {  		state = nextState;  	}  } while (nextState != MultipartReader.MultipartReaderState.Uninitialized && _buffer.Count > 0);  
Magic Number,Couchbase.Lite.Support,MultipartReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartReader.cs,AppendData,The following statement contains a magic number: switch (state) {  case MultipartReader.MultipartReaderState.AtStart:  	// The entire message might start with a boundary without a leading CRLF.  	var boundaryWithoutLeadingCRLF = TrimmedBoundary.ToArray ();  	if (bufLen >= boundaryWithoutLeadingCRLF.Length) {  		// if (Arrays.equals(buffer.toByteArray()' boundaryWithoutLeadingCRLF)) {  		if (Memcmp (_buffer.ToArray ()' boundaryWithoutLeadingCRLF' boundaryWithoutLeadingCRLF.Length)) {  			DeleteUpThrough (boundaryWithoutLeadingCRLF.Length);  			nextState = MultipartReader.MultipartReaderState.InHeaders;  		} else {  			nextState = MultipartReader.MultipartReaderState.InPrologue;  		}  	}  	break;  case MultipartReader.MultipartReaderState.InPrologue:  case MultipartReader.MultipartReaderState.InBody:  	// Look for the next part boundary in the data we just added and the ending bytes of  	// the previous data (in case the boundary string is split across calls)  	if (bufLen < _boundary.Length) {  		break;  	}  	var start = Math.Max (0' bufLen - data.Length - _boundary.Length);  	var r = SearchFor (_boundary' start);  	if (r.Length > 0) {  		if (state == MultipartReader.MultipartReaderState.InBody) {  			var dataToAppend = new byte[r.Location];  			Array.Copy (_buffer.ToArray ()' 0' dataToAppend' 0' dataToAppend.Length);  			_readerDelegate.AppendToPart (dataToAppend);  			_readerDelegate.FinishedPart ();  		}  		DeleteUpThrough (r.Location + r.Length);  		nextState = MultipartReader.MultipartReaderState.InHeaders;  	} else {  		TrimBuffer ();  	}  	break;  case MultipartReader.MultipartReaderState.InHeaders:  	// First check for the end-of-message string ("--" after separator):  	if (bufLen >= 2 && Memcmp (_buffer.ToArray ()' EOM_BYTES' 2)) {  		state = MultipartReader.MultipartReaderState.AtEnd;  		Close ();  		return;  	}  	// Otherwise look for two CRLFs that delimit the end of the headers:  	var headerEnd = SearchFor (CRLF_CRLF' 0);  	if (headerEnd.Length > 0) {  		var headersBytes = new Couchbase.Lite.Util.ArraySegment<Byte> (_buffer.ToArray ()' 0' headerEnd.Location);  		// <-- better?  		var headersString = Encoding.UTF8.GetString (headersBytes.ToArray ());  		ParseHeaders (headersString);  		DeleteUpThrough (headerEnd.Location + headerEnd.Length);  		_readerDelegate.StartedPart (_headers);  		nextState = MultipartReader.MultipartReaderState.InBody;  	}  	break;  default:  	Log.To.Sync.E (Tag' "Unexpected data after end of MIME body' throwing...");  	throw new InvalidOperationException ("Unexpected data after end of MIME body");  }  
Magic Number,Couchbase.Lite.Support,MultipartReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartReader.cs,AppendData,The following statement contains a magic number: switch (state) {  case MultipartReader.MultipartReaderState.AtStart:  	// The entire message might start with a boundary without a leading CRLF.  	var boundaryWithoutLeadingCRLF = TrimmedBoundary.ToArray ();  	if (bufLen >= boundaryWithoutLeadingCRLF.Length) {  		// if (Arrays.equals(buffer.toByteArray()' boundaryWithoutLeadingCRLF)) {  		if (Memcmp (_buffer.ToArray ()' boundaryWithoutLeadingCRLF' boundaryWithoutLeadingCRLF.Length)) {  			DeleteUpThrough (boundaryWithoutLeadingCRLF.Length);  			nextState = MultipartReader.MultipartReaderState.InHeaders;  		} else {  			nextState = MultipartReader.MultipartReaderState.InPrologue;  		}  	}  	break;  case MultipartReader.MultipartReaderState.InPrologue:  case MultipartReader.MultipartReaderState.InBody:  	// Look for the next part boundary in the data we just added and the ending bytes of  	// the previous data (in case the boundary string is split across calls)  	if (bufLen < _boundary.Length) {  		break;  	}  	var start = Math.Max (0' bufLen - data.Length - _boundary.Length);  	var r = SearchFor (_boundary' start);  	if (r.Length > 0) {  		if (state == MultipartReader.MultipartReaderState.InBody) {  			var dataToAppend = new byte[r.Location];  			Array.Copy (_buffer.ToArray ()' 0' dataToAppend' 0' dataToAppend.Length);  			_readerDelegate.AppendToPart (dataToAppend);  			_readerDelegate.FinishedPart ();  		}  		DeleteUpThrough (r.Location + r.Length);  		nextState = MultipartReader.MultipartReaderState.InHeaders;  	} else {  		TrimBuffer ();  	}  	break;  case MultipartReader.MultipartReaderState.InHeaders:  	// First check for the end-of-message string ("--" after separator):  	if (bufLen >= 2 && Memcmp (_buffer.ToArray ()' EOM_BYTES' 2)) {  		state = MultipartReader.MultipartReaderState.AtEnd;  		Close ();  		return;  	}  	// Otherwise look for two CRLFs that delimit the end of the headers:  	var headerEnd = SearchFor (CRLF_CRLF' 0);  	if (headerEnd.Length > 0) {  		var headersBytes = new Couchbase.Lite.Util.ArraySegment<Byte> (_buffer.ToArray ()' 0' headerEnd.Location);  		// <-- better?  		var headersString = Encoding.UTF8.GetString (headersBytes.ToArray ());  		ParseHeaders (headersString);  		DeleteUpThrough (headerEnd.Location + headerEnd.Length);  		_readerDelegate.StartedPart (_headers);  		nextState = MultipartReader.MultipartReaderState.InBody;  	}  	break;  default:  	Log.To.Sync.E (Tag' "Unexpected data after end of MIME body' throwing...");  	throw new InvalidOperationException ("Unexpected data after end of MIME body");  }  
Magic Number,Couchbase.Lite.Support,MultipartReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartReader.cs,AppendData,The following statement contains a magic number: if (bufLen >= 2 && Memcmp (_buffer.ToArray ()' EOM_BYTES' 2)) {  	state = MultipartReader.MultipartReaderState.AtEnd;  	Close ();  	return;  }  
Magic Number,Couchbase.Lite.Support,MultipartReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartReader.cs,AppendData,The following statement contains a magic number: if (bufLen >= 2 && Memcmp (_buffer.ToArray ()' EOM_BYTES' 2)) {  	state = MultipartReader.MultipartReaderState.AtEnd;  	Close ();  	return;  }  
Magic Number,Couchbase.Lite.Support,MultipartReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartReader.cs,ParseContentType,The following statement contains a magic number: foreach (var token in tokenizer) {  	string param = token.Trim ();  	if (first) {  		if (!param.StartsWith ("multipart/"' StringComparison.InvariantCultureIgnoreCase)) {  			Log.To.Sync.E (Tag' "Content type ({0}) does not start with multipart/' throwing..."' contentType);  			throw new ArgumentException ("does not start with multipart/"' "contentType");  		}  		first = false;  	} else {  		if (param.StartsWith ("boundary="' StringComparison.InvariantCultureIgnoreCase)) {  			var tempBoundary = param.Substring (9);  			if (tempBoundary.StartsWith ("\""' StringComparison.InvariantCultureIgnoreCase)) {  				if (tempBoundary.Length < 2 || !tempBoundary.EndsWith ("\""' StringComparison.InvariantCultureIgnoreCase)) {  					Log.To.Sync.E (Tag' "Invalid boundary in content type ({0})"' tempBoundary);  					throw new ArgumentException ("contentType");  				}  				tempBoundary = tempBoundary.Substring (1' tempBoundary.Length - 2);  			}  			if (tempBoundary.Length < 1) {  				Log.To.Sync.E (Tag' "Invalid boundary in content type ({0})"' tempBoundary);  				throw new ArgumentException ("contentType");  			}  			tempBoundary = string.Format ("\r\n--{0}"' tempBoundary);  			_boundary = Encoding.UTF8.GetBytes (tempBoundary);  			break;  		}  	}  }  
Magic Number,Couchbase.Lite.Support,MultipartReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartReader.cs,ParseContentType,The following statement contains a magic number: foreach (var token in tokenizer) {  	string param = token.Trim ();  	if (first) {  		if (!param.StartsWith ("multipart/"' StringComparison.InvariantCultureIgnoreCase)) {  			Log.To.Sync.E (Tag' "Content type ({0}) does not start with multipart/' throwing..."' contentType);  			throw new ArgumentException ("does not start with multipart/"' "contentType");  		}  		first = false;  	} else {  		if (param.StartsWith ("boundary="' StringComparison.InvariantCultureIgnoreCase)) {  			var tempBoundary = param.Substring (9);  			if (tempBoundary.StartsWith ("\""' StringComparison.InvariantCultureIgnoreCase)) {  				if (tempBoundary.Length < 2 || !tempBoundary.EndsWith ("\""' StringComparison.InvariantCultureIgnoreCase)) {  					Log.To.Sync.E (Tag' "Invalid boundary in content type ({0})"' tempBoundary);  					throw new ArgumentException ("contentType");  				}  				tempBoundary = tempBoundary.Substring (1' tempBoundary.Length - 2);  			}  			if (tempBoundary.Length < 1) {  				Log.To.Sync.E (Tag' "Invalid boundary in content type ({0})"' tempBoundary);  				throw new ArgumentException ("contentType");  			}  			tempBoundary = string.Format ("\r\n--{0}"' tempBoundary);  			_boundary = Encoding.UTF8.GetBytes (tempBoundary);  			break;  		}  	}  }  
Magic Number,Couchbase.Lite.Support,MultipartReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartReader.cs,ParseContentType,The following statement contains a magic number: foreach (var token in tokenizer) {  	string param = token.Trim ();  	if (first) {  		if (!param.StartsWith ("multipart/"' StringComparison.InvariantCultureIgnoreCase)) {  			Log.To.Sync.E (Tag' "Content type ({0}) does not start with multipart/' throwing..."' contentType);  			throw new ArgumentException ("does not start with multipart/"' "contentType");  		}  		first = false;  	} else {  		if (param.StartsWith ("boundary="' StringComparison.InvariantCultureIgnoreCase)) {  			var tempBoundary = param.Substring (9);  			if (tempBoundary.StartsWith ("\""' StringComparison.InvariantCultureIgnoreCase)) {  				if (tempBoundary.Length < 2 || !tempBoundary.EndsWith ("\""' StringComparison.InvariantCultureIgnoreCase)) {  					Log.To.Sync.E (Tag' "Invalid boundary in content type ({0})"' tempBoundary);  					throw new ArgumentException ("contentType");  				}  				tempBoundary = tempBoundary.Substring (1' tempBoundary.Length - 2);  			}  			if (tempBoundary.Length < 1) {  				Log.To.Sync.E (Tag' "Invalid boundary in content type ({0})"' tempBoundary);  				throw new ArgumentException ("contentType");  			}  			tempBoundary = string.Format ("\r\n--{0}"' tempBoundary);  			_boundary = Encoding.UTF8.GetBytes (tempBoundary);  			break;  		}  	}  }  
Magic Number,Couchbase.Lite.Support,MultipartReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartReader.cs,ParseContentType,The following statement contains a magic number: if (first) {  	if (!param.StartsWith ("multipart/"' StringComparison.InvariantCultureIgnoreCase)) {  		Log.To.Sync.E (Tag' "Content type ({0}) does not start with multipart/' throwing..."' contentType);  		throw new ArgumentException ("does not start with multipart/"' "contentType");  	}  	first = false;  } else {  	if (param.StartsWith ("boundary="' StringComparison.InvariantCultureIgnoreCase)) {  		var tempBoundary = param.Substring (9);  		if (tempBoundary.StartsWith ("\""' StringComparison.InvariantCultureIgnoreCase)) {  			if (tempBoundary.Length < 2 || !tempBoundary.EndsWith ("\""' StringComparison.InvariantCultureIgnoreCase)) {  				Log.To.Sync.E (Tag' "Invalid boundary in content type ({0})"' tempBoundary);  				throw new ArgumentException ("contentType");  			}  			tempBoundary = tempBoundary.Substring (1' tempBoundary.Length - 2);  		}  		if (tempBoundary.Length < 1) {  			Log.To.Sync.E (Tag' "Invalid boundary in content type ({0})"' tempBoundary);  			throw new ArgumentException ("contentType");  		}  		tempBoundary = string.Format ("\r\n--{0}"' tempBoundary);  		_boundary = Encoding.UTF8.GetBytes (tempBoundary);  		break;  	}  }  
Magic Number,Couchbase.Lite.Support,MultipartReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartReader.cs,ParseContentType,The following statement contains a magic number: if (first) {  	if (!param.StartsWith ("multipart/"' StringComparison.InvariantCultureIgnoreCase)) {  		Log.To.Sync.E (Tag' "Content type ({0}) does not start with multipart/' throwing..."' contentType);  		throw new ArgumentException ("does not start with multipart/"' "contentType");  	}  	first = false;  } else {  	if (param.StartsWith ("boundary="' StringComparison.InvariantCultureIgnoreCase)) {  		var tempBoundary = param.Substring (9);  		if (tempBoundary.StartsWith ("\""' StringComparison.InvariantCultureIgnoreCase)) {  			if (tempBoundary.Length < 2 || !tempBoundary.EndsWith ("\""' StringComparison.InvariantCultureIgnoreCase)) {  				Log.To.Sync.E (Tag' "Invalid boundary in content type ({0})"' tempBoundary);  				throw new ArgumentException ("contentType");  			}  			tempBoundary = tempBoundary.Substring (1' tempBoundary.Length - 2);  		}  		if (tempBoundary.Length < 1) {  			Log.To.Sync.E (Tag' "Invalid boundary in content type ({0})"' tempBoundary);  			throw new ArgumentException ("contentType");  		}  		tempBoundary = string.Format ("\r\n--{0}"' tempBoundary);  		_boundary = Encoding.UTF8.GetBytes (tempBoundary);  		break;  	}  }  
Magic Number,Couchbase.Lite.Support,MultipartReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartReader.cs,ParseContentType,The following statement contains a magic number: if (first) {  	if (!param.StartsWith ("multipart/"' StringComparison.InvariantCultureIgnoreCase)) {  		Log.To.Sync.E (Tag' "Content type ({0}) does not start with multipart/' throwing..."' contentType);  		throw new ArgumentException ("does not start with multipart/"' "contentType");  	}  	first = false;  } else {  	if (param.StartsWith ("boundary="' StringComparison.InvariantCultureIgnoreCase)) {  		var tempBoundary = param.Substring (9);  		if (tempBoundary.StartsWith ("\""' StringComparison.InvariantCultureIgnoreCase)) {  			if (tempBoundary.Length < 2 || !tempBoundary.EndsWith ("\""' StringComparison.InvariantCultureIgnoreCase)) {  				Log.To.Sync.E (Tag' "Invalid boundary in content type ({0})"' tempBoundary);  				throw new ArgumentException ("contentType");  			}  			tempBoundary = tempBoundary.Substring (1' tempBoundary.Length - 2);  		}  		if (tempBoundary.Length < 1) {  			Log.To.Sync.E (Tag' "Invalid boundary in content type ({0})"' tempBoundary);  			throw new ArgumentException ("contentType");  		}  		tempBoundary = string.Format ("\r\n--{0}"' tempBoundary);  		_boundary = Encoding.UTF8.GetBytes (tempBoundary);  		break;  	}  }  
Magic Number,Couchbase.Lite.Support,MultipartReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartReader.cs,ParseContentType,The following statement contains a magic number: if (param.StartsWith ("boundary="' StringComparison.InvariantCultureIgnoreCase)) {  	var tempBoundary = param.Substring (9);  	if (tempBoundary.StartsWith ("\""' StringComparison.InvariantCultureIgnoreCase)) {  		if (tempBoundary.Length < 2 || !tempBoundary.EndsWith ("\""' StringComparison.InvariantCultureIgnoreCase)) {  			Log.To.Sync.E (Tag' "Invalid boundary in content type ({0})"' tempBoundary);  			throw new ArgumentException ("contentType");  		}  		tempBoundary = tempBoundary.Substring (1' tempBoundary.Length - 2);  	}  	if (tempBoundary.Length < 1) {  		Log.To.Sync.E (Tag' "Invalid boundary in content type ({0})"' tempBoundary);  		throw new ArgumentException ("contentType");  	}  	tempBoundary = string.Format ("\r\n--{0}"' tempBoundary);  	_boundary = Encoding.UTF8.GetBytes (tempBoundary);  	break;  }  
Magic Number,Couchbase.Lite.Support,MultipartReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartReader.cs,ParseContentType,The following statement contains a magic number: if (param.StartsWith ("boundary="' StringComparison.InvariantCultureIgnoreCase)) {  	var tempBoundary = param.Substring (9);  	if (tempBoundary.StartsWith ("\""' StringComparison.InvariantCultureIgnoreCase)) {  		if (tempBoundary.Length < 2 || !tempBoundary.EndsWith ("\""' StringComparison.InvariantCultureIgnoreCase)) {  			Log.To.Sync.E (Tag' "Invalid boundary in content type ({0})"' tempBoundary);  			throw new ArgumentException ("contentType");  		}  		tempBoundary = tempBoundary.Substring (1' tempBoundary.Length - 2);  	}  	if (tempBoundary.Length < 1) {  		Log.To.Sync.E (Tag' "Invalid boundary in content type ({0})"' tempBoundary);  		throw new ArgumentException ("contentType");  	}  	tempBoundary = string.Format ("\r\n--{0}"' tempBoundary);  	_boundary = Encoding.UTF8.GetBytes (tempBoundary);  	break;  }  
Magic Number,Couchbase.Lite.Support,MultipartReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartReader.cs,ParseContentType,The following statement contains a magic number: if (param.StartsWith ("boundary="' StringComparison.InvariantCultureIgnoreCase)) {  	var tempBoundary = param.Substring (9);  	if (tempBoundary.StartsWith ("\""' StringComparison.InvariantCultureIgnoreCase)) {  		if (tempBoundary.Length < 2 || !tempBoundary.EndsWith ("\""' StringComparison.InvariantCultureIgnoreCase)) {  			Log.To.Sync.E (Tag' "Invalid boundary in content type ({0})"' tempBoundary);  			throw new ArgumentException ("contentType");  		}  		tempBoundary = tempBoundary.Substring (1' tempBoundary.Length - 2);  	}  	if (tempBoundary.Length < 1) {  		Log.To.Sync.E (Tag' "Invalid boundary in content type ({0})"' tempBoundary);  		throw new ArgumentException ("contentType");  	}  	tempBoundary = string.Format ("\r\n--{0}"' tempBoundary);  	_boundary = Encoding.UTF8.GetBytes (tempBoundary);  	break;  }  
Magic Number,Couchbase.Lite.Support,MultipartReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartReader.cs,ParseContentType,The following statement contains a magic number: if (tempBoundary.StartsWith ("\""' StringComparison.InvariantCultureIgnoreCase)) {  	if (tempBoundary.Length < 2 || !tempBoundary.EndsWith ("\""' StringComparison.InvariantCultureIgnoreCase)) {  		Log.To.Sync.E (Tag' "Invalid boundary in content type ({0})"' tempBoundary);  		throw new ArgumentException ("contentType");  	}  	tempBoundary = tempBoundary.Substring (1' tempBoundary.Length - 2);  }  
Magic Number,Couchbase.Lite.Support,MultipartReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartReader.cs,ParseContentType,The following statement contains a magic number: if (tempBoundary.StartsWith ("\""' StringComparison.InvariantCultureIgnoreCase)) {  	if (tempBoundary.Length < 2 || !tempBoundary.EndsWith ("\""' StringComparison.InvariantCultureIgnoreCase)) {  		Log.To.Sync.E (Tag' "Invalid boundary in content type ({0})"' tempBoundary);  		throw new ArgumentException ("contentType");  	}  	tempBoundary = tempBoundary.Substring (1' tempBoundary.Length - 2);  }  
Magic Number,Couchbase.Lite.Support,MultipartReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartReader.cs,ParseContentType,The following statement contains a magic number: if (tempBoundary.Length < 2 || !tempBoundary.EndsWith ("\""' StringComparison.InvariantCultureIgnoreCase)) {  	Log.To.Sync.E (Tag' "Invalid boundary in content type ({0})"' tempBoundary);  	throw new ArgumentException ("contentType");  }  
Magic Number,Couchbase.Lite.Support,MultipartReader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultipartReader.cs,ParseContentType,The following statement contains a magic number: tempBoundary = tempBoundary.Substring (1' tempBoundary.Length - 2);  
Magic Number,Couchbase.Lite.Support,SequenceMap,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\SequenceMap.cs,SequenceMap,The following statement contains a magic number: values = new List<string> (100);  
Magic Number,Couchbase.Lite.Support,MultiStreamWriter,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultiStreamWriter.cs,WriteAsync,The following statement contains a magic number: ThreadPool.RegisterWaitForSingleObject (mre.WaitHandle' (o' timeout) => tcs.SetResult (!timeout)' null' TimeSpan.FromSeconds (30)' true);  
Magic Number,Couchbase.Lite.Support,MultiStreamWriter,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultiStreamWriter.cs,AllOutput,The following statement contains a magic number: using (var ms = RecyclableMemoryStreamManager.SharedInstance.GetStream ()) {  	if (!WriteAsync (ms).Wait (TimeSpan.FromSeconds (30))) {  		Log.To.Database.W (TAG' "{0} unable to get output!"' this);  		return null;  	}  	return ms.ToArray ();  }  
Magic Number,Couchbase.Lite.Support,MultiStreamWriter,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\MultiStreamWriter.cs,AllOutput,The following statement contains a magic number: if (!WriteAsync (ms).Wait (TimeSpan.FromSeconds (30))) {  	Log.To.Database.W (TAG' "{0} unable to get output!"' this);  	return null;  }  
Magic Number,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,PauseOrResume,The following statement contains a magic number: if (_changeTracker != null) {  	#if __IOS__ || __ANDROID__ || UNITY  	                _changeTracker.Paused = pending >= 200; #else  	_changeTracker.Paused = pending >= 2000;  	#endif  }  
Magic Number,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,PauseOrResume,The following statement contains a magic number: _changeTracker.Paused = pending >= 2000;  
Magic Number,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,QueueRemoteRevision,The following statement contains a magic number: if (rev.Deleted) {  	if (_deletedRevsToPull == null) {  		_deletedRevsToPull = new List<RevisionInternal> (100);  	}  	_deletedRevsToPull.Add (rev);  } else {  	if (_revsToPull == null) {  		_revsToPull = new List<RevisionInternal> (100);  	}  	_revsToPull.Add (rev);  }  
Magic Number,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,QueueRemoteRevision,The following statement contains a magic number: if (rev.Deleted) {  	if (_deletedRevsToPull == null) {  		_deletedRevsToPull = new List<RevisionInternal> (100);  	}  	_deletedRevsToPull.Add (rev);  } else {  	if (_revsToPull == null) {  		_revsToPull = new List<RevisionInternal> (100);  	}  	_revsToPull.Add (rev);  }  
Magic Number,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,QueueRemoteRevision,The following statement contains a magic number: if (_deletedRevsToPull == null) {  	_deletedRevsToPull = new List<RevisionInternal> (100);  }  
Magic Number,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,QueueRemoteRevision,The following statement contains a magic number: _deletedRevsToPull = new List<RevisionInternal> (100);  
Magic Number,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,QueueRemoteRevision,The following statement contains a magic number: if (_revsToPull == null) {  	_revsToPull = new List<RevisionInternal> (100);  }  
Magic Number,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,QueueRemoteRevision,The following statement contains a magic number: _revsToPull = new List<RevisionInternal> (100);  
Magic Number,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,ProcessInbox,The following statement contains a magic number: lock (_locker) {  	int numBulked = 0;  	for (int i = 0; i < inboxCount; i++) {  		var rev = (PulledRevision)inbox [i];  		if (_canBulkGet || (rev.Generation == 1 && !rev.Deleted && !rev.IsConflicted)) {  			//optimistically pull 1st-gen revs in bulk  			if (_bulkRevsToPull == null) {  				_bulkRevsToPull = new List<RevisionInternal> (100);  			}  			_bulkRevsToPull.Add (rev);  			++numBulked;  		} else {  			QueueRemoteRevision (rev);  		}  		rev.Sequence = _pendingSequences.AddValue (rev.GetRemoteSequenceID ());  	}  	Log.To.Sync.I (TAG' "{4} queued {0} remote revisions from seq={1} ({2} in bulk' {3} individually)"' inboxCount' ((PulledRevision)inbox [0]).GetRemoteSequenceID ()' numBulked' inboxCount - numBulked' this);  }  
Magic Number,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,ProcessInbox,The following statement contains a magic number: for (int i = 0; i < inboxCount; i++) {  	var rev = (PulledRevision)inbox [i];  	if (_canBulkGet || (rev.Generation == 1 && !rev.Deleted && !rev.IsConflicted)) {  		//optimistically pull 1st-gen revs in bulk  		if (_bulkRevsToPull == null) {  			_bulkRevsToPull = new List<RevisionInternal> (100);  		}  		_bulkRevsToPull.Add (rev);  		++numBulked;  	} else {  		QueueRemoteRevision (rev);  	}  	rev.Sequence = _pendingSequences.AddValue (rev.GetRemoteSequenceID ());  }  
Magic Number,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,ProcessInbox,The following statement contains a magic number: if (_canBulkGet || (rev.Generation == 1 && !rev.Deleted && !rev.IsConflicted)) {  	//optimistically pull 1st-gen revs in bulk  	if (_bulkRevsToPull == null) {  		_bulkRevsToPull = new List<RevisionInternal> (100);  	}  	_bulkRevsToPull.Add (rev);  	++numBulked;  } else {  	QueueRemoteRevision (rev);  }  
Magic Number,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,ProcessInbox,The following statement contains a magic number: if (_bulkRevsToPull == null) {  	_bulkRevsToPull = new List<RevisionInternal> (100);  }  
Magic Number,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,ProcessInbox,The following statement contains a magic number: _bulkRevsToPull = new List<RevisionInternal> (100);  
Magic Number,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,BeginReplicating,The following statement contains a magic number: if (_downloadsToInsert == null) {  	const int capacity = InboxCapacity * 2;  	TimeSpan delay = TimeSpan.FromSeconds (1);  	_downloadsToInsert = new Batcher<RevisionInternal> (new BatcherOptions<RevisionInternal> {  		WorkExecutor = WorkExecutor'  		Capacity = capacity'  		Delay = delay'  		Processor = InsertDownloads  	});  }  
Magic Number,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,ChangeTrackerReceivedChange,The following statement contains a magic number: while (_revsToPull != null && _revsToPull.Count > 1000) {  	try {  		// Presumably we are letting 1 or more other threads do something while we wait.  		Thread.Sleep (500);  	} catch (Exception e) {  		Log.To.Sync.W (TAG' "Swallowing exception while sleeping after receiving changetracker changes."' e);  		// swallow  	}  }  
Magic Number,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,ChangeTrackerReceivedChange,The following statement contains a magic number: while (_revsToPull != null && _revsToPull.Count > 1000) {  	try {  		// Presumably we are letting 1 or more other threads do something while we wait.  		Thread.Sleep (500);  	} catch (Exception e) {  		Log.To.Sync.W (TAG' "Swallowing exception while sleeping after receiving changetracker changes."' e);  		// swallow  	}  }  
Magic Number,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,ChangeTrackerReceivedChange,The following statement contains a magic number: try {  	// Presumably we are letting 1 or more other threads do something while we wait.  	Thread.Sleep (500);  } catch (Exception e) {  	Log.To.Sync.W (TAG' "Swallowing exception while sleeping after receiving changetracker changes."' e);  	// swallow  }  
Magic Number,Couchbase.Lite.Replicator,Puller,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\Puller.cs,ChangeTrackerReceivedChange,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,Couchbase.Lite.Replicator,DefaultAuthHandler,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\DefaultAuthHandler.cs,ProcessResponse,The following statement contains a magic number: do {  	if (Authenticator != null && response.StatusCode == HttpStatusCode.Unauthorized) {  		retryCount = _retryMessages.GetOrAdd (response' 0);  		if (retryCount >= 5) {  			// Multiple concurrent requests means that the Nc can sometimes get out of order  			// so try again' but within reason.  			break;  		}  		_retryMessages.TryUpdate (response' retryCount + 1' retryCount);  		var newRequest = new HttpRequestMessage (response.RequestMessage.Method' response.RequestMessage.RequestUri);  		foreach (var header in response.RequestMessage.Headers) {  			if (header.Key != "Authorization") {  				newRequest.Headers.Add (header.Key' header.Value);  			}  		}  		newRequest.Content = response.RequestMessage.Content;  		var challengeResponse = Authenticator.ResponseFromChallenge (response);  		if (challengeResponse != null) {  			newRequest.Headers.Add ("Authorization"' challengeResponse);  			return ProcessResponse (SendAsync (newRequest' cancellationToken).Result' cancellationToken);  		}  	}  } while (false);  
Magic Number,Couchbase.Lite.Replicator,DefaultAuthHandler,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\DefaultAuthHandler.cs,ProcessResponse,The following statement contains a magic number: if (Authenticator != null && response.StatusCode == HttpStatusCode.Unauthorized) {  	retryCount = _retryMessages.GetOrAdd (response' 0);  	if (retryCount >= 5) {  		// Multiple concurrent requests means that the Nc can sometimes get out of order  		// so try again' but within reason.  		break;  	}  	_retryMessages.TryUpdate (response' retryCount + 1' retryCount);  	var newRequest = new HttpRequestMessage (response.RequestMessage.Method' response.RequestMessage.RequestUri);  	foreach (var header in response.RequestMessage.Headers) {  		if (header.Key != "Authorization") {  			newRequest.Headers.Add (header.Key' header.Value);  		}  	}  	newRequest.Content = response.RequestMessage.Content;  	var challengeResponse = Authenticator.ResponseFromChallenge (response);  	if (challengeResponse != null) {  		newRequest.Headers.Add ("Authorization"' challengeResponse);  		return ProcessResponse (SendAsync (newRequest' cancellationToken).Result' cancellationToken);  	}  }  
Magic Number,Couchbase.Lite.Replicator,DefaultAuthHandler,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\DefaultAuthHandler.cs,ProcessResponse,The following statement contains a magic number: if (retryCount >= 5) {  	// Multiple concurrent requests means that the Nc can sometimes get out of order  	// so try again' but within reason.  	break;  }  
Magic Number,Couchbase.Lite.Replicator,BulkDownloader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\BulkDownloader.cs,SetBody,The following statement contains a magic number: if (_body != null) {  	byte[] bodyBytes = null;  	try {  		bodyBytes = Manager.GetObjectMapper ().WriteValueAsBytes (_body).ToArray ();  	} catch (Exception e) {  		Log.To.Sync.E (Tag' "Error serializing body of request"' e);  	}  	HttpContent entity = new ByteArrayContent (bodyBytes);  	entity.Headers.ContentType = new MediaTypeHeaderValue ("application/json");  	if (bodyBytes.Length > 100) {  		entity = new CompressedContent (entity' "gzip");  	}  	request.Content = entity;  } else {  	Log.To.Sync.W (Tag' "No body found for this request to {0}"' request.RequestUri);  }  
Magic Number,Couchbase.Lite.Replicator,BulkDownloader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\BulkDownloader.cs,SetBody,The following statement contains a magic number: if (bodyBytes.Length > 100) {  	entity = new CompressedContent (entity' "gzip");  }  
Magic Number,Couchbase.Lite.Replicator,BulkDownloader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\BulkDownloader.cs,ExecuteRequest,The following statement contains a magic number: return _session.SendAsyncRequest (request' HttpCompletionOption.ResponseContentRead' requestTokenSource.Token).ContinueWith (t => {  	requestTokenSource.Dispose ();  	try {  		response = t.Result;  	} catch (Exception e) {  		var err = Misc.Flatten (e).First ();  		Log.To.Sync.E (Tag' "Unhandled exception while getting bulk documents"' err);  		error = err;  		RespondWithResult (fullBody' err' response);  		return;  	}  	try {  		if (response == null) {  			Log.To.Sync.I (Tag' "Didn't get response for {0}"' request);  			error = new HttpRequestException ();  			RespondWithResult (fullBody' error' response);  		} else if (!response.IsSuccessStatusCode) {  			HttpStatusCode status = response.StatusCode;  			Log.To.Sync.I (Tag' "Got error status: {0} for {1}.  Reason: {2}"' status.GetStatusCode ()' request' response.ReasonPhrase);  			error = new HttpResponseException (status);  			RespondWithResult (fullBody' error' response);  		} else {  			Log.To.Sync.D (Tag' "Processing response: {0}"' response);  			var entity = response.Content;  			var contentTypeHeader = entity.Headers.ContentType;  			Stream inputStream = null;  			if (contentTypeHeader != null && contentTypeHeader.ToString ().Contains ("multipart/")) {  				Log.To.Sync.D (Tag' "contentTypeHeader = {0}"' contentTypeHeader.ToString ());  				try {  					_topReader = new MultipartReader (contentTypeHeader.ToString ()' this);  					inputStream = entity.ReadAsStreamAsync ().Result;  					const int bufLen = 1024;  					var buffer = new byte[bufLen];  					var numBytesRead = 0;  					while ((numBytesRead = inputStream.Read (buffer' 0' bufLen)) > 0) {  						if (numBytesRead != bufLen) {  							var bufferToAppend = new Couchbase.Lite.Util.ArraySegment<byte> (buffer' 0' numBytesRead).ToArray ();  							_topReader.AppendData (bufferToAppend);  						} else {  							_topReader.AppendData (buffer);  						}  					}  					RespondWithResult (fullBody' error' response);  				} finally {  					try {  						inputStream.Close ();  					} catch (IOException) {  					}  				}  			} else {  				Log.To.Sync.D (Tag' "contentTypeHeader is not multipart = {0}"' contentTypeHeader.ToString ());  				if (entity != null) {  					try {  						inputStream = entity.ReadAsStreamAsync ().Result;  						fullBody = Manager.GetObjectMapper ().ReadValue<object> (inputStream);  						RespondWithResult (fullBody' error' response);  					} finally {  						try {  							inputStream.Close ();  						} catch (IOException) {  						}  					}  				}  			}  		}  	} catch (Exception e) {  		var err = (e is AggregateException) ? e.InnerException : e;  		Log.To.Sync.E (Tag' "Exception while processing bulk download response"' err);  		error = err;  		RespondWithResult (fullBody' err' response);  	}  });  
Magic Number,Couchbase.Lite.Replicator,BulkDownloader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\BulkDownloader.cs,ExecuteRequest,The following statement contains a magic number: try {  	if (response == null) {  		Log.To.Sync.I (Tag' "Didn't get response for {0}"' request);  		error = new HttpRequestException ();  		RespondWithResult (fullBody' error' response);  	} else if (!response.IsSuccessStatusCode) {  		HttpStatusCode status = response.StatusCode;  		Log.To.Sync.I (Tag' "Got error status: {0} for {1}.  Reason: {2}"' status.GetStatusCode ()' request' response.ReasonPhrase);  		error = new HttpResponseException (status);  		RespondWithResult (fullBody' error' response);  	} else {  		Log.To.Sync.D (Tag' "Processing response: {0}"' response);  		var entity = response.Content;  		var contentTypeHeader = entity.Headers.ContentType;  		Stream inputStream = null;  		if (contentTypeHeader != null && contentTypeHeader.ToString ().Contains ("multipart/")) {  			Log.To.Sync.D (Tag' "contentTypeHeader = {0}"' contentTypeHeader.ToString ());  			try {  				_topReader = new MultipartReader (contentTypeHeader.ToString ()' this);  				inputStream = entity.ReadAsStreamAsync ().Result;  				const int bufLen = 1024;  				var buffer = new byte[bufLen];  				var numBytesRead = 0;  				while ((numBytesRead = inputStream.Read (buffer' 0' bufLen)) > 0) {  					if (numBytesRead != bufLen) {  						var bufferToAppend = new Couchbase.Lite.Util.ArraySegment<byte> (buffer' 0' numBytesRead).ToArray ();  						_topReader.AppendData (bufferToAppend);  					} else {  						_topReader.AppendData (buffer);  					}  				}  				RespondWithResult (fullBody' error' response);  			} finally {  				try {  					inputStream.Close ();  				} catch (IOException) {  				}  			}  		} else {  			Log.To.Sync.D (Tag' "contentTypeHeader is not multipart = {0}"' contentTypeHeader.ToString ());  			if (entity != null) {  				try {  					inputStream = entity.ReadAsStreamAsync ().Result;  					fullBody = Manager.GetObjectMapper ().ReadValue<object> (inputStream);  					RespondWithResult (fullBody' error' response);  				} finally {  					try {  						inputStream.Close ();  					} catch (IOException) {  					}  				}  			}  		}  	}  } catch (Exception e) {  	var err = (e is AggregateException) ? e.InnerException : e;  	Log.To.Sync.E (Tag' "Exception while processing bulk download response"' err);  	error = err;  	RespondWithResult (fullBody' err' response);  }  
Magic Number,Couchbase.Lite.Replicator,BulkDownloader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\BulkDownloader.cs,ExecuteRequest,The following statement contains a magic number: if (response == null) {  	Log.To.Sync.I (Tag' "Didn't get response for {0}"' request);  	error = new HttpRequestException ();  	RespondWithResult (fullBody' error' response);  } else if (!response.IsSuccessStatusCode) {  	HttpStatusCode status = response.StatusCode;  	Log.To.Sync.I (Tag' "Got error status: {0} for {1}.  Reason: {2}"' status.GetStatusCode ()' request' response.ReasonPhrase);  	error = new HttpResponseException (status);  	RespondWithResult (fullBody' error' response);  } else {  	Log.To.Sync.D (Tag' "Processing response: {0}"' response);  	var entity = response.Content;  	var contentTypeHeader = entity.Headers.ContentType;  	Stream inputStream = null;  	if (contentTypeHeader != null && contentTypeHeader.ToString ().Contains ("multipart/")) {  		Log.To.Sync.D (Tag' "contentTypeHeader = {0}"' contentTypeHeader.ToString ());  		try {  			_topReader = new MultipartReader (contentTypeHeader.ToString ()' this);  			inputStream = entity.ReadAsStreamAsync ().Result;  			const int bufLen = 1024;  			var buffer = new byte[bufLen];  			var numBytesRead = 0;  			while ((numBytesRead = inputStream.Read (buffer' 0' bufLen)) > 0) {  				if (numBytesRead != bufLen) {  					var bufferToAppend = new Couchbase.Lite.Util.ArraySegment<byte> (buffer' 0' numBytesRead).ToArray ();  					_topReader.AppendData (bufferToAppend);  				} else {  					_topReader.AppendData (buffer);  				}  			}  			RespondWithResult (fullBody' error' response);  		} finally {  			try {  				inputStream.Close ();  			} catch (IOException) {  			}  		}  	} else {  		Log.To.Sync.D (Tag' "contentTypeHeader is not multipart = {0}"' contentTypeHeader.ToString ());  		if (entity != null) {  			try {  				inputStream = entity.ReadAsStreamAsync ().Result;  				fullBody = Manager.GetObjectMapper ().ReadValue<object> (inputStream);  				RespondWithResult (fullBody' error' response);  			} finally {  				try {  					inputStream.Close ();  				} catch (IOException) {  				}  			}  		}  	}  }  
Magic Number,Couchbase.Lite.Replicator,BulkDownloader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\BulkDownloader.cs,ExecuteRequest,The following statement contains a magic number: if (!response.IsSuccessStatusCode) {  	HttpStatusCode status = response.StatusCode;  	Log.To.Sync.I (Tag' "Got error status: {0} for {1}.  Reason: {2}"' status.GetStatusCode ()' request' response.ReasonPhrase);  	error = new HttpResponseException (status);  	RespondWithResult (fullBody' error' response);  } else {  	Log.To.Sync.D (Tag' "Processing response: {0}"' response);  	var entity = response.Content;  	var contentTypeHeader = entity.Headers.ContentType;  	Stream inputStream = null;  	if (contentTypeHeader != null && contentTypeHeader.ToString ().Contains ("multipart/")) {  		Log.To.Sync.D (Tag' "contentTypeHeader = {0}"' contentTypeHeader.ToString ());  		try {  			_topReader = new MultipartReader (contentTypeHeader.ToString ()' this);  			inputStream = entity.ReadAsStreamAsync ().Result;  			const int bufLen = 1024;  			var buffer = new byte[bufLen];  			var numBytesRead = 0;  			while ((numBytesRead = inputStream.Read (buffer' 0' bufLen)) > 0) {  				if (numBytesRead != bufLen) {  					var bufferToAppend = new Couchbase.Lite.Util.ArraySegment<byte> (buffer' 0' numBytesRead).ToArray ();  					_topReader.AppendData (bufferToAppend);  				} else {  					_topReader.AppendData (buffer);  				}  			}  			RespondWithResult (fullBody' error' response);  		} finally {  			try {  				inputStream.Close ();  			} catch (IOException) {  			}  		}  	} else {  		Log.To.Sync.D (Tag' "contentTypeHeader is not multipart = {0}"' contentTypeHeader.ToString ());  		if (entity != null) {  			try {  				inputStream = entity.ReadAsStreamAsync ().Result;  				fullBody = Manager.GetObjectMapper ().ReadValue<object> (inputStream);  				RespondWithResult (fullBody' error' response);  			} finally {  				try {  					inputStream.Close ();  				} catch (IOException) {  				}  			}  		}  	}  }  
Magic Number,Couchbase.Lite.Replicator,BulkDownloader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\BulkDownloader.cs,ExecuteRequest,The following statement contains a magic number: if (contentTypeHeader != null && contentTypeHeader.ToString ().Contains ("multipart/")) {  	Log.To.Sync.D (Tag' "contentTypeHeader = {0}"' contentTypeHeader.ToString ());  	try {  		_topReader = new MultipartReader (contentTypeHeader.ToString ()' this);  		inputStream = entity.ReadAsStreamAsync ().Result;  		const int bufLen = 1024;  		var buffer = new byte[bufLen];  		var numBytesRead = 0;  		while ((numBytesRead = inputStream.Read (buffer' 0' bufLen)) > 0) {  			if (numBytesRead != bufLen) {  				var bufferToAppend = new Couchbase.Lite.Util.ArraySegment<byte> (buffer' 0' numBytesRead).ToArray ();  				_topReader.AppendData (bufferToAppend);  			} else {  				_topReader.AppendData (buffer);  			}  		}  		RespondWithResult (fullBody' error' response);  	} finally {  		try {  			inputStream.Close ();  		} catch (IOException) {  		}  	}  } else {  	Log.To.Sync.D (Tag' "contentTypeHeader is not multipart = {0}"' contentTypeHeader.ToString ());  	if (entity != null) {  		try {  			inputStream = entity.ReadAsStreamAsync ().Result;  			fullBody = Manager.GetObjectMapper ().ReadValue<object> (inputStream);  			RespondWithResult (fullBody' error' response);  		} finally {  			try {  				inputStream.Close ();  			} catch (IOException) {  			}  		}  	}  }  
Magic Number,Couchbase.Lite.Replicator,BulkDownloader,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\BulkDownloader.cs,ExecuteRequest,The following statement contains a magic number: try {  	_topReader = new MultipartReader (contentTypeHeader.ToString ()' this);  	inputStream = entity.ReadAsStreamAsync ().Result;  	const int bufLen = 1024;  	var buffer = new byte[bufLen];  	var numBytesRead = 0;  	while ((numBytesRead = inputStream.Read (buffer' 0' bufLen)) > 0) {  		if (numBytesRead != bufLen) {  			var bufferToAppend = new Couchbase.Lite.Util.ArraySegment<byte> (buffer' 0' numBytesRead).ToArray ();  			_topReader.AppendData (bufferToAppend);  		} else {  			_topReader.AppendData (buffer);  		}  	}  	RespondWithResult (fullBody' error' response);  } finally {  	try {  		inputStream.Close ();  	} catch (IOException) {  	}  }  
Magic Number,Couchbase.Lite.Views,BuiltinReduceFunctions,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\View\BuiltinReduceFunctions.cs,CalculateMedian,The following statement contains a magic number: if ((length % 2) == 0) {  	m = (m + QuickSelect (input.Cast<double> ().ToList ()' 0' length - 1' length / 2 + 1)) / 2.0;  }  
Magic Number,Couchbase.Lite.Views,BuiltinReduceFunctions,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\View\BuiltinReduceFunctions.cs,CalculateMedian,The following statement contains a magic number: if ((length % 2) == 0) {  	m = (m + QuickSelect (input.Cast<double> ().ToList ()' 0' length - 1' length / 2 + 1)) / 2.0;  }  
Magic Number,Couchbase.Lite.Views,BuiltinReduceFunctions,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\View\BuiltinReduceFunctions.cs,CalculateMedian,The following statement contains a magic number: if ((length % 2) == 0) {  	m = (m + QuickSelect (input.Cast<double> ().ToList ()' 0' length - 1' length / 2 + 1)) / 2.0;  }  
Magic Number,Couchbase.Lite.Views,BuiltinReduceFunctions,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\View\BuiltinReduceFunctions.cs,CalculateMedian,The following statement contains a magic number: m = (m + QuickSelect (input.Cast<double> ().ToList ()' 0' length - 1' length / 2 + 1)) / 2.0;  
Magic Number,Couchbase.Lite.Views,BuiltinReduceFunctions,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\View\BuiltinReduceFunctions.cs,CalculateMedian,The following statement contains a magic number: m = (m + QuickSelect (input.Cast<double> ().ToList ()' 0' length - 1' length / 2 + 1)) / 2.0;  
Magic Number,Couchbase.Lite.Store,SymmetricKey,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Store\SymmetricKey.cs,SymmetricKey,The following statement contains a magic number: if (salt.Length <= 4) {  	Log.To.Database.E (Tag' "salt cannot be less than 4 bytes in ctor' throwing...");  	throw new ArgumentOutOfRangeException ("salt"' "Value is too short");  }  
Magic Number,Couchbase.Lite.Store,SymmetricKey,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Store\SymmetricKey.cs,SymmetricKey,The following statement contains a magic number: if (rounds <= 200) {  	Log.To.Database.E (Tag' "rounds cannot be <= 200 in ctor' throwing...");  	throw new ArgumentOutOfRangeException ("rounds"' "Insufficient rounds");  }  
Magic Number,Couchbase.Lite.Store,SymmetricKey,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Store\SymmetricKey.cs,InitCryptor,The following statement contains a magic number: _cryptor.KeySize = KEY_SIZE * 8;  
Magic Number,Couchbase.Lite.Store,SymmetricKey,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Store\SymmetricKey.cs,InitCryptor,The following statement contains a magic number: _cryptor.BlockSize = BLOCK_SIZE * 8;  
Missing Default,Couchbase.Lite.Internal,AttachmentInternal,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Documents\AttachmentInternal.cs,AsStubDictionary,The following switch statement is missing a default case: switch (Encoding) {  case AttachmentEncoding.GZIP:  	retVal ["encoding"] = "gzip";  	break;  case AttachmentEncoding.None:  	break;  }  
Missing Default,Couchbase.Lite.Internal,SocketChangeTracker,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Replication\SocketChangeTracker.cs,RetryOrStopIfNecessary,The following switch statement is missing a default case: switch (resolution.Resolution) {  case ErrorResolution.RetryLater:  	Error = Misc.Flatten (e).FirstOrDefault ();  	if (resolution.ResolutionFlags.HasFlag (ErrorResolutionFlags.OutOfRetries)) {  		Log.To.ChangeTracker.I (Tag' "{0} out of retries"' this);  	}  	Log.To.ChangeTracker.I (Tag' "{0} will retry later..."' this);  	_workExecutor.StartNew (Stop' ErrorResolution.RetryLater);  	break;  case ErrorResolution.RetryNow:  	Log.To.ChangeTracker.V (Tag' "{0} no error detected' continuing..."' this);  	PerformRetry (false);  	break;  case ErrorResolution.GoOffline:  	Error = Misc.Flatten (e).FirstOrDefault ();  	Log.To.ChangeTracker.I (Tag' "{0} signaling to go offline..."' this);  	_workExecutor.StartNew (Stop' ErrorResolution.GoOffline);  	break;  case ErrorResolution.Stop:  	Error = Misc.Flatten (e).FirstOrDefault ();  	if (Error != null) {  		Log.To.ChangeTracker.I (Tag' "{0} cannot recover' stopping..."' this);  	}  	_workExecutor.StartNew (Stop' ErrorResolution.Stop);  	break;  }  
Missing Default,Couchbase.Lite.Util,MessageDigest,F:\newReposMay17\couchbase_couchbase-lite-net\src\Couchbase.Lite.Shared\Util\MessageDigest.cs,GetInstance,The following switch statement is missing a default case: switch (algorithm.ToLower ()) {  case "sha-1":  	return new MessageDigest<SHA1Managed> ();  case "md5":  	return new MessageDigest<MD5CryptoServiceProvider> ();  }  
