Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Mono.Zeroconf.Providers.Bonjour,BrowseService,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,Cyclomatic complexity of the method is 21
Long Parameter List,Mono.Zeroconf.Providers.Bonjour,BrowseService,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnResolveReply,The method has 10 parameters.
Long Parameter List,Mono.Zeroconf.Providers.Bonjour,BrowseService,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The method has 11 parameters.
Long Parameter List,Mono.Zeroconf.Providers.Bonjour,Native,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\Native.cs,DNSServiceBrowse,The method has 7 parameters.
Long Parameter List,Mono.Zeroconf.Providers.Bonjour,Native,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\Native.cs,DNSServiceResolve,The method has 8 parameters.
Long Parameter List,Mono.Zeroconf.Providers.Bonjour,Native,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\Native.cs,DNSServiceRegister,The method has 12 parameters.
Long Parameter List,Mono.Zeroconf.Providers.Bonjour,Native,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\Native.cs,DNSServiceQueryRecord,The method has 8 parameters.
Long Parameter List,Mono.Zeroconf.Providers.Bonjour,Native,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\Native.cs,TXTRecordGetItemAtIndex,The method has 7 parameters.
Long Parameter List,Mono.Zeroconf.Providers.Bonjour,RegisterService,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\RegisterService.cs,OnRegisterReply,The method has 7 parameters.
Long Parameter List,Mono.Zeroconf.Providers.Bonjour,ServiceBrowser,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\ServiceBrowser.cs,OnBrowseReply,The method has 8 parameters.
Long Statement,Mono.Zeroconf.Providers.Bonjour,BrowseService,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,Resolve,The length of the statement  "	ServiceError error = Native.DNSServiceResolve (out sd_ref' ServiceFlags.None' InterfaceIndex' Name' RegType' ReplyDomain' resolve_reply_handler' GCHandle.ToIntPtr (_self)); " is 172.
Long Statement,Mono.Zeroconf.Providers.Bonjour,BrowseService,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,RefreshTxtRecord,The length of the statement  "	ServiceError error = Native.DNSServiceQueryRecord (out sd_ref' ServiceFlags.None' 0' fullname' ServiceType.TXT' ServiceClass.IN' query_record_reply_handler' GCHandle.ToIntPtr (_self)); " is 184.
Long Statement,Mono.Zeroconf.Providers.Bonjour,BrowseService,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnResolveReply,The length of the statement  "	Log.To.Discovery.V (Tag' "Resolve reply received for {0} (0x{1})' entering DNSServiceQueryRecord next"' browseService' sdRef.Raw.ToString ("X")); " is 145.
Long Statement,Mono.Zeroconf.Providers.Bonjour,BrowseService,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnResolveReply,The length of the statement  "		ServiceError error = Native.DNSServiceQueryRecord (out sd_ref' ServiceFlags.None' interfaceIndex' hosttarget' ServiceType.A' ServiceClass.IN' browseService.query_record_reply_handler' context); " is 193.
Long Statement,Mono.Zeroconf.Providers.Bonjour,BrowseService,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnResolveReply,The length of the statement  "		ServiceError error = Native.DNSServiceQueryRecord (out sd_ref' ServiceFlags.None' interfaceIndex' hosttarget' ServiceType.AAAA' ServiceClass.IN' browseService.query_record_reply_handler' context); " is 196.
Long Statement,Mono.Zeroconf.Providers.Bonjour,BrowseService,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,ToString,The length of the statement  "		return string.Format ("BrowseService[IsResolved=True Name={0} IPAddresses={1} Port={2}]"' Name' new LogJsonString (hostentry == null ? new string[0] : hostentry.AddressList.ToStringArray ())' Port); " is 198.
Long Statement,Mono.Zeroconf.Providers.Bonjour,RegisterService,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\RegisterService.cs,ProcessRegister,The length of the statement  "	ServiceError error = Native.DNSServiceRegister (out sd_ref' auto_rename ? ServiceFlags.None : ServiceFlags.NoAutoRename' InterfaceIndex' Name' RegType' ReplyDomain' HostTarget' (ushort)IPAddress.HostToNetworkOrder ((short)Port)' txt_rec_length' txt_rec' register_reply_handler' GCHandle.ToIntPtr (_self)); " is 305.
Long Statement,Mono.Zeroconf.Providers.Bonjour,ServiceBrowser,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\ServiceBrowser.cs,ProcessStart,The length of the statement  "		error = Native.DNSServiceBrowse (out sd_ref' ServiceFlags.Default' interface_index' regtype' domain' browse_reply_handler' GCHandle.ToIntPtr (_self)); " is 150.
Long Statement,Mono.Zeroconf.Providers.Bonjour,ServiceBrowser,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\ServiceBrowser.cs,ProcessStart,The length of the statement  "		Log.To.Discovery.E (TAG' "Unable to find required DLL file:  dnssd.dll\n" + "(Windows -> Is Bonjour installed?)\n" + "(Linux -> Are the network support files in place?)\n" + "(Others -> Is a dll.config file included?)"); " is 220.
Long Statement,Mono.Zeroconf.Providers.Bonjour,ServiceBrowser,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\ServiceBrowser.cs,OnBrowseReply,The length of the statement  "	Log.To.Discovery.V (TAG' "{0} (0x{1}) entered OnBrowseReply (found={2} flags={3})"' serviceBrowser' sdRef.Raw.ToString ("X")' service' flags); " is 142.
Long Statement,Mono.Zeroconf.Providers.Bonjour,TxtRecord,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\TxtRecord.cs,Add,The length of the statement  "	ServiceError error = Native.TXTRecordSetValue (handle' encoding.GetBytes (key + "\0")' (sbyte)item.ValueRaw.Length' item.ValueRaw); " is 131.
Long Statement,Mono.Zeroconf.Providers.Bonjour,TxtRecord,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\TxtRecord.cs,GetItemAt,The length of the statement  "		Log.To.Discovery.E (Tag' "GetItemAt() received invalid index {0} (not between 0 and {1})' throwing..."' index' Count - 1); " is 122.
Long Statement,Mono.Zeroconf.Providers.Bonjour,TxtRecord,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\TxtRecord.cs,GetItemAt,The length of the statement  "	ServiceError error = Native.TXTRecordGetItemAtIndex (RawLength' RawBytes' (ushort)index' (ushort)key.Length' key' out value_length' out value_raw); " is 147.
Magic Number,Mono.Zeroconf.Providers.Bonjour,BrowseService,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The following statement contains a magic number: switch (rrtype) {  case ServiceType.A:  	IPAddress address;  	if (rdlen == 4) {  		// ~4.5 times faster than Marshal.Copy into byte[4]  		uint address_raw = (uint)(Marshal.ReadByte (rdata' 3) << 24);  		address_raw |= (uint)(Marshal.ReadByte (rdata' 2) << 16);  		address_raw |= (uint)(Marshal.ReadByte (rdata' 1) << 8);  		address_raw |= (uint)Marshal.ReadByte (rdata' 0);  		address = new IPAddress (address_raw);  	} else if (rdlen == 16) {  		byte[] address_raw = new byte[rdlen];  		Marshal.Copy (rdata' address_raw' 0' rdlen);  		address = new IPAddress (address_raw' interfaceIndex);  	} else {  		break;  	}  	if (browseService.hostentry == null) {  		browseService.hostentry = new IPHostEntry ();  		browseService.hostentry.HostName = browseService.hosttarget;  	}  	if (browseService.hostentry.AddressList != null) {  		ArrayList list = new ArrayList (browseService.hostentry.AddressList);  		list.Add (address);  		browseService.hostentry.AddressList = list.ToArray (typeof(IPAddress)) as IPAddress[];  	} else {  		browseService.hostentry.AddressList = new IPAddress[] {  			address  		};  	}  	Log.To.Discovery.V (Tag' "Query record reply received for {0} (0x{1})"' browseService' sdRef.Raw.ToString ("X"));  	ServiceResolvedEventHandler handler = browseService._resolved;  	if (handler != null) {  		handler (browseService' new ServiceResolvedEventArgs (browseService));  	}  	break;  case ServiceType.TXT:  	if (browseService.TxtRecord != null) {  		browseService.TxtRecord.Dispose ();  	}  	browseService.TxtRecord = new TxtRecord (rdlen' rdata);  	break;  default:  	break;  }  
Magic Number,Mono.Zeroconf.Providers.Bonjour,BrowseService,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The following statement contains a magic number: switch (rrtype) {  case ServiceType.A:  	IPAddress address;  	if (rdlen == 4) {  		// ~4.5 times faster than Marshal.Copy into byte[4]  		uint address_raw = (uint)(Marshal.ReadByte (rdata' 3) << 24);  		address_raw |= (uint)(Marshal.ReadByte (rdata' 2) << 16);  		address_raw |= (uint)(Marshal.ReadByte (rdata' 1) << 8);  		address_raw |= (uint)Marshal.ReadByte (rdata' 0);  		address = new IPAddress (address_raw);  	} else if (rdlen == 16) {  		byte[] address_raw = new byte[rdlen];  		Marshal.Copy (rdata' address_raw' 0' rdlen);  		address = new IPAddress (address_raw' interfaceIndex);  	} else {  		break;  	}  	if (browseService.hostentry == null) {  		browseService.hostentry = new IPHostEntry ();  		browseService.hostentry.HostName = browseService.hosttarget;  	}  	if (browseService.hostentry.AddressList != null) {  		ArrayList list = new ArrayList (browseService.hostentry.AddressList);  		list.Add (address);  		browseService.hostentry.AddressList = list.ToArray (typeof(IPAddress)) as IPAddress[];  	} else {  		browseService.hostentry.AddressList = new IPAddress[] {  			address  		};  	}  	Log.To.Discovery.V (Tag' "Query record reply received for {0} (0x{1})"' browseService' sdRef.Raw.ToString ("X"));  	ServiceResolvedEventHandler handler = browseService._resolved;  	if (handler != null) {  		handler (browseService' new ServiceResolvedEventArgs (browseService));  	}  	break;  case ServiceType.TXT:  	if (browseService.TxtRecord != null) {  		browseService.TxtRecord.Dispose ();  	}  	browseService.TxtRecord = new TxtRecord (rdlen' rdata);  	break;  default:  	break;  }  
Magic Number,Mono.Zeroconf.Providers.Bonjour,BrowseService,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The following statement contains a magic number: switch (rrtype) {  case ServiceType.A:  	IPAddress address;  	if (rdlen == 4) {  		// ~4.5 times faster than Marshal.Copy into byte[4]  		uint address_raw = (uint)(Marshal.ReadByte (rdata' 3) << 24);  		address_raw |= (uint)(Marshal.ReadByte (rdata' 2) << 16);  		address_raw |= (uint)(Marshal.ReadByte (rdata' 1) << 8);  		address_raw |= (uint)Marshal.ReadByte (rdata' 0);  		address = new IPAddress (address_raw);  	} else if (rdlen == 16) {  		byte[] address_raw = new byte[rdlen];  		Marshal.Copy (rdata' address_raw' 0' rdlen);  		address = new IPAddress (address_raw' interfaceIndex);  	} else {  		break;  	}  	if (browseService.hostentry == null) {  		browseService.hostentry = new IPHostEntry ();  		browseService.hostentry.HostName = browseService.hosttarget;  	}  	if (browseService.hostentry.AddressList != null) {  		ArrayList list = new ArrayList (browseService.hostentry.AddressList);  		list.Add (address);  		browseService.hostentry.AddressList = list.ToArray (typeof(IPAddress)) as IPAddress[];  	} else {  		browseService.hostentry.AddressList = new IPAddress[] {  			address  		};  	}  	Log.To.Discovery.V (Tag' "Query record reply received for {0} (0x{1})"' browseService' sdRef.Raw.ToString ("X"));  	ServiceResolvedEventHandler handler = browseService._resolved;  	if (handler != null) {  		handler (browseService' new ServiceResolvedEventArgs (browseService));  	}  	break;  case ServiceType.TXT:  	if (browseService.TxtRecord != null) {  		browseService.TxtRecord.Dispose ();  	}  	browseService.TxtRecord = new TxtRecord (rdlen' rdata);  	break;  default:  	break;  }  
Magic Number,Mono.Zeroconf.Providers.Bonjour,BrowseService,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The following statement contains a magic number: switch (rrtype) {  case ServiceType.A:  	IPAddress address;  	if (rdlen == 4) {  		// ~4.5 times faster than Marshal.Copy into byte[4]  		uint address_raw = (uint)(Marshal.ReadByte (rdata' 3) << 24);  		address_raw |= (uint)(Marshal.ReadByte (rdata' 2) << 16);  		address_raw |= (uint)(Marshal.ReadByte (rdata' 1) << 8);  		address_raw |= (uint)Marshal.ReadByte (rdata' 0);  		address = new IPAddress (address_raw);  	} else if (rdlen == 16) {  		byte[] address_raw = new byte[rdlen];  		Marshal.Copy (rdata' address_raw' 0' rdlen);  		address = new IPAddress (address_raw' interfaceIndex);  	} else {  		break;  	}  	if (browseService.hostentry == null) {  		browseService.hostentry = new IPHostEntry ();  		browseService.hostentry.HostName = browseService.hosttarget;  	}  	if (browseService.hostentry.AddressList != null) {  		ArrayList list = new ArrayList (browseService.hostentry.AddressList);  		list.Add (address);  		browseService.hostentry.AddressList = list.ToArray (typeof(IPAddress)) as IPAddress[];  	} else {  		browseService.hostentry.AddressList = new IPAddress[] {  			address  		};  	}  	Log.To.Discovery.V (Tag' "Query record reply received for {0} (0x{1})"' browseService' sdRef.Raw.ToString ("X"));  	ServiceResolvedEventHandler handler = browseService._resolved;  	if (handler != null) {  		handler (browseService' new ServiceResolvedEventArgs (browseService));  	}  	break;  case ServiceType.TXT:  	if (browseService.TxtRecord != null) {  		browseService.TxtRecord.Dispose ();  	}  	browseService.TxtRecord = new TxtRecord (rdlen' rdata);  	break;  default:  	break;  }  
Magic Number,Mono.Zeroconf.Providers.Bonjour,BrowseService,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The following statement contains a magic number: switch (rrtype) {  case ServiceType.A:  	IPAddress address;  	if (rdlen == 4) {  		// ~4.5 times faster than Marshal.Copy into byte[4]  		uint address_raw = (uint)(Marshal.ReadByte (rdata' 3) << 24);  		address_raw |= (uint)(Marshal.ReadByte (rdata' 2) << 16);  		address_raw |= (uint)(Marshal.ReadByte (rdata' 1) << 8);  		address_raw |= (uint)Marshal.ReadByte (rdata' 0);  		address = new IPAddress (address_raw);  	} else if (rdlen == 16) {  		byte[] address_raw = new byte[rdlen];  		Marshal.Copy (rdata' address_raw' 0' rdlen);  		address = new IPAddress (address_raw' interfaceIndex);  	} else {  		break;  	}  	if (browseService.hostentry == null) {  		browseService.hostentry = new IPHostEntry ();  		browseService.hostentry.HostName = browseService.hosttarget;  	}  	if (browseService.hostentry.AddressList != null) {  		ArrayList list = new ArrayList (browseService.hostentry.AddressList);  		list.Add (address);  		browseService.hostentry.AddressList = list.ToArray (typeof(IPAddress)) as IPAddress[];  	} else {  		browseService.hostentry.AddressList = new IPAddress[] {  			address  		};  	}  	Log.To.Discovery.V (Tag' "Query record reply received for {0} (0x{1})"' browseService' sdRef.Raw.ToString ("X"));  	ServiceResolvedEventHandler handler = browseService._resolved;  	if (handler != null) {  		handler (browseService' new ServiceResolvedEventArgs (browseService));  	}  	break;  case ServiceType.TXT:  	if (browseService.TxtRecord != null) {  		browseService.TxtRecord.Dispose ();  	}  	browseService.TxtRecord = new TxtRecord (rdlen' rdata);  	break;  default:  	break;  }  
Magic Number,Mono.Zeroconf.Providers.Bonjour,BrowseService,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The following statement contains a magic number: switch (rrtype) {  case ServiceType.A:  	IPAddress address;  	if (rdlen == 4) {  		// ~4.5 times faster than Marshal.Copy into byte[4]  		uint address_raw = (uint)(Marshal.ReadByte (rdata' 3) << 24);  		address_raw |= (uint)(Marshal.ReadByte (rdata' 2) << 16);  		address_raw |= (uint)(Marshal.ReadByte (rdata' 1) << 8);  		address_raw |= (uint)Marshal.ReadByte (rdata' 0);  		address = new IPAddress (address_raw);  	} else if (rdlen == 16) {  		byte[] address_raw = new byte[rdlen];  		Marshal.Copy (rdata' address_raw' 0' rdlen);  		address = new IPAddress (address_raw' interfaceIndex);  	} else {  		break;  	}  	if (browseService.hostentry == null) {  		browseService.hostentry = new IPHostEntry ();  		browseService.hostentry.HostName = browseService.hosttarget;  	}  	if (browseService.hostentry.AddressList != null) {  		ArrayList list = new ArrayList (browseService.hostentry.AddressList);  		list.Add (address);  		browseService.hostentry.AddressList = list.ToArray (typeof(IPAddress)) as IPAddress[];  	} else {  		browseService.hostentry.AddressList = new IPAddress[] {  			address  		};  	}  	Log.To.Discovery.V (Tag' "Query record reply received for {0} (0x{1})"' browseService' sdRef.Raw.ToString ("X"));  	ServiceResolvedEventHandler handler = browseService._resolved;  	if (handler != null) {  		handler (browseService' new ServiceResolvedEventArgs (browseService));  	}  	break;  case ServiceType.TXT:  	if (browseService.TxtRecord != null) {  		browseService.TxtRecord.Dispose ();  	}  	browseService.TxtRecord = new TxtRecord (rdlen' rdata);  	break;  default:  	break;  }  
Magic Number,Mono.Zeroconf.Providers.Bonjour,BrowseService,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The following statement contains a magic number: switch (rrtype) {  case ServiceType.A:  	IPAddress address;  	if (rdlen == 4) {  		// ~4.5 times faster than Marshal.Copy into byte[4]  		uint address_raw = (uint)(Marshal.ReadByte (rdata' 3) << 24);  		address_raw |= (uint)(Marshal.ReadByte (rdata' 2) << 16);  		address_raw |= (uint)(Marshal.ReadByte (rdata' 1) << 8);  		address_raw |= (uint)Marshal.ReadByte (rdata' 0);  		address = new IPAddress (address_raw);  	} else if (rdlen == 16) {  		byte[] address_raw = new byte[rdlen];  		Marshal.Copy (rdata' address_raw' 0' rdlen);  		address = new IPAddress (address_raw' interfaceIndex);  	} else {  		break;  	}  	if (browseService.hostentry == null) {  		browseService.hostentry = new IPHostEntry ();  		browseService.hostentry.HostName = browseService.hosttarget;  	}  	if (browseService.hostentry.AddressList != null) {  		ArrayList list = new ArrayList (browseService.hostentry.AddressList);  		list.Add (address);  		browseService.hostentry.AddressList = list.ToArray (typeof(IPAddress)) as IPAddress[];  	} else {  		browseService.hostentry.AddressList = new IPAddress[] {  			address  		};  	}  	Log.To.Discovery.V (Tag' "Query record reply received for {0} (0x{1})"' browseService' sdRef.Raw.ToString ("X"));  	ServiceResolvedEventHandler handler = browseService._resolved;  	if (handler != null) {  		handler (browseService' new ServiceResolvedEventArgs (browseService));  	}  	break;  case ServiceType.TXT:  	if (browseService.TxtRecord != null) {  		browseService.TxtRecord.Dispose ();  	}  	browseService.TxtRecord = new TxtRecord (rdlen' rdata);  	break;  default:  	break;  }  
Magic Number,Mono.Zeroconf.Providers.Bonjour,BrowseService,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The following statement contains a magic number: if (rdlen == 4) {  	// ~4.5 times faster than Marshal.Copy into byte[4]  	uint address_raw = (uint)(Marshal.ReadByte (rdata' 3) << 24);  	address_raw |= (uint)(Marshal.ReadByte (rdata' 2) << 16);  	address_raw |= (uint)(Marshal.ReadByte (rdata' 1) << 8);  	address_raw |= (uint)Marshal.ReadByte (rdata' 0);  	address = new IPAddress (address_raw);  } else if (rdlen == 16) {  	byte[] address_raw = new byte[rdlen];  	Marshal.Copy (rdata' address_raw' 0' rdlen);  	address = new IPAddress (address_raw' interfaceIndex);  } else {  	break;  }  
Magic Number,Mono.Zeroconf.Providers.Bonjour,BrowseService,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The following statement contains a magic number: if (rdlen == 4) {  	// ~4.5 times faster than Marshal.Copy into byte[4]  	uint address_raw = (uint)(Marshal.ReadByte (rdata' 3) << 24);  	address_raw |= (uint)(Marshal.ReadByte (rdata' 2) << 16);  	address_raw |= (uint)(Marshal.ReadByte (rdata' 1) << 8);  	address_raw |= (uint)Marshal.ReadByte (rdata' 0);  	address = new IPAddress (address_raw);  } else if (rdlen == 16) {  	byte[] address_raw = new byte[rdlen];  	Marshal.Copy (rdata' address_raw' 0' rdlen);  	address = new IPAddress (address_raw' interfaceIndex);  } else {  	break;  }  
Magic Number,Mono.Zeroconf.Providers.Bonjour,BrowseService,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The following statement contains a magic number: if (rdlen == 4) {  	// ~4.5 times faster than Marshal.Copy into byte[4]  	uint address_raw = (uint)(Marshal.ReadByte (rdata' 3) << 24);  	address_raw |= (uint)(Marshal.ReadByte (rdata' 2) << 16);  	address_raw |= (uint)(Marshal.ReadByte (rdata' 1) << 8);  	address_raw |= (uint)Marshal.ReadByte (rdata' 0);  	address = new IPAddress (address_raw);  } else if (rdlen == 16) {  	byte[] address_raw = new byte[rdlen];  	Marshal.Copy (rdata' address_raw' 0' rdlen);  	address = new IPAddress (address_raw' interfaceIndex);  } else {  	break;  }  
Magic Number,Mono.Zeroconf.Providers.Bonjour,BrowseService,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The following statement contains a magic number: if (rdlen == 4) {  	// ~4.5 times faster than Marshal.Copy into byte[4]  	uint address_raw = (uint)(Marshal.ReadByte (rdata' 3) << 24);  	address_raw |= (uint)(Marshal.ReadByte (rdata' 2) << 16);  	address_raw |= (uint)(Marshal.ReadByte (rdata' 1) << 8);  	address_raw |= (uint)Marshal.ReadByte (rdata' 0);  	address = new IPAddress (address_raw);  } else if (rdlen == 16) {  	byte[] address_raw = new byte[rdlen];  	Marshal.Copy (rdata' address_raw' 0' rdlen);  	address = new IPAddress (address_raw' interfaceIndex);  } else {  	break;  }  
Magic Number,Mono.Zeroconf.Providers.Bonjour,BrowseService,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The following statement contains a magic number: if (rdlen == 4) {  	// ~4.5 times faster than Marshal.Copy into byte[4]  	uint address_raw = (uint)(Marshal.ReadByte (rdata' 3) << 24);  	address_raw |= (uint)(Marshal.ReadByte (rdata' 2) << 16);  	address_raw |= (uint)(Marshal.ReadByte (rdata' 1) << 8);  	address_raw |= (uint)Marshal.ReadByte (rdata' 0);  	address = new IPAddress (address_raw);  } else if (rdlen == 16) {  	byte[] address_raw = new byte[rdlen];  	Marshal.Copy (rdata' address_raw' 0' rdlen);  	address = new IPAddress (address_raw' interfaceIndex);  } else {  	break;  }  
Magic Number,Mono.Zeroconf.Providers.Bonjour,BrowseService,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The following statement contains a magic number: if (rdlen == 4) {  	// ~4.5 times faster than Marshal.Copy into byte[4]  	uint address_raw = (uint)(Marshal.ReadByte (rdata' 3) << 24);  	address_raw |= (uint)(Marshal.ReadByte (rdata' 2) << 16);  	address_raw |= (uint)(Marshal.ReadByte (rdata' 1) << 8);  	address_raw |= (uint)Marshal.ReadByte (rdata' 0);  	address = new IPAddress (address_raw);  } else if (rdlen == 16) {  	byte[] address_raw = new byte[rdlen];  	Marshal.Copy (rdata' address_raw' 0' rdlen);  	address = new IPAddress (address_raw' interfaceIndex);  } else {  	break;  }  
Magic Number,Mono.Zeroconf.Providers.Bonjour,BrowseService,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The following statement contains a magic number: if (rdlen == 4) {  	// ~4.5 times faster than Marshal.Copy into byte[4]  	uint address_raw = (uint)(Marshal.ReadByte (rdata' 3) << 24);  	address_raw |= (uint)(Marshal.ReadByte (rdata' 2) << 16);  	address_raw |= (uint)(Marshal.ReadByte (rdata' 1) << 8);  	address_raw |= (uint)Marshal.ReadByte (rdata' 0);  	address = new IPAddress (address_raw);  } else if (rdlen == 16) {  	byte[] address_raw = new byte[rdlen];  	Marshal.Copy (rdata' address_raw' 0' rdlen);  	address = new IPAddress (address_raw' interfaceIndex);  } else {  	break;  }  
Magic Number,Mono.Zeroconf.Providers.Bonjour,BrowseService,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The following statement contains a magic number: address_raw |= (uint)(Marshal.ReadByte (rdata' 2) << 16);  
Magic Number,Mono.Zeroconf.Providers.Bonjour,BrowseService,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The following statement contains a magic number: address_raw |= (uint)(Marshal.ReadByte (rdata' 2) << 16);  
Magic Number,Mono.Zeroconf.Providers.Bonjour,BrowseService,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The following statement contains a magic number: address_raw |= (uint)(Marshal.ReadByte (rdata' 1) << 8);  
Magic Number,Mono.Zeroconf.Providers.Bonjour,BrowseService,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The following statement contains a magic number: if (rdlen == 16) {  	byte[] address_raw = new byte[rdlen];  	Marshal.Copy (rdata' address_raw' 0' rdlen);  	address = new IPAddress (address_raw' interfaceIndex);  } else {  	break;  }  
Magic Number,Mono.Zeroconf.Providers.Bonjour,ServiceBrowser,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\ServiceBrowser.cs,ProcessStart,The following statement contains a magic number: if (error != ServiceError.NoError) {  	if ((int)error == -65563) {  		Log.To.Discovery.E (TAG' "mDNS daemon not started' throwing...");  	} else {  		Log.To.Discovery.E (TAG' "Got error in DNSServiceBrowse ({0})' throwing..."' error);  	}  	throw new ServiceErrorException (error);  }  
Magic Number,Mono.Zeroconf.Providers.Bonjour,ServiceBrowser,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\ServiceBrowser.cs,ProcessStart,The following statement contains a magic number: if ((int)error == -65563) {  	Log.To.Discovery.E (TAG' "mDNS daemon not started' throwing...");  } else {  	Log.To.Discovery.E (TAG' "Got error in DNSServiceBrowse ({0})' throwing..."' error);  }  
Magic Number,Mono.Zeroconf.Providers.Bonjour,ServiceParams,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\ServiceParams.cs,ServiceParams,The following statement contains a magic number: Timeout = TimeSpan.FromSeconds (30);  
Magic Number,Mono.Zeroconf.Providers.Bonjour,ServiceRef,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\ServiceRef.cs,Deallocate,The following statement contains a magic number: if (localRaw != IntPtr.Zero) {  	Log.To.Discovery.V (Tag' "Deallocating ServiceRef (0x{0})"' localRaw.ToString ("X"));  	Task.Delay (1000).ContinueWith (t => Native.DNSServiceRefDeallocate (localRaw));  }  
Magic Number,Mono.Zeroconf.Providers.Bonjour,ServiceRef,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\ServiceRef.cs,Deallocate,The following statement contains a magic number: Task.Delay (1000).ContinueWith (t => Native.DNSServiceRefDeallocate (localRaw));  
Magic Number,Mono.Zeroconf.Providers.Bonjour,TxtRecord,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\TxtRecord.cs,TxtRecord,The following statement contains a magic number: handle = Marshal.AllocHGlobal (16);  
