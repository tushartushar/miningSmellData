Implementation smell,Namespace,Class,File,Method,Description
Long Method,Listener,MainClass,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Program.cs,Main,The method has 199 lines of code.
Complex Method,Listener,MainClass,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Program.cs,Main,Cyclomatic complexity of the method is 16
Complex Method,Mono.Options,StringCoda,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,CreateWrappedLinesIterator,Cyclomatic complexity of the method is 8
Complex Method,Mono.Options,Option,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,ParsePrototype,Cyclomatic complexity of the method is 9
Complex Method,Mono.Options,Option,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,AddSeparators,Cyclomatic complexity of the method is 17
Complex Method,Mono.Options,ArgumentSource,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,GetArguments,Cyclomatic complexity of the method is 9
Complex Method,Mono.Options,OptionSet,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,Mono.Options,OptionSet,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,Mono.Options,OptionSet,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,ParseBundledValue,Cyclomatic complexity of the method is 10
Complex Method,Mono.Options,OptionSet,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,WriteOptionDescriptions,Cyclomatic complexity of the method is 10
Complex Method,Mono.Options,OptionSet,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,GetDescription,Cyclomatic complexity of the method is 20
Long Parameter List,Listener,MainClass,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Program.cs,SetupReplication,The method has 7 parameters.
Long Parameter List,Mono.Options,OptionSet,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,GetOptionParts,The method has 5 parameters.
Long Parameter List,Mono.Options,OptionSet,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,WriteDescription,The method has 5 parameters.
Long Statement,Listener,MainClass,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Program.cs,Main,The length of the statement  "	var manager = alternateDir != null ? new Manager (new DirectoryInfo (alternateDir)' ManagerOptions.Default) : Manager.SharedInstance; " is 133.
Long Statement,Listener,MainClass,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Program.cs,Main,The length of the statement  "		replicator = SetupReplication (manager' continuous' createTarget' pushUrl ?? pullUrl' pullUrl != null' userName' password); " is 123.
Long Statement,Listener,MainClass,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Program.cs,SetupReplication,The length of the statement  "		Logger.I ("Listener"' "*** Replicator status changed ({0} {1}/{2}) ***"' e.Status' e.CompletedChangesCount' e.ChangesCount); " is 124.
Long Statement,Mono.Options,StringCoda,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,GetNextWidth,The length of the statement  "			throw new ArgumentOutOfRangeException ("widths"' string.Format ("Element must be >= {0}' was {1}."' minWidth.Length' curWidth)); " is 128.
Long Statement,Mono.Options,OptionValueCollection,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,AssertValid,The length of the statement  "		throw new OptionException (string.Format (c.OptionSet.MessageLocalizer ("Missing required value for option '{0}'.")' c.OptionName)' c.OptionName); " is 146.
Long Statement,Mono.Options,Option,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,Parse,The length of the statement  "	bool nullable = ti.IsValueType && ti.IsGenericType && !ti.IsGenericTypeDefinition && ti.GetGenericTypeDefinition () == typeof(Nullable<>); " is 138.
Long Statement,Mono.Options,Option,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,Parse,The length of the statement  "		throw new OptionException (string.Format (c.OptionSet.MessageLocalizer ("Could not convert string `{0}' to type {1} for option `{2}'.")' value' targetType.Name' c.OptionName)' c.OptionName' e); " is 193.
Long Statement,Mono.Options,Option,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,ParsePrototype,The length of the statement  "			throw new ArgumentException (string.Format ("Conflicting option types: '{0}' vs. '{1}'."' type' name [end])' "prototype"); " is 122.
Long Statement,Mono.Options,Option,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,ParsePrototype,The length of the statement  "		throw new ArgumentException (string.Format ("Cannot provide key/value separators for Options taking {0} value(s)."' count)' "prototype"); " is 137.
Long Statement,Mono.Options,OptionSet,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,ParseValue,The length of the statement  "		foreach (string o in c.Option.ValueSeparators != null ? option.Split (c.Option.ValueSeparators' c.Option.MaxValueCount - c.OptionValues.Count' StringSplitOptions.None) : new string[] { " is 184.
Long Statement,Mono.Options,OptionSet,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,ParseValue,The length of the statement  "		throw new OptionException (localizer (string.Format ("Error: Found {0} option values when expecting {1}."' c.OptionValues.Count' c.Option.MaxValueCount))' c.OptionName); " is 169.
Long Statement,Mono.Options,OptionSet,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,ParseBool,The length of the statement  "	if (n.Length >= 1 && (n [n.Length - 1] == '+' || n [n.Length - 1] == '-') && Contains ((rn = n.Substring (0' n.Length - 1)))) { " is 127.
Long Statement,Mono.Options,OptionSet,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,ParseBundledValue,The length of the statement  "			throw new OptionException (string.Format (localizer ("Cannot use unregistered option '{0}' in bundle '{1}'.")' rn' f + n)' null); " is 129.
Complex Conditional,Mono.Options,Option,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,Option,The conditional expression  "Array.IndexOf (names' "<>") >= 0 && ((names.Length == 1 && this.type != OptionValueType.None) || (names.Length > 1 && this.MaxValueCount > 1))"  is complex.
Complex Conditional,Mono.Options,OptionSet,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n [n.Length - 1] == '+' || n [n.Length - 1] == '-') && Contains ((rn = n.Substring (0' n.Length - 1)))"  is complex.
Magic Number,Listener,MainClass,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Program.cs,Main,The following statement contains a magic number: if (passwordMap.Count > 0) {  	foreach (var entry in passwordMap) {  		#pragma  		manager.RegisterEncryptionKey (entry.Key' new SymmetricKey (entry.Value));  		#pragma  	}  }  
Magic Number,Listener,MainClass,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Program.cs,Main,The following statement contains a magic number: if (passwordMap.Count > 0) {  	foreach (var entry in passwordMap) {  		#pragma  		manager.RegisterEncryptionKey (entry.Key' new SymmetricKey (entry.Value));  		#pragma  	}  }  
Magic Number,Listener,MainClass,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Program.cs,Main,The following statement contains a magic number: foreach (var entry in passwordMap) {  	#pragma  	manager.RegisterEncryptionKey (entry.Key' new SymmetricKey (entry.Value));  	#pragma  }  
Magic Number,Listener,MainClass,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Program.cs,Main,The following statement contains a magic number: foreach (var entry in passwordMap) {  	#pragma  	manager.RegisterEncryptionKey (entry.Key' new SymmetricKey (entry.Value));  	#pragma  }  
Magic Number,Listener,MainClass,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Program.cs,Main,The following statement contains a magic number: if (replicator != null) {  	replicator.Stop ();  	Thread.Sleep (5000);  }  
Magic Number,Listener,MainClass,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Program.cs,Main,The following statement contains a magic number: Thread.Sleep (5000);  
Magic Number,Listener,MainClass,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Program.cs,RegisterPassword,The following statement contains a magic number: if (userAndPass.Length != 2) {  	throw new ArgumentException ( + "the format <name>=<password>");  }  
Magic Number,Mono.Options,OptionSet,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  	int written = 0;  	if (p.Hidden)  		continue;  	Category c = p as Category;  	if (c != null) {  		WriteDescription (o' p.Description' ""' 80' 80);  		continue;  	}  	if (!WriteOptionPrototype (o' p' ref written))  		continue;  	if (written < OptionWidth)  		o.Write (new string (' '' OptionWidth - written));  	else {  		o.WriteLine ();  		o.Write (new string (' '' OptionWidth));  	}  	WriteDescription (o' p.Description' new string (' '' OptionWidth + 2)' Description_FirstWidth' Description_RemWidth);  }  
Magic Number,Mono.Options,OptionSet,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  	int written = 0;  	if (p.Hidden)  		continue;  	Category c = p as Category;  	if (c != null) {  		WriteDescription (o' p.Description' ""' 80' 80);  		continue;  	}  	if (!WriteOptionPrototype (o' p' ref written))  		continue;  	if (written < OptionWidth)  		o.Write (new string (' '' OptionWidth - written));  	else {  		o.WriteLine ();  		o.Write (new string (' '' OptionWidth));  	}  	WriteDescription (o' p.Description' new string (' '' OptionWidth + 2)' Description_FirstWidth' Description_RemWidth);  }  
Magic Number,Mono.Options,OptionSet,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  	int written = 0;  	if (p.Hidden)  		continue;  	Category c = p as Category;  	if (c != null) {  		WriteDescription (o' p.Description' ""' 80' 80);  		continue;  	}  	if (!WriteOptionPrototype (o' p' ref written))  		continue;  	if (written < OptionWidth)  		o.Write (new string (' '' OptionWidth - written));  	else {  		o.WriteLine ();  		o.Write (new string (' '' OptionWidth));  	}  	WriteDescription (o' p.Description' new string (' '' OptionWidth + 2)' Description_FirstWidth' Description_RemWidth);  }  
Magic Number,Mono.Options,OptionSet,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: if (c != null) {  	WriteDescription (o' p.Description' ""' 80' 80);  	continue;  }  
Magic Number,Mono.Options,OptionSet,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: if (c != null) {  	WriteDescription (o' p.Description' ""' 80' 80);  	continue;  }  
Magic Number,Mono.Options,OptionSet,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: WriteDescription (o' p.Description' ""' 80' 80);  
Magic Number,Mono.Options,OptionSet,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: WriteDescription (o' p.Description' ""' 80' 80);  
Magic Number,Mono.Options,OptionSet,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: WriteDescription (o' p.Description' new string (' '' OptionWidth + 2)' Description_FirstWidth' Description_RemWidth);  
Magic Number,Mono.Options,OptionSet,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (ArgumentSource s in sources) {  	string[] names = s.GetNames ();  	if (names == null || names.Length == 0)  		continue;  	int written = 0;  	Write (o' ref written' "  ");  	Write (o' ref written' names [0]);  	for (int i = 1; i < names.Length; ++i) {  		Write (o' ref written' "' ");  		Write (o' ref written' names [i]);  	}  	if (written < OptionWidth)  		o.Write (new string (' '' OptionWidth - written));  	else {  		o.WriteLine ();  		o.Write (new string (' '' OptionWidth));  	}  	WriteDescription (o' s.Description' new string (' '' OptionWidth + 2)' Description_FirstWidth' Description_RemWidth);  }  
Magic Number,Mono.Options,OptionSet,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: WriteDescription (o' s.Description' new string (' '' OptionWidth + 2)' Description_FirstWidth' Description_RemWidth);  
Missing Default,Mono.Options,OptionSet,F:\newReposMay17\couchbase_couchbase-lite-net\src\ListenerComponent\ListenerConsole\Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType) {  case OptionValueType.None:  	c.OptionValues.Add (n);  	c.Option.Invoke (c);  	break;  case OptionValueType.Optional:  case OptionValueType.Required:  	ParseValue (v' c);  	break;  }  
