Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Mono.Zeroconf.Providers.Bonjour,BrowseService,C:\repos\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnResolveReply,The method has 10 parameters. Parameters: sdRef' flags' interfaceIndex' errorCode' fullname' hosttarget' port' txtLen' txtRecord' context
Long Parameter List,Mono.Zeroconf.Providers.Bonjour,BrowseService,C:\repos\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The method has 11 parameters. Parameters: sdRef' flags' interfaceIndex' errorCode' fullname' rrtype' rrclass' rdlen' rdata' ttl' context
Long Parameter List,Mono.Zeroconf.Providers.Bonjour,Native,C:\repos\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\Native.cs,DNSServiceBrowse,The method has 7 parameters. Parameters: sdRef' flags' interfaceIndex' regtype' domain' callBack' context
Long Parameter List,Mono.Zeroconf.Providers.Bonjour,Native,C:\repos\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\Native.cs,DNSServiceResolve,The method has 8 parameters. Parameters: sdRef' flags' interfaceIndex' name' regtype' domain' callBack' context
Long Parameter List,Mono.Zeroconf.Providers.Bonjour,Native,C:\repos\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\Native.cs,DNSServiceRegister,The method has 12 parameters. Parameters: sdRef' flags' interfaceIndex' name' regtype' domain' host' port' txtLen' txtRecord' callBack' context
Long Parameter List,Mono.Zeroconf.Providers.Bonjour,Native,C:\repos\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\Native.cs,DNSServiceQueryRecord,The method has 8 parameters. Parameters: sdRef' flags' interfaceIndex' fullname' rrtype' rrclass' callBack' context
Long Parameter List,Mono.Zeroconf.Providers.Bonjour,Native,C:\repos\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\Native.cs,TXTRecordGetItemAtIndex,The method has 7 parameters. Parameters: txtLen' txtRecord' index' keyBufLen' key' valueLen' value
Long Parameter List,Mono.Zeroconf.Providers.Bonjour,RegisterService,C:\repos\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\RegisterService.cs,OnRegisterReply,The method has 7 parameters. Parameters: sdRef' flags' errorCode' name' regtype' domain' context
Long Parameter List,Mono.Zeroconf.Providers.Bonjour,ServiceBrowser,C:\repos\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\ServiceBrowser.cs,OnBrowseReply,The method has 8 parameters. Parameters: sdRef' flags' interfaceIndex' errorCode' serviceName' regtype' replyDomain' context
Magic Number,Mono.Zeroconf.Providers.Bonjour,BrowseService,C:\repos\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The following statement contains a magic number: switch(rrtype) {                  case ServiceType.A:                      IPAddress address;                        if(rdlen == 4) {                             // ~4.5 times faster than Marshal.Copy into byte[4]                          uint address_raw = (uint)(Marshal.ReadByte (rdata' 3) << 24);                          address_raw |= (uint)(Marshal.ReadByte (rdata' 2) << 16);                          address_raw |= (uint)(Marshal.ReadByte (rdata' 1) << 8);                          address_raw |= (uint)Marshal.ReadByte (rdata' 0);                            address = new IPAddress(address_raw);                      } else if(rdlen == 16) {                          byte [] address_raw = new byte[rdlen];                          Marshal.Copy(rdata' address_raw' 0' rdlen);                          address = new IPAddress(address_raw' interfaceIndex);                      } else {                          break;                      }                        if(browseService.hostentry == null) {                          browseService.hostentry = new IPHostEntry();                          browseService.hostentry.HostName = browseService.hosttarget;                      }                                            if(browseService.hostentry.AddressList != null) {                          ArrayList list = new ArrayList(browseService.hostentry.AddressList);                          list.Add(address);                          browseService.hostentry.AddressList = list.ToArray(typeof(IPAddress)) as IPAddress [];                      } else {                          browseService.hostentry.AddressList = new IPAddress [] { address };                      }                        Log.To.Discovery.V(Tag' "Query record reply received for {0} (0x{1})"' browseService' sdRef.Raw.ToString("X"));                      ServiceResolvedEventHandler handler = browseService._resolved;                      if(handler != null) {                          handler(browseService' new ServiceResolvedEventArgs(browseService));                      }                                            break;                  case ServiceType.TXT:                      if(browseService.TxtRecord != null) {                          browseService.TxtRecord.Dispose();                      }                                    browseService.TxtRecord = new TxtRecord(rdlen' rdata);                      break;                  default:                      break;              }
Magic Number,Mono.Zeroconf.Providers.Bonjour,BrowseService,C:\repos\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The following statement contains a magic number: switch(rrtype) {                  case ServiceType.A:                      IPAddress address;                        if(rdlen == 4) {                             // ~4.5 times faster than Marshal.Copy into byte[4]                          uint address_raw = (uint)(Marshal.ReadByte (rdata' 3) << 24);                          address_raw |= (uint)(Marshal.ReadByte (rdata' 2) << 16);                          address_raw |= (uint)(Marshal.ReadByte (rdata' 1) << 8);                          address_raw |= (uint)Marshal.ReadByte (rdata' 0);                            address = new IPAddress(address_raw);                      } else if(rdlen == 16) {                          byte [] address_raw = new byte[rdlen];                          Marshal.Copy(rdata' address_raw' 0' rdlen);                          address = new IPAddress(address_raw' interfaceIndex);                      } else {                          break;                      }                        if(browseService.hostentry == null) {                          browseService.hostentry = new IPHostEntry();                          browseService.hostentry.HostName = browseService.hosttarget;                      }                                            if(browseService.hostentry.AddressList != null) {                          ArrayList list = new ArrayList(browseService.hostentry.AddressList);                          list.Add(address);                          browseService.hostentry.AddressList = list.ToArray(typeof(IPAddress)) as IPAddress [];                      } else {                          browseService.hostentry.AddressList = new IPAddress [] { address };                      }                        Log.To.Discovery.V(Tag' "Query record reply received for {0} (0x{1})"' browseService' sdRef.Raw.ToString("X"));                      ServiceResolvedEventHandler handler = browseService._resolved;                      if(handler != null) {                          handler(browseService' new ServiceResolvedEventArgs(browseService));                      }                                            break;                  case ServiceType.TXT:                      if(browseService.TxtRecord != null) {                          browseService.TxtRecord.Dispose();                      }                                    browseService.TxtRecord = new TxtRecord(rdlen' rdata);                      break;                  default:                      break;              }
Magic Number,Mono.Zeroconf.Providers.Bonjour,BrowseService,C:\repos\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The following statement contains a magic number: switch(rrtype) {                  case ServiceType.A:                      IPAddress address;                        if(rdlen == 4) {                             // ~4.5 times faster than Marshal.Copy into byte[4]                          uint address_raw = (uint)(Marshal.ReadByte (rdata' 3) << 24);                          address_raw |= (uint)(Marshal.ReadByte (rdata' 2) << 16);                          address_raw |= (uint)(Marshal.ReadByte (rdata' 1) << 8);                          address_raw |= (uint)Marshal.ReadByte (rdata' 0);                            address = new IPAddress(address_raw);                      } else if(rdlen == 16) {                          byte [] address_raw = new byte[rdlen];                          Marshal.Copy(rdata' address_raw' 0' rdlen);                          address = new IPAddress(address_raw' interfaceIndex);                      } else {                          break;                      }                        if(browseService.hostentry == null) {                          browseService.hostentry = new IPHostEntry();                          browseService.hostentry.HostName = browseService.hosttarget;                      }                                            if(browseService.hostentry.AddressList != null) {                          ArrayList list = new ArrayList(browseService.hostentry.AddressList);                          list.Add(address);                          browseService.hostentry.AddressList = list.ToArray(typeof(IPAddress)) as IPAddress [];                      } else {                          browseService.hostentry.AddressList = new IPAddress [] { address };                      }                        Log.To.Discovery.V(Tag' "Query record reply received for {0} (0x{1})"' browseService' sdRef.Raw.ToString("X"));                      ServiceResolvedEventHandler handler = browseService._resolved;                      if(handler != null) {                          handler(browseService' new ServiceResolvedEventArgs(browseService));                      }                                            break;                  case ServiceType.TXT:                      if(browseService.TxtRecord != null) {                          browseService.TxtRecord.Dispose();                      }                                    browseService.TxtRecord = new TxtRecord(rdlen' rdata);                      break;                  default:                      break;              }
Magic Number,Mono.Zeroconf.Providers.Bonjour,BrowseService,C:\repos\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The following statement contains a magic number: switch(rrtype) {                  case ServiceType.A:                      IPAddress address;                        if(rdlen == 4) {                             // ~4.5 times faster than Marshal.Copy into byte[4]                          uint address_raw = (uint)(Marshal.ReadByte (rdata' 3) << 24);                          address_raw |= (uint)(Marshal.ReadByte (rdata' 2) << 16);                          address_raw |= (uint)(Marshal.ReadByte (rdata' 1) << 8);                          address_raw |= (uint)Marshal.ReadByte (rdata' 0);                            address = new IPAddress(address_raw);                      } else if(rdlen == 16) {                          byte [] address_raw = new byte[rdlen];                          Marshal.Copy(rdata' address_raw' 0' rdlen);                          address = new IPAddress(address_raw' interfaceIndex);                      } else {                          break;                      }                        if(browseService.hostentry == null) {                          browseService.hostentry = new IPHostEntry();                          browseService.hostentry.HostName = browseService.hosttarget;                      }                                            if(browseService.hostentry.AddressList != null) {                          ArrayList list = new ArrayList(browseService.hostentry.AddressList);                          list.Add(address);                          browseService.hostentry.AddressList = list.ToArray(typeof(IPAddress)) as IPAddress [];                      } else {                          browseService.hostentry.AddressList = new IPAddress [] { address };                      }                        Log.To.Discovery.V(Tag' "Query record reply received for {0} (0x{1})"' browseService' sdRef.Raw.ToString("X"));                      ServiceResolvedEventHandler handler = browseService._resolved;                      if(handler != null) {                          handler(browseService' new ServiceResolvedEventArgs(browseService));                      }                                            break;                  case ServiceType.TXT:                      if(browseService.TxtRecord != null) {                          browseService.TxtRecord.Dispose();                      }                                    browseService.TxtRecord = new TxtRecord(rdlen' rdata);                      break;                  default:                      break;              }
Magic Number,Mono.Zeroconf.Providers.Bonjour,BrowseService,C:\repos\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The following statement contains a magic number: switch(rrtype) {                  case ServiceType.A:                      IPAddress address;                        if(rdlen == 4) {                             // ~4.5 times faster than Marshal.Copy into byte[4]                          uint address_raw = (uint)(Marshal.ReadByte (rdata' 3) << 24);                          address_raw |= (uint)(Marshal.ReadByte (rdata' 2) << 16);                          address_raw |= (uint)(Marshal.ReadByte (rdata' 1) << 8);                          address_raw |= (uint)Marshal.ReadByte (rdata' 0);                            address = new IPAddress(address_raw);                      } else if(rdlen == 16) {                          byte [] address_raw = new byte[rdlen];                          Marshal.Copy(rdata' address_raw' 0' rdlen);                          address = new IPAddress(address_raw' interfaceIndex);                      } else {                          break;                      }                        if(browseService.hostentry == null) {                          browseService.hostentry = new IPHostEntry();                          browseService.hostentry.HostName = browseService.hosttarget;                      }                                            if(browseService.hostentry.AddressList != null) {                          ArrayList list = new ArrayList(browseService.hostentry.AddressList);                          list.Add(address);                          browseService.hostentry.AddressList = list.ToArray(typeof(IPAddress)) as IPAddress [];                      } else {                          browseService.hostentry.AddressList = new IPAddress [] { address };                      }                        Log.To.Discovery.V(Tag' "Query record reply received for {0} (0x{1})"' browseService' sdRef.Raw.ToString("X"));                      ServiceResolvedEventHandler handler = browseService._resolved;                      if(handler != null) {                          handler(browseService' new ServiceResolvedEventArgs(browseService));                      }                                            break;                  case ServiceType.TXT:                      if(browseService.TxtRecord != null) {                          browseService.TxtRecord.Dispose();                      }                                    browseService.TxtRecord = new TxtRecord(rdlen' rdata);                      break;                  default:                      break;              }
Magic Number,Mono.Zeroconf.Providers.Bonjour,BrowseService,C:\repos\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The following statement contains a magic number: switch(rrtype) {                  case ServiceType.A:                      IPAddress address;                        if(rdlen == 4) {                             // ~4.5 times faster than Marshal.Copy into byte[4]                          uint address_raw = (uint)(Marshal.ReadByte (rdata' 3) << 24);                          address_raw |= (uint)(Marshal.ReadByte (rdata' 2) << 16);                          address_raw |= (uint)(Marshal.ReadByte (rdata' 1) << 8);                          address_raw |= (uint)Marshal.ReadByte (rdata' 0);                            address = new IPAddress(address_raw);                      } else if(rdlen == 16) {                          byte [] address_raw = new byte[rdlen];                          Marshal.Copy(rdata' address_raw' 0' rdlen);                          address = new IPAddress(address_raw' interfaceIndex);                      } else {                          break;                      }                        if(browseService.hostentry == null) {                          browseService.hostentry = new IPHostEntry();                          browseService.hostentry.HostName = browseService.hosttarget;                      }                                            if(browseService.hostentry.AddressList != null) {                          ArrayList list = new ArrayList(browseService.hostentry.AddressList);                          list.Add(address);                          browseService.hostentry.AddressList = list.ToArray(typeof(IPAddress)) as IPAddress [];                      } else {                          browseService.hostentry.AddressList = new IPAddress [] { address };                      }                        Log.To.Discovery.V(Tag' "Query record reply received for {0} (0x{1})"' browseService' sdRef.Raw.ToString("X"));                      ServiceResolvedEventHandler handler = browseService._resolved;                      if(handler != null) {                          handler(browseService' new ServiceResolvedEventArgs(browseService));                      }                                            break;                  case ServiceType.TXT:                      if(browseService.TxtRecord != null) {                          browseService.TxtRecord.Dispose();                      }                                    browseService.TxtRecord = new TxtRecord(rdlen' rdata);                      break;                  default:                      break;              }
Magic Number,Mono.Zeroconf.Providers.Bonjour,BrowseService,C:\repos\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\BrowseService.cs,OnQueryRecordReply,The following statement contains a magic number: switch(rrtype) {                  case ServiceType.A:                      IPAddress address;                        if(rdlen == 4) {                             // ~4.5 times faster than Marshal.Copy into byte[4]                          uint address_raw = (uint)(Marshal.ReadByte (rdata' 3) << 24);                          address_raw |= (uint)(Marshal.ReadByte (rdata' 2) << 16);                          address_raw |= (uint)(Marshal.ReadByte (rdata' 1) << 8);                          address_raw |= (uint)Marshal.ReadByte (rdata' 0);                            address = new IPAddress(address_raw);                      } else if(rdlen == 16) {                          byte [] address_raw = new byte[rdlen];                          Marshal.Copy(rdata' address_raw' 0' rdlen);                          address = new IPAddress(address_raw' interfaceIndex);                      } else {                          break;                      }                        if(browseService.hostentry == null) {                          browseService.hostentry = new IPHostEntry();                          browseService.hostentry.HostName = browseService.hosttarget;                      }                                            if(browseService.hostentry.AddressList != null) {                          ArrayList list = new ArrayList(browseService.hostentry.AddressList);                          list.Add(address);                          browseService.hostentry.AddressList = list.ToArray(typeof(IPAddress)) as IPAddress [];                      } else {                          browseService.hostentry.AddressList = new IPAddress [] { address };                      }                        Log.To.Discovery.V(Tag' "Query record reply received for {0} (0x{1})"' browseService' sdRef.Raw.ToString("X"));                      ServiceResolvedEventHandler handler = browseService._resolved;                      if(handler != null) {                          handler(browseService' new ServiceResolvedEventArgs(browseService));                      }                                            break;                  case ServiceType.TXT:                      if(browseService.TxtRecord != null) {                          browseService.TxtRecord.Dispose();                      }                                    browseService.TxtRecord = new TxtRecord(rdlen' rdata);                      break;                  default:                      break;              }
Magic Number,Mono.Zeroconf.Providers.Bonjour,RegisterService,C:\repos\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\RegisterService.cs,RegisterService,The following statement contains a magic number: if (!_primedEvent.Wait(10000)) {                  throw new TimeoutException("Timeout waiting for mDNS daemon to start");              }
Magic Number,Mono.Zeroconf.Providers.Bonjour,RegisterService,C:\repos\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\RegisterService.cs,RegisterService,The following statement contains a magic number: if (!_primedEvent.Wait(10000)) {                  throw new TimeoutException("Timeout waiting for mDNS daemon to start");              }
Magic Number,Mono.Zeroconf.Providers.Bonjour,ServiceBrowser,C:\repos\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\ServiceBrowser.cs,ServiceBrowser,The following statement contains a magic number: if (!_primedEvent.Wait(10000)) {                  throw new TimeoutException("Timeout waiting for mDNS daemon to start");              }
Magic Number,Mono.Zeroconf.Providers.Bonjour,ServiceBrowser,C:\repos\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\ServiceBrowser.cs,ProcessStart,The following statement contains a magic number: if(error != ServiceError.NoError) {                  if ((int)error == -65563) {                      Log.To.Discovery.E(TAG' "mDNS daemon not started' throwing...");                  } else {                      Log.To.Discovery.E(TAG' "Got error in DNSServiceBrowse ({0})' throwing..."' error);                  }                    throw new ServiceErrorException(error);              }
Magic Number,Mono.Zeroconf.Providers.Bonjour,ServiceParams,C:\repos\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\ServiceParams.cs,ServiceParams,The following statement contains a magic number: Timeout = TimeSpan.FromSeconds(30);
Magic Number,Mono.Zeroconf.Providers.Bonjour,ServiceRef,C:\repos\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\ServiceRef.cs,Deallocate,The following statement contains a magic number: if (localRaw != IntPtr.Zero) {                  Log.To.Discovery.V(Tag' "Deallocating ServiceRef (0x{0})"' localRaw.ToString("X"));                  Task.Delay(1000).ContinueWith(t => Native.DNSServiceRefDeallocate(localRaw));              }
Magic Number,Mono.Zeroconf.Providers.Bonjour,TxtRecord,C:\repos\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\TxtRecord.cs,TxtRecord,The following statement contains a magic number: handle = Marshal.AllocHGlobal(16);
Magic Number,Mono.Zeroconf.Providers.Bonjour,TxtRecord,C:\repos\couchbase_couchbase-lite-net\src\ListenerComponent\Bonjour\Couchbase.Lite.Listener.Bonjour.Shared\Mono.Zeroconf.Providers.Bonjour\TxtRecord.cs,GetItemAt,The following statement contains a magic number: byte [] key = new byte[32];
