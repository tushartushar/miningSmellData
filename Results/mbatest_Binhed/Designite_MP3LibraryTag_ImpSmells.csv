Implementation smell,Namespace,Class,File,Method,Description
Long Method,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,The method has 103 lines of code.
Long Method,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,The method has 101 lines of code.
Long Method,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,GetStyle,The method has 384 lines of code.
Long Method,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The method has 133 lines of code.
Long Method,MP3Library,MusicMatchTag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MusicMatchTag,The method has 112 lines of code.
Long Method,MP3Library,ID3Tag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID3Tag,The method has 346 lines of code.
Complex Method,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,Cyclomatic complexity of the method is 47
Complex Method,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,Cyclomatic complexity of the method is 46
Complex Method,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,CutMP3,Cyclomatic complexity of the method is 8
Complex Method,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,GetStyle,Cyclomatic complexity of the method is 378
Complex Method,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,GetArtType,Cyclomatic complexity of the method is 63
Complex Method,MP3Library,WMA_Content_Block,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_Content_Block,Cyclomatic complexity of the method is 70
Complex Method,MP3Library,WMA_extended_attribute,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_extended_attribute,Cyclomatic complexity of the method is 26
Complex Method,MP3Library,MusicMatchTag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MusicMatchTag,Cyclomatic complexity of the method is 20
Complex Method,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,FrameSize,Cyclomatic complexity of the method is 9
Complex Method,MP3Library,ID3Tag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID3Tag,Cyclomatic complexity of the method is 231
Long Statement,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The length of the statement  "		int flags = (int)(((inputheader [4] & 255) << 24) | ((inputheader [5] & 255) << 16) | ((inputheader [6] & 255) << 8) | ((inputheader [7] & 255))); " is 146.
Long Statement,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The length of the statement  "			intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255))); " is 149.
Long Statement,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,IsValidHeader,The length of the statement  "	return (((getFrameSync () & 2047) == 2047) && ((getVersionIndex () & 3) != 1) && ((getLayerIndex () & 3) != 0) && ((getBitrateIndex () & 15) != 0) && ((getBitrateIndex () & 15) != 15) && ((getFrequencyIndex () & 3) != 3) && ((getEmphasisIndex () & 3) != 2)); " is 258.
Long Statement,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getNumberOfFrames,The length of the statement  "		double medFrameSize = (double)(((getLayerIndex () == 3) ? 12 : 144) * ((1000.0 * (float)getBitrate ()) / (float)getFrequency ())); " is 130.
Long Statement,MP3Library,WMA_Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,FillGuids,The length of the statement  "	guids.Add (new Guid ("7A079BB6-DAA4-4e12-A5CA-91D38DC11A8D")' "ASF_Content_Encryption_System_Windows_Media_DRM_Network_Devices"); " is 129.
Complex Conditional,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The conditional expression  "inputheader [0] == 88 && inputheader [1] == 105 && inputheader [2] == 110 && inputheader [3] == 103"  is complex.
Empty Catch Block,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,The method has an empty catch block.
Empty Catch Block,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,The method has an empty catch block.
Empty Catch Block,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getTags,The method has an empty catch block.
Empty Catch Block,MP3Library,WMA_extended_attribute,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_extended_attribute,The method has an empty catch block.
Empty Catch Block,MP3Library,MP3Frame,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MP3Frame,The method has an empty catch block.
Empty Catch Block,MP3Library,ID3Tag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadString,The method has an empty catch block.
Empty Catch Block,MP3Library,ID3Tag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadBaseString,The method has an empty catch block.
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processContentBlockWMA,The following statement contains a magic number: if (lTitle > 0) {  	mp3_TIT2 = sw.ReadString (lTitle / 2' Encoding.Unicode);  	// readUnicodeString(i' sw);  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processContentBlockWMA,The following statement contains a magic number: mp3_TIT2 = sw.ReadString (lTitle / 2' Encoding.Unicode);  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processContentBlockWMA,The following statement contains a magic number: if (lAuthor > 0)  	mp3_TPE1 = sw.ReadString (lAuthor / 2' Encoding.Unicode);  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processContentBlockWMA,The following statement contains a magic number: mp3_TPE1 = sw.ReadString (lAuthor / 2' Encoding.Unicode);  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processContentBlockWMA,The following statement contains a magic number: if (lDescription > 0)  	mp3_TPE1 = sw.ReadString (lDescription / 2' Encoding.Unicode);  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processContentBlockWMA,The following statement contains a magic number: mp3_TPE1 = sw.ReadString (lDescription / 2' Encoding.Unicode);  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processContentBlockWMA,The following statement contains a magic number: if (lRating > 0)  	mp3_TPE1 = sw.ReadString (lRating / 2' Encoding.Unicode);  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processContentBlockWMA,The following statement contains a magic number: mp3_TPE1 = sw.ReadString (lRating / 2' Encoding.Unicode);  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,The following statement contains a magic number: for (i = 0; i < numAttrs; i++) {  	try {  		int str = br.ReadShort ();  		attrName = br.ReadString (str' Encoding.Unicode);  		dataType = br.ReadShort ();  		switch (dataType) {  		#region Read data  		case 0:  			str = br.ReadShort ();  			strValue = br.ReadString (str' Encoding.Unicode);  			valueObject.dataType = 0;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(value);  			switch (attrName) {  			case "WM/Lyrics":  				break;  			case "WM/AlbumTitle":  				mp3_TALB = strValue;  				break;  			case "WM/AlbumArtist":  				mp3_TPE1 = strValue;  				break;  			case "WM/Genre":  				mp3_TCON = strValue;  				break;  			case "WM/TrackNumber":  				mp3_TRCK = strValue;  				break;  			case "WM/Year":  				break;  			case "WM/Composer":  				mp3_TCOM = strValue;  				break;  			case "WM/Publisher":  				break;  			}  			attrName += ";" + strValue;  			index += 1;  			break;  		case 1:  			dataLen = br.ReadShort ();  			bValue = new byte[dataLen - 1];  			bValue = br.ReadBytes (dataLen);  			valueObject.dataType = 1;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(bValue);  			index += 1;  			break;  		case 2:  			dataLen = br.ReadShort ();  			iValue = br.ReadInteger ();  			valueObject.dataType = 2;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(boolValue);  			index += 1;  			break;  		case 3:  			dataLen = br.ReadShort ();  			iValue = br.ReadInteger ();  			valueObject.dataType = 3;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(iValue);  			index += 1;  			break;  		case 4:  			dataLen = br.ReadShort ();  			lValue = br.ReadLong ();  			valueObject.dataType = 4;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(lValue);  			index += 1;  			break;  		case 5:  			dataLen = br.ReadShort ();  			sValue = br.ReadShort ();  			valueObject.dataType = 5;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(valueLength);  			index += 1;  			break;  		#endregion  		}  		attribs.Add (new ID3Tag (attrName' ""));  	}  	catch (Exception ex) {  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,The following statement contains a magic number: for (i = 0; i < numAttrs; i++) {  	try {  		int str = br.ReadShort ();  		attrName = br.ReadString (str' Encoding.Unicode);  		dataType = br.ReadShort ();  		switch (dataType) {  		#region Read data  		case 0:  			str = br.ReadShort ();  			strValue = br.ReadString (str' Encoding.Unicode);  			valueObject.dataType = 0;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(value);  			switch (attrName) {  			case "WM/Lyrics":  				break;  			case "WM/AlbumTitle":  				mp3_TALB = strValue;  				break;  			case "WM/AlbumArtist":  				mp3_TPE1 = strValue;  				break;  			case "WM/Genre":  				mp3_TCON = strValue;  				break;  			case "WM/TrackNumber":  				mp3_TRCK = strValue;  				break;  			case "WM/Year":  				break;  			case "WM/Composer":  				mp3_TCOM = strValue;  				break;  			case "WM/Publisher":  				break;  			}  			attrName += ";" + strValue;  			index += 1;  			break;  		case 1:  			dataLen = br.ReadShort ();  			bValue = new byte[dataLen - 1];  			bValue = br.ReadBytes (dataLen);  			valueObject.dataType = 1;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(bValue);  			index += 1;  			break;  		case 2:  			dataLen = br.ReadShort ();  			iValue = br.ReadInteger ();  			valueObject.dataType = 2;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(boolValue);  			index += 1;  			break;  		case 3:  			dataLen = br.ReadShort ();  			iValue = br.ReadInteger ();  			valueObject.dataType = 3;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(iValue);  			index += 1;  			break;  		case 4:  			dataLen = br.ReadShort ();  			lValue = br.ReadLong ();  			valueObject.dataType = 4;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(lValue);  			index += 1;  			break;  		case 5:  			dataLen = br.ReadShort ();  			sValue = br.ReadShort ();  			valueObject.dataType = 5;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(valueLength);  			index += 1;  			break;  		#endregion  		}  		attribs.Add (new ID3Tag (attrName' ""));  	}  	catch (Exception ex) {  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,The following statement contains a magic number: for (i = 0; i < numAttrs; i++) {  	try {  		int str = br.ReadShort ();  		attrName = br.ReadString (str' Encoding.Unicode);  		dataType = br.ReadShort ();  		switch (dataType) {  		#region Read data  		case 0:  			str = br.ReadShort ();  			strValue = br.ReadString (str' Encoding.Unicode);  			valueObject.dataType = 0;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(value);  			switch (attrName) {  			case "WM/Lyrics":  				break;  			case "WM/AlbumTitle":  				mp3_TALB = strValue;  				break;  			case "WM/AlbumArtist":  				mp3_TPE1 = strValue;  				break;  			case "WM/Genre":  				mp3_TCON = strValue;  				break;  			case "WM/TrackNumber":  				mp3_TRCK = strValue;  				break;  			case "WM/Year":  				break;  			case "WM/Composer":  				mp3_TCOM = strValue;  				break;  			case "WM/Publisher":  				break;  			}  			attrName += ";" + strValue;  			index += 1;  			break;  		case 1:  			dataLen = br.ReadShort ();  			bValue = new byte[dataLen - 1];  			bValue = br.ReadBytes (dataLen);  			valueObject.dataType = 1;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(bValue);  			index += 1;  			break;  		case 2:  			dataLen = br.ReadShort ();  			iValue = br.ReadInteger ();  			valueObject.dataType = 2;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(boolValue);  			index += 1;  			break;  		case 3:  			dataLen = br.ReadShort ();  			iValue = br.ReadInteger ();  			valueObject.dataType = 3;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(iValue);  			index += 1;  			break;  		case 4:  			dataLen = br.ReadShort ();  			lValue = br.ReadLong ();  			valueObject.dataType = 4;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(lValue);  			index += 1;  			break;  		case 5:  			dataLen = br.ReadShort ();  			sValue = br.ReadShort ();  			valueObject.dataType = 5;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(valueLength);  			index += 1;  			break;  		#endregion  		}  		attribs.Add (new ID3Tag (attrName' ""));  	}  	catch (Exception ex) {  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,The following statement contains a magic number: for (i = 0; i < numAttrs; i++) {  	try {  		int str = br.ReadShort ();  		attrName = br.ReadString (str' Encoding.Unicode);  		dataType = br.ReadShort ();  		switch (dataType) {  		#region Read data  		case 0:  			str = br.ReadShort ();  			strValue = br.ReadString (str' Encoding.Unicode);  			valueObject.dataType = 0;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(value);  			switch (attrName) {  			case "WM/Lyrics":  				break;  			case "WM/AlbumTitle":  				mp3_TALB = strValue;  				break;  			case "WM/AlbumArtist":  				mp3_TPE1 = strValue;  				break;  			case "WM/Genre":  				mp3_TCON = strValue;  				break;  			case "WM/TrackNumber":  				mp3_TRCK = strValue;  				break;  			case "WM/Year":  				break;  			case "WM/Composer":  				mp3_TCOM = strValue;  				break;  			case "WM/Publisher":  				break;  			}  			attrName += ";" + strValue;  			index += 1;  			break;  		case 1:  			dataLen = br.ReadShort ();  			bValue = new byte[dataLen - 1];  			bValue = br.ReadBytes (dataLen);  			valueObject.dataType = 1;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(bValue);  			index += 1;  			break;  		case 2:  			dataLen = br.ReadShort ();  			iValue = br.ReadInteger ();  			valueObject.dataType = 2;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(boolValue);  			index += 1;  			break;  		case 3:  			dataLen = br.ReadShort ();  			iValue = br.ReadInteger ();  			valueObject.dataType = 3;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(iValue);  			index += 1;  			break;  		case 4:  			dataLen = br.ReadShort ();  			lValue = br.ReadLong ();  			valueObject.dataType = 4;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(lValue);  			index += 1;  			break;  		case 5:  			dataLen = br.ReadShort ();  			sValue = br.ReadShort ();  			valueObject.dataType = 5;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(valueLength);  			index += 1;  			break;  		#endregion  		}  		attribs.Add (new ID3Tag (attrName' ""));  	}  	catch (Exception ex) {  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,The following statement contains a magic number: for (i = 0; i < numAttrs; i++) {  	try {  		int str = br.ReadShort ();  		attrName = br.ReadString (str' Encoding.Unicode);  		dataType = br.ReadShort ();  		switch (dataType) {  		#region Read data  		case 0:  			str = br.ReadShort ();  			strValue = br.ReadString (str' Encoding.Unicode);  			valueObject.dataType = 0;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(value);  			switch (attrName) {  			case "WM/Lyrics":  				break;  			case "WM/AlbumTitle":  				mp3_TALB = strValue;  				break;  			case "WM/AlbumArtist":  				mp3_TPE1 = strValue;  				break;  			case "WM/Genre":  				mp3_TCON = strValue;  				break;  			case "WM/TrackNumber":  				mp3_TRCK = strValue;  				break;  			case "WM/Year":  				break;  			case "WM/Composer":  				mp3_TCOM = strValue;  				break;  			case "WM/Publisher":  				break;  			}  			attrName += ";" + strValue;  			index += 1;  			break;  		case 1:  			dataLen = br.ReadShort ();  			bValue = new byte[dataLen - 1];  			bValue = br.ReadBytes (dataLen);  			valueObject.dataType = 1;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(bValue);  			index += 1;  			break;  		case 2:  			dataLen = br.ReadShort ();  			iValue = br.ReadInteger ();  			valueObject.dataType = 2;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(boolValue);  			index += 1;  			break;  		case 3:  			dataLen = br.ReadShort ();  			iValue = br.ReadInteger ();  			valueObject.dataType = 3;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(iValue);  			index += 1;  			break;  		case 4:  			dataLen = br.ReadShort ();  			lValue = br.ReadLong ();  			valueObject.dataType = 4;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(lValue);  			index += 1;  			break;  		case 5:  			dataLen = br.ReadShort ();  			sValue = br.ReadShort ();  			valueObject.dataType = 5;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(valueLength);  			index += 1;  			break;  		#endregion  		}  		attribs.Add (new ID3Tag (attrName' ""));  	}  	catch (Exception ex) {  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,The following statement contains a magic number: for (i = 0; i < numAttrs; i++) {  	try {  		int str = br.ReadShort ();  		attrName = br.ReadString (str' Encoding.Unicode);  		dataType = br.ReadShort ();  		switch (dataType) {  		#region Read data  		case 0:  			str = br.ReadShort ();  			strValue = br.ReadString (str' Encoding.Unicode);  			valueObject.dataType = 0;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(value);  			switch (attrName) {  			case "WM/Lyrics":  				break;  			case "WM/AlbumTitle":  				mp3_TALB = strValue;  				break;  			case "WM/AlbumArtist":  				mp3_TPE1 = strValue;  				break;  			case "WM/Genre":  				mp3_TCON = strValue;  				break;  			case "WM/TrackNumber":  				mp3_TRCK = strValue;  				break;  			case "WM/Year":  				break;  			case "WM/Composer":  				mp3_TCOM = strValue;  				break;  			case "WM/Publisher":  				break;  			}  			attrName += ";" + strValue;  			index += 1;  			break;  		case 1:  			dataLen = br.ReadShort ();  			bValue = new byte[dataLen - 1];  			bValue = br.ReadBytes (dataLen);  			valueObject.dataType = 1;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(bValue);  			index += 1;  			break;  		case 2:  			dataLen = br.ReadShort ();  			iValue = br.ReadInteger ();  			valueObject.dataType = 2;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(boolValue);  			index += 1;  			break;  		case 3:  			dataLen = br.ReadShort ();  			iValue = br.ReadInteger ();  			valueObject.dataType = 3;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(iValue);  			index += 1;  			break;  		case 4:  			dataLen = br.ReadShort ();  			lValue = br.ReadLong ();  			valueObject.dataType = 4;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(lValue);  			index += 1;  			break;  		case 5:  			dataLen = br.ReadShort ();  			sValue = br.ReadShort ();  			valueObject.dataType = 5;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(valueLength);  			index += 1;  			break;  		#endregion  		}  		attribs.Add (new ID3Tag (attrName' ""));  	}  	catch (Exception ex) {  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,The following statement contains a magic number: for (i = 0; i < numAttrs; i++) {  	try {  		int str = br.ReadShort ();  		attrName = br.ReadString (str' Encoding.Unicode);  		dataType = br.ReadShort ();  		switch (dataType) {  		#region Read data  		case 0:  			str = br.ReadShort ();  			strValue = br.ReadString (str' Encoding.Unicode);  			valueObject.dataType = 0;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(value);  			switch (attrName) {  			case "WM/Lyrics":  				break;  			case "WM/AlbumTitle":  				mp3_TALB = strValue;  				break;  			case "WM/AlbumArtist":  				mp3_TPE1 = strValue;  				break;  			case "WM/Genre":  				mp3_TCON = strValue;  				break;  			case "WM/TrackNumber":  				mp3_TRCK = strValue;  				break;  			case "WM/Year":  				break;  			case "WM/Composer":  				mp3_TCOM = strValue;  				break;  			case "WM/Publisher":  				break;  			}  			attrName += ";" + strValue;  			index += 1;  			break;  		case 1:  			dataLen = br.ReadShort ();  			bValue = new byte[dataLen - 1];  			bValue = br.ReadBytes (dataLen);  			valueObject.dataType = 1;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(bValue);  			index += 1;  			break;  		case 2:  			dataLen = br.ReadShort ();  			iValue = br.ReadInteger ();  			valueObject.dataType = 2;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(boolValue);  			index += 1;  			break;  		case 3:  			dataLen = br.ReadShort ();  			iValue = br.ReadInteger ();  			valueObject.dataType = 3;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(iValue);  			index += 1;  			break;  		case 4:  			dataLen = br.ReadShort ();  			lValue = br.ReadLong ();  			valueObject.dataType = 4;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(lValue);  			index += 1;  			break;  		case 5:  			dataLen = br.ReadShort ();  			sValue = br.ReadShort ();  			valueObject.dataType = 5;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(valueLength);  			index += 1;  			break;  		#endregion  		}  		attribs.Add (new ID3Tag (attrName' ""));  	}  	catch (Exception ex) {  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,The following statement contains a magic number: for (i = 0; i < numAttrs; i++) {  	try {  		int str = br.ReadShort ();  		attrName = br.ReadString (str' Encoding.Unicode);  		dataType = br.ReadShort ();  		switch (dataType) {  		#region Read data  		case 0:  			str = br.ReadShort ();  			strValue = br.ReadString (str' Encoding.Unicode);  			valueObject.dataType = 0;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(value);  			switch (attrName) {  			case "WM/Lyrics":  				break;  			case "WM/AlbumTitle":  				mp3_TALB = strValue;  				break;  			case "WM/AlbumArtist":  				mp3_TPE1 = strValue;  				break;  			case "WM/Genre":  				mp3_TCON = strValue;  				break;  			case "WM/TrackNumber":  				mp3_TRCK = strValue;  				break;  			case "WM/Year":  				break;  			case "WM/Composer":  				mp3_TCOM = strValue;  				break;  			case "WM/Publisher":  				break;  			}  			attrName += ";" + strValue;  			index += 1;  			break;  		case 1:  			dataLen = br.ReadShort ();  			bValue = new byte[dataLen - 1];  			bValue = br.ReadBytes (dataLen);  			valueObject.dataType = 1;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(bValue);  			index += 1;  			break;  		case 2:  			dataLen = br.ReadShort ();  			iValue = br.ReadInteger ();  			valueObject.dataType = 2;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(boolValue);  			index += 1;  			break;  		case 3:  			dataLen = br.ReadShort ();  			iValue = br.ReadInteger ();  			valueObject.dataType = 3;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(iValue);  			index += 1;  			break;  		case 4:  			dataLen = br.ReadShort ();  			lValue = br.ReadLong ();  			valueObject.dataType = 4;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(lValue);  			index += 1;  			break;  		case 5:  			dataLen = br.ReadShort ();  			sValue = br.ReadShort ();  			valueObject.dataType = 5;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(valueLength);  			index += 1;  			break;  		#endregion  		}  		attribs.Add (new ID3Tag (attrName' ""));  	}  	catch (Exception ex) {  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,The following statement contains a magic number: try {  	int str = br.ReadShort ();  	attrName = br.ReadString (str' Encoding.Unicode);  	dataType = br.ReadShort ();  	switch (dataType) {  	#region Read data  	case 0:  		str = br.ReadShort ();  		strValue = br.ReadString (str' Encoding.Unicode);  		valueObject.dataType = 0;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(value);  		switch (attrName) {  		case "WM/Lyrics":  			break;  		case "WM/AlbumTitle":  			mp3_TALB = strValue;  			break;  		case "WM/AlbumArtist":  			mp3_TPE1 = strValue;  			break;  		case "WM/Genre":  			mp3_TCON = strValue;  			break;  		case "WM/TrackNumber":  			mp3_TRCK = strValue;  			break;  		case "WM/Year":  			break;  		case "WM/Composer":  			mp3_TCOM = strValue;  			break;  		case "WM/Publisher":  			break;  		}  		attrName += ";" + strValue;  		index += 1;  		break;  	case 1:  		dataLen = br.ReadShort ();  		bValue = new byte[dataLen - 1];  		bValue = br.ReadBytes (dataLen);  		valueObject.dataType = 1;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(bValue);  		index += 1;  		break;  	case 2:  		dataLen = br.ReadShort ();  		iValue = br.ReadInteger ();  		valueObject.dataType = 2;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(boolValue);  		index += 1;  		break;  	case 3:  		dataLen = br.ReadShort ();  		iValue = br.ReadInteger ();  		valueObject.dataType = 3;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(iValue);  		index += 1;  		break;  	case 4:  		dataLen = br.ReadShort ();  		lValue = br.ReadLong ();  		valueObject.dataType = 4;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(lValue);  		index += 1;  		break;  	case 5:  		dataLen = br.ReadShort ();  		sValue = br.ReadShort ();  		valueObject.dataType = 5;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(valueLength);  		index += 1;  		break;  	#endregion  	}  	attribs.Add (new ID3Tag (attrName' ""));  }  catch (Exception ex) {  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,The following statement contains a magic number: try {  	int str = br.ReadShort ();  	attrName = br.ReadString (str' Encoding.Unicode);  	dataType = br.ReadShort ();  	switch (dataType) {  	#region Read data  	case 0:  		str = br.ReadShort ();  		strValue = br.ReadString (str' Encoding.Unicode);  		valueObject.dataType = 0;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(value);  		switch (attrName) {  		case "WM/Lyrics":  			break;  		case "WM/AlbumTitle":  			mp3_TALB = strValue;  			break;  		case "WM/AlbumArtist":  			mp3_TPE1 = strValue;  			break;  		case "WM/Genre":  			mp3_TCON = strValue;  			break;  		case "WM/TrackNumber":  			mp3_TRCK = strValue;  			break;  		case "WM/Year":  			break;  		case "WM/Composer":  			mp3_TCOM = strValue;  			break;  		case "WM/Publisher":  			break;  		}  		attrName += ";" + strValue;  		index += 1;  		break;  	case 1:  		dataLen = br.ReadShort ();  		bValue = new byte[dataLen - 1];  		bValue = br.ReadBytes (dataLen);  		valueObject.dataType = 1;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(bValue);  		index += 1;  		break;  	case 2:  		dataLen = br.ReadShort ();  		iValue = br.ReadInteger ();  		valueObject.dataType = 2;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(boolValue);  		index += 1;  		break;  	case 3:  		dataLen = br.ReadShort ();  		iValue = br.ReadInteger ();  		valueObject.dataType = 3;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(iValue);  		index += 1;  		break;  	case 4:  		dataLen = br.ReadShort ();  		lValue = br.ReadLong ();  		valueObject.dataType = 4;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(lValue);  		index += 1;  		break;  	case 5:  		dataLen = br.ReadShort ();  		sValue = br.ReadShort ();  		valueObject.dataType = 5;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(valueLength);  		index += 1;  		break;  	#endregion  	}  	attribs.Add (new ID3Tag (attrName' ""));  }  catch (Exception ex) {  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,The following statement contains a magic number: try {  	int str = br.ReadShort ();  	attrName = br.ReadString (str' Encoding.Unicode);  	dataType = br.ReadShort ();  	switch (dataType) {  	#region Read data  	case 0:  		str = br.ReadShort ();  		strValue = br.ReadString (str' Encoding.Unicode);  		valueObject.dataType = 0;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(value);  		switch (attrName) {  		case "WM/Lyrics":  			break;  		case "WM/AlbumTitle":  			mp3_TALB = strValue;  			break;  		case "WM/AlbumArtist":  			mp3_TPE1 = strValue;  			break;  		case "WM/Genre":  			mp3_TCON = strValue;  			break;  		case "WM/TrackNumber":  			mp3_TRCK = strValue;  			break;  		case "WM/Year":  			break;  		case "WM/Composer":  			mp3_TCOM = strValue;  			break;  		case "WM/Publisher":  			break;  		}  		attrName += ";" + strValue;  		index += 1;  		break;  	case 1:  		dataLen = br.ReadShort ();  		bValue = new byte[dataLen - 1];  		bValue = br.ReadBytes (dataLen);  		valueObject.dataType = 1;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(bValue);  		index += 1;  		break;  	case 2:  		dataLen = br.ReadShort ();  		iValue = br.ReadInteger ();  		valueObject.dataType = 2;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(boolValue);  		index += 1;  		break;  	case 3:  		dataLen = br.ReadShort ();  		iValue = br.ReadInteger ();  		valueObject.dataType = 3;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(iValue);  		index += 1;  		break;  	case 4:  		dataLen = br.ReadShort ();  		lValue = br.ReadLong ();  		valueObject.dataType = 4;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(lValue);  		index += 1;  		break;  	case 5:  		dataLen = br.ReadShort ();  		sValue = br.ReadShort ();  		valueObject.dataType = 5;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(valueLength);  		index += 1;  		break;  	#endregion  	}  	attribs.Add (new ID3Tag (attrName' ""));  }  catch (Exception ex) {  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,The following statement contains a magic number: try {  	int str = br.ReadShort ();  	attrName = br.ReadString (str' Encoding.Unicode);  	dataType = br.ReadShort ();  	switch (dataType) {  	#region Read data  	case 0:  		str = br.ReadShort ();  		strValue = br.ReadString (str' Encoding.Unicode);  		valueObject.dataType = 0;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(value);  		switch (attrName) {  		case "WM/Lyrics":  			break;  		case "WM/AlbumTitle":  			mp3_TALB = strValue;  			break;  		case "WM/AlbumArtist":  			mp3_TPE1 = strValue;  			break;  		case "WM/Genre":  			mp3_TCON = strValue;  			break;  		case "WM/TrackNumber":  			mp3_TRCK = strValue;  			break;  		case "WM/Year":  			break;  		case "WM/Composer":  			mp3_TCOM = strValue;  			break;  		case "WM/Publisher":  			break;  		}  		attrName += ";" + strValue;  		index += 1;  		break;  	case 1:  		dataLen = br.ReadShort ();  		bValue = new byte[dataLen - 1];  		bValue = br.ReadBytes (dataLen);  		valueObject.dataType = 1;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(bValue);  		index += 1;  		break;  	case 2:  		dataLen = br.ReadShort ();  		iValue = br.ReadInteger ();  		valueObject.dataType = 2;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(boolValue);  		index += 1;  		break;  	case 3:  		dataLen = br.ReadShort ();  		iValue = br.ReadInteger ();  		valueObject.dataType = 3;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(iValue);  		index += 1;  		break;  	case 4:  		dataLen = br.ReadShort ();  		lValue = br.ReadLong ();  		valueObject.dataType = 4;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(lValue);  		index += 1;  		break;  	case 5:  		dataLen = br.ReadShort ();  		sValue = br.ReadShort ();  		valueObject.dataType = 5;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(valueLength);  		index += 1;  		break;  	#endregion  	}  	attribs.Add (new ID3Tag (attrName' ""));  }  catch (Exception ex) {  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,The following statement contains a magic number: try {  	int str = br.ReadShort ();  	attrName = br.ReadString (str' Encoding.Unicode);  	dataType = br.ReadShort ();  	switch (dataType) {  	#region Read data  	case 0:  		str = br.ReadShort ();  		strValue = br.ReadString (str' Encoding.Unicode);  		valueObject.dataType = 0;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(value);  		switch (attrName) {  		case "WM/Lyrics":  			break;  		case "WM/AlbumTitle":  			mp3_TALB = strValue;  			break;  		case "WM/AlbumArtist":  			mp3_TPE1 = strValue;  			break;  		case "WM/Genre":  			mp3_TCON = strValue;  			break;  		case "WM/TrackNumber":  			mp3_TRCK = strValue;  			break;  		case "WM/Year":  			break;  		case "WM/Composer":  			mp3_TCOM = strValue;  			break;  		case "WM/Publisher":  			break;  		}  		attrName += ";" + strValue;  		index += 1;  		break;  	case 1:  		dataLen = br.ReadShort ();  		bValue = new byte[dataLen - 1];  		bValue = br.ReadBytes (dataLen);  		valueObject.dataType = 1;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(bValue);  		index += 1;  		break;  	case 2:  		dataLen = br.ReadShort ();  		iValue = br.ReadInteger ();  		valueObject.dataType = 2;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(boolValue);  		index += 1;  		break;  	case 3:  		dataLen = br.ReadShort ();  		iValue = br.ReadInteger ();  		valueObject.dataType = 3;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(iValue);  		index += 1;  		break;  	case 4:  		dataLen = br.ReadShort ();  		lValue = br.ReadLong ();  		valueObject.dataType = 4;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(lValue);  		index += 1;  		break;  	case 5:  		dataLen = br.ReadShort ();  		sValue = br.ReadShort ();  		valueObject.dataType = 5;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(valueLength);  		index += 1;  		break;  	#endregion  	}  	attribs.Add (new ID3Tag (attrName' ""));  }  catch (Exception ex) {  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,The following statement contains a magic number: try {  	int str = br.ReadShort ();  	attrName = br.ReadString (str' Encoding.Unicode);  	dataType = br.ReadShort ();  	switch (dataType) {  	#region Read data  	case 0:  		str = br.ReadShort ();  		strValue = br.ReadString (str' Encoding.Unicode);  		valueObject.dataType = 0;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(value);  		switch (attrName) {  		case "WM/Lyrics":  			break;  		case "WM/AlbumTitle":  			mp3_TALB = strValue;  			break;  		case "WM/AlbumArtist":  			mp3_TPE1 = strValue;  			break;  		case "WM/Genre":  			mp3_TCON = strValue;  			break;  		case "WM/TrackNumber":  			mp3_TRCK = strValue;  			break;  		case "WM/Year":  			break;  		case "WM/Composer":  			mp3_TCOM = strValue;  			break;  		case "WM/Publisher":  			break;  		}  		attrName += ";" + strValue;  		index += 1;  		break;  	case 1:  		dataLen = br.ReadShort ();  		bValue = new byte[dataLen - 1];  		bValue = br.ReadBytes (dataLen);  		valueObject.dataType = 1;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(bValue);  		index += 1;  		break;  	case 2:  		dataLen = br.ReadShort ();  		iValue = br.ReadInteger ();  		valueObject.dataType = 2;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(boolValue);  		index += 1;  		break;  	case 3:  		dataLen = br.ReadShort ();  		iValue = br.ReadInteger ();  		valueObject.dataType = 3;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(iValue);  		index += 1;  		break;  	case 4:  		dataLen = br.ReadShort ();  		lValue = br.ReadLong ();  		valueObject.dataType = 4;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(lValue);  		index += 1;  		break;  	case 5:  		dataLen = br.ReadShort ();  		sValue = br.ReadShort ();  		valueObject.dataType = 5;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(valueLength);  		index += 1;  		break;  	#endregion  	}  	attribs.Add (new ID3Tag (attrName' ""));  }  catch (Exception ex) {  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,The following statement contains a magic number: try {  	int str = br.ReadShort ();  	attrName = br.ReadString (str' Encoding.Unicode);  	dataType = br.ReadShort ();  	switch (dataType) {  	#region Read data  	case 0:  		str = br.ReadShort ();  		strValue = br.ReadString (str' Encoding.Unicode);  		valueObject.dataType = 0;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(value);  		switch (attrName) {  		case "WM/Lyrics":  			break;  		case "WM/AlbumTitle":  			mp3_TALB = strValue;  			break;  		case "WM/AlbumArtist":  			mp3_TPE1 = strValue;  			break;  		case "WM/Genre":  			mp3_TCON = strValue;  			break;  		case "WM/TrackNumber":  			mp3_TRCK = strValue;  			break;  		case "WM/Year":  			break;  		case "WM/Composer":  			mp3_TCOM = strValue;  			break;  		case "WM/Publisher":  			break;  		}  		attrName += ";" + strValue;  		index += 1;  		break;  	case 1:  		dataLen = br.ReadShort ();  		bValue = new byte[dataLen - 1];  		bValue = br.ReadBytes (dataLen);  		valueObject.dataType = 1;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(bValue);  		index += 1;  		break;  	case 2:  		dataLen = br.ReadShort ();  		iValue = br.ReadInteger ();  		valueObject.dataType = 2;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(boolValue);  		index += 1;  		break;  	case 3:  		dataLen = br.ReadShort ();  		iValue = br.ReadInteger ();  		valueObject.dataType = 3;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(iValue);  		index += 1;  		break;  	case 4:  		dataLen = br.ReadShort ();  		lValue = br.ReadLong ();  		valueObject.dataType = 4;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(lValue);  		index += 1;  		break;  	case 5:  		dataLen = br.ReadShort ();  		sValue = br.ReadShort ();  		valueObject.dataType = 5;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(valueLength);  		index += 1;  		break;  	#endregion  	}  	attribs.Add (new ID3Tag (attrName' ""));  }  catch (Exception ex) {  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,The following statement contains a magic number: try {  	int str = br.ReadShort ();  	attrName = br.ReadString (str' Encoding.Unicode);  	dataType = br.ReadShort ();  	switch (dataType) {  	#region Read data  	case 0:  		str = br.ReadShort ();  		strValue = br.ReadString (str' Encoding.Unicode);  		valueObject.dataType = 0;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(value);  		switch (attrName) {  		case "WM/Lyrics":  			break;  		case "WM/AlbumTitle":  			mp3_TALB = strValue;  			break;  		case "WM/AlbumArtist":  			mp3_TPE1 = strValue;  			break;  		case "WM/Genre":  			mp3_TCON = strValue;  			break;  		case "WM/TrackNumber":  			mp3_TRCK = strValue;  			break;  		case "WM/Year":  			break;  		case "WM/Composer":  			mp3_TCOM = strValue;  			break;  		case "WM/Publisher":  			break;  		}  		attrName += ";" + strValue;  		index += 1;  		break;  	case 1:  		dataLen = br.ReadShort ();  		bValue = new byte[dataLen - 1];  		bValue = br.ReadBytes (dataLen);  		valueObject.dataType = 1;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(bValue);  		index += 1;  		break;  	case 2:  		dataLen = br.ReadShort ();  		iValue = br.ReadInteger ();  		valueObject.dataType = 2;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(boolValue);  		index += 1;  		break;  	case 3:  		dataLen = br.ReadShort ();  		iValue = br.ReadInteger ();  		valueObject.dataType = 3;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(iValue);  		index += 1;  		break;  	case 4:  		dataLen = br.ReadShort ();  		lValue = br.ReadLong ();  		valueObject.dataType = 4;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(lValue);  		index += 1;  		break;  	case 5:  		dataLen = br.ReadShort ();  		sValue = br.ReadShort ();  		valueObject.dataType = 5;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(valueLength);  		index += 1;  		break;  	#endregion  	}  	attribs.Add (new ID3Tag (attrName' ""));  }  catch (Exception ex) {  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,The following statement contains a magic number: switch (dataType) {  #region Read data  case 0:  	str = br.ReadShort ();  	strValue = br.ReadString (str' Encoding.Unicode);  	valueObject.dataType = 0;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(value);  	switch (attrName) {  	case "WM/Lyrics":  		break;  	case "WM/AlbumTitle":  		mp3_TALB = strValue;  		break;  	case "WM/AlbumArtist":  		mp3_TPE1 = strValue;  		break;  	case "WM/Genre":  		mp3_TCON = strValue;  		break;  	case "WM/TrackNumber":  		mp3_TRCK = strValue;  		break;  	case "WM/Year":  		break;  	case "WM/Composer":  		mp3_TCOM = strValue;  		break;  	case "WM/Publisher":  		break;  	}  	attrName += ";" + strValue;  	index += 1;  	break;  case 1:  	dataLen = br.ReadShort ();  	bValue = new byte[dataLen - 1];  	bValue = br.ReadBytes (dataLen);  	valueObject.dataType = 1;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(bValue);  	index += 1;  	break;  case 2:  	dataLen = br.ReadShort ();  	iValue = br.ReadInteger ();  	valueObject.dataType = 2;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(boolValue);  	index += 1;  	break;  case 3:  	dataLen = br.ReadShort ();  	iValue = br.ReadInteger ();  	valueObject.dataType = 3;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(iValue);  	index += 1;  	break;  case 4:  	dataLen = br.ReadShort ();  	lValue = br.ReadLong ();  	valueObject.dataType = 4;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(lValue);  	index += 1;  	break;  case 5:  	dataLen = br.ReadShort ();  	sValue = br.ReadShort ();  	valueObject.dataType = 5;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(valueLength);  	index += 1;  	break;  #endregion  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,The following statement contains a magic number: switch (dataType) {  #region Read data  case 0:  	str = br.ReadShort ();  	strValue = br.ReadString (str' Encoding.Unicode);  	valueObject.dataType = 0;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(value);  	switch (attrName) {  	case "WM/Lyrics":  		break;  	case "WM/AlbumTitle":  		mp3_TALB = strValue;  		break;  	case "WM/AlbumArtist":  		mp3_TPE1 = strValue;  		break;  	case "WM/Genre":  		mp3_TCON = strValue;  		break;  	case "WM/TrackNumber":  		mp3_TRCK = strValue;  		break;  	case "WM/Year":  		break;  	case "WM/Composer":  		mp3_TCOM = strValue;  		break;  	case "WM/Publisher":  		break;  	}  	attrName += ";" + strValue;  	index += 1;  	break;  case 1:  	dataLen = br.ReadShort ();  	bValue = new byte[dataLen - 1];  	bValue = br.ReadBytes (dataLen);  	valueObject.dataType = 1;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(bValue);  	index += 1;  	break;  case 2:  	dataLen = br.ReadShort ();  	iValue = br.ReadInteger ();  	valueObject.dataType = 2;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(boolValue);  	index += 1;  	break;  case 3:  	dataLen = br.ReadShort ();  	iValue = br.ReadInteger ();  	valueObject.dataType = 3;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(iValue);  	index += 1;  	break;  case 4:  	dataLen = br.ReadShort ();  	lValue = br.ReadLong ();  	valueObject.dataType = 4;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(lValue);  	index += 1;  	break;  case 5:  	dataLen = br.ReadShort ();  	sValue = br.ReadShort ();  	valueObject.dataType = 5;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(valueLength);  	index += 1;  	break;  #endregion  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,The following statement contains a magic number: switch (dataType) {  #region Read data  case 0:  	str = br.ReadShort ();  	strValue = br.ReadString (str' Encoding.Unicode);  	valueObject.dataType = 0;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(value);  	switch (attrName) {  	case "WM/Lyrics":  		break;  	case "WM/AlbumTitle":  		mp3_TALB = strValue;  		break;  	case "WM/AlbumArtist":  		mp3_TPE1 = strValue;  		break;  	case "WM/Genre":  		mp3_TCON = strValue;  		break;  	case "WM/TrackNumber":  		mp3_TRCK = strValue;  		break;  	case "WM/Year":  		break;  	case "WM/Composer":  		mp3_TCOM = strValue;  		break;  	case "WM/Publisher":  		break;  	}  	attrName += ";" + strValue;  	index += 1;  	break;  case 1:  	dataLen = br.ReadShort ();  	bValue = new byte[dataLen - 1];  	bValue = br.ReadBytes (dataLen);  	valueObject.dataType = 1;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(bValue);  	index += 1;  	break;  case 2:  	dataLen = br.ReadShort ();  	iValue = br.ReadInteger ();  	valueObject.dataType = 2;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(boolValue);  	index += 1;  	break;  case 3:  	dataLen = br.ReadShort ();  	iValue = br.ReadInteger ();  	valueObject.dataType = 3;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(iValue);  	index += 1;  	break;  case 4:  	dataLen = br.ReadShort ();  	lValue = br.ReadLong ();  	valueObject.dataType = 4;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(lValue);  	index += 1;  	break;  case 5:  	dataLen = br.ReadShort ();  	sValue = br.ReadShort ();  	valueObject.dataType = 5;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(valueLength);  	index += 1;  	break;  #endregion  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,The following statement contains a magic number: switch (dataType) {  #region Read data  case 0:  	str = br.ReadShort ();  	strValue = br.ReadString (str' Encoding.Unicode);  	valueObject.dataType = 0;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(value);  	switch (attrName) {  	case "WM/Lyrics":  		break;  	case "WM/AlbumTitle":  		mp3_TALB = strValue;  		break;  	case "WM/AlbumArtist":  		mp3_TPE1 = strValue;  		break;  	case "WM/Genre":  		mp3_TCON = strValue;  		break;  	case "WM/TrackNumber":  		mp3_TRCK = strValue;  		break;  	case "WM/Year":  		break;  	case "WM/Composer":  		mp3_TCOM = strValue;  		break;  	case "WM/Publisher":  		break;  	}  	attrName += ";" + strValue;  	index += 1;  	break;  case 1:  	dataLen = br.ReadShort ();  	bValue = new byte[dataLen - 1];  	bValue = br.ReadBytes (dataLen);  	valueObject.dataType = 1;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(bValue);  	index += 1;  	break;  case 2:  	dataLen = br.ReadShort ();  	iValue = br.ReadInteger ();  	valueObject.dataType = 2;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(boolValue);  	index += 1;  	break;  case 3:  	dataLen = br.ReadShort ();  	iValue = br.ReadInteger ();  	valueObject.dataType = 3;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(iValue);  	index += 1;  	break;  case 4:  	dataLen = br.ReadShort ();  	lValue = br.ReadLong ();  	valueObject.dataType = 4;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(lValue);  	index += 1;  	break;  case 5:  	dataLen = br.ReadShort ();  	sValue = br.ReadShort ();  	valueObject.dataType = 5;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(valueLength);  	index += 1;  	break;  #endregion  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,The following statement contains a magic number: switch (dataType) {  #region Read data  case 0:  	str = br.ReadShort ();  	strValue = br.ReadString (str' Encoding.Unicode);  	valueObject.dataType = 0;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(value);  	switch (attrName) {  	case "WM/Lyrics":  		break;  	case "WM/AlbumTitle":  		mp3_TALB = strValue;  		break;  	case "WM/AlbumArtist":  		mp3_TPE1 = strValue;  		break;  	case "WM/Genre":  		mp3_TCON = strValue;  		break;  	case "WM/TrackNumber":  		mp3_TRCK = strValue;  		break;  	case "WM/Year":  		break;  	case "WM/Composer":  		mp3_TCOM = strValue;  		break;  	case "WM/Publisher":  		break;  	}  	attrName += ";" + strValue;  	index += 1;  	break;  case 1:  	dataLen = br.ReadShort ();  	bValue = new byte[dataLen - 1];  	bValue = br.ReadBytes (dataLen);  	valueObject.dataType = 1;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(bValue);  	index += 1;  	break;  case 2:  	dataLen = br.ReadShort ();  	iValue = br.ReadInteger ();  	valueObject.dataType = 2;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(boolValue);  	index += 1;  	break;  case 3:  	dataLen = br.ReadShort ();  	iValue = br.ReadInteger ();  	valueObject.dataType = 3;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(iValue);  	index += 1;  	break;  case 4:  	dataLen = br.ReadShort ();  	lValue = br.ReadLong ();  	valueObject.dataType = 4;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(lValue);  	index += 1;  	break;  case 5:  	dataLen = br.ReadShort ();  	sValue = br.ReadShort ();  	valueObject.dataType = 5;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(valueLength);  	index += 1;  	break;  #endregion  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,The following statement contains a magic number: switch (dataType) {  #region Read data  case 0:  	str = br.ReadShort ();  	strValue = br.ReadString (str' Encoding.Unicode);  	valueObject.dataType = 0;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(value);  	switch (attrName) {  	case "WM/Lyrics":  		break;  	case "WM/AlbumTitle":  		mp3_TALB = strValue;  		break;  	case "WM/AlbumArtist":  		mp3_TPE1 = strValue;  		break;  	case "WM/Genre":  		mp3_TCON = strValue;  		break;  	case "WM/TrackNumber":  		mp3_TRCK = strValue;  		break;  	case "WM/Year":  		break;  	case "WM/Composer":  		mp3_TCOM = strValue;  		break;  	case "WM/Publisher":  		break;  	}  	attrName += ";" + strValue;  	index += 1;  	break;  case 1:  	dataLen = br.ReadShort ();  	bValue = new byte[dataLen - 1];  	bValue = br.ReadBytes (dataLen);  	valueObject.dataType = 1;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(bValue);  	index += 1;  	break;  case 2:  	dataLen = br.ReadShort ();  	iValue = br.ReadInteger ();  	valueObject.dataType = 2;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(boolValue);  	index += 1;  	break;  case 3:  	dataLen = br.ReadShort ();  	iValue = br.ReadInteger ();  	valueObject.dataType = 3;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(iValue);  	index += 1;  	break;  case 4:  	dataLen = br.ReadShort ();  	lValue = br.ReadLong ();  	valueObject.dataType = 4;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(lValue);  	index += 1;  	break;  case 5:  	dataLen = br.ReadShort ();  	sValue = br.ReadShort ();  	valueObject.dataType = 5;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(valueLength);  	index += 1;  	break;  #endregion  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,The following statement contains a magic number: switch (dataType) {  #region Read data  case 0:  	str = br.ReadShort ();  	strValue = br.ReadString (str' Encoding.Unicode);  	valueObject.dataType = 0;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(value);  	switch (attrName) {  	case "WM/Lyrics":  		break;  	case "WM/AlbumTitle":  		mp3_TALB = strValue;  		break;  	case "WM/AlbumArtist":  		mp3_TPE1 = strValue;  		break;  	case "WM/Genre":  		mp3_TCON = strValue;  		break;  	case "WM/TrackNumber":  		mp3_TRCK = strValue;  		break;  	case "WM/Year":  		break;  	case "WM/Composer":  		mp3_TCOM = strValue;  		break;  	case "WM/Publisher":  		break;  	}  	attrName += ";" + strValue;  	index += 1;  	break;  case 1:  	dataLen = br.ReadShort ();  	bValue = new byte[dataLen - 1];  	bValue = br.ReadBytes (dataLen);  	valueObject.dataType = 1;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(bValue);  	index += 1;  	break;  case 2:  	dataLen = br.ReadShort ();  	iValue = br.ReadInteger ();  	valueObject.dataType = 2;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(boolValue);  	index += 1;  	break;  case 3:  	dataLen = br.ReadShort ();  	iValue = br.ReadInteger ();  	valueObject.dataType = 3;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(iValue);  	index += 1;  	break;  case 4:  	dataLen = br.ReadShort ();  	lValue = br.ReadLong ();  	valueObject.dataType = 4;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(lValue);  	index += 1;  	break;  case 5:  	dataLen = br.ReadShort ();  	sValue = br.ReadShort ();  	valueObject.dataType = 5;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(valueLength);  	index += 1;  	break;  #endregion  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,The following statement contains a magic number: switch (dataType) {  #region Read data  case 0:  	str = br.ReadShort ();  	strValue = br.ReadString (str' Encoding.Unicode);  	valueObject.dataType = 0;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(value);  	switch (attrName) {  	case "WM/Lyrics":  		break;  	case "WM/AlbumTitle":  		mp3_TALB = strValue;  		break;  	case "WM/AlbumArtist":  		mp3_TPE1 = strValue;  		break;  	case "WM/Genre":  		mp3_TCON = strValue;  		break;  	case "WM/TrackNumber":  		mp3_TRCK = strValue;  		break;  	case "WM/Year":  		break;  	case "WM/Composer":  		mp3_TCOM = strValue;  		break;  	case "WM/Publisher":  		break;  	}  	attrName += ";" + strValue;  	index += 1;  	break;  case 1:  	dataLen = br.ReadShort ();  	bValue = new byte[dataLen - 1];  	bValue = br.ReadBytes (dataLen);  	valueObject.dataType = 1;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(bValue);  	index += 1;  	break;  case 2:  	dataLen = br.ReadShort ();  	iValue = br.ReadInteger ();  	valueObject.dataType = 2;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(boolValue);  	index += 1;  	break;  case 3:  	dataLen = br.ReadShort ();  	iValue = br.ReadInteger ();  	valueObject.dataType = 3;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(iValue);  	index += 1;  	break;  case 4:  	dataLen = br.ReadShort ();  	lValue = br.ReadLong ();  	valueObject.dataType = 4;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(lValue);  	index += 1;  	break;  case 5:  	dataLen = br.ReadShort ();  	sValue = br.ReadShort ();  	valueObject.dataType = 5;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(valueLength);  	index += 1;  	break;  #endregion  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,The following statement contains a magic number: valueObject.dataType = 2;  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,The following statement contains a magic number: valueObject.dataType = 3;  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,The following statement contains a magic number: valueObject.dataType = 4;  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,The following statement contains a magic number: valueObject.dataType = 5;  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getWMAOld,The following statement contains a magic number: while (ReadGuid (ref g' br)) {  	long sizeBlock = br.ReadInt64 ();  	if (br.BaseStream.Position + sizeBlock > FS.Length) {  		break;  	}  	if (Guid.Equals (g' contentGUID)) {  		processContentBlockWMAOld (br);  		CBDone = true;  		if (ECBDone)  			break;  	}  	else if (Guid.Equals (g' extendedContentGUID)) {  		processExtendedContentBlockWMAOld (br);  		ECBDone = true;  		if (CBDone)  			break;  	}  	else {  		sizeBlock -= 24;  		// already read the guid header info  		br.BaseStream.Position += sizeBlock;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getWMAOld,The following statement contains a magic number: if (Guid.Equals (g' contentGUID)) {  	processContentBlockWMAOld (br);  	CBDone = true;  	if (ECBDone)  		break;  }  else if (Guid.Equals (g' extendedContentGUID)) {  	processExtendedContentBlockWMAOld (br);  	ECBDone = true;  	if (CBDone)  		break;  }  else {  	sizeBlock -= 24;  	// already read the guid header info  	br.BaseStream.Position += sizeBlock;  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getWMAOld,The following statement contains a magic number: if (Guid.Equals (g' extendedContentGUID)) {  	processExtendedContentBlockWMAOld (br);  	ECBDone = true;  	if (CBDone)  		break;  }  else {  	sizeBlock -= 24;  	// already read the guid header info  	br.BaseStream.Position += sizeBlock;  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getWMAOld,The following statement contains a magic number: sizeBlock -= 24;  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,The following statement contains a magic number: for (i = 0; i < numAttrs; i++) {  	try {  		attrName = readUnicodeString (br);  		dataType = br.ReadInt16 ();  		switch (dataType) {  		#region Read data  		case 0:  			strValue = readUnicodeString (br);  			valueObject.dataType = 0;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(value);  			switch (attrName) {  			case "WM/Lyrics":  				break;  			case "WM/AlbumTitle":  				mp3_TALB = strValue;  				break;  			case "WM/AlbumArtist":  				mp3_TPE1 = strValue;  				break;  			case "WM/Genre":  				mp3_TCON = strValue;  				break;  			case "WM/TrackNumber":  				mp3_TRCK = strValue;  				break;  			case "WM/Year":  				break;  			case "WM/Composer":  				mp3_TCOM = strValue;  				break;  			case "WM/Publisher":  				break;  			}  			attrName += ";" + strValue;  			index += 1;  			break;  		case 1:  			dataLen = br.ReadInt16 ();  			bValue = new byte[dataLen - 1];  			bValue = br.ReadBytes (dataLen);  			valueObject.dataType = 1;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(bValue);  			index += 1;  			break;  		case 2:  			dataLen = br.ReadInt16 ();  			iValue = br.ReadInt32 ();  			valueObject.dataType = 2;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(boolValue);  			index += 1;  			break;  		case 3:  			dataLen = br.ReadInt16 ();  			iValue = br.ReadInt32 ();  			valueObject.dataType = 3;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(iValue);  			index += 1;  			break;  		case 4:  			dataLen = br.ReadInt16 ();  			lValue = br.ReadInt64 ();  			valueObject.dataType = 4;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(lValue);  			index += 1;  			break;  		case 5:  			dataLen = br.ReadInt16 ();  			sValue = br.ReadInt16 ();  			valueObject.dataType = 5;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(valueLength);  			index += 1;  			break;  		#endregion  		}  		attribs.Add (new ID3Tag (attrName' ""));  	}  	catch (Exception ex) {  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,The following statement contains a magic number: for (i = 0; i < numAttrs; i++) {  	try {  		attrName = readUnicodeString (br);  		dataType = br.ReadInt16 ();  		switch (dataType) {  		#region Read data  		case 0:  			strValue = readUnicodeString (br);  			valueObject.dataType = 0;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(value);  			switch (attrName) {  			case "WM/Lyrics":  				break;  			case "WM/AlbumTitle":  				mp3_TALB = strValue;  				break;  			case "WM/AlbumArtist":  				mp3_TPE1 = strValue;  				break;  			case "WM/Genre":  				mp3_TCON = strValue;  				break;  			case "WM/TrackNumber":  				mp3_TRCK = strValue;  				break;  			case "WM/Year":  				break;  			case "WM/Composer":  				mp3_TCOM = strValue;  				break;  			case "WM/Publisher":  				break;  			}  			attrName += ";" + strValue;  			index += 1;  			break;  		case 1:  			dataLen = br.ReadInt16 ();  			bValue = new byte[dataLen - 1];  			bValue = br.ReadBytes (dataLen);  			valueObject.dataType = 1;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(bValue);  			index += 1;  			break;  		case 2:  			dataLen = br.ReadInt16 ();  			iValue = br.ReadInt32 ();  			valueObject.dataType = 2;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(boolValue);  			index += 1;  			break;  		case 3:  			dataLen = br.ReadInt16 ();  			iValue = br.ReadInt32 ();  			valueObject.dataType = 3;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(iValue);  			index += 1;  			break;  		case 4:  			dataLen = br.ReadInt16 ();  			lValue = br.ReadInt64 ();  			valueObject.dataType = 4;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(lValue);  			index += 1;  			break;  		case 5:  			dataLen = br.ReadInt16 ();  			sValue = br.ReadInt16 ();  			valueObject.dataType = 5;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(valueLength);  			index += 1;  			break;  		#endregion  		}  		attribs.Add (new ID3Tag (attrName' ""));  	}  	catch (Exception ex) {  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,The following statement contains a magic number: for (i = 0; i < numAttrs; i++) {  	try {  		attrName = readUnicodeString (br);  		dataType = br.ReadInt16 ();  		switch (dataType) {  		#region Read data  		case 0:  			strValue = readUnicodeString (br);  			valueObject.dataType = 0;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(value);  			switch (attrName) {  			case "WM/Lyrics":  				break;  			case "WM/AlbumTitle":  				mp3_TALB = strValue;  				break;  			case "WM/AlbumArtist":  				mp3_TPE1 = strValue;  				break;  			case "WM/Genre":  				mp3_TCON = strValue;  				break;  			case "WM/TrackNumber":  				mp3_TRCK = strValue;  				break;  			case "WM/Year":  				break;  			case "WM/Composer":  				mp3_TCOM = strValue;  				break;  			case "WM/Publisher":  				break;  			}  			attrName += ";" + strValue;  			index += 1;  			break;  		case 1:  			dataLen = br.ReadInt16 ();  			bValue = new byte[dataLen - 1];  			bValue = br.ReadBytes (dataLen);  			valueObject.dataType = 1;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(bValue);  			index += 1;  			break;  		case 2:  			dataLen = br.ReadInt16 ();  			iValue = br.ReadInt32 ();  			valueObject.dataType = 2;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(boolValue);  			index += 1;  			break;  		case 3:  			dataLen = br.ReadInt16 ();  			iValue = br.ReadInt32 ();  			valueObject.dataType = 3;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(iValue);  			index += 1;  			break;  		case 4:  			dataLen = br.ReadInt16 ();  			lValue = br.ReadInt64 ();  			valueObject.dataType = 4;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(lValue);  			index += 1;  			break;  		case 5:  			dataLen = br.ReadInt16 ();  			sValue = br.ReadInt16 ();  			valueObject.dataType = 5;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(valueLength);  			index += 1;  			break;  		#endregion  		}  		attribs.Add (new ID3Tag (attrName' ""));  	}  	catch (Exception ex) {  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,The following statement contains a magic number: for (i = 0; i < numAttrs; i++) {  	try {  		attrName = readUnicodeString (br);  		dataType = br.ReadInt16 ();  		switch (dataType) {  		#region Read data  		case 0:  			strValue = readUnicodeString (br);  			valueObject.dataType = 0;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(value);  			switch (attrName) {  			case "WM/Lyrics":  				break;  			case "WM/AlbumTitle":  				mp3_TALB = strValue;  				break;  			case "WM/AlbumArtist":  				mp3_TPE1 = strValue;  				break;  			case "WM/Genre":  				mp3_TCON = strValue;  				break;  			case "WM/TrackNumber":  				mp3_TRCK = strValue;  				break;  			case "WM/Year":  				break;  			case "WM/Composer":  				mp3_TCOM = strValue;  				break;  			case "WM/Publisher":  				break;  			}  			attrName += ";" + strValue;  			index += 1;  			break;  		case 1:  			dataLen = br.ReadInt16 ();  			bValue = new byte[dataLen - 1];  			bValue = br.ReadBytes (dataLen);  			valueObject.dataType = 1;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(bValue);  			index += 1;  			break;  		case 2:  			dataLen = br.ReadInt16 ();  			iValue = br.ReadInt32 ();  			valueObject.dataType = 2;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(boolValue);  			index += 1;  			break;  		case 3:  			dataLen = br.ReadInt16 ();  			iValue = br.ReadInt32 ();  			valueObject.dataType = 3;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(iValue);  			index += 1;  			break;  		case 4:  			dataLen = br.ReadInt16 ();  			lValue = br.ReadInt64 ();  			valueObject.dataType = 4;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(lValue);  			index += 1;  			break;  		case 5:  			dataLen = br.ReadInt16 ();  			sValue = br.ReadInt16 ();  			valueObject.dataType = 5;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(valueLength);  			index += 1;  			break;  		#endregion  		}  		attribs.Add (new ID3Tag (attrName' ""));  	}  	catch (Exception ex) {  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,The following statement contains a magic number: for (i = 0; i < numAttrs; i++) {  	try {  		attrName = readUnicodeString (br);  		dataType = br.ReadInt16 ();  		switch (dataType) {  		#region Read data  		case 0:  			strValue = readUnicodeString (br);  			valueObject.dataType = 0;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(value);  			switch (attrName) {  			case "WM/Lyrics":  				break;  			case "WM/AlbumTitle":  				mp3_TALB = strValue;  				break;  			case "WM/AlbumArtist":  				mp3_TPE1 = strValue;  				break;  			case "WM/Genre":  				mp3_TCON = strValue;  				break;  			case "WM/TrackNumber":  				mp3_TRCK = strValue;  				break;  			case "WM/Year":  				break;  			case "WM/Composer":  				mp3_TCOM = strValue;  				break;  			case "WM/Publisher":  				break;  			}  			attrName += ";" + strValue;  			index += 1;  			break;  		case 1:  			dataLen = br.ReadInt16 ();  			bValue = new byte[dataLen - 1];  			bValue = br.ReadBytes (dataLen);  			valueObject.dataType = 1;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(bValue);  			index += 1;  			break;  		case 2:  			dataLen = br.ReadInt16 ();  			iValue = br.ReadInt32 ();  			valueObject.dataType = 2;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(boolValue);  			index += 1;  			break;  		case 3:  			dataLen = br.ReadInt16 ();  			iValue = br.ReadInt32 ();  			valueObject.dataType = 3;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(iValue);  			index += 1;  			break;  		case 4:  			dataLen = br.ReadInt16 ();  			lValue = br.ReadInt64 ();  			valueObject.dataType = 4;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(lValue);  			index += 1;  			break;  		case 5:  			dataLen = br.ReadInt16 ();  			sValue = br.ReadInt16 ();  			valueObject.dataType = 5;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(valueLength);  			index += 1;  			break;  		#endregion  		}  		attribs.Add (new ID3Tag (attrName' ""));  	}  	catch (Exception ex) {  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,The following statement contains a magic number: for (i = 0; i < numAttrs; i++) {  	try {  		attrName = readUnicodeString (br);  		dataType = br.ReadInt16 ();  		switch (dataType) {  		#region Read data  		case 0:  			strValue = readUnicodeString (br);  			valueObject.dataType = 0;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(value);  			switch (attrName) {  			case "WM/Lyrics":  				break;  			case "WM/AlbumTitle":  				mp3_TALB = strValue;  				break;  			case "WM/AlbumArtist":  				mp3_TPE1 = strValue;  				break;  			case "WM/Genre":  				mp3_TCON = strValue;  				break;  			case "WM/TrackNumber":  				mp3_TRCK = strValue;  				break;  			case "WM/Year":  				break;  			case "WM/Composer":  				mp3_TCOM = strValue;  				break;  			case "WM/Publisher":  				break;  			}  			attrName += ";" + strValue;  			index += 1;  			break;  		case 1:  			dataLen = br.ReadInt16 ();  			bValue = new byte[dataLen - 1];  			bValue = br.ReadBytes (dataLen);  			valueObject.dataType = 1;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(bValue);  			index += 1;  			break;  		case 2:  			dataLen = br.ReadInt16 ();  			iValue = br.ReadInt32 ();  			valueObject.dataType = 2;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(boolValue);  			index += 1;  			break;  		case 3:  			dataLen = br.ReadInt16 ();  			iValue = br.ReadInt32 ();  			valueObject.dataType = 3;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(iValue);  			index += 1;  			break;  		case 4:  			dataLen = br.ReadInt16 ();  			lValue = br.ReadInt64 ();  			valueObject.dataType = 4;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(lValue);  			index += 1;  			break;  		case 5:  			dataLen = br.ReadInt16 ();  			sValue = br.ReadInt16 ();  			valueObject.dataType = 5;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(valueLength);  			index += 1;  			break;  		#endregion  		}  		attribs.Add (new ID3Tag (attrName' ""));  	}  	catch (Exception ex) {  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,The following statement contains a magic number: for (i = 0; i < numAttrs; i++) {  	try {  		attrName = readUnicodeString (br);  		dataType = br.ReadInt16 ();  		switch (dataType) {  		#region Read data  		case 0:  			strValue = readUnicodeString (br);  			valueObject.dataType = 0;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(value);  			switch (attrName) {  			case "WM/Lyrics":  				break;  			case "WM/AlbumTitle":  				mp3_TALB = strValue;  				break;  			case "WM/AlbumArtist":  				mp3_TPE1 = strValue;  				break;  			case "WM/Genre":  				mp3_TCON = strValue;  				break;  			case "WM/TrackNumber":  				mp3_TRCK = strValue;  				break;  			case "WM/Year":  				break;  			case "WM/Composer":  				mp3_TCOM = strValue;  				break;  			case "WM/Publisher":  				break;  			}  			attrName += ";" + strValue;  			index += 1;  			break;  		case 1:  			dataLen = br.ReadInt16 ();  			bValue = new byte[dataLen - 1];  			bValue = br.ReadBytes (dataLen);  			valueObject.dataType = 1;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(bValue);  			index += 1;  			break;  		case 2:  			dataLen = br.ReadInt16 ();  			iValue = br.ReadInt32 ();  			valueObject.dataType = 2;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(boolValue);  			index += 1;  			break;  		case 3:  			dataLen = br.ReadInt16 ();  			iValue = br.ReadInt32 ();  			valueObject.dataType = 3;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(iValue);  			index += 1;  			break;  		case 4:  			dataLen = br.ReadInt16 ();  			lValue = br.ReadInt64 ();  			valueObject.dataType = 4;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(lValue);  			index += 1;  			break;  		case 5:  			dataLen = br.ReadInt16 ();  			sValue = br.ReadInt16 ();  			valueObject.dataType = 5;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(valueLength);  			index += 1;  			break;  		#endregion  		}  		attribs.Add (new ID3Tag (attrName' ""));  	}  	catch (Exception ex) {  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,The following statement contains a magic number: for (i = 0; i < numAttrs; i++) {  	try {  		attrName = readUnicodeString (br);  		dataType = br.ReadInt16 ();  		switch (dataType) {  		#region Read data  		case 0:  			strValue = readUnicodeString (br);  			valueObject.dataType = 0;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(value);  			switch (attrName) {  			case "WM/Lyrics":  				break;  			case "WM/AlbumTitle":  				mp3_TALB = strValue;  				break;  			case "WM/AlbumArtist":  				mp3_TPE1 = strValue;  				break;  			case "WM/Genre":  				mp3_TCON = strValue;  				break;  			case "WM/TrackNumber":  				mp3_TRCK = strValue;  				break;  			case "WM/Year":  				break;  			case "WM/Composer":  				mp3_TCOM = strValue;  				break;  			case "WM/Publisher":  				break;  			}  			attrName += ";" + strValue;  			index += 1;  			break;  		case 1:  			dataLen = br.ReadInt16 ();  			bValue = new byte[dataLen - 1];  			bValue = br.ReadBytes (dataLen);  			valueObject.dataType = 1;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(bValue);  			index += 1;  			break;  		case 2:  			dataLen = br.ReadInt16 ();  			iValue = br.ReadInt32 ();  			valueObject.dataType = 2;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(boolValue);  			index += 1;  			break;  		case 3:  			dataLen = br.ReadInt16 ();  			iValue = br.ReadInt32 ();  			valueObject.dataType = 3;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(iValue);  			index += 1;  			break;  		case 4:  			dataLen = br.ReadInt16 ();  			lValue = br.ReadInt64 ();  			valueObject.dataType = 4;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(lValue);  			index += 1;  			break;  		case 5:  			dataLen = br.ReadInt16 ();  			sValue = br.ReadInt16 ();  			valueObject.dataType = 5;  			valueObject.index = index;  			//attrs.Add(attrName' valueObject);  			//attrValues.Add(valueLength);  			index += 1;  			break;  		#endregion  		}  		attribs.Add (new ID3Tag (attrName' ""));  	}  	catch (Exception ex) {  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,The following statement contains a magic number: try {  	attrName = readUnicodeString (br);  	dataType = br.ReadInt16 ();  	switch (dataType) {  	#region Read data  	case 0:  		strValue = readUnicodeString (br);  		valueObject.dataType = 0;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(value);  		switch (attrName) {  		case "WM/Lyrics":  			break;  		case "WM/AlbumTitle":  			mp3_TALB = strValue;  			break;  		case "WM/AlbumArtist":  			mp3_TPE1 = strValue;  			break;  		case "WM/Genre":  			mp3_TCON = strValue;  			break;  		case "WM/TrackNumber":  			mp3_TRCK = strValue;  			break;  		case "WM/Year":  			break;  		case "WM/Composer":  			mp3_TCOM = strValue;  			break;  		case "WM/Publisher":  			break;  		}  		attrName += ";" + strValue;  		index += 1;  		break;  	case 1:  		dataLen = br.ReadInt16 ();  		bValue = new byte[dataLen - 1];  		bValue = br.ReadBytes (dataLen);  		valueObject.dataType = 1;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(bValue);  		index += 1;  		break;  	case 2:  		dataLen = br.ReadInt16 ();  		iValue = br.ReadInt32 ();  		valueObject.dataType = 2;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(boolValue);  		index += 1;  		break;  	case 3:  		dataLen = br.ReadInt16 ();  		iValue = br.ReadInt32 ();  		valueObject.dataType = 3;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(iValue);  		index += 1;  		break;  	case 4:  		dataLen = br.ReadInt16 ();  		lValue = br.ReadInt64 ();  		valueObject.dataType = 4;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(lValue);  		index += 1;  		break;  	case 5:  		dataLen = br.ReadInt16 ();  		sValue = br.ReadInt16 ();  		valueObject.dataType = 5;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(valueLength);  		index += 1;  		break;  	#endregion  	}  	attribs.Add (new ID3Tag (attrName' ""));  }  catch (Exception ex) {  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,The following statement contains a magic number: try {  	attrName = readUnicodeString (br);  	dataType = br.ReadInt16 ();  	switch (dataType) {  	#region Read data  	case 0:  		strValue = readUnicodeString (br);  		valueObject.dataType = 0;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(value);  		switch (attrName) {  		case "WM/Lyrics":  			break;  		case "WM/AlbumTitle":  			mp3_TALB = strValue;  			break;  		case "WM/AlbumArtist":  			mp3_TPE1 = strValue;  			break;  		case "WM/Genre":  			mp3_TCON = strValue;  			break;  		case "WM/TrackNumber":  			mp3_TRCK = strValue;  			break;  		case "WM/Year":  			break;  		case "WM/Composer":  			mp3_TCOM = strValue;  			break;  		case "WM/Publisher":  			break;  		}  		attrName += ";" + strValue;  		index += 1;  		break;  	case 1:  		dataLen = br.ReadInt16 ();  		bValue = new byte[dataLen - 1];  		bValue = br.ReadBytes (dataLen);  		valueObject.dataType = 1;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(bValue);  		index += 1;  		break;  	case 2:  		dataLen = br.ReadInt16 ();  		iValue = br.ReadInt32 ();  		valueObject.dataType = 2;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(boolValue);  		index += 1;  		break;  	case 3:  		dataLen = br.ReadInt16 ();  		iValue = br.ReadInt32 ();  		valueObject.dataType = 3;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(iValue);  		index += 1;  		break;  	case 4:  		dataLen = br.ReadInt16 ();  		lValue = br.ReadInt64 ();  		valueObject.dataType = 4;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(lValue);  		index += 1;  		break;  	case 5:  		dataLen = br.ReadInt16 ();  		sValue = br.ReadInt16 ();  		valueObject.dataType = 5;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(valueLength);  		index += 1;  		break;  	#endregion  	}  	attribs.Add (new ID3Tag (attrName' ""));  }  catch (Exception ex) {  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,The following statement contains a magic number: try {  	attrName = readUnicodeString (br);  	dataType = br.ReadInt16 ();  	switch (dataType) {  	#region Read data  	case 0:  		strValue = readUnicodeString (br);  		valueObject.dataType = 0;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(value);  		switch (attrName) {  		case "WM/Lyrics":  			break;  		case "WM/AlbumTitle":  			mp3_TALB = strValue;  			break;  		case "WM/AlbumArtist":  			mp3_TPE1 = strValue;  			break;  		case "WM/Genre":  			mp3_TCON = strValue;  			break;  		case "WM/TrackNumber":  			mp3_TRCK = strValue;  			break;  		case "WM/Year":  			break;  		case "WM/Composer":  			mp3_TCOM = strValue;  			break;  		case "WM/Publisher":  			break;  		}  		attrName += ";" + strValue;  		index += 1;  		break;  	case 1:  		dataLen = br.ReadInt16 ();  		bValue = new byte[dataLen - 1];  		bValue = br.ReadBytes (dataLen);  		valueObject.dataType = 1;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(bValue);  		index += 1;  		break;  	case 2:  		dataLen = br.ReadInt16 ();  		iValue = br.ReadInt32 ();  		valueObject.dataType = 2;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(boolValue);  		index += 1;  		break;  	case 3:  		dataLen = br.ReadInt16 ();  		iValue = br.ReadInt32 ();  		valueObject.dataType = 3;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(iValue);  		index += 1;  		break;  	case 4:  		dataLen = br.ReadInt16 ();  		lValue = br.ReadInt64 ();  		valueObject.dataType = 4;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(lValue);  		index += 1;  		break;  	case 5:  		dataLen = br.ReadInt16 ();  		sValue = br.ReadInt16 ();  		valueObject.dataType = 5;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(valueLength);  		index += 1;  		break;  	#endregion  	}  	attribs.Add (new ID3Tag (attrName' ""));  }  catch (Exception ex) {  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,The following statement contains a magic number: try {  	attrName = readUnicodeString (br);  	dataType = br.ReadInt16 ();  	switch (dataType) {  	#region Read data  	case 0:  		strValue = readUnicodeString (br);  		valueObject.dataType = 0;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(value);  		switch (attrName) {  		case "WM/Lyrics":  			break;  		case "WM/AlbumTitle":  			mp3_TALB = strValue;  			break;  		case "WM/AlbumArtist":  			mp3_TPE1 = strValue;  			break;  		case "WM/Genre":  			mp3_TCON = strValue;  			break;  		case "WM/TrackNumber":  			mp3_TRCK = strValue;  			break;  		case "WM/Year":  			break;  		case "WM/Composer":  			mp3_TCOM = strValue;  			break;  		case "WM/Publisher":  			break;  		}  		attrName += ";" + strValue;  		index += 1;  		break;  	case 1:  		dataLen = br.ReadInt16 ();  		bValue = new byte[dataLen - 1];  		bValue = br.ReadBytes (dataLen);  		valueObject.dataType = 1;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(bValue);  		index += 1;  		break;  	case 2:  		dataLen = br.ReadInt16 ();  		iValue = br.ReadInt32 ();  		valueObject.dataType = 2;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(boolValue);  		index += 1;  		break;  	case 3:  		dataLen = br.ReadInt16 ();  		iValue = br.ReadInt32 ();  		valueObject.dataType = 3;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(iValue);  		index += 1;  		break;  	case 4:  		dataLen = br.ReadInt16 ();  		lValue = br.ReadInt64 ();  		valueObject.dataType = 4;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(lValue);  		index += 1;  		break;  	case 5:  		dataLen = br.ReadInt16 ();  		sValue = br.ReadInt16 ();  		valueObject.dataType = 5;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(valueLength);  		index += 1;  		break;  	#endregion  	}  	attribs.Add (new ID3Tag (attrName' ""));  }  catch (Exception ex) {  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,The following statement contains a magic number: try {  	attrName = readUnicodeString (br);  	dataType = br.ReadInt16 ();  	switch (dataType) {  	#region Read data  	case 0:  		strValue = readUnicodeString (br);  		valueObject.dataType = 0;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(value);  		switch (attrName) {  		case "WM/Lyrics":  			break;  		case "WM/AlbumTitle":  			mp3_TALB = strValue;  			break;  		case "WM/AlbumArtist":  			mp3_TPE1 = strValue;  			break;  		case "WM/Genre":  			mp3_TCON = strValue;  			break;  		case "WM/TrackNumber":  			mp3_TRCK = strValue;  			break;  		case "WM/Year":  			break;  		case "WM/Composer":  			mp3_TCOM = strValue;  			break;  		case "WM/Publisher":  			break;  		}  		attrName += ";" + strValue;  		index += 1;  		break;  	case 1:  		dataLen = br.ReadInt16 ();  		bValue = new byte[dataLen - 1];  		bValue = br.ReadBytes (dataLen);  		valueObject.dataType = 1;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(bValue);  		index += 1;  		break;  	case 2:  		dataLen = br.ReadInt16 ();  		iValue = br.ReadInt32 ();  		valueObject.dataType = 2;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(boolValue);  		index += 1;  		break;  	case 3:  		dataLen = br.ReadInt16 ();  		iValue = br.ReadInt32 ();  		valueObject.dataType = 3;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(iValue);  		index += 1;  		break;  	case 4:  		dataLen = br.ReadInt16 ();  		lValue = br.ReadInt64 ();  		valueObject.dataType = 4;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(lValue);  		index += 1;  		break;  	case 5:  		dataLen = br.ReadInt16 ();  		sValue = br.ReadInt16 ();  		valueObject.dataType = 5;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(valueLength);  		index += 1;  		break;  	#endregion  	}  	attribs.Add (new ID3Tag (attrName' ""));  }  catch (Exception ex) {  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,The following statement contains a magic number: try {  	attrName = readUnicodeString (br);  	dataType = br.ReadInt16 ();  	switch (dataType) {  	#region Read data  	case 0:  		strValue = readUnicodeString (br);  		valueObject.dataType = 0;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(value);  		switch (attrName) {  		case "WM/Lyrics":  			break;  		case "WM/AlbumTitle":  			mp3_TALB = strValue;  			break;  		case "WM/AlbumArtist":  			mp3_TPE1 = strValue;  			break;  		case "WM/Genre":  			mp3_TCON = strValue;  			break;  		case "WM/TrackNumber":  			mp3_TRCK = strValue;  			break;  		case "WM/Year":  			break;  		case "WM/Composer":  			mp3_TCOM = strValue;  			break;  		case "WM/Publisher":  			break;  		}  		attrName += ";" + strValue;  		index += 1;  		break;  	case 1:  		dataLen = br.ReadInt16 ();  		bValue = new byte[dataLen - 1];  		bValue = br.ReadBytes (dataLen);  		valueObject.dataType = 1;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(bValue);  		index += 1;  		break;  	case 2:  		dataLen = br.ReadInt16 ();  		iValue = br.ReadInt32 ();  		valueObject.dataType = 2;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(boolValue);  		index += 1;  		break;  	case 3:  		dataLen = br.ReadInt16 ();  		iValue = br.ReadInt32 ();  		valueObject.dataType = 3;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(iValue);  		index += 1;  		break;  	case 4:  		dataLen = br.ReadInt16 ();  		lValue = br.ReadInt64 ();  		valueObject.dataType = 4;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(lValue);  		index += 1;  		break;  	case 5:  		dataLen = br.ReadInt16 ();  		sValue = br.ReadInt16 ();  		valueObject.dataType = 5;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(valueLength);  		index += 1;  		break;  	#endregion  	}  	attribs.Add (new ID3Tag (attrName' ""));  }  catch (Exception ex) {  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,The following statement contains a magic number: try {  	attrName = readUnicodeString (br);  	dataType = br.ReadInt16 ();  	switch (dataType) {  	#region Read data  	case 0:  		strValue = readUnicodeString (br);  		valueObject.dataType = 0;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(value);  		switch (attrName) {  		case "WM/Lyrics":  			break;  		case "WM/AlbumTitle":  			mp3_TALB = strValue;  			break;  		case "WM/AlbumArtist":  			mp3_TPE1 = strValue;  			break;  		case "WM/Genre":  			mp3_TCON = strValue;  			break;  		case "WM/TrackNumber":  			mp3_TRCK = strValue;  			break;  		case "WM/Year":  			break;  		case "WM/Composer":  			mp3_TCOM = strValue;  			break;  		case "WM/Publisher":  			break;  		}  		attrName += ";" + strValue;  		index += 1;  		break;  	case 1:  		dataLen = br.ReadInt16 ();  		bValue = new byte[dataLen - 1];  		bValue = br.ReadBytes (dataLen);  		valueObject.dataType = 1;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(bValue);  		index += 1;  		break;  	case 2:  		dataLen = br.ReadInt16 ();  		iValue = br.ReadInt32 ();  		valueObject.dataType = 2;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(boolValue);  		index += 1;  		break;  	case 3:  		dataLen = br.ReadInt16 ();  		iValue = br.ReadInt32 ();  		valueObject.dataType = 3;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(iValue);  		index += 1;  		break;  	case 4:  		dataLen = br.ReadInt16 ();  		lValue = br.ReadInt64 ();  		valueObject.dataType = 4;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(lValue);  		index += 1;  		break;  	case 5:  		dataLen = br.ReadInt16 ();  		sValue = br.ReadInt16 ();  		valueObject.dataType = 5;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(valueLength);  		index += 1;  		break;  	#endregion  	}  	attribs.Add (new ID3Tag (attrName' ""));  }  catch (Exception ex) {  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,The following statement contains a magic number: try {  	attrName = readUnicodeString (br);  	dataType = br.ReadInt16 ();  	switch (dataType) {  	#region Read data  	case 0:  		strValue = readUnicodeString (br);  		valueObject.dataType = 0;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(value);  		switch (attrName) {  		case "WM/Lyrics":  			break;  		case "WM/AlbumTitle":  			mp3_TALB = strValue;  			break;  		case "WM/AlbumArtist":  			mp3_TPE1 = strValue;  			break;  		case "WM/Genre":  			mp3_TCON = strValue;  			break;  		case "WM/TrackNumber":  			mp3_TRCK = strValue;  			break;  		case "WM/Year":  			break;  		case "WM/Composer":  			mp3_TCOM = strValue;  			break;  		case "WM/Publisher":  			break;  		}  		attrName += ";" + strValue;  		index += 1;  		break;  	case 1:  		dataLen = br.ReadInt16 ();  		bValue = new byte[dataLen - 1];  		bValue = br.ReadBytes (dataLen);  		valueObject.dataType = 1;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(bValue);  		index += 1;  		break;  	case 2:  		dataLen = br.ReadInt16 ();  		iValue = br.ReadInt32 ();  		valueObject.dataType = 2;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(boolValue);  		index += 1;  		break;  	case 3:  		dataLen = br.ReadInt16 ();  		iValue = br.ReadInt32 ();  		valueObject.dataType = 3;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(iValue);  		index += 1;  		break;  	case 4:  		dataLen = br.ReadInt16 ();  		lValue = br.ReadInt64 ();  		valueObject.dataType = 4;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(lValue);  		index += 1;  		break;  	case 5:  		dataLen = br.ReadInt16 ();  		sValue = br.ReadInt16 ();  		valueObject.dataType = 5;  		valueObject.index = index;  		//attrs.Add(attrName' valueObject);  		//attrValues.Add(valueLength);  		index += 1;  		break;  	#endregion  	}  	attribs.Add (new ID3Tag (attrName' ""));  }  catch (Exception ex) {  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,The following statement contains a magic number: switch (dataType) {  #region Read data  case 0:  	strValue = readUnicodeString (br);  	valueObject.dataType = 0;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(value);  	switch (attrName) {  	case "WM/Lyrics":  		break;  	case "WM/AlbumTitle":  		mp3_TALB = strValue;  		break;  	case "WM/AlbumArtist":  		mp3_TPE1 = strValue;  		break;  	case "WM/Genre":  		mp3_TCON = strValue;  		break;  	case "WM/TrackNumber":  		mp3_TRCK = strValue;  		break;  	case "WM/Year":  		break;  	case "WM/Composer":  		mp3_TCOM = strValue;  		break;  	case "WM/Publisher":  		break;  	}  	attrName += ";" + strValue;  	index += 1;  	break;  case 1:  	dataLen = br.ReadInt16 ();  	bValue = new byte[dataLen - 1];  	bValue = br.ReadBytes (dataLen);  	valueObject.dataType = 1;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(bValue);  	index += 1;  	break;  case 2:  	dataLen = br.ReadInt16 ();  	iValue = br.ReadInt32 ();  	valueObject.dataType = 2;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(boolValue);  	index += 1;  	break;  case 3:  	dataLen = br.ReadInt16 ();  	iValue = br.ReadInt32 ();  	valueObject.dataType = 3;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(iValue);  	index += 1;  	break;  case 4:  	dataLen = br.ReadInt16 ();  	lValue = br.ReadInt64 ();  	valueObject.dataType = 4;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(lValue);  	index += 1;  	break;  case 5:  	dataLen = br.ReadInt16 ();  	sValue = br.ReadInt16 ();  	valueObject.dataType = 5;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(valueLength);  	index += 1;  	break;  #endregion  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,The following statement contains a magic number: switch (dataType) {  #region Read data  case 0:  	strValue = readUnicodeString (br);  	valueObject.dataType = 0;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(value);  	switch (attrName) {  	case "WM/Lyrics":  		break;  	case "WM/AlbumTitle":  		mp3_TALB = strValue;  		break;  	case "WM/AlbumArtist":  		mp3_TPE1 = strValue;  		break;  	case "WM/Genre":  		mp3_TCON = strValue;  		break;  	case "WM/TrackNumber":  		mp3_TRCK = strValue;  		break;  	case "WM/Year":  		break;  	case "WM/Composer":  		mp3_TCOM = strValue;  		break;  	case "WM/Publisher":  		break;  	}  	attrName += ";" + strValue;  	index += 1;  	break;  case 1:  	dataLen = br.ReadInt16 ();  	bValue = new byte[dataLen - 1];  	bValue = br.ReadBytes (dataLen);  	valueObject.dataType = 1;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(bValue);  	index += 1;  	break;  case 2:  	dataLen = br.ReadInt16 ();  	iValue = br.ReadInt32 ();  	valueObject.dataType = 2;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(boolValue);  	index += 1;  	break;  case 3:  	dataLen = br.ReadInt16 ();  	iValue = br.ReadInt32 ();  	valueObject.dataType = 3;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(iValue);  	index += 1;  	break;  case 4:  	dataLen = br.ReadInt16 ();  	lValue = br.ReadInt64 ();  	valueObject.dataType = 4;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(lValue);  	index += 1;  	break;  case 5:  	dataLen = br.ReadInt16 ();  	sValue = br.ReadInt16 ();  	valueObject.dataType = 5;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(valueLength);  	index += 1;  	break;  #endregion  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,The following statement contains a magic number: switch (dataType) {  #region Read data  case 0:  	strValue = readUnicodeString (br);  	valueObject.dataType = 0;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(value);  	switch (attrName) {  	case "WM/Lyrics":  		break;  	case "WM/AlbumTitle":  		mp3_TALB = strValue;  		break;  	case "WM/AlbumArtist":  		mp3_TPE1 = strValue;  		break;  	case "WM/Genre":  		mp3_TCON = strValue;  		break;  	case "WM/TrackNumber":  		mp3_TRCK = strValue;  		break;  	case "WM/Year":  		break;  	case "WM/Composer":  		mp3_TCOM = strValue;  		break;  	case "WM/Publisher":  		break;  	}  	attrName += ";" + strValue;  	index += 1;  	break;  case 1:  	dataLen = br.ReadInt16 ();  	bValue = new byte[dataLen - 1];  	bValue = br.ReadBytes (dataLen);  	valueObject.dataType = 1;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(bValue);  	index += 1;  	break;  case 2:  	dataLen = br.ReadInt16 ();  	iValue = br.ReadInt32 ();  	valueObject.dataType = 2;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(boolValue);  	index += 1;  	break;  case 3:  	dataLen = br.ReadInt16 ();  	iValue = br.ReadInt32 ();  	valueObject.dataType = 3;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(iValue);  	index += 1;  	break;  case 4:  	dataLen = br.ReadInt16 ();  	lValue = br.ReadInt64 ();  	valueObject.dataType = 4;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(lValue);  	index += 1;  	break;  case 5:  	dataLen = br.ReadInt16 ();  	sValue = br.ReadInt16 ();  	valueObject.dataType = 5;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(valueLength);  	index += 1;  	break;  #endregion  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,The following statement contains a magic number: switch (dataType) {  #region Read data  case 0:  	strValue = readUnicodeString (br);  	valueObject.dataType = 0;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(value);  	switch (attrName) {  	case "WM/Lyrics":  		break;  	case "WM/AlbumTitle":  		mp3_TALB = strValue;  		break;  	case "WM/AlbumArtist":  		mp3_TPE1 = strValue;  		break;  	case "WM/Genre":  		mp3_TCON = strValue;  		break;  	case "WM/TrackNumber":  		mp3_TRCK = strValue;  		break;  	case "WM/Year":  		break;  	case "WM/Composer":  		mp3_TCOM = strValue;  		break;  	case "WM/Publisher":  		break;  	}  	attrName += ";" + strValue;  	index += 1;  	break;  case 1:  	dataLen = br.ReadInt16 ();  	bValue = new byte[dataLen - 1];  	bValue = br.ReadBytes (dataLen);  	valueObject.dataType = 1;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(bValue);  	index += 1;  	break;  case 2:  	dataLen = br.ReadInt16 ();  	iValue = br.ReadInt32 ();  	valueObject.dataType = 2;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(boolValue);  	index += 1;  	break;  case 3:  	dataLen = br.ReadInt16 ();  	iValue = br.ReadInt32 ();  	valueObject.dataType = 3;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(iValue);  	index += 1;  	break;  case 4:  	dataLen = br.ReadInt16 ();  	lValue = br.ReadInt64 ();  	valueObject.dataType = 4;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(lValue);  	index += 1;  	break;  case 5:  	dataLen = br.ReadInt16 ();  	sValue = br.ReadInt16 ();  	valueObject.dataType = 5;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(valueLength);  	index += 1;  	break;  #endregion  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,The following statement contains a magic number: switch (dataType) {  #region Read data  case 0:  	strValue = readUnicodeString (br);  	valueObject.dataType = 0;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(value);  	switch (attrName) {  	case "WM/Lyrics":  		break;  	case "WM/AlbumTitle":  		mp3_TALB = strValue;  		break;  	case "WM/AlbumArtist":  		mp3_TPE1 = strValue;  		break;  	case "WM/Genre":  		mp3_TCON = strValue;  		break;  	case "WM/TrackNumber":  		mp3_TRCK = strValue;  		break;  	case "WM/Year":  		break;  	case "WM/Composer":  		mp3_TCOM = strValue;  		break;  	case "WM/Publisher":  		break;  	}  	attrName += ";" + strValue;  	index += 1;  	break;  case 1:  	dataLen = br.ReadInt16 ();  	bValue = new byte[dataLen - 1];  	bValue = br.ReadBytes (dataLen);  	valueObject.dataType = 1;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(bValue);  	index += 1;  	break;  case 2:  	dataLen = br.ReadInt16 ();  	iValue = br.ReadInt32 ();  	valueObject.dataType = 2;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(boolValue);  	index += 1;  	break;  case 3:  	dataLen = br.ReadInt16 ();  	iValue = br.ReadInt32 ();  	valueObject.dataType = 3;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(iValue);  	index += 1;  	break;  case 4:  	dataLen = br.ReadInt16 ();  	lValue = br.ReadInt64 ();  	valueObject.dataType = 4;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(lValue);  	index += 1;  	break;  case 5:  	dataLen = br.ReadInt16 ();  	sValue = br.ReadInt16 ();  	valueObject.dataType = 5;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(valueLength);  	index += 1;  	break;  #endregion  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,The following statement contains a magic number: switch (dataType) {  #region Read data  case 0:  	strValue = readUnicodeString (br);  	valueObject.dataType = 0;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(value);  	switch (attrName) {  	case "WM/Lyrics":  		break;  	case "WM/AlbumTitle":  		mp3_TALB = strValue;  		break;  	case "WM/AlbumArtist":  		mp3_TPE1 = strValue;  		break;  	case "WM/Genre":  		mp3_TCON = strValue;  		break;  	case "WM/TrackNumber":  		mp3_TRCK = strValue;  		break;  	case "WM/Year":  		break;  	case "WM/Composer":  		mp3_TCOM = strValue;  		break;  	case "WM/Publisher":  		break;  	}  	attrName += ";" + strValue;  	index += 1;  	break;  case 1:  	dataLen = br.ReadInt16 ();  	bValue = new byte[dataLen - 1];  	bValue = br.ReadBytes (dataLen);  	valueObject.dataType = 1;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(bValue);  	index += 1;  	break;  case 2:  	dataLen = br.ReadInt16 ();  	iValue = br.ReadInt32 ();  	valueObject.dataType = 2;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(boolValue);  	index += 1;  	break;  case 3:  	dataLen = br.ReadInt16 ();  	iValue = br.ReadInt32 ();  	valueObject.dataType = 3;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(iValue);  	index += 1;  	break;  case 4:  	dataLen = br.ReadInt16 ();  	lValue = br.ReadInt64 ();  	valueObject.dataType = 4;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(lValue);  	index += 1;  	break;  case 5:  	dataLen = br.ReadInt16 ();  	sValue = br.ReadInt16 ();  	valueObject.dataType = 5;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(valueLength);  	index += 1;  	break;  #endregion  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,The following statement contains a magic number: switch (dataType) {  #region Read data  case 0:  	strValue = readUnicodeString (br);  	valueObject.dataType = 0;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(value);  	switch (attrName) {  	case "WM/Lyrics":  		break;  	case "WM/AlbumTitle":  		mp3_TALB = strValue;  		break;  	case "WM/AlbumArtist":  		mp3_TPE1 = strValue;  		break;  	case "WM/Genre":  		mp3_TCON = strValue;  		break;  	case "WM/TrackNumber":  		mp3_TRCK = strValue;  		break;  	case "WM/Year":  		break;  	case "WM/Composer":  		mp3_TCOM = strValue;  		break;  	case "WM/Publisher":  		break;  	}  	attrName += ";" + strValue;  	index += 1;  	break;  case 1:  	dataLen = br.ReadInt16 ();  	bValue = new byte[dataLen - 1];  	bValue = br.ReadBytes (dataLen);  	valueObject.dataType = 1;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(bValue);  	index += 1;  	break;  case 2:  	dataLen = br.ReadInt16 ();  	iValue = br.ReadInt32 ();  	valueObject.dataType = 2;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(boolValue);  	index += 1;  	break;  case 3:  	dataLen = br.ReadInt16 ();  	iValue = br.ReadInt32 ();  	valueObject.dataType = 3;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(iValue);  	index += 1;  	break;  case 4:  	dataLen = br.ReadInt16 ();  	lValue = br.ReadInt64 ();  	valueObject.dataType = 4;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(lValue);  	index += 1;  	break;  case 5:  	dataLen = br.ReadInt16 ();  	sValue = br.ReadInt16 ();  	valueObject.dataType = 5;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(valueLength);  	index += 1;  	break;  #endregion  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,The following statement contains a magic number: switch (dataType) {  #region Read data  case 0:  	strValue = readUnicodeString (br);  	valueObject.dataType = 0;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(value);  	switch (attrName) {  	case "WM/Lyrics":  		break;  	case "WM/AlbumTitle":  		mp3_TALB = strValue;  		break;  	case "WM/AlbumArtist":  		mp3_TPE1 = strValue;  		break;  	case "WM/Genre":  		mp3_TCON = strValue;  		break;  	case "WM/TrackNumber":  		mp3_TRCK = strValue;  		break;  	case "WM/Year":  		break;  	case "WM/Composer":  		mp3_TCOM = strValue;  		break;  	case "WM/Publisher":  		break;  	}  	attrName += ";" + strValue;  	index += 1;  	break;  case 1:  	dataLen = br.ReadInt16 ();  	bValue = new byte[dataLen - 1];  	bValue = br.ReadBytes (dataLen);  	valueObject.dataType = 1;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(bValue);  	index += 1;  	break;  case 2:  	dataLen = br.ReadInt16 ();  	iValue = br.ReadInt32 ();  	valueObject.dataType = 2;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(boolValue);  	index += 1;  	break;  case 3:  	dataLen = br.ReadInt16 ();  	iValue = br.ReadInt32 ();  	valueObject.dataType = 3;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(iValue);  	index += 1;  	break;  case 4:  	dataLen = br.ReadInt16 ();  	lValue = br.ReadInt64 ();  	valueObject.dataType = 4;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(lValue);  	index += 1;  	break;  case 5:  	dataLen = br.ReadInt16 ();  	sValue = br.ReadInt16 ();  	valueObject.dataType = 5;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(valueLength);  	index += 1;  	break;  #endregion  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,The following statement contains a magic number: valueObject.dataType = 2;  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,The following statement contains a magic number: valueObject.dataType = 3;  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,The following statement contains a magic number: valueObject.dataType = 4;  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,The following statement contains a magic number: valueObject.dataType = 5;  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,FormatLength,The following statement contains a magic number: sec = sec % 3600;  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,FormatLength,The following statement contains a magic number: sec = sec % 60;  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getTags,The following statement contains a magic number: while (sw.Position < sw.Length - 129) {  	try {  		MP3Frame mp = new MP3Frame (sw);  		mp3Frames.Add (mp);  	}  	catch {  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getTags,The following statement contains a magic number: sw.Position = (int)sw.Length - 128;  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,CutMP3,The following statement contains a magic number: if (lengthInMs != 0)  	numberOfFrames = (Number_Of_Frames * 1000 * durée) / lengthInMs + 1;  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,CutMP3,The following statement contains a magic number: numberOfFrames = (Number_Of_Frames * 1000 * durée) / lengthInMs + 1;  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadMP3Information,The following statement contains a magic number: do {  	fs.Position = intPos;  	fs.Read (bytHeader' 0' 4);  	intPos++;  	LoadMP3Header (bytHeader);  }  while (!IsValidHeader () && (fs.Position != fs.Length));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadMP3Information,The following statement contains a magic number: fs.Read (bytHeader' 0' 4);  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadMP3Information,The following statement contains a magic number: if (fs.Position != fs.Length) {  	intPos += 3;  	#region Decalage selon version  	if (getVersionIndex () == 3)// MPEG Version 1  	 {  		if (getModeIndex () == 3)// Single Channel  		 {  			intPos += 17;  		}  		else {  			intPos += 32;  		}  	}  	else// MPEG Version 2.0 or 2.5  	 {  		if (getModeIndex () == 3)// Single Channel  		 {  			intPos += 9;  		}  		else {  			intPos += 17;  		}  	}  	#endregion  	// Check to see if the fileName has a variable bitrate  	fs.Position = intPos;  	fs.Read (bytVBitRate' 0' 12);  	boolVBitRate = LoadVBRHeader (bytVBitRate);  	// Once the file's read in' then assign the properties of the file to the public variables  	intBitRate = getBitrate ();  	intFrequency = getFrequency ();  	strMode = getMode ();  	intLength = getLengthInSeconds ();  	strLengthFormatted = getFormattedLength (intLength);  	fs.Close ();  	return true;  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadMP3Information,The following statement contains a magic number: if (fs.Position != fs.Length) {  	intPos += 3;  	#region Decalage selon version  	if (getVersionIndex () == 3)// MPEG Version 1  	 {  		if (getModeIndex () == 3)// Single Channel  		 {  			intPos += 17;  		}  		else {  			intPos += 32;  		}  	}  	else// MPEG Version 2.0 or 2.5  	 {  		if (getModeIndex () == 3)// Single Channel  		 {  			intPos += 9;  		}  		else {  			intPos += 17;  		}  	}  	#endregion  	// Check to see if the fileName has a variable bitrate  	fs.Position = intPos;  	fs.Read (bytVBitRate' 0' 12);  	boolVBitRate = LoadVBRHeader (bytVBitRate);  	// Once the file's read in' then assign the properties of the file to the public variables  	intBitRate = getBitrate ();  	intFrequency = getFrequency ();  	strMode = getMode ();  	intLength = getLengthInSeconds ();  	strLengthFormatted = getFormattedLength (intLength);  	fs.Close ();  	return true;  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadMP3Information,The following statement contains a magic number: if (fs.Position != fs.Length) {  	intPos += 3;  	#region Decalage selon version  	if (getVersionIndex () == 3)// MPEG Version 1  	 {  		if (getModeIndex () == 3)// Single Channel  		 {  			intPos += 17;  		}  		else {  			intPos += 32;  		}  	}  	else// MPEG Version 2.0 or 2.5  	 {  		if (getModeIndex () == 3)// Single Channel  		 {  			intPos += 9;  		}  		else {  			intPos += 17;  		}  	}  	#endregion  	// Check to see if the fileName has a variable bitrate  	fs.Position = intPos;  	fs.Read (bytVBitRate' 0' 12);  	boolVBitRate = LoadVBRHeader (bytVBitRate);  	// Once the file's read in' then assign the properties of the file to the public variables  	intBitRate = getBitrate ();  	intFrequency = getFrequency ();  	strMode = getMode ();  	intLength = getLengthInSeconds ();  	strLengthFormatted = getFormattedLength (intLength);  	fs.Close ();  	return true;  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadMP3Information,The following statement contains a magic number: if (fs.Position != fs.Length) {  	intPos += 3;  	#region Decalage selon version  	if (getVersionIndex () == 3)// MPEG Version 1  	 {  		if (getModeIndex () == 3)// Single Channel  		 {  			intPos += 17;  		}  		else {  			intPos += 32;  		}  	}  	else// MPEG Version 2.0 or 2.5  	 {  		if (getModeIndex () == 3)// Single Channel  		 {  			intPos += 9;  		}  		else {  			intPos += 17;  		}  	}  	#endregion  	// Check to see if the fileName has a variable bitrate  	fs.Position = intPos;  	fs.Read (bytVBitRate' 0' 12);  	boolVBitRate = LoadVBRHeader (bytVBitRate);  	// Once the file's read in' then assign the properties of the file to the public variables  	intBitRate = getBitrate ();  	intFrequency = getFrequency ();  	strMode = getMode ();  	intLength = getLengthInSeconds ();  	strLengthFormatted = getFormattedLength (intLength);  	fs.Close ();  	return true;  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadMP3Information,The following statement contains a magic number: if (fs.Position != fs.Length) {  	intPos += 3;  	#region Decalage selon version  	if (getVersionIndex () == 3)// MPEG Version 1  	 {  		if (getModeIndex () == 3)// Single Channel  		 {  			intPos += 17;  		}  		else {  			intPos += 32;  		}  	}  	else// MPEG Version 2.0 or 2.5  	 {  		if (getModeIndex () == 3)// Single Channel  		 {  			intPos += 9;  		}  		else {  			intPos += 17;  		}  	}  	#endregion  	// Check to see if the fileName has a variable bitrate  	fs.Position = intPos;  	fs.Read (bytVBitRate' 0' 12);  	boolVBitRate = LoadVBRHeader (bytVBitRate);  	// Once the file's read in' then assign the properties of the file to the public variables  	intBitRate = getBitrate ();  	intFrequency = getFrequency ();  	strMode = getMode ();  	intLength = getLengthInSeconds ();  	strLengthFormatted = getFormattedLength (intLength);  	fs.Close ();  	return true;  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadMP3Information,The following statement contains a magic number: if (fs.Position != fs.Length) {  	intPos += 3;  	#region Decalage selon version  	if (getVersionIndex () == 3)// MPEG Version 1  	 {  		if (getModeIndex () == 3)// Single Channel  		 {  			intPos += 17;  		}  		else {  			intPos += 32;  		}  	}  	else// MPEG Version 2.0 or 2.5  	 {  		if (getModeIndex () == 3)// Single Channel  		 {  			intPos += 9;  		}  		else {  			intPos += 17;  		}  	}  	#endregion  	// Check to see if the fileName has a variable bitrate  	fs.Position = intPos;  	fs.Read (bytVBitRate' 0' 12);  	boolVBitRate = LoadVBRHeader (bytVBitRate);  	// Once the file's read in' then assign the properties of the file to the public variables  	intBitRate = getBitrate ();  	intFrequency = getFrequency ();  	strMode = getMode ();  	intLength = getLengthInSeconds ();  	strLengthFormatted = getFormattedLength (intLength);  	fs.Close ();  	return true;  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadMP3Information,The following statement contains a magic number: if (fs.Position != fs.Length) {  	intPos += 3;  	#region Decalage selon version  	if (getVersionIndex () == 3)// MPEG Version 1  	 {  		if (getModeIndex () == 3)// Single Channel  		 {  			intPos += 17;  		}  		else {  			intPos += 32;  		}  	}  	else// MPEG Version 2.0 or 2.5  	 {  		if (getModeIndex () == 3)// Single Channel  		 {  			intPos += 9;  		}  		else {  			intPos += 17;  		}  	}  	#endregion  	// Check to see if the fileName has a variable bitrate  	fs.Position = intPos;  	fs.Read (bytVBitRate' 0' 12);  	boolVBitRate = LoadVBRHeader (bytVBitRate);  	// Once the file's read in' then assign the properties of the file to the public variables  	intBitRate = getBitrate ();  	intFrequency = getFrequency ();  	strMode = getMode ();  	intLength = getLengthInSeconds ();  	strLengthFormatted = getFormattedLength (intLength);  	fs.Close ();  	return true;  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadMP3Information,The following statement contains a magic number: if (fs.Position != fs.Length) {  	intPos += 3;  	#region Decalage selon version  	if (getVersionIndex () == 3)// MPEG Version 1  	 {  		if (getModeIndex () == 3)// Single Channel  		 {  			intPos += 17;  		}  		else {  			intPos += 32;  		}  	}  	else// MPEG Version 2.0 or 2.5  	 {  		if (getModeIndex () == 3)// Single Channel  		 {  			intPos += 9;  		}  		else {  			intPos += 17;  		}  	}  	#endregion  	// Check to see if the fileName has a variable bitrate  	fs.Position = intPos;  	fs.Read (bytVBitRate' 0' 12);  	boolVBitRate = LoadVBRHeader (bytVBitRate);  	// Once the file's read in' then assign the properties of the file to the public variables  	intBitRate = getBitrate ();  	intFrequency = getFrequency ();  	strMode = getMode ();  	intLength = getLengthInSeconds ();  	strLengthFormatted = getFormattedLength (intLength);  	fs.Close ();  	return true;  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadMP3Information,The following statement contains a magic number: if (fs.Position != fs.Length) {  	intPos += 3;  	#region Decalage selon version  	if (getVersionIndex () == 3)// MPEG Version 1  	 {  		if (getModeIndex () == 3)// Single Channel  		 {  			intPos += 17;  		}  		else {  			intPos += 32;  		}  	}  	else// MPEG Version 2.0 or 2.5  	 {  		if (getModeIndex () == 3)// Single Channel  		 {  			intPos += 9;  		}  		else {  			intPos += 17;  		}  	}  	#endregion  	// Check to see if the fileName has a variable bitrate  	fs.Position = intPos;  	fs.Read (bytVBitRate' 0' 12);  	boolVBitRate = LoadVBRHeader (bytVBitRate);  	// Once the file's read in' then assign the properties of the file to the public variables  	intBitRate = getBitrate ();  	intFrequency = getFrequency ();  	strMode = getMode ();  	intLength = getLengthInSeconds ();  	strLengthFormatted = getFormattedLength (intLength);  	fs.Close ();  	return true;  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadMP3Information,The following statement contains a magic number: intPos += 3;  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadMP3Information,The following statement contains a magic number: if (getVersionIndex () == 3)// MPEG Version 1   {  	if (getModeIndex () == 3)// Single Channel  	 {  		intPos += 17;  	}  	else {  		intPos += 32;  	}  }  else// MPEG Version 2.0 or 2.5   {  	if (getModeIndex () == 3)// Single Channel  	 {  		intPos += 9;  	}  	else {  		intPos += 17;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadMP3Information,The following statement contains a magic number: if (getVersionIndex () == 3)// MPEG Version 1   {  	if (getModeIndex () == 3)// Single Channel  	 {  		intPos += 17;  	}  	else {  		intPos += 32;  	}  }  else// MPEG Version 2.0 or 2.5   {  	if (getModeIndex () == 3)// Single Channel  	 {  		intPos += 9;  	}  	else {  		intPos += 17;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadMP3Information,The following statement contains a magic number: if (getVersionIndex () == 3)// MPEG Version 1   {  	if (getModeIndex () == 3)// Single Channel  	 {  		intPos += 17;  	}  	else {  		intPos += 32;  	}  }  else// MPEG Version 2.0 or 2.5   {  	if (getModeIndex () == 3)// Single Channel  	 {  		intPos += 9;  	}  	else {  		intPos += 17;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadMP3Information,The following statement contains a magic number: if (getVersionIndex () == 3)// MPEG Version 1   {  	if (getModeIndex () == 3)// Single Channel  	 {  		intPos += 17;  	}  	else {  		intPos += 32;  	}  }  else// MPEG Version 2.0 or 2.5   {  	if (getModeIndex () == 3)// Single Channel  	 {  		intPos += 9;  	}  	else {  		intPos += 17;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadMP3Information,The following statement contains a magic number: if (getVersionIndex () == 3)// MPEG Version 1   {  	if (getModeIndex () == 3)// Single Channel  	 {  		intPos += 17;  	}  	else {  		intPos += 32;  	}  }  else// MPEG Version 2.0 or 2.5   {  	if (getModeIndex () == 3)// Single Channel  	 {  		intPos += 9;  	}  	else {  		intPos += 17;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadMP3Information,The following statement contains a magic number: if (getVersionIndex () == 3)// MPEG Version 1   {  	if (getModeIndex () == 3)// Single Channel  	 {  		intPos += 17;  	}  	else {  		intPos += 32;  	}  }  else// MPEG Version 2.0 or 2.5   {  	if (getModeIndex () == 3)// Single Channel  	 {  		intPos += 9;  	}  	else {  		intPos += 17;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadMP3Information,The following statement contains a magic number: if (getVersionIndex () == 3)// MPEG Version 1   {  	if (getModeIndex () == 3)// Single Channel  	 {  		intPos += 17;  	}  	else {  		intPos += 32;  	}  }  else// MPEG Version 2.0 or 2.5   {  	if (getModeIndex () == 3)// Single Channel  	 {  		intPos += 9;  	}  	else {  		intPos += 17;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadMP3Information,The following statement contains a magic number: if (getModeIndex () == 3)// Single Channel   {  	intPos += 17;  }  else {  	intPos += 32;  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadMP3Information,The following statement contains a magic number: if (getModeIndex () == 3)// Single Channel   {  	intPos += 17;  }  else {  	intPos += 32;  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadMP3Information,The following statement contains a magic number: if (getModeIndex () == 3)// Single Channel   {  	intPos += 17;  }  else {  	intPos += 32;  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadMP3Information,The following statement contains a magic number: intPos += 17;  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadMP3Information,The following statement contains a magic number: intPos += 32;  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadMP3Information,The following statement contains a magic number: if (getModeIndex () == 3)// Single Channel   {  	intPos += 9;  }  else {  	intPos += 17;  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadMP3Information,The following statement contains a magic number: if (getModeIndex () == 3)// Single Channel   {  	intPos += 9;  }  else {  	intPos += 17;  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadMP3Information,The following statement contains a magic number: if (getModeIndex () == 3)// Single Channel   {  	intPos += 9;  }  else {  	intPos += 17;  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadMP3Information,The following statement contains a magic number: intPos += 9;  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadMP3Information,The following statement contains a magic number: intPos += 17;  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadMP3Information,The following statement contains a magic number: fs.Read (bytVBitRate' 0' 12);  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadMP3Header,The following statement contains a magic number: bithdr = (ulong)(((c [0] & 255) << 24) | ((c [1] & 255) << 16) | ((c [2] & 255) << 8) | ((c [3] & 255)));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadMP3Header,The following statement contains a magic number: bithdr = (ulong)(((c [0] & 255) << 24) | ((c [1] & 255) << 16) | ((c [2] & 255) << 8) | ((c [3] & 255)));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadMP3Header,The following statement contains a magic number: bithdr = (ulong)(((c [0] & 255) << 24) | ((c [1] & 255) << 16) | ((c [2] & 255) << 8) | ((c [3] & 255)));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadMP3Header,The following statement contains a magic number: bithdr = (ulong)(((c [0] & 255) << 24) | ((c [1] & 255) << 16) | ((c [2] & 255) << 8) | ((c [3] & 255)));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadMP3Header,The following statement contains a magic number: bithdr = (ulong)(((c [0] & 255) << 24) | ((c [1] & 255) << 16) | ((c [2] & 255) << 8) | ((c [3] & 255)));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadMP3Header,The following statement contains a magic number: bithdr = (ulong)(((c [0] & 255) << 24) | ((c [1] & 255) << 16) | ((c [2] & 255) << 8) | ((c [3] & 255)));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadMP3Header,The following statement contains a magic number: bithdr = (ulong)(((c [0] & 255) << 24) | ((c [1] & 255) << 16) | ((c [2] & 255) << 8) | ((c [3] & 255)));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadMP3Header,The following statement contains a magic number: bithdr = (ulong)(((c [0] & 255) << 24) | ((c [1] & 255) << 16) | ((c [2] & 255) << 8) | ((c [3] & 255)));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadMP3Header,The following statement contains a magic number: bithdr = (ulong)(((c [0] & 255) << 24) | ((c [1] & 255) << 16) | ((c [2] & 255) << 8) | ((c [3] & 255)));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if (inputheader [0] == 88 && inputheader [1] == 105 && inputheader [2] == 110 && inputheader [3] == 103) {  	int flags = (int)(((inputheader [4] & 255) << 24) | ((inputheader [5] & 255) << 16) | ((inputheader [6] & 255) << 8) | ((inputheader [7] & 255)));  	if ((flags & 0x0001) == 1) {  		intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  		return true;  	}  	else {  		intVFrames = -1;  		return true;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if (inputheader [0] == 88 && inputheader [1] == 105 && inputheader [2] == 110 && inputheader [3] == 103) {  	int flags = (int)(((inputheader [4] & 255) << 24) | ((inputheader [5] & 255) << 16) | ((inputheader [6] & 255) << 8) | ((inputheader [7] & 255)));  	if ((flags & 0x0001) == 1) {  		intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  		return true;  	}  	else {  		intVFrames = -1;  		return true;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if (inputheader [0] == 88 && inputheader [1] == 105 && inputheader [2] == 110 && inputheader [3] == 103) {  	int flags = (int)(((inputheader [4] & 255) << 24) | ((inputheader [5] & 255) << 16) | ((inputheader [6] & 255) << 8) | ((inputheader [7] & 255)));  	if ((flags & 0x0001) == 1) {  		intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  		return true;  	}  	else {  		intVFrames = -1;  		return true;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if (inputheader [0] == 88 && inputheader [1] == 105 && inputheader [2] == 110 && inputheader [3] == 103) {  	int flags = (int)(((inputheader [4] & 255) << 24) | ((inputheader [5] & 255) << 16) | ((inputheader [6] & 255) << 8) | ((inputheader [7] & 255)));  	if ((flags & 0x0001) == 1) {  		intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  		return true;  	}  	else {  		intVFrames = -1;  		return true;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if (inputheader [0] == 88 && inputheader [1] == 105 && inputheader [2] == 110 && inputheader [3] == 103) {  	int flags = (int)(((inputheader [4] & 255) << 24) | ((inputheader [5] & 255) << 16) | ((inputheader [6] & 255) << 8) | ((inputheader [7] & 255)));  	if ((flags & 0x0001) == 1) {  		intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  		return true;  	}  	else {  		intVFrames = -1;  		return true;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if (inputheader [0] == 88 && inputheader [1] == 105 && inputheader [2] == 110 && inputheader [3] == 103) {  	int flags = (int)(((inputheader [4] & 255) << 24) | ((inputheader [5] & 255) << 16) | ((inputheader [6] & 255) << 8) | ((inputheader [7] & 255)));  	if ((flags & 0x0001) == 1) {  		intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  		return true;  	}  	else {  		intVFrames = -1;  		return true;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if (inputheader [0] == 88 && inputheader [1] == 105 && inputheader [2] == 110 && inputheader [3] == 103) {  	int flags = (int)(((inputheader [4] & 255) << 24) | ((inputheader [5] & 255) << 16) | ((inputheader [6] & 255) << 8) | ((inputheader [7] & 255)));  	if ((flags & 0x0001) == 1) {  		intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  		return true;  	}  	else {  		intVFrames = -1;  		return true;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if (inputheader [0] == 88 && inputheader [1] == 105 && inputheader [2] == 110 && inputheader [3] == 103) {  	int flags = (int)(((inputheader [4] & 255) << 24) | ((inputheader [5] & 255) << 16) | ((inputheader [6] & 255) << 8) | ((inputheader [7] & 255)));  	if ((flags & 0x0001) == 1) {  		intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  		return true;  	}  	else {  		intVFrames = -1;  		return true;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if (inputheader [0] == 88 && inputheader [1] == 105 && inputheader [2] == 110 && inputheader [3] == 103) {  	int flags = (int)(((inputheader [4] & 255) << 24) | ((inputheader [5] & 255) << 16) | ((inputheader [6] & 255) << 8) | ((inputheader [7] & 255)));  	if ((flags & 0x0001) == 1) {  		intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  		return true;  	}  	else {  		intVFrames = -1;  		return true;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if (inputheader [0] == 88 && inputheader [1] == 105 && inputheader [2] == 110 && inputheader [3] == 103) {  	int flags = (int)(((inputheader [4] & 255) << 24) | ((inputheader [5] & 255) << 16) | ((inputheader [6] & 255) << 8) | ((inputheader [7] & 255)));  	if ((flags & 0x0001) == 1) {  		intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  		return true;  	}  	else {  		intVFrames = -1;  		return true;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if (inputheader [0] == 88 && inputheader [1] == 105 && inputheader [2] == 110 && inputheader [3] == 103) {  	int flags = (int)(((inputheader [4] & 255) << 24) | ((inputheader [5] & 255) << 16) | ((inputheader [6] & 255) << 8) | ((inputheader [7] & 255)));  	if ((flags & 0x0001) == 1) {  		intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  		return true;  	}  	else {  		intVFrames = -1;  		return true;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if (inputheader [0] == 88 && inputheader [1] == 105 && inputheader [2] == 110 && inputheader [3] == 103) {  	int flags = (int)(((inputheader [4] & 255) << 24) | ((inputheader [5] & 255) << 16) | ((inputheader [6] & 255) << 8) | ((inputheader [7] & 255)));  	if ((flags & 0x0001) == 1) {  		intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  		return true;  	}  	else {  		intVFrames = -1;  		return true;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if (inputheader [0] == 88 && inputheader [1] == 105 && inputheader [2] == 110 && inputheader [3] == 103) {  	int flags = (int)(((inputheader [4] & 255) << 24) | ((inputheader [5] & 255) << 16) | ((inputheader [6] & 255) << 8) | ((inputheader [7] & 255)));  	if ((flags & 0x0001) == 1) {  		intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  		return true;  	}  	else {  		intVFrames = -1;  		return true;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if (inputheader [0] == 88 && inputheader [1] == 105 && inputheader [2] == 110 && inputheader [3] == 103) {  	int flags = (int)(((inputheader [4] & 255) << 24) | ((inputheader [5] & 255) << 16) | ((inputheader [6] & 255) << 8) | ((inputheader [7] & 255)));  	if ((flags & 0x0001) == 1) {  		intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  		return true;  	}  	else {  		intVFrames = -1;  		return true;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if (inputheader [0] == 88 && inputheader [1] == 105 && inputheader [2] == 110 && inputheader [3] == 103) {  	int flags = (int)(((inputheader [4] & 255) << 24) | ((inputheader [5] & 255) << 16) | ((inputheader [6] & 255) << 8) | ((inputheader [7] & 255)));  	if ((flags & 0x0001) == 1) {  		intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  		return true;  	}  	else {  		intVFrames = -1;  		return true;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if (inputheader [0] == 88 && inputheader [1] == 105 && inputheader [2] == 110 && inputheader [3] == 103) {  	int flags = (int)(((inputheader [4] & 255) << 24) | ((inputheader [5] & 255) << 16) | ((inputheader [6] & 255) << 8) | ((inputheader [7] & 255)));  	if ((flags & 0x0001) == 1) {  		intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  		return true;  	}  	else {  		intVFrames = -1;  		return true;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if (inputheader [0] == 88 && inputheader [1] == 105 && inputheader [2] == 110 && inputheader [3] == 103) {  	int flags = (int)(((inputheader [4] & 255) << 24) | ((inputheader [5] & 255) << 16) | ((inputheader [6] & 255) << 8) | ((inputheader [7] & 255)));  	if ((flags & 0x0001) == 1) {  		intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  		return true;  	}  	else {  		intVFrames = -1;  		return true;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if (inputheader [0] == 88 && inputheader [1] == 105 && inputheader [2] == 110 && inputheader [3] == 103) {  	int flags = (int)(((inputheader [4] & 255) << 24) | ((inputheader [5] & 255) << 16) | ((inputheader [6] & 255) << 8) | ((inputheader [7] & 255)));  	if ((flags & 0x0001) == 1) {  		intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  		return true;  	}  	else {  		intVFrames = -1;  		return true;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if (inputheader [0] == 88 && inputheader [1] == 105 && inputheader [2] == 110 && inputheader [3] == 103) {  	int flags = (int)(((inputheader [4] & 255) << 24) | ((inputheader [5] & 255) << 16) | ((inputheader [6] & 255) << 8) | ((inputheader [7] & 255)));  	if ((flags & 0x0001) == 1) {  		intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  		return true;  	}  	else {  		intVFrames = -1;  		return true;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if (inputheader [0] == 88 && inputheader [1] == 105 && inputheader [2] == 110 && inputheader [3] == 103) {  	int flags = (int)(((inputheader [4] & 255) << 24) | ((inputheader [5] & 255) << 16) | ((inputheader [6] & 255) << 8) | ((inputheader [7] & 255)));  	if ((flags & 0x0001) == 1) {  		intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  		return true;  	}  	else {  		intVFrames = -1;  		return true;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if (inputheader [0] == 88 && inputheader [1] == 105 && inputheader [2] == 110 && inputheader [3] == 103) {  	int flags = (int)(((inputheader [4] & 255) << 24) | ((inputheader [5] & 255) << 16) | ((inputheader [6] & 255) << 8) | ((inputheader [7] & 255)));  	if ((flags & 0x0001) == 1) {  		intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  		return true;  	}  	else {  		intVFrames = -1;  		return true;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if (inputheader [0] == 88 && inputheader [1] == 105 && inputheader [2] == 110 && inputheader [3] == 103) {  	int flags = (int)(((inputheader [4] & 255) << 24) | ((inputheader [5] & 255) << 16) | ((inputheader [6] & 255) << 8) | ((inputheader [7] & 255)));  	if ((flags & 0x0001) == 1) {  		intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  		return true;  	}  	else {  		intVFrames = -1;  		return true;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if (inputheader [0] == 88 && inputheader [1] == 105 && inputheader [2] == 110 && inputheader [3] == 103) {  	int flags = (int)(((inputheader [4] & 255) << 24) | ((inputheader [5] & 255) << 16) | ((inputheader [6] & 255) << 8) | ((inputheader [7] & 255)));  	if ((flags & 0x0001) == 1) {  		intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  		return true;  	}  	else {  		intVFrames = -1;  		return true;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if (inputheader [0] == 88 && inputheader [1] == 105 && inputheader [2] == 110 && inputheader [3] == 103) {  	int flags = (int)(((inputheader [4] & 255) << 24) | ((inputheader [5] & 255) << 16) | ((inputheader [6] & 255) << 8) | ((inputheader [7] & 255)));  	if ((flags & 0x0001) == 1) {  		intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  		return true;  	}  	else {  		intVFrames = -1;  		return true;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if (inputheader [0] == 88 && inputheader [1] == 105 && inputheader [2] == 110 && inputheader [3] == 103) {  	int flags = (int)(((inputheader [4] & 255) << 24) | ((inputheader [5] & 255) << 16) | ((inputheader [6] & 255) << 8) | ((inputheader [7] & 255)));  	if ((flags & 0x0001) == 1) {  		intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  		return true;  	}  	else {  		intVFrames = -1;  		return true;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if (inputheader [0] == 88 && inputheader [1] == 105 && inputheader [2] == 110 && inputheader [3] == 103) {  	int flags = (int)(((inputheader [4] & 255) << 24) | ((inputheader [5] & 255) << 16) | ((inputheader [6] & 255) << 8) | ((inputheader [7] & 255)));  	if ((flags & 0x0001) == 1) {  		intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  		return true;  	}  	else {  		intVFrames = -1;  		return true;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if (inputheader [0] == 88 && inputheader [1] == 105 && inputheader [2] == 110 && inputheader [3] == 103) {  	int flags = (int)(((inputheader [4] & 255) << 24) | ((inputheader [5] & 255) << 16) | ((inputheader [6] & 255) << 8) | ((inputheader [7] & 255)));  	if ((flags & 0x0001) == 1) {  		intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  		return true;  	}  	else {  		intVFrames = -1;  		return true;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if (inputheader [0] == 88 && inputheader [1] == 105 && inputheader [2] == 110 && inputheader [3] == 103) {  	int flags = (int)(((inputheader [4] & 255) << 24) | ((inputheader [5] & 255) << 16) | ((inputheader [6] & 255) << 8) | ((inputheader [7] & 255)));  	if ((flags & 0x0001) == 1) {  		intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  		return true;  	}  	else {  		intVFrames = -1;  		return true;  	}  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if ((flags & 0x0001) == 1) {  	intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  	return true;  }  else {  	intVFrames = -1;  	return true;  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if ((flags & 0x0001) == 1) {  	intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  	return true;  }  else {  	intVFrames = -1;  	return true;  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if ((flags & 0x0001) == 1) {  	intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  	return true;  }  else {  	intVFrames = -1;  	return true;  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if ((flags & 0x0001) == 1) {  	intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  	return true;  }  else {  	intVFrames = -1;  	return true;  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if ((flags & 0x0001) == 1) {  	intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  	return true;  }  else {  	intVFrames = -1;  	return true;  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if ((flags & 0x0001) == 1) {  	intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  	return true;  }  else {  	intVFrames = -1;  	return true;  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if ((flags & 0x0001) == 1) {  	intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  	return true;  }  else {  	intVFrames = -1;  	return true;  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if ((flags & 0x0001) == 1) {  	intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  	return true;  }  else {  	intVFrames = -1;  	return true;  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if ((flags & 0x0001) == 1) {  	intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  	return true;  }  else {  	intVFrames = -1;  	return true;  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if ((flags & 0x0001) == 1) {  	intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  	return true;  }  else {  	intVFrames = -1;  	return true;  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: if ((flags & 0x0001) == 1) {  	intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  	return true;  }  else {  	intVFrames = -1;  	return true;  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,LoadVBRHeader,The following statement contains a magic number: intVFrames = (int)(((inputheader [8] & 255) << 24) | ((inputheader [9] & 255) << 16) | ((inputheader [10] & 255) << 8) | ((inputheader [11] & 255)));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,IsValidHeader,The following statement contains a magic number: return (((getFrameSync () & 2047) == 2047) && ((getVersionIndex () & 3) != 1) && ((getLayerIndex () & 3) != 0) && ((getBitrateIndex () & 15) != 0) && ((getBitrateIndex () & 15) != 15) && ((getFrequencyIndex () & 3) != 3) && ((getEmphasisIndex () & 3) != 2));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,IsValidHeader,The following statement contains a magic number: return (((getFrameSync () & 2047) == 2047) && ((getVersionIndex () & 3) != 1) && ((getLayerIndex () & 3) != 0) && ((getBitrateIndex () & 15) != 0) && ((getBitrateIndex () & 15) != 15) && ((getFrequencyIndex () & 3) != 3) && ((getEmphasisIndex () & 3) != 2));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,IsValidHeader,The following statement contains a magic number: return (((getFrameSync () & 2047) == 2047) && ((getVersionIndex () & 3) != 1) && ((getLayerIndex () & 3) != 0) && ((getBitrateIndex () & 15) != 0) && ((getBitrateIndex () & 15) != 15) && ((getFrequencyIndex () & 3) != 3) && ((getEmphasisIndex () & 3) != 2));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,IsValidHeader,The following statement contains a magic number: return (((getFrameSync () & 2047) == 2047) && ((getVersionIndex () & 3) != 1) && ((getLayerIndex () & 3) != 0) && ((getBitrateIndex () & 15) != 0) && ((getBitrateIndex () & 15) != 15) && ((getFrequencyIndex () & 3) != 3) && ((getEmphasisIndex () & 3) != 2));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,IsValidHeader,The following statement contains a magic number: return (((getFrameSync () & 2047) == 2047) && ((getVersionIndex () & 3) != 1) && ((getLayerIndex () & 3) != 0) && ((getBitrateIndex () & 15) != 0) && ((getBitrateIndex () & 15) != 15) && ((getFrequencyIndex () & 3) != 3) && ((getEmphasisIndex () & 3) != 2));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,IsValidHeader,The following statement contains a magic number: return (((getFrameSync () & 2047) == 2047) && ((getVersionIndex () & 3) != 1) && ((getLayerIndex () & 3) != 0) && ((getBitrateIndex () & 15) != 0) && ((getBitrateIndex () & 15) != 15) && ((getFrequencyIndex () & 3) != 3) && ((getEmphasisIndex () & 3) != 2));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,IsValidHeader,The following statement contains a magic number: return (((getFrameSync () & 2047) == 2047) && ((getVersionIndex () & 3) != 1) && ((getLayerIndex () & 3) != 0) && ((getBitrateIndex () & 15) != 0) && ((getBitrateIndex () & 15) != 15) && ((getFrequencyIndex () & 3) != 3) && ((getEmphasisIndex () & 3) != 2));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,IsValidHeader,The following statement contains a magic number: return (((getFrameSync () & 2047) == 2047) && ((getVersionIndex () & 3) != 1) && ((getLayerIndex () & 3) != 0) && ((getBitrateIndex () & 15) != 0) && ((getBitrateIndex () & 15) != 15) && ((getFrequencyIndex () & 3) != 3) && ((getEmphasisIndex () & 3) != 2));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,IsValidHeader,The following statement contains a magic number: return (((getFrameSync () & 2047) == 2047) && ((getVersionIndex () & 3) != 1) && ((getLayerIndex () & 3) != 0) && ((getBitrateIndex () & 15) != 0) && ((getBitrateIndex () & 15) != 15) && ((getFrequencyIndex () & 3) != 3) && ((getEmphasisIndex () & 3) != 2));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,IsValidHeader,The following statement contains a magic number: return (((getFrameSync () & 2047) == 2047) && ((getVersionIndex () & 3) != 1) && ((getLayerIndex () & 3) != 0) && ((getBitrateIndex () & 15) != 0) && ((getBitrateIndex () & 15) != 15) && ((getFrequencyIndex () & 3) != 3) && ((getEmphasisIndex () & 3) != 2));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,IsValidHeader,The following statement contains a magic number: return (((getFrameSync () & 2047) == 2047) && ((getVersionIndex () & 3) != 1) && ((getLayerIndex () & 3) != 0) && ((getBitrateIndex () & 15) != 0) && ((getBitrateIndex () & 15) != 15) && ((getFrequencyIndex () & 3) != 3) && ((getEmphasisIndex () & 3) != 2));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getFrameSync,The following statement contains a magic number: return (int)((bithdr >> 21) & 2047);  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getFrameSync,The following statement contains a magic number: return (int)((bithdr >> 21) & 2047);  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getVersionIndex,The following statement contains a magic number: return (int)((bithdr >> 19) & 3);  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getVersionIndex,The following statement contains a magic number: return (int)((bithdr >> 19) & 3);  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getLayerIndex,The following statement contains a magic number: return (int)((bithdr >> 17) & 3);  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getLayerIndex,The following statement contains a magic number: return (int)((bithdr >> 17) & 3);  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getProtectionBit,The following statement contains a magic number: return (int)((bithdr >> 16) & 1);  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrateIndex,The following statement contains a magic number: return (int)((bithdr >> 12) & 15);  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrateIndex,The following statement contains a magic number: return (int)((bithdr >> 12) & 15);  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getFrequencyIndex,The following statement contains a magic number: return (int)((bithdr >> 10) & 3);  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getFrequencyIndex,The following statement contains a magic number: return (int)((bithdr >> 10) & 3);  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getPaddingBit,The following statement contains a magic number: return (int)((bithdr >> 9) & 1);  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getPrivateBit,The following statement contains a magic number: return (int)((bithdr >> 8) & 1);  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getModeIndex,The following statement contains a magic number: return (int)((bithdr >> 6) & 3);  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getModeIndex,The following statement contains a magic number: return (int)((bithdr >> 6) & 3);  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getModeExtIndex,The following statement contains a magic number: return (int)((bithdr >> 4) & 3);  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getModeExtIndex,The following statement contains a magic number: return (int)((bithdr >> 4) & 3);  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getCoprightBit,The following statement contains a magic number: return (int)((bithdr >> 3) & 1);  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getOrginalBit,The following statement contains a magic number: return (int)((bithdr >> 2) & 1);  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getEmphasisIndex,The following statement contains a magic number: return (int)(bithdr & 3);  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getLayer,The following statement contains a magic number: return (int)(4 - getLayerIndex ());  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: if (boolVBitRate) {  	double medFrameSize = (double)lngFileSize / (double)getNumberOfFrames ();  	return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  }  else {  	int[''] table =  {  		{  			// MPEG 2 & 2.5  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer III  			{  				0'  				8'  				16'  				24'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				0  			}'  			// Layer II  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				144'  				160'  				176'  				192'  				224'  				256'  				0  			}  		// Layer I  		}'  		{  			// MPEG 1  			{  				0'  				32'  				40'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				0  			}'  			// Layer III  			{  				0'  				32'  				48'  				56'  				64'  				80'  				96'  				112'  				128'  				160'  				192'  				224'  				256'  				320'  				384'  				0  			}'  			// Layer II  			{  				0'  				32'  				64'  				96'  				128'  				160'  				192'  				224'  				256'  				288'  				320'  				352'  				384'  				416'  				448'  				0  			}  		// Layer I  		}  	};  	return table [getVersionIndex () & 1' getLayerIndex () - 1' getBitrateIndex ()];  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getBitrate,The following statement contains a magic number: return (int)((medFrameSize * (double)getFrequency ()) / (1000.0 * ((getLayerIndex () == 3) ? 12.0 : 144.0)));  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getMode,The following statement contains a magic number: switch (getModeIndex ()) {  default:  	return "Stereo";  case 1:  	return "Joint Stereo";  case 2:  	return "Dual Channel";  case 3:  	return "Single Channel";  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getMode,The following statement contains a magic number: switch (getModeIndex ()) {  default:  	return "Stereo";  case 1:  	return "Joint Stereo";  case 2:  	return "Dual Channel";  case 3:  	return "Single Channel";  }  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getNumberOfFrames,The following statement contains a magic number: if (!boolVBitRate) {  	double medFrameSize = (double)(((getLayerIndex () == 3) ? 12 : 144) * ((1000.0 * (float)getBitrate ()) / (float)getFrequency ()));  	return (int)(lngFileSize / medFrameSize);  }  else  	return intVFrames;  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getNumberOfFrames,The following statement contains a magic number: if (!boolVBitRate) {  	double medFrameSize = (double)(((getLayerIndex () == 3) ? 12 : 144) * ((1000.0 * (float)getBitrate ()) / (float)getFrequency ()));  	return (int)(lngFileSize / medFrameSize);  }  else  	return intVFrames;  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getNumberOfFrames,The following statement contains a magic number: if (!boolVBitRate) {  	double medFrameSize = (double)(((getLayerIndex () == 3) ? 12 : 144) * ((1000.0 * (float)getBitrate ()) / (float)getFrequency ()));  	return (int)(lngFileSize / medFrameSize);  }  else  	return intVFrames;  
Magic Number,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,getNumberOfFrames,The following statement contains a magic number: if (!boolVBitRate) {  	double medFrameSize = (double)(((getLayerIndex () == 3) ? 12 : 144) * ((1000.0 * (float)getBitrate ()) / (float)getFrequency ()));  	return (int)(lngFileSize / medFrameSize);  }  else  	return intVFrames;  
Magic Number,MP3Library,WMA_Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_Header,The following statement contains a magic number: reserved = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' 2);  
Magic Number,MP3Library,WMA_Packets,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_Packets,The following statement contains a magic number: if ((b & 0x80) == 0x80)//Error correction   {  	int ec_Length = b & 0x0f;  	sw.ReadBytes (2);  }  
Magic Number,MP3Library,WMA_Packets,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_Packets,The following statement contains a magic number: sw.ReadBytes (2);  
Magic Number,MP3Library,WMA_Content_Block,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_Content_Block,The following statement contains a magic number: switch (guid_name) {  case "ASF_Content_Description_Object":  	lTitle = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	lAuthor = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	lCopyright = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	lDescription = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	lRating = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	if ((short)lTitle.Value > 0)  		title = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lTitle.Value / 2);  	if ((short)lAuthor.Value > 0)  		author = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lAuthor.Value / 2);  	if ((short)lCopyright.Value > 0)  		copyright = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lCopyright.Value / 2);  	if ((short)lDescription.Value > 0)  		description = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lDescription.Value / 2);  	if ((short)lRating.Value > 0)  		rating = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lRating.Value / 2);  	LengthInFile = sw.Position - PositionOfStructureInFile;  	break;  case "ASF_Extended_Content_Description_Object":  	numAttrs = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	wma_extended_attributes = new List<WMA_extended_attribute> ();  	for (int u = 0; u < (short)numAttrs.Value; u++) {  		wma_extended_attributes.Add (new WMA_extended_attribute (sw));  	}  	break;  case "ASF_File_Properties_Object":  	file_id = new ELEMENTARY_TYPE (sw' 0' typeof(Guid));  	file_size = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	creation_date = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	data_packets_count = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	play_duration = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	send_duration = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	preroll = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	flags = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	minimum_data_packet_size = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	maximum_data_packet_size = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	maximum_bitrate = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	break;  case "ASF_Header_Extension_Object":  	sw.ReadBlock ((int)(long)sizeofBlock.Value - 24);  	break;  case "ASF_Codec_List_Object":  	Reserved = new ELEMENTARY_TYPE (sw' 0' typeof(Guid));  	codec_Entries_Count = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	codec_entries = new List<WMA_Codec_Entry> ();  	for (int uc = 0; uc < (int)codec_Entries_Count.Value; uc++) {  		codec_entries.Add (new WMA_Codec_Entry (sw));  	}  	break;  case "ASF_Stream_Properties_Object":  	int start = (int)sw.Position;  	stream_type = new ELEMENTARY_TYPE (sw' 0' typeof(Guid));  	error_correction_type = new ELEMENTARY_TYPE (sw' 0' typeof(Guid));  	time_offset = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	type_specific_data_length = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	error_correction_data_length = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	flags_stream = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	reserved_stream = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	type_specific_data = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	error_correction_data = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	int le = (int)sw.Position - start;  	sw.ReadBlock ((int)(long)sizeofBlock.Value - 24 - le);  	break;  case "ASF_Stream_Bitrate_Properties_Object":  	bitrate_Records_Count = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	bitrate_records = new List<WMA_Bitrate_Record> ();  	for (int u = 0; u < (short)bitrate_Records_Count.Value; u++) {  		bitrate_records.Add (new WMA_Bitrate_Record (sw));  	}  	break;  default:  	sw.ReadBlock ((int)(long)sizeofBlock.Value - 24);  	break;  }  
Magic Number,MP3Library,WMA_Content_Block,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_Content_Block,The following statement contains a magic number: switch (guid_name) {  case "ASF_Content_Description_Object":  	lTitle = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	lAuthor = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	lCopyright = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	lDescription = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	lRating = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	if ((short)lTitle.Value > 0)  		title = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lTitle.Value / 2);  	if ((short)lAuthor.Value > 0)  		author = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lAuthor.Value / 2);  	if ((short)lCopyright.Value > 0)  		copyright = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lCopyright.Value / 2);  	if ((short)lDescription.Value > 0)  		description = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lDescription.Value / 2);  	if ((short)lRating.Value > 0)  		rating = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lRating.Value / 2);  	LengthInFile = sw.Position - PositionOfStructureInFile;  	break;  case "ASF_Extended_Content_Description_Object":  	numAttrs = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	wma_extended_attributes = new List<WMA_extended_attribute> ();  	for (int u = 0; u < (short)numAttrs.Value; u++) {  		wma_extended_attributes.Add (new WMA_extended_attribute (sw));  	}  	break;  case "ASF_File_Properties_Object":  	file_id = new ELEMENTARY_TYPE (sw' 0' typeof(Guid));  	file_size = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	creation_date = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	data_packets_count = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	play_duration = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	send_duration = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	preroll = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	flags = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	minimum_data_packet_size = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	maximum_data_packet_size = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	maximum_bitrate = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	break;  case "ASF_Header_Extension_Object":  	sw.ReadBlock ((int)(long)sizeofBlock.Value - 24);  	break;  case "ASF_Codec_List_Object":  	Reserved = new ELEMENTARY_TYPE (sw' 0' typeof(Guid));  	codec_Entries_Count = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	codec_entries = new List<WMA_Codec_Entry> ();  	for (int uc = 0; uc < (int)codec_Entries_Count.Value; uc++) {  		codec_entries.Add (new WMA_Codec_Entry (sw));  	}  	break;  case "ASF_Stream_Properties_Object":  	int start = (int)sw.Position;  	stream_type = new ELEMENTARY_TYPE (sw' 0' typeof(Guid));  	error_correction_type = new ELEMENTARY_TYPE (sw' 0' typeof(Guid));  	time_offset = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	type_specific_data_length = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	error_correction_data_length = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	flags_stream = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	reserved_stream = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	type_specific_data = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	error_correction_data = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	int le = (int)sw.Position - start;  	sw.ReadBlock ((int)(long)sizeofBlock.Value - 24 - le);  	break;  case "ASF_Stream_Bitrate_Properties_Object":  	bitrate_Records_Count = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	bitrate_records = new List<WMA_Bitrate_Record> ();  	for (int u = 0; u < (short)bitrate_Records_Count.Value; u++) {  		bitrate_records.Add (new WMA_Bitrate_Record (sw));  	}  	break;  default:  	sw.ReadBlock ((int)(long)sizeofBlock.Value - 24);  	break;  }  
Magic Number,MP3Library,WMA_Content_Block,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_Content_Block,The following statement contains a magic number: switch (guid_name) {  case "ASF_Content_Description_Object":  	lTitle = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	lAuthor = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	lCopyright = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	lDescription = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	lRating = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	if ((short)lTitle.Value > 0)  		title = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lTitle.Value / 2);  	if ((short)lAuthor.Value > 0)  		author = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lAuthor.Value / 2);  	if ((short)lCopyright.Value > 0)  		copyright = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lCopyright.Value / 2);  	if ((short)lDescription.Value > 0)  		description = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lDescription.Value / 2);  	if ((short)lRating.Value > 0)  		rating = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lRating.Value / 2);  	LengthInFile = sw.Position - PositionOfStructureInFile;  	break;  case "ASF_Extended_Content_Description_Object":  	numAttrs = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	wma_extended_attributes = new List<WMA_extended_attribute> ();  	for (int u = 0; u < (short)numAttrs.Value; u++) {  		wma_extended_attributes.Add (new WMA_extended_attribute (sw));  	}  	break;  case "ASF_File_Properties_Object":  	file_id = new ELEMENTARY_TYPE (sw' 0' typeof(Guid));  	file_size = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	creation_date = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	data_packets_count = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	play_duration = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	send_duration = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	preroll = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	flags = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	minimum_data_packet_size = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	maximum_data_packet_size = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	maximum_bitrate = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	break;  case "ASF_Header_Extension_Object":  	sw.ReadBlock ((int)(long)sizeofBlock.Value - 24);  	break;  case "ASF_Codec_List_Object":  	Reserved = new ELEMENTARY_TYPE (sw' 0' typeof(Guid));  	codec_Entries_Count = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	codec_entries = new List<WMA_Codec_Entry> ();  	for (int uc = 0; uc < (int)codec_Entries_Count.Value; uc++) {  		codec_entries.Add (new WMA_Codec_Entry (sw));  	}  	break;  case "ASF_Stream_Properties_Object":  	int start = (int)sw.Position;  	stream_type = new ELEMENTARY_TYPE (sw' 0' typeof(Guid));  	error_correction_type = new ELEMENTARY_TYPE (sw' 0' typeof(Guid));  	time_offset = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	type_specific_data_length = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	error_correction_data_length = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	flags_stream = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	reserved_stream = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	type_specific_data = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	error_correction_data = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	int le = (int)sw.Position - start;  	sw.ReadBlock ((int)(long)sizeofBlock.Value - 24 - le);  	break;  case "ASF_Stream_Bitrate_Properties_Object":  	bitrate_Records_Count = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	bitrate_records = new List<WMA_Bitrate_Record> ();  	for (int u = 0; u < (short)bitrate_Records_Count.Value; u++) {  		bitrate_records.Add (new WMA_Bitrate_Record (sw));  	}  	break;  default:  	sw.ReadBlock ((int)(long)sizeofBlock.Value - 24);  	break;  }  
Magic Number,MP3Library,WMA_Content_Block,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_Content_Block,The following statement contains a magic number: switch (guid_name) {  case "ASF_Content_Description_Object":  	lTitle = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	lAuthor = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	lCopyright = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	lDescription = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	lRating = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	if ((short)lTitle.Value > 0)  		title = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lTitle.Value / 2);  	if ((short)lAuthor.Value > 0)  		author = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lAuthor.Value / 2);  	if ((short)lCopyright.Value > 0)  		copyright = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lCopyright.Value / 2);  	if ((short)lDescription.Value > 0)  		description = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lDescription.Value / 2);  	if ((short)lRating.Value > 0)  		rating = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lRating.Value / 2);  	LengthInFile = sw.Position - PositionOfStructureInFile;  	break;  case "ASF_Extended_Content_Description_Object":  	numAttrs = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	wma_extended_attributes = new List<WMA_extended_attribute> ();  	for (int u = 0; u < (short)numAttrs.Value; u++) {  		wma_extended_attributes.Add (new WMA_extended_attribute (sw));  	}  	break;  case "ASF_File_Properties_Object":  	file_id = new ELEMENTARY_TYPE (sw' 0' typeof(Guid));  	file_size = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	creation_date = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	data_packets_count = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	play_duration = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	send_duration = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	preroll = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	flags = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	minimum_data_packet_size = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	maximum_data_packet_size = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	maximum_bitrate = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	break;  case "ASF_Header_Extension_Object":  	sw.ReadBlock ((int)(long)sizeofBlock.Value - 24);  	break;  case "ASF_Codec_List_Object":  	Reserved = new ELEMENTARY_TYPE (sw' 0' typeof(Guid));  	codec_Entries_Count = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	codec_entries = new List<WMA_Codec_Entry> ();  	for (int uc = 0; uc < (int)codec_Entries_Count.Value; uc++) {  		codec_entries.Add (new WMA_Codec_Entry (sw));  	}  	break;  case "ASF_Stream_Properties_Object":  	int start = (int)sw.Position;  	stream_type = new ELEMENTARY_TYPE (sw' 0' typeof(Guid));  	error_correction_type = new ELEMENTARY_TYPE (sw' 0' typeof(Guid));  	time_offset = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	type_specific_data_length = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	error_correction_data_length = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	flags_stream = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	reserved_stream = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	type_specific_data = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	error_correction_data = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	int le = (int)sw.Position - start;  	sw.ReadBlock ((int)(long)sizeofBlock.Value - 24 - le);  	break;  case "ASF_Stream_Bitrate_Properties_Object":  	bitrate_Records_Count = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	bitrate_records = new List<WMA_Bitrate_Record> ();  	for (int u = 0; u < (short)bitrate_Records_Count.Value; u++) {  		bitrate_records.Add (new WMA_Bitrate_Record (sw));  	}  	break;  default:  	sw.ReadBlock ((int)(long)sizeofBlock.Value - 24);  	break;  }  
Magic Number,MP3Library,WMA_Content_Block,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_Content_Block,The following statement contains a magic number: switch (guid_name) {  case "ASF_Content_Description_Object":  	lTitle = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	lAuthor = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	lCopyright = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	lDescription = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	lRating = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	if ((short)lTitle.Value > 0)  		title = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lTitle.Value / 2);  	if ((short)lAuthor.Value > 0)  		author = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lAuthor.Value / 2);  	if ((short)lCopyright.Value > 0)  		copyright = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lCopyright.Value / 2);  	if ((short)lDescription.Value > 0)  		description = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lDescription.Value / 2);  	if ((short)lRating.Value > 0)  		rating = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lRating.Value / 2);  	LengthInFile = sw.Position - PositionOfStructureInFile;  	break;  case "ASF_Extended_Content_Description_Object":  	numAttrs = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	wma_extended_attributes = new List<WMA_extended_attribute> ();  	for (int u = 0; u < (short)numAttrs.Value; u++) {  		wma_extended_attributes.Add (new WMA_extended_attribute (sw));  	}  	break;  case "ASF_File_Properties_Object":  	file_id = new ELEMENTARY_TYPE (sw' 0' typeof(Guid));  	file_size = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	creation_date = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	data_packets_count = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	play_duration = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	send_duration = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	preroll = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	flags = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	minimum_data_packet_size = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	maximum_data_packet_size = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	maximum_bitrate = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	break;  case "ASF_Header_Extension_Object":  	sw.ReadBlock ((int)(long)sizeofBlock.Value - 24);  	break;  case "ASF_Codec_List_Object":  	Reserved = new ELEMENTARY_TYPE (sw' 0' typeof(Guid));  	codec_Entries_Count = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	codec_entries = new List<WMA_Codec_Entry> ();  	for (int uc = 0; uc < (int)codec_Entries_Count.Value; uc++) {  		codec_entries.Add (new WMA_Codec_Entry (sw));  	}  	break;  case "ASF_Stream_Properties_Object":  	int start = (int)sw.Position;  	stream_type = new ELEMENTARY_TYPE (sw' 0' typeof(Guid));  	error_correction_type = new ELEMENTARY_TYPE (sw' 0' typeof(Guid));  	time_offset = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	type_specific_data_length = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	error_correction_data_length = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	flags_stream = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	reserved_stream = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	type_specific_data = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	error_correction_data = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	int le = (int)sw.Position - start;  	sw.ReadBlock ((int)(long)sizeofBlock.Value - 24 - le);  	break;  case "ASF_Stream_Bitrate_Properties_Object":  	bitrate_Records_Count = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	bitrate_records = new List<WMA_Bitrate_Record> ();  	for (int u = 0; u < (short)bitrate_Records_Count.Value; u++) {  		bitrate_records.Add (new WMA_Bitrate_Record (sw));  	}  	break;  default:  	sw.ReadBlock ((int)(long)sizeofBlock.Value - 24);  	break;  }  
Magic Number,MP3Library,WMA_Content_Block,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_Content_Block,The following statement contains a magic number: switch (guid_name) {  case "ASF_Content_Description_Object":  	lTitle = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	lAuthor = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	lCopyright = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	lDescription = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	lRating = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	if ((short)lTitle.Value > 0)  		title = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lTitle.Value / 2);  	if ((short)lAuthor.Value > 0)  		author = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lAuthor.Value / 2);  	if ((short)lCopyright.Value > 0)  		copyright = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lCopyright.Value / 2);  	if ((short)lDescription.Value > 0)  		description = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lDescription.Value / 2);  	if ((short)lRating.Value > 0)  		rating = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lRating.Value / 2);  	LengthInFile = sw.Position - PositionOfStructureInFile;  	break;  case "ASF_Extended_Content_Description_Object":  	numAttrs = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	wma_extended_attributes = new List<WMA_extended_attribute> ();  	for (int u = 0; u < (short)numAttrs.Value; u++) {  		wma_extended_attributes.Add (new WMA_extended_attribute (sw));  	}  	break;  case "ASF_File_Properties_Object":  	file_id = new ELEMENTARY_TYPE (sw' 0' typeof(Guid));  	file_size = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	creation_date = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	data_packets_count = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	play_duration = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	send_duration = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	preroll = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	flags = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	minimum_data_packet_size = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	maximum_data_packet_size = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	maximum_bitrate = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	break;  case "ASF_Header_Extension_Object":  	sw.ReadBlock ((int)(long)sizeofBlock.Value - 24);  	break;  case "ASF_Codec_List_Object":  	Reserved = new ELEMENTARY_TYPE (sw' 0' typeof(Guid));  	codec_Entries_Count = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	codec_entries = new List<WMA_Codec_Entry> ();  	for (int uc = 0; uc < (int)codec_Entries_Count.Value; uc++) {  		codec_entries.Add (new WMA_Codec_Entry (sw));  	}  	break;  case "ASF_Stream_Properties_Object":  	int start = (int)sw.Position;  	stream_type = new ELEMENTARY_TYPE (sw' 0' typeof(Guid));  	error_correction_type = new ELEMENTARY_TYPE (sw' 0' typeof(Guid));  	time_offset = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	type_specific_data_length = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	error_correction_data_length = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	flags_stream = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	reserved_stream = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	type_specific_data = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	error_correction_data = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	int le = (int)sw.Position - start;  	sw.ReadBlock ((int)(long)sizeofBlock.Value - 24 - le);  	break;  case "ASF_Stream_Bitrate_Properties_Object":  	bitrate_Records_Count = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	bitrate_records = new List<WMA_Bitrate_Record> ();  	for (int u = 0; u < (short)bitrate_Records_Count.Value; u++) {  		bitrate_records.Add (new WMA_Bitrate_Record (sw));  	}  	break;  default:  	sw.ReadBlock ((int)(long)sizeofBlock.Value - 24);  	break;  }  
Magic Number,MP3Library,WMA_Content_Block,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_Content_Block,The following statement contains a magic number: switch (guid_name) {  case "ASF_Content_Description_Object":  	lTitle = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	lAuthor = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	lCopyright = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	lDescription = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	lRating = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	if ((short)lTitle.Value > 0)  		title = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lTitle.Value / 2);  	if ((short)lAuthor.Value > 0)  		author = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lAuthor.Value / 2);  	if ((short)lCopyright.Value > 0)  		copyright = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lCopyright.Value / 2);  	if ((short)lDescription.Value > 0)  		description = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lDescription.Value / 2);  	if ((short)lRating.Value > 0)  		rating = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lRating.Value / 2);  	LengthInFile = sw.Position - PositionOfStructureInFile;  	break;  case "ASF_Extended_Content_Description_Object":  	numAttrs = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	wma_extended_attributes = new List<WMA_extended_attribute> ();  	for (int u = 0; u < (short)numAttrs.Value; u++) {  		wma_extended_attributes.Add (new WMA_extended_attribute (sw));  	}  	break;  case "ASF_File_Properties_Object":  	file_id = new ELEMENTARY_TYPE (sw' 0' typeof(Guid));  	file_size = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	creation_date = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	data_packets_count = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	play_duration = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	send_duration = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	preroll = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	flags = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	minimum_data_packet_size = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	maximum_data_packet_size = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	maximum_bitrate = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	break;  case "ASF_Header_Extension_Object":  	sw.ReadBlock ((int)(long)sizeofBlock.Value - 24);  	break;  case "ASF_Codec_List_Object":  	Reserved = new ELEMENTARY_TYPE (sw' 0' typeof(Guid));  	codec_Entries_Count = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	codec_entries = new List<WMA_Codec_Entry> ();  	for (int uc = 0; uc < (int)codec_Entries_Count.Value; uc++) {  		codec_entries.Add (new WMA_Codec_Entry (sw));  	}  	break;  case "ASF_Stream_Properties_Object":  	int start = (int)sw.Position;  	stream_type = new ELEMENTARY_TYPE (sw' 0' typeof(Guid));  	error_correction_type = new ELEMENTARY_TYPE (sw' 0' typeof(Guid));  	time_offset = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	type_specific_data_length = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	error_correction_data_length = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	flags_stream = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	reserved_stream = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	type_specific_data = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	error_correction_data = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	int le = (int)sw.Position - start;  	sw.ReadBlock ((int)(long)sizeofBlock.Value - 24 - le);  	break;  case "ASF_Stream_Bitrate_Properties_Object":  	bitrate_Records_Count = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	bitrate_records = new List<WMA_Bitrate_Record> ();  	for (int u = 0; u < (short)bitrate_Records_Count.Value; u++) {  		bitrate_records.Add (new WMA_Bitrate_Record (sw));  	}  	break;  default:  	sw.ReadBlock ((int)(long)sizeofBlock.Value - 24);  	break;  }  
Magic Number,MP3Library,WMA_Content_Block,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_Content_Block,The following statement contains a magic number: switch (guid_name) {  case "ASF_Content_Description_Object":  	lTitle = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	lAuthor = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	lCopyright = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	lDescription = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	lRating = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	if ((short)lTitle.Value > 0)  		title = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lTitle.Value / 2);  	if ((short)lAuthor.Value > 0)  		author = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lAuthor.Value / 2);  	if ((short)lCopyright.Value > 0)  		copyright = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lCopyright.Value / 2);  	if ((short)lDescription.Value > 0)  		description = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lDescription.Value / 2);  	if ((short)lRating.Value > 0)  		rating = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lRating.Value / 2);  	LengthInFile = sw.Position - PositionOfStructureInFile;  	break;  case "ASF_Extended_Content_Description_Object":  	numAttrs = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	wma_extended_attributes = new List<WMA_extended_attribute> ();  	for (int u = 0; u < (short)numAttrs.Value; u++) {  		wma_extended_attributes.Add (new WMA_extended_attribute (sw));  	}  	break;  case "ASF_File_Properties_Object":  	file_id = new ELEMENTARY_TYPE (sw' 0' typeof(Guid));  	file_size = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	creation_date = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	data_packets_count = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	play_duration = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	send_duration = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	preroll = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	flags = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	minimum_data_packet_size = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	maximum_data_packet_size = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	maximum_bitrate = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	break;  case "ASF_Header_Extension_Object":  	sw.ReadBlock ((int)(long)sizeofBlock.Value - 24);  	break;  case "ASF_Codec_List_Object":  	Reserved = new ELEMENTARY_TYPE (sw' 0' typeof(Guid));  	codec_Entries_Count = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	codec_entries = new List<WMA_Codec_Entry> ();  	for (int uc = 0; uc < (int)codec_Entries_Count.Value; uc++) {  		codec_entries.Add (new WMA_Codec_Entry (sw));  	}  	break;  case "ASF_Stream_Properties_Object":  	int start = (int)sw.Position;  	stream_type = new ELEMENTARY_TYPE (sw' 0' typeof(Guid));  	error_correction_type = new ELEMENTARY_TYPE (sw' 0' typeof(Guid));  	time_offset = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	type_specific_data_length = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	error_correction_data_length = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	flags_stream = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	reserved_stream = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	type_specific_data = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	error_correction_data = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	int le = (int)sw.Position - start;  	sw.ReadBlock ((int)(long)sizeofBlock.Value - 24 - le);  	break;  case "ASF_Stream_Bitrate_Properties_Object":  	bitrate_Records_Count = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	bitrate_records = new List<WMA_Bitrate_Record> ();  	for (int u = 0; u < (short)bitrate_Records_Count.Value; u++) {  		bitrate_records.Add (new WMA_Bitrate_Record (sw));  	}  	break;  default:  	sw.ReadBlock ((int)(long)sizeofBlock.Value - 24);  	break;  }  
Magic Number,MP3Library,WMA_Content_Block,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_Content_Block,The following statement contains a magic number: if ((short)lTitle.Value > 0)  	title = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lTitle.Value / 2);  
Magic Number,MP3Library,WMA_Content_Block,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_Content_Block,The following statement contains a magic number: title = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lTitle.Value / 2);  
Magic Number,MP3Library,WMA_Content_Block,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_Content_Block,The following statement contains a magic number: if ((short)lAuthor.Value > 0)  	author = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lAuthor.Value / 2);  
Magic Number,MP3Library,WMA_Content_Block,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_Content_Block,The following statement contains a magic number: author = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lAuthor.Value / 2);  
Magic Number,MP3Library,WMA_Content_Block,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_Content_Block,The following statement contains a magic number: if ((short)lCopyright.Value > 0)  	copyright = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lCopyright.Value / 2);  
Magic Number,MP3Library,WMA_Content_Block,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_Content_Block,The following statement contains a magic number: copyright = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lCopyright.Value / 2);  
Magic Number,MP3Library,WMA_Content_Block,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_Content_Block,The following statement contains a magic number: if ((short)lDescription.Value > 0)  	description = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lDescription.Value / 2);  
Magic Number,MP3Library,WMA_Content_Block,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_Content_Block,The following statement contains a magic number: description = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lDescription.Value / 2);  
Magic Number,MP3Library,WMA_Content_Block,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_Content_Block,The following statement contains a magic number: if ((short)lRating.Value > 0)  	rating = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lRating.Value / 2);  
Magic Number,MP3Library,WMA_Content_Block,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_Content_Block,The following statement contains a magic number: rating = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)lRating.Value / 2);  
Magic Number,MP3Library,WMA_Content_Block,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_Content_Block,The following statement contains a magic number: sw.ReadBlock ((int)(long)sizeofBlock.Value - 24);  
Magic Number,MP3Library,WMA_Content_Block,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_Content_Block,The following statement contains a magic number: sw.ReadBlock ((int)(long)sizeofBlock.Value - 24 - le);  
Magic Number,MP3Library,WMA_Content_Block,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_Content_Block,The following statement contains a magic number: sw.ReadBlock ((int)(long)sizeofBlock.Value - 24);  
Magic Number,MP3Library,WMA_Codec_Entry,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_Codec_Entry,The following statement contains a magic number: if ((short)name_length.Value / 2 > 0)  	name = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)name_length.Value / 2);  
Magic Number,MP3Library,WMA_Codec_Entry,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_Codec_Entry,The following statement contains a magic number: if ((short)name_length.Value / 2 > 0)  	name = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)name_length.Value / 2);  
Magic Number,MP3Library,WMA_Codec_Entry,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_Codec_Entry,The following statement contains a magic number: name = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)name_length.Value / 2);  
Magic Number,MP3Library,WMA_Codec_Entry,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_Codec_Entry,The following statement contains a magic number: if ((short)description_length.Value / 2 > 0)  	description = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)description_length.Value / 2);  
Magic Number,MP3Library,WMA_Codec_Entry,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_Codec_Entry,The following statement contains a magic number: if ((short)description_length.Value / 2 > 0)  	description = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)description_length.Value / 2);  
Magic Number,MP3Library,WMA_Codec_Entry,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_Codec_Entry,The following statement contains a magic number: description = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)description_length.Value / 2);  
Magic Number,MP3Library,WMA_Codec_Entry,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_Codec_Entry,The following statement contains a magic number: if ((short)information_length.Value / 2 > 0)  	information = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' (short)information_length.Value);  
Magic Number,MP3Library,WMA_extended_attribute,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_extended_attribute,The following statement contains a magic number: try {  	nameLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	attrName = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)nameLength.Value / 2);  	dataType = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	switch ((short)dataType.Value) {  	#region Read data  	case 0:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		value = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)valueLength.Value / 2);  		/*                  switch ((string)attrName.Value)                                           {                                              case "WM/Lyrics":                                                   break;                                               case "WM/AlbumTitle":                                                   mp3_TALB = value;                                                   break;                                               case "WM/AlbumArtist":                                                   mp3_TPE1 = value;                                                   break;                                               case "WM/Genre":                                                   mp3_TCON = value;                                                   break;                                               case "WM/TrackNumber":                                                   mp3_TRCK = value;                                                   break;                                               case "WM/Year":                                                   break;                                               case "WM/Composer":                                                   mp3_TCOM = value;                                                   break;                                               case "WM/Publisher":                                                   break;                                           }*/break;  	case 1:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		if ((string)attrName.Value == "WM/Picture") {  			value = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' (short)valueLength.Value);  		}  		else  			value = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' (short)valueLength.Value);  		break;  	case 2:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  		break;  	case 3:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  		break;  	case 4:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		value = new ELEMENTARY_TYPE (sw' 0' typeof(long));  		break;  	case 5:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  		break;  	#endregion  	}  }  catch (Exception ex) {  }  
Magic Number,MP3Library,WMA_extended_attribute,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_extended_attribute,The following statement contains a magic number: try {  	nameLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	attrName = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)nameLength.Value / 2);  	dataType = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	switch ((short)dataType.Value) {  	#region Read data  	case 0:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		value = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)valueLength.Value / 2);  		/*                  switch ((string)attrName.Value)                                           {                                              case "WM/Lyrics":                                                   break;                                               case "WM/AlbumTitle":                                                   mp3_TALB = value;                                                   break;                                               case "WM/AlbumArtist":                                                   mp3_TPE1 = value;                                                   break;                                               case "WM/Genre":                                                   mp3_TCON = value;                                                   break;                                               case "WM/TrackNumber":                                                   mp3_TRCK = value;                                                   break;                                               case "WM/Year":                                                   break;                                               case "WM/Composer":                                                   mp3_TCOM = value;                                                   break;                                               case "WM/Publisher":                                                   break;                                           }*/break;  	case 1:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		if ((string)attrName.Value == "WM/Picture") {  			value = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' (short)valueLength.Value);  		}  		else  			value = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' (short)valueLength.Value);  		break;  	case 2:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  		break;  	case 3:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  		break;  	case 4:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		value = new ELEMENTARY_TYPE (sw' 0' typeof(long));  		break;  	case 5:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  		break;  	#endregion  	}  }  catch (Exception ex) {  }  
Magic Number,MP3Library,WMA_extended_attribute,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_extended_attribute,The following statement contains a magic number: try {  	nameLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	attrName = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)nameLength.Value / 2);  	dataType = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	switch ((short)dataType.Value) {  	#region Read data  	case 0:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		value = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)valueLength.Value / 2);  		/*                  switch ((string)attrName.Value)                                           {                                              case "WM/Lyrics":                                                   break;                                               case "WM/AlbumTitle":                                                   mp3_TALB = value;                                                   break;                                               case "WM/AlbumArtist":                                                   mp3_TPE1 = value;                                                   break;                                               case "WM/Genre":                                                   mp3_TCON = value;                                                   break;                                               case "WM/TrackNumber":                                                   mp3_TRCK = value;                                                   break;                                               case "WM/Year":                                                   break;                                               case "WM/Composer":                                                   mp3_TCOM = value;                                                   break;                                               case "WM/Publisher":                                                   break;                                           }*/break;  	case 1:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		if ((string)attrName.Value == "WM/Picture") {  			value = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' (short)valueLength.Value);  		}  		else  			value = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' (short)valueLength.Value);  		break;  	case 2:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  		break;  	case 3:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  		break;  	case 4:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		value = new ELEMENTARY_TYPE (sw' 0' typeof(long));  		break;  	case 5:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  		break;  	#endregion  	}  }  catch (Exception ex) {  }  
Magic Number,MP3Library,WMA_extended_attribute,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_extended_attribute,The following statement contains a magic number: try {  	nameLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	attrName = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)nameLength.Value / 2);  	dataType = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	switch ((short)dataType.Value) {  	#region Read data  	case 0:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		value = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)valueLength.Value / 2);  		/*                  switch ((string)attrName.Value)                                           {                                              case "WM/Lyrics":                                                   break;                                               case "WM/AlbumTitle":                                                   mp3_TALB = value;                                                   break;                                               case "WM/AlbumArtist":                                                   mp3_TPE1 = value;                                                   break;                                               case "WM/Genre":                                                   mp3_TCON = value;                                                   break;                                               case "WM/TrackNumber":                                                   mp3_TRCK = value;                                                   break;                                               case "WM/Year":                                                   break;                                               case "WM/Composer":                                                   mp3_TCOM = value;                                                   break;                                               case "WM/Publisher":                                                   break;                                           }*/break;  	case 1:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		if ((string)attrName.Value == "WM/Picture") {  			value = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' (short)valueLength.Value);  		}  		else  			value = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' (short)valueLength.Value);  		break;  	case 2:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  		break;  	case 3:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  		break;  	case 4:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		value = new ELEMENTARY_TYPE (sw' 0' typeof(long));  		break;  	case 5:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  		break;  	#endregion  	}  }  catch (Exception ex) {  }  
Magic Number,MP3Library,WMA_extended_attribute,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_extended_attribute,The following statement contains a magic number: try {  	nameLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	attrName = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)nameLength.Value / 2);  	dataType = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	switch ((short)dataType.Value) {  	#region Read data  	case 0:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		value = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)valueLength.Value / 2);  		/*                  switch ((string)attrName.Value)                                           {                                              case "WM/Lyrics":                                                   break;                                               case "WM/AlbumTitle":                                                   mp3_TALB = value;                                                   break;                                               case "WM/AlbumArtist":                                                   mp3_TPE1 = value;                                                   break;                                               case "WM/Genre":                                                   mp3_TCON = value;                                                   break;                                               case "WM/TrackNumber":                                                   mp3_TRCK = value;                                                   break;                                               case "WM/Year":                                                   break;                                               case "WM/Composer":                                                   mp3_TCOM = value;                                                   break;                                               case "WM/Publisher":                                                   break;                                           }*/break;  	case 1:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		if ((string)attrName.Value == "WM/Picture") {  			value = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' (short)valueLength.Value);  		}  		else  			value = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' (short)valueLength.Value);  		break;  	case 2:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  		break;  	case 3:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  		break;  	case 4:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		value = new ELEMENTARY_TYPE (sw' 0' typeof(long));  		break;  	case 5:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  		break;  	#endregion  	}  }  catch (Exception ex) {  }  
Magic Number,MP3Library,WMA_extended_attribute,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_extended_attribute,The following statement contains a magic number: try {  	nameLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	attrName = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)nameLength.Value / 2);  	dataType = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	switch ((short)dataType.Value) {  	#region Read data  	case 0:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		value = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)valueLength.Value / 2);  		/*                  switch ((string)attrName.Value)                                           {                                              case "WM/Lyrics":                                                   break;                                               case "WM/AlbumTitle":                                                   mp3_TALB = value;                                                   break;                                               case "WM/AlbumArtist":                                                   mp3_TPE1 = value;                                                   break;                                               case "WM/Genre":                                                   mp3_TCON = value;                                                   break;                                               case "WM/TrackNumber":                                                   mp3_TRCK = value;                                                   break;                                               case "WM/Year":                                                   break;                                               case "WM/Composer":                                                   mp3_TCOM = value;                                                   break;                                               case "WM/Publisher":                                                   break;                                           }*/break;  	case 1:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		if ((string)attrName.Value == "WM/Picture") {  			value = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' (short)valueLength.Value);  		}  		else  			value = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' (short)valueLength.Value);  		break;  	case 2:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  		break;  	case 3:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  		break;  	case 4:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		value = new ELEMENTARY_TYPE (sw' 0' typeof(long));  		break;  	case 5:  		valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  		value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  		break;  	#endregion  	}  }  catch (Exception ex) {  }  
Magic Number,MP3Library,WMA_extended_attribute,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_extended_attribute,The following statement contains a magic number: attrName = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)nameLength.Value / 2);  
Magic Number,MP3Library,WMA_extended_attribute,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_extended_attribute,The following statement contains a magic number: switch ((short)dataType.Value) {  #region Read data  case 0:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	value = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)valueLength.Value / 2);  	/*                  switch ((string)attrName.Value)                                           {                                              case "WM/Lyrics":                                                   break;                                               case "WM/AlbumTitle":                                                   mp3_TALB = value;                                                   break;                                               case "WM/AlbumArtist":                                                   mp3_TPE1 = value;                                                   break;                                               case "WM/Genre":                                                   mp3_TCON = value;                                                   break;                                               case "WM/TrackNumber":                                                   mp3_TRCK = value;                                                   break;                                               case "WM/Year":                                                   break;                                               case "WM/Composer":                                                   mp3_TCOM = value;                                                   break;                                               case "WM/Publisher":                                                   break;                                           }*/break;  case 1:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	if ((string)attrName.Value == "WM/Picture") {  		value = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' (short)valueLength.Value);  	}  	else  		value = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' (short)valueLength.Value);  	break;  case 2:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	break;  case 3:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	break;  case 4:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	value = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	break;  case 5:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	break;  #endregion  }  
Magic Number,MP3Library,WMA_extended_attribute,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_extended_attribute,The following statement contains a magic number: switch ((short)dataType.Value) {  #region Read data  case 0:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	value = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)valueLength.Value / 2);  	/*                  switch ((string)attrName.Value)                                           {                                              case "WM/Lyrics":                                                   break;                                               case "WM/AlbumTitle":                                                   mp3_TALB = value;                                                   break;                                               case "WM/AlbumArtist":                                                   mp3_TPE1 = value;                                                   break;                                               case "WM/Genre":                                                   mp3_TCON = value;                                                   break;                                               case "WM/TrackNumber":                                                   mp3_TRCK = value;                                                   break;                                               case "WM/Year":                                                   break;                                               case "WM/Composer":                                                   mp3_TCOM = value;                                                   break;                                               case "WM/Publisher":                                                   break;                                           }*/break;  case 1:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	if ((string)attrName.Value == "WM/Picture") {  		value = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' (short)valueLength.Value);  	}  	else  		value = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' (short)valueLength.Value);  	break;  case 2:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	break;  case 3:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	break;  case 4:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	value = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	break;  case 5:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	break;  #endregion  }  
Magic Number,MP3Library,WMA_extended_attribute,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_extended_attribute,The following statement contains a magic number: switch ((short)dataType.Value) {  #region Read data  case 0:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	value = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)valueLength.Value / 2);  	/*                  switch ((string)attrName.Value)                                           {                                              case "WM/Lyrics":                                                   break;                                               case "WM/AlbumTitle":                                                   mp3_TALB = value;                                                   break;                                               case "WM/AlbumArtist":                                                   mp3_TPE1 = value;                                                   break;                                               case "WM/Genre":                                                   mp3_TCON = value;                                                   break;                                               case "WM/TrackNumber":                                                   mp3_TRCK = value;                                                   break;                                               case "WM/Year":                                                   break;                                               case "WM/Composer":                                                   mp3_TCOM = value;                                                   break;                                               case "WM/Publisher":                                                   break;                                           }*/break;  case 1:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	if ((string)attrName.Value == "WM/Picture") {  		value = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' (short)valueLength.Value);  	}  	else  		value = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' (short)valueLength.Value);  	break;  case 2:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	break;  case 3:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	break;  case 4:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	value = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	break;  case 5:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	break;  #endregion  }  
Magic Number,MP3Library,WMA_extended_attribute,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_extended_attribute,The following statement contains a magic number: switch ((short)dataType.Value) {  #region Read data  case 0:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	value = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)valueLength.Value / 2);  	/*                  switch ((string)attrName.Value)                                           {                                              case "WM/Lyrics":                                                   break;                                               case "WM/AlbumTitle":                                                   mp3_TALB = value;                                                   break;                                               case "WM/AlbumArtist":                                                   mp3_TPE1 = value;                                                   break;                                               case "WM/Genre":                                                   mp3_TCON = value;                                                   break;                                               case "WM/TrackNumber":                                                   mp3_TRCK = value;                                                   break;                                               case "WM/Year":                                                   break;                                               case "WM/Composer":                                                   mp3_TCOM = value;                                                   break;                                               case "WM/Publisher":                                                   break;                                           }*/break;  case 1:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	if ((string)attrName.Value == "WM/Picture") {  		value = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' (short)valueLength.Value);  	}  	else  		value = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' (short)valueLength.Value);  	break;  case 2:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	break;  case 3:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	break;  case 4:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	value = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	break;  case 5:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	break;  #endregion  }  
Magic Number,MP3Library,WMA_extended_attribute,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_extended_attribute,The following statement contains a magic number: switch ((short)dataType.Value) {  #region Read data  case 0:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	value = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)valueLength.Value / 2);  	/*                  switch ((string)attrName.Value)                                           {                                              case "WM/Lyrics":                                                   break;                                               case "WM/AlbumTitle":                                                   mp3_TALB = value;                                                   break;                                               case "WM/AlbumArtist":                                                   mp3_TPE1 = value;                                                   break;                                               case "WM/Genre":                                                   mp3_TCON = value;                                                   break;                                               case "WM/TrackNumber":                                                   mp3_TRCK = value;                                                   break;                                               case "WM/Year":                                                   break;                                               case "WM/Composer":                                                   mp3_TCOM = value;                                                   break;                                               case "WM/Publisher":                                                   break;                                           }*/break;  case 1:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	if ((string)attrName.Value == "WM/Picture") {  		value = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' (short)valueLength.Value);  	}  	else  		value = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' (short)valueLength.Value);  	break;  case 2:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	break;  case 3:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	break;  case 4:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	value = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	break;  case 5:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	break;  #endregion  }  
Magic Number,MP3Library,WMA_extended_attribute,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_extended_attribute,The following statement contains a magic number: value = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)valueLength.Value / 2);  
Magic Number,MP3Library,ID1Tag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID1Tag,The following statement contains a magic number: oldTag = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 3);  
Magic Number,MP3Library,ID1Tag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID1Tag,The following statement contains a magic number: song_Name = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 30);  
Magic Number,MP3Library,ID1Tag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID1Tag,The following statement contains a magic number: artist = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 30);  
Magic Number,MP3Library,ID1Tag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID1Tag,The following statement contains a magic number: album = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 30);  
Magic Number,MP3Library,ID1Tag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID1Tag,The following statement contains a magic number: year = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 30);  
Magic Number,MP3Library,ID1Tag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID1Tag,The following statement contains a magic number: comment = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 4);  
Magic Number,MP3Library,ID3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID3Header,The following statement contains a magic number: iD3v2_file_identifier = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 3);  
Magic Number,MP3Library,ID3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID3Header,The following statement contains a magic number: iD3v2_version = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' 2);  
Magic Number,MP3Library,ID3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID3Header,The following statement contains a magic number: iD3v2_size = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' 4);  
Magic Number,MP3Library,ID3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID3Header,The following statement contains a magic number: nb [3] = localBuffer [3] | ((localBuffer [2] & 1) << 7);  
Magic Number,MP3Library,ID3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID3Header,The following statement contains a magic number: nb [3] = localBuffer [3] | ((localBuffer [2] & 1) << 7);  
Magic Number,MP3Library,ID3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID3Header,The following statement contains a magic number: nb [3] = localBuffer [3] | ((localBuffer [2] & 1) << 7);  
Magic Number,MP3Library,ID3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID3Header,The following statement contains a magic number: nb [3] = localBuffer [3] | ((localBuffer [2] & 1) << 7);  
Magic Number,MP3Library,ID3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID3Header,The following statement contains a magic number: nb [2] = ((localBuffer [2] >> 1) & 63) | ((localBuffer [1] & 3) << 6);  
Magic Number,MP3Library,ID3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID3Header,The following statement contains a magic number: nb [2] = ((localBuffer [2] >> 1) & 63) | ((localBuffer [1] & 3) << 6);  
Magic Number,MP3Library,ID3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID3Header,The following statement contains a magic number: nb [2] = ((localBuffer [2] >> 1) & 63) | ((localBuffer [1] & 3) << 6);  
Magic Number,MP3Library,ID3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID3Header,The following statement contains a magic number: nb [2] = ((localBuffer [2] >> 1) & 63) | ((localBuffer [1] & 3) << 6);  
Magic Number,MP3Library,ID3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID3Header,The following statement contains a magic number: nb [2] = ((localBuffer [2] >> 1) & 63) | ((localBuffer [1] & 3) << 6);  
Magic Number,MP3Library,ID3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID3Header,The following statement contains a magic number: nb [1] = ((localBuffer [1] >> 2) & 31) | ((localBuffer [0] & 7) << 5);  
Magic Number,MP3Library,ID3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID3Header,The following statement contains a magic number: nb [1] = ((localBuffer [1] >> 2) & 31) | ((localBuffer [0] & 7) << 5);  
Magic Number,MP3Library,ID3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID3Header,The following statement contains a magic number: nb [1] = ((localBuffer [1] >> 2) & 31) | ((localBuffer [0] & 7) << 5);  
Magic Number,MP3Library,ID3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID3Header,The following statement contains a magic number: nb [1] = ((localBuffer [1] >> 2) & 31) | ((localBuffer [0] & 7) << 5);  
Magic Number,MP3Library,ID3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID3Header,The following statement contains a magic number: nb [0] = ((localBuffer [0] >> 3) & 15);  
Magic Number,MP3Library,ID3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID3Header,The following statement contains a magic number: nb [0] = ((localBuffer [0] >> 3) & 15);  
Magic Number,MP3Library,ID3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID3Header,The following statement contains a magic number: size = (int)(10 + (ulong)nb [3] | ((ulong)nb [2] << 8) | ((ulong)nb [1] << 16) | ((ulong)nb [0] << 24));  
Magic Number,MP3Library,ID3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID3Header,The following statement contains a magic number: size = (int)(10 + (ulong)nb [3] | ((ulong)nb [2] << 8) | ((ulong)nb [1] << 16) | ((ulong)nb [0] << 24));  
Magic Number,MP3Library,ID3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID3Header,The following statement contains a magic number: size = (int)(10 + (ulong)nb [3] | ((ulong)nb [2] << 8) | ((ulong)nb [1] << 16) | ((ulong)nb [0] << 24));  
Magic Number,MP3Library,ID3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID3Header,The following statement contains a magic number: size = (int)(10 + (ulong)nb [3] | ((ulong)nb [2] << 8) | ((ulong)nb [1] << 16) | ((ulong)nb [0] << 24));  
Magic Number,MP3Library,ID3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID3Header,The following statement contains a magic number: size = (int)(10 + (ulong)nb [3] | ((ulong)nb [2] << 8) | ((ulong)nb [1] << 16) | ((ulong)nb [0] << 24));  
Magic Number,MP3Library,ID3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID3Header,The following statement contains a magic number: size = (int)(10 + (ulong)nb [3] | ((ulong)nb [2] << 8) | ((ulong)nb [1] << 16) | ((ulong)nb [0] << 24));  
Magic Number,MP3Library,MusicMatchTag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MusicMatchTag,The following statement contains a magic number: if (frame_sync == 0x202) {  	start = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 4);  	padding = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' 8);  }  else {  	magic_1 = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 10);  	xing_1 = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 10);  	musicMatch_1 = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 10);  	paddingSpace = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 226);  	picture_extension = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	image_size = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	image_data = new ELEMENTARY_TYPE (sw' 0' typeof(int));  }  
Magic Number,MP3Library,MusicMatchTag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MusicMatchTag,The following statement contains a magic number: if (frame_sync == 0x202) {  	start = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 4);  	padding = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' 8);  }  else {  	magic_1 = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 10);  	xing_1 = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 10);  	musicMatch_1 = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 10);  	paddingSpace = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 226);  	picture_extension = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	image_size = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	image_data = new ELEMENTARY_TYPE (sw' 0' typeof(int));  }  
Magic Number,MP3Library,MusicMatchTag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MusicMatchTag,The following statement contains a magic number: if (frame_sync == 0x202) {  	start = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 4);  	padding = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' 8);  }  else {  	magic_1 = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 10);  	xing_1 = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 10);  	musicMatch_1 = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 10);  	paddingSpace = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 226);  	picture_extension = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	image_size = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	image_data = new ELEMENTARY_TYPE (sw' 0' typeof(int));  }  
Magic Number,MP3Library,MusicMatchTag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MusicMatchTag,The following statement contains a magic number: if (frame_sync == 0x202) {  	start = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 4);  	padding = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' 8);  }  else {  	magic_1 = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 10);  	xing_1 = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 10);  	musicMatch_1 = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 10);  	paddingSpace = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 226);  	picture_extension = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	image_size = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	image_data = new ELEMENTARY_TYPE (sw' 0' typeof(int));  }  
Magic Number,MP3Library,MusicMatchTag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MusicMatchTag,The following statement contains a magic number: if (frame_sync == 0x202) {  	start = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 4);  	padding = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' 8);  }  else {  	magic_1 = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 10);  	xing_1 = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 10);  	musicMatch_1 = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 10);  	paddingSpace = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 226);  	picture_extension = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	image_size = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	image_data = new ELEMENTARY_TYPE (sw' 0' typeof(int));  }  
Magic Number,MP3Library,MusicMatchTag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MusicMatchTag,The following statement contains a magic number: if (frame_sync == 0x202) {  	start = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 4);  	padding = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' 8);  }  else {  	magic_1 = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 10);  	xing_1 = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 10);  	musicMatch_1 = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 10);  	paddingSpace = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 226);  	picture_extension = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	image_size = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	image_data = new ELEMENTARY_TYPE (sw' 0' typeof(int));  }  
Magic Number,MP3Library,MusicMatchTag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MusicMatchTag,The following statement contains a magic number: start = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 4);  
Magic Number,MP3Library,MusicMatchTag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MusicMatchTag,The following statement contains a magic number: padding = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' 8);  
Magic Number,MP3Library,MusicMatchTag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MusicMatchTag,The following statement contains a magic number: magic_1 = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 10);  
Magic Number,MP3Library,MusicMatchTag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MusicMatchTag,The following statement contains a magic number: xing_1 = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 10);  
Magic Number,MP3Library,MusicMatchTag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MusicMatchTag,The following statement contains a magic number: musicMatch_1 = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 10);  
Magic Number,MP3Library,MusicMatchTag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MusicMatchTag,The following statement contains a magic number: paddingSpace = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 226);  
Magic Number,MP3Library,MusicMatchTag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MusicMatchTag,The following statement contains a magic number: magic = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 10);  
Magic Number,MP3Library,MusicMatchTag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MusicMatchTag,The following statement contains a magic number: xing = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 10);  
Magic Number,MP3Library,MusicMatchTag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MusicMatchTag,The following statement contains a magic number: musicMatch = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 10);  
Magic Number,MP3Library,MusicMatchTag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MusicMatchTag,The following statement contains a magic number: paddingSpace = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 226);  
Magic Number,MP3Library,MusicMatchTag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MusicMatchTag,The following statement contains a magic number: pd0 = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' 16);  
Magic Number,MP3Library,MusicMatchTag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MusicMatchTag,The following statement contains a magic number: if (((string)musicMatch.Value).Contains ("2.")) {  	sw.Position -= 4;  	image_extension_offset = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	image_binary_offset = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	unused_offset = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	version_info_offset = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	audio_metadata_offset = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	footer_string = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 48);  }  
Magic Number,MP3Library,MusicMatchTag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MusicMatchTag,The following statement contains a magic number: if (((string)musicMatch.Value).Contains ("2.")) {  	sw.Position -= 4;  	image_extension_offset = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	image_binary_offset = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	unused_offset = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	version_info_offset = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	audio_metadata_offset = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	footer_string = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 48);  }  
Magic Number,MP3Library,MusicMatchTag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MusicMatchTag,The following statement contains a magic number: sw.Position -= 4;  
Magic Number,MP3Library,MusicMatchTag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MusicMatchTag,The following statement contains a magic number: footer_string = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 48);  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MP3Header,The following statement contains a magic number: frame_synchronizer = sw.ReadIntFromBits (12);  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MP3Header,The following statement contains a magic number: while ((frame_synchronizer != 0xfff) & (sw.Position < sw.Length)) {  	if (frame_synchronizer == 0x202) {  		/*               extra = new List<ELEMENTARY_TYPE>();                     sw.Position += 3;                     byte a = sw.ReadByte();                     while (a == 0x0)                     {                         a = sw.ReadByte();                     }                     sw.Position -= 1;                //     long l = sw.Length - 128 - sw.Position;                     while (sw.Position < sw.Length - 128)                     {                 //        ELEMENTARY_TYPE start =                          extra.Add(new ELEMENTARY_TYPE(sw' 0' Encoding.Default));                          a = sw.ReadByte();                         while (a == 0x0)                         {                             a = sw.ReadByte();                         }                         sw.Position -= 1;                     }                     return;*/}  	sw.BitPosition = sw.Position * 8;  	PositionOfStructureInFile = sw.Position;  	frame_synchronizer = sw.ReadIntFromBits (12);  }  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MP3Header,The following statement contains a magic number: while ((frame_synchronizer != 0xfff) & (sw.Position < sw.Length)) {  	if (frame_synchronizer == 0x202) {  		/*               extra = new List<ELEMENTARY_TYPE>();                     sw.Position += 3;                     byte a = sw.ReadByte();                     while (a == 0x0)                     {                         a = sw.ReadByte();                     }                     sw.Position -= 1;                //     long l = sw.Length - 128 - sw.Position;                     while (sw.Position < sw.Length - 128)                     {                 //        ELEMENTARY_TYPE start =                          extra.Add(new ELEMENTARY_TYPE(sw' 0' Encoding.Default));                          a = sw.ReadByte();                         while (a == 0x0)                         {                             a = sw.ReadByte();                         }                         sw.Position -= 1;                     }                     return;*/}  	sw.BitPosition = sw.Position * 8;  	PositionOfStructureInFile = sw.Position;  	frame_synchronizer = sw.ReadIntFromBits (12);  }  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MP3Header,The following statement contains a magic number: sw.BitPosition = sw.Position * 8;  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MP3Header,The following statement contains a magic number: frame_synchronizer = sw.ReadIntFromBits (12);  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MP3Header,The following statement contains a magic number: layer = sw.ReadIntFromBits (2);  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MP3Header,The following statement contains a magic number: bitrate = sw.ReadIntFromBits (4);  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MP3Header,The following statement contains a magic number: frequency = sw.ReadIntFromBits (2);  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MP3Header,The following statement contains a magic number: channel = sw.ReadIntFromBits (2);  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MP3Header,The following statement contains a magic number: mode_extension = sw.ReadIntFromBits (2);  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MP3Header,The following statement contains a magic number: LengthInFile = 4;  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MP3Header,The following statement contains a magic number: sw.Position = (int)PositionOfStructureInFile + 4;  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MP3Header,The following statement contains a magic number: frame_synchronizer = sw.ReadIntFromBits (11);  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MP3Header,The following statement contains a magic number: while ((frame_synchronizer != 0x7ff) & (sw.Position < sw.Length)) {  	if ((frame_synchronizer == 0x202) || (frame_synchronizer == 0x313))//MusicMatch ?  	 {  		sw.Position -= 1;  		musicMatch = new MusicMatchTag (sw' frame_synchronizer);  		return;  	}  	sw.BitPosition = sw.Position * 8;  	PositionOfStructureInFile = sw.Position;  	frame_synchronizer = sw.ReadIntFromBits (11);  }  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MP3Header,The following statement contains a magic number: while ((frame_synchronizer != 0x7ff) & (sw.Position < sw.Length)) {  	if ((frame_synchronizer == 0x202) || (frame_synchronizer == 0x313))//MusicMatch ?  	 {  		sw.Position -= 1;  		musicMatch = new MusicMatchTag (sw' frame_synchronizer);  		return;  	}  	sw.BitPosition = sw.Position * 8;  	PositionOfStructureInFile = sw.Position;  	frame_synchronizer = sw.ReadIntFromBits (11);  }  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MP3Header,The following statement contains a magic number: sw.BitPosition = sw.Position * 8;  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MP3Header,The following statement contains a magic number: frame_synchronizer = sw.ReadIntFromBits (11);  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MP3Header,The following statement contains a magic number: version_ID = sw.ReadIntFromBits (2);  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MP3Header,The following statement contains a magic number: layer = sw.ReadIntFromBits (2);  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MP3Header,The following statement contains a magic number: bitrate = sw.ReadIntFromBits (4);  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MP3Header,The following statement contains a magic number: frequency = sw.ReadIntFromBits (2);  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MP3Header,The following statement contains a magic number: channel = sw.ReadIntFromBits (2);  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MP3Header,The following statement contains a magic number: mode_extension = sw.ReadIntFromBits (2);  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MP3Header,The following statement contains a magic number: LengthInFile = 4;  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MP3Header,The following statement contains a magic number: sw.Position = (int)PositionOfStructureInFile + 4;  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,FrameSize,The following statement contains a magic number: switch (layer) {  case 1:  //Layer II & III   case 2:  	Frame_Size = (int)((144 * bitrate_value * 1000 / frequency_value) + padding);  	break;  case 3:  	//Layer I  	Frame_Size = (12 * bitrate_value / frequency_value + Padding) * 4;  	break;  default:  	return 5;  	break;  }  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,FrameSize,The following statement contains a magic number: switch (layer) {  case 1:  //Layer II & III   case 2:  	Frame_Size = (int)((144 * bitrate_value * 1000 / frequency_value) + padding);  	break;  case 3:  	//Layer I  	Frame_Size = (12 * bitrate_value / frequency_value + Padding) * 4;  	break;  default:  	return 5;  	break;  }  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,FrameSize,The following statement contains a magic number: switch (layer) {  case 1:  //Layer II & III   case 2:  	Frame_Size = (int)((144 * bitrate_value * 1000 / frequency_value) + padding);  	break;  case 3:  	//Layer I  	Frame_Size = (12 * bitrate_value / frequency_value + Padding) * 4;  	break;  default:  	return 5;  	break;  }  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,FrameSize,The following statement contains a magic number: switch (layer) {  case 1:  //Layer II & III   case 2:  	Frame_Size = (int)((144 * bitrate_value * 1000 / frequency_value) + padding);  	break;  case 3:  	//Layer I  	Frame_Size = (12 * bitrate_value / frequency_value + Padding) * 4;  	break;  default:  	return 5;  	break;  }  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,FrameSize,The following statement contains a magic number: switch (layer) {  case 1:  //Layer II & III   case 2:  	Frame_Size = (int)((144 * bitrate_value * 1000 / frequency_value) + padding);  	break;  case 3:  	//Layer I  	Frame_Size = (12 * bitrate_value / frequency_value + Padding) * 4;  	break;  default:  	return 5;  	break;  }  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,FrameSize,The following statement contains a magic number: switch (layer) {  case 1:  //Layer II & III   case 2:  	Frame_Size = (int)((144 * bitrate_value * 1000 / frequency_value) + padding);  	break;  case 3:  	//Layer I  	Frame_Size = (12 * bitrate_value / frequency_value + Padding) * 4;  	break;  default:  	return 5;  	break;  }  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,FrameSize,The following statement contains a magic number: switch (layer) {  case 1:  //Layer II & III   case 2:  	Frame_Size = (int)((144 * bitrate_value * 1000 / frequency_value) + padding);  	break;  case 3:  	//Layer I  	Frame_Size = (12 * bitrate_value / frequency_value + Padding) * 4;  	break;  default:  	return 5;  	break;  }  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,FrameSize,The following statement contains a magic number: Frame_Size = (int)((144 * bitrate_value * 1000 / frequency_value) + padding);  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,FrameSize,The following statement contains a magic number: Frame_Size = (int)((144 * bitrate_value * 1000 / frequency_value) + padding);  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,FrameSize,The following statement contains a magic number: Frame_Size = (12 * bitrate_value / frequency_value + Padding) * 4;  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,FrameSize,The following statement contains a magic number: Frame_Size = (12 * bitrate_value / frequency_value + Padding) * 4;  
Magic Number,MP3Library,MP3Header,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,FrameSize,The following statement contains a magic number: return 5;  
Magic Number,MP3Library,MP3Frame,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MP3Frame,The following statement contains a magic number: try {  	data = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' mp3header.FrameSize () - 4);  }  catch {  }  
Magic Number,MP3Library,MP3Frame,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,MP3Frame,The following statement contains a magic number: data = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' mp3header.FrameSize () - 4);  
Magic Number,MP3Library,ID3Tag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID3Tag,The following statement contains a magic number: tagName = new ELEMENTARY_TYPE (sw' 0' Encoding.Default' 4);  
Magic Number,MP3Library,ID3Tag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID3Tag,The following statement contains a magic number: if ((string)tagName.Value != "PRIV") {  	encoder_type = new ELEMENTARY_TYPE (sw' 0' typeof(byte));  	if (((byte)encoder_type.Value) == 1) {  		d = Encoding.Unicode;  		tagSize /= 2;  	}  }  
Magic Number,MP3Library,ID3Tag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID3Tag,The following statement contains a magic number: if (((byte)encoder_type.Value) == 1) {  	d = Encoding.Unicode;  	tagSize /= 2;  }  
Magic Number,MP3Library,ID3Tag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ID3Tag,The following statement contains a magic number: tagSize /= 2;  
Magic Number,MP3Library,ID3Tag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadString,The following statement contains a magic number: try {  	byte[] s = sw.ReadBytes (1);  	Encoding d = Encoding.GetEncoding ("iso-8859-1");  	if (s [0] == 1) {  		d = Encoding.Unicode;  		fs /= 2;  	}  	fs -= 1;  	valTag = sw.ReadString (fs' d);  	return valTag;  }  catch (Exception ex) {  }  
Magic Number,MP3Library,ID3Tag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadString,The following statement contains a magic number: if (s [0] == 1) {  	d = Encoding.Unicode;  	fs /= 2;  }  
Magic Number,MP3Library,ID3Tag,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,ReadString,The following statement contains a magic number: fs /= 2;  
Missing Default,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,The following switch statement is missing a default case: switch (dataType) {  #region Read data  case 0:  	str = br.ReadShort ();  	strValue = br.ReadString (str' Encoding.Unicode);  	valueObject.dataType = 0;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(value);  	switch (attrName) {  	case "WM/Lyrics":  		break;  	case "WM/AlbumTitle":  		mp3_TALB = strValue;  		break;  	case "WM/AlbumArtist":  		mp3_TPE1 = strValue;  		break;  	case "WM/Genre":  		mp3_TCON = strValue;  		break;  	case "WM/TrackNumber":  		mp3_TRCK = strValue;  		break;  	case "WM/Year":  		break;  	case "WM/Composer":  		mp3_TCOM = strValue;  		break;  	case "WM/Publisher":  		break;  	}  	attrName += ";" + strValue;  	index += 1;  	break;  case 1:  	dataLen = br.ReadShort ();  	bValue = new byte[dataLen - 1];  	bValue = br.ReadBytes (dataLen);  	valueObject.dataType = 1;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(bValue);  	index += 1;  	break;  case 2:  	dataLen = br.ReadShort ();  	iValue = br.ReadInteger ();  	valueObject.dataType = 2;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(boolValue);  	index += 1;  	break;  case 3:  	dataLen = br.ReadShort ();  	iValue = br.ReadInteger ();  	valueObject.dataType = 3;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(iValue);  	index += 1;  	break;  case 4:  	dataLen = br.ReadShort ();  	lValue = br.ReadLong ();  	valueObject.dataType = 4;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(lValue);  	index += 1;  	break;  case 5:  	dataLen = br.ReadShort ();  	sValue = br.ReadShort ();  	valueObject.dataType = 5;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(valueLength);  	index += 1;  	break;  #endregion  }  
Missing Default,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMA,The following switch statement is missing a default case: switch (attrName) {  case "WM/Lyrics":  	break;  case "WM/AlbumTitle":  	mp3_TALB = strValue;  	break;  case "WM/AlbumArtist":  	mp3_TPE1 = strValue;  	break;  case "WM/Genre":  	mp3_TCON = strValue;  	break;  case "WM/TrackNumber":  	mp3_TRCK = strValue;  	break;  case "WM/Year":  	break;  case "WM/Composer":  	mp3_TCOM = strValue;  	break;  case "WM/Publisher":  	break;  }  
Missing Default,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,The following switch statement is missing a default case: switch (dataType) {  #region Read data  case 0:  	strValue = readUnicodeString (br);  	valueObject.dataType = 0;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(value);  	switch (attrName) {  	case "WM/Lyrics":  		break;  	case "WM/AlbumTitle":  		mp3_TALB = strValue;  		break;  	case "WM/AlbumArtist":  		mp3_TPE1 = strValue;  		break;  	case "WM/Genre":  		mp3_TCON = strValue;  		break;  	case "WM/TrackNumber":  		mp3_TRCK = strValue;  		break;  	case "WM/Year":  		break;  	case "WM/Composer":  		mp3_TCOM = strValue;  		break;  	case "WM/Publisher":  		break;  	}  	attrName += ";" + strValue;  	index += 1;  	break;  case 1:  	dataLen = br.ReadInt16 ();  	bValue = new byte[dataLen - 1];  	bValue = br.ReadBytes (dataLen);  	valueObject.dataType = 1;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(bValue);  	index += 1;  	break;  case 2:  	dataLen = br.ReadInt16 ();  	iValue = br.ReadInt32 ();  	valueObject.dataType = 2;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(boolValue);  	index += 1;  	break;  case 3:  	dataLen = br.ReadInt16 ();  	iValue = br.ReadInt32 ();  	valueObject.dataType = 3;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(iValue);  	index += 1;  	break;  case 4:  	dataLen = br.ReadInt16 ();  	lValue = br.ReadInt64 ();  	valueObject.dataType = 4;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(lValue);  	index += 1;  	break;  case 5:  	dataLen = br.ReadInt16 ();  	sValue = br.ReadInt16 ();  	valueObject.dataType = 5;  	valueObject.index = index;  	//attrs.Add(attrName' valueObject);  	//attrValues.Add(valueLength);  	index += 1;  	break;  #endregion  }  
Missing Default,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,processExtendedContentBlockWMAOld,The following switch statement is missing a default case: switch (attrName) {  case "WM/Lyrics":  	break;  case "WM/AlbumTitle":  	mp3_TALB = strValue;  	break;  case "WM/AlbumArtist":  	mp3_TPE1 = strValue;  	break;  case "WM/Genre":  	mp3_TCON = strValue;  	break;  case "WM/TrackNumber":  	mp3_TRCK = strValue;  	break;  case "WM/Year":  	break;  case "WM/Composer":  	mp3_TCOM = strValue;  	break;  case "WM/Publisher":  	break;  }  
Missing Default,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,GetStyle,The following switch statement is missing a default case: switch (code) {  case "(0)":  	tagValue = "Blues ";  	break;  case "(1)":  	tagValue = "Classic Rock";  	break;  case "(2)":  	tagValue = "Country";  	break;  case "(3)":  	tagValue = "Dance";  	break;  case "(4)":  	tagValue = "Disco";  	break;  case "(5)":  	tagValue = "Funk";  	break;  case "(6)":  	tagValue = "Grunge";  	break;  case "(7)":  	tagValue = "Hip-Hop";  	break;  case "(8)":  	tagValue = "Jazz";  	break;  case "(9)":  	tagValue = "Metal";  	break;  case "(10)":  	tagValue = "New Age";  	break;  case "(11)":  	tagValue = "Oldies";  	break;  case "(12)":  	tagValue = "Other";  	break;  case "(13)":  	tagValue = "Pop";  	break;  case "(14)":  	tagValue = "R&B";  	break;  case "(15)":  	tagValue = "Rap";  	break;  case "(16)":  	tagValue = "Reggae";  	break;  case "(17)":  	tagValue = "Rock";  	break;  case "(18)":  	tagValue = "Techno";  	break;  case "(19)":  	tagValue = "Industrial";  	break;  case "(20)":  	tagValue = "Alternative";  	break;  case "(21)":  	tagValue = "Ska";  	break;  case "(22)":  	tagValue = "Death Metal";  	break;  case "(23)":  	tagValue = "Pranks";  	break;  case "(24)":  	tagValue = "Soundtrack";  	break;  case "(25)":  	tagValue = "Euro-Techno";  	break;  case "(26)":  	tagValue = "Ambient";  	break;  case "(27)":  	tagValue = "Trip-Hop";  	break;  case "(28)":  	tagValue = "Vocal";  	break;  case "(29)":  	tagValue = "Jazz+Funk";  	break;  case "(30)":  	tagValue = "Fusion";  	break;  case "(31)":  	tagValue = "Trance";  	break;  case "(32)":  	tagValue = "Classical";  	break;  case "(33)":  	tagValue = "Instrumental";  	break;  case "(34)":  	tagValue = "Acid";  	break;  case "(35)":  	tagValue = "House";  	break;  case "(36)":  	tagValue = "Game";  	break;  case "(37)":  	tagValue = "Sound Clip";  	break;  case "(38)":  	tagValue = "Gospel";  	break;  case "(39)":  	tagValue = "Noise";  	break;  case "(40)":  	tagValue = "AlternRock";  	break;  case "(41)":  	tagValue = "Bass";  	break;  case "(42)":  	tagValue = "Soul";  	break;  case "(43)":  	tagValue = "Punk";  	break;  case "(44)":  	tagValue = "Space";  	break;  case "(45)":  	tagValue = "Meditative";  	break;  case "(46)":  	tagValue = "Instrumental Pop";  	break;  case "(47)":  	tagValue = "Instrumental Rock";  	break;  case "(48)":  	tagValue = "Ethnic";  	break;  case "(49)":  	tagValue = "Gothic";  	break;  case "(50)":  	tagValue = "Darkwave";  	break;  case "(51)":  	tagValue = "Techno-Industrial";  	break;  case "(52)":  	tagValue = "Electronic";  	break;  case "(53)":  	tagValue = "Pop-Folk";  	break;  case "(54)":  	tagValue = "Eurodance";  	break;  case "(55)":  	tagValue = "Dream";  	break;  case "(56)":  	tagValue = "Southern Rock";  	break;  case "(57)":  	tagValue = "Comedy";  	break;  case "(58)":  	tagValue = "Cult";  	break;  case "(59)":  	tagValue = "Gangsta";  	break;  case "(60)":  	tagValue = "Top 40";  	break;  case "(61)":  	tagValue = "Christian Rap";  	break;  case "(62)":  	tagValue = "Pop/Funk";  	break;  case "(63)":  	tagValue = "Jungle";  	break;  case "(64)":  	tagValue = "Native American";  	break;  case "(65)":  	tagValue = "Cabaret";  	break;  case "(66)":  	tagValue = "New Wave";  	break;  case "(67)":  	tagValue = "Psychadelic";  	break;  case "(68)":  	tagValue = "Rave";  	break;  case "(69)":  	tagValue = "Showtunes";  	break;  case "(70)":  	tagValue = "Trailer";  	break;  case "(71)":  	tagValue = "Lo-Fi";  	break;  case "(72)":  	tagValue = "Tribal";  	break;  case "(73)":  	tagValue = "Acid Punk";  	break;  case "(74)":  	tagValue = "Acid Jazz";  	break;  case "(75)":  	tagValue = "Polka";  	break;  case "(76)":  	tagValue = "Retro";  	break;  case "(77)":  	tagValue = "Musical";  	break;  case "(78)":  	tagValue = "Rock & Roll";  	break;  case "(79)":  	tagValue = "Hard Rock";  	break;  case "(80)":  	tagValue = "Folk";  	break;  case "(81)":  	tagValue = "Folk-Rock";  	break;  case "(82)":  	tagValue = "National Folk";  	break;  case "(83)":  	tagValue = "Swing";  	break;  case "(84)":  	tagValue = "Fast Fusion";  	break;  case "(85)":  	tagValue = "Bebob";  	break;  case "(86)":  	tagValue = "Latin";  	break;  case "(87)":  	tagValue = "Revival";  	break;  case "(88)":  	tagValue = "Celtic";  	break;  case "(89)":  	tagValue = "Bluegrass";  	break;  case "(90)":  	tagValue = "Avantgarde";  	break;  case "(91)":  	tagValue = "Gothic Rock";  	break;  case "(92)":  	tagValue = "Progressive Rock";  	break;  case "(93)":  	tagValue = "Psychedelic Rock";  	break;  case "(94)":  	tagValue = "Symphonic Rock";  	break;  case "(95)":  	tagValue = "Slow Rock";  	break;  case "(96)":  	tagValue = "Big Band";  	break;  case "(97)":  	tagValue = "Chorus";  	break;  case "(98)":  	tagValue = "Easy Listening";  	break;  case "(99)":  	tagValue = "Acoustic";  	break;  case "(100)":  	tagValue = "Humour";  	break;  case "(101)":  	tagValue = "Speech";  	break;  case "(102)":  	tagValue = "Chanson";  	break;  case "(103)":  	tagValue = "Opera";  	break;  case "(104)":  	tagValue = "Chamber Music";  	break;  case "(105)":  	tagValue = "Sonata";  	break;  case "(106)":  	tagValue = "Symphony";  	break;  case "(107)":  	tagValue = "Booty Bass";  	break;  case "(108)":  	tagValue = "Primus";  	break;  case "(109)":  	tagValue = "Porn Groove";  	break;  case "(110)":  	tagValue = "Satire";  	break;  case "(111)":  	tagValue = "Slow Jam";  	break;  case "(112)":  	tagValue = "Club";  	break;  case "(113)":  	tagValue = "Tango";  	break;  case "(114)":  	tagValue = "Samba";  	break;  case "(115)":  	tagValue = "Folklore";  	break;  case "(116)":  	tagValue = "Ballad";  	break;  case "(117)":  	tagValue = "Power Ballad";  	break;  case "(118)":  	tagValue = "Rhythmic Soul";  	break;  case "(119)":  	tagValue = "Freestyle";  	break;  case "(120)":  	tagValue = "Duet";  	break;  case "(121)":  	tagValue = "Punk Rock";  	break;  case "(122)":  	tagValue = "Drum Solo";  	break;  case "(123)":  	tagValue = "A capella";  	break;  case "(124)":  	tagValue = "Euro-House";  	break;  case "(125)":  	tagValue = "Dance Hall";  	break;  }  
Missing Default,MP3Library,MusicFileClass,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,GetArtType,The following switch statement is missing a default case: switch (pictureType) {  case 0x00:  	artType = "Other";  	break;  case 0x01:  	artType = "32x32 pixels 'file icon' (PNG only)";  	break;  case 0x02:  	artType = "Other file icon";  	break;  case 0x03:  	artType = "Cover (front)";  	break;  case 0x04:  	artType = "Cover (back)";  	break;  case 0x05:  	artType = "Leaflet page";  	break;  case 0x06:  	artType = "Media (e.g. lable side of CD)";  	break;  case 0x07:  	artType = "Lead artist/lead performer/soloist";  	break;  case 0x08:  	artType = "Artist/performer";  	break;  case 0x09:  	artType = "Conductor";  	break;  case 0x0A:  	artType = "Band/Orchestra";  	break;  case 0x0B:  	artType = "Composer";  	break;  case 0x0C:  	artType = "Lyricist/text writer";  	break;  case 0x0D:  	artType = "Recording Location";  	break;  case 0x0E:  	artType = "During recording";  	break;  case 0x0F:  	artType = "During performance";  	break;  case 0x10:  	artType = "Movie/video screen capture";  	break;  case 0x11:  	artType = "A bright coloured fish";  	break;  case 0x12:  	artType = "Illustration";  	break;  case 0x13:  	artType = "Band/artist logotype";  	break;  case 0x14:  	artType = "Publisher/Studio logotype";  	break;  }  
Missing Default,MP3Library,WMA_extended_attribute,C:\repos\mbatest_Binhed\MP3Tag\MP3Library.cs,WMA_extended_attribute,The following switch statement is missing a default case: switch ((short)dataType.Value) {  #region Read data  case 0:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	value = new ELEMENTARY_TYPE (sw' 0' Encoding.Unicode' (short)valueLength.Value / 2);  	/*                  switch ((string)attrName.Value)                                           {                                              case "WM/Lyrics":                                                   break;                                               case "WM/AlbumTitle":                                                   mp3_TALB = value;                                                   break;                                               case "WM/AlbumArtist":                                                   mp3_TPE1 = value;                                                   break;                                               case "WM/Genre":                                                   mp3_TCON = value;                                                   break;                                               case "WM/TrackNumber":                                                   mp3_TRCK = value;                                                   break;                                               case "WM/Year":                                                   break;                                               case "WM/Composer":                                                   mp3_TCOM = value;                                                   break;                                               case "WM/Publisher":                                                   break;                                           }*/break;  case 1:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	if ((string)attrName.Value == "WM/Picture") {  		value = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' (short)valueLength.Value);  	}  	else  		value = new ELEMENTARY_TYPE (sw' 0' typeof(byte[])' (short)valueLength.Value);  	break;  case 2:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	break;  case 3:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	break;  case 4:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	value = new ELEMENTARY_TYPE (sw' 0' typeof(long));  	break;  case 5:  	valueLength = new ELEMENTARY_TYPE (sw' 0' typeof(short));  	value = new ELEMENTARY_TYPE (sw' 0' typeof(int));  	break;  #endregion  }  
