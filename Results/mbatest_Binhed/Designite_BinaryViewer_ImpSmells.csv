Implementation smell,Namespace,Class,File,Method,Description
Complex Method,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,SetMode,Cyclomatic complexity of the method is 9
Complex Method,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Highlight,Cyclomatic complexity of the method is 11
Complex Method,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Search,Cyclomatic complexity of the method is 36
Complex Method,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,Cyclomatic complexity of the method is 30
Long Parameter List,BinaryViewer,Row,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,DisplayRow,The method has 11 parameters.
Long Parameter List,BinaryViewer,SubItem,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Draw,The method has 6 parameters.
Long Statement,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The length of the statement  "		rows [i].DisplayRow (e.Graphics' top' 0' startColumn' firstColumnWidth' normalColumnWidth' lineHeight' lineFont' showHex' showText' mode); " is 138.
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Init,The following statement contains a magic number: panelWidth = 664;  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Init,The following statement contains a magic number: panelWidth = 664;  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,SetMode,The following statement contains a magic number: switch (mode) {  case ViewMode.Hex:  	viewingMode = 0x10;  	break;  case ViewMode.Bit:  	viewingMode = 2;  	break;  case ViewMode.Dec:  	viewingMode = 0xa;  	break;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,SetMode,The following statement contains a magic number: viewingMode = 2;  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,SetScrollSize,The following statement contains a magic number: if (s > 0xffffffff) {  	reduc = (int)((s & 0xffffffff00000000) >> 32);  	vScrollBar1.SmallChange = 1000;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,SetScrollSize,The following statement contains a magic number: if (s > 0xffffffff) {  	reduc = (int)((s & 0xffffffff00000000) >> 32);  	vScrollBar1.SmallChange = 1000;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,SetScrollSize,The following statement contains a magic number: reduc = (int)((s & 0xffffffff00000000) >> 32);  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,SetScrollSize,The following statement contains a magic number: vScrollBar1.SmallChange = 1000;  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Highlight,The following statement contains a magic number: if (o == null) {  	switch (scrollMode) {  	case ScrollMode.Sector:  		break;  	case ScrollMode.Linear:  		GotoAddress (Math.Max (position - 5 * 0x10' 0));  		break;  	}  	int row = (int)position / 0x10 - startLine;  	int col = (int)position % 0x10;  	selectedSubItem = new Point (row' col);  	List<Point> sb = new List<Point> ();  	for (int i = 0; i < length; i++) {  		rows [row].SubItems [col].Selected = true;  		sb.Add (new Point (row' col));  		col += 1;  		if (col == 0x10) {  			row++;  			col = 0;  		}  		if (row >= rows.Count)  			break;  	}  }  else {  	BinPosition bin = (BinPosition)o;  	UnSelect ();  	long p = bin.bitPosition / 0x8;  	long start = bin.bitPosition % 0x8;  	GotoAddress (p);  	int row = (int)p / 0x10 - startLine;  	int col = (int)p % 0x10;  	byte[] b = new byte[1];  	string bitPattern = "1";  	selectedSubItem = new Point (row' col);  	for (int i = 0; i < b.Length; i++) {  		rows [row].SubItems [(col + i) % 0x10].Selected = true;  		rows [row].SubItems [(col + i) % 0x10].BinaryPattern = bitPattern;  		rows [row].SubItems [(col + i) % 0x10].PatternStart = (int)start;  		if (col + i == 0x0f)  			row++;  	}  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Highlight,The following statement contains a magic number: switch (scrollMode) {  case ScrollMode.Sector:  	break;  case ScrollMode.Linear:  	GotoAddress (Math.Max (position - 5 * 0x10' 0));  	break;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Highlight,The following statement contains a magic number: GotoAddress (Math.Max (position - 5 * 0x10' 0));  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Search,The following statement contains a magic number: switch (searchType) {  #region  case SearchType.Hex:  	b = TextToByte (s);  	break;  case SearchType.Ansi:  	b = Encoding.Default.GetBytes (s);  	break;  case SearchType.Unicode:  	b = Encoding.Unicode.GetBytes (s);  	break;  case SearchType.Address:  	if (s.Length < 8) {  		int add = 8 - s.Length;  		for (int i = 0; i < add; i++)  			s = "0" + s;  	}  	b = TextToByte (s);  	break;  #endregion  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Search,The following statement contains a magic number: switch (searchType) {  #region  case SearchType.Hex:  	b = TextToByte (s);  	break;  case SearchType.Ansi:  	b = Encoding.Default.GetBytes (s);  	break;  case SearchType.Unicode:  	b = Encoding.Unicode.GetBytes (s);  	break;  case SearchType.Address:  	if (s.Length < 8) {  		int add = 8 - s.Length;  		for (int i = 0; i < add; i++)  			s = "0" + s;  	}  	b = TextToByte (s);  	break;  #endregion  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Search,The following statement contains a magic number: if (s.Length < 8) {  	int add = 8 - s.Length;  	for (int i = 0; i < add; i++)  		s = "0" + s;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Search,The following statement contains a magic number: if (s.Length < 8) {  	int add = 8 - s.Length;  	for (int i = 0; i < add; i++)  		s = "0" + s;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Search,The following statement contains a magic number: switch (searchType) {  case SearchType.Address:  	byte[] c = new byte[4];  	for (int i = 0; i < 4; i++)  		c [i] = b [3 - i];  	int ad = BitConverter.ToInt32 (c' 0);  	GotoAddress (ad);  	Refresh ();  	break;  default:  	#region Search intData  	if (searchType == SearchType.Binary) {  		BitStreamReader bs = new BitStreamReader (fileName' true);  		long bitposition = bs.FindBinaryPattern (s' searchStart);  		if (bitposition == -1)  			return bitposition;  		p = bitposition / 0x08;  		bs.Close ();  		int sh = (int)(bitposition % 0x08);  		bitPatterns.Add (s.Substring (0' Math.Min (s.Length' 9 - sh)));  		startPatterns.Add (sh - 1);  		s = s.Substring (Math.Min (s.Length' 9 - sh));  		while (s.Length > 0) {  			string u = "";  			if (s.Length > 8)  				u = s.Substring (0' 8);  			else  				u = s;  			bitPatterns.Add (u);  			startPatterns.Add (0);  			s = s.Substring (u.Length);  		}  		int bLength = 1;  		long l = sh + s.Length;  		if (l > 0x8) {  			bLength += 1;  		}  		b = new byte[bitPatterns.Count];  		searchStart = p + bLength;  	}  	else  		p = Search (b' searchStart);  	if (p > -1) {  		UnSelect ();  		GotoAddress (p);  		int row = (int)p / 0x10 - startLine;  		int col = (int)p % 0x10;  		selectedSubItem = new Point (row' col);  		for (int i = 0; i < b.Length; i++) {  			rows [row].SubItems [(col + i) % 0x10].Selected = true;  			if (searchType == SearchType.Binary) {  				rows [row].SubItems [(col + i) % 0x10].BinaryPattern = bitPatterns [i];  				rows [row].SubItems [(col + i) % 0x10].PatternStart = startPatterns [i];  			}  			if (col + i == 0x0f)  				row++;  		}  		searchStart = p;  		Refresh ();  	}  	#endregion  	break;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Search,The following statement contains a magic number: switch (searchType) {  case SearchType.Address:  	byte[] c = new byte[4];  	for (int i = 0; i < 4; i++)  		c [i] = b [3 - i];  	int ad = BitConverter.ToInt32 (c' 0);  	GotoAddress (ad);  	Refresh ();  	break;  default:  	#region Search intData  	if (searchType == SearchType.Binary) {  		BitStreamReader bs = new BitStreamReader (fileName' true);  		long bitposition = bs.FindBinaryPattern (s' searchStart);  		if (bitposition == -1)  			return bitposition;  		p = bitposition / 0x08;  		bs.Close ();  		int sh = (int)(bitposition % 0x08);  		bitPatterns.Add (s.Substring (0' Math.Min (s.Length' 9 - sh)));  		startPatterns.Add (sh - 1);  		s = s.Substring (Math.Min (s.Length' 9 - sh));  		while (s.Length > 0) {  			string u = "";  			if (s.Length > 8)  				u = s.Substring (0' 8);  			else  				u = s;  			bitPatterns.Add (u);  			startPatterns.Add (0);  			s = s.Substring (u.Length);  		}  		int bLength = 1;  		long l = sh + s.Length;  		if (l > 0x8) {  			bLength += 1;  		}  		b = new byte[bitPatterns.Count];  		searchStart = p + bLength;  	}  	else  		p = Search (b' searchStart);  	if (p > -1) {  		UnSelect ();  		GotoAddress (p);  		int row = (int)p / 0x10 - startLine;  		int col = (int)p % 0x10;  		selectedSubItem = new Point (row' col);  		for (int i = 0; i < b.Length; i++) {  			rows [row].SubItems [(col + i) % 0x10].Selected = true;  			if (searchType == SearchType.Binary) {  				rows [row].SubItems [(col + i) % 0x10].BinaryPattern = bitPatterns [i];  				rows [row].SubItems [(col + i) % 0x10].PatternStart = startPatterns [i];  			}  			if (col + i == 0x0f)  				row++;  		}  		searchStart = p;  		Refresh ();  	}  	#endregion  	break;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Search,The following statement contains a magic number: switch (searchType) {  case SearchType.Address:  	byte[] c = new byte[4];  	for (int i = 0; i < 4; i++)  		c [i] = b [3 - i];  	int ad = BitConverter.ToInt32 (c' 0);  	GotoAddress (ad);  	Refresh ();  	break;  default:  	#region Search intData  	if (searchType == SearchType.Binary) {  		BitStreamReader bs = new BitStreamReader (fileName' true);  		long bitposition = bs.FindBinaryPattern (s' searchStart);  		if (bitposition == -1)  			return bitposition;  		p = bitposition / 0x08;  		bs.Close ();  		int sh = (int)(bitposition % 0x08);  		bitPatterns.Add (s.Substring (0' Math.Min (s.Length' 9 - sh)));  		startPatterns.Add (sh - 1);  		s = s.Substring (Math.Min (s.Length' 9 - sh));  		while (s.Length > 0) {  			string u = "";  			if (s.Length > 8)  				u = s.Substring (0' 8);  			else  				u = s;  			bitPatterns.Add (u);  			startPatterns.Add (0);  			s = s.Substring (u.Length);  		}  		int bLength = 1;  		long l = sh + s.Length;  		if (l > 0x8) {  			bLength += 1;  		}  		b = new byte[bitPatterns.Count];  		searchStart = p + bLength;  	}  	else  		p = Search (b' searchStart);  	if (p > -1) {  		UnSelect ();  		GotoAddress (p);  		int row = (int)p / 0x10 - startLine;  		int col = (int)p % 0x10;  		selectedSubItem = new Point (row' col);  		for (int i = 0; i < b.Length; i++) {  			rows [row].SubItems [(col + i) % 0x10].Selected = true;  			if (searchType == SearchType.Binary) {  				rows [row].SubItems [(col + i) % 0x10].BinaryPattern = bitPatterns [i];  				rows [row].SubItems [(col + i) % 0x10].PatternStart = startPatterns [i];  			}  			if (col + i == 0x0f)  				row++;  		}  		searchStart = p;  		Refresh ();  	}  	#endregion  	break;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Search,The following statement contains a magic number: switch (searchType) {  case SearchType.Address:  	byte[] c = new byte[4];  	for (int i = 0; i < 4; i++)  		c [i] = b [3 - i];  	int ad = BitConverter.ToInt32 (c' 0);  	GotoAddress (ad);  	Refresh ();  	break;  default:  	#region Search intData  	if (searchType == SearchType.Binary) {  		BitStreamReader bs = new BitStreamReader (fileName' true);  		long bitposition = bs.FindBinaryPattern (s' searchStart);  		if (bitposition == -1)  			return bitposition;  		p = bitposition / 0x08;  		bs.Close ();  		int sh = (int)(bitposition % 0x08);  		bitPatterns.Add (s.Substring (0' Math.Min (s.Length' 9 - sh)));  		startPatterns.Add (sh - 1);  		s = s.Substring (Math.Min (s.Length' 9 - sh));  		while (s.Length > 0) {  			string u = "";  			if (s.Length > 8)  				u = s.Substring (0' 8);  			else  				u = s;  			bitPatterns.Add (u);  			startPatterns.Add (0);  			s = s.Substring (u.Length);  		}  		int bLength = 1;  		long l = sh + s.Length;  		if (l > 0x8) {  			bLength += 1;  		}  		b = new byte[bitPatterns.Count];  		searchStart = p + bLength;  	}  	else  		p = Search (b' searchStart);  	if (p > -1) {  		UnSelect ();  		GotoAddress (p);  		int row = (int)p / 0x10 - startLine;  		int col = (int)p % 0x10;  		selectedSubItem = new Point (row' col);  		for (int i = 0; i < b.Length; i++) {  			rows [row].SubItems [(col + i) % 0x10].Selected = true;  			if (searchType == SearchType.Binary) {  				rows [row].SubItems [(col + i) % 0x10].BinaryPattern = bitPatterns [i];  				rows [row].SubItems [(col + i) % 0x10].PatternStart = startPatterns [i];  			}  			if (col + i == 0x0f)  				row++;  		}  		searchStart = p;  		Refresh ();  	}  	#endregion  	break;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Search,The following statement contains a magic number: switch (searchType) {  case SearchType.Address:  	byte[] c = new byte[4];  	for (int i = 0; i < 4; i++)  		c [i] = b [3 - i];  	int ad = BitConverter.ToInt32 (c' 0);  	GotoAddress (ad);  	Refresh ();  	break;  default:  	#region Search intData  	if (searchType == SearchType.Binary) {  		BitStreamReader bs = new BitStreamReader (fileName' true);  		long bitposition = bs.FindBinaryPattern (s' searchStart);  		if (bitposition == -1)  			return bitposition;  		p = bitposition / 0x08;  		bs.Close ();  		int sh = (int)(bitposition % 0x08);  		bitPatterns.Add (s.Substring (0' Math.Min (s.Length' 9 - sh)));  		startPatterns.Add (sh - 1);  		s = s.Substring (Math.Min (s.Length' 9 - sh));  		while (s.Length > 0) {  			string u = "";  			if (s.Length > 8)  				u = s.Substring (0' 8);  			else  				u = s;  			bitPatterns.Add (u);  			startPatterns.Add (0);  			s = s.Substring (u.Length);  		}  		int bLength = 1;  		long l = sh + s.Length;  		if (l > 0x8) {  			bLength += 1;  		}  		b = new byte[bitPatterns.Count];  		searchStart = p + bLength;  	}  	else  		p = Search (b' searchStart);  	if (p > -1) {  		UnSelect ();  		GotoAddress (p);  		int row = (int)p / 0x10 - startLine;  		int col = (int)p % 0x10;  		selectedSubItem = new Point (row' col);  		for (int i = 0; i < b.Length; i++) {  			rows [row].SubItems [(col + i) % 0x10].Selected = true;  			if (searchType == SearchType.Binary) {  				rows [row].SubItems [(col + i) % 0x10].BinaryPattern = bitPatterns [i];  				rows [row].SubItems [(col + i) % 0x10].PatternStart = startPatterns [i];  			}  			if (col + i == 0x0f)  				row++;  		}  		searchStart = p;  		Refresh ();  	}  	#endregion  	break;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Search,The following statement contains a magic number: switch (searchType) {  case SearchType.Address:  	byte[] c = new byte[4];  	for (int i = 0; i < 4; i++)  		c [i] = b [3 - i];  	int ad = BitConverter.ToInt32 (c' 0);  	GotoAddress (ad);  	Refresh ();  	break;  default:  	#region Search intData  	if (searchType == SearchType.Binary) {  		BitStreamReader bs = new BitStreamReader (fileName' true);  		long bitposition = bs.FindBinaryPattern (s' searchStart);  		if (bitposition == -1)  			return bitposition;  		p = bitposition / 0x08;  		bs.Close ();  		int sh = (int)(bitposition % 0x08);  		bitPatterns.Add (s.Substring (0' Math.Min (s.Length' 9 - sh)));  		startPatterns.Add (sh - 1);  		s = s.Substring (Math.Min (s.Length' 9 - sh));  		while (s.Length > 0) {  			string u = "";  			if (s.Length > 8)  				u = s.Substring (0' 8);  			else  				u = s;  			bitPatterns.Add (u);  			startPatterns.Add (0);  			s = s.Substring (u.Length);  		}  		int bLength = 1;  		long l = sh + s.Length;  		if (l > 0x8) {  			bLength += 1;  		}  		b = new byte[bitPatterns.Count];  		searchStart = p + bLength;  	}  	else  		p = Search (b' searchStart);  	if (p > -1) {  		UnSelect ();  		GotoAddress (p);  		int row = (int)p / 0x10 - startLine;  		int col = (int)p % 0x10;  		selectedSubItem = new Point (row' col);  		for (int i = 0; i < b.Length; i++) {  			rows [row].SubItems [(col + i) % 0x10].Selected = true;  			if (searchType == SearchType.Binary) {  				rows [row].SubItems [(col + i) % 0x10].BinaryPattern = bitPatterns [i];  				rows [row].SubItems [(col + i) % 0x10].PatternStart = startPatterns [i];  			}  			if (col + i == 0x0f)  				row++;  		}  		searchStart = p;  		Refresh ();  	}  	#endregion  	break;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Search,The following statement contains a magic number: switch (searchType) {  case SearchType.Address:  	byte[] c = new byte[4];  	for (int i = 0; i < 4; i++)  		c [i] = b [3 - i];  	int ad = BitConverter.ToInt32 (c' 0);  	GotoAddress (ad);  	Refresh ();  	break;  default:  	#region Search intData  	if (searchType == SearchType.Binary) {  		BitStreamReader bs = new BitStreamReader (fileName' true);  		long bitposition = bs.FindBinaryPattern (s' searchStart);  		if (bitposition == -1)  			return bitposition;  		p = bitposition / 0x08;  		bs.Close ();  		int sh = (int)(bitposition % 0x08);  		bitPatterns.Add (s.Substring (0' Math.Min (s.Length' 9 - sh)));  		startPatterns.Add (sh - 1);  		s = s.Substring (Math.Min (s.Length' 9 - sh));  		while (s.Length > 0) {  			string u = "";  			if (s.Length > 8)  				u = s.Substring (0' 8);  			else  				u = s;  			bitPatterns.Add (u);  			startPatterns.Add (0);  			s = s.Substring (u.Length);  		}  		int bLength = 1;  		long l = sh + s.Length;  		if (l > 0x8) {  			bLength += 1;  		}  		b = new byte[bitPatterns.Count];  		searchStart = p + bLength;  	}  	else  		p = Search (b' searchStart);  	if (p > -1) {  		UnSelect ();  		GotoAddress (p);  		int row = (int)p / 0x10 - startLine;  		int col = (int)p % 0x10;  		selectedSubItem = new Point (row' col);  		for (int i = 0; i < b.Length; i++) {  			rows [row].SubItems [(col + i) % 0x10].Selected = true;  			if (searchType == SearchType.Binary) {  				rows [row].SubItems [(col + i) % 0x10].BinaryPattern = bitPatterns [i];  				rows [row].SubItems [(col + i) % 0x10].PatternStart = startPatterns [i];  			}  			if (col + i == 0x0f)  				row++;  		}  		searchStart = p;  		Refresh ();  	}  	#endregion  	break;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Search,The following statement contains a magic number: for (int i = 0; i < 4; i++)  	c [i] = b [3 - i];  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Search,The following statement contains a magic number: for (int i = 0; i < 4; i++)  	c [i] = b [3 - i];  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Search,The following statement contains a magic number: c [i] = b [3 - i];  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Search,The following statement contains a magic number: if (searchType == SearchType.Binary) {  	BitStreamReader bs = new BitStreamReader (fileName' true);  	long bitposition = bs.FindBinaryPattern (s' searchStart);  	if (bitposition == -1)  		return bitposition;  	p = bitposition / 0x08;  	bs.Close ();  	int sh = (int)(bitposition % 0x08);  	bitPatterns.Add (s.Substring (0' Math.Min (s.Length' 9 - sh)));  	startPatterns.Add (sh - 1);  	s = s.Substring (Math.Min (s.Length' 9 - sh));  	while (s.Length > 0) {  		string u = "";  		if (s.Length > 8)  			u = s.Substring (0' 8);  		else  			u = s;  		bitPatterns.Add (u);  		startPatterns.Add (0);  		s = s.Substring (u.Length);  	}  	int bLength = 1;  	long l = sh + s.Length;  	if (l > 0x8) {  		bLength += 1;  	}  	b = new byte[bitPatterns.Count];  	searchStart = p + bLength;  }  else  	p = Search (b' searchStart);  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Search,The following statement contains a magic number: if (searchType == SearchType.Binary) {  	BitStreamReader bs = new BitStreamReader (fileName' true);  	long bitposition = bs.FindBinaryPattern (s' searchStart);  	if (bitposition == -1)  		return bitposition;  	p = bitposition / 0x08;  	bs.Close ();  	int sh = (int)(bitposition % 0x08);  	bitPatterns.Add (s.Substring (0' Math.Min (s.Length' 9 - sh)));  	startPatterns.Add (sh - 1);  	s = s.Substring (Math.Min (s.Length' 9 - sh));  	while (s.Length > 0) {  		string u = "";  		if (s.Length > 8)  			u = s.Substring (0' 8);  		else  			u = s;  		bitPatterns.Add (u);  		startPatterns.Add (0);  		s = s.Substring (u.Length);  	}  	int bLength = 1;  	long l = sh + s.Length;  	if (l > 0x8) {  		bLength += 1;  	}  	b = new byte[bitPatterns.Count];  	searchStart = p + bLength;  }  else  	p = Search (b' searchStart);  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Search,The following statement contains a magic number: if (searchType == SearchType.Binary) {  	BitStreamReader bs = new BitStreamReader (fileName' true);  	long bitposition = bs.FindBinaryPattern (s' searchStart);  	if (bitposition == -1)  		return bitposition;  	p = bitposition / 0x08;  	bs.Close ();  	int sh = (int)(bitposition % 0x08);  	bitPatterns.Add (s.Substring (0' Math.Min (s.Length' 9 - sh)));  	startPatterns.Add (sh - 1);  	s = s.Substring (Math.Min (s.Length' 9 - sh));  	while (s.Length > 0) {  		string u = "";  		if (s.Length > 8)  			u = s.Substring (0' 8);  		else  			u = s;  		bitPatterns.Add (u);  		startPatterns.Add (0);  		s = s.Substring (u.Length);  	}  	int bLength = 1;  	long l = sh + s.Length;  	if (l > 0x8) {  		bLength += 1;  	}  	b = new byte[bitPatterns.Count];  	searchStart = p + bLength;  }  else  	p = Search (b' searchStart);  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Search,The following statement contains a magic number: if (searchType == SearchType.Binary) {  	BitStreamReader bs = new BitStreamReader (fileName' true);  	long bitposition = bs.FindBinaryPattern (s' searchStart);  	if (bitposition == -1)  		return bitposition;  	p = bitposition / 0x08;  	bs.Close ();  	int sh = (int)(bitposition % 0x08);  	bitPatterns.Add (s.Substring (0' Math.Min (s.Length' 9 - sh)));  	startPatterns.Add (sh - 1);  	s = s.Substring (Math.Min (s.Length' 9 - sh));  	while (s.Length > 0) {  		string u = "";  		if (s.Length > 8)  			u = s.Substring (0' 8);  		else  			u = s;  		bitPatterns.Add (u);  		startPatterns.Add (0);  		s = s.Substring (u.Length);  	}  	int bLength = 1;  	long l = sh + s.Length;  	if (l > 0x8) {  		bLength += 1;  	}  	b = new byte[bitPatterns.Count];  	searchStart = p + bLength;  }  else  	p = Search (b' searchStart);  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Search,The following statement contains a magic number: bitPatterns.Add (s.Substring (0' Math.Min (s.Length' 9 - sh)));  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Search,The following statement contains a magic number: s = s.Substring (Math.Min (s.Length' 9 - sh));  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Search,The following statement contains a magic number: while (s.Length > 0) {  	string u = "";  	if (s.Length > 8)  		u = s.Substring (0' 8);  	else  		u = s;  	bitPatterns.Add (u);  	startPatterns.Add (0);  	s = s.Substring (u.Length);  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Search,The following statement contains a magic number: while (s.Length > 0) {  	string u = "";  	if (s.Length > 8)  		u = s.Substring (0' 8);  	else  		u = s;  	bitPatterns.Add (u);  	startPatterns.Add (0);  	s = s.Substring (u.Length);  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Search,The following statement contains a magic number: if (s.Length > 8)  	u = s.Substring (0' 8);  else  	u = s;  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Search,The following statement contains a magic number: if (s.Length > 8)  	u = s.Substring (0' 8);  else  	u = s;  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Search,The following statement contains a magic number: u = s.Substring (0' 8);  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinaryView_MouseMove,The following statement contains a magic number: if ((sel.X != -1) & (sel.Y != -1)) {  	List<byte> b = new List<byte> ();  	int x = sel.X;  	if (x >= rows.Count)  		return;  	int y = sel.Y;  	for (int i = 0; i < 20; i++) {  		b.Add (rows [x].SubItems [y].Value);  		y++;  		if (y > 0xf) {  			y = 0;  			x++;  			if (x >= rows.Count)  				break;  		}  	}  	if (dataEvent != null)  		dataEvent (this.dataEvent' new DataEventArgs (b.ToArray ()));  	Refresh ();  	if ((e.Button == System.Windows.Forms.MouseButtons.Left) && (selectedSubItem != Point.Empty)) {  		rows [sel.X].SubItems [sel.Y].Selected = true;  		selectedSubItems.Add (sel);  		Refresh ();  	}  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinaryView_MouseMove,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	b.Add (rows [x].SubItems [y].Value);  	y++;  	if (y > 0xf) {  		y = 0;  		x++;  		if (x >= rows.Count)  			break;  	}  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_MouseWheel,The following statement contains a magic number: startLine -= e.Delta / 120;  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The following statement contains a magic number: if (!(showHex || showText)) {  	panelWidth = 50;  	return;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The following statement contains a magic number: panelWidth = 50;  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The following statement contains a magic number: e.Graphics.DrawString ("Start address"' headerFont' headerBrush' new PointF (3' 0));  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The following statement contains a magic number: lineHeight = (int)size.Height + 3;  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The following statement contains a magic number: switch (mode) {  case ViewMode.Hex:  	iToS = (1).ToString ("x2");  	break;  case ViewMode.Bit:  	iToS = Convert.ToString (255' 2);  	break;  case ViewMode.Octal:  	iToS = Convert.ToString (16' 8);  	break;  case ViewMode.Dec:  	iToS = (100).ToString ();  	break;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The following statement contains a magic number: switch (mode) {  case ViewMode.Hex:  	iToS = (1).ToString ("x2");  	break;  case ViewMode.Bit:  	iToS = Convert.ToString (255' 2);  	break;  case ViewMode.Octal:  	iToS = Convert.ToString (16' 8);  	break;  case ViewMode.Dec:  	iToS = (100).ToString ();  	break;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The following statement contains a magic number: switch (mode) {  case ViewMode.Hex:  	iToS = (1).ToString ("x2");  	break;  case ViewMode.Bit:  	iToS = Convert.ToString (255' 2);  	break;  case ViewMode.Octal:  	iToS = Convert.ToString (16' 8);  	break;  case ViewMode.Dec:  	iToS = (100).ToString ();  	break;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The following statement contains a magic number: switch (mode) {  case ViewMode.Hex:  	iToS = (1).ToString ("x2");  	break;  case ViewMode.Bit:  	iToS = Convert.ToString (255' 2);  	break;  case ViewMode.Octal:  	iToS = Convert.ToString (16' 8);  	break;  case ViewMode.Dec:  	iToS = (100).ToString ();  	break;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The following statement contains a magic number: switch (mode) {  case ViewMode.Hex:  	iToS = (1).ToString ("x2");  	break;  case ViewMode.Bit:  	iToS = Convert.ToString (255' 2);  	break;  case ViewMode.Octal:  	iToS = Convert.ToString (16' 8);  	break;  case ViewMode.Dec:  	iToS = (100).ToString ();  	break;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The following statement contains a magic number: iToS = Convert.ToString (255' 2);  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The following statement contains a magic number: iToS = Convert.ToString (255' 2);  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The following statement contains a magic number: iToS = Convert.ToString (16' 8);  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The following statement contains a magic number: iToS = Convert.ToString (16' 8);  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The following statement contains a magic number: iToS = (100).ToString ();  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The following statement contains a magic number: normalColumnWidth = (int)e.Graphics.MeasureString (iToS' headerFont).Width + 5;  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The following statement contains a magic number: if (showHex) {  	#region Show hex  	for (int i = startColumn; i < numberOfColumns; i++) {  		#region choose intData  		iToS = "";  		switch (mode) {  		case ViewMode.Hex:  			iToS = i.ToString ("x2");  			break;  		case ViewMode.Bit:  			iToS = Convert.ToString (i' 2);  			break;  		case ViewMode.Octal:  			iToS = Convert.ToString (i' 8);  			break;  		case ViewMode.Dec:  			iToS = i.ToString ();  			break;  		}  		#endregion  		e.Graphics.DrawString (iToS' headerFont' headerBrush' new PointF (left + 3' 0));  		left += normalColumnWidth;  	}  	left += 25;  	#endregion  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The following statement contains a magic number: if (showHex) {  	#region Show hex  	for (int i = startColumn; i < numberOfColumns; i++) {  		#region choose intData  		iToS = "";  		switch (mode) {  		case ViewMode.Hex:  			iToS = i.ToString ("x2");  			break;  		case ViewMode.Bit:  			iToS = Convert.ToString (i' 2);  			break;  		case ViewMode.Octal:  			iToS = Convert.ToString (i' 8);  			break;  		case ViewMode.Dec:  			iToS = i.ToString ();  			break;  		}  		#endregion  		e.Graphics.DrawString (iToS' headerFont' headerBrush' new PointF (left + 3' 0));  		left += normalColumnWidth;  	}  	left += 25;  	#endregion  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The following statement contains a magic number: if (showHex) {  	#region Show hex  	for (int i = startColumn; i < numberOfColumns; i++) {  		#region choose intData  		iToS = "";  		switch (mode) {  		case ViewMode.Hex:  			iToS = i.ToString ("x2");  			break;  		case ViewMode.Bit:  			iToS = Convert.ToString (i' 2);  			break;  		case ViewMode.Octal:  			iToS = Convert.ToString (i' 8);  			break;  		case ViewMode.Dec:  			iToS = i.ToString ();  			break;  		}  		#endregion  		e.Graphics.DrawString (iToS' headerFont' headerBrush' new PointF (left + 3' 0));  		left += normalColumnWidth;  	}  	left += 25;  	#endregion  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The following statement contains a magic number: if (showHex) {  	#region Show hex  	for (int i = startColumn; i < numberOfColumns; i++) {  		#region choose intData  		iToS = "";  		switch (mode) {  		case ViewMode.Hex:  			iToS = i.ToString ("x2");  			break;  		case ViewMode.Bit:  			iToS = Convert.ToString (i' 2);  			break;  		case ViewMode.Octal:  			iToS = Convert.ToString (i' 8);  			break;  		case ViewMode.Dec:  			iToS = i.ToString ();  			break;  		}  		#endregion  		e.Graphics.DrawString (iToS' headerFont' headerBrush' new PointF (left + 3' 0));  		left += normalColumnWidth;  	}  	left += 25;  	#endregion  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The following statement contains a magic number: for (int i = startColumn; i < numberOfColumns; i++) {  	#region choose intData  	iToS = "";  	switch (mode) {  	case ViewMode.Hex:  		iToS = i.ToString ("x2");  		break;  	case ViewMode.Bit:  		iToS = Convert.ToString (i' 2);  		break;  	case ViewMode.Octal:  		iToS = Convert.ToString (i' 8);  		break;  	case ViewMode.Dec:  		iToS = i.ToString ();  		break;  	}  	#endregion  	e.Graphics.DrawString (iToS' headerFont' headerBrush' new PointF (left + 3' 0));  	left += normalColumnWidth;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The following statement contains a magic number: for (int i = startColumn; i < numberOfColumns; i++) {  	#region choose intData  	iToS = "";  	switch (mode) {  	case ViewMode.Hex:  		iToS = i.ToString ("x2");  		break;  	case ViewMode.Bit:  		iToS = Convert.ToString (i' 2);  		break;  	case ViewMode.Octal:  		iToS = Convert.ToString (i' 8);  		break;  	case ViewMode.Dec:  		iToS = i.ToString ();  		break;  	}  	#endregion  	e.Graphics.DrawString (iToS' headerFont' headerBrush' new PointF (left + 3' 0));  	left += normalColumnWidth;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The following statement contains a magic number: for (int i = startColumn; i < numberOfColumns; i++) {  	#region choose intData  	iToS = "";  	switch (mode) {  	case ViewMode.Hex:  		iToS = i.ToString ("x2");  		break;  	case ViewMode.Bit:  		iToS = Convert.ToString (i' 2);  		break;  	case ViewMode.Octal:  		iToS = Convert.ToString (i' 8);  		break;  	case ViewMode.Dec:  		iToS = i.ToString ();  		break;  	}  	#endregion  	e.Graphics.DrawString (iToS' headerFont' headerBrush' new PointF (left + 3' 0));  	left += normalColumnWidth;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The following statement contains a magic number: switch (mode) {  case ViewMode.Hex:  	iToS = i.ToString ("x2");  	break;  case ViewMode.Bit:  	iToS = Convert.ToString (i' 2);  	break;  case ViewMode.Octal:  	iToS = Convert.ToString (i' 8);  	break;  case ViewMode.Dec:  	iToS = i.ToString ();  	break;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The following statement contains a magic number: switch (mode) {  case ViewMode.Hex:  	iToS = i.ToString ("x2");  	break;  case ViewMode.Bit:  	iToS = Convert.ToString (i' 2);  	break;  case ViewMode.Octal:  	iToS = Convert.ToString (i' 8);  	break;  case ViewMode.Dec:  	iToS = i.ToString ();  	break;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The following statement contains a magic number: iToS = Convert.ToString (i' 2);  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The following statement contains a magic number: iToS = Convert.ToString (i' 8);  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The following statement contains a magic number: e.Graphics.DrawString (iToS' headerFont' headerBrush' new PointF (left + 3' 0));  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The following statement contains a magic number: left += 25;  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The following statement contains a magic number: for (int i = 0; i < rows.Count; i++) {  	rows [i].DisplayRow (e.Graphics' top' 0' startColumn' firstColumnWidth' normalColumnWidth' lineHeight' lineFont' showHex' showText' mode);  	top += lineHeight;  	s += rows [i].s + Environment.NewLine;  	sbin += rows [i].sbin + Environment.NewLine;  	if (top > this.Bottom + 50)  		break;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The following statement contains a magic number: if (top > this.Bottom + 50)  	break;  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,FillRows,The following statement contains a magic number: if (buffer != null) {  	BitStreamReader ms = new BitStreamReader (buffer' false);  	int start = line * 16;  	ms.Position = start;  	while ((ms.Position < ms.Length) & (line < maxLine + startLine)) {  		byte[] b = ms.ReadBytes (16);  		rows.Add (new Row (line' b));  		line++;  	}  	ms.Close ();  }  else {  	FileStream FS = new FileStream (fileName' FileMode.Open' FileAccess.Read);  	vScrollBar1.Maximum = (int)FS.Length / 16;  	FS.Seek (startLine * 16' SeekOrigin.Begin);  	startAddress = FS.Position;  	byte[] localbuffer = new byte[16];  	FS.Read (localbuffer' 0' 16);  	rows.Add (new Row (line' localbuffer));  	line++;  	while ((FS.Position < FS.Length) && (line < maxLine + startLine)) {  		localbuffer = new byte[16];  		FS.Read (localbuffer' 0' 16);  		rows.Add (new Row (line' localbuffer));  		line++;  	}  	currentPosition = FS.Position;  	endAddress = FS.Position;  	FS.Close ();  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,FillRows,The following statement contains a magic number: if (buffer != null) {  	BitStreamReader ms = new BitStreamReader (buffer' false);  	int start = line * 16;  	ms.Position = start;  	while ((ms.Position < ms.Length) & (line < maxLine + startLine)) {  		byte[] b = ms.ReadBytes (16);  		rows.Add (new Row (line' b));  		line++;  	}  	ms.Close ();  }  else {  	FileStream FS = new FileStream (fileName' FileMode.Open' FileAccess.Read);  	vScrollBar1.Maximum = (int)FS.Length / 16;  	FS.Seek (startLine * 16' SeekOrigin.Begin);  	startAddress = FS.Position;  	byte[] localbuffer = new byte[16];  	FS.Read (localbuffer' 0' 16);  	rows.Add (new Row (line' localbuffer));  	line++;  	while ((FS.Position < FS.Length) && (line < maxLine + startLine)) {  		localbuffer = new byte[16];  		FS.Read (localbuffer' 0' 16);  		rows.Add (new Row (line' localbuffer));  		line++;  	}  	currentPosition = FS.Position;  	endAddress = FS.Position;  	FS.Close ();  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,FillRows,The following statement contains a magic number: if (buffer != null) {  	BitStreamReader ms = new BitStreamReader (buffer' false);  	int start = line * 16;  	ms.Position = start;  	while ((ms.Position < ms.Length) & (line < maxLine + startLine)) {  		byte[] b = ms.ReadBytes (16);  		rows.Add (new Row (line' b));  		line++;  	}  	ms.Close ();  }  else {  	FileStream FS = new FileStream (fileName' FileMode.Open' FileAccess.Read);  	vScrollBar1.Maximum = (int)FS.Length / 16;  	FS.Seek (startLine * 16' SeekOrigin.Begin);  	startAddress = FS.Position;  	byte[] localbuffer = new byte[16];  	FS.Read (localbuffer' 0' 16);  	rows.Add (new Row (line' localbuffer));  	line++;  	while ((FS.Position < FS.Length) && (line < maxLine + startLine)) {  		localbuffer = new byte[16];  		FS.Read (localbuffer' 0' 16);  		rows.Add (new Row (line' localbuffer));  		line++;  	}  	currentPosition = FS.Position;  	endAddress = FS.Position;  	FS.Close ();  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,FillRows,The following statement contains a magic number: if (buffer != null) {  	BitStreamReader ms = new BitStreamReader (buffer' false);  	int start = line * 16;  	ms.Position = start;  	while ((ms.Position < ms.Length) & (line < maxLine + startLine)) {  		byte[] b = ms.ReadBytes (16);  		rows.Add (new Row (line' b));  		line++;  	}  	ms.Close ();  }  else {  	FileStream FS = new FileStream (fileName' FileMode.Open' FileAccess.Read);  	vScrollBar1.Maximum = (int)FS.Length / 16;  	FS.Seek (startLine * 16' SeekOrigin.Begin);  	startAddress = FS.Position;  	byte[] localbuffer = new byte[16];  	FS.Read (localbuffer' 0' 16);  	rows.Add (new Row (line' localbuffer));  	line++;  	while ((FS.Position < FS.Length) && (line < maxLine + startLine)) {  		localbuffer = new byte[16];  		FS.Read (localbuffer' 0' 16);  		rows.Add (new Row (line' localbuffer));  		line++;  	}  	currentPosition = FS.Position;  	endAddress = FS.Position;  	FS.Close ();  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,FillRows,The following statement contains a magic number: if (buffer != null) {  	BitStreamReader ms = new BitStreamReader (buffer' false);  	int start = line * 16;  	ms.Position = start;  	while ((ms.Position < ms.Length) & (line < maxLine + startLine)) {  		byte[] b = ms.ReadBytes (16);  		rows.Add (new Row (line' b));  		line++;  	}  	ms.Close ();  }  else {  	FileStream FS = new FileStream (fileName' FileMode.Open' FileAccess.Read);  	vScrollBar1.Maximum = (int)FS.Length / 16;  	FS.Seek (startLine * 16' SeekOrigin.Begin);  	startAddress = FS.Position;  	byte[] localbuffer = new byte[16];  	FS.Read (localbuffer' 0' 16);  	rows.Add (new Row (line' localbuffer));  	line++;  	while ((FS.Position < FS.Length) && (line < maxLine + startLine)) {  		localbuffer = new byte[16];  		FS.Read (localbuffer' 0' 16);  		rows.Add (new Row (line' localbuffer));  		line++;  	}  	currentPosition = FS.Position;  	endAddress = FS.Position;  	FS.Close ();  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,FillRows,The following statement contains a magic number: if (buffer != null) {  	BitStreamReader ms = new BitStreamReader (buffer' false);  	int start = line * 16;  	ms.Position = start;  	while ((ms.Position < ms.Length) & (line < maxLine + startLine)) {  		byte[] b = ms.ReadBytes (16);  		rows.Add (new Row (line' b));  		line++;  	}  	ms.Close ();  }  else {  	FileStream FS = new FileStream (fileName' FileMode.Open' FileAccess.Read);  	vScrollBar1.Maximum = (int)FS.Length / 16;  	FS.Seek (startLine * 16' SeekOrigin.Begin);  	startAddress = FS.Position;  	byte[] localbuffer = new byte[16];  	FS.Read (localbuffer' 0' 16);  	rows.Add (new Row (line' localbuffer));  	line++;  	while ((FS.Position < FS.Length) && (line < maxLine + startLine)) {  		localbuffer = new byte[16];  		FS.Read (localbuffer' 0' 16);  		rows.Add (new Row (line' localbuffer));  		line++;  	}  	currentPosition = FS.Position;  	endAddress = FS.Position;  	FS.Close ();  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,FillRows,The following statement contains a magic number: if (buffer != null) {  	BitStreamReader ms = new BitStreamReader (buffer' false);  	int start = line * 16;  	ms.Position = start;  	while ((ms.Position < ms.Length) & (line < maxLine + startLine)) {  		byte[] b = ms.ReadBytes (16);  		rows.Add (new Row (line' b));  		line++;  	}  	ms.Close ();  }  else {  	FileStream FS = new FileStream (fileName' FileMode.Open' FileAccess.Read);  	vScrollBar1.Maximum = (int)FS.Length / 16;  	FS.Seek (startLine * 16' SeekOrigin.Begin);  	startAddress = FS.Position;  	byte[] localbuffer = new byte[16];  	FS.Read (localbuffer' 0' 16);  	rows.Add (new Row (line' localbuffer));  	line++;  	while ((FS.Position < FS.Length) && (line < maxLine + startLine)) {  		localbuffer = new byte[16];  		FS.Read (localbuffer' 0' 16);  		rows.Add (new Row (line' localbuffer));  		line++;  	}  	currentPosition = FS.Position;  	endAddress = FS.Position;  	FS.Close ();  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,FillRows,The following statement contains a magic number: if (buffer != null) {  	BitStreamReader ms = new BitStreamReader (buffer' false);  	int start = line * 16;  	ms.Position = start;  	while ((ms.Position < ms.Length) & (line < maxLine + startLine)) {  		byte[] b = ms.ReadBytes (16);  		rows.Add (new Row (line' b));  		line++;  	}  	ms.Close ();  }  else {  	FileStream FS = new FileStream (fileName' FileMode.Open' FileAccess.Read);  	vScrollBar1.Maximum = (int)FS.Length / 16;  	FS.Seek (startLine * 16' SeekOrigin.Begin);  	startAddress = FS.Position;  	byte[] localbuffer = new byte[16];  	FS.Read (localbuffer' 0' 16);  	rows.Add (new Row (line' localbuffer));  	line++;  	while ((FS.Position < FS.Length) && (line < maxLine + startLine)) {  		localbuffer = new byte[16];  		FS.Read (localbuffer' 0' 16);  		rows.Add (new Row (line' localbuffer));  		line++;  	}  	currentPosition = FS.Position;  	endAddress = FS.Position;  	FS.Close ();  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,FillRows,The following statement contains a magic number: while ((ms.Position < ms.Length) & (line < maxLine + startLine)) {  	byte[] b = ms.ReadBytes (16);  	rows.Add (new Row (line' b));  	line++;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,FillRows,The following statement contains a magic number: vScrollBar1.Maximum = (int)FS.Length / 16;  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,FillRows,The following statement contains a magic number: FS.Seek (startLine * 16' SeekOrigin.Begin);  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,FillRows,The following statement contains a magic number: FS.Read (localbuffer' 0' 16);  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,FillRows,The following statement contains a magic number: while ((FS.Position < FS.Length) && (line < maxLine + startLine)) {  	localbuffer = new byte[16];  	FS.Read (localbuffer' 0' 16);  	rows.Add (new Row (line' localbuffer));  	line++;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,FillRows,The following statement contains a magic number: while ((FS.Position < FS.Length) && (line < maxLine + startLine)) {  	localbuffer = new byte[16];  	FS.Read (localbuffer' 0' 16);  	rows.Add (new Row (line' localbuffer));  	line++;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,FillRows,The following statement contains a magic number: localbuffer = new byte[16];  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,FillRows,The following statement contains a magic number: FS.Read (localbuffer' 0' 16);  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,TextToByte,The following statement contains a magic number: if ((number.Length % 2) != 0)  	return null;  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,TextToByte,The following statement contains a magic number: while (i < number.Length) {  	byte o;  	string numb = number.Substring (i' 2);  	if (!byte.TryParse (numb' styles' null as IFormatProvider' out o))  		return null;  	else  		ou [i / 2] = o;  	i += 2;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,TextToByte,The following statement contains a magic number: while (i < number.Length) {  	byte o;  	string numb = number.Substring (i' 2);  	if (!byte.TryParse (numb' styles' null as IFormatProvider' out o))  		return null;  	else  		ou [i / 2] = o;  	i += 2;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,TextToByte,The following statement contains a magic number: while (i < number.Length) {  	byte o;  	string numb = number.Substring (i' 2);  	if (!byte.TryParse (numb' styles' null as IFormatProvider' out o))  		return null;  	else  		ou [i / 2] = o;  	i += 2;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,TextToByte,The following statement contains a magic number: if (!byte.TryParse (numb' styles' null as IFormatProvider' out o))  	return null;  else  	ou [i / 2] = o;  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,TextToByte,The following statement contains a magic number: ou [i / 2] = o;  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,TextToByte,The following statement contains a magic number: i += 2;  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,TextToBinary,The following statement contains a magic number: if ((number.Length % 8) != 0)  	return null;  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,TextToBinary,The following statement contains a magic number: while (i < number.Length) {  	int o = 0;  	for (int j = 0; j < 8; j++) {  		if ((number [i + j] != '0') & (number [i + j] != '1'))  			return null;  		o = o * 2 + int.Parse (number [i + j].ToString ());  	}  	ou [i / 8] = (byte)o;  	i += 8;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,TextToBinary,The following statement contains a magic number: while (i < number.Length) {  	int o = 0;  	for (int j = 0; j < 8; j++) {  		if ((number [i + j] != '0') & (number [i + j] != '1'))  			return null;  		o = o * 2 + int.Parse (number [i + j].ToString ());  	}  	ou [i / 8] = (byte)o;  	i += 8;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,TextToBinary,The following statement contains a magic number: while (i < number.Length) {  	int o = 0;  	for (int j = 0; j < 8; j++) {  		if ((number [i + j] != '0') & (number [i + j] != '1'))  			return null;  		o = o * 2 + int.Parse (number [i + j].ToString ());  	}  	ou [i / 8] = (byte)o;  	i += 8;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,TextToBinary,The following statement contains a magic number: while (i < number.Length) {  	int o = 0;  	for (int j = 0; j < 8; j++) {  		if ((number [i + j] != '0') & (number [i + j] != '1'))  			return null;  		o = o * 2 + int.Parse (number [i + j].ToString ());  	}  	ou [i / 8] = (byte)o;  	i += 8;  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,TextToBinary,The following statement contains a magic number: for (int j = 0; j < 8; j++) {  	if ((number [i + j] != '0') & (number [i + j] != '1'))  		return null;  	o = o * 2 + int.Parse (number [i + j].ToString ());  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,TextToBinary,The following statement contains a magic number: for (int j = 0; j < 8; j++) {  	if ((number [i + j] != '0') & (number [i + j] != '1'))  		return null;  	o = o * 2 + int.Parse (number [i + j].ToString ());  }  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,TextToBinary,The following statement contains a magic number: o = o * 2 + int.Parse (number [i + j].ToString ());  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,TextToBinary,The following statement contains a magic number: ou [i / 8] = (byte)o;  
Magic Number,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,TextToBinary,The following statement contains a magic number: i += 8;  
Magic Number,BinaryViewer,Row,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,DisplayRow,The following statement contains a magic number: g.DrawString ((lineNumber * 0x10).ToString ("x8")' lineFont' Brushes.Black' new PointF (3' top));  
Magic Number,BinaryViewer,Row,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,DisplayRow,The following statement contains a magic number: if (showHex) {  	for (int i = startColumn; i < lineData.Length; i++) {  		subItems [i].Draw (g' new Rectangle (dataLeft - 2' top' normalColumnWidth' lineHeight)' i' lineFont' true' mode);  		dataLeft += dataWidth;  	}  	dataLeft += 25;  }  
Magic Number,BinaryViewer,Row,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,DisplayRow,The following statement contains a magic number: if (showHex) {  	for (int i = startColumn; i < lineData.Length; i++) {  		subItems [i].Draw (g' new Rectangle (dataLeft - 2' top' normalColumnWidth' lineHeight)' i' lineFont' true' mode);  		dataLeft += dataWidth;  	}  	dataLeft += 25;  }  
Magic Number,BinaryViewer,Row,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,DisplayRow,The following statement contains a magic number: for (int i = startColumn; i < lineData.Length; i++) {  	subItems [i].Draw (g' new Rectangle (dataLeft - 2' top' normalColumnWidth' lineHeight)' i' lineFont' true' mode);  	dataLeft += dataWidth;  }  
Magic Number,BinaryViewer,Row,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,DisplayRow,The following statement contains a magic number: subItems [i].Draw (g' new Rectangle (dataLeft - 2' top' normalColumnWidth' lineHeight)' i' lineFont' true' mode);  
Magic Number,BinaryViewer,Row,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,DisplayRow,The following statement contains a magic number: dataLeft += 25;  
Magic Number,BinaryViewer,Row,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,DisplayRow,The following statement contains a magic number: if (showText) {  	for (int i = 0; i < lineData.Length; i++) {  		subItems [i].Draw (g' new Rectangle (dataLeft - 2' top' normalColumnWidth' lineHeight)' i' lineFont' false' mode);  		dataLeft += dataWidth;  		s += subItems [i].Value.ToString ("x2") + " ";  		sbin += subItems [i].ToString ();  	}  }  
Magic Number,BinaryViewer,Row,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,DisplayRow,The following statement contains a magic number: for (int i = 0; i < lineData.Length; i++) {  	subItems [i].Draw (g' new Rectangle (dataLeft - 2' top' normalColumnWidth' lineHeight)' i' lineFont' false' mode);  	dataLeft += dataWidth;  	s += subItems [i].Value.ToString ("x2") + " ";  	sbin += subItems [i].ToString ();  }  
Magic Number,BinaryViewer,Row,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,DisplayRow,The following statement contains a magic number: subItems [i].Draw (g' new Rectangle (dataLeft - 2' top' normalColumnWidth' lineHeight)' i' lineFont' false' mode);  
Magic Number,BinaryViewer,SubItem,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Draw,The following statement contains a magic number: if (i % 2 == 0)  	g.FillRectangle (brush' rect);  
Magic Number,BinaryViewer,SubItem,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Draw,The following statement contains a magic number: if (hex)  	switch (mode) {  	case ViewMode.Hex:  		a = data.ToString ("x2");  		break;  	case ViewMode.Bit:  		a = Convert.ToString (data' 2);  		if (a.Length < 8) {  			int k = 8 - a.Length;  			for (int u = 0; u <= k; u++)  				a = "0" + a;  		}  		break;  	case ViewMode.Octal:  		a = Convert.ToString (data' 8);  		if (a.Length < 2)  			for (int u = 0; u <= 2 - a.Length; u++)  				a = "0" + a;  		break;  	case ViewMode.Dec:  		a = data.ToString ();  		if (a.Length < 3)  			for (int u = 0; u <= 3 - a.Length; u++)  				a = " " + a;  		break;  	}  
Magic Number,BinaryViewer,SubItem,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Draw,The following statement contains a magic number: if (hex)  	switch (mode) {  	case ViewMode.Hex:  		a = data.ToString ("x2");  		break;  	case ViewMode.Bit:  		a = Convert.ToString (data' 2);  		if (a.Length < 8) {  			int k = 8 - a.Length;  			for (int u = 0; u <= k; u++)  				a = "0" + a;  		}  		break;  	case ViewMode.Octal:  		a = Convert.ToString (data' 8);  		if (a.Length < 2)  			for (int u = 0; u <= 2 - a.Length; u++)  				a = "0" + a;  		break;  	case ViewMode.Dec:  		a = data.ToString ();  		if (a.Length < 3)  			for (int u = 0; u <= 3 - a.Length; u++)  				a = " " + a;  		break;  	}  
Magic Number,BinaryViewer,SubItem,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Draw,The following statement contains a magic number: if (hex)  	switch (mode) {  	case ViewMode.Hex:  		a = data.ToString ("x2");  		break;  	case ViewMode.Bit:  		a = Convert.ToString (data' 2);  		if (a.Length < 8) {  			int k = 8 - a.Length;  			for (int u = 0; u <= k; u++)  				a = "0" + a;  		}  		break;  	case ViewMode.Octal:  		a = Convert.ToString (data' 8);  		if (a.Length < 2)  			for (int u = 0; u <= 2 - a.Length; u++)  				a = "0" + a;  		break;  	case ViewMode.Dec:  		a = data.ToString ();  		if (a.Length < 3)  			for (int u = 0; u <= 3 - a.Length; u++)  				a = " " + a;  		break;  	}  
Magic Number,BinaryViewer,SubItem,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Draw,The following statement contains a magic number: if (hex)  	switch (mode) {  	case ViewMode.Hex:  		a = data.ToString ("x2");  		break;  	case ViewMode.Bit:  		a = Convert.ToString (data' 2);  		if (a.Length < 8) {  			int k = 8 - a.Length;  			for (int u = 0; u <= k; u++)  				a = "0" + a;  		}  		break;  	case ViewMode.Octal:  		a = Convert.ToString (data' 8);  		if (a.Length < 2)  			for (int u = 0; u <= 2 - a.Length; u++)  				a = "0" + a;  		break;  	case ViewMode.Dec:  		a = data.ToString ();  		if (a.Length < 3)  			for (int u = 0; u <= 3 - a.Length; u++)  				a = " " + a;  		break;  	}  
Magic Number,BinaryViewer,SubItem,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Draw,The following statement contains a magic number: if (hex)  	switch (mode) {  	case ViewMode.Hex:  		a = data.ToString ("x2");  		break;  	case ViewMode.Bit:  		a = Convert.ToString (data' 2);  		if (a.Length < 8) {  			int k = 8 - a.Length;  			for (int u = 0; u <= k; u++)  				a = "0" + a;  		}  		break;  	case ViewMode.Octal:  		a = Convert.ToString (data' 8);  		if (a.Length < 2)  			for (int u = 0; u <= 2 - a.Length; u++)  				a = "0" + a;  		break;  	case ViewMode.Dec:  		a = data.ToString ();  		if (a.Length < 3)  			for (int u = 0; u <= 3 - a.Length; u++)  				a = " " + a;  		break;  	}  
Magic Number,BinaryViewer,SubItem,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Draw,The following statement contains a magic number: if (hex)  	switch (mode) {  	case ViewMode.Hex:  		a = data.ToString ("x2");  		break;  	case ViewMode.Bit:  		a = Convert.ToString (data' 2);  		if (a.Length < 8) {  			int k = 8 - a.Length;  			for (int u = 0; u <= k; u++)  				a = "0" + a;  		}  		break;  	case ViewMode.Octal:  		a = Convert.ToString (data' 8);  		if (a.Length < 2)  			for (int u = 0; u <= 2 - a.Length; u++)  				a = "0" + a;  		break;  	case ViewMode.Dec:  		a = data.ToString ();  		if (a.Length < 3)  			for (int u = 0; u <= 3 - a.Length; u++)  				a = " " + a;  		break;  	}  
Magic Number,BinaryViewer,SubItem,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Draw,The following statement contains a magic number: if (hex)  	switch (mode) {  	case ViewMode.Hex:  		a = data.ToString ("x2");  		break;  	case ViewMode.Bit:  		a = Convert.ToString (data' 2);  		if (a.Length < 8) {  			int k = 8 - a.Length;  			for (int u = 0; u <= k; u++)  				a = "0" + a;  		}  		break;  	case ViewMode.Octal:  		a = Convert.ToString (data' 8);  		if (a.Length < 2)  			for (int u = 0; u <= 2 - a.Length; u++)  				a = "0" + a;  		break;  	case ViewMode.Dec:  		a = data.ToString ();  		if (a.Length < 3)  			for (int u = 0; u <= 3 - a.Length; u++)  				a = " " + a;  		break;  	}  
Magic Number,BinaryViewer,SubItem,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Draw,The following statement contains a magic number: if (hex)  	switch (mode) {  	case ViewMode.Hex:  		a = data.ToString ("x2");  		break;  	case ViewMode.Bit:  		a = Convert.ToString (data' 2);  		if (a.Length < 8) {  			int k = 8 - a.Length;  			for (int u = 0; u <= k; u++)  				a = "0" + a;  		}  		break;  	case ViewMode.Octal:  		a = Convert.ToString (data' 8);  		if (a.Length < 2)  			for (int u = 0; u <= 2 - a.Length; u++)  				a = "0" + a;  		break;  	case ViewMode.Dec:  		a = data.ToString ();  		if (a.Length < 3)  			for (int u = 0; u <= 3 - a.Length; u++)  				a = " " + a;  		break;  	}  
Magic Number,BinaryViewer,SubItem,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Draw,The following statement contains a magic number: switch (mode) {  case ViewMode.Hex:  	a = data.ToString ("x2");  	break;  case ViewMode.Bit:  	a = Convert.ToString (data' 2);  	if (a.Length < 8) {  		int k = 8 - a.Length;  		for (int u = 0; u <= k; u++)  			a = "0" + a;  	}  	break;  case ViewMode.Octal:  	a = Convert.ToString (data' 8);  	if (a.Length < 2)  		for (int u = 0; u <= 2 - a.Length; u++)  			a = "0" + a;  	break;  case ViewMode.Dec:  	a = data.ToString ();  	if (a.Length < 3)  		for (int u = 0; u <= 3 - a.Length; u++)  			a = " " + a;  	break;  }  
Magic Number,BinaryViewer,SubItem,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Draw,The following statement contains a magic number: switch (mode) {  case ViewMode.Hex:  	a = data.ToString ("x2");  	break;  case ViewMode.Bit:  	a = Convert.ToString (data' 2);  	if (a.Length < 8) {  		int k = 8 - a.Length;  		for (int u = 0; u <= k; u++)  			a = "0" + a;  	}  	break;  case ViewMode.Octal:  	a = Convert.ToString (data' 8);  	if (a.Length < 2)  		for (int u = 0; u <= 2 - a.Length; u++)  			a = "0" + a;  	break;  case ViewMode.Dec:  	a = data.ToString ();  	if (a.Length < 3)  		for (int u = 0; u <= 3 - a.Length; u++)  			a = " " + a;  	break;  }  
Magic Number,BinaryViewer,SubItem,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Draw,The following statement contains a magic number: switch (mode) {  case ViewMode.Hex:  	a = data.ToString ("x2");  	break;  case ViewMode.Bit:  	a = Convert.ToString (data' 2);  	if (a.Length < 8) {  		int k = 8 - a.Length;  		for (int u = 0; u <= k; u++)  			a = "0" + a;  	}  	break;  case ViewMode.Octal:  	a = Convert.ToString (data' 8);  	if (a.Length < 2)  		for (int u = 0; u <= 2 - a.Length; u++)  			a = "0" + a;  	break;  case ViewMode.Dec:  	a = data.ToString ();  	if (a.Length < 3)  		for (int u = 0; u <= 3 - a.Length; u++)  			a = " " + a;  	break;  }  
Magic Number,BinaryViewer,SubItem,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Draw,The following statement contains a magic number: switch (mode) {  case ViewMode.Hex:  	a = data.ToString ("x2");  	break;  case ViewMode.Bit:  	a = Convert.ToString (data' 2);  	if (a.Length < 8) {  		int k = 8 - a.Length;  		for (int u = 0; u <= k; u++)  			a = "0" + a;  	}  	break;  case ViewMode.Octal:  	a = Convert.ToString (data' 8);  	if (a.Length < 2)  		for (int u = 0; u <= 2 - a.Length; u++)  			a = "0" + a;  	break;  case ViewMode.Dec:  	a = data.ToString ();  	if (a.Length < 3)  		for (int u = 0; u <= 3 - a.Length; u++)  			a = " " + a;  	break;  }  
Magic Number,BinaryViewer,SubItem,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Draw,The following statement contains a magic number: switch (mode) {  case ViewMode.Hex:  	a = data.ToString ("x2");  	break;  case ViewMode.Bit:  	a = Convert.ToString (data' 2);  	if (a.Length < 8) {  		int k = 8 - a.Length;  		for (int u = 0; u <= k; u++)  			a = "0" + a;  	}  	break;  case ViewMode.Octal:  	a = Convert.ToString (data' 8);  	if (a.Length < 2)  		for (int u = 0; u <= 2 - a.Length; u++)  			a = "0" + a;  	break;  case ViewMode.Dec:  	a = data.ToString ();  	if (a.Length < 3)  		for (int u = 0; u <= 3 - a.Length; u++)  			a = " " + a;  	break;  }  
Magic Number,BinaryViewer,SubItem,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Draw,The following statement contains a magic number: switch (mode) {  case ViewMode.Hex:  	a = data.ToString ("x2");  	break;  case ViewMode.Bit:  	a = Convert.ToString (data' 2);  	if (a.Length < 8) {  		int k = 8 - a.Length;  		for (int u = 0; u <= k; u++)  			a = "0" + a;  	}  	break;  case ViewMode.Octal:  	a = Convert.ToString (data' 8);  	if (a.Length < 2)  		for (int u = 0; u <= 2 - a.Length; u++)  			a = "0" + a;  	break;  case ViewMode.Dec:  	a = data.ToString ();  	if (a.Length < 3)  		for (int u = 0; u <= 3 - a.Length; u++)  			a = " " + a;  	break;  }  
Magic Number,BinaryViewer,SubItem,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Draw,The following statement contains a magic number: switch (mode) {  case ViewMode.Hex:  	a = data.ToString ("x2");  	break;  case ViewMode.Bit:  	a = Convert.ToString (data' 2);  	if (a.Length < 8) {  		int k = 8 - a.Length;  		for (int u = 0; u <= k; u++)  			a = "0" + a;  	}  	break;  case ViewMode.Octal:  	a = Convert.ToString (data' 8);  	if (a.Length < 2)  		for (int u = 0; u <= 2 - a.Length; u++)  			a = "0" + a;  	break;  case ViewMode.Dec:  	a = data.ToString ();  	if (a.Length < 3)  		for (int u = 0; u <= 3 - a.Length; u++)  			a = " " + a;  	break;  }  
Magic Number,BinaryViewer,SubItem,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Draw,The following statement contains a magic number: switch (mode) {  case ViewMode.Hex:  	a = data.ToString ("x2");  	break;  case ViewMode.Bit:  	a = Convert.ToString (data' 2);  	if (a.Length < 8) {  		int k = 8 - a.Length;  		for (int u = 0; u <= k; u++)  			a = "0" + a;  	}  	break;  case ViewMode.Octal:  	a = Convert.ToString (data' 8);  	if (a.Length < 2)  		for (int u = 0; u <= 2 - a.Length; u++)  			a = "0" + a;  	break;  case ViewMode.Dec:  	a = data.ToString ();  	if (a.Length < 3)  		for (int u = 0; u <= 3 - a.Length; u++)  			a = " " + a;  	break;  }  
Magic Number,BinaryViewer,SubItem,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Draw,The following statement contains a magic number: a = Convert.ToString (data' 2);  
Magic Number,BinaryViewer,SubItem,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Draw,The following statement contains a magic number: if (a.Length < 8) {  	int k = 8 - a.Length;  	for (int u = 0; u <= k; u++)  		a = "0" + a;  }  
Magic Number,BinaryViewer,SubItem,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Draw,The following statement contains a magic number: if (a.Length < 8) {  	int k = 8 - a.Length;  	for (int u = 0; u <= k; u++)  		a = "0" + a;  }  
Magic Number,BinaryViewer,SubItem,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Draw,The following statement contains a magic number: a = Convert.ToString (data' 8);  
Magic Number,BinaryViewer,SubItem,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Draw,The following statement contains a magic number: if (a.Length < 2)  	for (int u = 0; u <= 2 - a.Length; u++)  		a = "0" + a;  
Magic Number,BinaryViewer,SubItem,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Draw,The following statement contains a magic number: if (a.Length < 2)  	for (int u = 0; u <= 2 - a.Length; u++)  		a = "0" + a;  
Magic Number,BinaryViewer,SubItem,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Draw,The following statement contains a magic number: for (int u = 0; u <= 2 - a.Length; u++)  	a = "0" + a;  
Magic Number,BinaryViewer,SubItem,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Draw,The following statement contains a magic number: if (a.Length < 3)  	for (int u = 0; u <= 3 - a.Length; u++)  		a = " " + a;  
Magic Number,BinaryViewer,SubItem,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Draw,The following statement contains a magic number: if (a.Length < 3)  	for (int u = 0; u <= 3 - a.Length; u++)  		a = " " + a;  
Magic Number,BinaryViewer,SubItem,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Draw,The following statement contains a magic number: for (int u = 0; u <= 3 - a.Length; u++)  	a = " " + a;  
Missing Default,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Init,The following switch statement is missing a default case: switch (scrollMode) {  case ScrollMode.Sector:  	vScrollBar1.Value = (int)(offset / 0x200 * reduc);  	break;  case ScrollMode.Linear:  	break;  }  
Missing Default,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,SetMode,The following switch statement is missing a default case: switch (mode) {  case ViewMode.Hex:  	viewingMode = 0x10;  	break;  case ViewMode.Bit:  	viewingMode = 2;  	break;  case ViewMode.Dec:  	viewingMode = 0xa;  	break;  }  
Missing Default,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Highlight,The following switch statement is missing a default case: switch (scrollMode) {  case ScrollMode.Sector:  	break;  case ScrollMode.Linear:  	GotoAddress (Math.Max (position - 5 * 0x10' 0));  	break;  }  
Missing Default,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Search,The following switch statement is missing a default case: switch (searchType) {  #region  case SearchType.Hex:  	b = TextToByte (s);  	break;  case SearchType.Ansi:  	b = Encoding.Default.GetBytes (s);  	break;  case SearchType.Unicode:  	b = Encoding.Unicode.GetBytes (s);  	break;  case SearchType.Address:  	if (s.Length < 8) {  		int add = 8 - s.Length;  		for (int i = 0; i < add; i++)  			s = "0" + s;  	}  	b = TextToByte (s);  	break;  #endregion  }  
Missing Default,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The following switch statement is missing a default case: switch (mode) {  case ViewMode.Hex:  	iToS = (1).ToString ("x2");  	break;  case ViewMode.Bit:  	iToS = Convert.ToString (255' 2);  	break;  case ViewMode.Octal:  	iToS = Convert.ToString (16' 8);  	break;  case ViewMode.Dec:  	iToS = (100).ToString ();  	break;  }  
Missing Default,BinaryViewer,BinaryView,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,BinView_Paint,The following switch statement is missing a default case: switch (mode) {  case ViewMode.Hex:  	iToS = i.ToString ("x2");  	break;  case ViewMode.Bit:  	iToS = Convert.ToString (i' 2);  	break;  case ViewMode.Octal:  	iToS = Convert.ToString (i' 8);  	break;  case ViewMode.Dec:  	iToS = i.ToString ();  	break;  }  
Missing Default,BinaryViewer,SubItem,C:\repos\mbatest_Binhed\BinaryViewer\BinaryView.cs,Draw,The following switch statement is missing a default case: switch (mode) {  case ViewMode.Hex:  	a = data.ToString ("x2");  	break;  case ViewMode.Bit:  	a = Convert.ToString (data' 2);  	if (a.Length < 8) {  		int k = 8 - a.Length;  		for (int u = 0; u <= k; u++)  			a = "0" + a;  	}  	break;  case ViewMode.Octal:  	a = Convert.ToString (data' 8);  	if (a.Length < 2)  		for (int u = 0; u <= 2 - a.Length; u++)  			a = "0" + a;  	break;  case ViewMode.Dec:  	a = data.ToString ();  	if (a.Length < 3)  		for (int u = 0; u <= 3 - a.Length; u++)  			a = " " + a;  	break;  }  
