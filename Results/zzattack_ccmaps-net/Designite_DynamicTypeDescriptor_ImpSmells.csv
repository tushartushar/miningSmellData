Implementation smell,Namespace,Class,File,Method,Description
Long Method,CNCMaps.Shared.DynamicTypeDescription,StandardValueEditorUI,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\StandardValueEditorUI.cs,InitializeComponent,The method has 101 lines of code.
Complex Method,CNCMaps.Shared.DynamicTypeDescription,StandardValuesConverter,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\DynamicTypeDescriptor.cs,GetProperties,Cyclomatic complexity of the method is 8
Complex Method,CNCMaps.Shared.DynamicTypeDescription,StandardValuesConverter,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\DynamicTypeDescriptor.cs,UpdateEnumDisplayText,Cyclomatic complexity of the method is 14
Long Parameter List,CNCMaps.Shared.DynamicTypeDescription,DynamicCustomTypeDescriptor,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\DynamicTypeDescriptor.cs,CreateProperty,The method has 5 parameters. Parameters: name' type' value' index' attributes
Long Parameter List,CNCMaps.Shared.DynamicTypeDescription,CustomPropertyDescriptor,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\DynamicTypeDescriptor.cs,CustomPropertyDescriptor,The method has 5 parameters. Parameters: owner' sName' type' value' attributes
Long Statement,CNCMaps.Shared.DynamicTypeDescription,StandardValueAttribute,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\DynamicTypeDescriptor.cs,GetEnumItems,The length of the statement  "				StandardValueAttribute[] attr = fi.GetCustomAttributes(typeof(StandardValueAttribute)' false) as StandardValueAttribute[]; " is 122.
Long Statement,CNCMaps.Shared.DynamicTypeDescription,StandardValueEditor,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\DynamicTypeDescriptor.cs,EditValue,The length of the statement  "				IWindowsFormsEditorService editorService = provider.GetService(typeof(IWindowsFormsEditorService)) as IWindowsFormsEditorService; " is 129.
Long Statement,CNCMaps.Shared.DynamicTypeDescription,StandardValuesConverter,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\DynamicTypeDescriptor.cs,GetPropertiesSupported,The length of the statement  "				if (enu != null && cpd.PropertyFlags != PropertyFlags.None && (cpd.PropertyFlags & PropertyFlags.ExpandIEnumerable) > 0) { " is 122.
Long Statement,CNCMaps.Shared.DynamicTypeDescription,DynamicCustomTypeDescriptor,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\DynamicTypeDescriptor.cs,UpdateResourceManager,The length of the statement  "				IResourceAttribute attr = (PropertyResourceAttribute)cpd.AllAttributes.FirstOrDefault(a => a is PropertyResourceAttribute); " is 123.
Long Statement,CNCMaps.Shared.DynamicTypeDescription,StandardValueEditorUI,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\StandardValueEditorUI.cs,InitializeComponent,The length of the statement  "			this.splitContainer1.Panel1.MouseDoubleClick += new System.Windows.Forms.MouseEventHandler(this.listViewEnum_MouseDoubleClick); " is 127.
Long Statement,CNCMaps.Shared.DynamicTypeDescription,StandardValueEditorUI,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\StandardValueEditorUI.cs,InitializeComponent,The length of the statement  "			this.splitContainer1.Panel2.MouseDoubleClick += new System.Windows.Forms.MouseEventHandler(this.listViewEnum_MouseDoubleClick); " is 127.
Long Statement,CNCMaps.Shared.DynamicTypeDescription,StandardValueEditorUI,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\StandardValueEditorUI.cs,InitializeComponent,The length of the statement  "			this.splitContainer1.MouseDoubleClick += new System.Windows.Forms.MouseEventHandler(this.listViewEnum_MouseDoubleClick); " is 120.
Long Statement,CNCMaps.Shared.DynamicTypeDescription,StandardValueEditorUI,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\StandardValueEditorUI.cs,InitializeComponent,The length of the statement  "			this.lblDispName.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 158.
Magic Number,CNCMaps.Shared.DynamicTypeDescription,StandardValuesConverter,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\DynamicTypeDescriptor.cs,ConvertFrom,The following statement contains a magic number: if (value == null) {  				return null;  			}  			else if (value is string) {  				if (propType.IsEnum) {  					string sInpuValue = value as string;  					string[] arrDispName = sInpuValue.Split(new char[] { ''' }' StringSplitOptions.RemoveEmptyEntries);    					StringBuilder sb = new StringBuilder(1000);  					foreach (string sDispName in arrDispName) {  						string sTrimValue = sDispName.Trim();  						foreach (StandardValueAttribute sva in col) {  							if (String.Compare(sva.Value.ToString()' sTrimValue' true) == 0 ||  								String.Compare(sva.DisplayName' sTrimValue' true) == 0) {  								if (sb.Length > 0) {  									sb.Append("'");  								}  								sb.Append(sva.Value.ToString());  							}  						}    					}  // end of foreach..loop  					return Enum.Parse(propType' sb.ToString()' true);  				}  				foreach (StandardValueAttribute sva in col) {  					if (String.Compare(value.ToString()' sva.DisplayName' true' culture) == 0 ||  						String.Compare(value.ToString()' sva.Value.ToString()' true' culture) == 0) {  						return sva.Value;    					}  				}  				TypeConverter tc = TypeDescriptor.GetConverter(propType);  				if (tc != null) {  					object convertedValue = null;  					try {  						convertedValue = tc.ConvertFrom(context' culture' value);  					}  					catch (Exception ex) {  						Console.WriteLine(ex.Message);  					}  					if (tc.IsValid(convertedValue)) {  						return convertedValue;  					}  				}  			}  			else if (value.GetType() == propType) {  				return value;  			}  			else if (value is StandardValueAttribute) {  				return (value as StandardValueAttribute).Value;  			}
Magic Number,CNCMaps.Shared.DynamicTypeDescription,StandardValuesConverter,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\DynamicTypeDescriptor.cs,ConvertTo,The following statement contains a magic number: if (value == null) {  				return null;  			}  			else if (value is string) {  				if (destinationType == typeof(string)) {  					return value;  				}  				else if (destinationType == propType) {  					return ConvertFrom(context' culture' value);  				}  				else if (destinationType == typeof(StandardValueAttribute)) {  					foreach (StandardValueAttribute sva in col) {  						if (String.Compare(value.ToString()' sva.DisplayName' true' culture) == 0 ||  							String.Compare(value.ToString()' sva.Value.ToString()' true' culture) == 0) {  							return sva;  						}  					}  				}  			}  			else if (value.GetType() == propType) {  				if (destinationType == typeof(string)) {  					if (propType.IsEnum) {  						string sDelimitedValues = Enum.Format(propType' value' "G");  						string[] arrValue = sDelimitedValues.Split(new char[] { ''' }' StringSplitOptions.RemoveEmptyEntries);    						StringBuilder sb = new StringBuilder(1000);  						foreach (string sDispName in arrValue) {  							string sTrimValue = sDispName.Trim();  							foreach (StandardValueAttribute sva in col) {  								if (String.Compare(sva.Value.ToString()' sTrimValue' true) == 0 ||  									String.Compare(sva.DisplayName' sTrimValue' true) == 0) {  									if (sb.Length > 0) {  										sb.Append("' ");  									}  									sb.Append(sva.DisplayName);  								}  							}    						}  // end of foreach..loop  						return sb.ToString();  					}  					foreach (StandardValueAttribute sva in col) {  						if (sva.Value.Equals(value)) {  							return sva.DisplayName;  						}  					}  					TypeConverter tc = TypeDescriptor.GetConverter(propType);  					if (tc != null) {  						object convertedValue = null;  						try {  							convertedValue = tc.ConvertTo(context' culture' value' destinationType);  						}  						catch (Exception ex) {  							Console.WriteLine(ex.Message);  						}  						if (tc.IsValid(convertedValue)) {  							return convertedValue;  						}  					}  				}  				else if (destinationType == typeof(StandardValueAttribute)) {  					foreach (StandardValueAttribute sva in col) {  						if (sva.Value.Equals(value)) {  							return sva;  						}  					}    				}  				else if (destinationType == propType) {  					return value;  				}  			}  			else if (value is StandardValueAttribute) {  				if (destinationType == typeof(string)) {  					return (value as StandardValueAttribute).DisplayName;  				}  				else if (destinationType == typeof(StandardValueAttribute)) {  					return value;  				}  				else if (destinationType == propType) {  					return (value as StandardValueAttribute).Value;  				}  			}
Magic Number,CNCMaps.Shared.DynamicTypeDescription,StandardValuesConverter,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\DynamicTypeDescriptor.cs,WriteContext,The following statement contains a magic number: StringBuilder sb = new StringBuilder(1024);
Magic Number,CNCMaps.Shared.DynamicTypeDescription,StandardValueEditorUI,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\StandardValueEditorUI.cs,listViewEnum_SizeChanged,The following statement contains a magic number: listViewEnum.Columns[0].Width = listViewEnum.Width - 20;
Magic Number,CNCMaps.Shared.DynamicTypeDescription,StandardValueEditorUI,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\StandardValueEditorUI.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Location = new System.Drawing.Point(3' 3);
Magic Number,CNCMaps.Shared.DynamicTypeDescription,StandardValueEditorUI,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\StandardValueEditorUI.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Location = new System.Drawing.Point(3' 3);
Magic Number,CNCMaps.Shared.DynamicTypeDescription,StandardValueEditorUI,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\StandardValueEditorUI.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(203' 189);
Magic Number,CNCMaps.Shared.DynamicTypeDescription,StandardValueEditorUI,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\StandardValueEditorUI.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(203' 189);
Magic Number,CNCMaps.Shared.DynamicTypeDescription,StandardValueEditorUI,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\StandardValueEditorUI.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.SplitterDistance = 114;
Magic Number,CNCMaps.Shared.DynamicTypeDescription,StandardValueEditorUI,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\StandardValueEditorUI.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.SplitterWidth = 6;
Magic Number,CNCMaps.Shared.DynamicTypeDescription,StandardValueEditorUI,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\StandardValueEditorUI.cs,InitializeComponent,The following statement contains a magic number: this.listViewEnum.Size = new System.Drawing.Size(201' 112);
Magic Number,CNCMaps.Shared.DynamicTypeDescription,StandardValueEditorUI,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\StandardValueEditorUI.cs,InitializeComponent,The following statement contains a magic number: this.listViewEnum.Size = new System.Drawing.Size(201' 112);
Magic Number,CNCMaps.Shared.DynamicTypeDescription,StandardValueEditorUI,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\StandardValueEditorUI.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader1.Width = 200;
Magic Number,CNCMaps.Shared.DynamicTypeDescription,StandardValueEditorUI,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\StandardValueEditorUI.cs,InitializeComponent,The following statement contains a magic number: this.lblDesc.Location = new System.Drawing.Point(0' 18);
Magic Number,CNCMaps.Shared.DynamicTypeDescription,StandardValueEditorUI,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\StandardValueEditorUI.cs,InitializeComponent,The following statement contains a magic number: this.lblDesc.Size = new System.Drawing.Size(201' 49);
Magic Number,CNCMaps.Shared.DynamicTypeDescription,StandardValueEditorUI,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\StandardValueEditorUI.cs,InitializeComponent,The following statement contains a magic number: this.lblDesc.Size = new System.Drawing.Size(201' 49);
Magic Number,CNCMaps.Shared.DynamicTypeDescription,StandardValueEditorUI,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\StandardValueEditorUI.cs,InitializeComponent,The following statement contains a magic number: this.lblDispName.Size = new System.Drawing.Size(201' 18);
Magic Number,CNCMaps.Shared.DynamicTypeDescription,StandardValueEditorUI,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\StandardValueEditorUI.cs,InitializeComponent,The following statement contains a magic number: this.lblDispName.Size = new System.Drawing.Size(201' 18);
Magic Number,CNCMaps.Shared.DynamicTypeDescription,StandardValueEditorUI,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\StandardValueEditorUI.cs,InitializeComponent,The following statement contains a magic number: this.Padding = new System.Windows.Forms.Padding(3);
Magic Number,CNCMaps.Shared.DynamicTypeDescription,StandardValueEditorUI,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\StandardValueEditorUI.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(209' 195);
Magic Number,CNCMaps.Shared.DynamicTypeDescription,StandardValueEditorUI,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\StandardValueEditorUI.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(209' 195);
Missing Default,CNCMaps.Shared.DynamicTypeDescription,PropertySorter,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\DynamicTypeDescriptor.cs,Compare,The following switch statement is missing a default case: switch (m_SortOrder) {  				case CustomSortOrder.AscendingById:  					if (x.PropertyId > y.PropertyId) {  						return 1;  					}  					else if (x.PropertyId < y.PropertyId) {  						return -1;  					}  					return 0;  				case CustomSortOrder.AscendingByName:  					return (String.Compare(x.DisplayName' y.DisplayName' true));  				case CustomSortOrder.DescendingById:  					if (x.PropertyId > y.PropertyId) {  						return -1;  					}  					else if (x.PropertyId < y.PropertyId) {  						return 1;  					}  					return 0;  				case CustomSortOrder.DescendingByName:  					return (String.Compare(y.DisplayName' x.DisplayName' true));  			}
Missing Default,CNCMaps.Shared.DynamicTypeDescription,CategorySorter,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\DynamicTypeDescriptor.cs,Compare,The following switch statement is missing a default case: switch (m_SortOrder) {  				case CustomSortOrder.AscendingById:  					if (x.CategoryId > y.CategoryId) {  						return 1;  					}  					else if (x.CategoryId < y.CategoryId) {  						return -1;  					}  					return 0;  				case CustomSortOrder.AscendingByName:  					return (String.Compare(x.Category' y.Category' true));  				case CustomSortOrder.DescendingById:  					if (x.CategoryId > y.CategoryId) {  						return -1;  					}  					else if (x.CategoryId < y.CategoryId) {  						return 1;  					}  					return 0;  				case CustomSortOrder.DescendingByName:  					return (String.Compare(y.Category' x.Category' true));  			}
Missing Default,CNCMaps.Shared.DynamicTypeDescription,DynamicCustomTypeDescriptor,C:\repos\zzattack_ccmaps-net\CNCMaps.Shared\DynamicTypeDescription\DynamicTypeDescriptor.cs,UpdateCategoryTabAppendCount,The following switch statement is missing a default case: switch (m_CategorySortOrder) {  				case CustomSortOrder.AscendingById:  					propSorter.SortOrder = CustomSortOrder.DescendingById;  					pdl.Sort(propSorter);  					nTabCount = 0;  					int sortIndex = pdl[0].CategoryId;  					foreach (CustomPropertyDescriptor cpd in pdl) {  						if (cpd.CategoryId == sortIndex) {  							cpd.TabAppendCount = nTabCount;  						}  						else {  							sortIndex = cpd.CategoryId;  							nTabCount++;  							cpd.TabAppendCount = nTabCount;  						}  					}  					break;  				case CustomSortOrder.None:  				case CustomSortOrder.AscendingByName:  // by default' property grid sorts the category ascendingly  					foreach (CustomPropertyDescriptor cpd in m_pdl) {  						cpd.TabAppendCount = 0;  					}  					break;  				case CustomSortOrder.DescendingById:  					propSorter.SortOrder = CustomSortOrder.AscendingById;  					pdl.Sort(propSorter);  					nTabCount = 0;  					int nCategorySortIndex = pdl[0].CategoryId;  					foreach (CustomPropertyDescriptor cpd in pdl) {  						if (nCategorySortIndex == cpd.CategoryId) {  							cpd.TabAppendCount = nTabCount;  						}  						else {  							nCategorySortIndex = cpd.CategoryId;  							nTabCount++;  							cpd.TabAppendCount = nTabCount;  						}  					}  					break;  				case CustomSortOrder.DescendingByName:  					propSorter.SortOrder = CustomSortOrder.AscendingByName;  					pdl.Sort(propSorter);  					nTabCount = 0;  					pdl[0].TabAppendCount = 0;  					string sCat = pdl[0].Category;  					foreach (CustomPropertyDescriptor cpd in pdl) {  						cpd.TabAppendCount = 0;  						if (String.Compare(sCat' cpd.Category) == 0) {  							cpd.TabAppendCount = nTabCount;  						}  						else {  							sCat = cpd.Category;  							nTabCount++;  							cpd.TabAppendCount = nTabCount;  						}  					}  					break;  			}
