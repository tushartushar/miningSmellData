Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Rebel.Lucene.Caching,CacheProvider,C:\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Lucene\Caching\CacheProvider.cs,ModifyDocument,The length of the statement  "            // TODO: Disabled for beta due to a bug in ServiceStack deserializing CompositeEntitySchema: var totalJson = SerializationService.ToJson(cacheObject); " is 150.
Long Statement,Rebel.Lucene.Caching,CacheProvider,C:\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Lucene\Caching\CacheProvider.cs,PerformGet,The length of the statement  "                    // TODO: Disabled for beta due to a bug in ServiceStack deserializing CompositeEntitySchema: var cacheEntry = SerializationService.FromJson<CacheValueOf<T>>(cacheEntryAsString); " is 177.
Long Statement,Rebel.Lucene,IndexController,C:\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Lucene\IndexController.cs,FlushQueue,The length of the statement  "                using (DisposableTimer.TraceDuration<IndexController>("Creating a worker and flushing"' "Worker for FlushQueue finished")) " is 122.
Long Statement,Rebel.Lucene,IndexController,C:\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Lucene\IndexController.cs,StartQueueMonitor,The length of the statement  "            queueMonitorTask.LogErrors(LogQueueMonitorError).ContinueWith(x => StartQueueMonitor()).LogErrors(LogQueueMonitorError); " is 120.
Magic Number,Rebel.Lucene,IndexController,C:\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Lucene\IndexController.cs,PartialFlushQueue,The following statement contains a magic number: using (new WriteLockDisposable(_flushLocker))              {                  if (_forceStop || !Queue.Batches.Any()) return;                  using (var worker = CreateTransactionWorker())                  {                      try                      {                          for (int i = 0; i < flushLimit; i++)                          {                              if (_forceStop) break;                                IndexModificationBatch batch = null;                              var success = Queue.Batches.TryDequeue(out batch);                              if (success)                              {                                  EnactBatch(worker' batch);                                  _flushCount++;                              }                              else                              {                                  break;                              }                          }                          worker.Commit();                          if (_flushCount % 50 == 0) worker.TryOptimizeDeletions();                      }                      catch (Exception ex)                      {                          LogHelper.Error<IndexController>("Failed to partially flush the queue: " + ex.Message' ex);                          worker.TryRollback();                          throw;                      }                  }              }
Magic Number,Rebel.Lucene,IndexController,C:\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Lucene\IndexController.cs,FlushQueue,The following statement contains a magic number: using (new WriteLockDisposable(_flushLocker))              {                  if (_forceStop) return;                    LogHelper.TraceIfEnabled<IndexController>("Checking for items in FlushQueue");                  IndexModificationBatch batch = null;                  var success = Queue.Batches.TryDequeue(out batch);                    if (!success) return;                    using (DisposableTimer.TraceDuration<IndexController>("Creating a worker and flushing"' "Worker for FlushQueue finished"))                  using (var worker = CreateTransactionWorker())                  {                      try                      {                          while (success && !_forceStop)                          {                              EnactBatch(worker' batch);                              _flushCount++;                              success = Queue.Batches.TryDequeue(out batch);                          }                          worker.Commit();                          if (_flushCount % 50 == 0) worker.TryOptimizeDeletions();                      }                      catch (Exception ex)                      {                          LogHelper.Error<IndexController>("Failed to flush the queue: " + ex.Message' ex);                          worker.TryRollback();                          throw;                      }                  }              }
Magic Number,Rebel.Lucene,IndexController,C:\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Lucene\IndexController.cs,MonitorIndexBatch,The following statement contains a magic number: try              {                  LogHelper.TraceIfEnabled<IndexController>("In queue monitor");                  while (!_shuttingDown)                  {                      if (_shuttingDown) break;                      while (!Queue.Batches.Any())                      {                          Thread.Sleep(250);                          if (_shuttingDown) return; // Will invoke finally block' don't forget                      }                      LogHelper.TraceIfEnabled<IndexController>("Calling FlushQueue from monitor");                      FlushQueue();                  }              }              finally              {                  _hasFinished = true;                  _manualResetter.Set();              }
Magic Number,Rebel.Lucene,IndexController,C:\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Lucene\IndexController.cs,DisposeResources,The following statement contains a magic number: _manualResetter.WaitOne(TimeSpan.FromSeconds(5));
