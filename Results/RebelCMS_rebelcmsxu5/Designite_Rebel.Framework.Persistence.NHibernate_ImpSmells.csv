Implementation smell,Namespace,Class,File,Method,Description
Long Method,Rebel.Framework.Persistence.NHibernate.Dependencies,NHibernateConfigBuilder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Dependencies\NHibernateConfigBuilder.cs,CreateConfiguration,The method has 135 lines of code.
Long Method,Rebel.Framework.Persistence.NHibernate.Linq,NhAggCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggCriteriaVisitor.cs,VisitFieldPredicate,The method has 315 lines of code.
Long Method,Rebel.Framework.Persistence.NHibernate.Linq,NhAggCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggCriteriaVisitor.cs,VisitBinary,The method has 107 lines of code.
Long Method,Rebel.Framework.Persistence.NHibernate.Linq,NhAggregateCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggregateCriteriaVisitor.cs,VisitFieldPredicate,The method has 243 lines of code.
Long Method,Rebel.Framework.Persistence.NHibernate.Linq,NhCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhCriteriaVisitor.cs,VisitFieldPredicate,The method has 233 lines of code.
Long Method,Rebel.Framework.Persistence.NHibernate.Linq,NhQueryOverVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhQueryOverVisitor.cs,VisitFieldPredicate,The method has 212 lines of code.
Long Method,Rebel.Framework.Persistence.NHibernate,EntityRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepository.cs,PerformExecuteSingle,The method has 100 lines of code.
Long Method,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,GenerateAggregateStatusQuery,The method has 106 lines of code.
Long Method,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,GenerateVersionedQuery2,The method has 252 lines of code.
Complex Method,Rebel.Framework.Persistence.NHibernate.Linq,NhAggCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggCriteriaVisitor.cs,VisitFieldPredicate,Cyclomatic complexity of the method is 40
Complex Method,Rebel.Framework.Persistence.NHibernate.Linq,NhAggCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggCriteriaVisitor.cs,VisitBinary,Cyclomatic complexity of the method is 14
Complex Method,Rebel.Framework.Persistence.NHibernate.Linq,NhAggCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggCriteriaVisitor.cs,ConjoinAsAndOperation,Cyclomatic complexity of the method is 14
Complex Method,Rebel.Framework.Persistence.NHibernate.Linq,NhAggregateCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggregateCriteriaVisitor.cs,GenerateQueryOver,Cyclomatic complexity of the method is 9
Complex Method,Rebel.Framework.Persistence.NHibernate.Linq,NhAggregateCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggregateCriteriaVisitor.cs,VisitFieldPredicate,Cyclomatic complexity of the method is 30
Complex Method,Rebel.Framework.Persistence.NHibernate.Linq,NhCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhCriteriaVisitor.cs,GenerateQueryOver,Cyclomatic complexity of the method is 9
Complex Method,Rebel.Framework.Persistence.NHibernate.Linq,NhCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhCriteriaVisitor.cs,VisitFieldPredicate,Cyclomatic complexity of the method is 28
Complex Method,Rebel.Framework.Persistence.NHibernate.Linq,NhQueryOverVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhQueryOverVisitor.cs,VisitFieldPredicate,Cyclomatic complexity of the method is 25
Complex Method,Rebel.Framework.Persistence.NHibernate,EntityRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepository.cs,PerformExecuteSingle,Cyclomatic complexity of the method is 17
Complex Method,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,GenerateAggregateStatusQuery,Cyclomatic complexity of the method is 11
Complex Method,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,GenerateVersionedQuery2,Cyclomatic complexity of the method is 13
Complex Method,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,AddRelation,Cyclomatic complexity of the method is 8
Long Parameter List,Rebel.Framework.Persistence.NHibernate.Dependencies,NhConfigurationCacheKey,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Dependencies\NhConfigurationCacheKey.cs,NhConfigurationCacheKey,The method has 7 parameters. Parameters: driver' connectionString' fluentMappingsAssembly' showSql' enablePostCommitListener' sessionContextType' outputMappings
Long Parameter List,Rebel.Framework.Persistence.NHibernate.Dependencies,NHibernateConfigBuilder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Dependencies\NHibernateConfigBuilder.cs,NHibernateConfigBuilder,The method has 6 parameters. Parameters: connectionString' alias' nhDriver' sessionContext' outputNhMappings' useNhProfiler
Long Parameter List,Rebel.Framework.Persistence.NHibernate.Dependencies,NHibernateConfigBuilder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Dependencies\NHibernateConfigBuilder.cs,CreateConfiguration,The method has 10 parameters. Parameters: nhDriver' connectionString' fluentMappingsAssembly' showSql' enablePostCommitListener' sessionContext' outputNhMappings' useNhProfiler' configurationCacheKey' connReleaseMode
Long Parameter List,Rebel.Framework.Persistence.NHibernate.Linq,NhAggCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggCriteriaVisitor.cs,ConjoinAsAndOperation,The method has 8 parameters. Parameters: rightCriterion' toReturn' agg' left' leftCriterion' right' allJoins' newQuery
Long Parameter List,Rebel.Framework.Persistence.NHibernate.Linq,NhAggCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggCriteriaVisitor.cs,GetRestrictionEq,The method has 5 parameters. Parameters: fieldValue' useLikeMatchForStrings' propertyExpression' fieldSubKeySelector' fieldSubKey
Long Parameter List,Rebel.Framework.Persistence.NHibernate.Linq,NhAggregateCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggregateCriteriaVisitor.cs,GetRestrictionEq,The method has 5 parameters. Parameters: fieldValue' useLikeMatchForStrings' propertyExpression' fieldSubKeySelector' fieldSubKey
Long Parameter List,Rebel.Framework.Persistence.NHibernate.Linq,NhCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhCriteriaVisitor.cs,GetRestrictionEq,The method has 5 parameters. Parameters: fieldValue' useLikeMatchForStrings' propertyExpression' fieldSubKeySelector' fieldSubKey
Long Parameter List,Rebel.Framework.Persistence.NHibernate.Linq,NhQueryOverVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhQueryOverVisitor.cs,GetRestrictionEq,The method has 5 parameters. Parameters: fieldValue' useLikeMatchForStrings' propertyExpression' fieldSubKeySelector' fieldSubKey
Long Parameter List,Rebel.Framework.Persistence.NHibernate.OrmConfig,AggregateDataInterceptor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\OrmConfig\AggregateDataInterceptor.cs,OnSave,The method has 5 parameters. Parameters: entity' id' state' propertyNames' types
Long Parameter List,Rebel.Framework.Persistence.NHibernate.OrmConfig,AggregateDataInterceptor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\OrmConfig\AggregateDataInterceptor.cs,OnDelete,The method has 5 parameters. Parameters: entity' id' state' propertyNames' types
Long Parameter List,Rebel.Framework.Persistence.NHibernate,EntityRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepository.cs,EntityRepository,The method has 7 parameters. Parameters: providerMetadata' schemas' revisions' providerTransaction' nhSession' frameworkContext' isReadOnly
Long Parameter List,Rebel.Framework.Persistence.NHibernate,EntityRepositoryFactory,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepositoryFactory.cs,EntityRepositoryFactory,The method has 6 parameters. Parameters: providerMetadata' revisionRepositoryFactory' schemaRepositoryFactory' frameworkContext' singleProvidedSession' leaveSessionOpenOnDispose
Long Parameter List,Rebel.Framework.Persistence.NHibernate,EntityRepositoryFactory,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepositoryFactory.cs,EntityRepositoryFactory,The method has 5 parameters. Parameters: providerMetadata' revisionRepositoryFactory' schemaRepositoryFactory' frameworkContext' dependencyHelper
Long Parameter List,Rebel.Framework.Persistence.NHibernate,NhFactoryHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhFactoryHelper.cs,NhFactoryHelper,The method has 5 parameters. Parameters: config' singleProvidedSession' leaveSessionOpenOnDispose' isSingleSessionFinalized' frameworkContext
Long Parameter List,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,GenerateAggregateStatusQuery,The method has 9 parameters. Parameters: restrictToNodeIds' restrictToStatus' latestRevisionOnly' sortClauses' relationScope' scopeStartIds' relationTypeAlias' excludeParentIds' excludeIds
Long Parameter List,Rebel.Framework.Persistence.NHibernate,RevisionRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\RevisionRepository.cs,RevisionRepository,The method has 5 parameters. Parameters: providerMetadata' providerTransaction' nhSession' frameworkContext' isReadOnly
Long Parameter List,Rebel.Framework.Persistence.NHibernate,SchemaRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\SchemaRepository.cs,SchemaRepository,The method has 6 parameters. Parameters: providerMetadata' revisions' providerTransaction' nhSession' frameworkContext' isReadOnly
Long Parameter List,Rebel.Framework.Persistence.NHibernate,SchemaRepositoryFactory,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\SchemaRepositoryFactory.cs,SchemaRepositoryFactory,The method has 5 parameters. Parameters: providerMetadata' revisionRepositoryFactory' frameworkContext' singleProvidedSession' leaveSessionOpenOnDispose
Long Parameter List,Rebel.Framework.Persistence.NHibernate.OrmConfig.FluentMappings.DialectMitigation,CompositeUserTypeBase<T>,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\OrmConfig\FluentMappings\DialectMitigation\CompositeUserTypeBase.cs,NullSafeSet,The method has 5 parameters. Parameters: cmd' value' index' settable' session
Long Identifier,Rebel.Framework.Persistence.NHibernate,NhProviderTransaction,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhProviderTransaction.cs,,The length of the parameter _commitWasAttemptedWhileNested is 30.
Long Statement,Rebel.Framework.Persistence.NHibernate.Dependencies,_NhProfilerLogging,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Dependencies\NhProfilerLogging.cs,Start,The length of the statement  "                return DisposableTimer.Start(x => CustomQueryReporting.ReportQuery(sessionId' ProfilerLoggingPrefix + endMessage' parameters' (int)x' (int)x' 0)); " is 146.
Long Statement,Rebel.Framework.Persistence.NHibernate.Dependencies,NHibernateConfigBuilder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Dependencies\NHibernateConfigBuilder.cs,BuildConfiguration,The length of the statement  "            return CreateConfiguration(_nhDriver' ConnectionString' GetRdbmsMapsAssembly()' showSql' true' _sessionContext' _outputNhMappings' _useNhProfiler' out configurationCacheKey' connReleaseMode); " is 191.
Long Statement,Rebel.Framework.Persistence.NHibernate.Dependencies,NHibernateConfigBuilder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Dependencies\NHibernateConfigBuilder.cs,DeserializeConfigFromPath,The length of the statement  "                LogHelper.TraceIfEnabled<NHibernateConfigBuilder>("Didn't get cached NHibernate configuration from " + path + "; " + ex.Message); " is 129.
Long Statement,Rebel.Framework.Persistence.NHibernate.Dependencies,NHibernateConfigBuilder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Dependencies\NHibernateConfigBuilder.cs,CreateConfiguration,The length of the statement  "                            if (connReleaseMode == NHibernateConfigBuilder.CustomConnReleaseMode) // Only modify if it's a value teling us to modify " is 120.
Long Statement,Rebel.Framework.Persistence.NHibernate.Dependencies,NHibernateDemandBuilder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Dependencies\NHibernateDemandBuilder.cs,Initialise,The length of the statement  "            var configMain = builderContext.ConfigurationResolver.GetConfigSection(HiveConfigSection.ConfigXmlKey) as HiveConfigSection; " is 124.
Long Statement,Rebel.Framework.Persistence.NHibernate.Dependencies,NHibernateDemandBuilder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Dependencies\NHibernateDemandBuilder.cs,Initialise,The length of the statement  "            var config2rw = RegistryConfigElement ?? configMain.Providers.ReadWriters[ProviderKey] ?? configMain.Providers.Readers[ProviderKey]; " is 132.
Long Statement,Rebel.Framework.Persistence.NHibernate.Dependencies,NHibernateDemandBuilder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Dependencies\NHibernateDemandBuilder.cs,Build,The length of the statement  "                .ForFactory(x => new ManualMapperv2(new NhLookupHelper(x.Resolve<EntityRepositoryFactory>(ProviderKey))' x.Resolve<ProviderMetadata>(ProviderKey))) " is 147.
Long Statement,Rebel.Framework.Persistence.NHibernate.Dependencies,NHibernateDemandBuilder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Dependencies\NHibernateDemandBuilder.cs,Build,The length of the statement  "            containerBuilder.ForFactory(x => new NhFactoryHelper(x.Resolve<global::NHibernate.Cfg.Configuration>(ProviderKey)' null' false' false' x.Resolve<IFrameworkContext>())) " is 167.
Long Statement,Rebel.Framework.Persistence.NHibernate.Linq,NhAggCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggCriteriaVisitor.cs,VisitFieldPredicate,The length of the statement  "                        if (!tryParseResult.Success || tryParseResult.Result.ProviderGroupRoot == null || tryParseResult.Result.ProviderId == null || " is 125.
Long Statement,Rebel.Framework.Persistence.NHibernate.Linq,NhAggCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggCriteriaVisitor.cs,VisitFieldPredicate,The length of the statement  "                            (tryParseResult.Result.ProviderGroupRoot.AbsoluteUri != "storage://" && tryParseResult.Result.ProviderId != "templates")) " is 121.
Long Statement,Rebel.Framework.Persistence.NHibernate.Linq,NhAggCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggCriteriaVisitor.cs,VisitFieldPredicate,The length of the statement  "                            var newValue = new HiveId("storage"' "templates"' new HiveIdValue(normalisedFieldValue)).ToString(HiveIdFormatStyle.UriSafe); " is 125.
Long Statement,Rebel.Framework.Persistence.NHibernate.Linq,NhAggCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggCriteriaVisitor.cs,VisitFieldPredicate,The length of the statement  "            if (toReturn.ValueTypesToQuery.Contains(DataSerializationTypes.String) && !toReturn.ValueTypesToQuery.Contains(DataSerializationTypes.LongString)) " is 146.
Long Statement,Rebel.Framework.Persistence.NHibernate.Linq,NhAggCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggCriteriaVisitor.cs,VisitFieldPredicate,The length of the statement  "                    throw new InvalidOperationException("A field of type {0} cannot be queried with operator {1}".InvariantFormat(dataSerializationTypese.ToString()' node.ValueExpression.ClauseType.ToString())); " is 191.
Long Statement,Rebel.Framework.Persistence.NHibernate.Linq,NhAggCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggCriteriaVisitor.cs,VisitFieldPredicate,The length of the statement  "                // We might be dealing with multiple restrictions even for one field (e.g. if it's been stored once in String table' and another time in LongString) " is 148.
Long Statement,Rebel.Framework.Persistence.NHibernate.Linq,NhAggCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggCriteriaVisitor.cs,VisitFieldPredicate,The length of the statement  "            // Set up the joins for the value tables - only add joins for the tables that we know we want to actually query based on " is 120.
Long Statement,Rebel.Framework.Persistence.NHibernate.Linq,NhAggCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggCriteriaVisitor.cs,GetAutoSubqueryCriterion,The length of the statement  "                    return Subqueries.WhereProperty<AggregateNodeStatus>(x => x.NodeVersion.Id).In(bin.Subquery.Select(x => x.NodeVersion.Id)); " is 123.
Long Statement,Rebel.Framework.Persistence.NHibernate.Linq,NhAggCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggCriteriaVisitor.cs,VisitBinary,The length of the statement  "                    throw new InvalidOperationException("This provider only supports binary expressions with And' AndAlso' Or' OrElse expression types. ExpressionType was {0}".InvariantFormat(node.NodeType.ToString())); " is 199.
Long Statement,Rebel.Framework.Persistence.NHibernate.Linq,NhAggCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggCriteriaVisitor.cs,VisitBinary,The length of the statement  "                    var rightSubquery = Subqueries.WhereProperty<AggregateNodeStatus>(x => x.NodeVersion.Id).In(right.Subquery.Select(x => x.NodeVersion.Id)); " is 138.
Long Statement,Rebel.Framework.Persistence.NHibernate.Linq,NhAggCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggCriteriaVisitor.cs,VisitBinary,The length of the statement  "                    var leftSubquery = Subqueries.WhereProperty<AggregateNodeStatus>(x => x.NodeVersion.Id).In(left.Subquery.Select(x => x.NodeVersion.Id)); " is 136.
Long Statement,Rebel.Framework.Persistence.NHibernate.Linq,NhAggregateCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggregateCriteriaVisitor.cs,GenerateQueryOver,The length of the statement  "            var aliases = _someSchemaAliasesAreExcluded ? null : RequiredSchemaAliases.Select(x => x.ValueExpression.Value.ToString()).ToArray(); " is 133.
Long Statement,Rebel.Framework.Persistence.NHibernate.Linq,NhAggregateCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggregateCriteriaVisitor.cs,VisitFieldPredicate,The length of the statement  "                        if (!tryParseResult.Success || tryParseResult.Result.ProviderGroupRoot == null || tryParseResult.Result.ProviderId == null || " is 125.
Long Statement,Rebel.Framework.Persistence.NHibernate.Linq,NhAggregateCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggregateCriteriaVisitor.cs,VisitFieldPredicate,The length of the statement  "                            (tryParseResult.Result.ProviderGroupRoot.AbsoluteUri != "storage://" && tryParseResult.Result.ProviderId != "templates")) " is 121.
Long Statement,Rebel.Framework.Persistence.NHibernate.Linq,NhAggregateCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggregateCriteriaVisitor.cs,VisitFieldPredicate,The length of the statement  "                            var newValue = new HiveId("storage"' "templates"' new HiveIdValue(normalisedFieldValue)).ToString(HiveIdFormatStyle.UriSafe); " is 125.
Long Statement,Rebel.Framework.Persistence.NHibernate.Linq,NhAggregateCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggregateCriteriaVisitor.cs,VisitFieldPredicate,The length of the statement  "            if (_typesToQuery.Contains(DataSerializationTypes.String) && !_typesToQuery.Contains(DataSerializationTypes.LongString)) " is 120.
Long Statement,Rebel.Framework.Persistence.NHibernate.Linq,NhAggregateCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggregateCriteriaVisitor.cs,VisitFieldPredicate,The length of the statement  "                    throw new InvalidOperationException("A field of type {0} cannot be queried with operator {1}".InvariantFormat(dataSerializationTypese.ToString()' node.ValueExpression.ClauseType.ToString())); " is 191.
Long Statement,Rebel.Framework.Persistence.NHibernate.Linq,NhAggregateCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggregateCriteriaVisitor.cs,VisitBinary,The length of the statement  "            throw new InvalidOperationException("This provider only supports binary expressions with And' AndAlso' Or' OrElse expression types. ExpressionType was {0}".InvariantFormat(node.NodeType.ToString())); " is 199.
Long Statement,Rebel.Framework.Persistence.NHibernate.Linq,NhCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhCriteriaVisitor.cs,GenerateQueryOver,The length of the statement  "            var aliases = _someSchemaAliasesAreExcluded ? null : RequiredSchemaAliases.Select(x => x.ValueExpression.Value.ToString()).ToArray(); " is 133.
Long Statement,Rebel.Framework.Persistence.NHibernate.Linq,NhCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhCriteriaVisitor.cs,VisitFieldPredicate,The length of the statement  "                        if (!tryParseResult.Success || tryParseResult.Result.ProviderGroupRoot == null || tryParseResult.Result.ProviderId == null || " is 125.
Long Statement,Rebel.Framework.Persistence.NHibernate.Linq,NhCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhCriteriaVisitor.cs,VisitFieldPredicate,The length of the statement  "                            (tryParseResult.Result.ProviderGroupRoot.AbsoluteUri != "storage://" && tryParseResult.Result.ProviderId != "templates")) " is 121.
Long Statement,Rebel.Framework.Persistence.NHibernate.Linq,NhCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhCriteriaVisitor.cs,VisitFieldPredicate,The length of the statement  "                            var newValue = new HiveId("storage"' "templates"' new HiveIdValue(normalisedFieldValue)).ToString(HiveIdFormatStyle.UriSafe); " is 125.
Long Statement,Rebel.Framework.Persistence.NHibernate.Linq,NhCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhCriteriaVisitor.cs,VisitFieldPredicate,The length of the statement  "            if (_typesToQuery.Contains(DataSerializationTypes.String) && !_typesToQuery.Contains(DataSerializationTypes.LongString)) " is 120.
Long Statement,Rebel.Framework.Persistence.NHibernate.Linq,NhCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhCriteriaVisitor.cs,VisitFieldPredicate,The length of the statement  "                    throw new InvalidOperationException("A field of type {0} cannot be queried with operator {1}".InvariantFormat(dataSerializationTypese.ToString()' node.ValueExpression.ClauseType.ToString())); " is 191.
Long Statement,Rebel.Framework.Persistence.NHibernate.Linq,NhCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhCriteriaVisitor.cs,VisitBinary,The length of the statement  "            throw new InvalidOperationException("This provider only supports binary expressions with And' AndAlso' Or' OrElse expression types. ExpressionType was {0}".InvariantFormat(node.NodeType.ToString())); " is 199.
Long Statement,Rebel.Framework.Persistence.NHibernate.Linq,NhQueryOverVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhQueryOverVisitor.cs,VisitFieldPredicate,The length of the statement  "                        queryExtender = queryExtender.Left.JoinAlias(() => aliasAttribute.AttributeLongStringValues' () => aliasLongStringValue); " is 121.
Long Statement,Rebel.Framework.Persistence.NHibernate.Linq,NhQueryOverVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhQueryOverVisitor.cs,VisitFieldPredicate,The length of the statement  "                    throw new InvalidOperationException("A field of type {0} cannot be queried with operator {1}".InvariantFormat(dataSerializationTypese.ToString()' node.ValueExpression.ClauseType.ToString())); " is 191.
Long Statement,Rebel.Framework.Persistence.NHibernate.Linq,NhQueryOverVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhQueryOverVisitor.cs,VisitBinary,The length of the statement  "            throw new InvalidOperationException("This provider only supports binary expressions with And' AndAlso' Or' OrElse expression types. ExpressionType was {0}".InvariantFormat(node.NodeType.ToString())); " is 199.
Long Statement,Rebel.Framework.Persistence.NHibernate.OrmConfig,SchemaChangeValidator,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\OrmConfig\SchemaChangeValidator.cs,ValidateSchema,The length of the statement  "                    var tableMetadata = databaseMetadata.GetTableMetadata(table.Name' table.Schema ?? schema' table.Catalog ?? catalog' table.IsQuoted); " is 132.
Long Statement,Rebel.Framework.Persistence.NHibernate,NodeRelationCollectionsExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NodeRelationCollectionsExtensions.cs,UpdateOrdinal,The length of the statement  "                ?? relations.SingleOrDefault(x => x.StartNode.Id == r.StartNode.Id && x.EndNode.Id == r.EndNode.Id && x.NodeRelationType.Name == r.NodeRelationType.Name); " is 154.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhEventListeners,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhEventListeners.cs,OnPostInsert,The length of the statement  "                LogHelper.TraceIfEnabled<NhEventListeners>("Not raising event because casting entity to IReferenceByGuid resulted in null value"); " is 130.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhEventListeners,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhEventListeners.cs,OnSaveOrUpdate,The length of the statement  "                //    actionQueueDeletions = "\nDeletions queued:\n" + string.Concat(@event.Session.ActionQueue.CloneDeletions().Select(x => GetUsefulEntityName(x.Instance' x.EntityName' x.Id) + "\n")); " is 186.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhEventListeners,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhEventListeners.cs,OnSaveOrUpdate,The length of the statement  "                var usefulEntityName = GetUsefulEntityName(@event.Entity' @event.EntityName' @event.Entry != null ? @event.Entry.Id : null); " is 124.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhEventListeners,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhEventListeners.cs,OnSaveOrUpdate,The length of the statement  "                throw new InvalidOperationException("Error trying to save {0}. {1}{2}".InvariantFormat(usefulEntityName' cascadeHelperMsg' actionQueueDeletions)' ex); " is 150.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhEventListeners,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhEventListeners.cs,GetUsefulEntityName,The length of the statement  "            var alias = (entity as IReferenceByAlias != null) ? " aliassed as '" + ((IReferenceByAlias)entity).Alias + "'" : string.Empty; " is 126.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhEventListeners,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhEventListeners.cs,OnDelete,The length of the statement  "                throw new ApplicationException(string.Format("Error while trying to delete a {0} with id {1}"' @event.EntityName' @event.Session.GetIdentifier(@event.Entity))' ex); " is 164.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhEventListeners,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhEventListeners.cs,OnDelete,The length of the statement  "                throw new ApplicationException(string.Format("Error while trying to delete a {0} with id {1}"' @event.EntityName' @event.Session.GetIdentifier(@event.Entity))' ex); " is 164.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhEventListeners,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhEventListeners.cs,OnMerge,The length of the statement  "                throw new InvalidOperationException("Error trying to merge: {0}".InvariantFormat(GetUsefulEntityName(@event.Entity' @event.EntityName' null))' ex); " is 147.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhEventListeners,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhEventListeners.cs,OnMerge,The length of the statement  "                throw new InvalidOperationException("Error trying to merge: {0}".InvariantFormat(GetUsefulEntityName(@event.Entity' @event.EntityName' null))' ex); " is 147.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhEventListeners,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhEventListeners.cs,OnEvict,The length of the statement  "                throw new InvalidOperationException("Error trying to evict: {0}".InvariantFormat(GetUsefulEntityName(@event.Entity' null' null))' ex); " is 134.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhEventListeners,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhEventListeners.cs,OnPreDelete,The length of the statement  "                throw new InvalidOperationException("Error trying to flush aggregates during pre-delete phase: {0}".InvariantFormat(GetUsefulEntityName(@event.Entity' null' null))' ex); " is 169.
Long Statement,Rebel.Framework.Persistence.NHibernate,ProviderBootstrapper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\ProviderBootstrapper.cs,ConfigureApplication,The length of the statement  "            DeepConfigManager.SerializeProviderConfigSection(configXml' hiveElement' "rebel/persistenceProviderSettings/" + elementName' true); " is 131.
Long Statement,Rebel.Framework.Persistence.NHibernate,ProviderBootstrapper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\ProviderBootstrapper.cs,ConfigureApplication,The length of the statement  "            var connectionStringElement = DeepConfigManager.SerializeProviderConfigSection(configXml' connStrings' "connectionStrings"' false); " is 131.
Long Statement,Rebel.Framework.Persistence.NHibernate,ProviderBootstrapper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\ProviderBootstrapper.cs,ConfigureApplication,The length of the statement  "            // The following is superceded by the above to support multiple "add" references: DeepConfigManager.SerializeProviderConfigSection(configXml' connStrings.ConnectionStrings[0]' "connectionStrings/add"' false); " is 208.
Long Statement,Rebel.Framework.Persistence.NHibernate,ProviderBootstrapper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\ProviderBootstrapper.cs,ValidateSchema,The length of the statement  "                                    LogHelper.Warn<ProviderBootstrapper>("Automatically attempting to update the database schema to add the following missing tables: {0}. You can prevent this behaviour by setting '{1}' to false in the configuration for this provider"' missingTables' ProviderConfigurationSection.XAutoUpdateSchema); " is 296.
Long Statement,Rebel.Framework.Persistence.NHibernate,ProviderBootstrapper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\ProviderBootstrapper.cs,ValidateSchema,The length of the statement  "                                        LogHelper.Error<ProviderBootstrapper>("Auto-update of db schema failed. Does the db user have the correct permissions? If you need to manually run the update script' the script should be in the logfile preceding this entry"' updateEx); " is 235.
Long Statement,Rebel.Framework.Persistence.NHibernate,ProviderBootstrapper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\ProviderBootstrapper.cs,UpdateSchema,The length of the statement  "                    schema.Execute(x => LogHelper.TraceIfEnabled<ProviderBootstrapper>("NHibernate generated the following update Sql: \n" + x)' true); " is 131.
Long Statement,Rebel.Framework.Persistence.NHibernate,RdbmsModelMapper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\RdbmsModelMapper.cs,ConfigureMappings,The length of the statement  "                                        "Cannot load type '{0}' which is specified for this AttributeType in the database; either the Assembly has not been loaded into the AppDomain or it's been renamed since this item was last saved."' " is 196.
Long Statement,Rebel.Framework.Persistence.NHibernate,EntityRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepository.cs,PerformGet,The length of the statement  "            return nodeIds.Select(x => nodeVersions.SingleOrDefault(y => y.Node.Id == x)).WhereNotNull().Select(x => FrameworkContext.TypeMappers.Map<T>(x)); " is 145.
Long Statement,Rebel.Framework.Persistence.NHibernate,EntityRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepository.cs,PerformExecuteMany,The length of the statement  "            var revisionStatus = query.From.RevisionStatusType != FromClause.RevisionStatusNotSpecifiedType ? query.From.RevisionStatusType : null; " is 135.
Long Statement,Rebel.Framework.Persistence.NHibernate,EntityRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepository.cs,PerformExecuteMany,The length of the statement  "            var aggQuery = Helper.GenerateAggregateStatusQuery(nodeIds' revisionStatus' true' query.SortClauses' query.From.HierarchyScope' query.From.ScopeStartIds' query.From.HierarchyType' query.From.ExcludeParentIds' query.From.ExcludeEntityIds); " is 238.
Long Statement,Rebel.Framework.Persistence.NHibernate,EntityRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepository.cs,PerformExecuteMany,The length of the statement  "            filteredAggQuery = ApplyPossibleDbSortOrders(query' filteredAggQuery' out appliedSort' aggQuery.NodeTableIsJoinedAlready); " is 122.
Long Statement,Rebel.Framework.Persistence.NHibernate,EntityRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepository.cs,PerformExecuteMany,The length of the statement  "            //// Need to order in memory using the materialised results because the field name is the value of a column in the resultset' not a column itself " is 145.
Long Statement,Rebel.Framework.Persistence.NHibernate,EntityRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepository.cs,PerformExecuteMany,The length of the statement  "            //// First materialise the results. Note that the Take / Skip is inefficient atm; NH bugs in Skip / Take in 3.0 causing same results irrespective of request' so enumerating whole list and skipping in memory (ouch) " is 213.
Long Statement,Rebel.Framework.Persistence.NHibernate,EntityRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepository.cs,PerformExecuteMany,The length of the statement  "            if (!(canApplyOrderingInDb == ApplySortOrderInDb.CanApplyAll || canApplyOrderingInDb == ApplySortOrderInDb.NoOrderingRequired)) " is 127.
Long Statement,Rebel.Framework.Persistence.NHibernate,EntityRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepository.cs,CanApplySortOrderInDb,The length of the statement  "                var allArePossibleInDb = query.SortClauses.All(x => dbLevelSortOrders.Contains(x.FieldSelector.FieldName.ToLowerInvariant())); " is 126.
Long Statement,Rebel.Framework.Persistence.NHibernate,EntityRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepository.cs,PerformExecuteScalar,The length of the statement  "            var revisionStatus = query.From.RevisionStatusType != FromClause.RevisionStatusNotSpecifiedType ? query.From.RevisionStatusType : null; " is 135.
Long Statement,Rebel.Framework.Persistence.NHibernate,EntityRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepository.cs,PerformExecuteScalar,The length of the statement  "            var aggQuery = Helper.GenerateAggregateStatusQuery(nodeIds' revisionStatus' true' query.SortClauses' query.From.HierarchyScope' query.From.ScopeStartIds' query.From.HierarchyType' query.From.ExcludeParentIds' query.From.ExcludeEntityIds); " is 238.
Long Statement,Rebel.Framework.Persistence.NHibernate,EntityRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepository.cs,PerformExecuteScalar,The length of the statement  "                        filteredAggQuery = (IQueryOver<AggregateNodeStatus' AggregateNodeStatus>)filteredAggQuery.Skip(filter.SkipCount).Take(99999); // Must include a Take in order for NH to generate the offset " is 187.
Long Statement,Rebel.Framework.Persistence.NHibernate,EntityRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepository.cs,PerformExecuteSingle,The length of the statement  "            var revisionStatus = query.From.RevisionStatusType != FromClause.RevisionStatusNotSpecifiedType ? query.From.RevisionStatusType : null; " is 135.
Long Statement,Rebel.Framework.Persistence.NHibernate,EntityRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepository.cs,PerformExecuteSingle,The length of the statement  "            var aggQuery = Helper.GenerateAggregateStatusQuery(nodeIds' revisionStatus' true' query.SortClauses' query.From.HierarchyScope' query.From.ScopeStartIds' query.From.HierarchyType' query.From.ExcludeParentIds' query.From.ExcludeEntityIds); " is 238.
Long Statement,Rebel.Framework.Persistence.NHibernate,EntityRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepository.cs,PerformExecuteSingle,The length of the statement  "            filteredAggQuery = ApplyPossibleDbSortOrders(query' filteredAggQuery' out appliedSort' aggQuery.NodeTableIsJoinedAlready); " is 122.
Long Statement,Rebel.Framework.Persistence.NHibernate,EntityRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepository.cs,PerformExecuteSingle,The length of the statement  "                            throw new InvalidOperationException("Sequence contains {0} elements but query specified exactly 1 must be present.".InvariantFormat(getNumberFromNastyNHMessage)' ex); " is 166.
Long Statement,Rebel.Framework.Persistence.NHibernate,EntityRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepository.cs,PerformExecuteSingle,The length of the statement  "                        var exceptionForFirst = new InvalidOperationException("Sequence contains 0 elements when non-null First element was required"); " is 127.
Long Statement,Rebel.Framework.Persistence.NHibernate,EntityRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepository.cs,PerformExecuteSingle,The length of the statement  "                        if (canApplyOrderingInDb == ApplySortOrderInDb.CanApplyAll || canApplyOrderingInDb == ApplySortOrderInDb.NoOrderingRequired) " is 124.
Long Statement,Rebel.Framework.Persistence.NHibernate,EntityRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepository.cs,PerformExecuteSingle,The length of the statement  "                        if (!(canApplyOrderingInDb == ApplySortOrderInDb.CanApplyAll || canApplyOrderingInDb == ApplySortOrderInDb.NoOrderingRequired)) " is 127.
Long Statement,Rebel.Framework.Persistence.NHibernate,EntityRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepository.cs,PerformExecuteSingle,The length of the statement  "                        var exceptionForLast = new InvalidOperationException("Sequence contains 0 elements when non-null Last element was required"); " is 125.
Long Statement,Rebel.Framework.Persistence.NHibernate,EntityRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepository.cs,PerformExecuteSingle,The length of the statement  "                        if (canApplyOrderingInDb == ApplySortOrderInDb.CanApplyAll || canApplyOrderingInDb == ApplySortOrderInDb.NoOrderingRequired) " is 124.
Long Statement,Rebel.Framework.Persistence.NHibernate,EntityRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepository.cs,PerformExecuteSingle,The length of the statement  "                        if (!(canApplyOrderingInDb == ApplySortOrderInDb.CanApplyAll || canApplyOrderingInDb == ApplySortOrderInDb.NoOrderingRequired)) " is 127.
Long Statement,Rebel.Framework.Persistence.NHibernate,EntityRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepository.cs,TryUpdateExisting,The length of the statement  "                    //    var nodeVersions = global::NHibernate.Linq.LinqExtensionMethods.Query<NodeVersion>(InnerDataContext.NhibernateSession).Where(x => x.Node.Id == persistedEntity.Id.AsGuid); " is 176.
Long Statement,Rebel.Framework.Persistence.NHibernate,EntityRepositoryFactory,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepositoryFactory.cs,CreateEntityRepository,The length of the statement  "                    if (DependencyHelper.ProviderMetadata != null) extra += " with key " + DependencyHelper.ProviderMetadata.Alias.IfNullOrWhiteSpace("(no key)"); " is 142.
Long Statement,Rebel.Framework.Persistence.NHibernate,EntityRepositoryFactory,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepositoryFactory.cs,CreateEntityRepository,The length of the statement  "            return new EntityRepository(ProviderMetadata' schemaRepository' revisionRepository' transaction' session' FrameworkContext' isReadOnly); " is 136.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhFactoryHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhFactoryHelper.cs,GetNHibernateSessionFactory,The length of the statement  "                throw new NotSupportedException("When a single session is used to construct the EntityRepositoryFactory then no ISessionFactory is available"); " is 143.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhFactoryHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhFactoryHelper.cs,CheckFirstRunTasks,The length of the statement  "                        LogHelper.Error<NhFactoryHelper>("Could not run checks against to ensure that node status aggregates are populated"' ex); " is 121.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhFactoryHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhFactoryHelper.cs,GetNHibernateSession,The length of the statement  "                        FrameworkContext.ScopedFinalizer.AddFinalizerToScope(SingleProvidedSession' x => UnbindAndCloseSession(NhSessionFactory)); " is 122.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhLookupHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhLookupHelper.cs,Lookup,The length of the statement  "            LogHelper.TraceIfEnabled<NhLookupHelper>("Was asked for {0} with id {1} but found none"' () => typeof(T).Name' () => id); " is 121.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhProviderTransaction,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhProviderTransaction.cs,Begin,The length of the statement  "                LogHelper.TraceIfEnabled<NhProviderTransaction>("Starting new Nh transaction {0} on instance {1}"' () => getTran.GetHashCode()' () => GetHashCode()); " is 149.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhProviderTransaction,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhProviderTransaction.cs,PerformExplicitRollback,The length of the statement  "                LogHelper.TraceIfEnabled<NhProviderTransaction>("Rolling back transaction {0} on instance {1}"' () => _nhTransaction.GetHashCode()' () => GetHashCode()); " is 153.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhProviderTransaction,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhProviderTransaction.cs,PerformCommit,The length of the statement  "                        LogHelper.TraceIfEnabled<NhProviderTransaction>("Not committing Nh transaction {0} as it's nested (I'm instance {1}) (nesting level: {2})"' () => _nhTransaction.GetHashCode()' () => GetHashCode()' () => nestingLevel); " is 217.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhProviderTransaction,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhProviderTransaction.cs,PerformCommit,The length of the statement  "                    LogHelper.TraceIfEnabled<NhProviderTransaction>("Committing Nh transaction {0} on instance {1} (nesting level: {2})"' () => _nhTransaction.GetHashCode()' () => GetHashCode()' () => nestingLevel); " is 195.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhProviderTransaction,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhProviderTransaction.cs,GetNhTransaction,The length of the statement  "                LogHelper.TraceIfEnabled<NhProviderTransaction>("Constructed provider transaction {0} with NH instance {1}"' () => GetHashCode()' () => _nhTransaction.GetHashCode()); " is 166.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhProviderTransaction,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhProviderTransaction.cs,DisposeResources,The length of the statement  "                            "In dispose' automatically committing Nh transaction {0} from instance {1} because a nested transaction tried to commit (nesting level: {2})"' " is 142.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhProviderTransaction,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhProviderTransaction.cs,DisposeResources,The length of the statement  "                            // Note' we don't call rollback here because NH does an implicit rollback upon disposal' if the transaction was not already rolled back. " is 136.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhProviderTransaction,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhProviderTransaction.cs,DisposeResources,The length of the statement  "                            /* Ignore if _nhTransaction has already been disposed. Unfortunately no way to find that out from NH's ITransaction interface. */ " is 129.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,GenerateAggregateStatusQuery,The length of the statement  "            if (latestRevisionOnly && restrictToStatus == null) // Only need to filter the aggregates when a status isn't specified anyway " is 126.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,GenerateAggregateStatusQuery,The length of the statement  "                // Generate a top 1 query ordered by date (SqlLite doesn't support Having Max(inner.Date) = outer.Date without a group' and NH can't add a grouping without adding it to the select list) " is 185.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,GenerateVersionedQuery2,The length of the statement  "                Mandate.That(nodeIds.Length < 1000' x => new ArgumentOutOfRangeException("nodeIds"' "The maximum filter restriction is 1000 nodes' but {0} were supplied".InvariantFormat(nodeIds.Length))); " is 188.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,GenerateVersionedQuery2,The length of the statement  "                // If revisionStatus is null then we'll need to separately create combinedFilterBuilder in order to add the value filters " is 121.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,GenerateVersionedQuery2,The length of the statement  "                        // If we have negating statusses' then the subquery should say "where the status date is greater than the maximum date of a negating status" " is 140.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,GenerateVersionedQuery2,The length of the statement  "                        // If we don't have negating statusses' then the subquery should just say "select the max status date where the status type matches" " is 132.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,GenerateVersionedQuery2,The length of the statement  "                            // It's horrible to have to check the Sql dialect when generating the query' but Nh's dialect support doesn't allow a provider-based " is 132.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,GenerateVersionedQuery2,The length of the statement  "                            // way of telling whether the db engine supports / requires "all" to be prefix before a subquery when doing an operation. " is 121.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,GenerateVersionedQuery2,The length of the statement  "                    //.Left.JoinAlias(() => vFilter.Attributes' () => attribAlias) // Using a left join identifies to Nh that it can reuse the loaded Attributes because Nh considers them to be unaffected by the query' otherwise it issues another select from accessing NodeVersion.Attributes " is 270.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,RemoveRelation,The length of the statement  "            using (DisposableTimer.TraceDuration<NhSessionHelper>("In RemoveRelation for session " + sessionIdAsString' "End RemoveRelation for session " + sessionIdAsString)) " is 163.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,AddRelation,The length of the statement  "            using (DisposableTimer.TraceDuration<NhSessionHelper>("In AddRelation for session " + sessionIdAsString' "End AddRelation for session " + sessionIdAsString)) " is 157.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,AddRelation,The length of the statement  "                        "Some ids missing when trying to add a relation. Before adding a relation' you must call AddOrUpdate with those items (to generate Ids) or provide ids directly.\n{2}" " is 166.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,AddRelation,The length of the statement  "                        "Before adding a relation between source {0} and destination {1}' you must call AddOrUpdate with those items or they must already exist in the datastore.\n{2}" " is 159.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,AddRelation,The length of the statement  "                //var checkExists = sourceNode.OutgoingRelations.FirstOrDefault(x => x.NodeRelationType.Alias == item.Type.RelationName) " is 120.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,AddRelation,The length of the statement  "                //    checkExists = new NodeRelation { StartNode = sourceNode' EndNode = destNode' NodeRelationType = relationType' Ordinal = item.Ordinal }; " is 141.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,AddRelation,The length of the statement  "                    relationToReturn = new NodeRelation { StartNode = sourceNode' EndNode = destNode' NodeRelationType = relationType' Ordinal = item.Ordinal }; " is 140.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,CreateAndAddRelationTags,The length of the statement  "            var newRelationMetadata = incomingRelation.MetaData.Select(x => new NodeRelationTag() { Name = x.Key' Value = x.Value' NodeRelation = dbRelation }); " is 148.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,RemoveRelationsBiDirectional,The length of the statement  "            // doesn't go re-save every other node that it's related to' however at this point in time it seems that we must have 'merge' " is 125.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,RemoveRelationsBiDirectional,The length of the statement  "            // at least enabled but we also need delete and FluentNHibernate currently only has MergeSaveAllDeleteOrphan... perhaps it  " is 122.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,MapAndMerge,The length of the statement  "            using (DisposableTimer.TraceDuration<NhSessionHelper>("Start MapAndMerge for revision " + hiveId + " entity " + entityId' "End MapAndMerge")) " is 141.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,MapAndMerge,The length of the statement  "                // 16th Jan 12 (APN) NH is not flushing if the above merged entity is queried before the transaction is committed' despite " is 122.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,GetDbRelation,The length of the statement  "                .Distinct(); // This query generates a cartesian product of the NodeRelationTags and NH 'handily' gives us x * NodeRelations so can't do a Take(1) " is 146.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,PerformGetParentRelations,The length of the statement  "            //// Experiment (disabled for now due to errors with NH not returning fresh results when querying for relations in the same session) " is 132.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,PerformGetChildRelations,The length of the statement  "                //// Experiment (disabled for now due to errors with NH not returning fresh results when querying for relations in the same session) " is 132.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,PerformGetBranchRelations,The length of the statement  "                //    // Experiment (disabled for now due to errors with NH not returning fresh results when querying for relations in the same session) " is 136.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,PerformGetBranchRelations,The length of the statement  "            //    .SelectMany(x => x.StartNode.OutgoingRelations.Where(y => relationType == null || y.NodeRelationType.Alias == relationType.RelationName)) " is 143.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,PerformGetBranchRelations,The length of the statement  "                    return query.WithSubquery.WhereProperty(x => x.StartNode.Id).In(parentQueryWithType.Select(x => x.StartNode.Id).Take(1)) " is 120.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,MapNodeRelation,The length of the statement  "            return new RelationById(new HiveId(nodeRelation.StartNode.Id)' new HiveId(nodeRelation.EndNode.Id)' new RelationType(nodeRelation.NodeRelationType.Alias)' nodeRelation.Ordinal' nodeRelationTags); " is 195.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,GetNodeVersionsInBatches,The length of the statement  "                    .Fetch(x => x.NodeVersionStatuses).Lazy // NodeVersionStatusses are batch-loaded by NH in a single query' so can avoid a cartesian by excluding them here and waiting for the mapping to cause them to load in a batch later " is 220.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,GetNodeVersionsInBatches,The length of the statement  "                    .Fetch(x => x.Attributes).Lazy // The Attribute mapping allows for batch-loading' so lazy-load Attributes as we can't load them in the multicriteria / future without joining to NodeVersion anyway and repeating the rows " is 218.
Long Statement,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,GetResultVersionIds,The length of the statement  "            // We can't do a select-distinct in the db without also knowing for sure if there were any orderings applied to the query " is 121.
Long Statement,Rebel.Framework.Persistence.NHibernate,RevisionRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\RevisionRepository.cs,GetAllRevisionData,The length of the statement  "                .Select(x => x.Date' x => x.Id' x => aliasNode.DateCreated' x => aliasType.Id' x => aliasType.IsSystem' x => aliasType.Alias' x => aliasType.Name' x => aliasVersion.Id) " is 168.
Long Statement,Rebel.Framework.Persistence.NHibernate,RevisionRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\RevisionRepository.cs,GetAllRevisionData,The length of the statement  "            var changeset = new Changeset(new Branch("default")); // Ignored for the moment in the persistence layer for this provider " is 122.
Long Statement,Rebel.Framework.Persistence.NHibernate,RevisionRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\RevisionRepository.cs,TryUpdateExisting,The length of the statement  "                // (APN 6/6/12) Dangerous: this will load all the NodeVersions for the node' which could be a lot' and it'll keep them in session too: node.NodeVersions.Add(versionToEdit); " is 172.
Long Statement,Rebel.Framework.Persistence.NHibernate,RevisionRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\RevisionRepository.cs,PerformGetLatestRevisions,The length of the statement  "            return nodeIds.Select(x => revisions.SingleOrDefault(y => y.Node.Id == x)).WhereNotNull().Select(x => FrameworkContext.TypeMappers.Map<Revision<TEntity>>(x)); " is 158.
Long Statement,Rebel.Framework.Persistence.NHibernate,SchemaRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\SchemaRepository.cs,PerformGetAll,The length of the statement  "                .Distinct() // Need the Distinct() call because Nh can return 2x entities even if they are equal references (e.g. added twice to same session) " is 142.
Long Statement,Rebel.Framework.Persistence.NHibernate,SchemaRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\SchemaRepository.cs,PerformGetAncestorRelations,The length of the statement  "            return GetParentRelations(descendentId' relationType).SelectRecursive(x => GetParentRelations(x.SourceId' relationType));             " is 121.
Long Statement,Rebel.Framework.Persistence.NHibernate,SchemaRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\SchemaRepository.cs,PerformAddOrUpdate,The length of the statement  "            // BUG: (APN 26/11) The Rdbms mapping code needs a context / scope object to track multiple maps of the same item during a single mapping operation. " is 148.
Long Statement,Rebel.Framework.Persistence.NHibernate,SchemaRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\SchemaRepository.cs,PerformAddOrUpdate,The length of the statement  "            // For example' if a schema comes in to this method with 2x AttributeDefintions both referring to 1x NEW AttributeType' 2x AttributeTypes " is 137.
Long Statement,Rebel.Framework.Persistence.NHibernate,SchemaRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\SchemaRepository.cs,PerformAddOrUpdate,The length of the statement  "            // will be saved because during the mapping operation the AttributeType had no id' and so a new one was created - but there's no way of tracking " is 144.
Long Statement,Rebel.Framework.Persistence.NHibernate,SchemaRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\SchemaRepository.cs,PerformAddOrUpdate,The length of the statement  "            // that the AttributeType has now been "mapped" and is pending an Id' so on the second AttributeDefinition it would cause the AttributeType " is 139.
Long Statement,Rebel.Framework.Persistence.NHibernate,SchemaRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\SchemaRepository.cs,PerformAddOrUpdate,The length of the statement  "            // For now' we'll split the entities into their consituent parts and call the normal save methods independently for AttributeTypes " is 130.
Long Statement,Rebel.Framework.Persistence.NHibernate,SchemaRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\SchemaRepository.cs,TryUpdateExisting,The length of the statement  "                    //    var nodeVersions = global::NHibernate.Linq.LinqExtensionMethods.Query<NodeVersion>(InnerDataContext.NhibernateSession).Where(x => x.Node.Id == persistedEntity.Id.AsGuid); " is 176.
Long Statement,Rebel.Framework.Persistence.NHibernate,SchemaRepositoryFactory,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\SchemaRepositoryFactory.cs,GetRepository,The length of the statement  "            return new SchemaRepository(ProviderMetadata' RevisionRepositoryFactory.GetRepository()' transaction' session' FrameworkContext' isReadonly); " is 141.
Long Statement,Rebel.Framework.Persistence.NHibernate,SchemaRepositoryFactory,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\SchemaRepositoryFactory.cs,CreateSchemaRepository,The length of the statement  "            //TODO: When we support schema revisions' we'll have to pass the existing transaction into the GetRepository method just  " is 120.
Long Statement,Rebel.Framework.Persistence.NHibernate,SchemaRepositoryFactory,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\SchemaRepositoryFactory.cs,CreateSchemaRepository,The length of the statement  "            return new SchemaRepository(ProviderMetadata' RevisionRepositoryFactory.GetRepository()' transaction' session' FrameworkContext' isReadOnly); " is 141.
Long Statement,Rebel.Framework.Persistence.NHibernate.OrmConfig.FluentMappings.DialectMitigation,NormalizedDateTimeUserType,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\OrmConfig\FluentMappings\DialectMitigation\NormalizedDateTimeUserType.cs,NullSafeSet,The length of the statement  "                    LogHelper.Warn<NormalizedDateTimeUserType>("Failure to parse DateTime '{0}' from SQL.\n{1}\n{2}"' paramVal' e.Message' e); " is 122.
Complex Conditional,Rebel.Framework.Persistence.NHibernate.Linq,NhAggCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggCriteriaVisitor.cs,VisitFieldPredicate,The conditional expression  "!tryParseResult.Success || tryParseResult.Result.ProviderGroupRoot == null || tryParseResult.Result.ProviderId == null ||                              (tryParseResult.Result.ProviderGroupRoot.AbsoluteUri != "storage://" && tryParseResult.Result.ProviderId != "templates")"  is complex.
Complex Conditional,Rebel.Framework.Persistence.NHibernate.Linq,NhAggregateCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggregateCriteriaVisitor.cs,VisitFieldPredicate,The conditional expression  "!tryParseResult.Success || tryParseResult.Result.ProviderGroupRoot == null || tryParseResult.Result.ProviderId == null ||                              (tryParseResult.Result.ProviderGroupRoot.AbsoluteUri != "storage://" && tryParseResult.Result.ProviderId != "templates")"  is complex.
Complex Conditional,Rebel.Framework.Persistence.NHibernate.Linq,NhCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhCriteriaVisitor.cs,VisitFieldPredicate,The conditional expression  "!tryParseResult.Success || tryParseResult.Result.ProviderGroupRoot == null || tryParseResult.Result.ProviderId == null ||                              (tryParseResult.Result.ProviderGroupRoot.AbsoluteUri != "storage://" && tryParseResult.Result.ProviderId != "templates")"  is complex.
Complex Conditional,Rebel.Framework.Persistence.NHibernate,NhProviderTransaction,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhProviderTransaction.cs,PerformExplicitRollback,The conditional expression  "!WasRolledBack && !WasCommitted && IsActive && _nhTransaction != null"  is complex.
Magic Number,Rebel.Framework.Persistence.NHibernate.Dependencies,NHibernateConfigBuilder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Dependencies\NHibernateConfigBuilder.cs,GetPersistenceConfigurer,The following statement contains a magic number: switch (nhDriver)              {                  default:                  case SupportedNHDrivers.MsSql2008:                      persistenceConfigurer = MsSqlConfiguration                          .MsSql2008                          .ConnectionString(connString)                          .DefaultSchema("dbo")                          //.FormatSql()                          .IsolationLevel(IsolationLevel.ReadCommitted)                          .UseOuterJoin()                          .UseReflectionOptimizer()                          .Cache(x =>                                 x//.UseMinimalPuts()                                     .UseQueryCache()                                     .ProviderClass(                                         typeof (global::NHibernate.Caches.SysCache2.SysCacheProvider).AssemblyQualifiedName));                      break;                  case SupportedNHDrivers.SqlLite:                      persistenceConfigurer = SQLiteConfiguration.Standard.ConnectionString(connString)                          .Cache(x =>                                 x//.UseMinimalPuts()                                     .UseQueryCache()                                     .ProviderClass(                                         typeof(global::NHibernate.Caches.SysCache2.SysCacheProvider).AssemblyQualifiedName));                      break;                  case SupportedNHDrivers.MsSqlCe4:                      var directoryName = Path.GetDirectoryName(Assembly.GetExecutingAssembly().GetName().CodeBase);                      var directoryPath = new Uri(directoryName).LocalPath;                      var connectionString = connString.Replace("{bin}"' directoryPath);                        persistenceConfigurer = MsSqlCe4Configuration                          .Standard                          .ConnectionString(connectionString)                          .AdoNetBatchSize(20)                          .Cache(x =>                                 x//.UseMinimalPuts()                                     .UseQueryCache()                                     .ProviderClass(                                         typeof(global::NHibernate.Caches.SysCache2.SysCacheProvider).AssemblyQualifiedName));                        break;                  case SupportedNHDrivers.MySql:                      persistenceConfigurer = MySQLConfiguration.Standard.ConnectionString(connString)                          .Cache(x =>                                 x//.UseMinimalPuts()                                     .UseQueryCache()                                     .ProviderClass(                                         typeof(global::NHibernate.Caches.SysCache2.SysCacheProvider).AssemblyQualifiedName));                        break;                  case SupportedNHDrivers.Unknown:                      throw new InvalidOperationException(                          "Cannot get FluentNHibernate Persistence Configurer as the call to this method didn't specify a known driver");              }
Magic Number,Rebel.Framework.Persistence.NHibernate,EntityRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepository.cs,ApplySkipOrTakeInDbIfPossible,The following statement contains a magic number: switch (filter.ResultFilterType)                      {                          case ResultFilterType.Skip:                              filteredAggQuery =                                  (IQueryOver<AggregateNodeStatus' AggregateNodeStatus>)                                  filteredAggQuery.Skip(filter.SkipCount).Take(9999);                              modified = true;                              break;                          case ResultFilterType.Take:                              filteredAggQuery =                                  (IQueryOver<AggregateNodeStatus' AggregateNodeStatus>)                                  filteredAggQuery.Take(filter.TakeCount);                              modified = true;                              break;                      }
Magic Number,Rebel.Framework.Persistence.NHibernate,EntityRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepository.cs,PerformExecuteScalar,The following statement contains a magic number: switch (filter.ResultFilterType)                  {                      case ResultFilterType.Take:                          filteredAggQuery = (IQueryOver<AggregateNodeStatus' AggregateNodeStatus>)filteredAggQuery.Take(filter.TakeCount);                          requiresLoadingIds = true;                          break;                      case ResultFilterType.Skip:                          filteredAggQuery = (IQueryOver<AggregateNodeStatus' AggregateNodeStatus>)filteredAggQuery.Skip(filter.SkipCount).Take(99999); // Must include a Take in order for NH to generate the offset                          requiresLoadingIds = true;                          break;                      case ResultFilterType.Count:                          var count = GetCount(filteredAggQuery' requiresLoadingIds);                            return (T)(object)count;                      case ResultFilterType.Any:                          var any = GetCount(filteredAggQuery' requiresLoadingIds) > 0;                            return (T)(object)any;                      case ResultFilterType.All:                          var countAll = GetCount(aggQuery.GeneratedQuery' requiresLoadingIds);                          var countFiltered = GetCount(filteredAggQuery' requiresLoadingIds);                          var all = countAll == countFiltered;                            return (T)(object)all;                  }
Magic Number,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,GenerateAggregateStatusQuery,The following statement contains a magic number: var benchDate = Projections.Constant(new DateTime(1980' 1' 1));
Magic Number,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,GenerateVersionedQuery2,The following statement contains a magic number: Mandate.That(nodeIds.Length < 1000' x => new ArgumentOutOfRangeException("nodeIds"' "The maximum filter restriction is 1000 nodes' but {0} were supplied".InvariantFormat(nodeIds.Length)));
Magic Number,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,GenerateVersionedQuery2,The following statement contains a magic number: excludeNegatingStatusses = QueryOver.Of(() => negHistFilter)                              .JoinAlias(() => negHistFilter.NodeVersionStatusType' () => negTypeFilter)                              .JoinAlias(() => negHistFilter.NodeVersion' () => negVersion)                              .Where(() => negTypeFilter.Alias.IsIn(negatingAliases))                              .And(() => filterVersion.Node == negVersion.Node)                              .Select(Projections.SqlFunction("coalesce"'                                                              NHibernateUtil.DateTime'                                                              Projections.Max<NodeVersionStatusHistory>(x => x.Date)'                                                              new ConstantProjection(new DateTime(1980' 1' 1))));
Magic Number,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,GenerateVersionedQuery2,The following statement contains a magic number: var finaliseCombinedFilter = combinedFilterBuilder.Select(x => x.Id).Take(100);
Magic Number,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,GetNodeVersionsInBatches,The following statement contains a magic number: var idsForBatching = idPairs.Distinct().ToArray().InGroupsOf(200);
Magic Number,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,GetNodeVersionsInBatches,The following statement contains a magic number: var batchedIds = matchingIds.InGroupsOf(200);
Magic Number,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,GetResultVersionAndSchemaIds,The following statement contains a magic number: var schemaIds = filteredAggQuery                  .JoinAlias(x => x.NodeVersion' () => version)                  .Select(x => version.AttributeSchemaDefinition.Id' x => x.NodeVersion.Id' x => x.Node.Id)                  .Future<object[]>().Distinct().ToList().Select(x => new[] { (Guid)x[0]' (Guid)x[1]' (Guid)x[2] }).ToArray();
Magic Number,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,GetResultVersionAndSchemaIds,The following statement contains a magic number: var forReturn = schemaIds.Select(x => new VersionAndSchemaId()                  {                      SchemaId = x[0]'                      VersionId = x[1]'                      NodeId = x[2]                  }).ToArray();
Magic Number,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,RunAggregateForNodeIds,The following statement contains a magic number: var updatedBatches = nodeIds.InGroupsOf(500);
Magic Number,Rebel.Framework.Persistence.NHibernate,RevisionRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\RevisionRepository.cs,GetAllRevisionData,The following statement contains a magic number: var entityStatusLog = Helper.NhSession.QueryOver<NodeVersionStatusHistory>(() => aliasHistory)                  .OrderBy(x => x.Date).Desc                  .JoinQueryOver(x => x.NodeVersionStatusType' () => aliasType)                  .JoinQueryOver(x => aliasHistory.NodeVersion' () => aliasVersion)                  .JoinQueryOver(x => x.Node' () => aliasNode)                  .Where(x => x.Id == (Guid)entityUri.Value)                  .Fetch(x => aliasHistory.NodeVersionStatusType).Eager                  .Select(x => x.Date' x => x.Id' x => aliasNode.DateCreated' x => aliasType.Id' x => aliasType.IsSystem' x => aliasType.Alias' x => aliasType.Name' x => aliasVersion.Id)                  .List<object[]>()                  .Select(col => new                      {                          Date = (DateTimeOffset)col[0]'                          Id = (Guid)col[1]'                          DateCreated = (DateTimeOffset)col[2]'                          TypeId = (Guid)col[3]'                          TypeIsSystem = (bool)col[4]'                          TypeAlias = (string)col[5]'                          TypeName = (string)col[6]'                          VersionId = (Guid)col[7]                      });
Magic Number,Rebel.Framework.Persistence.NHibernate,RevisionRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\RevisionRepository.cs,GetAllRevisionData,The following statement contains a magic number: var entityStatusLog = Helper.NhSession.QueryOver<NodeVersionStatusHistory>(() => aliasHistory)                  .OrderBy(x => x.Date).Desc                  .JoinQueryOver(x => x.NodeVersionStatusType' () => aliasType)                  .JoinQueryOver(x => aliasHistory.NodeVersion' () => aliasVersion)                  .JoinQueryOver(x => x.Node' () => aliasNode)                  .Where(x => x.Id == (Guid)entityUri.Value)                  .Fetch(x => aliasHistory.NodeVersionStatusType).Eager                  .Select(x => x.Date' x => x.Id' x => aliasNode.DateCreated' x => aliasType.Id' x => aliasType.IsSystem' x => aliasType.Alias' x => aliasType.Name' x => aliasVersion.Id)                  .List<object[]>()                  .Select(col => new                      {                          Date = (DateTimeOffset)col[0]'                          Id = (Guid)col[1]'                          DateCreated = (DateTimeOffset)col[2]'                          TypeId = (Guid)col[3]'                          TypeIsSystem = (bool)col[4]'                          TypeAlias = (string)col[5]'                          TypeName = (string)col[6]'                          VersionId = (Guid)col[7]                      });
Magic Number,Rebel.Framework.Persistence.NHibernate,RevisionRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\RevisionRepository.cs,GetAllRevisionData,The following statement contains a magic number: var entityStatusLog = Helper.NhSession.QueryOver<NodeVersionStatusHistory>(() => aliasHistory)                  .OrderBy(x => x.Date).Desc                  .JoinQueryOver(x => x.NodeVersionStatusType' () => aliasType)                  .JoinQueryOver(x => aliasHistory.NodeVersion' () => aliasVersion)                  .JoinQueryOver(x => x.Node' () => aliasNode)                  .Where(x => x.Id == (Guid)entityUri.Value)                  .Fetch(x => aliasHistory.NodeVersionStatusType).Eager                  .Select(x => x.Date' x => x.Id' x => aliasNode.DateCreated' x => aliasType.Id' x => aliasType.IsSystem' x => aliasType.Alias' x => aliasType.Name' x => aliasVersion.Id)                  .List<object[]>()                  .Select(col => new                      {                          Date = (DateTimeOffset)col[0]'                          Id = (Guid)col[1]'                          DateCreated = (DateTimeOffset)col[2]'                          TypeId = (Guid)col[3]'                          TypeIsSystem = (bool)col[4]'                          TypeAlias = (string)col[5]'                          TypeName = (string)col[6]'                          VersionId = (Guid)col[7]                      });
Magic Number,Rebel.Framework.Persistence.NHibernate,RevisionRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\RevisionRepository.cs,GetAllRevisionData,The following statement contains a magic number: var entityStatusLog = Helper.NhSession.QueryOver<NodeVersionStatusHistory>(() => aliasHistory)                  .OrderBy(x => x.Date).Desc                  .JoinQueryOver(x => x.NodeVersionStatusType' () => aliasType)                  .JoinQueryOver(x => aliasHistory.NodeVersion' () => aliasVersion)                  .JoinQueryOver(x => x.Node' () => aliasNode)                  .Where(x => x.Id == (Guid)entityUri.Value)                  .Fetch(x => aliasHistory.NodeVersionStatusType).Eager                  .Select(x => x.Date' x => x.Id' x => aliasNode.DateCreated' x => aliasType.Id' x => aliasType.IsSystem' x => aliasType.Alias' x => aliasType.Name' x => aliasVersion.Id)                  .List<object[]>()                  .Select(col => new                      {                          Date = (DateTimeOffset)col[0]'                          Id = (Guid)col[1]'                          DateCreated = (DateTimeOffset)col[2]'                          TypeId = (Guid)col[3]'                          TypeIsSystem = (bool)col[4]'                          TypeAlias = (string)col[5]'                          TypeName = (string)col[6]'                          VersionId = (Guid)col[7]                      });
Magic Number,Rebel.Framework.Persistence.NHibernate,RevisionRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\RevisionRepository.cs,GetAllRevisionData,The following statement contains a magic number: var entityStatusLog = Helper.NhSession.QueryOver<NodeVersionStatusHistory>(() => aliasHistory)                  .OrderBy(x => x.Date).Desc                  .JoinQueryOver(x => x.NodeVersionStatusType' () => aliasType)                  .JoinQueryOver(x => aliasHistory.NodeVersion' () => aliasVersion)                  .JoinQueryOver(x => x.Node' () => aliasNode)                  .Where(x => x.Id == (Guid)entityUri.Value)                  .Fetch(x => aliasHistory.NodeVersionStatusType).Eager                  .Select(x => x.Date' x => x.Id' x => aliasNode.DateCreated' x => aliasType.Id' x => aliasType.IsSystem' x => aliasType.Alias' x => aliasType.Name' x => aliasVersion.Id)                  .List<object[]>()                  .Select(col => new                      {                          Date = (DateTimeOffset)col[0]'                          Id = (Guid)col[1]'                          DateCreated = (DateTimeOffset)col[2]'                          TypeId = (Guid)col[3]'                          TypeIsSystem = (bool)col[4]'                          TypeAlias = (string)col[5]'                          TypeName = (string)col[6]'                          VersionId = (Guid)col[7]                      });
Magic Number,Rebel.Framework.Persistence.NHibernate,RevisionRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\RevisionRepository.cs,GetAllRevisionData,The following statement contains a magic number: var entityStatusLog = Helper.NhSession.QueryOver<NodeVersionStatusHistory>(() => aliasHistory)                  .OrderBy(x => x.Date).Desc                  .JoinQueryOver(x => x.NodeVersionStatusType' () => aliasType)                  .JoinQueryOver(x => aliasHistory.NodeVersion' () => aliasVersion)                  .JoinQueryOver(x => x.Node' () => aliasNode)                  .Where(x => x.Id == (Guid)entityUri.Value)                  .Fetch(x => aliasHistory.NodeVersionStatusType).Eager                  .Select(x => x.Date' x => x.Id' x => aliasNode.DateCreated' x => aliasType.Id' x => aliasType.IsSystem' x => aliasType.Alias' x => aliasType.Name' x => aliasVersion.Id)                  .List<object[]>()                  .Select(col => new                      {                          Date = (DateTimeOffset)col[0]'                          Id = (Guid)col[1]'                          DateCreated = (DateTimeOffset)col[2]'                          TypeId = (Guid)col[3]'                          TypeIsSystem = (bool)col[4]'                          TypeAlias = (string)col[5]'                          TypeName = (string)col[6]'                          VersionId = (Guid)col[7]                      });
Magic Number,Rebel.Framework.Persistence.NHibernate.OrmConfig.FluentMappings,AttributeDefinitionGroupMap,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\OrmConfig\FluentMappings\AttributeDefinitionGroupMap.cs,AttributeDefinitionGroupMap,The following statement contains a magic number: Map(x => x.Alias)                  .Access.Property()                  .Not.Nullable()                  .Length(64)                  .Index(this.GenerateIndexName(x => x.Alias));
Magic Number,Rebel.Framework.Persistence.NHibernate.OrmConfig.FluentMappings,AttributeDefinitionMap,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\OrmConfig\FluentMappings\AttributeDefinitionMap.cs,AttributeDefinitionMap,The following statement contains a magic number: Map(x => x.Alias)                 .Access.CamelCaseField(Prefix.Underscore)                 .Not.Nullable()                 .Length(64)                 .Index(this.GenerateIndexName(x => x.Alias));
Magic Number,Rebel.Framework.Persistence.NHibernate.OrmConfig.FluentMappings,AttributeDefinitionMap,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\OrmConfig\FluentMappings\AttributeDefinitionMap.cs,AttributeDefinitionMap,The following statement contains a magic number: Map(x => x.Name).Access.CamelCaseField(Prefix.Underscore)  		        .Length(128);
Magic Number,Rebel.Framework.Persistence.NHibernate.OrmConfig.FluentMappings,AttributeMap,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\OrmConfig\FluentMappings\AttributeMap.cs,AttributeMap,The following statement contains a magic number: HasMany(x => x.AttributeDecimalValues)                  .Access.CamelCaseField(Prefix.Underscore)                  .Cascade.MergeSaveAllDeleteOrphan()                  .Fetch.Select().ExtraLazyLoad()                  .AsSet()                  .Inverse()                  .BatchSize(500)                  .Key(x =>                  {                      x.Column("AttributeId");                      x.ForeignKey(this.GenerateFkName(y => y.AttributeDecimalValues));                  });
Magic Number,Rebel.Framework.Persistence.NHibernate.OrmConfig.FluentMappings,AttributeMap,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\OrmConfig\FluentMappings\AttributeMap.cs,AttributeMap,The following statement contains a magic number: HasMany(x => x.AttributeDateValues)  		        .Access.CamelCaseField(Prefix.Underscore)                  .Cascade.MergeSaveAllDeleteOrphan()                  .Fetch.Select().ExtraLazyLoad()  		        .AsSet()                  .Inverse()                  .BatchSize(500)                  .Key(x =>                  {                      x.Column("AttributeId");                      x.ForeignKey(this.GenerateFkName(y => y.AttributeDateValues));                  });
Magic Number,Rebel.Framework.Persistence.NHibernate.OrmConfig.FluentMappings,AttributeMap,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\OrmConfig\FluentMappings\AttributeMap.cs,AttributeMap,The following statement contains a magic number: HasMany(x=>x.AttributeIntegerValues)  				.Access.CamelCaseField(Prefix.Underscore)                  .Cascade.MergeSaveAllDeleteOrphan()                  .Fetch.Select().ExtraLazyLoad()  				.AsSet()                  .Inverse()                  .BatchSize(500)                  .Key(x =>                  {                      x.Column("AttributeId");                      x.ForeignKey(this.GenerateFkName(y => y.AttributeIntegerValues));                  });
Magic Number,Rebel.Framework.Persistence.NHibernate.OrmConfig.FluentMappings,AttributeMap,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\OrmConfig\FluentMappings\AttributeMap.cs,AttributeMap,The following statement contains a magic number: HasMany(x=>x.AttributeLongStringValues)  				.Access.CamelCaseField(Prefix.Underscore)                  .Cascade.MergeSaveAllDeleteOrphan()  				.Fetch.Select()                  .LazyLoad() // Lazy-load long strings  				.AsSet()  				.Inverse()                  .BatchSize(500)                  .Key(x =>                  {                      x.Column("AttributeId");                      x.ForeignKey(this.GenerateFkName(y => y.AttributeLongStringValues));                  });
Magic Number,Rebel.Framework.Persistence.NHibernate.OrmConfig.FluentMappings,AttributeMap,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\OrmConfig\FluentMappings\AttributeMap.cs,AttributeMap,The following statement contains a magic number: HasMany(x=>x.AttributeStringValues)  				.Access.CamelCaseField(Prefix.Underscore)  				.Cascade.MergeSaveAllDeleteOrphan()  				.Fetch.Select().LazyLoad()  				.AsSet()                  .Inverse()                  .BatchSize(500)                  .Key(x =>                  {                      x.Column("AttributeId");                      x.ForeignKey(this.GenerateFkName(y => y.AttributeStringValues));                  });
Magic Number,Rebel.Framework.Persistence.NHibernate.OrmConfig.FluentMappings,AttributeSchemaDefinitionMap,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\OrmConfig\FluentMappings\AttributeSchemaDefinitionMap.cs,AttributeSchemaDefinitionMap,The following statement contains a magic number: Map(x => x.Alias)                 .Access.Property()                 .Not.Nullable()                 .Length(64)                 .Index(this.GenerateIndexName(x => x.Alias));
Magic Number,Rebel.Framework.Persistence.NHibernate.OrmConfig.FluentMappings,AttributeSchemaDefinitionMap,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\OrmConfig\FluentMappings\AttributeSchemaDefinitionMap.cs,AttributeSchemaDefinitionMap,The following statement contains a magic number: Map(x => x.SchemaType)                  .Access.CamelCaseField(Prefix.Underscore)                  .Length(100)                  .Not.Nullable()                  .Index(this.GenerateIndexName(x => x.SchemaType));
Magic Number,Rebel.Framework.Persistence.NHibernate.OrmConfig.FluentMappings,AttributeSchemaDefinitionMap,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\OrmConfig\FluentMappings\AttributeSchemaDefinitionMap.cs,AttributeSchemaDefinitionMap,The following statement contains a magic number: HasMany(x => x.AttributeDefinitions)                  .Access.CamelCaseField(Prefix.Underscore)                  .Cascade.MergeSaveAllDeleteOrphan()                  .Fetch.Select().BatchSize(10)                  .AsSet()                  .Inverse()                  //.LazyLoad()                  .Key(x =>                      {                          x.Column("AttributeSchemaDefinitionId");                          x.ForeignKey(this.GenerateFkName(y => y.AttributeDefinitions));                      });
Magic Number,Rebel.Framework.Persistence.NHibernate.OrmConfig.FluentMappings,AttributeSchemaDefinitionMap,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\OrmConfig\FluentMappings\AttributeSchemaDefinitionMap.cs,AttributeSchemaDefinitionMap,The following statement contains a magic number: HasMany(x => x.AttributeDefinitionGroups)                  .Access.CamelCaseField(Prefix.Underscore)                  .Cascade.MergeSaveAllDeleteOrphan()                  .Fetch.Select().BatchSize(10)                  .AsSet()                  .Inverse()                  .LazyLoad()                  .Key(x =>                  {                      x.Column("AttributeSchemaDefinitionId");                      x.ForeignKey(this.GenerateFkName(y => y.AttributeDefinitionGroups));                  });
Magic Number,Rebel.Framework.Persistence.NHibernate.OrmConfig.FluentMappings,LocaleMap,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\OrmConfig\FluentMappings\LocaleMap.cs,LocaleMap,The following statement contains a magic number: Map(x => x.Alias)                 .Access.CamelCaseField(Prefix.Underscore)                 .Not.Nullable()                 .Length(64)                 .Index(this.GenerateIndexName(x => x.Alias));
Magic Number,Rebel.Framework.Persistence.NHibernate.OrmConfig.FluentMappings,NodeMap,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\OrmConfig\FluentMappings\NodeMap.cs,NodeMap,The following statement contains a magic number: HasMany(x => x.IncomingRelationCaches)                  .Access.CamelCaseField(Prefix.Underscore)                  //.Cascade.AllDeleteOrphan().ForeignKeyCascadeOnDelete()                  .Cascade.MergeSaveAllDeleteOrphan()//.ForeignKeyCascadeOnDelete()                  //.Cascade.All()                  //.Cascade.Merge()                  .Fetch.Select()                  .AsSet()                  .Inverse()                  .BatchSize(20)                  .LazyLoad()                  .Key(x =>                  {                      x.Column("EndNodeId");                      x.ForeignKey(this.GenerateFkName(y => y.IncomingRelationCaches));                  })                  .Cache.IncludeAll().ReadWrite();
Magic Number,Rebel.Framework.Persistence.NHibernate.OrmConfig.FluentMappings,NodeMap,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\OrmConfig\FluentMappings\NodeMap.cs,NodeMap,The following statement contains a magic number: HasMany(x => x.IncomingRelations)                  .Access.CamelCaseField(Prefix.Underscore)                  //.Cascade.AllDeleteOrphan().ForeignKeyCascadeOnDelete()                  .Cascade.MergeSaveAllDeleteOrphan() //.ForeignKeyCascadeOnDelete()                  //.Cascade.All()                  //.Cascade.Merge()                  .Fetch.Select()                  .AsSet()                  .Inverse()                  .BatchSize(20)                  .LazyLoad()                  .Key(x =>                  {                      x.Column("EndNodeId");                      x.ForeignKey(this.GenerateFkName(y => y.IncomingRelations));                  })                  ;
Magic Number,Rebel.Framework.Persistence.NHibernate.OrmConfig.FluentMappings,NodeMap,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\OrmConfig\FluentMappings\NodeMap.cs,NodeMap,The following statement contains a magic number: HasMany(x => x.OutgoingRelationCaches)                  .Access.CamelCaseField(Prefix.Underscore)                  //.Cascade.AllDeleteOrphan().ForeignKeyCascadeOnDelete()                  .Cascade.MergeSaveAllDeleteOrphan()//.ForeignKeyCascadeOnDelete()                  //.Cascade.All()                  //.Cascade.Merge()                  .Fetch.Select()                  .AsSet()                  .Inverse()                  .BatchSize(20)                  .LazyLoad()                  .Key(x =>                  {                      x.Column("StartNodeId");                      x.ForeignKey(this.GenerateFkName(y => y.OutgoingRelationCaches));                  })                  .Cache.IncludeAll().ReadWrite();
Magic Number,Rebel.Framework.Persistence.NHibernate.OrmConfig.FluentMappings,NodeMap,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\OrmConfig\FluentMappings\NodeMap.cs,NodeMap,The following statement contains a magic number: HasMany(x => x.OutgoingRelations)                  .Access.CamelCaseField(Prefix.Underscore)                  //.Cascade.AllDeleteOrphan().ForeignKeyCascadeOnDelete()                  .Cascade.MergeSaveAllDeleteOrphan() //.ForeignKeyCascadeOnDelete()                  //.Cascade.All()                  //.Cascade.Merge()                  .Fetch.Select()                  .AsSet()                  .Inverse()                  .BatchSize(20)                  .LazyLoad()                  .Key(x =>                  {                      x.Column("StartNodeId");                      x.ForeignKey(this.GenerateFkName(y => y.OutgoingRelations));                  })                  ;
Magic Number,Rebel.Framework.Persistence.NHibernate.OrmConfig.FluentMappings,NodeMap,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\OrmConfig\FluentMappings\NodeMap.cs,NodeMap,The following statement contains a magic number: HasMany(x => x.NodeVersions)                  .Access.Property()                  .Cascade.MergeSaveAllDeleteOrphan()//.ForeignKeyCascadeOnDelete()                  .Fetch.Select()                  .AsSet()                  .Inverse()                  .BatchSize(20)                  .LazyLoad()                  .Key(x =>                  {                      x.Column("NodeId");                      x.ForeignKey(this.GenerateFkName(y => y.NodeVersions));                  })                  .Cache.IncludeAll().ReadWrite();
Magic Number,Rebel.Framework.Persistence.NHibernate.OrmConfig.FluentMappings,NodeRelationMap,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\OrmConfig\FluentMappings\NodeRelationMap.cs,NodeRelationMap,The following statement contains a magic number: HasMany(x => x.NodeRelationTags)  		        .Access.CamelCaseField(Prefix.Underscore)  		        .Cascade.MergeSaveAllDeleteOrphan()  		        .Fetch.Join()  		        .AsSet()  		        .Inverse()                  .BatchSize(20)  		        //.LazyLoad()  		        //.KeyColumns.Add("NodeRelationId")                  .Key(x =>                  {                      x.Column("NodeRelationId");                      x.ForeignKey(this.GenerateFkName(y => y.NodeRelationTags));                  })  		        .Cache.IncludeAll().ReadWrite();
Magic Number,Rebel.Framework.Persistence.NHibernate.OrmConfig.FluentMappings,NodeRelationTagMap,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\OrmConfig\FluentMappings\NodeRelationTagMap.cs,NodeRelationTagMap,The following statement contains a magic number: Map(x => x.Name).Access.CamelCaseField(Prefix.Underscore)                  .Not.Nullable()                  .Length(64)  		        .Index(this.GenerateIndexName(x => x.Name));
Magic Number,Rebel.Framework.Persistence.NHibernate.OrmConfig.FluentMappings,NodeRelationTypeMap,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\OrmConfig\FluentMappings\NodeRelationTypeMap.cs,NodeRelationTypeMap,The following statement contains a magic number: Map(x => x.Alias)  		        .Not.Nullable()  		        .Unique()  		        .Length(64)  		        .Index(this.GenerateIndexName(x => x.Alias))  		        .Access.CamelCaseField(Prefix.Underscore);
Magic Number,Rebel.Framework.Persistence.NHibernate.OrmConfig.FluentMappings,NodeVersionMap,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\OrmConfig\FluentMappings\NodeVersionMap.cs,NodeVersionMap,The following statement contains a magic number: HasMany(x => x.Attributes)                  .Access.CamelCaseField(Prefix.Underscore)                  .Cascade.MergeSaveAllDeleteOrphan()                  .Fetch.Join() // We rarely need a NodeVersion without its Attributes                  .AsSet()                  .Inverse()                  .BatchSize(500)                  //.LazyLoad() // Not relevant when using a join fetch                  //.LazyLoad().Fetch.Select()                  //.KeyColumns.Add("NodeVersionId");                  .Key(x =>                  {                      x.Column("NodeVersionId");                      x.ForeignKey(this.GenerateFkName(y => y.Attributes));                  });
Magic Number,Rebel.Framework.Persistence.NHibernate.OrmConfig.FluentMappings,NodeVersionMap,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\OrmConfig\FluentMappings\NodeVersionMap.cs,NodeVersionMap,The following statement contains a magic number: HasMany(x => x.NodeVersionSchedules)                  .Access.CamelCaseField(Prefix.Underscore)                  .Cascade.MergeSaveAllDeleteOrphan()                  .Fetch.Select()                  .BatchSize(5)                  .AsSet()                  .Inverse()                  .LazyLoad()                  .Key(x =>                  {                      x.Column("NodeVersionId");                      x.ForeignKey(this.GenerateFkName(y => y.NodeVersionSchedules));                  });
Magic Number,Rebel.Framework.Persistence.NHibernate.OrmConfig.FluentMappings,NodeVersionMap,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\OrmConfig\FluentMappings\NodeVersionMap.cs,NodeVersionMap,The following statement contains a magic number: HasMany(x => x.NodeVersionStatuses)                  .Access.CamelCaseField(Prefix.Underscore)                  .Cascade.MergeSaveAllDeleteOrphan()                  .Fetch.Select()                  .BatchSize(20)                  .AsSet()                  .Inverse()                  //.LazyLoad()                  .Key(x =>                  {                      x.Column("NodeVersionId");                      x.ForeignKey(this.GenerateFkName(y => y.NodeVersionStatuses));                  });
Magic Number,Rebel.Framework.Persistence.NHibernate.OrmConfig.FluentMappings,NodeVersionStatusTypeMap,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\OrmConfig\FluentMappings\NodeVersionStatusTypeMap.cs,NodeVersionStatusTypeMap,The following statement contains a magic number: Map(x => x.Alias).Access.CamelCaseField(Prefix.Underscore)                  .Length(16)                  .Unique()                  .Not.Nullable()  		        .Index(this.GenerateIndexName(x => x.Alias));
Missing Default,Rebel.Framework.Persistence.NHibernate.Dependencies,NHibernateConfigBuilder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Dependencies\NHibernateConfigBuilder.cs,AddConventions,The following switch statement is missing a default case: switch (nhDriver)              {                  case SupportedNHDrivers.SqlLite:                  case SupportedNHDrivers.MsSqlCe4:                  case SupportedNHDrivers.MySql:                      conventions.Add(new NormalizedDateTimeUserTypeConvention()' new NormalizedNullableDateTimeUserTypeConvention());                      break;              }
Missing Default,Rebel.Framework.Persistence.NHibernate.Linq,NhAggCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggCriteriaVisitor.cs,VisitFieldPredicate,The following switch statement is missing a default case: switch (dataSerializationTypese)                  {                      case DataSerializationTypes.SmallInt:                      case DataSerializationTypes.LargeInt:                      case DataSerializationTypes.Boolean:                          propertyExpression = () => integerVal.Value;                          subkeyExpression = () => integerVal.ValueKey;                          validClauseTypes = new List<ValuePredicateType>()                              {                                  ValuePredicateType.Equal'                                  ValuePredicateType.GreaterThan'                                  ValuePredicateType.GreaterThanOrEqual'                                  ValuePredicateType.LessThan'                                  ValuePredicateType.LessThanOrEqual'                                  ValuePredicateType.NotEqual                              };                          break;                      case DataSerializationTypes.Decimal:                          propertyExpression = () => decimalVal.Value;                          subkeyExpression = () => decimalVal.ValueKey;                          validClauseTypes = new List<ValuePredicateType>()                              {                                  ValuePredicateType.Equal'                                  ValuePredicateType.GreaterThan'                                  ValuePredicateType.GreaterThanOrEqual'                                  ValuePredicateType.LessThan'                                  ValuePredicateType.LessThanOrEqual'                                  ValuePredicateType.NotEqual                              };                          break;                      case DataSerializationTypes.String:                          propertyExpression = () => stringVal.Value;                          subkeyExpression = () => stringVal.ValueKey;                          validClauseTypes = new List<ValuePredicateType>()                              {                                  ValuePredicateType.Equal'                                  ValuePredicateType.NotEqual'                                  ValuePredicateType.Contains'                                  ValuePredicateType.StartsWith'                                  ValuePredicateType.EndsWith'                                  ValuePredicateType.MatchesWildcard                              };                          break;                      case DataSerializationTypes.LongString:                          propertyExpression = () => longStrVal.Value;                          subkeyExpression = () => longStrVal.ValueKey;                          useLikeMatchForStrings = true;                          validClauseTypes = new List<ValuePredicateType>()                              {                                  ValuePredicateType.Equal'                                  ValuePredicateType.NotEqual'                                  ValuePredicateType.Contains'                                  ValuePredicateType.StartsWith'                                  ValuePredicateType.EndsWith'                                  ValuePredicateType.MatchesWildcard                              };                          break;                      case DataSerializationTypes.Date:                          propertyExpression = () => dateVal.Value;                          subkeyExpression = () => dateVal.ValueKey;                          validClauseTypes = new List<ValuePredicateType>()                              {                                  ValuePredicateType.Equal'                                  ValuePredicateType.GreaterThan'                                  ValuePredicateType.GreaterThanOrEqual'                                  ValuePredicateType.LessThan'                                  ValuePredicateType.LessThanOrEqual'                                  ValuePredicateType.NotEqual'                                  ValuePredicateType.Empty                              };                          break;                  }
Missing Default,Rebel.Framework.Persistence.NHibernate.Linq,NhAggCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggCriteriaVisitor.cs,VisitFieldPredicate,The following switch statement is missing a default case: switch (node.ValueExpression.ClauseType)                  {                      case ValuePredicateType.Equal:                          restriction = GetRestrictionEq(fieldValue' useLikeMatchForStrings' propertyExpression' subkeyExpression' valueKey);                          break;                      case ValuePredicateType.NotEqual:                          restriction = !GetRestrictionEq(fieldValue' useLikeMatchForStrings' propertyExpression);                          break;                      case ValuePredicateType.LessThan:                          restriction = GetRestrictionLt(fieldValue' propertyExpression);                          break;                      case ValuePredicateType.LessThanOrEqual:                          restriction = GetRestrictionLtEq(fieldValue' propertyExpression);                          break;                      case ValuePredicateType.GreaterThan:                          restriction = GetRestrictionGt(fieldValue' propertyExpression);                          break;                      case ValuePredicateType.GreaterThanOrEqual:                          restriction = GetRestrictionGtEq(fieldValue' propertyExpression);                          break;                        case ValuePredicateType.Contains:                          restriction = GetRestrictionContains(fieldValue' propertyExpression);                          break;                      case ValuePredicateType.StartsWith:                          restriction = GetRestrictionStarts(fieldValue' propertyExpression);                          break;                      case ValuePredicateType.EndsWith:                          restriction = GetRestrictionEnds(fieldValue' propertyExpression);                          break;                  }
Missing Default,Rebel.Framework.Persistence.NHibernate.Linq,NhAggCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggCriteriaVisitor.cs,VisitFieldPredicate,The following switch statement is missing a default case: switch (dataSerializationTypese)                  {                      case DataSerializationTypes.SmallInt:                      case DataSerializationTypes.LargeInt:                      case DataSerializationTypes.Boolean:                          path = () => att.AttributeIntegerValues;                          alias = () => integerVal;                          break;                      case DataSerializationTypes.Decimal:                          path = () => att.AttributeDecimalValues;                          alias = () => decimalVal;                          break;                      case DataSerializationTypes.String:                          path = () => att.AttributeStringValues;                          alias = () => stringVal;                          break;                      case DataSerializationTypes.LongString:                          path = () => att.AttributeLongStringValues;                          alias = () => longStrVal;                          break;                      case DataSerializationTypes.Date:                          path = () => att.AttributeDateValues;                          alias = () => dateVal;                          break;                  }
Missing Default,Rebel.Framework.Persistence.NHibernate.Linq,NhAggregateCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggregateCriteriaVisitor.cs,GenerateQueryOver,The following switch statement is missing a default case: switch (dataSerializationTypese)                  {                      case DataSerializationTypes.SmallInt:                      case DataSerializationTypes.LargeInt:                      case DataSerializationTypes.Boolean:                          query = query.Left.JoinAlias(() => att.AttributeIntegerValues' () => integerVal);                          break;                      case DataSerializationTypes.Decimal:                          query = query.Left.JoinAlias(() => att.AttributeDecimalValues' () => decimalVal);                          break;                      case DataSerializationTypes.String:                          query = query.Left.JoinAlias(() => att.AttributeStringValues' () => stringVal);                          break;                      case DataSerializationTypes.LongString:                          query = query.Left.JoinAlias(() => att.AttributeLongStringValues' () => longStrVal);                          break;                      case DataSerializationTypes.Date:                          query = query.Left.JoinAlias(() => att.AttributeDateValues' () => dateVal);                          break;                  }
Missing Default,Rebel.Framework.Persistence.NHibernate.Linq,NhAggregateCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggregateCriteriaVisitor.cs,VisitFieldPredicate,The following switch statement is missing a default case: switch (node.ValueExpression.ClauseType)                      {                          case ValuePredicateType.LessThanOrEqual:                              return Restrictions.Le(Projections.Property(() => outerNode.DateCreated)' dateValue);                      }
Missing Default,Rebel.Framework.Persistence.NHibernate.Linq,NhAggregateCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggregateCriteriaVisitor.cs,VisitFieldPredicate,The following switch statement is missing a default case: switch (dataSerializationTypese)                  {                      case DataSerializationTypes.SmallInt:                      case DataSerializationTypes.LargeInt:                      case DataSerializationTypes.Boolean:                          propertyExpression = () => integerVal.Value;                          subkeyExpression = () => integerVal.ValueKey;                          validClauseTypes = new List<ValuePredicateType>()                              {                                  ValuePredicateType.Equal'                                  ValuePredicateType.GreaterThan'                                  ValuePredicateType.GreaterThanOrEqual'                                  ValuePredicateType.LessThan'                                  ValuePredicateType.LessThanOrEqual'                                  ValuePredicateType.NotEqual                              };                          break;                      case DataSerializationTypes.Decimal:                          propertyExpression = () => decimalVal.Value;                          subkeyExpression = () => decimalVal.ValueKey;                          validClauseTypes = new List<ValuePredicateType>()                              {                                  ValuePredicateType.Equal'                                  ValuePredicateType.GreaterThan'                                  ValuePredicateType.GreaterThanOrEqual'                                  ValuePredicateType.LessThan'                                  ValuePredicateType.LessThanOrEqual'                                  ValuePredicateType.NotEqual                              };                          break;                      case DataSerializationTypes.String:                          propertyExpression = () => stringVal.Value;                          subkeyExpression = () => stringVal.ValueKey;                          validClauseTypes = new List<ValuePredicateType>()                              {                                  ValuePredicateType.Equal'                                  ValuePredicateType.NotEqual'                                  ValuePredicateType.Contains'                                  ValuePredicateType.StartsWith'                                  ValuePredicateType.EndsWith'                                  ValuePredicateType.MatchesWildcard                              };                          break;                      case DataSerializationTypes.LongString:                          propertyExpression = () => longStrVal.Value;                          subkeyExpression = () => longStrVal.ValueKey;                          useLikeMatchForStrings = true;                          validClauseTypes = new List<ValuePredicateType>()                              {                                  ValuePredicateType.Equal'                                  ValuePredicateType.NotEqual'                                  ValuePredicateType.Contains'                                  ValuePredicateType.StartsWith'                                  ValuePredicateType.EndsWith'                                  ValuePredicateType.MatchesWildcard                              };                          break;                      case DataSerializationTypes.Date:                          propertyExpression = () => dateVal.Value;                          subkeyExpression = () => dateVal.ValueKey;                          validClauseTypes = new List<ValuePredicateType>()                              {                                  ValuePredicateType.Equal'                                  ValuePredicateType.GreaterThan'                                  ValuePredicateType.GreaterThanOrEqual'                                  ValuePredicateType.LessThan'                                  ValuePredicateType.LessThanOrEqual'                                  ValuePredicateType.NotEqual'                                  ValuePredicateType.Empty                              };                          break;                  }
Missing Default,Rebel.Framework.Persistence.NHibernate.Linq,NhAggregateCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggregateCriteriaVisitor.cs,VisitFieldPredicate,The following switch statement is missing a default case: switch (node.ValueExpression.ClauseType)                  {                      case ValuePredicateType.Equal:                          restriction = GetRestrictionEq(fieldValue' useLikeMatchForStrings' propertyExpression' subkeyExpression' valueKey);                          break;                      case ValuePredicateType.NotEqual:                          restriction = !GetRestrictionEq(fieldValue' useLikeMatchForStrings' propertyExpression);                          break;                      case ValuePredicateType.LessThan:                          restriction = GetRestrictionLt(fieldValue' propertyExpression);                          break;                      case ValuePredicateType.LessThanOrEqual:                          restriction = GetRestrictionLtEq(fieldValue' propertyExpression);                          break;                      case ValuePredicateType.GreaterThan:                          restriction = GetRestrictionGt(fieldValue' propertyExpression);                          break;                      case ValuePredicateType.GreaterThanOrEqual:                          restriction = GetRestrictionGtEq(fieldValue' propertyExpression);                          break;                        case ValuePredicateType.Contains:                          restriction = GetRestrictionContains(fieldValue' propertyExpression);                          break;                      case ValuePredicateType.StartsWith:                          restriction = GetRestrictionStarts(fieldValue' propertyExpression);                          break;                      case ValuePredicateType.EndsWith:                          restriction = GetRestrictionEnds(fieldValue' propertyExpression);                          break;                  }
Missing Default,Rebel.Framework.Persistence.NHibernate.Linq,NhAggregateCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhAggregateCriteriaVisitor.cs,VisitBinary,The following switch statement is missing a default case: switch (node.NodeType)              {                  case ExpressionType.And:                  case ExpressionType.AndAlso:                      // We need to split the query into two in order to evaluate both sides                      // TODO: (Investigate) Another option is to add more joins to the single main query returned                      // by GenerateFilterQuery' one set of joins for each side of this binary                      var allLeft = GenerateQueryOver(left).Subquery;                      var allRight = GenerateQueryOver(right).Subquery;                        var combined = new Conjunction()                          .Add(Subqueries.PropertyIn(Projections.Property<AggregateNodeStatus>(x => x.NodeVersion.Id).PropertyName'                                                     allLeft.DetachedCriteria))                          .Add(Subqueries.PropertyIn(Projections.Property<AggregateNodeStatus>(x => x.NodeVersion.Id).PropertyName'                                                     allRight.DetachedCriteria));                        return combined;                  case ExpressionType.Or:                  case ExpressionType.OrElse:                      return Restrictions.Disjunction()                          .Add(left)                          .Add(right);              }
Missing Default,Rebel.Framework.Persistence.NHibernate.Linq,NhCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhCriteriaVisitor.cs,GenerateQueryOver,The following switch statement is missing a default case: switch (dataSerializationTypese)                  {                      case DataSerializationTypes.SmallInt:                      case DataSerializationTypes.LargeInt:                      case DataSerializationTypes.Boolean:                          query = query.Left.JoinAlias(() => att.AttributeIntegerValues' () => integerVal);                          break;                      case DataSerializationTypes.Decimal:                          query = query.Left.JoinAlias(() => att.AttributeDecimalValues' () => decimalVal);                          break;                      case DataSerializationTypes.String:                          query = query.Left.JoinAlias(() => att.AttributeStringValues' () => stringVal);                          break;                      case DataSerializationTypes.LongString:                          query = query.Left.JoinAlias(() => att.AttributeLongStringValues' () => longStrVal);                          break;                      case DataSerializationTypes.Date:                          query = query.Left.JoinAlias(() => att.AttributeDateValues' () => dateVal);                          break;                  }
Missing Default,Rebel.Framework.Persistence.NHibernate.Linq,NhCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhCriteriaVisitor.cs,VisitFieldPredicate,The following switch statement is missing a default case: switch (dataSerializationTypese)                  {                      case DataSerializationTypes.SmallInt:                      case DataSerializationTypes.LargeInt:                      case DataSerializationTypes.Boolean:                          propertyExpression = () => integerVal.Value;                          subkeyExpression = () => integerVal.ValueKey;                          validClauseTypes = new List<ValuePredicateType>()                              {                                  ValuePredicateType.Equal'                                  ValuePredicateType.GreaterThan'                                  ValuePredicateType.GreaterThanOrEqual'                                  ValuePredicateType.LessThan'                                  ValuePredicateType.LessThanOrEqual'                                  ValuePredicateType.NotEqual                              };                          break;                      case DataSerializationTypes.Decimal:                          propertyExpression = () => decimalVal.Value;                          subkeyExpression = () => decimalVal.ValueKey;                          validClauseTypes = new List<ValuePredicateType>()                              {                                  ValuePredicateType.Equal'                                  ValuePredicateType.GreaterThan'                                  ValuePredicateType.GreaterThanOrEqual'                                  ValuePredicateType.LessThan'                                  ValuePredicateType.LessThanOrEqual'                                  ValuePredicateType.NotEqual                              };                          break;                      case DataSerializationTypes.String:                          propertyExpression = () => stringVal.Value;                          subkeyExpression = () => stringVal.ValueKey;                          validClauseTypes = new List<ValuePredicateType>()                              {                                  ValuePredicateType.Equal'                                  ValuePredicateType.NotEqual'                                  ValuePredicateType.Contains'                                  ValuePredicateType.StartsWith'                                  ValuePredicateType.EndsWith'                                  ValuePredicateType.MatchesWildcard                              };                          break;                      case DataSerializationTypes.LongString:                          propertyExpression = () => longStrVal.Value;                          subkeyExpression = () => longStrVal.ValueKey;                          useLikeMatchForStrings = true;                          validClauseTypes = new List<ValuePredicateType>()                              {                                  ValuePredicateType.Equal'                                  ValuePredicateType.NotEqual'                                  ValuePredicateType.Contains'                                  ValuePredicateType.StartsWith'                                  ValuePredicateType.EndsWith'                                  ValuePredicateType.MatchesWildcard                              };                          break;                      case DataSerializationTypes.Date:                          propertyExpression = () => dateVal.Value;                          subkeyExpression = () => dateVal.ValueKey;                          validClauseTypes = new List<ValuePredicateType>()                              {                                  ValuePredicateType.Equal'                                  ValuePredicateType.GreaterThan'                                  ValuePredicateType.GreaterThanOrEqual'                                  ValuePredicateType.LessThan'                                  ValuePredicateType.LessThanOrEqual'                                  ValuePredicateType.NotEqual'                                  ValuePredicateType.Empty                              };                          break;                  }
Missing Default,Rebel.Framework.Persistence.NHibernate.Linq,NhCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhCriteriaVisitor.cs,VisitFieldPredicate,The following switch statement is missing a default case: switch (node.ValueExpression.ClauseType)                  {                      case ValuePredicateType.Equal:                          restriction = GetRestrictionEq(fieldValue' useLikeMatchForStrings' propertyExpression' subkeyExpression' valueKey);                          break;                      case ValuePredicateType.NotEqual:                          restriction = !GetRestrictionEq(fieldValue' useLikeMatchForStrings' propertyExpression);                          break;                      case ValuePredicateType.LessThan:                          restriction = GetRestrictionLt(fieldValue' propertyExpression);                          break;                      case ValuePredicateType.LessThanOrEqual:                          restriction = GetRestrictionLtEq(fieldValue' propertyExpression);                          break;                      case ValuePredicateType.GreaterThan:                          restriction = GetRestrictionGt(fieldValue' propertyExpression);                          break;                      case ValuePredicateType.GreaterThanOrEqual:                          restriction = GetRestrictionGtEq(fieldValue' propertyExpression);                          break;                        case ValuePredicateType.Contains:                          restriction = GetRestrictionContains(fieldValue' propertyExpression);                          break;                      case ValuePredicateType.StartsWith:                          restriction = GetRestrictionStarts(fieldValue' propertyExpression);                          break;                      case ValuePredicateType.EndsWith:                          restriction = GetRestrictionEnds(fieldValue' propertyExpression);                          break;                  }
Missing Default,Rebel.Framework.Persistence.NHibernate.Linq,NhCriteriaVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhCriteriaVisitor.cs,VisitBinary,The following switch statement is missing a default case: switch (node.NodeType)              {                  case ExpressionType.And:                  case ExpressionType.AndAlso:                      // We need to split the query into two in order to evaluate both sides                      // TODO: (Investigate) Another option is to add more joins to the single main query returned                      // by GenerateFilterQuery' one set of joins for each side of this binary                      var allLeft = GenerateQueryOver(left).Subquery;                      var allRight = GenerateQueryOver(right).Subquery;                        var combined = new Conjunction()                          .Add(Subqueries.PropertyIn(Projections.Property<NodeVersion>(x => x.Id).PropertyName'                                                     allLeft.DetachedCriteria))                          .Add(Subqueries.PropertyIn(Projections.Property<NodeVersion>(x => x.Id).PropertyName'                                                     allRight.DetachedCriteria));                        return combined;                  case ExpressionType.Or:                  case ExpressionType.OrElse:                      return Restrictions.Disjunction()                          .Add(left)                          .Add(right);              }
Missing Default,Rebel.Framework.Persistence.NHibernate.Linq,NhQueryOverVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhQueryOverVisitor.cs,VisitFieldPredicate,The following switch statement is missing a default case: switch (dataSerializationTypese)                  {                      case DataSerializationTypes.SmallInt:                      case DataSerializationTypes.LargeInt:                      case DataSerializationTypes.Boolean:                          queryExtender = queryExtender.Left.JoinAlias(() => aliasAttribute.AttributeIntegerValues' () => aliasIntegerValue);                          propertyExpression = () => aliasIntegerValue.Value;                          subkeyExpression = () => aliasIntegerValue.ValueKey;                          validClauseTypes = new List<ValuePredicateType>()                              {                                  ValuePredicateType.Equal'                                  ValuePredicateType.GreaterThan'                                  ValuePredicateType.GreaterThanOrEqual'                                  ValuePredicateType.LessThan'                                  ValuePredicateType.LessThanOrEqual'                                  ValuePredicateType.NotEqual                              };                          break;                      case DataSerializationTypes.Decimal:                          queryExtender = queryExtender.Left.JoinAlias(() => aliasAttribute.AttributeDecimalValues' () => aliasDecimalValue);                          propertyExpression = () => aliasDecimalValue.Value;                          subkeyExpression = () => aliasDecimalValue.ValueKey;                          validClauseTypes = new List<ValuePredicateType>()                              {                                  ValuePredicateType.Equal'                                  ValuePredicateType.GreaterThan'                                  ValuePredicateType.GreaterThanOrEqual'                                  ValuePredicateType.LessThan'                                  ValuePredicateType.LessThanOrEqual'                                  ValuePredicateType.NotEqual                              };                          break;                      case DataSerializationTypes.String:                          queryExtender = queryExtender.Left.JoinAlias(() => aliasAttribute.AttributeStringValues' () => aliasStringValue);                          propertyExpression = () => aliasStringValue.Value;                          subkeyExpression = () => aliasStringValue.ValueKey;                          validClauseTypes = new List<ValuePredicateType>()                              {                                  ValuePredicateType.Equal'                                  ValuePredicateType.NotEqual'                                  ValuePredicateType.Contains'                                  ValuePredicateType.StartsWith'                                  ValuePredicateType.EndsWith'                                  ValuePredicateType.MatchesWildcard                              };                          break;                      case DataSerializationTypes.LongString:                          queryExtender = queryExtender.Left.JoinAlias(() => aliasAttribute.AttributeLongStringValues' () => aliasLongStringValue);                          propertyExpression = () => aliasLongStringValue.Value;                          subkeyExpression = () => aliasLongStringValue.ValueKey;                          useLikeMatchForStrings = true;                          validClauseTypes = new List<ValuePredicateType>()                              {                                  ValuePredicateType.Equal'                                  ValuePredicateType.NotEqual'                                  ValuePredicateType.Contains'                                  ValuePredicateType.StartsWith'                                  ValuePredicateType.EndsWith'                                  ValuePredicateType.MatchesWildcard                              };                          break;                      case DataSerializationTypes.Date:                          queryExtender = queryExtender.Left.JoinAlias(() => aliasAttribute.AttributeDateValues' () => aliasDateValue);                          propertyExpression = () => aliasDateValue.Value;                          subkeyExpression = () => aliasDateValue.ValueKey;                          validClauseTypes = new List<ValuePredicateType>()                              {                                  ValuePredicateType.Equal'                                  ValuePredicateType.GreaterThan'                                  ValuePredicateType.GreaterThanOrEqual'                                  ValuePredicateType.LessThan'                                  ValuePredicateType.LessThanOrEqual'                                  ValuePredicateType.NotEqual'                                  ValuePredicateType.Empty                              };                          break;                  }
Missing Default,Rebel.Framework.Persistence.NHibernate.Linq,NhQueryOverVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhQueryOverVisitor.cs,VisitFieldPredicate,The following switch statement is missing a default case: switch (node.ValueExpression.ClauseType)                  {                      case ValuePredicateType.Equal:                          restriction = GetRestrictionEq(fieldValue' useLikeMatchForStrings' propertyExpression' subkeyExpression' valueKey);                          break;                      case ValuePredicateType.NotEqual:                          restriction = !GetRestrictionEq(fieldValue' useLikeMatchForStrings' propertyExpression);                          break;                      case ValuePredicateType.LessThan:                          restriction = GetRestrictionLt(fieldValue' propertyExpression);                          break;                      case ValuePredicateType.LessThanOrEqual:                          restriction = GetRestrictionLtEq(fieldValue' propertyExpression);                          break;                      case ValuePredicateType.GreaterThan:                          restriction = GetRestrictionGt(fieldValue' propertyExpression);                          break;                      case ValuePredicateType.GreaterThanOrEqual:                          restriction = GetRestrictionGtEq(fieldValue' propertyExpression);                          break;                        case ValuePredicateType.Contains:                          restriction = GetRestrictionContains(fieldValue' propertyExpression);                          break;                      case ValuePredicateType.StartsWith:                          restriction = GetRestrictionStarts(fieldValue' propertyExpression);                          break;                      case ValuePredicateType.EndsWith:                          restriction = GetRestrictionEnds(fieldValue' propertyExpression);                          break;                  }
Missing Default,Rebel.Framework.Persistence.NHibernate.Linq,NhQueryOverVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\Linq\NhQueryOverVisitor.cs,VisitBinary,The following switch statement is missing a default case: switch (node.NodeType)              {                  case ExpressionType.And:                  case ExpressionType.AndAlso:                      return QueryOver.Of<NodeVersion>()                              .Where(Restrictions.Conjunction()                                  .Add(Subqueries.PropertyIn(Projections.Property<NodeVersion>(x => x.Id).PropertyName' left.DetachedCriteria))                                  .Add(Subqueries.PropertyIn(Projections.Property<NodeVersion>(x => x.Id).PropertyName' right.DetachedCriteria)))                              .Select(x => x.Id);                  case ExpressionType.Or:                  case ExpressionType.OrElse:                      {                          return QueryOver.Of<NodeVersion>()                              .Where(Restrictions.Disjunction()                                  .Add(Subqueries.PropertyIn(Projections.Property<NodeVersion>(x => x.Id).PropertyName' left.DetachedCriteria))                                  .Add(Subqueries.PropertyIn(Projections.Property<NodeVersion>(x => x.Id).PropertyName' right.DetachedCriteria)))                              .Select(x => x.Id);                      }              }
Missing Default,Rebel.Framework.Persistence.NHibernate,ProviderBootstrapper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\ProviderBootstrapper.cs,ConfigureApplication,The following switch statement is missing a default case: switch (dbType)              {                  case "MSSQL":                      connectionString = string.Format("Data Source={0}; Initial Catalog={1};User Id={2};Password={3}"'                                                       dynamicParams.Server' dynamicParams.DatabaseName' dynamicParams.Username' dynamicParams.Password);                      providerName = "System.Data.SqlClient";                      nhDriver = "MsSql2008";                      break;                  case "MySQL":                      connectionString = string.Format("Server={0}; Database={1};Uid={2};Pwd={3}"'                                                       dynamicParams.Server' dynamicParams.DatabaseName' dynamicParams.Username' dynamicParams.Password);                      providerName = "MySql.Data.MySQLClient";                      nhDriver = "MySql";                      break;                  case "SQLCE":                      connectionString = "Data Source=|DataDirectory|Rebel.sdf";                      providerName = "System.Data.SqlServerCe.4.0";                      nhDriver = "MsSqlCe4";                      break;                  case "Custom":                      //limiting to MS SQL atm                       connectionString = dynamicParams.ConnectionString;                      providerName = "System.Data.SqlClient";                      nhDriver = "MsSql2008";                      break;              }
Missing Default,Rebel.Framework.Persistence.NHibernate,ProviderBootstrapper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\ProviderBootstrapper.cs,TryInstall,The following switch statement is missing a default case: switch (_localConfig.Driver)              {                  case SupportedNHDrivers.MsSqlCe4:                      using (new WriteLockDisposable(SchemaValidationLocker))                      {                          using (var sqlCeEngine = new SqlCeEngine(_configuration.Properties[Environment.ConnectionString]))                          {                              if (!sqlCeEngine.Verify())                              {                                  sqlCeEngine.CreateDatabase();                              }                          }                      }                      break;              }
Missing Default,Rebel.Framework.Persistence.NHibernate,EntityRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepository.cs,PerformExecuteMany,The following switch statement is missing a default case: switch (filter.ResultFilterType)                      {                          case ResultFilterType.Skip:                              resultBuilder = resultBuilder.Skip(filter.SkipCount);                              break;                          case ResultFilterType.Take:                              resultBuilder = resultBuilder.Take(filter.TakeCount);                              break;                      }
Missing Default,Rebel.Framework.Persistence.NHibernate,EntityRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepository.cs,ApplySkipOrTakeInDbIfPossible,The following switch statement is missing a default case: switch (filter.ResultFilterType)                      {                          case ResultFilterType.Skip:                              filteredAggQuery =                                  (IQueryOver<AggregateNodeStatus' AggregateNodeStatus>)                                  filteredAggQuery.Skip(filter.SkipCount).Take(9999);                              modified = true;                              break;                          case ResultFilterType.Take:                              filteredAggQuery =                                  (IQueryOver<AggregateNodeStatus' AggregateNodeStatus>)                                  filteredAggQuery.Take(filter.TakeCount);                              modified = true;                              break;                      }
Missing Default,Rebel.Framework.Persistence.NHibernate,EntityRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepository.cs,ApplyPossibleDbSortOrders,The following switch statement is missing a default case: switch (sortClause.FieldSelector.FieldName.ToLowerInvariant())                      {                          case "utccreated":                              var joined = nodeIsJoinedAlready ? filteredAggQuery : filteredAggQuery.JoinAlias(x => x.Node' () => node);                              nodeIsJoinedAlready = true;                                var createOrderBuilder = joined.OrderBy(() => node.DateCreated);                                filteredAggQuery = (sortClause.Direction == SortDirection.Ascending)                                                     ? createOrderBuilder.Asc                                                     : createOrderBuilder.Desc;                                appliedSort = true;                              break;                          case "utcmodified":                          case "utcstatuschanged":                              var modifiedOrderBuilder = filteredAggQuery.OrderBy(x => x.StatusDate);                                filteredAggQuery = (sortClause.Direction == SortDirection.Ascending)                                                     ? modifiedOrderBuilder.Asc                                                     : modifiedOrderBuilder.Desc;                                appliedSort = true;                              break;                      }
Missing Default,Rebel.Framework.Persistence.NHibernate,EntityRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepository.cs,PerformExecuteScalar,The following switch statement is missing a default case: switch (filter.ResultFilterType)                  {                      case ResultFilterType.Take:                          filteredAggQuery = (IQueryOver<AggregateNodeStatus' AggregateNodeStatus>)filteredAggQuery.Take(filter.TakeCount);                          requiresLoadingIds = true;                          break;                      case ResultFilterType.Skip:                          filteredAggQuery = (IQueryOver<AggregateNodeStatus' AggregateNodeStatus>)filteredAggQuery.Skip(filter.SkipCount).Take(99999); // Must include a Take in order for NH to generate the offset                          requiresLoadingIds = true;                          break;                      case ResultFilterType.Count:                          var count = GetCount(filteredAggQuery' requiresLoadingIds);                            return (T)(object)count;                      case ResultFilterType.Any:                          var any = GetCount(filteredAggQuery' requiresLoadingIds) > 0;                            return (T)(object)any;                      case ResultFilterType.All:                          var countAll = GetCount(aggQuery.GeneratedQuery' requiresLoadingIds);                          var countFiltered = GetCount(filteredAggQuery' requiresLoadingIds);                          var all = countAll == countFiltered;                            return (T)(object)all;                  }
Missing Default,Rebel.Framework.Persistence.NHibernate,EntityRepository,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\EntityRepository.cs,PerformExecuteSingle,The following switch statement is missing a default case: switch (resultFilter.ResultFilterType)                  {                      case ResultFilterType.Single:                      case ResultFilterType.SingleOrDefault:                          try                          {                              var resultCount = matchingIds.Count();                              if (resultCount > 1)                                  throw new NonUniqueResultException(resultCount);                                var singleResult = Helper.GetNodeVersionsInBatches(matchingIds.Take(1)).FirstOrDefault();                                if (ReferenceEquals(singleResult' null))                              {                                  if (resultFilter.ResultFilterType == ResultFilterType.Single)                                  {                                      throw new InvalidOperationException("Sequence contains 0 elements but query specified exactly 1 must be present");                                  }                                  return default(T);                              }                                return FrameworkContext.TypeMappers.Map<T>(singleResult);                          }                          catch (NonUniqueResultException ex)                          {                              const string nastyNhExceptionMessage = "query did not return a unique result: ";                              var getNumberFromNastyNHMessage = ex.Message.Replace(nastyNhExceptionMessage' "");                              throw new InvalidOperationException("Sequence contains {0} elements but query specified exactly 1 must be present.".InvariantFormat(getNumberFromNastyNHMessage)' ex);                          }                      case ResultFilterType.First:                      case ResultFilterType.FirstOrDefault:                          var exceptionForFirst = new InvalidOperationException("Sequence contains 0 elements when non-null First element was required");                            if (canApplyOrderingInDb == ApplySortOrderInDb.CanApplyAll || canApplyOrderingInDb == ApplySortOrderInDb.NoOrderingRequired)                          {                              var firstOrDefault = matchingIds.FirstOrDefault();                              matchingIds = (firstOrDefault == null)                                                ? Enumerable.Empty<NhSessionHelper.VersionAndSchemaId>()                                                : firstOrDefault.AsEnumerableOfOne();                          }                            if (!matchingIds.Any() && resultFilter.ResultFilterType == ResultFilterType.First)                          {                              throw exceptionForFirst;                          }                            var resultsFirst = Helper.GetNodeVersionsInBatches(matchingIds);                          if (!(canApplyOrderingInDb == ApplySortOrderInDb.CanApplyAll || canApplyOrderingInDb == ApplySortOrderInDb.NoOrderingRequired))                              resultsFirst = OrderMaterialisedResults(query' resultsFirst);                          var firstItem = resultsFirst.FirstOrDefault();                            if (ReferenceEquals(firstItem' null))                          {                              if (resultFilter.ResultFilterType == ResultFilterType.First)                              {                                  throw exceptionForFirst;                              }                              return default(T);                          }                            return FrameworkContext.TypeMappers.Map<T>(firstItem);                      case ResultFilterType.Last:                      case ResultFilterType.LastOrDefault:                          var exceptionForLast = new InvalidOperationException("Sequence contains 0 elements when non-null Last element was required");                            if (canApplyOrderingInDb == ApplySortOrderInDb.CanApplyAll || canApplyOrderingInDb == ApplySortOrderInDb.NoOrderingRequired)                          {                              var lastOrDefault = matchingIds.LastOrDefault();                              matchingIds = (lastOrDefault == null)                                                ? Enumerable.Empty<NhSessionHelper.VersionAndSchemaId>()                                                : lastOrDefault.AsEnumerableOfOne();                          }                            if (!matchingIds.Any() && resultFilter.ResultFilterType == ResultFilterType.Last)                          {                              throw exceptionForLast;                          }                            var resultsLast = Helper.GetNodeVersionsInBatches(matchingIds);                          if (!(canApplyOrderingInDb == ApplySortOrderInDb.CanApplyAll || canApplyOrderingInDb == ApplySortOrderInDb.NoOrderingRequired))                              resultsLast = OrderMaterialisedResults(query' resultsLast);                          var lastItem = resultsLast.LastOrDefault();                            if (ReferenceEquals(lastItem' null))                          {                              if (resultFilter.ResultFilterType == ResultFilterType.First)                              {                                  throw exceptionForLast;                              }                              return default(T);                          }                            return FrameworkContext.TypeMappers.Map<T>(lastItem);                  }
Missing Default,Rebel.Framework.Persistence.NHibernate,NhSessionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework.Persistence.NHibernate\NhSessionHelper.cs,GenerateAggregateStatusQuery,The following switch statement is missing a default case: switch (relationScope)                  {                      case HierarchyScope.Children:                          // The scope start id(s) are essentially "permitted parents"' i.e. direct relations where the Start Node matches the id                          mainQuery = mainQuery                              .JoinAlias(() => pub.Node' () => node)                              .JoinAlias(() => node.IncomingRelations' () => relation)                              .JoinAlias(() => relation.NodeRelationType' () => relationType)                              .Where(() => relation.StartNode.Id.IsIn(asGuid))                              .And(() => relationType.Alias == relationTypeAlias);                          alreadyJoinedRelations = true;                          toReturn.NodeTableIsJoinedAlready = true;                          break;                  }
