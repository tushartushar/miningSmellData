Implementation smell,Namespace,Class,File,Method,Description
Long Method,Rebel.Framework,HiveId,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\HiveId.cs,TryParse,The method has 128 lines of code.
Long Method,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,IsCompatibleWith,The method has 127 lines of code.
Long Method,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,NextToken,The method has 222 lines of code.
Long Method,Rebel.Framework.Linq.CriteriaGeneration.StructureMetadata,DefaultQueryStructureBinder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\StructureMetadata\DefaultQueryStructureBinder.cs,CreateFieldSelector,The method has 102 lines of code.
Long Method,Rebel.Framework.TypeMapping,ObjectMapper<TSource;TTarget>,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeMapping\ObjectMapper.cs,Map,The method has 118 lines of code.
Complex Method,Rebel.Framework,ExpressionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ExpressionHelper.cs,IsMethodSignatureEqualTo,Cyclomatic complexity of the method is 9
Complex Method,Rebel.Framework,HiveId,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\HiveId.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,Rebel.Framework,HiveId,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\HiveId.cs,TryParse,Cyclomatic complexity of the method is 18
Complex Method,Rebel.Framework,HiveId,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\HiveId.cs,DetectFormatStyleFromString,Cyclomatic complexity of the method is 10
Complex Method,Rebel.Framework,ObjectExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ObjectExtensions.cs,TryConvertTo,Cyclomatic complexity of the method is 13
Complex Method,Rebel.Framework,ObjectExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ObjectExtensions.cs,EncodeJsString,Cyclomatic complexity of the method is 10
Complex Method,Rebel.Framework,ObjectExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ObjectExtensions.cs,ToDebugString,Cyclomatic complexity of the method is 8
Complex Method,Rebel.Framework,ObjectExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ObjectExtensions.cs,ToXmlString,Cyclomatic complexity of the method is 20
Complex Method,Rebel.Framework,StringExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\StringExtensions.cs,UrlTokenDecode,Cyclomatic complexity of the method is 8
Complex Method,Rebel.Framework,StringExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\StringExtensions.cs,UrlTokenEncode,Cyclomatic complexity of the method is 10
Complex Method,Rebel.Framework,TypeExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeExtensions.cs,TryGetGenericArguments,Cyclomatic complexity of the method is 10
Complex Method,Rebel.Framework.Configuration.Caching,CachePolicyPickerRule,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Configuration\Caching\CachePolicyPickerRule.cs,KeyMatches,Cyclomatic complexity of the method is 17
Complex Method,Rebel.Framework.Dynamics,BendyObject,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\BendyObject.cs,BendyObject,Cyclomatic complexity of the method is 9
Complex Method,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,ParseComparison,Cyclomatic complexity of the method is 16
Complex Method,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,ParseIdentifier,Cyclomatic complexity of the method is 10
Complex Method,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,ParseMemberAccess,Cyclomatic complexity of the method is 11
Complex Method,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,PromoteExpression,Cyclomatic complexity of the method is 12
Complex Method,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,ParseNumber,Cyclomatic complexity of the method is 22
Complex Method,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,IsCompatibleWith,Cyclomatic complexity of the method is 14
Complex Method,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,CompareConversions,Cyclomatic complexity of the method is 8
Complex Method,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,NextToken,Cyclomatic complexity of the method is 36
Complex Method,Rebel.Framework.Expressions,ExpressionVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Expressions\ExpressionVisitor.cs,Visit,Cyclomatic complexity of the method is 16
Complex Method,Rebel.Framework.Linq.CriteriaGeneration.ExpressionVisitors,FieldPredicateExpressionRewriter,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\ExpressionVisitors\FieldPredicateExpressionRewriter.cs,ConvertToFieldPredicate,Cyclomatic complexity of the method is 9
Complex Method,Rebel.Framework.Linq.CriteriaGeneration.ExpressionVisitors,FieldPredicateExpressionRewriter,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\ExpressionVisitors\FieldPredicateExpressionRewriter.cs,UpdateValuePredicateType,Cyclomatic complexity of the method is 8
Complex Method,Rebel.Framework.Linq.CriteriaGeneration.ExpressionVisitors,QueryModelVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\ExpressionVisitors\QueryModelVisitor.cs,VisitResultOperator,Cyclomatic complexity of the method is 9
Complex Method,Rebel.Framework.Linq.CriteriaGeneration.ExpressionVisitors,QueryModelVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\ExpressionVisitors\QueryModelVisitor.cs,GetCriteriaExpression,Cyclomatic complexity of the method is 8
Complex Method,Rebel.Framework.Linq.CriteriaGeneration.StructureMetadata,DefaultQueryStructureBinder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\StructureMetadata\DefaultQueryStructureBinder.cs,CreateFieldSelector,Cyclomatic complexity of the method is 21
Complex Method,Rebel.Framework.Localization,TextManager,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\TextManager.cs,GetTextEntryInternal,Cyclomatic complexity of the method is 10
Complex Method,Rebel.Framework.Localization,TextManager,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\TextManager.cs,ReloadTexts,Cyclomatic complexity of the method is 9
Complex Method,Rebel.Framework.Localization.Maintenance,XmlTextSource,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Maintenance\XmlTextSource.cs,GetInternal,Cyclomatic complexity of the method is 9
Complex Method,Rebel.Framework.Localization.Maintenance,XmlTextSource,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Maintenance\XmlTextSource.cs,Put,Cyclomatic complexity of the method is 14
Complex Method,Rebel.Framework.Localization.Parsing,DefaultExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Parsing\DefaultExpressionParser.cs,ParseSwitch,Cyclomatic complexity of the method is 11
Complex Method,Rebel.Framework.Localization.Processing,PatternEvaluatingVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Processing\PatternEvaluator.cs,Visit,Cyclomatic complexity of the method is 11
Complex Method,Rebel.Framework.Localization.Processing.ParameterEvaluators,PatternLookupEvaluator,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Processing\ParameterEvaluators\PatternLookupEvaluator.cs,GetValue,Cyclomatic complexity of the method is 8
Complex Method,Rebel.Framework.Localization.Support,ObjectHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Support\ObjectHelper.cs,ParamsToParameterSet,Cyclomatic complexity of the method is 11
Complex Method,Rebel.Framework.Localization.Web.JavaScript,JavaScriptGenerator,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Web\JavaScript\JavaScriptGenerator.cs,WriteScript,Cyclomatic complexity of the method is 10
Complex Method,Rebel.Framework.Localization.Web.Mvc,LocalizingDefaultModelBinder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Web\Mvc\LocalizingDefaultModelBinder.cs,SetProperty,Cyclomatic complexity of the method is 8
Complex Method,Rebel.Framework.Localization.Web.Mvc,LocalizingModelMetadataProvider,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Web\Mvc\LocalizingModelMetadataProvider.cs,CreateMetadata,Cyclomatic complexity of the method is 11
Complex Method,Rebel.Framework.TypeMapping,ObjectMapper<TSource;TTarget>,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeMapping\ObjectMapper.cs,Map,Cyclomatic complexity of the method is 16
Long Parameter List,Rebel.Framework,DirtyExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\DirtyExtensions.cs,TrySetPropertyFromDirty,The method has 5 parameters. Parameters: destination' prop' source' dirtyProp' valueGetter
Long Parameter List,Rebel.Framework,LocalizationHtmlHelperExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\LocalizationHtmlHelperExtensions.cs,GetText,The method has 7 parameters. Parameters: htmlHelper' key' values' language' ns' type' default
Long Parameter List,Rebel.Framework,LocalizedArgumentNullException,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\LocalizedArgumentNullException.cs,LocalizedArgumentNullException,The method has 5 parameters. Parameters: paramName' key' defaultMessage' parameters' innerException
Long Parameter List,Rebel.Framework,LocalizedArgumentOutOfRangeException,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\LocalizedArgumentOutOfRangeException.cs,LocalizedArgumentOutOfRangeException,The method has 7 parameters. Parameters: argument' min' max' key' defaultMessage' parameters' innerException
Long Parameter List,Rebel.Framework,LocalizedFileNotFoundException,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\LocalizedFileNotFoundException.cs,LocalizedFileNotFoundException,The method has 5 parameters. Parameters: filename' key' defaultMessage' parameters' innerException
Long Parameter List,Rebel.Framework,ObjectExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ObjectExtensions.cs,DeepCopy,The method has 5 parameters. Parameters: source' targetType' factory' recurseCount' hideErrorsInPartialTrust
Long Parameter List,Rebel.Framework,ObjectExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ObjectExtensions.cs,SetValue,The method has 6 parameters. Parameters: member' sourceType' target' sourceValue' setter' outerLoopRecurseCount
Long Parameter List,Rebel.Framework,RevisionStatusType,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\RevisionStatusType.cs,RevisionStatusType,The method has 5 parameters. Parameters: systemId' alias' name' isSystem' negatedBy
Long Parameter List,Rebel.Framework,StringExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\StringExtensions.cs,ToUrlAlias,The method has 5 parameters. Parameters: value' charReplacements' replaceDoubleDashes' stripNonAscii' urlEncode
Long Parameter List,Rebel.Framework.Caching,CacheCreationResult<T>,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Caching\CacheCreationResult.cs,CacheCreationResult,The method has 5 parameters. Parameters: wasUpdated' wasInserted' alreadyExisted' value' existsButWrongType
Long Parameter List,Rebel.Framework.Configuration,DeepConfigManager,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Configuration\DeepConfigManager.cs,GetWebSettings,The method has 5 parameters. Parameters: sectionName' deferred' applicationRoot' absolutePluginRoot' pluginBasePath
Long Parameter List,Rebel.Framework.Context,DefaultFrameworkContext,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Context\DefaultFrameworkContext.cs,DefaultFrameworkContext,The method has 5 parameters. Parameters: scopedCache' applicationCache' finalizer' caches' serialization
Long Parameter List,Rebel.Framework.Context,DefaultFrameworkContext,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Context\DefaultFrameworkContext.cs,DefaultFrameworkContext,The method has 8 parameters. Parameters: textManager' typeMappers' scopedCache' applicationCache' finalizer' taskMgr' caches' serialization
Long Parameter List,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,CheckAndPromoteOperands,The method has 5 parameters. Parameters: signatures' opName' left' right' errorPos
Long Parameter List,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,FindMethod,The method has 5 parameters. Parameters: type' methodName' staticAccess' args' method
Long Parameter List,Rebel.Framework.Linq.QueryModel,FromClause,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\QueryModel\FromClause.cs,FromClause,The method has 5 parameters. Parameters: startIds' hierarchyScope' revisionStatus' hierarchyType' requiredEntityIds
Long Parameter List,Rebel.Framework.Linq.QueryModel,FromClause,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\QueryModel\FromClause.cs,FromClause,The method has 7 parameters. Parameters: startIds' excludeStartIds' excludeIds' hierarchyScope' revisionStatus' hierarchyType' requiredEntityIds
Long Parameter List,Rebel.Framework.Linq.QueryModel,QueryDescription,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\QueryModel\QueryDescription.cs,QueryDescription,The method has 5 parameters. Parameters: singleResultFilter' fromClause' criteria' sortClauses' excludeOrphans
Long Parameter List,Rebel.Framework.Linq.QueryModel,QueryDescriptionBuilder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\QueryModel\QueryDescriptionBuilder.cs,SetFromClause,The method has 5 parameters. Parameters: hierarchyScope' revisionStatus' excludeParentIds' excludeIds' scopeStartIds
Long Parameter List,Rebel.Framework.Localization,Localization<TNamespaceRef>,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Localization.cs,Get,The method has 7 parameters. Parameters: key' parameters' language' ns' debug' returnNullOnMissing' encode
Long Parameter List,Rebel.Framework.Localization,StringHelpers,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\StringHelpers.cs,Localize,The method has 10 parameters. Parameters: s' typeRef' parameters' key' language' ns' debug' returnNullOnMissing' encode' fallback
Long Parameter List,Rebel.Framework.Localization,StringHelpers,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\StringHelpers.cs,Localize,The method has 9 parameters. Parameters: s' parameters' key' language' ns' debug' returnNullOnMissing' encode' fallback
Long Parameter List,Rebel.Framework.Localization,StringHelpers,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\StringHelpers.cs,Localize,The method has 10 parameters. Parameters: s' type' parameters' key' language' ns' debug' returnNullOnMissing' encode' fallback
Long Parameter List,Rebel.Framework.Localization,StringHelpers,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\StringHelpers.cs,Localize,The method has 10 parameters. Parameters: s' nsAssembly' parameters' key' language' ns' debug' returnNullOnMissing' encode' fallback
Long Parameter List,Rebel.Framework.Localization,TextManager,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\TextManager.cs,Get,The method has 8 parameters. Parameters: key' values' language' ns' debug' returnNullOnMissing' encode' fallback
Long Parameter List,Rebel.Framework.Localization,TextManager,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\TextManager.cs,Get,The method has 9 parameters. Parameters: key' values' language' ns' callingAssembly' debug' returnNullOnMissing' encode' fallback
Long Parameter List,Rebel.Framework.Localization,TextManager,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\TextManager.cs,GetTextEntry,The method has 5 parameters. Parameters: ns' key' language' considerLanguageFallbacks' considerNamespaceFallbacks
Long Parameter List,Rebel.Framework.Localization.Parsing,InnerParserException,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Parsing\DefaultExpressionParser.cs,InnerParserException,The method has 5 parameters. Parameters: construct' pos' key' defaultMessage' parameters
Long Parameter List,Rebel.Framework.Localization.Processing.SwitchConditions,IntervalConditionFactory,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Processing\SwitchConditions\IntervalCondition.cs,CreateIntervalCondition,The method has 5 parameters. Parameters: min' max' minInclusive' maxInclusive' culture
Long Parameter List,Rebel.Framework.Localization.Web.JavaScript,JavaScriptGenerator,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Web\JavaScript\JavaScriptGenerator.cs,WriteScript,The method has 7 parameters. Parameters: manager' clientClassName' output' language' defaultNamespace' filter' includeScriptTags
Long Parameter List,Rebel.Framework.Localization.Web.JavaScript,JavaScriptGenerator,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Web\JavaScript\JavaScriptGenerator.cs,Write,The method has 6 parameters. Parameters: ns' key' language' expr' output' clientClassName
Long Parameter List,Rebel.Framework.Localization.Web.JavaScript,JavaScriptHelpers,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Web\JavaScript\JavaScriptGenerator.cs,WriteScript,The method has 6 parameters. Parameters: manager' clientClassName' language' defaultNamespace' filter' includeScriptTags
Long Parameter List,Rebel.Framework.Localization.Web.Mvc.Controllers,ClientSideScriptController,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Web\Mvc\Controllers\ClientSideScriptController.cs,Index,The method has 6 parameters. Parameters: namespaces' keyFilters' var' handler' defaultNamespace' gzip
Long Parameter List,Rebel.Framework.Localization.Web.Mvc,ExceptionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Web\Mvc\ExceptionHelper.cs,LocalizeValidationException,The method has 5 parameters. Parameters: textManager' ex' metadata' localizationInfo' value
Long Parameter List,Rebel.Framework.Localization.Web.Mvc,LocalizedTextJavascriptResult,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Web\Mvc\LocalizedTextJavascriptResult.cs,LocalizedTextJavascriptResult,The method has 6 parameters. Parameters: clientClassName' language' defaultNamespace' filter' gzip' jsonp
Long Parameter List,Rebel.Framework.Localization.Web.Mvc,LocalizedTextJavascriptResult,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Web\Mvc\LocalizedTextJavascriptResult.cs,Create,The method has 5 parameters. Parameters: clientClassName' language' keyFilter' filter' gzip
Long Parameter List,Rebel.Framework.Localization.Web.Mvc,LocalizingModelMetadataProvider,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Web\Mvc\LocalizingModelMetadataProvider.cs,CreateMetadata,The method has 5 parameters. Parameters: attributes' containerType' modelAccessor' modelType' propertyName
Long Parameter List,Rebel.Framework.Localization.Web.Mvc,ResourceHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Web\Mvc\ResourceHelper.cs,GetUrl,The method has 5 parameters. Parameters: key' values' language' ns' type
Long Parameter List,Rebel.Framework.Tasks,ApplicationTaskManager,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Tasks\ApplicationTaskManager.cs,ExecuteInCancellableTask,The method has 8 parameters. Parameters: eventSource' taskItem' preActionTaskTrigger' postActionTaskTrigger' execution' preActionEventArgs' postActionEventArgs' frameworkContext
Long Parameter List,Rebel.Framework.TypeMapping,AbstractFluentMappingEngine,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeMapping\AbstractFluentMappingEngine.cs,MapToSubclass,The method has 6 parameters. Parameters: source' sourceType' destinationBaseclassType' destinationSubclassType' mapperDefinition' scope
Long Identifier,Rebel.Framework,CloneOf<T>,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\CloneOf.cs,CloneOf,The length of the parameter partialTrustCausedPartialClone is 30.
Long Identifier,Rebel.Framework,TypeFinder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeFinder.cs,,The length of the parameter _localFilteredAssemblyCacheLocker is 33.
Long Identifier,Rebel.Framework.Configuration.Caching,CachePolicyPickerRule,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Configuration\Caching\CachePolicyPickerRule.cs,,The length of the parameter _couldNotParseExpressionAgainstTypes is 36.
Long Identifier,Rebel.Framework.Linq.QueryModel,FromClause,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\QueryModel\FromClause.cs,,The length of the parameter RevisionStatusNotSpecifiedType is 30.
Long Identifier,Rebel.Framework.Localization,DefaultTextManager,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\DefaultTextManager.cs,,The length of the parameter _assemblyTextSourcesInitialized is 31.
Long Identifier,Rebel.Framework.Localization.Parsing,DefaultExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Parsing\DefaultExpressionParser.cs,,The length of the parameter StoppersParameterNameTemplatedSwitch is 36.
Long Identifier,Rebel.Framework.Localization.Parsing,DefaultExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Parsing\DefaultExpressionParser.cs,,The length of the parameter StoppersParameterFormatTemplatedSwitch is 38.
Long Statement,Rebel.Framework,AbstractEquatableObject<T>,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\AbstractEquatableObject.cs,GetHashCode,The length of the statement  "                // Based on an algorithm set out at http://sharp-architecture.googlecode.com/svn/trunk/src/SharpArch/SharpArch.Core/DomainModel/BaseObject.cs " is 141.
Long Statement,Rebel.Framework,AbstractEquatableObject<T>,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\AbstractEquatableObject.cs,CompareCustomEqualityMembers,The length of the statement  "                    if (ReferenceEquals(localValue' incomingValue) || (ReferenceEquals(localValue' null) && ReferenceEquals(incomingValue' null))) " is 126.
Long Statement,Rebel.Framework,ExpressionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ExpressionHelper.cs,GetPropertyInfo,The length of the statement  "                                        throw new ArgumentException("The type of property could not be infered' try specifying the type parameters explicitly. This can happen if you have tried to access PropertyInfo where the property's return type is a value type' but the expression is trying to convert it to an object"); " is 284.
Long Statement,Rebel.Framework,ExpressionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ExpressionHelper.cs,GetPropertyInfo,The length of the statement  "                            else throw new ArgumentException(string.Format("Expression '{0}' refers to a method' not a property."' propertyLambda)); " is 120.
Long Statement,Rebel.Framework,ExpressionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ExpressionHelper.cs,IsMethodSignatureEqualTo,The length of the statement  "                if (typeof(Delegate).IsAssignableFrom(leftParams[i].ParameterType) && typeof(Delegate).IsAssignableFrom(rightParams[i].ParameterType)) " is 134.
Long Statement,Rebel.Framework,FileSystemInfoExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\FileSystemInfoExtensions.cs,EnumerateFileSystemInfosRecursive,The length of the statement  "            return directory.EnumerateFileSystemInfos().Concat(directory.EnumerateDirectories().SelectMany(EnumerateFileSystemInfosRecursive)); " is 131.
Long Statement,Rebel.Framework,HiveId,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\HiveId.cs,ToUri,The length of the statement  "                var outputAsUri = string.IsNullOrEmpty(formattedProviderId) ? "/" + valueAsUri : formattedProviderId + UriDelimiter + FormatValue(valueAsUri); " is 142.
Long Statement,Rebel.Framework,HiveId,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\HiveId.cs,ToString,The length of the statement  "                    var valueTypeForOutput = ProviderGroupRoot == null && string.IsNullOrEmpty(ProviderId) ? valueType : FormatValue(valueType); " is 124.
Long Statement,Rebel.Framework,HiveId,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\HiveId.cs,TryParse,The length of the statement  "            //Mandate.That(style.Success' x => new FormatException("Could not determine format of '{0}' in parameter formattedValue. Things to check: does the input string look like a valid Uri' but it contains invalid path characters?".InvariantFormat(formattedValue))); " is 259.
Long Statement,Rebel.Framework,HiveIdExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\HiveIdExtensions.cs,TryParseFromHtmlId,The length of the statement  "            // HtmlId version of the way HiveId is used by the backoffice generally starts with HtmlIdPrefix and will have a dot at the end with an item name " is 145.
Long Statement,Rebel.Framework,HiveIdExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\HiveIdExtensions.cs,TryParseFromHtmlId,The length of the statement  "            // However the id itself can correctly contain dots (e.g. a file extension) so we have to trust that it is the last dot... hmm " is 126.
Long Statement,Rebel.Framework,HiveIdTypeConverter,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\HiveIdTypeConverter.cs,ConvertTo,The length of the statement  "            return destinationType == typeof(string) ? castValue.ToString() : base.ConvertTo(context' culture' value' destinationType); " is 123.
Long Statement,Rebel.Framework,HiveIdValue,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\HiveIdValue.cs,CheckValueMatchesType,The length of the statement  "                    return new AttemptTuple<object>(Uri.TryCreate(HiveId.HiveEntityUriDecode(value.ToString())' UriKind.RelativeOrAbsolute' out uri)' uri); " is 135.
Long Statement,Rebel.Framework,HiveIdValueTypeConverter,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\HiveIdValueTypeConverter.cs,ConvertTo,The length of the statement  "            return destinationType == typeof(string) ? castValue.ToString() : base.ConvertTo(context' culture' value' destinationType); " is 123.
Long Statement,Rebel.Framework,HttpRuntimeApplicationCache,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\HttpRuntimeApplicationCache.cs,GetOrCreate,The length of the statement  "                    HttpRuntime.Cache.Add(realKey' parameters.Value' parameters.Dependencies' parameters.AbsoluteExpiration' parameters.SlidingExpiration' parameters.CacheItemPriority' parameters.OnRemoved); " is 187.
Long Statement,Rebel.Framework,HttpRuntimeApplicationCache,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\HttpRuntimeApplicationCache.cs,InvalidateItems,The length of the statement  "                            where Regex.IsMatch(key.Substring(ContextKey.Length' key.Length - ContextKey.Length)' pattern' RegexOptions.Compiled | RegexOptions.IgnoreCase) " is 143.
Long Statement,Rebel.Framework,DirtyExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\DirtyExtensions.cs,TrySetPropertyFromDirty,The length of the statement  "            return TrySetPropertyFromDirty(destination' prop' source' dirtyProp' () => (TDestinationProperty)propToGet.GetValue(source' null)); " is 131.
Long Statement,Rebel.Framework,Mandate,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Mandate.cs,ParameterCondition,The length of the statement  "            // Warning: don't make this method have an optional message parameter (removing the other ParameterCondition overload) as it will " is 129.
Long Statement,Rebel.Framework,ObjectExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ObjectExtensions.cs,Clone,The length of the statement  "                throw new ArgumentException("In order to clone' the incoming type '{0}' must be serializable".InvariantFormat(typeof(T).FullName)' "source"); " is 141.
Long Statement,Rebel.Framework,ObjectExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ObjectExtensions.cs,GetObjectFactory,The length of the statement  "                .Where(x => x.GetParameters().Count() == 0 && (isFullyTrusted || (!isFullyTrusted && !x.IsSecurityCritical && !x.IsSecuritySafeCritical))) " is 138.
Long Statement,Rebel.Framework,ObjectExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ObjectExtensions.cs,GetObjectFactory,The length of the statement  "                // This catch block is here because there are certain types of constructor that I can't grab via properties on ConstructorInfo " is 126.
Long Statement,Rebel.Framework,ObjectExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ObjectExtensions.cs,GetObjectFactory,The length of the statement  "                // for example NullViewLocationCache is a sealed internal type with no constructor' yet a constructor is found using the above  " is 126.
Long Statement,Rebel.Framework,ObjectExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ObjectExtensions.cs,GetObjectFactory,The length of the statement  "            // We're in partial trust' but haven't found a default constructor' so find the first constructor with nullable parameter types " is 127.
Long Statement,Rebel.Framework,ObjectExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ObjectExtensions.cs,GetObjectFactory,The length of the statement  "                var paramValues = nearestConstructor.GetParameters().Select(x => TypeFinder.IsImplicitValueType(x.ParameterType) ? x.ParameterType.GetDefaultValue() : CreateObject(x.ParameterType)).ToArray(); " is 192.
Long Statement,Rebel.Framework,ObjectExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ObjectExtensions.cs,GetObjectFactory,The length of the statement  "                "Cannot find a default constructor for {0}' and since this AppDomain is not fully trusted' also tried to find another constructor' but that failed too. Come to think of it' how do YOU make this object?".InvariantFormat(type.FullName)); " is 235.
Long Statement,Rebel.Framework,ObjectExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ObjectExtensions.cs,ToDictionary,The length of the statement  "            return o.ToDictionary<TVal>(ignoreProperties.Select(e => o.GetPropertyInfo(e)).Select(propInfo => propInfo.Name).ToArray()); " is 124.
Long Statement,Rebel.Framework,ObjectExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ObjectExtensions.cs,ToDebugString,The length of the statement  "                if (obj is int || obj is Int16 || obj is Int64 || obj is double || obj is bool || obj is int? || obj is Int16? || obj is Int64? || obj is double? || obj is bool?) " is 162.
Long Statement,Rebel.Framework,ObjectExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ObjectExtensions.cs,ToDebugString,The length of the statement  "                    var items = (from object enumItem in enumerable let value = GetEnumPropertyDebugString(enumItem' levels) where value != null select value).Take(10).ToList(); " is 157.
Long Statement,Rebel.Framework,ObjectExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ObjectExtensions.cs,ToXmlString,The length of the statement  "            throw new NotSupportedException("Cannot convert type " + type.FullName + " to a string using ToXmlString as it is not supported by XmlConvert");             " is 144.
Long Statement,Rebel.Framework,StringExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\StringExtensions.cs,EnsureStartsWith,The length of the statement  "            return toStartWith + input.TrimStart(toStartWith.ToArray()); // Ensure each char is removed first from input' e.g. ~/ plus /Path will equal ~/Path not ~//Path " is 158.
Long Statement,Rebel.Framework,StringExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\StringExtensions.cs,InvariantContains,The length of the statement  "            return compare.Contains(compareTo' new DeferredEqualityComparer<string>((source' dest) => source.Equals(dest' StringComparison.InvariantCultureIgnoreCase)' x => x.GetHashCode())); " is 179.
Long Statement,Rebel.Framework,StringExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\StringExtensions.cs,IsGuid,The length of the statement  "                    guidRegEx = new Regex(@"^(\{{0'1}([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}\}{0'1})$"); " is 130.
Long Statement,Rebel.Framework,StringExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\StringExtensions.cs,IsGuid,The length of the statement  "                    guidRegEx = new Regex(@"^(\{{0'1}([0-9a-fA-F]){8}([0-9a-fA-F]){4}([0-9a-fA-F]){4}([0-9a-fA-F]){4}([0-9a-fA-F]){12}\}{0'1})$"); " is 126.
Long Statement,Rebel.Framework,TypeExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeExtensions.cs,GetCustomAttributes,The length of the statement  "            return _typeAttributeCache.GetOrAdd(key' x => type.GetCustomAttributes(typeof(T)' inherited).OfType<Attribute>().ToArray()).OfType<T>(); " is 136.
Long Statement,Rebel.Framework,TypeExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeExtensions.cs,GetCustomAttributes,The length of the statement  "            return _memberInfoAttributeCache.GetOrAdd(key' x => info.GetCustomAttributes(typeof(T)' inherited).OfType<Attribute>().ToArray()).OfType<T>(); " is 142.
Long Statement,Rebel.Framework,TypeFinder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeFinder.cs,IsTypeAssignableFrom,The length of the statement  "            // NOTE The use of a Tuple<'> here is because its Equals / GetHashCode implementation is literally 10.5x faster than KeyValuePair<'> " is 132.
Long Statement,Rebel.Framework,TypeFinder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeFinder.cs,IsTypeAssignableFrom,The length of the statement  "            return TypeCheckCache.GetOrAdd(new Tuple<Type' Type>(contract' implementation)' x => x.Item1.IsAssignableFrom(x.Item2)); " is 120.
Long Statement,Rebel.Framework,TypeFinder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeFinder.cs,IsImplicitValueType,The length of the statement  "            return ImplicitValueTypeCache.GetOrAdd(implementation' x => IsValueType(implementation) || implementation.IsEnum || implementation == typeof(string) || implementation == typeof(LocalizedString)); " is 195.
Long Statement,Rebel.Framework,TypeFinder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeFinder.cs,FindAssembliesWithAttribute,The length of the statement  "                _attributedAssemblies.Add(new AttributedAssembly { Assembly = a' PluginAttributeType = typeof(T)' AssemblyFolder = null }); " is 123.
Long Statement,Rebel.Framework,TypeFinder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeFinder.cs,GetTypes,The length of the statement  "                    where !t.IsInterface && assignTypeFrom.IsAssignableFrom(t) && (onlyConcreteClasses ? (t.IsClass && !t.IsAbstract) : true) " is 121.
Long Statement,Rebel.Framework,TypeFinder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeFinder.cs,GetTypes,The length of the statement  "                        assembly.GetTypes().Where(t => !t.IsInterface && assignTypeFrom.IsAssignableFrom(t) && (onlyConcreteClasses ? (t.IsClass && !t.IsAbstract) : true))) " is 148.
Long Statement,Rebel.Framework,DynamicMemberAccess,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeFinder.cs,CompileGetterDelegate,The length of the statement  "                UnaryExpression instanceCast = property.DeclaringType.IsValueType ? Expression.Convert(instance' property.DeclaringType) : Expression.TypeAs(instance' property.DeclaringType); " is 175.
Long Statement,Rebel.Framework,DynamicMemberAccess,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeFinder.cs,CompileSetterDelegate,The length of the statement  "                UnaryExpression instanceCast = property.DeclaringType.IsValueType ? Expression.Convert(instance' property.DeclaringType) : Expression.TypeAs(instance' property.DeclaringType); " is 175.
Long Statement,Rebel.Framework,DynamicMemberAccess,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeFinder.cs,CompileSetterDelegate,The length of the statement  "                UnaryExpression valueCast = property.PropertyType.IsValueType ? Expression.Convert(value' property.PropertyType) : Expression.TypeAs(value' property.PropertyType); " is 163.
Long Statement,Rebel.Framework,MappingExpressionExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\MappingExpressionExtensions.cs,IgnoreMemberByName,The length of the statement  "                throw new MissingMemberException("Could not find the property " + memberName + " on type " + typeof (TTarget).FullName); " is 120.
Long Statement,Rebel.Framework.Caching,AbstractCacheProvider,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Caching\AbstractCacheProvider.cs,GetCachePolicyForKey,The length of the statement  "            // Avoid people having to put Original. in front of all their expressions so that the dynamic expression parser can find the properties " is 135.
Long Statement,Rebel.Framework.Caching,DictionaryCacheProvider,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Caching\DictionaryCacheProvider.cs,GetKeysMatching,The length of the statement  "                if (convertKey != default(CacheKey<T>) && !ReferenceEquals(convertKey.Original' null) && predicate.Invoke(convertKey.Original)) " is 127.
Long Statement,Rebel.Framework.Caching,PerHttpRequestCacheProvider,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Caching\PerHttpRequestCacheProvider.cs,GetCurrent,The length of the statement  "            // We cannot accept new HttpContextWrapper(HttpContext.Current) as a ctor parameter otherwise we'll never get the new "Current" instance for other threads / requests. " is 166.
Long Statement,Rebel.Framework.Caching,PerHttpRequestCacheProvider,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Caching\PerHttpRequestCacheProvider.cs,GetKeysMatching,The length of the statement  "                if (convertKey != default(CacheKey<T>) && !ReferenceEquals(convertKey.Original' null) && predicate.Invoke(convertKey.Original)) " is 127.
Long Statement,Rebel.Framework.Caching,RuntimeCacheProvider,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Caching\RuntimeCacheProvider.cs,GetKeysMatching,The length of the statement  "                if (convertKey != default(CacheKey<T>) && !ReferenceEquals(convertKey.Original' null) && predicate.Invoke(convertKey.Original)) " is 127.
Long Statement,Rebel.Framework.Configuration.Caching,CachePolicyPickerRule,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Configuration\Caching\CachePolicyPickerRule.cs,KeyMatches,The length of the statement  "                            var lambda = System.Linq.Dynamic.DynamicExpression.ParseLambda(providedKeyType' typeof(bool)' Expression' _parameterValueCache.ToArray()); " is 138.
Long Statement,Rebel.Framework.Configuration.Caching,CachePolicyPickerRule,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Configuration\Caching\CachePolicyPickerRule.cs,KeyMatches,The length of the statement  "                LogHelper.Warn<General>("Could not parse cache policy rule [{0}]' message: {1}".InvariantFormat(Expression' ex.Message)); " is 121.
Long Statement,Rebel.Framework.Configuration,DeepConfigManager,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Configuration\DeepConfigManager.cs,SerializeProviderConfigSection,The length of the statement  "                            currGroupDeclaration = currGroupDeclaration.Elements("sectionGroup").Where(x => (string)x.Attribute("name") == part).First(); " is 125.
Long Statement,Rebel.Framework.Configuration,DeepConfigManager,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Configuration\DeepConfigManager.cs,GetWebAppSettings,The length of the statement  "                    // Since this configuration is purely for overriding in the opposite direction' we specifically don't want to include settings that are  " is 135.
Long Statement,Rebel.Framework.Configuration,DeepConfigManager,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Configuration\DeepConfigManager.cs,GetWebAppSettings,The length of the statement  "                    // inherited' since in this loop through sub-config locations we may later move to a setting file which contains a specific' genuine overriding value. " is 150.
Long Statement,Rebel.Framework.Configuration,DeepConfigManager,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Configuration\DeepConfigManager.cs,GetWebSettings,The length of the statement  "                LogHelper.Warn<DeepConfigManager>("DeepConfigManager is designed for web applications' outside of a web context all config elements must follow normal configuraiton rules"); " is 173.
Long Statement,Rebel.Framework.Configuration,DeepConfigManager,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Configuration\DeepConfigManager.cs,GetWebSettings,The length of the statement  "                    LogHelper.Error<DeepConfigManager>("Error parsing config section in path " + searchPath + ". This config is being skipped."' e); " is 128.
Long Statement,Rebel.Framework.Configuration,DeepConfigManager,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Configuration\DeepConfigManager.cs,GetWebSettings,The length of the statement  "                // Since this configuration is purely for overriding in the opposite direction' we specifically don't want to include settings that are  " is 135.
Long Statement,Rebel.Framework.Configuration,DeepConfigManager,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Configuration\DeepConfigManager.cs,GetWebSettings,The length of the statement  "                // inherited' since in this loop through sub-config locations we may later move to a setting file which contains a specific' genuine overriding value. " is 150.
Long Statement,Rebel.Framework.Configuration,DeepConfigManager,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Configuration\DeepConfigManager.cs,GetWebSettings,The length of the statement  "                    //this check is required! ... if there is say a 'task' section declared' this file will be found' but if there are not tasks then the 'source' will be null!! " is 157.
Long Statement,Rebel.Framework.Configuration,DeepConfigManager,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Configuration\DeepConfigManager.cs,GetSearchPaths,The length of the statement  "                foreach (var enumerateDirectory in Directory.EnumerateFiles(absolutePluginRoot' "web.config"' SearchOption.AllDirectories)) " is 123.
Long Statement,Rebel.Framework.Configuration,DeepConfigManager,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Configuration\DeepConfigManager.cs,GetSearchPaths,The length of the statement  "                    yield return relativePluginRoot + Path.GetDirectoryName(enumerateDirectory).Replace(absolutePluginRoot' "").Replace('\\'' '/') + "/"; " is 133.
Long Statement,Rebel.Framework.DependencyManagement,AbstractContainerBuilder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\DependencyManagement\AbstractContainerBuilder.cs,AddDependencyDemandBuilder,The length of the statement  "            using (DisposableTimer.TraceDuration<AbstractContainerBuilder>("Start AddDependencyDemandBuilder " + demandBuilder.GetType().Name' "End AddDependencyDemandBuilder")) " is 165.
Long Statement,Rebel.Framework.DependencyManagement,AbstractContainerBuilder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\DependencyManagement\AbstractContainerBuilder.cs,AddDemandsFromAssemblyOf,The length of the statement  "            using (DisposableTimer.TraceDuration<AbstractContainerBuilder>("Start AddDemandsFromAssemblyOf"' "End AddDemandsFromAssemblyOf")) " is 129.
Long Statement,Rebel.Framework.Dynamics,BendyBuilder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\BendyBuilder.cs,CreateMethod,The length of the statement  "            var signature = new Signature(name' typeof(TOut)' Param.Create<BendyObject>("bendyObject")' Param.Create<TIn1>(parameter1Name)); " is 128.
Long Statement,Rebel.Framework.Dynamics,BendyBuilder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\BendyBuilder.cs,AutoCreateMethod,The length of the statement  "            var signature = new Signature(name' typeof(TOut)' body.Parameters.Select(parameterExpression => new Parameter(parameterExpression.Name' parameterExpression.Type)).ToArray()); " is 174.
Long Statement,Rebel.Framework.Dynamics,BendyBuilder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\BendyBuilder.cs,AutoCreateMethod,The length of the statement  "            var signature = new Signature(name' body.Parameters.Select(parameterExpression => new Parameter(parameterExpression.Name' parameterExpression.Type)).ToArray()); " is 160.
Long Statement,Rebel.Framework.Dynamics,BendyBuilder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\BendyBuilder.cs,AutoCreateMethod,The length of the statement  "            var signature = new Signature(name' body.Parameters.Select(parameterExpression => new Parameter(parameterExpression.Name' parameterExpression.Type)).ToArray()); " is 160.
Long Statement,Rebel.Framework.Dynamics,BendyObject,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\BendyObject.cs,GetOriginalItem,The length of the statement  "            throw new ApplicationException("Unable to locate Original Item in Bendy Object of type " + originalItemType.ToString()); " is 120.
Long Statement,Rebel.Framework.Dynamics,BendyObject,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\BendyObject.cs,Equals,The length of the statement  "            return (BendyObjectValue == bendyObject.BendyObjectValue) && (__BendyChildren.SequenceEqual(bendyObject.__BendyChildren)); " is 122.
Long Statement,Rebel.Framework.Dynamics,DynamicExtensionsHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\DynamicExtensionsHelper.cs,GetCachedExtensions,The length of the statement  "                              var withAttribute = TypeFinder.FindClassesWithAttribute<DynamicExtensionsAttribute>(fromAssembly.AsEnumerableOfOne()' false); " is 125.
Long Statement,Rebel.Framework.Dynamics,DynamicExtensionsHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\DynamicExtensionsHelper.cs,GetCachedExtensions,The length of the statement  "                              var allMethodsWithAttribute = allMethods.Where(method => method.GetCustomAttributes<TAttributeType>(false).Any()).ToArray(); " is 124.
Long Statement,Rebel.Framework.Dynamics,DynamicNullableValueObject,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\DynamicNullableValueObject.cs,ToType,The length of the statement  "            throw new DynamicTypeConversionException("Cannot convert from {0} to {1}".InvariantFormat(value.GetType().FullName' conversionType.FullName)); " is 142.
Long Statement,Rebel.Framework.Dynamics.Expressions,DynamicMemberMetadata,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\DynamicMemberMetadata.cs,GetMember,The length of the statement  "            //ExpressionNodeModifierRegistry.Current.EnsureRegistered(currentGenericMethod.GetGenericMethodDefinition()' typeof(DynamicMemberFilterExpressionNode)); " is 152.
Long Statement,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,ParseMemberAccess,The length of the statement  "                    //throw this.ParseError(num' "No property or field '{0}' exists in type '{1}'"' (object)identifier' (object)ExpressionParser.GetTypeName(type)); " is 144.
Long Statement,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,SetTextPos,The length of the statement  "            this._currentChar = this._currentTextPosition < this._textLen ? this._expressionText[this._currentTextPosition] : char.MinValue; " is 128.
Long Statement,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,NextChar,The length of the statement  "            this._currentChar = this._currentTextPosition < this._textLen ? this._expressionText[this._currentTextPosition] : char.MinValue; " is 128.
Long Statement,Rebel.Framework.Expressions.Remotion,CustomQueryParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Expressions\Remotion\CustomQueryParser.cs,GetParsedQuery,The length of the statement  "            return ApplyAllNodes(_expressionTreeParser.ParseTree(expressionTreeRoot)' new ClauseGenerationContext(_expressionTreeParser.NodeTypeProvider)); " is 143.
Long Statement,Rebel.Framework.Expressions.Remotion,CustomQueryParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Expressions\Remotion\CustomQueryParser.cs,EnsureCustomModifiersRegisteredWithRelinq,The length of the statement  "            foreach (var registration in ExpressionNodeModifierRegistry.Current.Registrations.Where(x => !firstRegistry.IsRegistered(x.MethodInfo))) " is 136.
Long Statement,Rebel.Framework.Linq,Executor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\Executor.cs,ExecuteSingle,The length of the statement  "            // return returnDefaultWhenEmpty ? ExecuteCollection<T>(queryModel).SingleOrDefault() : ExecuteCollection<T>(queryModel).Single(); " is 130.
Long Statement,Rebel.Framework.Linq.CriteriaGeneration.ExpressionVisitors,AbstractExpressionTreeVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\ExpressionVisitors\AbstractExpressionTreeVisitor.cs,CreateUnhandledItemException,The length of the statement  "            var message = string.Format("The expression '{0}' (type: {1}) is not supported by this LINQ provider."' itemText' typeof(T)); " is 125.
Long Statement,Rebel.Framework.Linq.CriteriaGeneration.ExpressionVisitors,AbstractExpressionTreeVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\ExpressionVisitors\AbstractExpressionTreeVisitor.cs,VisitMethodCallExpression,The length of the statement  "                // This is all hacked together' better to make a method which can visit a Member to get its name or a FieldSelectorExpression " is 125.
Long Statement,Rebel.Framework.Linq.CriteriaGeneration.ExpressionVisitors,AbstractExpressionTreeVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\ExpressionVisitors\AbstractExpressionTreeVisitor.cs,VisitBinaryExpression,The length of the statement  "            return Expression.MakeBinary(expression.NodeType' visitedLeft' visitedRight' expression.IsLiftedToNull' expression.Method); " is 123.
Long Statement,Rebel.Framework.Linq.CriteriaGeneration.ExpressionVisitors,FieldPredicateExpressionRewriter,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\ExpressionVisitors\FieldPredicateExpressionRewriter.cs,GetBindingSupport,The length of the statement  "            var supportedNonDynamic = getMemberSupport.Invoke(left as MemberExpression) ?? getMethodSupport.Invoke(left as MethodCallExpression); " is 133.
Long Statement,Rebel.Framework.Linq.CriteriaGeneration.ExpressionVisitors,FieldPredicateExpressionRewriter,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\ExpressionVisitors\FieldPredicateExpressionRewriter.cs,NegateFieldPredicate,The length of the statement  "            return new FieldPredicateExpression(fieldPredicateExpression.SelectorExpression' new FieldValueExpression(reversed.Invoke()' fieldPredicateExpression.ValueExpression.Value)); " is 174.
Long Statement,Rebel.Framework.Linq.CriteriaGeneration.ExpressionVisitors,FieldPredicateExpressionRewriter,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\ExpressionVisitors\FieldPredicateExpressionRewriter.cs,ConvertToFieldPredicate,The length of the statement  "                // Update the ValuePredicateType based on the expression which might reference an operator or a NodeType of NotEqual etc. " is 121.
Long Statement,Rebel.Framework.Linq.CriteriaGeneration.ExpressionVisitors,FieldPredicateExpressionRewriter,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\ExpressionVisitors\FieldPredicateExpressionRewriter.cs,ConvertToFieldPredicate,The length of the statement  "                        return new FieldPredicateExpression(selectorExpression' new FieldValueExpression(leftBindingSignatureSupport.NodeType' right.Value)); " is 133.
Long Statement,Rebel.Framework.Linq.CriteriaGeneration.ExpressionVisitors,FieldPredicateExpressionRewriter,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\ExpressionVisitors\FieldPredicateExpressionRewriter.cs,UpdateValuePredicateType,The length of the statement  "            if (signatureSupport.NodeType != ValuePredicateType.Equal && signatureSupport.NodeType != ValuePredicateType.Empty) return; " is 123.
Long Statement,Rebel.Framework.Linq.CriteriaGeneration.ExpressionVisitors,QueryModelVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\ExpressionVisitors\QueryModelVisitor.cs,FromQueryModel,The length of the statement  "            return FromQueryModel(queryModel' defaultQueryStructureBinder' new DefaultExpressionTreeVisitor(defaultQueryStructureBinder)); " is 126.
Long Statement,Rebel.Framework.Linq.CriteriaGeneration.ExpressionVisitors,QueryModelVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\ExpressionVisitors\QueryModelVisitor.cs,VisitMainFromClause,The length of the statement  "            // If the Where clause is null' we have a request for "get all"' but the VisitWhereClause method never runs (thanks Remotion!) " is 126.
Long Statement,Rebel.Framework.Linq.CriteriaGeneration.StructureMetadata,AbstractQueryStructureBinder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\StructureMetadata\AbstractQueryStructureBinder.cs,CreateSchemaValueExpression,The length of the statement  "            return new SchemaValueExpression(reportedSignatureSupport.NodeType' ExpressionHelper.GetFirstValueFromArguments(expression.Arguments)); " is 135.
Long Statement,Rebel.Framework.Linq.CriteriaGeneration.StructureMetadata,AbstractQueryStructureBinder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\StructureMetadata\AbstractQueryStructureBinder.cs,CreateFieldValueExpression,The length of the statement  "            return new FieldValueExpression(reportedSignatureSupport.NodeType' ExpressionHelper.GetFirstValueFromArguments(expression.Arguments)); " is 134.
Long Statement,Rebel.Framework.Linq.CriteriaGeneration.StructureMetadata,DefaultQueryStructureBinder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\StructureMetadata\DefaultQueryStructureBinder.cs,CreateFieldSelector,The length of the statement  "                    if (ExpressionHelper.IsMember(expression.Object) && IsSupportedMember(containerExpr).SignatureSupportType != SignatureSupportType.NotSupported) " is 143.
Long Statement,Rebel.Framework.Linq.CriteriaGeneration.StructureMetadata,DefaultQueryStructureBinder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\StructureMetadata\DefaultQueryStructureBinder.cs,CreateFieldSelector,The length of the statement  "                return CreateFieldSelector(((ConstantExpression)expression.Arguments[0]).Value.ToString()' null' reportedSignatureSupport); " is 123.
Long Statement,Rebel.Framework.Linq.CriteriaGeneration.StructureMetadata,DefaultQueryStructureBinder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\StructureMetadata\DefaultQueryStructureBinder.cs,IsSupportedMethod,The length of the statement  "                    if (ExpressionHelper.IsMember(expression.Object) && IsSupportedMember(expression.Object as MemberExpression).SignatureSupportType != SignatureSupportType.NotSupported) " is 167.
Long Statement,Rebel.Framework.Localization,LanguageInfo,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\LanguageInfo.cs,GetCultureFromKey,The length of the statement  "                catch { } //Eat it. We couldn't get a CultureInfo from the language code' but then' CurrentCulture.Current isn't that bad. " is 122.
Long Statement,Rebel.Framework.Localization,TextManager,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\TextManager.cs,Get,The length of the statement  "            return Get(key' values' language' ns' TrackCallingAssembly ? typeof(TNamespace).Assembly : null' debug' returnNullOnMissing' encode); " is 133.
Long Statement,Rebel.Framework.Localization,TextManager,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\TextManager.cs,Get,The length of the statement  "                    StringEncoder = encode && StringEncoder != null && entry.PatternDialect.Encode ? StringEncoder : ((x) => x) //Use identity transform if no transformer is specified " is 163.
Long Statement,Rebel.Framework.Localization.Maintenance,AssemblySourceLoader,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Maintenance\AssemblySourceLoader.cs,GetTextSource,The length of the statement  "                            new LocalizationXmlSourceAttribute(LocalizationConfig.DefaultXmlFileName).GetSource(asm' textManager' targetNamespace))); " is 121.
Long Statement,Rebel.Framework.Localization.Maintenance.Extraction,CStyleLanguageTextExtractor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Maintenance\Extraction\CStyleLanguageTextExtractor.cs,GetTexts,The length of the statement  "                //Whitespace is trimmed. If leading or trailing whitespace is needed the pattern can be quoted. If a pattern must start with '"' use ""Pattern" " is 143.
Long Statement,Rebel.Framework.Localization.Maintenance.Extraction,SourceFileList,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Maintenance\Extraction\SourceFileList.cs,RelativePath,The length of the statement  "            int length = absoluteDirectories.Length < relativeDirectories.Length ? absoluteDirectories.Length : relativeDirectories.Length; " is 127.
Long Statement,Rebel.Framework.Localization.Maintenance.Extraction,TextExtractor<TDef>,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Maintenance\Extraction\TextExtractor.cs,ProcessText,The length of the statement  "            var lines = lineBreakMatcher.Matches(file.Contents).Cast<Match>().Select((m' i) => new { ArrayIndex = i' Match = m }).ToArray(); " is 128.
Long Statement,Rebel.Framework.Localization.Maintenance.Extraction,TextExtractor<TDef>,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Maintenance\Extraction\TextExtractor.cs,ProcessText,The length of the statement  "                var lineOffset = 1 + (lineIndex > 0 ? def.Index - (lines[lineIndex - 1].Match.Index + lines[lineIndex - 1].Match.Length) : def.Index); " is 134.
Long Statement,Rebel.Framework.Localization.Maintenance.Extraction,TextExtractor<TDef>,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Maintenance\Extraction\TextExtractor.cs,Put,The length of the statement  "            throw new LocalizedNotSupportedException("Exceptions.PutUnsupported"' "This text source does not support saving texts"); " is 120.
Long Statement,Rebel.Framework.Localization.Parsing,DefaultExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Parsing\DefaultExpressionParser.cs,UnexpectedToken,The length of the statement  "            SyntaxError(construct' "Unexpected '{0}'"' "DefaultExpressionParser.SyntaxError.UnexpectedToken"' new { Token = token }); " is 121.
Long Statement,Rebel.Framework.Localization.Parsing,DefaultExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Parsing\DefaultExpressionParser.cs,ExpectedToken,The length of the statement  "            SyntaxError(construct' "'{0}' expected"' "DefaultExpressionParser.SyntaxError.ExpectedToken"' new { Token = "" + token }); " is 122.
Long Statement,Rebel.Framework.Localization.Parsing,HtmlPatternTransformer,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Parsing\HtmlPatternTransformer.cs,Encode,The length of the statement  "                    .Replace(pattern' (m) => m.Groups["Colon"].Success ? m.Value : "%%lt%%" + m.Value.Substring(1' m.Value.Length - 2) + "%%gt%%"); " is 127.
Long Statement,Rebel.Framework.Localization.Processing,PatternDialect,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Processing\PatternDialect.cs,GetParameterEvaluator,The length of the statement  "                throw new LocalizedKeyNotFoundException("Exceptions.ParameterEvaluatorNotFound"' "No parameter evaluator found for {0}"' new { Text = spec }); " is 142.
Long Statement,Rebel.Framework.Localization.Processing,PatternDialect,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Processing\PatternDialect.cs,GetValueFormatter,The length of the statement  "                throw new LocalizedKeyNotFoundException("Exceptions.ValueFormatterNotFound"' "No parameter evaluator found for {0}"' new { Text = spelling});                 " is 141.
Long Statement,Rebel.Framework.Localization.Processing,PatternDialect,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Processing\PatternDialect.cs,GetSwitchConditionEvaluator,The length of the statement  "                throw new LocalizedKeyNotFoundException("Exceptions.SwitchConditionNotFound"' "No switch condition evaluator found for {0}"' new { Spec = expr });                 " is 146.
Long Statement,Rebel.Framework.Localization.Processing,PatternEvaluatingVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Processing\PatternEvaluator.cs,Visit,The length of the statement  "                                if (sc.Evaluator.Evaluate(ParameterValue.Wrap(i)' state.Context) || sc.Evaluator.Evaluate(ParameterValue.Wrap(iBackwards)' state.Context)) " is 138.
Long Statement,Rebel.Framework.Localization.Processing,PatternEvaluatingVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Processing\PatternEvaluator.cs,Visit,The length of the statement  "                        //The parameter '#' is shorthand for 'evaluated value' in switches. If a format is specified for the switch parameter this is applied " is 133.
Long Statement,Rebel.Framework.Localization.Processing.SwitchConditions,IntervalConditionFactory,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Processing\SwitchConditions\IntervalCondition.cs,CreateIntervalCondition,The length of the statement  "                return new IntervalCondition<TimeSpan> { Min = tmin' Max = tmax' MinInclusive = minInclusive' MaxInclusive = maxInclusive }; " is 124.
Long Statement,Rebel.Framework.Localization.Processing.SwitchConditions,IntervalConditionFactory,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Processing\SwitchConditions\IntervalCondition.cs,CreateIntervalCondition,The length of the statement  "                return new IntervalCondition<double> { Min = dmin' Max = dmax' MinInclusive = minInclusive' MaxInclusive = maxInclusive }; " is 122.
Long Statement,Rebel.Framework.Localization.Processing.SwitchConditions,ValueListConditionFactory,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Processing\SwitchConditions\ValueListCondition.cs,GetFor,The length of the statement  "                //If all the labels can be converted to a number (i.e. a double) it's better to represent them as that instead of doing string conversions " is 138.
Long Statement,Rebel.Framework.Localization.Web.JavaScript,JavaScriptGenerator,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Web\JavaScript\JavaScriptGenerator.cs,WriteScript,The length of the statement  "            //Texts (function takes: manager' applySwitch' defaultFormattedValue' htmlEncode' applyFormat' getValue' reflectionParameter " is 124.
Long Statement,Rebel.Framework.Localization.Web.JavaScript,JavaScriptGenerator,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Web\JavaScript\JavaScriptGenerator.cs,GetClientCultureInfoSpecification,The length of the statement  "            //Reflected: System.Web.Globalization.ClientCultureInfo. Mostly harmless' but locked to the current version's JavaScript (embedded as resources anyway...) " is 154.
Long Statement,Rebel.Framework.Localization.Web.JavaScript.ValueFormatters,StringCaseGenerator,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Web\JavaScript\ValueFormatters\StringCaseGenerator.cs,WritePrerequisites,The length of the statement  "            writer.Write(@"function _cf(s){return s.length ? s.substring(0' 1).toUpperCase() + s.substring(1).toLowerCase() : s;}"); " is 120.
Long Statement,Rebel.Framework.Localization.Web.Mvc.Controllers,ClientSideScriptController,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Web\Mvc\Controllers\ClientSideScriptController.cs,Index,The length of the statement  "                throw new ArgumentNullException("Either a var name or jsonp handler must be specified. (e.g. ?var=L10n or ?handler=loadTexts)"); " is 128.
Long Statement,Rebel.Framework.Localization.Web.Mvc,ExceptionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Web\Mvc\ExceptionHelper.cs,GetCommonTypeName,The length of the statement  "            if (t == typeof(Int16) || t == typeof(Int32) || t == typeof(Int64) || t == typeof(UInt16) || t == typeof(UInt32) || t == typeof(UInt64)) " is 136.
Long Statement,Rebel.Framework.Localization.Web.Mvc,LocalizedTextJavascriptResult,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Web\Mvc\LocalizedTextJavascriptResult.cs,ExecuteResult,The length of the statement  "                    LocalizationHelper.TextManager.WriteScript(JsonP ? "_" : ClientClassName ' Language' DefaultNamespace' Filter' false).ToString()); " is 130.
Long Statement,Rebel.Framework.Localization.Web.Mvc,LocalizingStringLengthAttributeAdapater,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Web\Mvc\LocalizingDataAnnotationsModelValidatorProvider.cs,GetClientValidationRules,The length of the statement  "            return new[] { new ModelClientValidationStringLengthRule(base.ClientErrorMessage' attr.MinimumLength' attr.MaximumLength) }; " is 124.
Long Statement,Rebel.Framework.Localization.Web.Mvc,LocalizingModelMetadataProvider,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Web\Mvc\LocalizingModelMetadataProvider.cs,CreateMetadata,The length of the statement  "                    foreach (var key in GetConventionKeyNames(containerType' propertyName' TestSimplePropertyName).Select(x => x + ".Description")) " is 127.
Long Statement,Rebel.Framework.Localization.Web.Mvc,ResourceHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Web\Mvc\ResourceHelper.cs,GetUrl,The length of the statement  "                var pathSpecifier = LocalizationHelper.TextManager.Get(key' values' ns: ns' language: language' returnNullOnMissing: true); " is 123.
Long Statement,Rebel.Framework.Localization.Web.Mvc,ResourceHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Web\Mvc\ResourceHelper.cs,GetUrl,The length of the statement  "                        asm = TypeFinder.GetFilteredLocalAssemblies(exclusionFilter: TextManager.KnownAssemblyExclusionFilter).FirstOrDefault(x => x.GetName().Name == parts[1]); " is 153.
Long Statement,Rebel.Framework.Tasks,ApplicationTaskManager,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Tasks\ApplicationTaskManager.cs,ExecuteInContext,The length of the statement  "            using (DisposableTimer.TraceDuration<ApplicationTaskManager>("Raising trigger: " + triggerName' "End trigger " + triggerName)) " is 126.
Long Statement,Rebel.Framework.Tasks,ApplicationTaskManager,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Tasks\ApplicationTaskManager.cs,ExecuteInContext,The length of the statement  "                            using (DisposableTimer.TraceDuration(abstractTask.GetType()' "[START] Executing " + abstractTask.ToString()' "[END] Executing " + abstractTask.ToString())) " is 155.
Long Statement,Rebel.Framework.DependencyManagement.DemandBuilders,FrameworkSetup,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\DependencyManagement\DemandBuilders\FrameworkSetup.cs,Build,The length of the statement  "                string warning = "Could not find the Rebel Framework configuration. Ensure that a configSection element is declared in the application's configuration' of type '{0}' using the xml element path of '{1}'. Using defaults for now." " is 227.
Long Statement,Rebel.Framework.DependencyManagement.DemandBuilders,FrameworkSetup,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\DependencyManagement\DemandBuilders\FrameworkSetup.cs,Build,The length of the statement  "                .ForFactory(x => new DefaultFrameworkCaches(x.Resolve<AbstractCacheProvider>("limited")' x.Resolve<AbstractCacheProvider>("extended"))) " is 135.
Long Statement,Rebel.Framework.TypeMapping,FrameworkModelMapper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeMapping\FrameworkModelMapper.cs,ConfigureLocalizationModelMappings,The length of the statement  "                .CreateUsing(x => new LocalizedString(x.Value)); //TODO: Change this so that cultures are copied across too (requires keyvalues inside LocalizedString to be exposed) " is 165.
Long Statement,Rebel.Framework.TypeMapping,DelegatedMapHandlerList,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeMapping\DelegatedMapHandlerList.cs,Add,The length of the statement  "            Func<object' AbstractLookupHelper' AbstractMappingEngine' object> castExpression = (source' lookup' masterMapper) => handler((TSource)source' lookup' masterMapper); " is 164.
Long Statement,Rebel.Framework.TypeMapping,DelegatedMapHandlerList,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeMapping\DelegatedMapHandlerList.cs,Add,The length of the statement  "            Action<object' object' AbstractLookupHelper' AbstractMappingEngine> castRefExpression = (source' dest' lookup' masterMapper) => refHandler.Invoke((TSource)source' (TDestination)dest' lookup' masterMapper); " is 205.
Long Statement,Rebel.Framework.TypeMapping,DelegatedMapHandlerList,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeMapping\DelegatedMapHandlerList.cs,Add,The length of the statement  "            var keyValuePair = new KeyValuePair<TypeMapperMetadata' TypeMapDelegatePair>(typeMapperMetadata' new TypeMapDelegatePair(castExpression' castRefExpression)); " is 157.
Long Statement,Rebel.Framework.TypeMapping,AbstractFluentMappingEngine,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeMapping\AbstractFluentMappingEngine.cs,TryGetMapper,The length of the statement  "                    var found = _mappers.Where(x => x.Value.Metadata.PermitTypeInheritance && x.Value.Metadata.SourceType.IsAssignableFrom(source) " is 126.
Long Statement,Rebel.Framework.TypeMapping,AbstractFluentMappingEngine,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeMapping\AbstractFluentMappingEngine.cs,AddMap,The length of the statement  "            if (!_mappers.TryAdd(new TypeMapDefinition(metadata.SourceType' metadata.DestinationType)' new MapperDefinition(mapper' metadata))) " is 131.
Long Statement,Rebel.Framework.TypeMapping,AbstractFluentMappingEngine,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeMapping\AbstractFluentMappingEngine.cs,AddMap,The length of the statement  "                throw new InvalidOperationException("Cannot add more than one mapping for the types " + metadata.SourceType.Name + "' " + metadata.DestinationType.Name); " is 153.
Long Statement,Rebel.Framework.TypeMapping,AbstractFluentMappingEngine,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeMapping\AbstractFluentMappingEngine.cs,Map,The length of the statement  "                return MapToSubclass(source' sourceType' mapperDefinition.Metadata.DestinationType' destinationType' mapperDefinition' scope); " is 126.
Long Statement,Rebel.Framework.TypeMapping,AbstractFluentMappingEngine,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeMapping\AbstractFluentMappingEngine.cs,MapToSubclass,The length of the statement  "                        string.Format("Could not map from {0} to {1} because {1} does not have a parameterless constructor"' sourceType.Name' destinationSubclassType.Name)' ex); " is 153.
Long Statement,Rebel.Framework.TypeMapping,AbstractFluentMappingEngine,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeMapping\AbstractFluentMappingEngine.cs,MapToSubclass,The length of the statement  "            throw new InvalidCastException("Cannot map from type " + sourceType + " to subclass type " + destinationSubclassType + " from the map specified for the baseclass type " + destinationBaseclassType); " is 197.
Long Statement,Rebel.Framework.TypeMapping,EnumerableTypeMapper<TSource;TTarget>,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeMapping\EnumerableTypeMapper.cs,GetEnumerableItemType,The length of the statement  "                throw new NotSupportedException("EnumerableTypeMapper will only work for types derived from IEnumerable<T>' otherwise the class will need to be overridden to allow custom collections"); " is 185.
Long Statement,Rebel.Framework.TypeMapping,EnumerableTypeMapper<TSource;TTarget>,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeMapping\EnumerableTypeMapper.cs,CreateTarget,The length of the statement  "                //there was another issue trying to create thsi type' so lets revert to creating a list to fill in hopes we can assign it back to the enumerable collection " is 155.
Long Statement,Rebel.Framework.TypeMapping,EnumerableTypeMapper<TSource;TTarget>,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeMapping\EnumerableTypeMapper.cs,CreateTarget,The length of the statement  "                throw new InvalidOperationException("Cannot implicitly create collection type of " + typeof(TTarget).Name + ". A CreateUsing expression must be declared."' ex); " is 160.
Long Statement,Rebel.Framework.TypeMapping,FluentMappingEngineContext<TSource;TTarget>,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeMapping\FluentMappingEngineContext.cs,MapFromRule,The length of the statement  "            //find the expression in our list based on the target object type' the target property type and the target property name " is 120.
Long Statement,Rebel.Framework.TypeMapping,ObjectMapper<TSource;TTarget>,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeMapping\ObjectMapper.cs,Map,The length of the statement  "                        // Also' if it's not a reference type' we can't map it in place and have to set the value of the property to a new value " is 120.
Long Statement,Rebel.Framework.TypeMapping,ObjectMapper<TSource;TTarget>,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeMapping\ObjectMapper.cs,Map,The length of the statement  "                    throw new MissingMemberException("Could not access property " + targetProp.property.Name + " on object Type " + targetProp.property.ComponentType.Name); " is 152.
Long Statement,Rebel.Framework.TypeMapping,ObjectMapper<TSource;TTarget>,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeMapping\ObjectMapper.cs,Map,The length of the statement  "                //now' try to map from a rule' if successful set the value... the MapFromRule will automatically add the Info to the already mapped list. " is 137.
Long Statement,Rebel.Framework.TypeMapping,ObjectMapper<TSource;TTarget>,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeMapping\ObjectMapper.cs,Map,The length of the statement  "                        throw new MemberAccessException("A member expression has been declared for a writeable mapping operation for property " + targetProp.property.Name + " on object Type " + targetProp.property.ComponentType.Name + " but this property is readonly and cannot be written to"); " is 270.
Long Statement,Rebel.Framework.TypeMapping,ObjectMapper<TSource;TTarget>,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeMapping\ObjectMapper.cs,SetProperty,The length of the statement  "            //Set the value using the expression compilation in DynamicMemberAccess' NOT the property descriptor since [ReadOnly] attributes will " is 133.
Long Statement,Rebel.Framework.TypeMapping,ObjectMapper<TSource;TTarget>,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeMapping\ObjectMapper.cs,SetProperty,The length of the statement  "                    throw new NotSupportedException("Cannot map from Type " + targetReflectedProp.PropertyType.Name + " to Type " + valueToSet.GetType().Name + " because there is no mapping defined for this conversion"); " is 200.
Long Statement,Rebel.Framework.TypeMapping,MappingEngineCollection,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeMapping\MappingEngineCollection.cs,FindDestinationType,The length of the statement  "                       .Where(x => x.PermitTypeInheritance && x.SourceType.IsAssignableFrom(sourceType) && baseDestinationType.IsAssignableFrom(x.DestinationType)) " is 140.
Long Statement,Rebel.Framework.TypeMapping,MappingEngineCollection,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeMapping\MappingEngineCollection.cs,FindDestinationType,The length of the statement  "                       .Where(x => x.PermitTypeInheritance && x.DestinationType.IsAssignableFrom(sourceType) && baseDestinationType.IsAssignableFrom(x.SourceType)) " is 140.
Long Statement,Rebel.Framework.TypeMapping,MappingEngineCollection,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeMapping\MappingEngineCollection.cs,GetTypeEqualHandler,The length of the statement  "            Func<Lazy<AbstractMappingEngine' TypeMapperMetadata>' bool> predicate = x => x.Metadata.SourceType.Equals(sourceType) && x.Metadata.DestinationType.Equals(destinationType); " is 172.
Complex Conditional,Rebel.Framework,ByteArrayExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ByteArrayExtensions.cs,StripUTF8BOMs,The conditional expression  "bytes.Length > 2 && bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF"  is complex.
Complex Conditional,Rebel.Framework,HiveId,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\HiveId.cs,DetectFormatStyleFromString,The conditional expression  "formattedValue.StartsWith(UriDelimiter) || formattedValue.StartsWith(ValuePrefix)                  && formattedValue.Split(new[] { UriDelimiter }' StringSplitOptions.RemoveEmptyEntries).Length == 2                  && Uri.IsWellFormedUriString(formattedValue' UriKind.Relative)"  is complex.
Complex Conditional,Rebel.Framework,ObjectExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ObjectExtensions.cs,ToDebugString,The conditional expression  "obj is int || obj is Int16 || obj is Int64 || obj is double || obj is bool || obj is int? || obj is Int16? || obj is Int64? || obj is double? || obj is bool?"  is complex.
Complex Conditional,Rebel.Framework,ObjectExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ObjectExtensions.cs,ToDebugString,The conditional expression  "(props.Count() == 2) && props[0].Name == "Key" && props[1].Name == "Value" && levels > -2"  is complex.
Complex Conditional,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,ParseComparison,The conditional expression  "this._token.Id == TokenId.Equal || this._token.Id == TokenId.DoubleEqual ||                     (this._token.Id == TokenId.ExclamationEqual || this._token.Id == TokenId.LessGreater) ||                     (this._token.Id == TokenId.GreaterThan || this._token.Id == TokenId.GreaterThanEqual ||                      (this._token.Id == TokenId.LessThan || this._token.Id == TokenId.LessThanEqual))"  is complex.
Complex Conditional,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,ParseMultiplicative,The conditional expression  "this._token.Id == TokenId.Asterisk || this._token.Id == TokenId.Slash ||                     (this._token.Id == TokenId.Percent || this.TokenIdentifierIs("mod"))"  is complex.
Complex Conditional,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,GenerateConversion,The conditional expression  "(IsNumericType(type1) || IsEnumType(type1)) && IsNumericType(type) || IsEnumType(type)"  is complex.
Complex Conditional,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,GenerateConversion,The conditional expression  "type1.IsAssignableFrom(type) || type.IsAssignableFrom(type1) || (type1.IsInterface || type.IsInterface)"  is complex.
Complex Conditional,Rebel.Framework.Linq.CriteriaGeneration.ExpressionVisitors,QueryModelVisitor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\ExpressionVisitors\QueryModelVisitor.cs,GetCriteriaExpression,The conditional expression  "left != null && right != null && left.Equals(this.IgnoreExpression) && right.Equals(this.IgnoreExpression)"  is complex.
Complex Conditional,Rebel.Framework.Localization.Processing.ParameterEvaluators,PatternLookupEvaluator,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Processing\ParameterEvaluators\PatternLookupEvaluator.cs,GetValue,The conditional expression  "(p.Key.StartsWith("\"") || p.Key.StartsWith("'")) && (p.Key.EndsWith("\"") || p.Key.EndsWith("'"))"  is complex.
Complex Conditional,Rebel.Framework.Localization.Web.JavaScript.ParameterEvaluators,PatternLookupGenerator,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Web\JavaScript\ParameterEvaluators\PatternLookupGenerator.cs,WriteEvaluator,The conditional expression  "(p.Key.StartsWith("\"") || p.Key.StartsWith("'")) && (p.Key.EndsWith("\"") || p.Key.EndsWith("'"))"  is complex.
Complex Conditional,Rebel.Framework.Localization.Web.Mvc,ExceptionHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Web\Mvc\ExceptionHelper.cs,GetCommonTypeName,The conditional expression  "t == typeof(Int16) || t == typeof(Int32) || t == typeof(Int64) || t == typeof(UInt16) || t == typeof(UInt32) || t == typeof(UInt64)"  is complex.
Virtual Method Call from Constructor,Rebel.Framework.Localization,DefaultTextManager,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\DefaultTextManager.cs,DefaultTextManager,The constructor "DefaultTextManager" calls a virtual method "GetNamespace".
Empty Catch Block,Rebel.Framework,LocalizationHtmlHelperExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\LocalizationHtmlHelperExtensions.cs,WithDefaultFormat,The method has an empty catch block.
Empty Catch Block,Rebel.Framework,ObjectExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ObjectExtensions.cs,TryConvertTo,The method has an empty catch block.
Empty Catch Block,Rebel.Framework,TypeFinder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeFinder.cs,GetAllAssemblies,The method has an empty catch block.
Empty Catch Block,Rebel.Framework.Diagnostics,AsynchronousRollingFileAppender,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Diagnostics\AsynchronousRollingFileAppender.cs,AppendLoggingEvents,The method has an empty catch block.
Empty Catch Block,Rebel.Framework.Diagnostics,AsynchronousRollingFileAppender,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Diagnostics\AsynchronousRollingFileAppender.cs,AppendLoggingEvents,The method has an empty catch block.
Empty Catch Block,Rebel.Framework.Localization,LanguageInfo,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\LanguageInfo.cs,GetCultureFromKey,The method has an empty catch block.
Empty Catch Block,Rebel.Framework.Localization.Maintenance,AssemblySourceLoader,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Maintenance\AssemblySourceLoader.cs,GetTextSource,The method has an empty catch block.
Empty Catch Block,Rebel.Framework.Localization.Maintenance,XmlTextSource,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Maintenance\XmlTextSource.cs,Monitoring,The method has an empty catch block.
Magic Number,Rebel.Framework,AbstractEquatableObject<T>,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\AbstractEquatableObject.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 41) ^ base.GetHashCode();
Magic Number,Rebel.Framework,ByteArrayExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ByteArrayExtensions.cs,StripUTF8BOMs,The following statement contains a magic number: bytes = bytes.Skip(3).ToArray();
Magic Number,Rebel.Framework,ByteArrayExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ByteArrayExtensions.cs,StripUTF8BOMs,The following statement contains a magic number: bytes.Length > 2 && bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF
Magic Number,Rebel.Framework,ByteArrayExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ByteArrayExtensions.cs,StripUTF8BOMs,The following statement contains a magic number: bytes.Length > 2 && bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF
Magic Number,Rebel.Framework,NotifyingDictionary<TKey;TValue>,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\NotifyingDictionary.cs,ToDebugString,The following statement contains a magic number: sb.AppendLine(pair.ToDebugString(2));
Magic Number,Rebel.Framework,HashCodeCombiner,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\HashCodeCombiner.cs,AddInt,The following statement contains a magic number: _combinedHash = ((_combinedHash << 5) + _combinedHash) ^ i;
Magic Number,Rebel.Framework,HiveId,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\HiveId.cs,DetectFormatStyleFromString,The following statement contains a magic number: formattedValue.StartsWith(UriDelimiter) || formattedValue.StartsWith(ValuePrefix)                  && formattedValue.Split(new[] { UriDelimiter }' StringSplitOptions.RemoveEmptyEntries).Length == 2                  && Uri.IsWellFormedUriString(formattedValue' UriKind.Relative)
Magic Number,Rebel.Framework,HiveId,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\HiveId.cs,DetectFormatStyleFromString,The following statement contains a magic number: split.Length > 1 && split.Length < 6
Magic Number,Rebel.Framework,HttpRuntimeCacheParameters<T>,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\HttpRuntimeCacheParameters.cs,HttpRuntimeCacheParameters,The following statement contains a magic number: SlidingExpiration = new TimeSpan(0' 0' 30' 0);
Magic Number,Rebel.Framework,ObjectExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ObjectExtensions.cs,DeepCopy,The following statement contains a magic number: recurseCount > 50
Magic Number,Rebel.Framework,ObjectExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ObjectExtensions.cs,EncodeJsString,The following statement contains a magic number: switch (c)                  {                      case '\"':                          sb.Append("\\\"");                          break;                      case '\\':                          sb.Append("\\\\");                          break;                      case '\b':                          sb.Append("\\b");                          break;                      case '\f':                          sb.Append("\\f");                          break;                      case '\n':                          sb.Append("\\n");                          break;                      case '\r':                          sb.Append("\\r");                          break;                      case '\t':                          sb.Append("\\t");                          break;                      default:                          int i = (int)c;                          if (i < 32 || i > 127)                          {                              sb.AppendFormat("\\u{0:X04}"' i);                          }                          else                          {                              sb.Append(c);                          }                          break;                  }
Magic Number,Rebel.Framework,ObjectExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ObjectExtensions.cs,EncodeJsString,The following statement contains a magic number: switch (c)                  {                      case '\"':                          sb.Append("\\\"");                          break;                      case '\\':                          sb.Append("\\\\");                          break;                      case '\b':                          sb.Append("\\b");                          break;                      case '\f':                          sb.Append("\\f");                          break;                      case '\n':                          sb.Append("\\n");                          break;                      case '\r':                          sb.Append("\\r");                          break;                      case '\t':                          sb.Append("\\t");                          break;                      default:                          int i = (int)c;                          if (i < 32 || i > 127)                          {                              sb.AppendFormat("\\u{0:X04}"' i);                          }                          else                          {                              sb.Append(c);                          }                          break;                  }
Magic Number,Rebel.Framework,ObjectExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ObjectExtensions.cs,ToDebugString,The following statement contains a magic number: var items = (from object enumItem in enumerable let value = GetEnumPropertyDebugString(enumItem' levels) where value != null select value).Take(10).ToList();
Magic Number,Rebel.Framework,ObjectExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ObjectExtensions.cs,ToDebugString,The following statement contains a magic number: (props.Count() == 2) && props[0].Name == "Key" && props[1].Name == "Value" && levels > -2
Magic Number,Rebel.Framework,ObjectExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ObjectExtensions.cs,ToDebugString,The following statement contains a magic number: (props.Count() == 2) && props[0].Name == "Key" && props[1].Name == "Value" && levels > -2
Magic Number,Rebel.Framework,StreamExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\StreamExtensions.cs,ReadAllBytes,The following statement contains a magic number: byte[] buffer = new byte[16 * 1024];
Magic Number,Rebel.Framework,StreamExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\StreamExtensions.cs,ReadAllBytes,The following statement contains a magic number: byte[] buffer = new byte[16 * 1024];
Magic Number,Rebel.Framework,StringExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\StringExtensions.cs,ToUrlAlias,The following statement contains a magic number: var validCodeRanges =                      //digits                      Enumerable.Range(48' 10).Concat(                      //lowercase chars                          Enumerable.Range(97' 26));
Magic Number,Rebel.Framework,StringExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\StringExtensions.cs,ToUrlAlias,The following statement contains a magic number: var validCodeRanges =                      //digits                      Enumerable.Range(48' 10).Concat(                      //lowercase chars                          Enumerable.Range(97' 26));
Magic Number,Rebel.Framework,StringExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\StringExtensions.cs,ToUrlAlias,The following statement contains a magic number: var validCodeRanges =                      //digits                      Enumerable.Range(48' 10).Concat(                      //lowercase chars                          Enumerable.Range(97' 26));
Magic Number,Rebel.Framework,StringExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\StringExtensions.cs,ToUrlAlias,The following statement contains a magic number: var validCodeRanges =                      //digits                      Enumerable.Range(48' 10).Concat(                      //lowercase chars                          Enumerable.Range(97' 26));
Magic Number,Rebel.Framework,StringExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\StringExtensions.cs,ConvertCase,The following statement contains a magic number: result = match.Groups[1].Value.ToLower() + match.Groups[2].Value;
Magic Number,Rebel.Framework,StringExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\StringExtensions.cs,EncodeAsGuid,The following statement contains a magic number: var hexLength = convertToHex.Length < 32 ? convertToHex.Length : 32;
Magic Number,Rebel.Framework,StringExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\StringExtensions.cs,EncodeAsGuid,The following statement contains a magic number: var hexLength = convertToHex.Length < 32 ? convertToHex.Length : 32;
Magic Number,Rebel.Framework,StringExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\StringExtensions.cs,EncodeAsGuid,The following statement contains a magic number: var hex = convertToHex.Substring(0' hexLength).PadLeft(32' '0');
Magic Number,Rebel.Framework,StringExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\StringExtensions.cs,UrlTokenDecode,The following statement contains a magic number: (num2 < 0) || (num2 > 10)
Magic Number,Rebel.Framework,PropertyMapDefinitionExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\PropertyMapDefinitionExtensions.cs,GetTargetObjectHashCode,The following statement contains a magic number: var hash = 31;
Magic Number,Rebel.Framework.Caching,CacheKey,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Caching\CacheKey.cs,GetAndRemoveTypeFromJson,The following statement contains a magic number: split.Length != 2
Magic Number,Rebel.Framework.Caching,StaticCachePolicy,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Caching\StaticCachePolicy.cs,CreateDefault,The following statement contains a magic number: return new StaticCachePolicy(TimeSpan.FromMinutes(5));
Magic Number,Rebel.Framework.Diagnostics,AsynchronousRollingFileAppender,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Diagnostics\AsynchronousRollingFileAppender.cs,OnClose,The following statement contains a magic number: manualResetEvent.WaitOne(TimeSpan.FromSeconds(5));
Magic Number,Rebel.Framework.Diagnostics,AsynchronousRollingFileAppender,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Diagnostics\AsynchronousRollingFileAppender.cs,AppendLoggingEvents,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,Rebel.Framework.Diagnostics,AsynchronousRollingFileAppender,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Diagnostics\AsynchronousRollingFileAppender.cs,OnBufferOverflow,The following statement contains a magic number: lastLoggedBufferOverflow < DateTime.UtcNow.AddSeconds(-30)
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,ParseStringLiteral,The following statement contains a magic number: string text = this._token.Text.Substring(1' this._token.Text.Length - 2);
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,ParseStringLiteral,The following statement contains a magic number: ch == 39
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,ParseIntegerLiteral,The following statement contains a magic number: str[0] != 45
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,ParseIif,The following statement contains a magic number: expressionArray.Length != 3
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,IsSignedIntegralType,The following statement contains a magic number: return GetNumericTypeKind(type) == 2;
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,IsUnsignedIntegralType,The following statement contains a magic number: return GetNumericTypeKind(type) == 3;
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,GetNumericTypeKind,The following statement contains a magic number: switch (Type.GetTypeCode(type))              {                  case TypeCode.Char:                  case TypeCode.Single:                  case TypeCode.Double:                  case TypeCode.Decimal:                      return 1;                  case TypeCode.SByte:                  case TypeCode.Int16:                  case TypeCode.Int32:                  case TypeCode.Int64:                      return 2;                  case TypeCode.Byte:                  case TypeCode.UInt16:                  case TypeCode.UInt32:                  case TypeCode.UInt64:                      return 3;                  default:                      return 0;              }
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,GetNumericTypeKind,The following statement contains a magic number: switch (Type.GetTypeCode(type))              {                  case TypeCode.Char:                  case TypeCode.Single:                  case TypeCode.Double:                  case TypeCode.Decimal:                      return 1;                  case TypeCode.SByte:                  case TypeCode.Int16:                  case TypeCode.Int32:                  case TypeCode.Int64:                      return 2;                  case TypeCode.Byte:                  case TypeCode.UInt16:                  case TypeCode.UInt32:                  case TypeCode.UInt64:                      return 3;                  default:                      return 0;              }
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,CheckAndPromoteOperands,The following statement contains a magic number: var args = new Expression[2]                  {                      left'                      right                  };
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,FindPropertyOrField,The following statement contains a magic number: var bindingAttr = (BindingFlags) (18 | (staticAccess ? 8 : 4));
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,FindPropertyOrField,The following statement contains a magic number: var bindingAttr = (BindingFlags) (18 | (staticAccess ? 8 : 4));
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,FindPropertyOrField,The following statement contains a magic number: var bindingAttr = (BindingFlags) (18 | (staticAccess ? 8 : 4));
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,FindMethod,The following statement contains a magic number: var bindingAttr = (BindingFlags) (18 | (staticAccess ? 8 : 4));
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,FindMethod,The following statement contains a magic number: var bindingAttr = (BindingFlags) (18 | (staticAccess ? 8 : 4));
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,FindMethod,The following statement contains a magic number: var bindingAttr = (BindingFlags) (18 | (staticAccess ? 8 : 4));
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,GenerateStringConcat,The following statement contains a magic number: return Expression.Call(                  null'                  typeof (string).GetMethod(                      "Concat"'                      new Type[2]                          {                              typeof (object)'                              typeof (object)                          })'                  new Expression[2]                      {                          left'                          right                      });
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,GenerateStringConcat,The following statement contains a magic number: return Expression.Call(                  null'                  typeof (string).GetMethod(                      "Concat"'                      new Type[2]                          {                              typeof (object)'                              typeof (object)                          })'                  new Expression[2]                      {                          left'                          right                      });
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,GetStaticMethod,The following statement contains a magic number: return left.Type.GetMethod(                  methodName'                  new Type[2]                      {                          left.Type'                          right.Type                      });
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,GenerateStaticMethodCall,The following statement contains a magic number: return Expression.Call(                  null'                  this.GetStaticMethod(methodName' left' right)'                  new Expression[2]                      {                          left'                          right                      });
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,NextToken,The following statement contains a magic number: switch (this._currentChar)              {                  case '!':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.ExclamationEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Exclamation;                          break;                      }                  case '"':                  case '\'':                      char ch = this._currentChar;                      do                      {                          this.NextChar();                          while (this._currentTextPosition < this._textLen && this._currentChar != ch)                              this.NextChar();                          if (this._currentTextPosition == this._textLen)                              throw ParseError(this._currentTextPosition' "Unterminated string literal"' new object[0]);                          this.NextChar();                      } while (this._currentChar == ch);                      tokenId = TokenId.StringLiteral;                      break;                  case '%':                      this.NextChar();                      tokenId = TokenId.Percent;                      break;                  case '&':                      this.NextChar();                      if (this._currentChar == 38)                      {                          this.NextChar();                          tokenId = TokenId.DoubleAmphersand;                          break;                      }                      else                      {                          tokenId = TokenId.Amphersand;                          break;                      }                  case '(':                      this.NextChar();                      tokenId = TokenId.OpenParen;                      break;                  case ')':                      this.NextChar();                      tokenId = TokenId.CloseParen;                      break;                  case '*':                      this.NextChar();                      tokenId = TokenId.Asterisk;                      break;                  case '+':                      this.NextChar();                      tokenId = TokenId.Plus;                      break;                  case ''':                      this.NextChar();                      tokenId = TokenId.Comma;                      break;                  case '-':                      this.NextChar();                      tokenId = TokenId.Minus;                      break;                  case '.':                      this.NextChar();                      tokenId = TokenId.Dot;                      break;                  case '/':                      this.NextChar();                      tokenId = TokenId.Slash;                      break;                  case ':':                      this.NextChar();                      tokenId = TokenId.Colon;                      break;                  case '<':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.LessThanEqual;                          break;                      }                      else if (this._currentChar == 62)                      {                          this.NextChar();                          tokenId = TokenId.LessGreater;                          break;                      }                      else                      {                          tokenId = TokenId.LessThan;                          break;                      }                  case '=':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.DoubleEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Equal;                          break;                      }                  case '>':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.GreaterThanEqual;                          break;                      }                      else                      {                          tokenId = TokenId.GreaterThan;                          break;                      }                  case '?':                      this.NextChar();                      tokenId = TokenId.Question;                      break;                  case '[':                      this.NextChar();                      tokenId = TokenId.OpenBracket;                      break;                  case ']':                      this.NextChar();                      tokenId = TokenId.CloseBracket;                      break;                  case '|':                      this.NextChar();                      if (this._currentChar == 124)                      {                          this.NextChar();                          tokenId = TokenId.DoubleBar;                          break;                      }                      else                      {                          tokenId = TokenId.Bar;                          break;                      }                  default:                      if (char.IsLetter(this._currentChar) || this._currentChar == 64 || this._currentChar == 95)                      {                          do                          {                              this.NextChar();                          } while (char.IsLetterOrDigit(this._currentChar) || this._currentChar == 95);                          tokenId = TokenId.Identifier;                          break;                      }                      else if (char.IsDigit(this._currentChar))                      {                          tokenId = TokenId.IntegerLiteral;                          do                          {                              this.NextChar();                          } while (char.IsDigit(this._currentChar));                          if (this._currentChar == 46)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 69 || this._currentChar == 101)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              if (this._currentChar == 43 || this._currentChar == 45)                                  this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 70 || this._currentChar == 102)                          {                              this.NextChar();                              break;                          }                          else                              break;                      }                      else if (this._currentTextPosition == this._textLen)                      {                          tokenId = TokenId.End;                          break;                      }                      else                          throw ParseError(                              this._currentTextPosition'                              "Syntax error '{0}'"'                              new object[1]                                  {                                      this._currentChar                                  });              }
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,NextToken,The following statement contains a magic number: switch (this._currentChar)              {                  case '!':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.ExclamationEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Exclamation;                          break;                      }                  case '"':                  case '\'':                      char ch = this._currentChar;                      do                      {                          this.NextChar();                          while (this._currentTextPosition < this._textLen && this._currentChar != ch)                              this.NextChar();                          if (this._currentTextPosition == this._textLen)                              throw ParseError(this._currentTextPosition' "Unterminated string literal"' new object[0]);                          this.NextChar();                      } while (this._currentChar == ch);                      tokenId = TokenId.StringLiteral;                      break;                  case '%':                      this.NextChar();                      tokenId = TokenId.Percent;                      break;                  case '&':                      this.NextChar();                      if (this._currentChar == 38)                      {                          this.NextChar();                          tokenId = TokenId.DoubleAmphersand;                          break;                      }                      else                      {                          tokenId = TokenId.Amphersand;                          break;                      }                  case '(':                      this.NextChar();                      tokenId = TokenId.OpenParen;                      break;                  case ')':                      this.NextChar();                      tokenId = TokenId.CloseParen;                      break;                  case '*':                      this.NextChar();                      tokenId = TokenId.Asterisk;                      break;                  case '+':                      this.NextChar();                      tokenId = TokenId.Plus;                      break;                  case ''':                      this.NextChar();                      tokenId = TokenId.Comma;                      break;                  case '-':                      this.NextChar();                      tokenId = TokenId.Minus;                      break;                  case '.':                      this.NextChar();                      tokenId = TokenId.Dot;                      break;                  case '/':                      this.NextChar();                      tokenId = TokenId.Slash;                      break;                  case ':':                      this.NextChar();                      tokenId = TokenId.Colon;                      break;                  case '<':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.LessThanEqual;                          break;                      }                      else if (this._currentChar == 62)                      {                          this.NextChar();                          tokenId = TokenId.LessGreater;                          break;                      }                      else                      {                          tokenId = TokenId.LessThan;                          break;                      }                  case '=':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.DoubleEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Equal;                          break;                      }                  case '>':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.GreaterThanEqual;                          break;                      }                      else                      {                          tokenId = TokenId.GreaterThan;                          break;                      }                  case '?':                      this.NextChar();                      tokenId = TokenId.Question;                      break;                  case '[':                      this.NextChar();                      tokenId = TokenId.OpenBracket;                      break;                  case ']':                      this.NextChar();                      tokenId = TokenId.CloseBracket;                      break;                  case '|':                      this.NextChar();                      if (this._currentChar == 124)                      {                          this.NextChar();                          tokenId = TokenId.DoubleBar;                          break;                      }                      else                      {                          tokenId = TokenId.Bar;                          break;                      }                  default:                      if (char.IsLetter(this._currentChar) || this._currentChar == 64 || this._currentChar == 95)                      {                          do                          {                              this.NextChar();                          } while (char.IsLetterOrDigit(this._currentChar) || this._currentChar == 95);                          tokenId = TokenId.Identifier;                          break;                      }                      else if (char.IsDigit(this._currentChar))                      {                          tokenId = TokenId.IntegerLiteral;                          do                          {                              this.NextChar();                          } while (char.IsDigit(this._currentChar));                          if (this._currentChar == 46)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 69 || this._currentChar == 101)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              if (this._currentChar == 43 || this._currentChar == 45)                                  this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 70 || this._currentChar == 102)                          {                              this.NextChar();                              break;                          }                          else                              break;                      }                      else if (this._currentTextPosition == this._textLen)                      {                          tokenId = TokenId.End;                          break;                      }                      else                          throw ParseError(                              this._currentTextPosition'                              "Syntax error '{0}'"'                              new object[1]                                  {                                      this._currentChar                                  });              }
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,NextToken,The following statement contains a magic number: switch (this._currentChar)              {                  case '!':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.ExclamationEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Exclamation;                          break;                      }                  case '"':                  case '\'':                      char ch = this._currentChar;                      do                      {                          this.NextChar();                          while (this._currentTextPosition < this._textLen && this._currentChar != ch)                              this.NextChar();                          if (this._currentTextPosition == this._textLen)                              throw ParseError(this._currentTextPosition' "Unterminated string literal"' new object[0]);                          this.NextChar();                      } while (this._currentChar == ch);                      tokenId = TokenId.StringLiteral;                      break;                  case '%':                      this.NextChar();                      tokenId = TokenId.Percent;                      break;                  case '&':                      this.NextChar();                      if (this._currentChar == 38)                      {                          this.NextChar();                          tokenId = TokenId.DoubleAmphersand;                          break;                      }                      else                      {                          tokenId = TokenId.Amphersand;                          break;                      }                  case '(':                      this.NextChar();                      tokenId = TokenId.OpenParen;                      break;                  case ')':                      this.NextChar();                      tokenId = TokenId.CloseParen;                      break;                  case '*':                      this.NextChar();                      tokenId = TokenId.Asterisk;                      break;                  case '+':                      this.NextChar();                      tokenId = TokenId.Plus;                      break;                  case ''':                      this.NextChar();                      tokenId = TokenId.Comma;                      break;                  case '-':                      this.NextChar();                      tokenId = TokenId.Minus;                      break;                  case '.':                      this.NextChar();                      tokenId = TokenId.Dot;                      break;                  case '/':                      this.NextChar();                      tokenId = TokenId.Slash;                      break;                  case ':':                      this.NextChar();                      tokenId = TokenId.Colon;                      break;                  case '<':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.LessThanEqual;                          break;                      }                      else if (this._currentChar == 62)                      {                          this.NextChar();                          tokenId = TokenId.LessGreater;                          break;                      }                      else                      {                          tokenId = TokenId.LessThan;                          break;                      }                  case '=':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.DoubleEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Equal;                          break;                      }                  case '>':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.GreaterThanEqual;                          break;                      }                      else                      {                          tokenId = TokenId.GreaterThan;                          break;                      }                  case '?':                      this.NextChar();                      tokenId = TokenId.Question;                      break;                  case '[':                      this.NextChar();                      tokenId = TokenId.OpenBracket;                      break;                  case ']':                      this.NextChar();                      tokenId = TokenId.CloseBracket;                      break;                  case '|':                      this.NextChar();                      if (this._currentChar == 124)                      {                          this.NextChar();                          tokenId = TokenId.DoubleBar;                          break;                      }                      else                      {                          tokenId = TokenId.Bar;                          break;                      }                  default:                      if (char.IsLetter(this._currentChar) || this._currentChar == 64 || this._currentChar == 95)                      {                          do                          {                              this.NextChar();                          } while (char.IsLetterOrDigit(this._currentChar) || this._currentChar == 95);                          tokenId = TokenId.Identifier;                          break;                      }                      else if (char.IsDigit(this._currentChar))                      {                          tokenId = TokenId.IntegerLiteral;                          do                          {                              this.NextChar();                          } while (char.IsDigit(this._currentChar));                          if (this._currentChar == 46)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 69 || this._currentChar == 101)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              if (this._currentChar == 43 || this._currentChar == 45)                                  this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 70 || this._currentChar == 102)                          {                              this.NextChar();                              break;                          }                          else                              break;                      }                      else if (this._currentTextPosition == this._textLen)                      {                          tokenId = TokenId.End;                          break;                      }                      else                          throw ParseError(                              this._currentTextPosition'                              "Syntax error '{0}'"'                              new object[1]                                  {                                      this._currentChar                                  });              }
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,NextToken,The following statement contains a magic number: switch (this._currentChar)              {                  case '!':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.ExclamationEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Exclamation;                          break;                      }                  case '"':                  case '\'':                      char ch = this._currentChar;                      do                      {                          this.NextChar();                          while (this._currentTextPosition < this._textLen && this._currentChar != ch)                              this.NextChar();                          if (this._currentTextPosition == this._textLen)                              throw ParseError(this._currentTextPosition' "Unterminated string literal"' new object[0]);                          this.NextChar();                      } while (this._currentChar == ch);                      tokenId = TokenId.StringLiteral;                      break;                  case '%':                      this.NextChar();                      tokenId = TokenId.Percent;                      break;                  case '&':                      this.NextChar();                      if (this._currentChar == 38)                      {                          this.NextChar();                          tokenId = TokenId.DoubleAmphersand;                          break;                      }                      else                      {                          tokenId = TokenId.Amphersand;                          break;                      }                  case '(':                      this.NextChar();                      tokenId = TokenId.OpenParen;                      break;                  case ')':                      this.NextChar();                      tokenId = TokenId.CloseParen;                      break;                  case '*':                      this.NextChar();                      tokenId = TokenId.Asterisk;                      break;                  case '+':                      this.NextChar();                      tokenId = TokenId.Plus;                      break;                  case ''':                      this.NextChar();                      tokenId = TokenId.Comma;                      break;                  case '-':                      this.NextChar();                      tokenId = TokenId.Minus;                      break;                  case '.':                      this.NextChar();                      tokenId = TokenId.Dot;                      break;                  case '/':                      this.NextChar();                      tokenId = TokenId.Slash;                      break;                  case ':':                      this.NextChar();                      tokenId = TokenId.Colon;                      break;                  case '<':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.LessThanEqual;                          break;                      }                      else if (this._currentChar == 62)                      {                          this.NextChar();                          tokenId = TokenId.LessGreater;                          break;                      }                      else                      {                          tokenId = TokenId.LessThan;                          break;                      }                  case '=':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.DoubleEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Equal;                          break;                      }                  case '>':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.GreaterThanEqual;                          break;                      }                      else                      {                          tokenId = TokenId.GreaterThan;                          break;                      }                  case '?':                      this.NextChar();                      tokenId = TokenId.Question;                      break;                  case '[':                      this.NextChar();                      tokenId = TokenId.OpenBracket;                      break;                  case ']':                      this.NextChar();                      tokenId = TokenId.CloseBracket;                      break;                  case '|':                      this.NextChar();                      if (this._currentChar == 124)                      {                          this.NextChar();                          tokenId = TokenId.DoubleBar;                          break;                      }                      else                      {                          tokenId = TokenId.Bar;                          break;                      }                  default:                      if (char.IsLetter(this._currentChar) || this._currentChar == 64 || this._currentChar == 95)                      {                          do                          {                              this.NextChar();                          } while (char.IsLetterOrDigit(this._currentChar) || this._currentChar == 95);                          tokenId = TokenId.Identifier;                          break;                      }                      else if (char.IsDigit(this._currentChar))                      {                          tokenId = TokenId.IntegerLiteral;                          do                          {                              this.NextChar();                          } while (char.IsDigit(this._currentChar));                          if (this._currentChar == 46)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 69 || this._currentChar == 101)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              if (this._currentChar == 43 || this._currentChar == 45)                                  this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 70 || this._currentChar == 102)                          {                              this.NextChar();                              break;                          }                          else                              break;                      }                      else if (this._currentTextPosition == this._textLen)                      {                          tokenId = TokenId.End;                          break;                      }                      else                          throw ParseError(                              this._currentTextPosition'                              "Syntax error '{0}'"'                              new object[1]                                  {                                      this._currentChar                                  });              }
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,NextToken,The following statement contains a magic number: switch (this._currentChar)              {                  case '!':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.ExclamationEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Exclamation;                          break;                      }                  case '"':                  case '\'':                      char ch = this._currentChar;                      do                      {                          this.NextChar();                          while (this._currentTextPosition < this._textLen && this._currentChar != ch)                              this.NextChar();                          if (this._currentTextPosition == this._textLen)                              throw ParseError(this._currentTextPosition' "Unterminated string literal"' new object[0]);                          this.NextChar();                      } while (this._currentChar == ch);                      tokenId = TokenId.StringLiteral;                      break;                  case '%':                      this.NextChar();                      tokenId = TokenId.Percent;                      break;                  case '&':                      this.NextChar();                      if (this._currentChar == 38)                      {                          this.NextChar();                          tokenId = TokenId.DoubleAmphersand;                          break;                      }                      else                      {                          tokenId = TokenId.Amphersand;                          break;                      }                  case '(':                      this.NextChar();                      tokenId = TokenId.OpenParen;                      break;                  case ')':                      this.NextChar();                      tokenId = TokenId.CloseParen;                      break;                  case '*':                      this.NextChar();                      tokenId = TokenId.Asterisk;                      break;                  case '+':                      this.NextChar();                      tokenId = TokenId.Plus;                      break;                  case ''':                      this.NextChar();                      tokenId = TokenId.Comma;                      break;                  case '-':                      this.NextChar();                      tokenId = TokenId.Minus;                      break;                  case '.':                      this.NextChar();                      tokenId = TokenId.Dot;                      break;                  case '/':                      this.NextChar();                      tokenId = TokenId.Slash;                      break;                  case ':':                      this.NextChar();                      tokenId = TokenId.Colon;                      break;                  case '<':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.LessThanEqual;                          break;                      }                      else if (this._currentChar == 62)                      {                          this.NextChar();                          tokenId = TokenId.LessGreater;                          break;                      }                      else                      {                          tokenId = TokenId.LessThan;                          break;                      }                  case '=':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.DoubleEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Equal;                          break;                      }                  case '>':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.GreaterThanEqual;                          break;                      }                      else                      {                          tokenId = TokenId.GreaterThan;                          break;                      }                  case '?':                      this.NextChar();                      tokenId = TokenId.Question;                      break;                  case '[':                      this.NextChar();                      tokenId = TokenId.OpenBracket;                      break;                  case ']':                      this.NextChar();                      tokenId = TokenId.CloseBracket;                      break;                  case '|':                      this.NextChar();                      if (this._currentChar == 124)                      {                          this.NextChar();                          tokenId = TokenId.DoubleBar;                          break;                      }                      else                      {                          tokenId = TokenId.Bar;                          break;                      }                  default:                      if (char.IsLetter(this._currentChar) || this._currentChar == 64 || this._currentChar == 95)                      {                          do                          {                              this.NextChar();                          } while (char.IsLetterOrDigit(this._currentChar) || this._currentChar == 95);                          tokenId = TokenId.Identifier;                          break;                      }                      else if (char.IsDigit(this._currentChar))                      {                          tokenId = TokenId.IntegerLiteral;                          do                          {                              this.NextChar();                          } while (char.IsDigit(this._currentChar));                          if (this._currentChar == 46)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 69 || this._currentChar == 101)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              if (this._currentChar == 43 || this._currentChar == 45)                                  this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 70 || this._currentChar == 102)                          {                              this.NextChar();                              break;                          }                          else                              break;                      }                      else if (this._currentTextPosition == this._textLen)                      {                          tokenId = TokenId.End;                          break;                      }                      else                          throw ParseError(                              this._currentTextPosition'                              "Syntax error '{0}'"'                              new object[1]                                  {                                      this._currentChar                                  });              }
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,NextToken,The following statement contains a magic number: switch (this._currentChar)              {                  case '!':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.ExclamationEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Exclamation;                          break;                      }                  case '"':                  case '\'':                      char ch = this._currentChar;                      do                      {                          this.NextChar();                          while (this._currentTextPosition < this._textLen && this._currentChar != ch)                              this.NextChar();                          if (this._currentTextPosition == this._textLen)                              throw ParseError(this._currentTextPosition' "Unterminated string literal"' new object[0]);                          this.NextChar();                      } while (this._currentChar == ch);                      tokenId = TokenId.StringLiteral;                      break;                  case '%':                      this.NextChar();                      tokenId = TokenId.Percent;                      break;                  case '&':                      this.NextChar();                      if (this._currentChar == 38)                      {                          this.NextChar();                          tokenId = TokenId.DoubleAmphersand;                          break;                      }                      else                      {                          tokenId = TokenId.Amphersand;                          break;                      }                  case '(':                      this.NextChar();                      tokenId = TokenId.OpenParen;                      break;                  case ')':                      this.NextChar();                      tokenId = TokenId.CloseParen;                      break;                  case '*':                      this.NextChar();                      tokenId = TokenId.Asterisk;                      break;                  case '+':                      this.NextChar();                      tokenId = TokenId.Plus;                      break;                  case ''':                      this.NextChar();                      tokenId = TokenId.Comma;                      break;                  case '-':                      this.NextChar();                      tokenId = TokenId.Minus;                      break;                  case '.':                      this.NextChar();                      tokenId = TokenId.Dot;                      break;                  case '/':                      this.NextChar();                      tokenId = TokenId.Slash;                      break;                  case ':':                      this.NextChar();                      tokenId = TokenId.Colon;                      break;                  case '<':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.LessThanEqual;                          break;                      }                      else if (this._currentChar == 62)                      {                          this.NextChar();                          tokenId = TokenId.LessGreater;                          break;                      }                      else                      {                          tokenId = TokenId.LessThan;                          break;                      }                  case '=':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.DoubleEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Equal;                          break;                      }                  case '>':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.GreaterThanEqual;                          break;                      }                      else                      {                          tokenId = TokenId.GreaterThan;                          break;                      }                  case '?':                      this.NextChar();                      tokenId = TokenId.Question;                      break;                  case '[':                      this.NextChar();                      tokenId = TokenId.OpenBracket;                      break;                  case ']':                      this.NextChar();                      tokenId = TokenId.CloseBracket;                      break;                  case '|':                      this.NextChar();                      if (this._currentChar == 124)                      {                          this.NextChar();                          tokenId = TokenId.DoubleBar;                          break;                      }                      else                      {                          tokenId = TokenId.Bar;                          break;                      }                  default:                      if (char.IsLetter(this._currentChar) || this._currentChar == 64 || this._currentChar == 95)                      {                          do                          {                              this.NextChar();                          } while (char.IsLetterOrDigit(this._currentChar) || this._currentChar == 95);                          tokenId = TokenId.Identifier;                          break;                      }                      else if (char.IsDigit(this._currentChar))                      {                          tokenId = TokenId.IntegerLiteral;                          do                          {                              this.NextChar();                          } while (char.IsDigit(this._currentChar));                          if (this._currentChar == 46)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 69 || this._currentChar == 101)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              if (this._currentChar == 43 || this._currentChar == 45)                                  this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 70 || this._currentChar == 102)                          {                              this.NextChar();                              break;                          }                          else                              break;                      }                      else if (this._currentTextPosition == this._textLen)                      {                          tokenId = TokenId.End;                          break;                      }                      else                          throw ParseError(                              this._currentTextPosition'                              "Syntax error '{0}'"'                              new object[1]                                  {                                      this._currentChar                                  });              }
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,NextToken,The following statement contains a magic number: switch (this._currentChar)              {                  case '!':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.ExclamationEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Exclamation;                          break;                      }                  case '"':                  case '\'':                      char ch = this._currentChar;                      do                      {                          this.NextChar();                          while (this._currentTextPosition < this._textLen && this._currentChar != ch)                              this.NextChar();                          if (this._currentTextPosition == this._textLen)                              throw ParseError(this._currentTextPosition' "Unterminated string literal"' new object[0]);                          this.NextChar();                      } while (this._currentChar == ch);                      tokenId = TokenId.StringLiteral;                      break;                  case '%':                      this.NextChar();                      tokenId = TokenId.Percent;                      break;                  case '&':                      this.NextChar();                      if (this._currentChar == 38)                      {                          this.NextChar();                          tokenId = TokenId.DoubleAmphersand;                          break;                      }                      else                      {                          tokenId = TokenId.Amphersand;                          break;                      }                  case '(':                      this.NextChar();                      tokenId = TokenId.OpenParen;                      break;                  case ')':                      this.NextChar();                      tokenId = TokenId.CloseParen;                      break;                  case '*':                      this.NextChar();                      tokenId = TokenId.Asterisk;                      break;                  case '+':                      this.NextChar();                      tokenId = TokenId.Plus;                      break;                  case ''':                      this.NextChar();                      tokenId = TokenId.Comma;                      break;                  case '-':                      this.NextChar();                      tokenId = TokenId.Minus;                      break;                  case '.':                      this.NextChar();                      tokenId = TokenId.Dot;                      break;                  case '/':                      this.NextChar();                      tokenId = TokenId.Slash;                      break;                  case ':':                      this.NextChar();                      tokenId = TokenId.Colon;                      break;                  case '<':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.LessThanEqual;                          break;                      }                      else if (this._currentChar == 62)                      {                          this.NextChar();                          tokenId = TokenId.LessGreater;                          break;                      }                      else                      {                          tokenId = TokenId.LessThan;                          break;                      }                  case '=':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.DoubleEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Equal;                          break;                      }                  case '>':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.GreaterThanEqual;                          break;                      }                      else                      {                          tokenId = TokenId.GreaterThan;                          break;                      }                  case '?':                      this.NextChar();                      tokenId = TokenId.Question;                      break;                  case '[':                      this.NextChar();                      tokenId = TokenId.OpenBracket;                      break;                  case ']':                      this.NextChar();                      tokenId = TokenId.CloseBracket;                      break;                  case '|':                      this.NextChar();                      if (this._currentChar == 124)                      {                          this.NextChar();                          tokenId = TokenId.DoubleBar;                          break;                      }                      else                      {                          tokenId = TokenId.Bar;                          break;                      }                  default:                      if (char.IsLetter(this._currentChar) || this._currentChar == 64 || this._currentChar == 95)                      {                          do                          {                              this.NextChar();                          } while (char.IsLetterOrDigit(this._currentChar) || this._currentChar == 95);                          tokenId = TokenId.Identifier;                          break;                      }                      else if (char.IsDigit(this._currentChar))                      {                          tokenId = TokenId.IntegerLiteral;                          do                          {                              this.NextChar();                          } while (char.IsDigit(this._currentChar));                          if (this._currentChar == 46)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 69 || this._currentChar == 101)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              if (this._currentChar == 43 || this._currentChar == 45)                                  this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 70 || this._currentChar == 102)                          {                              this.NextChar();                              break;                          }                          else                              break;                      }                      else if (this._currentTextPosition == this._textLen)                      {                          tokenId = TokenId.End;                          break;                      }                      else                          throw ParseError(                              this._currentTextPosition'                              "Syntax error '{0}'"'                              new object[1]                                  {                                      this._currentChar                                  });              }
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,NextToken,The following statement contains a magic number: switch (this._currentChar)              {                  case '!':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.ExclamationEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Exclamation;                          break;                      }                  case '"':                  case '\'':                      char ch = this._currentChar;                      do                      {                          this.NextChar();                          while (this._currentTextPosition < this._textLen && this._currentChar != ch)                              this.NextChar();                          if (this._currentTextPosition == this._textLen)                              throw ParseError(this._currentTextPosition' "Unterminated string literal"' new object[0]);                          this.NextChar();                      } while (this._currentChar == ch);                      tokenId = TokenId.StringLiteral;                      break;                  case '%':                      this.NextChar();                      tokenId = TokenId.Percent;                      break;                  case '&':                      this.NextChar();                      if (this._currentChar == 38)                      {                          this.NextChar();                          tokenId = TokenId.DoubleAmphersand;                          break;                      }                      else                      {                          tokenId = TokenId.Amphersand;                          break;                      }                  case '(':                      this.NextChar();                      tokenId = TokenId.OpenParen;                      break;                  case ')':                      this.NextChar();                      tokenId = TokenId.CloseParen;                      break;                  case '*':                      this.NextChar();                      tokenId = TokenId.Asterisk;                      break;                  case '+':                      this.NextChar();                      tokenId = TokenId.Plus;                      break;                  case ''':                      this.NextChar();                      tokenId = TokenId.Comma;                      break;                  case '-':                      this.NextChar();                      tokenId = TokenId.Minus;                      break;                  case '.':                      this.NextChar();                      tokenId = TokenId.Dot;                      break;                  case '/':                      this.NextChar();                      tokenId = TokenId.Slash;                      break;                  case ':':                      this.NextChar();                      tokenId = TokenId.Colon;                      break;                  case '<':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.LessThanEqual;                          break;                      }                      else if (this._currentChar == 62)                      {                          this.NextChar();                          tokenId = TokenId.LessGreater;                          break;                      }                      else                      {                          tokenId = TokenId.LessThan;                          break;                      }                  case '=':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.DoubleEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Equal;                          break;                      }                  case '>':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.GreaterThanEqual;                          break;                      }                      else                      {                          tokenId = TokenId.GreaterThan;                          break;                      }                  case '?':                      this.NextChar();                      tokenId = TokenId.Question;                      break;                  case '[':                      this.NextChar();                      tokenId = TokenId.OpenBracket;                      break;                  case ']':                      this.NextChar();                      tokenId = TokenId.CloseBracket;                      break;                  case '|':                      this.NextChar();                      if (this._currentChar == 124)                      {                          this.NextChar();                          tokenId = TokenId.DoubleBar;                          break;                      }                      else                      {                          tokenId = TokenId.Bar;                          break;                      }                  default:                      if (char.IsLetter(this._currentChar) || this._currentChar == 64 || this._currentChar == 95)                      {                          do                          {                              this.NextChar();                          } while (char.IsLetterOrDigit(this._currentChar) || this._currentChar == 95);                          tokenId = TokenId.Identifier;                          break;                      }                      else if (char.IsDigit(this._currentChar))                      {                          tokenId = TokenId.IntegerLiteral;                          do                          {                              this.NextChar();                          } while (char.IsDigit(this._currentChar));                          if (this._currentChar == 46)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 69 || this._currentChar == 101)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              if (this._currentChar == 43 || this._currentChar == 45)                                  this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 70 || this._currentChar == 102)                          {                              this.NextChar();                              break;                          }                          else                              break;                      }                      else if (this._currentTextPosition == this._textLen)                      {                          tokenId = TokenId.End;                          break;                      }                      else                          throw ParseError(                              this._currentTextPosition'                              "Syntax error '{0}'"'                              new object[1]                                  {                                      this._currentChar                                  });              }
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,NextToken,The following statement contains a magic number: switch (this._currentChar)              {                  case '!':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.ExclamationEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Exclamation;                          break;                      }                  case '"':                  case '\'':                      char ch = this._currentChar;                      do                      {                          this.NextChar();                          while (this._currentTextPosition < this._textLen && this._currentChar != ch)                              this.NextChar();                          if (this._currentTextPosition == this._textLen)                              throw ParseError(this._currentTextPosition' "Unterminated string literal"' new object[0]);                          this.NextChar();                      } while (this._currentChar == ch);                      tokenId = TokenId.StringLiteral;                      break;                  case '%':                      this.NextChar();                      tokenId = TokenId.Percent;                      break;                  case '&':                      this.NextChar();                      if (this._currentChar == 38)                      {                          this.NextChar();                          tokenId = TokenId.DoubleAmphersand;                          break;                      }                      else                      {                          tokenId = TokenId.Amphersand;                          break;                      }                  case '(':                      this.NextChar();                      tokenId = TokenId.OpenParen;                      break;                  case ')':                      this.NextChar();                      tokenId = TokenId.CloseParen;                      break;                  case '*':                      this.NextChar();                      tokenId = TokenId.Asterisk;                      break;                  case '+':                      this.NextChar();                      tokenId = TokenId.Plus;                      break;                  case ''':                      this.NextChar();                      tokenId = TokenId.Comma;                      break;                  case '-':                      this.NextChar();                      tokenId = TokenId.Minus;                      break;                  case '.':                      this.NextChar();                      tokenId = TokenId.Dot;                      break;                  case '/':                      this.NextChar();                      tokenId = TokenId.Slash;                      break;                  case ':':                      this.NextChar();                      tokenId = TokenId.Colon;                      break;                  case '<':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.LessThanEqual;                          break;                      }                      else if (this._currentChar == 62)                      {                          this.NextChar();                          tokenId = TokenId.LessGreater;                          break;                      }                      else                      {                          tokenId = TokenId.LessThan;                          break;                      }                  case '=':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.DoubleEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Equal;                          break;                      }                  case '>':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.GreaterThanEqual;                          break;                      }                      else                      {                          tokenId = TokenId.GreaterThan;                          break;                      }                  case '?':                      this.NextChar();                      tokenId = TokenId.Question;                      break;                  case '[':                      this.NextChar();                      tokenId = TokenId.OpenBracket;                      break;                  case ']':                      this.NextChar();                      tokenId = TokenId.CloseBracket;                      break;                  case '|':                      this.NextChar();                      if (this._currentChar == 124)                      {                          this.NextChar();                          tokenId = TokenId.DoubleBar;                          break;                      }                      else                      {                          tokenId = TokenId.Bar;                          break;                      }                  default:                      if (char.IsLetter(this._currentChar) || this._currentChar == 64 || this._currentChar == 95)                      {                          do                          {                              this.NextChar();                          } while (char.IsLetterOrDigit(this._currentChar) || this._currentChar == 95);                          tokenId = TokenId.Identifier;                          break;                      }                      else if (char.IsDigit(this._currentChar))                      {                          tokenId = TokenId.IntegerLiteral;                          do                          {                              this.NextChar();                          } while (char.IsDigit(this._currentChar));                          if (this._currentChar == 46)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 69 || this._currentChar == 101)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              if (this._currentChar == 43 || this._currentChar == 45)                                  this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 70 || this._currentChar == 102)                          {                              this.NextChar();                              break;                          }                          else                              break;                      }                      else if (this._currentTextPosition == this._textLen)                      {                          tokenId = TokenId.End;                          break;                      }                      else                          throw ParseError(                              this._currentTextPosition'                              "Syntax error '{0}'"'                              new object[1]                                  {                                      this._currentChar                                  });              }
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,NextToken,The following statement contains a magic number: switch (this._currentChar)              {                  case '!':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.ExclamationEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Exclamation;                          break;                      }                  case '"':                  case '\'':                      char ch = this._currentChar;                      do                      {                          this.NextChar();                          while (this._currentTextPosition < this._textLen && this._currentChar != ch)                              this.NextChar();                          if (this._currentTextPosition == this._textLen)                              throw ParseError(this._currentTextPosition' "Unterminated string literal"' new object[0]);                          this.NextChar();                      } while (this._currentChar == ch);                      tokenId = TokenId.StringLiteral;                      break;                  case '%':                      this.NextChar();                      tokenId = TokenId.Percent;                      break;                  case '&':                      this.NextChar();                      if (this._currentChar == 38)                      {                          this.NextChar();                          tokenId = TokenId.DoubleAmphersand;                          break;                      }                      else                      {                          tokenId = TokenId.Amphersand;                          break;                      }                  case '(':                      this.NextChar();                      tokenId = TokenId.OpenParen;                      break;                  case ')':                      this.NextChar();                      tokenId = TokenId.CloseParen;                      break;                  case '*':                      this.NextChar();                      tokenId = TokenId.Asterisk;                      break;                  case '+':                      this.NextChar();                      tokenId = TokenId.Plus;                      break;                  case ''':                      this.NextChar();                      tokenId = TokenId.Comma;                      break;                  case '-':                      this.NextChar();                      tokenId = TokenId.Minus;                      break;                  case '.':                      this.NextChar();                      tokenId = TokenId.Dot;                      break;                  case '/':                      this.NextChar();                      tokenId = TokenId.Slash;                      break;                  case ':':                      this.NextChar();                      tokenId = TokenId.Colon;                      break;                  case '<':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.LessThanEqual;                          break;                      }                      else if (this._currentChar == 62)                      {                          this.NextChar();                          tokenId = TokenId.LessGreater;                          break;                      }                      else                      {                          tokenId = TokenId.LessThan;                          break;                      }                  case '=':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.DoubleEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Equal;                          break;                      }                  case '>':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.GreaterThanEqual;                          break;                      }                      else                      {                          tokenId = TokenId.GreaterThan;                          break;                      }                  case '?':                      this.NextChar();                      tokenId = TokenId.Question;                      break;                  case '[':                      this.NextChar();                      tokenId = TokenId.OpenBracket;                      break;                  case ']':                      this.NextChar();                      tokenId = TokenId.CloseBracket;                      break;                  case '|':                      this.NextChar();                      if (this._currentChar == 124)                      {                          this.NextChar();                          tokenId = TokenId.DoubleBar;                          break;                      }                      else                      {                          tokenId = TokenId.Bar;                          break;                      }                  default:                      if (char.IsLetter(this._currentChar) || this._currentChar == 64 || this._currentChar == 95)                      {                          do                          {                              this.NextChar();                          } while (char.IsLetterOrDigit(this._currentChar) || this._currentChar == 95);                          tokenId = TokenId.Identifier;                          break;                      }                      else if (char.IsDigit(this._currentChar))                      {                          tokenId = TokenId.IntegerLiteral;                          do                          {                              this.NextChar();                          } while (char.IsDigit(this._currentChar));                          if (this._currentChar == 46)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 69 || this._currentChar == 101)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              if (this._currentChar == 43 || this._currentChar == 45)                                  this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 70 || this._currentChar == 102)                          {                              this.NextChar();                              break;                          }                          else                              break;                      }                      else if (this._currentTextPosition == this._textLen)                      {                          tokenId = TokenId.End;                          break;                      }                      else                          throw ParseError(                              this._currentTextPosition'                              "Syntax error '{0}'"'                              new object[1]                                  {                                      this._currentChar                                  });              }
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,NextToken,The following statement contains a magic number: switch (this._currentChar)              {                  case '!':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.ExclamationEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Exclamation;                          break;                      }                  case '"':                  case '\'':                      char ch = this._currentChar;                      do                      {                          this.NextChar();                          while (this._currentTextPosition < this._textLen && this._currentChar != ch)                              this.NextChar();                          if (this._currentTextPosition == this._textLen)                              throw ParseError(this._currentTextPosition' "Unterminated string literal"' new object[0]);                          this.NextChar();                      } while (this._currentChar == ch);                      tokenId = TokenId.StringLiteral;                      break;                  case '%':                      this.NextChar();                      tokenId = TokenId.Percent;                      break;                  case '&':                      this.NextChar();                      if (this._currentChar == 38)                      {                          this.NextChar();                          tokenId = TokenId.DoubleAmphersand;                          break;                      }                      else                      {                          tokenId = TokenId.Amphersand;                          break;                      }                  case '(':                      this.NextChar();                      tokenId = TokenId.OpenParen;                      break;                  case ')':                      this.NextChar();                      tokenId = TokenId.CloseParen;                      break;                  case '*':                      this.NextChar();                      tokenId = TokenId.Asterisk;                      break;                  case '+':                      this.NextChar();                      tokenId = TokenId.Plus;                      break;                  case ''':                      this.NextChar();                      tokenId = TokenId.Comma;                      break;                  case '-':                      this.NextChar();                      tokenId = TokenId.Minus;                      break;                  case '.':                      this.NextChar();                      tokenId = TokenId.Dot;                      break;                  case '/':                      this.NextChar();                      tokenId = TokenId.Slash;                      break;                  case ':':                      this.NextChar();                      tokenId = TokenId.Colon;                      break;                  case '<':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.LessThanEqual;                          break;                      }                      else if (this._currentChar == 62)                      {                          this.NextChar();                          tokenId = TokenId.LessGreater;                          break;                      }                      else                      {                          tokenId = TokenId.LessThan;                          break;                      }                  case '=':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.DoubleEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Equal;                          break;                      }                  case '>':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.GreaterThanEqual;                          break;                      }                      else                      {                          tokenId = TokenId.GreaterThan;                          break;                      }                  case '?':                      this.NextChar();                      tokenId = TokenId.Question;                      break;                  case '[':                      this.NextChar();                      tokenId = TokenId.OpenBracket;                      break;                  case ']':                      this.NextChar();                      tokenId = TokenId.CloseBracket;                      break;                  case '|':                      this.NextChar();                      if (this._currentChar == 124)                      {                          this.NextChar();                          tokenId = TokenId.DoubleBar;                          break;                      }                      else                      {                          tokenId = TokenId.Bar;                          break;                      }                  default:                      if (char.IsLetter(this._currentChar) || this._currentChar == 64 || this._currentChar == 95)                      {                          do                          {                              this.NextChar();                          } while (char.IsLetterOrDigit(this._currentChar) || this._currentChar == 95);                          tokenId = TokenId.Identifier;                          break;                      }                      else if (char.IsDigit(this._currentChar))                      {                          tokenId = TokenId.IntegerLiteral;                          do                          {                              this.NextChar();                          } while (char.IsDigit(this._currentChar));                          if (this._currentChar == 46)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 69 || this._currentChar == 101)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              if (this._currentChar == 43 || this._currentChar == 45)                                  this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 70 || this._currentChar == 102)                          {                              this.NextChar();                              break;                          }                          else                              break;                      }                      else if (this._currentTextPosition == this._textLen)                      {                          tokenId = TokenId.End;                          break;                      }                      else                          throw ParseError(                              this._currentTextPosition'                              "Syntax error '{0}'"'                              new object[1]                                  {                                      this._currentChar                                  });              }
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,NextToken,The following statement contains a magic number: switch (this._currentChar)              {                  case '!':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.ExclamationEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Exclamation;                          break;                      }                  case '"':                  case '\'':                      char ch = this._currentChar;                      do                      {                          this.NextChar();                          while (this._currentTextPosition < this._textLen && this._currentChar != ch)                              this.NextChar();                          if (this._currentTextPosition == this._textLen)                              throw ParseError(this._currentTextPosition' "Unterminated string literal"' new object[0]);                          this.NextChar();                      } while (this._currentChar == ch);                      tokenId = TokenId.StringLiteral;                      break;                  case '%':                      this.NextChar();                      tokenId = TokenId.Percent;                      break;                  case '&':                      this.NextChar();                      if (this._currentChar == 38)                      {                          this.NextChar();                          tokenId = TokenId.DoubleAmphersand;                          break;                      }                      else                      {                          tokenId = TokenId.Amphersand;                          break;                      }                  case '(':                      this.NextChar();                      tokenId = TokenId.OpenParen;                      break;                  case ')':                      this.NextChar();                      tokenId = TokenId.CloseParen;                      break;                  case '*':                      this.NextChar();                      tokenId = TokenId.Asterisk;                      break;                  case '+':                      this.NextChar();                      tokenId = TokenId.Plus;                      break;                  case ''':                      this.NextChar();                      tokenId = TokenId.Comma;                      break;                  case '-':                      this.NextChar();                      tokenId = TokenId.Minus;                      break;                  case '.':                      this.NextChar();                      tokenId = TokenId.Dot;                      break;                  case '/':                      this.NextChar();                      tokenId = TokenId.Slash;                      break;                  case ':':                      this.NextChar();                      tokenId = TokenId.Colon;                      break;                  case '<':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.LessThanEqual;                          break;                      }                      else if (this._currentChar == 62)                      {                          this.NextChar();                          tokenId = TokenId.LessGreater;                          break;                      }                      else                      {                          tokenId = TokenId.LessThan;                          break;                      }                  case '=':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.DoubleEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Equal;                          break;                      }                  case '>':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.GreaterThanEqual;                          break;                      }                      else                      {                          tokenId = TokenId.GreaterThan;                          break;                      }                  case '?':                      this.NextChar();                      tokenId = TokenId.Question;                      break;                  case '[':                      this.NextChar();                      tokenId = TokenId.OpenBracket;                      break;                  case ']':                      this.NextChar();                      tokenId = TokenId.CloseBracket;                      break;                  case '|':                      this.NextChar();                      if (this._currentChar == 124)                      {                          this.NextChar();                          tokenId = TokenId.DoubleBar;                          break;                      }                      else                      {                          tokenId = TokenId.Bar;                          break;                      }                  default:                      if (char.IsLetter(this._currentChar) || this._currentChar == 64 || this._currentChar == 95)                      {                          do                          {                              this.NextChar();                          } while (char.IsLetterOrDigit(this._currentChar) || this._currentChar == 95);                          tokenId = TokenId.Identifier;                          break;                      }                      else if (char.IsDigit(this._currentChar))                      {                          tokenId = TokenId.IntegerLiteral;                          do                          {                              this.NextChar();                          } while (char.IsDigit(this._currentChar));                          if (this._currentChar == 46)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 69 || this._currentChar == 101)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              if (this._currentChar == 43 || this._currentChar == 45)                                  this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 70 || this._currentChar == 102)                          {                              this.NextChar();                              break;                          }                          else                              break;                      }                      else if (this._currentTextPosition == this._textLen)                      {                          tokenId = TokenId.End;                          break;                      }                      else                          throw ParseError(                              this._currentTextPosition'                              "Syntax error '{0}'"'                              new object[1]                                  {                                      this._currentChar                                  });              }
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,NextToken,The following statement contains a magic number: switch (this._currentChar)              {                  case '!':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.ExclamationEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Exclamation;                          break;                      }                  case '"':                  case '\'':                      char ch = this._currentChar;                      do                      {                          this.NextChar();                          while (this._currentTextPosition < this._textLen && this._currentChar != ch)                              this.NextChar();                          if (this._currentTextPosition == this._textLen)                              throw ParseError(this._currentTextPosition' "Unterminated string literal"' new object[0]);                          this.NextChar();                      } while (this._currentChar == ch);                      tokenId = TokenId.StringLiteral;                      break;                  case '%':                      this.NextChar();                      tokenId = TokenId.Percent;                      break;                  case '&':                      this.NextChar();                      if (this._currentChar == 38)                      {                          this.NextChar();                          tokenId = TokenId.DoubleAmphersand;                          break;                      }                      else                      {                          tokenId = TokenId.Amphersand;                          break;                      }                  case '(':                      this.NextChar();                      tokenId = TokenId.OpenParen;                      break;                  case ')':                      this.NextChar();                      tokenId = TokenId.CloseParen;                      break;                  case '*':                      this.NextChar();                      tokenId = TokenId.Asterisk;                      break;                  case '+':                      this.NextChar();                      tokenId = TokenId.Plus;                      break;                  case ''':                      this.NextChar();                      tokenId = TokenId.Comma;                      break;                  case '-':                      this.NextChar();                      tokenId = TokenId.Minus;                      break;                  case '.':                      this.NextChar();                      tokenId = TokenId.Dot;                      break;                  case '/':                      this.NextChar();                      tokenId = TokenId.Slash;                      break;                  case ':':                      this.NextChar();                      tokenId = TokenId.Colon;                      break;                  case '<':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.LessThanEqual;                          break;                      }                      else if (this._currentChar == 62)                      {                          this.NextChar();                          tokenId = TokenId.LessGreater;                          break;                      }                      else                      {                          tokenId = TokenId.LessThan;                          break;                      }                  case '=':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.DoubleEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Equal;                          break;                      }                  case '>':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.GreaterThanEqual;                          break;                      }                      else                      {                          tokenId = TokenId.GreaterThan;                          break;                      }                  case '?':                      this.NextChar();                      tokenId = TokenId.Question;                      break;                  case '[':                      this.NextChar();                      tokenId = TokenId.OpenBracket;                      break;                  case ']':                      this.NextChar();                      tokenId = TokenId.CloseBracket;                      break;                  case '|':                      this.NextChar();                      if (this._currentChar == 124)                      {                          this.NextChar();                          tokenId = TokenId.DoubleBar;                          break;                      }                      else                      {                          tokenId = TokenId.Bar;                          break;                      }                  default:                      if (char.IsLetter(this._currentChar) || this._currentChar == 64 || this._currentChar == 95)                      {                          do                          {                              this.NextChar();                          } while (char.IsLetterOrDigit(this._currentChar) || this._currentChar == 95);                          tokenId = TokenId.Identifier;                          break;                      }                      else if (char.IsDigit(this._currentChar))                      {                          tokenId = TokenId.IntegerLiteral;                          do                          {                              this.NextChar();                          } while (char.IsDigit(this._currentChar));                          if (this._currentChar == 46)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 69 || this._currentChar == 101)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              if (this._currentChar == 43 || this._currentChar == 45)                                  this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 70 || this._currentChar == 102)                          {                              this.NextChar();                              break;                          }                          else                              break;                      }                      else if (this._currentTextPosition == this._textLen)                      {                          tokenId = TokenId.End;                          break;                      }                      else                          throw ParseError(                              this._currentTextPosition'                              "Syntax error '{0}'"'                              new object[1]                                  {                                      this._currentChar                                  });              }
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,NextToken,The following statement contains a magic number: switch (this._currentChar)              {                  case '!':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.ExclamationEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Exclamation;                          break;                      }                  case '"':                  case '\'':                      char ch = this._currentChar;                      do                      {                          this.NextChar();                          while (this._currentTextPosition < this._textLen && this._currentChar != ch)                              this.NextChar();                          if (this._currentTextPosition == this._textLen)                              throw ParseError(this._currentTextPosition' "Unterminated string literal"' new object[0]);                          this.NextChar();                      } while (this._currentChar == ch);                      tokenId = TokenId.StringLiteral;                      break;                  case '%':                      this.NextChar();                      tokenId = TokenId.Percent;                      break;                  case '&':                      this.NextChar();                      if (this._currentChar == 38)                      {                          this.NextChar();                          tokenId = TokenId.DoubleAmphersand;                          break;                      }                      else                      {                          tokenId = TokenId.Amphersand;                          break;                      }                  case '(':                      this.NextChar();                      tokenId = TokenId.OpenParen;                      break;                  case ')':                      this.NextChar();                      tokenId = TokenId.CloseParen;                      break;                  case '*':                      this.NextChar();                      tokenId = TokenId.Asterisk;                      break;                  case '+':                      this.NextChar();                      tokenId = TokenId.Plus;                      break;                  case ''':                      this.NextChar();                      tokenId = TokenId.Comma;                      break;                  case '-':                      this.NextChar();                      tokenId = TokenId.Minus;                      break;                  case '.':                      this.NextChar();                      tokenId = TokenId.Dot;                      break;                  case '/':                      this.NextChar();                      tokenId = TokenId.Slash;                      break;                  case ':':                      this.NextChar();                      tokenId = TokenId.Colon;                      break;                  case '<':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.LessThanEqual;                          break;                      }                      else if (this._currentChar == 62)                      {                          this.NextChar();                          tokenId = TokenId.LessGreater;                          break;                      }                      else                      {                          tokenId = TokenId.LessThan;                          break;                      }                  case '=':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.DoubleEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Equal;                          break;                      }                  case '>':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.GreaterThanEqual;                          break;                      }                      else                      {                          tokenId = TokenId.GreaterThan;                          break;                      }                  case '?':                      this.NextChar();                      tokenId = TokenId.Question;                      break;                  case '[':                      this.NextChar();                      tokenId = TokenId.OpenBracket;                      break;                  case ']':                      this.NextChar();                      tokenId = TokenId.CloseBracket;                      break;                  case '|':                      this.NextChar();                      if (this._currentChar == 124)                      {                          this.NextChar();                          tokenId = TokenId.DoubleBar;                          break;                      }                      else                      {                          tokenId = TokenId.Bar;                          break;                      }                  default:                      if (char.IsLetter(this._currentChar) || this._currentChar == 64 || this._currentChar == 95)                      {                          do                          {                              this.NextChar();                          } while (char.IsLetterOrDigit(this._currentChar) || this._currentChar == 95);                          tokenId = TokenId.Identifier;                          break;                      }                      else if (char.IsDigit(this._currentChar))                      {                          tokenId = TokenId.IntegerLiteral;                          do                          {                              this.NextChar();                          } while (char.IsDigit(this._currentChar));                          if (this._currentChar == 46)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 69 || this._currentChar == 101)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              if (this._currentChar == 43 || this._currentChar == 45)                                  this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 70 || this._currentChar == 102)                          {                              this.NextChar();                              break;                          }                          else                              break;                      }                      else if (this._currentTextPosition == this._textLen)                      {                          tokenId = TokenId.End;                          break;                      }                      else                          throw ParseError(                              this._currentTextPosition'                              "Syntax error '{0}'"'                              new object[1]                                  {                                      this._currentChar                                  });              }
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,NextToken,The following statement contains a magic number: switch (this._currentChar)              {                  case '!':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.ExclamationEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Exclamation;                          break;                      }                  case '"':                  case '\'':                      char ch = this._currentChar;                      do                      {                          this.NextChar();                          while (this._currentTextPosition < this._textLen && this._currentChar != ch)                              this.NextChar();                          if (this._currentTextPosition == this._textLen)                              throw ParseError(this._currentTextPosition' "Unterminated string literal"' new object[0]);                          this.NextChar();                      } while (this._currentChar == ch);                      tokenId = TokenId.StringLiteral;                      break;                  case '%':                      this.NextChar();                      tokenId = TokenId.Percent;                      break;                  case '&':                      this.NextChar();                      if (this._currentChar == 38)                      {                          this.NextChar();                          tokenId = TokenId.DoubleAmphersand;                          break;                      }                      else                      {                          tokenId = TokenId.Amphersand;                          break;                      }                  case '(':                      this.NextChar();                      tokenId = TokenId.OpenParen;                      break;                  case ')':                      this.NextChar();                      tokenId = TokenId.CloseParen;                      break;                  case '*':                      this.NextChar();                      tokenId = TokenId.Asterisk;                      break;                  case '+':                      this.NextChar();                      tokenId = TokenId.Plus;                      break;                  case ''':                      this.NextChar();                      tokenId = TokenId.Comma;                      break;                  case '-':                      this.NextChar();                      tokenId = TokenId.Minus;                      break;                  case '.':                      this.NextChar();                      tokenId = TokenId.Dot;                      break;                  case '/':                      this.NextChar();                      tokenId = TokenId.Slash;                      break;                  case ':':                      this.NextChar();                      tokenId = TokenId.Colon;                      break;                  case '<':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.LessThanEqual;                          break;                      }                      else if (this._currentChar == 62)                      {                          this.NextChar();                          tokenId = TokenId.LessGreater;                          break;                      }                      else                      {                          tokenId = TokenId.LessThan;                          break;                      }                  case '=':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.DoubleEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Equal;                          break;                      }                  case '>':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.GreaterThanEqual;                          break;                      }                      else                      {                          tokenId = TokenId.GreaterThan;                          break;                      }                  case '?':                      this.NextChar();                      tokenId = TokenId.Question;                      break;                  case '[':                      this.NextChar();                      tokenId = TokenId.OpenBracket;                      break;                  case ']':                      this.NextChar();                      tokenId = TokenId.CloseBracket;                      break;                  case '|':                      this.NextChar();                      if (this._currentChar == 124)                      {                          this.NextChar();                          tokenId = TokenId.DoubleBar;                          break;                      }                      else                      {                          tokenId = TokenId.Bar;                          break;                      }                  default:                      if (char.IsLetter(this._currentChar) || this._currentChar == 64 || this._currentChar == 95)                      {                          do                          {                              this.NextChar();                          } while (char.IsLetterOrDigit(this._currentChar) || this._currentChar == 95);                          tokenId = TokenId.Identifier;                          break;                      }                      else if (char.IsDigit(this._currentChar))                      {                          tokenId = TokenId.IntegerLiteral;                          do                          {                              this.NextChar();                          } while (char.IsDigit(this._currentChar));                          if (this._currentChar == 46)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 69 || this._currentChar == 101)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              if (this._currentChar == 43 || this._currentChar == 45)                                  this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 70 || this._currentChar == 102)                          {                              this.NextChar();                              break;                          }                          else                              break;                      }                      else if (this._currentTextPosition == this._textLen)                      {                          tokenId = TokenId.End;                          break;                      }                      else                          throw ParseError(                              this._currentTextPosition'                              "Syntax error '{0}'"'                              new object[1]                                  {                                      this._currentChar                                  });              }
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,NextToken,The following statement contains a magic number: switch (this._currentChar)              {                  case '!':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.ExclamationEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Exclamation;                          break;                      }                  case '"':                  case '\'':                      char ch = this._currentChar;                      do                      {                          this.NextChar();                          while (this._currentTextPosition < this._textLen && this._currentChar != ch)                              this.NextChar();                          if (this._currentTextPosition == this._textLen)                              throw ParseError(this._currentTextPosition' "Unterminated string literal"' new object[0]);                          this.NextChar();                      } while (this._currentChar == ch);                      tokenId = TokenId.StringLiteral;                      break;                  case '%':                      this.NextChar();                      tokenId = TokenId.Percent;                      break;                  case '&':                      this.NextChar();                      if (this._currentChar == 38)                      {                          this.NextChar();                          tokenId = TokenId.DoubleAmphersand;                          break;                      }                      else                      {                          tokenId = TokenId.Amphersand;                          break;                      }                  case '(':                      this.NextChar();                      tokenId = TokenId.OpenParen;                      break;                  case ')':                      this.NextChar();                      tokenId = TokenId.CloseParen;                      break;                  case '*':                      this.NextChar();                      tokenId = TokenId.Asterisk;                      break;                  case '+':                      this.NextChar();                      tokenId = TokenId.Plus;                      break;                  case ''':                      this.NextChar();                      tokenId = TokenId.Comma;                      break;                  case '-':                      this.NextChar();                      tokenId = TokenId.Minus;                      break;                  case '.':                      this.NextChar();                      tokenId = TokenId.Dot;                      break;                  case '/':                      this.NextChar();                      tokenId = TokenId.Slash;                      break;                  case ':':                      this.NextChar();                      tokenId = TokenId.Colon;                      break;                  case '<':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.LessThanEqual;                          break;                      }                      else if (this._currentChar == 62)                      {                          this.NextChar();                          tokenId = TokenId.LessGreater;                          break;                      }                      else                      {                          tokenId = TokenId.LessThan;                          break;                      }                  case '=':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.DoubleEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Equal;                          break;                      }                  case '>':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.GreaterThanEqual;                          break;                      }                      else                      {                          tokenId = TokenId.GreaterThan;                          break;                      }                  case '?':                      this.NextChar();                      tokenId = TokenId.Question;                      break;                  case '[':                      this.NextChar();                      tokenId = TokenId.OpenBracket;                      break;                  case ']':                      this.NextChar();                      tokenId = TokenId.CloseBracket;                      break;                  case '|':                      this.NextChar();                      if (this._currentChar == 124)                      {                          this.NextChar();                          tokenId = TokenId.DoubleBar;                          break;                      }                      else                      {                          tokenId = TokenId.Bar;                          break;                      }                  default:                      if (char.IsLetter(this._currentChar) || this._currentChar == 64 || this._currentChar == 95)                      {                          do                          {                              this.NextChar();                          } while (char.IsLetterOrDigit(this._currentChar) || this._currentChar == 95);                          tokenId = TokenId.Identifier;                          break;                      }                      else if (char.IsDigit(this._currentChar))                      {                          tokenId = TokenId.IntegerLiteral;                          do                          {                              this.NextChar();                          } while (char.IsDigit(this._currentChar));                          if (this._currentChar == 46)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 69 || this._currentChar == 101)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              if (this._currentChar == 43 || this._currentChar == 45)                                  this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 70 || this._currentChar == 102)                          {                              this.NextChar();                              break;                          }                          else                              break;                      }                      else if (this._currentTextPosition == this._textLen)                      {                          tokenId = TokenId.End;                          break;                      }                      else                          throw ParseError(                              this._currentTextPosition'                              "Syntax error '{0}'"'                              new object[1]                                  {                                      this._currentChar                                  });              }
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,NextToken,The following statement contains a magic number: switch (this._currentChar)              {                  case '!':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.ExclamationEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Exclamation;                          break;                      }                  case '"':                  case '\'':                      char ch = this._currentChar;                      do                      {                          this.NextChar();                          while (this._currentTextPosition < this._textLen && this._currentChar != ch)                              this.NextChar();                          if (this._currentTextPosition == this._textLen)                              throw ParseError(this._currentTextPosition' "Unterminated string literal"' new object[0]);                          this.NextChar();                      } while (this._currentChar == ch);                      tokenId = TokenId.StringLiteral;                      break;                  case '%':                      this.NextChar();                      tokenId = TokenId.Percent;                      break;                  case '&':                      this.NextChar();                      if (this._currentChar == 38)                      {                          this.NextChar();                          tokenId = TokenId.DoubleAmphersand;                          break;                      }                      else                      {                          tokenId = TokenId.Amphersand;                          break;                      }                  case '(':                      this.NextChar();                      tokenId = TokenId.OpenParen;                      break;                  case ')':                      this.NextChar();                      tokenId = TokenId.CloseParen;                      break;                  case '*':                      this.NextChar();                      tokenId = TokenId.Asterisk;                      break;                  case '+':                      this.NextChar();                      tokenId = TokenId.Plus;                      break;                  case ''':                      this.NextChar();                      tokenId = TokenId.Comma;                      break;                  case '-':                      this.NextChar();                      tokenId = TokenId.Minus;                      break;                  case '.':                      this.NextChar();                      tokenId = TokenId.Dot;                      break;                  case '/':                      this.NextChar();                      tokenId = TokenId.Slash;                      break;                  case ':':                      this.NextChar();                      tokenId = TokenId.Colon;                      break;                  case '<':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.LessThanEqual;                          break;                      }                      else if (this._currentChar == 62)                      {                          this.NextChar();                          tokenId = TokenId.LessGreater;                          break;                      }                      else                      {                          tokenId = TokenId.LessThan;                          break;                      }                  case '=':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.DoubleEqual;                          break;                      }                      else                      {                          tokenId = TokenId.Equal;                          break;                      }                  case '>':                      this.NextChar();                      if (this._currentChar == 61)                      {                          this.NextChar();                          tokenId = TokenId.GreaterThanEqual;                          break;                      }                      else                      {                          tokenId = TokenId.GreaterThan;                          break;                      }                  case '?':                      this.NextChar();                      tokenId = TokenId.Question;                      break;                  case '[':                      this.NextChar();                      tokenId = TokenId.OpenBracket;                      break;                  case ']':                      this.NextChar();                      tokenId = TokenId.CloseBracket;                      break;                  case '|':                      this.NextChar();                      if (this._currentChar == 124)                      {                          this.NextChar();                          tokenId = TokenId.DoubleBar;                          break;                      }                      else                      {                          tokenId = TokenId.Bar;                          break;                      }                  default:                      if (char.IsLetter(this._currentChar) || this._currentChar == 64 || this._currentChar == 95)                      {                          do                          {                              this.NextChar();                          } while (char.IsLetterOrDigit(this._currentChar) || this._currentChar == 95);                          tokenId = TokenId.Identifier;                          break;                      }                      else if (char.IsDigit(this._currentChar))                      {                          tokenId = TokenId.IntegerLiteral;                          do                          {                              this.NextChar();                          } while (char.IsDigit(this._currentChar));                          if (this._currentChar == 46)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 69 || this._currentChar == 101)                          {                              tokenId = TokenId.RealLiteral;                              this.NextChar();                              if (this._currentChar == 43 || this._currentChar == 45)                                  this.NextChar();                              this.ValidateDigit();                              do                              {                                  this.NextChar();                              } while (char.IsDigit(this._currentChar));                          }                          if (this._currentChar == 70 || this._currentChar == 102)                          {                              this.NextChar();                              break;                          }                          else                              break;                      }                      else if (this._currentTextPosition == this._textLen)                      {                          tokenId = TokenId.End;                          break;                      }                      else                          throw ParseError(                              this._currentTextPosition'                              "Syntax error '{0}'"'                              new object[1]                                  {                                      this._currentChar                                  });              }
Magic Number,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,GetIdentifier,The following statement contains a magic number: str.Length > 1 && str[0] == 64
Magic Number,Rebel.Framework.Localization.Maintenance.Extraction,CStyleLanguageTextExtractor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Maintenance\Extraction\CStyleLanguageTextExtractor.cs,GetTexts,The following statement contains a magic number: pattern = Unescape(pattern.Substring(1' pattern.Length - 2)' false);
Magic Number,Rebel.Framework.Localization.Parsing,DefaultExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Parsing\DefaultExpressionParser.cs,LookAheadFor,The following statement contains a magic number: pos += 2;
Magic Number,Rebel.Framework.Localization.Parsing,HtmlPatternTransformer,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Parsing\HtmlPatternTransformer.cs,Encode,The following statement contains a magic number: return tagMatcher                      .Replace(pattern' (m) => m.Groups["Colon"].Success ? m.Value : "%%lt%%" + m.Value.Substring(1' m.Value.Length - 2) + "%%gt%%");
Magic Number,Rebel.Framework.Localization.Processing.ParameterEvaluators,PatternLookupEvaluator,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Processing\ParameterEvaluators\PatternLookupEvaluator.cs,GetValue,The following statement contains a magic number: callValues[""+i] = ParameterValue.Wrap(p.Key.Substring(1' p.Key.Length - 2));
Magic Number,Rebel.Framework.Localization.Processing.SwitchConditions,ValueListConditionFactory,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Processing\SwitchConditions\ValueListCondition.cs,GetFor,The following statement contains a magic number: spelling = spelling.Substring(2).TrimStart();
Magic Number,Rebel.Framework.Localization.Processing.ValueFormatters,NumberToRomanConvertor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Processing\ValueFormatters\RomanToNumberConvertor.cs,NumberToRoman,The following statement contains a magic number: throw new LocalizedArgumentOutOfRangeException("number"' 0' 3999);
Magic Number,Rebel.Framework.Localization.Processing.ValueFormatters,NumberToRomanConvertor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Processing\ValueFormatters\RomanToNumberConvertor.cs,NumberToRoman,The following statement contains a magic number: number < 0 || number > 3999
Magic Number,Rebel.Framework.Localization.Processing.ValueFormatters,NumberToRomanConvertor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Processing\ValueFormatters\RomanToNumberConvertor.cs,NumberToRoman,The following statement contains a magic number: int[] values = new int[] { 1000' 900' 500' 400' 100' 90' 50' 40' 10' 9' 5' 4' 1 };
Magic Number,Rebel.Framework.Localization.Processing.ValueFormatters,NumberToRomanConvertor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Processing\ValueFormatters\RomanToNumberConvertor.cs,NumberToRoman,The following statement contains a magic number: int[] values = new int[] { 1000' 900' 500' 400' 100' 90' 50' 40' 10' 9' 5' 4' 1 };
Magic Number,Rebel.Framework.Localization.Processing.ValueFormatters,NumberToRomanConvertor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Processing\ValueFormatters\RomanToNumberConvertor.cs,NumberToRoman,The following statement contains a magic number: int[] values = new int[] { 1000' 900' 500' 400' 100' 90' 50' 40' 10' 9' 5' 4' 1 };
Magic Number,Rebel.Framework.Localization.Processing.ValueFormatters,NumberToRomanConvertor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Processing\ValueFormatters\RomanToNumberConvertor.cs,NumberToRoman,The following statement contains a magic number: int[] values = new int[] { 1000' 900' 500' 400' 100' 90' 50' 40' 10' 9' 5' 4' 1 };
Magic Number,Rebel.Framework.Localization.Processing.ValueFormatters,NumberToRomanConvertor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Processing\ValueFormatters\RomanToNumberConvertor.cs,NumberToRoman,The following statement contains a magic number: int[] values = new int[] { 1000' 900' 500' 400' 100' 90' 50' 40' 10' 9' 5' 4' 1 };
Magic Number,Rebel.Framework.Localization.Processing.ValueFormatters,NumberToRomanConvertor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Processing\ValueFormatters\RomanToNumberConvertor.cs,NumberToRoman,The following statement contains a magic number: int[] values = new int[] { 1000' 900' 500' 400' 100' 90' 50' 40' 10' 9' 5' 4' 1 };
Magic Number,Rebel.Framework.Localization.Processing.ValueFormatters,NumberToRomanConvertor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Processing\ValueFormatters\RomanToNumberConvertor.cs,NumberToRoman,The following statement contains a magic number: int[] values = new int[] { 1000' 900' 500' 400' 100' 90' 50' 40' 10' 9' 5' 4' 1 };
Magic Number,Rebel.Framework.Localization.Processing.ValueFormatters,NumberToRomanConvertor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Processing\ValueFormatters\RomanToNumberConvertor.cs,NumberToRoman,The following statement contains a magic number: int[] values = new int[] { 1000' 900' 500' 400' 100' 90' 50' 40' 10' 9' 5' 4' 1 };
Magic Number,Rebel.Framework.Localization.Processing.ValueFormatters,NumberToRomanConvertor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Processing\ValueFormatters\RomanToNumberConvertor.cs,NumberToRoman,The following statement contains a magic number: int[] values = new int[] { 1000' 900' 500' 400' 100' 90' 50' 40' 10' 9' 5' 4' 1 };
Magic Number,Rebel.Framework.Localization.Processing.ValueFormatters,NumberToRomanConvertor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Processing\ValueFormatters\RomanToNumberConvertor.cs,NumberToRoman,The following statement contains a magic number: int[] values = new int[] { 1000' 900' 500' 400' 100' 90' 50' 40' 10' 9' 5' 4' 1 };
Magic Number,Rebel.Framework.Localization.Processing.ValueFormatters,NumberToRomanConvertor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Processing\ValueFormatters\RomanToNumberConvertor.cs,NumberToRoman,The following statement contains a magic number: int[] values = new int[] { 1000' 900' 500' 400' 100' 90' 50' 40' 10' 9' 5' 4' 1 };
Magic Number,Rebel.Framework.Localization.Processing.ValueFormatters,NumberToRomanConvertor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Processing\ValueFormatters\RomanToNumberConvertor.cs,NumberToRoman,The following statement contains a magic number: int[] values = new int[] { 1000' 900' 500' 400' 100' 90' 50' 40' 10' 9' 5' 4' 1 };
Magic Number,Rebel.Framework.Localization.Processing.ValueFormatters,NumberToRomanConvertor,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Processing\ValueFormatters\RomanToNumberConvertor.cs,NumberToRoman,The following statement contains a magic number: i < 13
Magic Number,Rebel.Framework.Localization.Web.JavaScript.ParameterEvaluators,PatternLookupGenerator,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Web\JavaScript\ParameterEvaluators\PatternLookupGenerator.cs,WriteEvaluator,The following statement contains a magic number: writer.Output.Write(writer.Json.Serialize(p.Key.Substring(1' p.Key.Length - 2)));
Magic Number,Rebel.Framework.Localization.Web.Mvc,ResourceHelper,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Web\Mvc\ResourceHelper.cs,GetUrl,The following statement contains a magic number: pathSpecifier = pathSpecifier.Substring(9);
Magic Number,Rebel.Framework.TypeMapping,TypeMapDefinition,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeMapping\TypeMapDefinition.cs,GetHashCode,The following statement contains a magic number: return ((Source != null ? Source.GetHashCode() : 0) * 397) ^ (Destination != null ? Destination.GetHashCode() : 0);
Magic Number,Rebel.Framework.TypeMapping,MemberExpressionSignature,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\TypeMapping\MemberExpressionSignature.cs,GetHashCode,The following statement contains a magic number: var hash = 31;
Missing Default,Rebel.Framework,HiveId,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\HiveId.cs,TryParse,The following switch statement is missing a default case: switch (style.Result)                  {                      case HiveIdFormatStyle.UriSafe:                          extractedRemainder = FormatFromUriSafePart(extractedRemainder);                          break;                  }
Missing Default,Rebel.Framework,HiveIdValue,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\HiveIdValue.cs,TryCreate,The following switch statement is missing a default case: switch (type)              {                  case HiveIdValueTypes.Uri:                      return new AttemptTuple<HiveIdValue>(true' new HiveIdValue((Uri) potentialValue.Result));                  case HiveIdValueTypes.Guid:                      return new AttemptTuple<HiveIdValue>(true' new HiveIdValue((Guid) potentialValue.Result));                  case HiveIdValueTypes.Int32:                      return new AttemptTuple<HiveIdValue>(true' new HiveIdValue((int) potentialValue.Result));                  case HiveIdValueTypes.String:                      return new AttemptTuple<HiveIdValue>(true' new HiveIdValue((string)potentialValue.Result));              }
Missing Default,Rebel.Framework,HiveIdValue,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\HiveIdValue.cs,Equals,The following switch statement is missing a default case: switch (this.Type)              {                  case HiveIdValueTypes.Uri:                      return ((Uri) Value).Equals((Uri)other.Value);                  case HiveIdValueTypes.String:                      // Because null HiveIdValues are represented by string|(null) when serialized                      // we check here for both values either being null or "(null)"                      return ((string) Value ?? "(null)").InvariantEquals((string)other.Value ?? "(null)");                  case HiveIdValueTypes.Int32:                      return ((int) Value) == (int) other.Value;                  case HiveIdValueTypes.Guid:                      return (Guid) Value == (Guid) other.Value;              }
Missing Default,Rebel.Framework,HiveIdValue,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\HiveIdValue.cs,ToString,The following switch statement is missing a default case: switch (Type)              {                  case HiveIdValueTypes.Guid:                      return ((Guid) Value).ToString("N");              }
Missing Default,Rebel.Framework,ObjectExtensions,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\ObjectExtensions.cs,ToJsonString,The following switch statement is missing a default case: switch (propertyNamesCaseType)              {                  case PropertyNamesCaseType.CamelCase:                      serializer.ContractResolver = new CamelCasePropertyNamesContractResolver();                      break;              }
Missing Default,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,PromoteExpression,The following switch statement is missing a default case: switch (Type.GetTypeCode(constantExpression.Type))                          {                              case TypeCode.Int32:                              case TypeCode.UInt32:                              case TypeCode.Int64:                              case TypeCode.UInt64:                                  obj = ParseNumber(str' nonNullableType);                                  break;                              case TypeCode.Double:                                  if (nonNullableType == typeof (Decimal))                                  {                                      obj = ParseNumber(str' nonNullableType);                                      break;                                  }                                  else                                      break;                              case TypeCode.String:                                  obj = ParseEnum(str' nonNullableType);                                  break;                          }
Missing Default,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,ParseNumber,The following switch statement is missing a default case: switch (Type.GetTypeCode(GetNonNullableType(type)))              {                  case TypeCode.SByte:                      sbyte result1;                      if (sbyte.TryParse(text' out result1))                          return result1;                      else                          break;                  case TypeCode.Byte:                      byte result2;                      if (byte.TryParse(text' out result2))                          return result2;                      else                          break;                  case TypeCode.Int16:                      short result3;                      if (short.TryParse(text' out result3))                          return result3;                      else                          break;                  case TypeCode.UInt16:                      ushort result4;                      if (ushort.TryParse(text' out result4))                          return result4;                      else                          break;                  case TypeCode.Int32:                      int result5;                      if (int.TryParse(text' out result5))                          return result5;                      else                          break;                  case TypeCode.UInt32:                      uint result6;                      if (uint.TryParse(text' out result6))                          return result6;                      else                          break;                  case TypeCode.Int64:                      long result7;                      if (long.TryParse(text' out result7))                          return result7;                      else                          break;                  case TypeCode.UInt64:                      ulong result8;                      if (ulong.TryParse(text' out result8))                          return result8;                      else                          break;                  case TypeCode.Single:                      float result9;                      if (float.TryParse(text' out result9))                          return result9;                      else                          break;                  case TypeCode.Double:                      double result10;                      if (double.TryParse(text' out result10))                          return result10;                      else                          break;                  case TypeCode.Decimal:                      Decimal result11;                      if (Decimal.TryParse(text' out result11))                          return result11;                      else                          break;              }
Missing Default,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (typeCode2)                      {                          case TypeCode.SByte:                          case TypeCode.Int16:                          case TypeCode.Int32:                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (typeCode2)                      {                          case TypeCode.Byte:                          case TypeCode.Int16:                          case TypeCode.UInt16:                          case TypeCode.Int32:                          case TypeCode.UInt32:                          case TypeCode.Int64:                          case TypeCode.UInt64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (typeCode2)                      {                          case TypeCode.Int16:                          case TypeCode.Int32:                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (typeCode2)                      {                          case TypeCode.UInt16:                          case TypeCode.Int32:                          case TypeCode.UInt32:                          case TypeCode.Int64:                          case TypeCode.UInt64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (typeCode2)                      {                          case TypeCode.Int32:                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (typeCode2)                      {                          case TypeCode.UInt32:                          case TypeCode.Int64:                          case TypeCode.UInt64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (typeCode2)                      {                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (typeCode2)                      {                          case TypeCode.UInt64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,Rebel.Framework.Dynamics.Expressions,ExpressionParser,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Dynamics\Expressions\ExpressionParser.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (typeCode2)                      {                          case TypeCode.Single:                          case TypeCode.Double:                              return true;                      }
Missing Default,Rebel.Framework.Linq.CriteriaGeneration.ExpressionVisitors,FieldPredicateExpressionRewriter,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\ExpressionVisitors\FieldPredicateExpressionRewriter.cs,NegateFieldPredicate,The following switch statement is missing a default case: switch (fieldPredicateExpression.ValueExpression.ClauseType)                      {                          case ValuePredicateType.Equal:                              return ValuePredicateType.NotEqual;                          case ValuePredicateType.GreaterThan:                              return ValuePredicateType.LessThan;                          case ValuePredicateType.GreaterThanOrEqual:                              return ValuePredicateType.LessThanOrEqual;                          case ValuePredicateType.NotEqual:                              return ValuePredicateType.Equal;                      }
Missing Default,Rebel.Framework.Linq.CriteriaGeneration.ExpressionVisitors,FieldPredicateExpressionRewriter,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\ExpressionVisitors\FieldPredicateExpressionRewriter.cs,ConvertToFieldPredicate,The following switch statement is missing a default case: switch (leftBindingSignatureSupport.SignatureSupportType)                  {                      case SignatureSupportType.SupportedAsFieldName:                          var selectorExpression = GetFieldSelector(left' structureBinder' leftBindingSignatureSupport);                          return new FieldPredicateExpression(selectorExpression' new FieldValueExpression(leftBindingSignatureSupport.NodeType' right.Value));                      case SignatureSupportType.SupportedAsFieldValue:                          var methodCallExpression = ((MethodCallExpression)left);                          if (ExpressionHelper.IsMethod(left))                          {                              var fieldValueExpression = structureBinder                                  .CreateFieldValueExpression(methodCallExpression' leftBindingSignatureSupport);                                var objectOfMethod = methodCallExpression.Object;                              var bindingSupportForMethodObject = GetBindingSupport(objectOfMethod' structureBinder);                              var fieldSelector = GetFieldSelector(objectOfMethod' structureBinder' bindingSupportForMethodObject);                                return new FieldPredicateExpression(fieldSelector' fieldValueExpression);                          }                          break;                      case SignatureSupportType.SupportedAsSchemaAlias:                          var schemaSelectorExpression = GetSchemaSelector(left' structureBinder' leftBindingSignatureSupport);                          return                              new SchemaPredicateExpression(                                  new SchemaSelectorExpression(schemaSelectorExpression.Name)'                                  new SchemaValueExpression(leftBindingSignatureSupport.NodeType' right.Value));                  }
Missing Default,Rebel.Framework.Linq.CriteriaGeneration.ExpressionVisitors,FieldPredicateExpressionRewriter,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\ExpressionVisitors\FieldPredicateExpressionRewriter.cs,UpdateValuePredicateType,The following switch statement is missing a default case: switch (binaryExpression.NodeType)              {                  case ExpressionType.Equal:                      signatureSupport.NodeType = ValuePredicateType.Equal;                      break;                  case ExpressionType.NotEqual:                      signatureSupport.NodeType = ValuePredicateType.NotEqual;                      break;                  case ExpressionType.GreaterThan:                      signatureSupport.NodeType = ValuePredicateType.GreaterThan;                      break;                  case ExpressionType.GreaterThanOrEqual:                      signatureSupport.NodeType = ValuePredicateType.GreaterThanOrEqual;                      break;                  case ExpressionType.LessThan:                      signatureSupport.NodeType = ValuePredicateType.LessThan;                      break;                  case ExpressionType.LessThanOrEqual:                      signatureSupport.NodeType = ValuePredicateType.LessThanOrEqual;                      break;              }
Missing Default,Rebel.Framework.Linq.CriteriaGeneration.ExpressionVisitors,FieldPredicateExpressionRewriter,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\ExpressionVisitors\FieldPredicateExpressionRewriter.cs,UpdateValuePredicateType,The following switch statement is missing a default case: switch (binaryExpression.Method.Name)                  {                      case "op_Inequality":                          signatureSupport.NodeType = ValuePredicateType.NotEqual;                          break;                  }
Missing Default,Rebel.Framework.Linq.CriteriaGeneration.ExpressionVisitors,FieldPredicateExpressionRewriter,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\ExpressionVisitors\FieldPredicateExpressionRewriter.cs,GetSchemaSelector,The following switch statement is missing a default case: switch (bindingSignatureSupport.SignatureSupportType)              {                  case SignatureSupportType.SupportedAsSchemaAlias:                      if (ExpressionHelper.IsMember(left))                          return structureBinder.CreateSchemaSelector(left as MemberExpression' bindingSignatureSupport);                      else if (ExpressionHelper.IsMethod(left))                          return structureBinder.CreateSchemaSelector(left as MethodCallExpression' bindingSignatureSupport);                      break;              }
Missing Default,Rebel.Framework.Linq.CriteriaGeneration.ExpressionVisitors,FieldPredicateExpressionRewriter,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\ExpressionVisitors\FieldPredicateExpressionRewriter.cs,GetFieldSelector,The following switch statement is missing a default case: switch (bindingSignatureSupport.SignatureSupportType)              {                  case SignatureSupportType.SupportedAsFieldName:                      if (ExpressionHelper.IsMember(left))                          return structureBinder.CreateFieldSelector(left as MemberExpression' bindingSignatureSupport);                      else if (ExpressionHelper.IsMethod(left))                          return structureBinder.CreateFieldSelector(left as MethodCallExpression' bindingSignatureSupport);                      break;              }
Missing Default,Rebel.Framework.Linq.CriteriaGeneration.StructureMetadata,DefaultQueryStructureBinder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\StructureMetadata\DefaultQueryStructureBinder.cs,CreateFieldSelector,The following switch statement is missing a default case: switch (expression.Method.Name)              {                  case "Field":                      // This is an extension method for the RenderViewModel so the first argument is the extended object                      return new FieldSelectorExpression(((ConstantExpression)expression.Arguments[1]).Value.ToString());                  case "get_Item":                      // This is the default accessor of a Dictionary' so check if the parent object is supported too                      // and also allow for dictionary-of-dictionary                        // First check explicit mappings e.g. TypedAttribute[index].Values[subindex]                      var containerExpr = expression.Object as MemberExpression;                        if (expression.Method.GetCustomAttributes(typeof(MapsToInnerAliasForQueryingAttribute)' true).Any())                      {                          var innerFieldExpression = expression.Arguments[0] as ConstantExpression;                          if (innerFieldExpression != null)                          {                              foundSubField = innerFieldExpression.Value.ToString();                          }                      }                        if (containerExpr != null)                      {                          var callExpression = containerExpr.Expression as MethodCallExpression;                          if (callExpression != null)                          {                              if (containerExpr.Member.GetCustomAttributes(typeof(MapsToInnerAliasForQueryingAttribute)' true).Any())                              {                                  var innerFieldExpression = callExpression.Arguments[0] as ConstantExpression;                                  if (innerFieldExpression != null)                                  {                                      foundField = innerFieldExpression.Value.ToString();                                  }                              }                          }                      }                      if (foundField != null)                      {                          if (foundSubField != null)                          {                              return new FieldSelectorExpression(foundField' foundSubField);                          }                          return new FieldSelectorExpression(foundField);                      }                        if (ExpressionHelper.IsMember(expression.Object) && IsSupportedMember(containerExpr).SignatureSupportType != SignatureSupportType.NotSupported)                          return new FieldSelectorExpression(((ConstantExpression) expression.Arguments[0]).Value.ToString());                      break;              }
Missing Default,Rebel.Framework.Linq.CriteriaGeneration.StructureMetadata,DefaultQueryStructureBinder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\StructureMetadata\DefaultQueryStructureBinder.cs,IsSupportedMethod,The following switch statement is missing a default case: switch (expression.Method.Name)              {                  case "Equals":                      return new BindingSignatureSupport(SignatureSupportType.SupportedAsFieldValue' ValuePredicateType.Equal);                  case "StartsWith":                      return new BindingSignatureSupport(SignatureSupportType.SupportedAsFieldValue' ValuePredicateType.StartsWith);                  case "EndsWith":                      return new BindingSignatureSupport(SignatureSupportType.SupportedAsFieldValue' ValuePredicateType.EndsWith);                  case "get_Item":                      // This is the default accessor of a Dictionary' so check if the parent object is supported too                      if (ExpressionHelper.IsMember(expression.Object) && IsSupportedMember(expression.Object as MemberExpression).SignatureSupportType != SignatureSupportType.NotSupported)                          return new BindingSignatureSupport(SignatureSupportType.SupportedAsFieldName' ValuePredicateType.Equal);                      break;              }
Missing Default,Rebel.Framework.Linq.CriteriaGeneration.StructureMetadata,DefaultQueryStructureBinder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\StructureMetadata\DefaultQueryStructureBinder.cs,IsSupportedMethod,The following switch statement is missing a default case: switch (firstArg.Value as string)                  {                      case "NodeTypeAlias":                      case "ContentTypeAlias":                      case "MediaTypeAlias":                          return new BindingSignatureSupport(SignatureSupportType.SupportedAsSchemaAlias' ValuePredicateType.Empty);                  }
Missing Default,Rebel.Framework.Linq.CriteriaGeneration.StructureMetadata,DefaultQueryStructureBinder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\StructureMetadata\DefaultQueryStructureBinder.cs,IsSupportedMember,The following switch statement is missing a default case: switch (expression.Member.Name)                      {                          case "Alias":                              return new BindingSignatureSupport(SignatureSupportType.SupportedAsSchemaAlias' ValuePredicateType.Equal);                      }
Missing Default,Rebel.Framework.Linq.CriteriaGeneration.StructureMetadata,DefaultQueryStructureBinder,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Linq\CriteriaGeneration\StructureMetadata\DefaultQueryStructureBinder.cs,IsSupportedMember,The following switch statement is missing a default case: switch (expression.Member.Name)              {                  case "Fields":                      return new BindingSignatureSupport(SignatureSupportType.SupportedAsFieldName' ValuePredicateType.Equal);              }
Missing Default,Rebel.Framework.Localization.Processing.ValueFormatters,StringCaseFormatter,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Processing\ValueFormatters\StringCaseFormatter.cs,FormatValue,The following switch statement is missing a default case: switch (TransformationType)                  {                      case StringCaseTransformationType.Lowercase: return s.ToLower(context.Language.Culture);                      case StringCaseTransformationType.Uppercase: return s.ToUpper(context.Language.Culture);                      case StringCaseTransformationType.CapitalizeFirst: return Capitalize(s' context.Language.Culture);                      case StringCaseTransformationType.CapitalizeAll:                           return string.Join(" "'                               s.Split(' ').Select(w => Capitalize(w' context.Language.Culture)));                  }
Missing Default,Rebel.Framework.Localization.Support,Arithmetic,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Support\Arithmetic.cs,Evaluate,The following switch statement is missing a default case: switch (op)              {                  case ArithmeticOperator.Addition: return lhs + rhs;                  case ArithmeticOperator.Subtraction: return lhs - rhs;                  case ArithmeticOperator.Multiplication: return lhs * rhs;                  case ArithmeticOperator.Division: return lhs / rhs;                  case ArithmeticOperator.IntegerDivision: return Math.Floor(lhs / rhs);                  case ArithmeticOperator.Modulo: return (int)lhs % (int)rhs;                                  }
Missing Default,Rebel.Framework.Localization.Support,Arithmetic,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Support\Arithmetic.cs,GetCompareOperator,The following switch statement is missing a default case: switch (spelling.ToLower())              {                  case "=": return CompareOperator.Eq;                  case "!=": case "<>": return CompareOperator.Neq;                  case "<": return CompareOperator.Lt;                  case ">": return CompareOperator.Gt;                  case "<=" :return CompareOperator.LtEq;                  case ">=": return CompareOperator.GtEq;              }
Missing Default,Rebel.Framework.Localization.Support,Arithmetic,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Support\Arithmetic.cs,GetArithmeticOperator,The following switch statement is missing a default case: switch (spelling)              {                  case "+": return ArithmeticOperator.Addition;                  case "-": return ArithmeticOperator.Subtraction;                  case "*": return ArithmeticOperator.Multiplication;                  case "/": return ArithmeticOperator.Division;                  case "\\": return ArithmeticOperator.IntegerDivision;                  case "%": return ArithmeticOperator.Modulo;              }
Missing Default,Rebel.Framework.Localization.Web.JavaScript.SwitchConditions,ArithmeticGenerator,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Web\JavaScript\SwitchConditions\ArithmeticGenerator.cs,GetOperator,The following switch statement is missing a default case: switch (op)              {                  case ArithmeticOperator.Addition: return "+";                  case ArithmeticOperator.Subtraction: return "-";                  case ArithmeticOperator.Division:                  case ArithmeticOperator.IntegerDivision: return "/";                  case ArithmeticOperator.Modulo: return "%";                  case ArithmeticOperator.Multiplication: return "*";              }
Missing Default,Rebel.Framework.Localization.Web.JavaScript.SwitchConditions,ArithmeticGenerator,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Web\JavaScript\SwitchConditions\ArithmeticGenerator.cs,GetComparer,The following switch statement is missing a default case: switch (op)              {                  case CompareOperator.Eq: return "===";                  case CompareOperator.Neq: return "!=";                  case CompareOperator.Lt: return "<";                  case CompareOperator.LtEq: return "<=";                  case CompareOperator.Gt: return ">";                  case CompareOperator.GtEq: return ">=";                                  }
Missing Default,Rebel.Framework.Localization.Web.JavaScript.ValueFormatters,StringCaseGenerator,C:\research\architectureSmells\repos\RebelCMS_rebelcmsxu5\Source\Libraries\Rebel.Framework\Localization\Web\JavaScript\ValueFormatters\StringCaseGenerator.cs,WriteEvaluator,The following switch statement is missing a default case: switch (proc.TransformationType)              {                  case StringCaseTransformationType.Lowercase:                      writer.Output.Write("_lc(");                      break;                  case StringCaseTransformationType.Uppercase:                      writer.Output.Write("_uc(");                      break;                  case StringCaseTransformationType.CapitalizeFirst:                      writer.Output.Write("_cf(");                      break;                  case StringCaseTransformationType.CapitalizeAll:                      writer.Output.Write("_ca(");                      break;              }
