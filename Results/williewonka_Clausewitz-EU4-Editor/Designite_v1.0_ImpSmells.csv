Implementation smell,Namespace,Class,File,Method,Description
Long Method,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,LoadCountry,The method has 184 lines of code.
Long Method,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,Logic,The method has 283 lines of code.
Long Method,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,SaveCountry,The method has 274 lines of code.
Complex Method,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,LoadCountry,Cyclomatic complexity of the method is 51
Complex Method,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,FindRegion,Cyclomatic complexity of the method is 8
Complex Method,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,Logic,Cyclomatic complexity of the method is 114
Complex Method,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,SearchNationalGroup,Cyclomatic complexity of the method is 8
Complex Method,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,SearchNationalIdeas,Cyclomatic complexity of the method is 8
Complex Method,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,LoadSyntaxSecondLevel,Cyclomatic complexity of the method is 8
Complex Method,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,LoadSyntaxSecondLevel,Cyclomatic complexity of the method is 9
Complex Method,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,SaveCountry,Cyclomatic complexity of the method is 43
Complex Method,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,bt_edit_nationalideasgroup_Click,Cyclomatic complexity of the method is 12
Complex Method,v1._0,SubEditor,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\SubEditor.cs,bt_save_Click,Cyclomatic complexity of the method is 16
Long Parameter List,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,Logic,The method has 5 parameters.
Long Parameter List,v1._0,SubEditor,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\SubEditor.cs,SubEditor,The method has 7 parameters.
Long Statement,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,LoadCountryOptions,The length of the statement  "	LoadCombobox (cmb_nationalideasgroup' LoadSyntaxFirstLevel (NIdeasFile1).Concat (LoadSyntaxFirstLevel (NIdeasFile2)).ToList ()); " is 128.
Long Statement,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,LoadCountryOptions,The length of the statement  "	NIdeas = LoadSyntaxSecondLevel (NIdeasFile1).Concat ((LoadSyntaxSecondLevel (NIdeasFile2)).Concat (LoadSyntaxSecondLevel (NIdeasFile3)).ToList ()).ToList (); " is 157.
Long Statement,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,LoadGame,The length of the statement  "		GovernmentFile = File.ReadAllLines (eulocation + "\\common\\governments\\00_governments.txt"' Encoding.Default).ToList (); " is 122.
Long Statement,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,LoadCountry,The length of the statement  "				if (line.Contains ('\t'))//sometimes there is a tab and sometimes there is a space to format the line so we need to distuigish this. (wtf paradox?!) " is 148.
Long Statement,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,LoadCountry,The length of the statement  "		//because paradox in all their wisdom choose to not use spaces in the common/countries folder for names but do use it in the history folder (seriously guys wtf?!)' we need to load all the filenames from the history file and find the right one using the tag " is 256.
Long Statement,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,LoadCountry,The length of the statement  "		//read the national ideas' this only loads the names of the ideas' the ideas themselves will be loaded and editted in the edit screen " is 133.
Long Statement,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,Logic,The length of the statement  "		if ((line.Contains ("OR") || line.Contains ("AND") || line.Contains ("NOT")) && line.Contains ("{") && !internal_block) { " is 121.
Long Statement,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,LoadSyntaxSecondLevel,The length of the statement  "					if (!line.Contains ("}"))//check if there is a opening and closing statement on the same line. in that case there is no need for a readsyntax call " is 146.
Long Statement,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,SaveCountry,The length of the statement  "	//because paradox in all their wisdom choose to not use spaces in the common/countries folder for names but do use it in the history folder' we need to load all the filenames from the history file and find the right one using the tag " is 233.
Long Statement,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,SaveCountry,The length of the statement  "		StreamWriter writer = new StreamWriter (new FileStream (savelocation + "\\" + modname.Trim () + "\\history\\countries\\" + filename' FileMode.Append' FileAccess.Write)' Encoding.Default); " is 187.
Long Statement,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,SaveCountry,The length of the statement  "		for (; i < original.Length; i++)//itirate through the original and put in the same order the value and keywords in the new modfile " is 130.
Long Statement,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,SaveCountry,The length of the statement  "		writer = new StreamWriter (new FileStream (savelocation + "\\" + modname.Trim () + "\\common\\countries\\" + country.Name + ".txt"' FileMode.Append' FileAccess.Write)' Encoding.Default); " is 186.
Long Statement,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,SaveCountry,The length of the statement  "				writer.WriteLine ("color = { " + country.Color [0] + "  " + country.Color [1] + "  " + country.Color [2] + " }" + comment); " is 123.
Long Statement,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,SaveCountry,The length of the statement  "		if (country.Nationalideagroup.Split ('_') [0].Length == 3 && country.Nationalideagroup != "default_ideas")//3 letter tag in front of the name so its a specific country idea " is 172.
Long Statement,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,SaveCountry,The length of the statement  "				//if its default ideas then delete all the instances of the tag in other files' however a country will can still fall under a zz_group_ideas.txt entry' i will not change this because those ideas are always better then default_ideas " is 231.
Long Statement,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,SaveCountry,The length of the statement  "				writer = new StreamWriter (new FileStream (savelocation + "\\" + modname.Trim () + "\\common\\ideas\\00_country_ideas.txt"' FileMode.Append' FileAccess.Write)' Encoding.Default); " is 178.
Long Statement,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,bt_edit_nationalidea_Click,The length of the statement  "		//NationalIdeaEditor form = new NationalIdeaEditor(ideas' cmb_nationalideasgroup.Text' cmb_nationalideas.Text' eulocation); " is 123.
Long Statement,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,bt_edit_nationalideasgroup_Click,The length of the statement  "		SubEditor editor = new SubEditor ("National Ideas"' cmb_nationalideasgroup.Text' "Propertie"' "Propertie"' ExtractFirstLevelBlock (file' cmb_nationalideasgroup.Text)' new string[] { " is 181.
Long Statement,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,bt_edit_religiongroup_Click,The length of the statement  "		SubEditor editor = new SubEditor ("Religions"' cmb_religiongroup.Text' "Religion"' "Properties"' ExtractFirstLevelBlock (ReligionsFile' cmb_religiongroup.Text)' new string[] { " is 175.
Long Statement,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,bt_edit_culturegroup_Click,The length of the statement  "		SubEditor editor = new SubEditor ("Cultures"' cmb_culturegroup.Text' "Culture"' "Properties"' ExtractFirstLevelBlock (CulturesFile' cmb_culturegroup.Text)' new string[] { " is 170.
Long Statement,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,bt_edit_techgroup_Click,The length of the statement  "	SubEditor editor = new SubEditor ("Techgroups"' ""' "Techgroup"' "Properties"' ExtractFirstLevelBlock (TechgroupFile' "groups")' new string[] { " is 143.
Long Statement,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,bt_edit_governments_Click,The length of the statement  "		SubEditor editor = new SubEditor ("Government"' cmb_government.Text' "Properties"' "Properties"' ExtractFirstLevelBlock (GovernmentFile' cmb_government.Text)' new string[] { " is 173.
Long Statement,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,bt_edit_idea_Click,The length of the statement  "		SubEditor editor = new SubEditor ("Idea Group"' cmb_Bidea.Text' "Ideas"' "P roperties"' ExtractFirstLevelBlock (BIdeasFile' cmb_Bidea.Text)' new string[] { " is 155.
Complex Conditional,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,Logic,The conditional expression  "(line.Contains ("OR") || line.Contains ("AND") || line.Contains ("NOT")) && line.Contains ("{") && !internal_block"  is complex.
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,LoadCountryControls,The following statement contains a magic number: cmb_idea3.Text = country.Ideas [2];  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,LoadCountryControls,The following statement contains a magic number: cmb_idea4.Text = country.Ideas [3];  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,LoadCountryControls,The following statement contains a magic number: cmb_idea5.Text = country.Ideas [4];  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,LoadCountryControls,The following statement contains a magic number: cmb_idea6.Text = country.Ideas [5];  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,LoadCountryControls,The following statement contains a magic number: cmb_idea7.Text = country.Ideas [6];  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,LoadCountryControls,The following statement contains a magic number: cmb_idea8.Text = country.Ideas [7];  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,LoadCountryControls,The following statement contains a magic number: cmb_idea9.Text = country.Ideas [8];  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,LoadCountryControls,The following statement contains a magic number: txt_colour_b.Text = country.Color [2].ToString ();  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,SaveCountryControls,The following statement contains a magic number: colours [2] = Convert.ToInt32 (txt_colour_b.Text);  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,SaveCountryControls,The following statement contains a magic number: country.Ideas = new string[9] {  	cmb_idea1.Text'  	cmb_idea2.Text'  	cmb_idea3.Text'  	cmb_idea4.Text'  	cmb_idea5.Text'  	cmb_idea6.Text'  	cmb_idea7.Text'  	cmb_idea8.Text'  	cmb_idea9.Text  };  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,LoadCountry,The following statement contains a magic number: if (country != null)//if country has been found in savedcountries list then load the country from this list   {  	LoadCountryControls (country);  }  else {  	//create the datatype in wich the information will be loaded in  	country = new CountryData ();  	country.Ideas = new string[9];  	//load the tag  	string[] file = File.ReadAllLines (eulocation + "\\common\\country_tags\\00_countries.txt"' Encoding.Default);  	foreach (string rawline in file) {  		string line = SplitComments (rawline) [0];  		if (line == "") {  			continue;  		}  		//extract the country name (just line.contains is not enough because of dubble names eg munster and IRE_munster  		string[] parts = line.Split ('/');  		string selectedcountry = "";  		foreach (string part in parts) {  			if (part.Contains (".txt")) {  				selectedcountry = part.Split ('.') [0];  				break;  			}  		}  		if (selectedcountry == countryname) {  			if (line.Contains ('\t'))//sometimes there is a tab and sometimes there is a space to format the line so we need to distuigish this. (wtf paradox?!)  			 {  				country.Tag = line.Split ('\t') [0];  			}  			else {  				country.Tag = line.Split (' ') [0];  			}  			break;  		}  	}  	//read the info from the history/countries/<tag> - <name>.txt file  	//because paradox in all their wisdom choose to not use spaces in the common/countries folder for names but do use it in the history folder (seriously guys wtf?!)' we need to load all the filenames from the history file and find the right one using the tag  	string[] dir = Directory.GetFiles (eulocation + "\\history\\countries\\");  	string filename = null;  	foreach (string countryfile in dir) {  		if (Path.GetFileNameWithoutExtension (countryfile).Contains (country.Tag)) {  			filename = Path.GetFileName (countryfile);  			break;  		}  	}  	if (filename == null) {  		MessageBox.Show ("Selected country has no entry in the history/countries folder"' "FileError");  	}  	else {  		file = File.ReadAllLines (eulocation + "\\history\\countries\\" + filename);  		foreach (string line in file) {  			if (line == "")//temprary while the monarch and generals history is not loaded to controls yet  			 {  				break;  			}  			//check if the line is commented as a whole  			string[] parts = line.Split ('#');  			if (parts [0] == "") {  				continue;  			}  			parts = parts [0].Split ('=');  			string property = parts [0].Trim (' '' '\t');  			string value = parts [1].Trim (' '' '\t');  			switch (property) {  			case "government":  				country.Government = value;  				break;  			case "mercantilism":  				country.Mercantilism = decimal.Parse (value' CultureInfo.InvariantCulture);  				break;  			case "technology_group":  				country.Techgroup = value;  				break;  			case "religion":  				country.Religion = value;  				break;  			case "primary_culture":  				country.Culture = value;  				break;  			case "capital":  				country.Capital = Convert.ToInt32 (value);  				break;  			}  		}  	}  	//read the info from the common/countries/<name>.txt file  	file = File.ReadAllLines (eulocation + "\\common\\countries\\" + cmb_countries.Text + ".txt");  	for (int i = 0; i < file.Length; i++) {  		string rawline = file [i];  		string line = rawline.Split ('#') [0];  		if (line == "") {  			continue;  		}  		if (line.Contains ("graphical_culture"))//just extract the value after the = char  		 {  			country.Gfx = line.Split ('=') [1].Trim ();  			continue;  		}  		if (line.Contains ("color"))//if its the color line then split it at spaces and determine wich part is numeric  		 {  			List<string> colours = new List<string> ();  			string[] parts = line.Split (' ');  			foreach (string part in parts) {  				int num;  				if (int.TryParse (part' out num))//numeric check  				 {  					colours.Add (part);  				}  			}  			country.Color = new int[3] {  				Convert.ToInt32 (colours [0])'  				Convert.ToInt32 (colours [1])'  				Convert.ToInt32 (colours [2])  			};  			continue;  		}  		if (line.Contains ("historical_idea_groups")) {  			i++;  			int ideanum = 0;  			for (; !file [i].Contains ('}'); i++) {  				rawline = file [i];  				line = rawline.Split ('#') [0];  				if (line == "") {  					continue;  				}  				country.Ideas [ideanum] = line.Trim ('\t');  				ideanum++;  			}  			continue;  		}  		if (line.Contains ("historical_units")) {  			i++;  			List<string> units = new List<string> ();  			for (; !file [i].Contains ('}'); i++) {  				line = file [i].Split ('#') [0].Trim ('\t');  				if (line == "") {  					continue;  				}  				units.Add (line);  			}  			country.Units = units;  		}  		if (line.Contains ("preferred_religion")) {  			country.PreferedReligion = line.Split ('=') [1].Trim ();  		}  	}  	//the culture and religion groups can be related from already loaded data  	for (int i = 0; i < Cultures.Count; i++) {  		if (Cultures [i].Contains (country.Culture)) {  			country.Culturegroup = cmb_culturegroup.Items [i].ToString ();  			break;  		}  	}  	for (int i = 0; i < Religions.Count; i++) {  		if (Religions [i].Contains (country.Religion)) {  			country.Religiongroup = cmb_religiongroup.Items [i].ToString ();  			break;  		}  	}  	//the capitalregion  	country.Capitalregion = FindRegion (country.Capital);  	//read the national ideas' this only loads the names of the ideas' the ideas themselves will be loaded and editted in the edit screen  	string ideatag = SearchNationalIdeas (country.Tag);  	if (ideatag != "") {  		country.Nationalideagroup = ideatag;  	}  	else {  		ideatag = SearchNationalGroup (country);  		if (ideatag != "") {  			country.Nationalideagroup = ideatag;  		}  		else {  			country.Nationalideagroup = "default_ideas";  		}  	}  }  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,LoadCountry,The following statement contains a magic number: if (country != null)//if country has been found in savedcountries list then load the country from this list   {  	LoadCountryControls (country);  }  else {  	//create the datatype in wich the information will be loaded in  	country = new CountryData ();  	country.Ideas = new string[9];  	//load the tag  	string[] file = File.ReadAllLines (eulocation + "\\common\\country_tags\\00_countries.txt"' Encoding.Default);  	foreach (string rawline in file) {  		string line = SplitComments (rawline) [0];  		if (line == "") {  			continue;  		}  		//extract the country name (just line.contains is not enough because of dubble names eg munster and IRE_munster  		string[] parts = line.Split ('/');  		string selectedcountry = "";  		foreach (string part in parts) {  			if (part.Contains (".txt")) {  				selectedcountry = part.Split ('.') [0];  				break;  			}  		}  		if (selectedcountry == countryname) {  			if (line.Contains ('\t'))//sometimes there is a tab and sometimes there is a space to format the line so we need to distuigish this. (wtf paradox?!)  			 {  				country.Tag = line.Split ('\t') [0];  			}  			else {  				country.Tag = line.Split (' ') [0];  			}  			break;  		}  	}  	//read the info from the history/countries/<tag> - <name>.txt file  	//because paradox in all their wisdom choose to not use spaces in the common/countries folder for names but do use it in the history folder (seriously guys wtf?!)' we need to load all the filenames from the history file and find the right one using the tag  	string[] dir = Directory.GetFiles (eulocation + "\\history\\countries\\");  	string filename = null;  	foreach (string countryfile in dir) {  		if (Path.GetFileNameWithoutExtension (countryfile).Contains (country.Tag)) {  			filename = Path.GetFileName (countryfile);  			break;  		}  	}  	if (filename == null) {  		MessageBox.Show ("Selected country has no entry in the history/countries folder"' "FileError");  	}  	else {  		file = File.ReadAllLines (eulocation + "\\history\\countries\\" + filename);  		foreach (string line in file) {  			if (line == "")//temprary while the monarch and generals history is not loaded to controls yet  			 {  				break;  			}  			//check if the line is commented as a whole  			string[] parts = line.Split ('#');  			if (parts [0] == "") {  				continue;  			}  			parts = parts [0].Split ('=');  			string property = parts [0].Trim (' '' '\t');  			string value = parts [1].Trim (' '' '\t');  			switch (property) {  			case "government":  				country.Government = value;  				break;  			case "mercantilism":  				country.Mercantilism = decimal.Parse (value' CultureInfo.InvariantCulture);  				break;  			case "technology_group":  				country.Techgroup = value;  				break;  			case "religion":  				country.Religion = value;  				break;  			case "primary_culture":  				country.Culture = value;  				break;  			case "capital":  				country.Capital = Convert.ToInt32 (value);  				break;  			}  		}  	}  	//read the info from the common/countries/<name>.txt file  	file = File.ReadAllLines (eulocation + "\\common\\countries\\" + cmb_countries.Text + ".txt");  	for (int i = 0; i < file.Length; i++) {  		string rawline = file [i];  		string line = rawline.Split ('#') [0];  		if (line == "") {  			continue;  		}  		if (line.Contains ("graphical_culture"))//just extract the value after the = char  		 {  			country.Gfx = line.Split ('=') [1].Trim ();  			continue;  		}  		if (line.Contains ("color"))//if its the color line then split it at spaces and determine wich part is numeric  		 {  			List<string> colours = new List<string> ();  			string[] parts = line.Split (' ');  			foreach (string part in parts) {  				int num;  				if (int.TryParse (part' out num))//numeric check  				 {  					colours.Add (part);  				}  			}  			country.Color = new int[3] {  				Convert.ToInt32 (colours [0])'  				Convert.ToInt32 (colours [1])'  				Convert.ToInt32 (colours [2])  			};  			continue;  		}  		if (line.Contains ("historical_idea_groups")) {  			i++;  			int ideanum = 0;  			for (; !file [i].Contains ('}'); i++) {  				rawline = file [i];  				line = rawline.Split ('#') [0];  				if (line == "") {  					continue;  				}  				country.Ideas [ideanum] = line.Trim ('\t');  				ideanum++;  			}  			continue;  		}  		if (line.Contains ("historical_units")) {  			i++;  			List<string> units = new List<string> ();  			for (; !file [i].Contains ('}'); i++) {  				line = file [i].Split ('#') [0].Trim ('\t');  				if (line == "") {  					continue;  				}  				units.Add (line);  			}  			country.Units = units;  		}  		if (line.Contains ("preferred_religion")) {  			country.PreferedReligion = line.Split ('=') [1].Trim ();  		}  	}  	//the culture and religion groups can be related from already loaded data  	for (int i = 0; i < Cultures.Count; i++) {  		if (Cultures [i].Contains (country.Culture)) {  			country.Culturegroup = cmb_culturegroup.Items [i].ToString ();  			break;  		}  	}  	for (int i = 0; i < Religions.Count; i++) {  		if (Religions [i].Contains (country.Religion)) {  			country.Religiongroup = cmb_religiongroup.Items [i].ToString ();  			break;  		}  	}  	//the capitalregion  	country.Capitalregion = FindRegion (country.Capital);  	//read the national ideas' this only loads the names of the ideas' the ideas themselves will be loaded and editted in the edit screen  	string ideatag = SearchNationalIdeas (country.Tag);  	if (ideatag != "") {  		country.Nationalideagroup = ideatag;  	}  	else {  		ideatag = SearchNationalGroup (country);  		if (ideatag != "") {  			country.Nationalideagroup = ideatag;  		}  		else {  			country.Nationalideagroup = "default_ideas";  		}  	}  }  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,LoadCountry,The following statement contains a magic number: if (country != null)//if country has been found in savedcountries list then load the country from this list   {  	LoadCountryControls (country);  }  else {  	//create the datatype in wich the information will be loaded in  	country = new CountryData ();  	country.Ideas = new string[9];  	//load the tag  	string[] file = File.ReadAllLines (eulocation + "\\common\\country_tags\\00_countries.txt"' Encoding.Default);  	foreach (string rawline in file) {  		string line = SplitComments (rawline) [0];  		if (line == "") {  			continue;  		}  		//extract the country name (just line.contains is not enough because of dubble names eg munster and IRE_munster  		string[] parts = line.Split ('/');  		string selectedcountry = "";  		foreach (string part in parts) {  			if (part.Contains (".txt")) {  				selectedcountry = part.Split ('.') [0];  				break;  			}  		}  		if (selectedcountry == countryname) {  			if (line.Contains ('\t'))//sometimes there is a tab and sometimes there is a space to format the line so we need to distuigish this. (wtf paradox?!)  			 {  				country.Tag = line.Split ('\t') [0];  			}  			else {  				country.Tag = line.Split (' ') [0];  			}  			break;  		}  	}  	//read the info from the history/countries/<tag> - <name>.txt file  	//because paradox in all their wisdom choose to not use spaces in the common/countries folder for names but do use it in the history folder (seriously guys wtf?!)' we need to load all the filenames from the history file and find the right one using the tag  	string[] dir = Directory.GetFiles (eulocation + "\\history\\countries\\");  	string filename = null;  	foreach (string countryfile in dir) {  		if (Path.GetFileNameWithoutExtension (countryfile).Contains (country.Tag)) {  			filename = Path.GetFileName (countryfile);  			break;  		}  	}  	if (filename == null) {  		MessageBox.Show ("Selected country has no entry in the history/countries folder"' "FileError");  	}  	else {  		file = File.ReadAllLines (eulocation + "\\history\\countries\\" + filename);  		foreach (string line in file) {  			if (line == "")//temprary while the monarch and generals history is not loaded to controls yet  			 {  				break;  			}  			//check if the line is commented as a whole  			string[] parts = line.Split ('#');  			if (parts [0] == "") {  				continue;  			}  			parts = parts [0].Split ('=');  			string property = parts [0].Trim (' '' '\t');  			string value = parts [1].Trim (' '' '\t');  			switch (property) {  			case "government":  				country.Government = value;  				break;  			case "mercantilism":  				country.Mercantilism = decimal.Parse (value' CultureInfo.InvariantCulture);  				break;  			case "technology_group":  				country.Techgroup = value;  				break;  			case "religion":  				country.Religion = value;  				break;  			case "primary_culture":  				country.Culture = value;  				break;  			case "capital":  				country.Capital = Convert.ToInt32 (value);  				break;  			}  		}  	}  	//read the info from the common/countries/<name>.txt file  	file = File.ReadAllLines (eulocation + "\\common\\countries\\" + cmb_countries.Text + ".txt");  	for (int i = 0; i < file.Length; i++) {  		string rawline = file [i];  		string line = rawline.Split ('#') [0];  		if (line == "") {  			continue;  		}  		if (line.Contains ("graphical_culture"))//just extract the value after the = char  		 {  			country.Gfx = line.Split ('=') [1].Trim ();  			continue;  		}  		if (line.Contains ("color"))//if its the color line then split it at spaces and determine wich part is numeric  		 {  			List<string> colours = new List<string> ();  			string[] parts = line.Split (' ');  			foreach (string part in parts) {  				int num;  				if (int.TryParse (part' out num))//numeric check  				 {  					colours.Add (part);  				}  			}  			country.Color = new int[3] {  				Convert.ToInt32 (colours [0])'  				Convert.ToInt32 (colours [1])'  				Convert.ToInt32 (colours [2])  			};  			continue;  		}  		if (line.Contains ("historical_idea_groups")) {  			i++;  			int ideanum = 0;  			for (; !file [i].Contains ('}'); i++) {  				rawline = file [i];  				line = rawline.Split ('#') [0];  				if (line == "") {  					continue;  				}  				country.Ideas [ideanum] = line.Trim ('\t');  				ideanum++;  			}  			continue;  		}  		if (line.Contains ("historical_units")) {  			i++;  			List<string> units = new List<string> ();  			for (; !file [i].Contains ('}'); i++) {  				line = file [i].Split ('#') [0].Trim ('\t');  				if (line == "") {  					continue;  				}  				units.Add (line);  			}  			country.Units = units;  		}  		if (line.Contains ("preferred_religion")) {  			country.PreferedReligion = line.Split ('=') [1].Trim ();  		}  	}  	//the culture and religion groups can be related from already loaded data  	for (int i = 0; i < Cultures.Count; i++) {  		if (Cultures [i].Contains (country.Culture)) {  			country.Culturegroup = cmb_culturegroup.Items [i].ToString ();  			break;  		}  	}  	for (int i = 0; i < Religions.Count; i++) {  		if (Religions [i].Contains (country.Religion)) {  			country.Religiongroup = cmb_religiongroup.Items [i].ToString ();  			break;  		}  	}  	//the capitalregion  	country.Capitalregion = FindRegion (country.Capital);  	//read the national ideas' this only loads the names of the ideas' the ideas themselves will be loaded and editted in the edit screen  	string ideatag = SearchNationalIdeas (country.Tag);  	if (ideatag != "") {  		country.Nationalideagroup = ideatag;  	}  	else {  		ideatag = SearchNationalGroup (country);  		if (ideatag != "") {  			country.Nationalideagroup = ideatag;  		}  		else {  			country.Nationalideagroup = "default_ideas";  		}  	}  }  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,LoadCountry,The following statement contains a magic number: country.Ideas = new string[9];  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,LoadCountry,The following statement contains a magic number: for (int i = 0; i < file.Length; i++) {  	string rawline = file [i];  	string line = rawline.Split ('#') [0];  	if (line == "") {  		continue;  	}  	if (line.Contains ("graphical_culture"))//just extract the value after the = char  	 {  		country.Gfx = line.Split ('=') [1].Trim ();  		continue;  	}  	if (line.Contains ("color"))//if its the color line then split it at spaces and determine wich part is numeric  	 {  		List<string> colours = new List<string> ();  		string[] parts = line.Split (' ');  		foreach (string part in parts) {  			int num;  			if (int.TryParse (part' out num))//numeric check  			 {  				colours.Add (part);  			}  		}  		country.Color = new int[3] {  			Convert.ToInt32 (colours [0])'  			Convert.ToInt32 (colours [1])'  			Convert.ToInt32 (colours [2])  		};  		continue;  	}  	if (line.Contains ("historical_idea_groups")) {  		i++;  		int ideanum = 0;  		for (; !file [i].Contains ('}'); i++) {  			rawline = file [i];  			line = rawline.Split ('#') [0];  			if (line == "") {  				continue;  			}  			country.Ideas [ideanum] = line.Trim ('\t');  			ideanum++;  		}  		continue;  	}  	if (line.Contains ("historical_units")) {  		i++;  		List<string> units = new List<string> ();  		for (; !file [i].Contains ('}'); i++) {  			line = file [i].Split ('#') [0].Trim ('\t');  			if (line == "") {  				continue;  			}  			units.Add (line);  		}  		country.Units = units;  	}  	if (line.Contains ("preferred_religion")) {  		country.PreferedReligion = line.Split ('=') [1].Trim ();  	}  }  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,LoadCountry,The following statement contains a magic number: for (int i = 0; i < file.Length; i++) {  	string rawline = file [i];  	string line = rawline.Split ('#') [0];  	if (line == "") {  		continue;  	}  	if (line.Contains ("graphical_culture"))//just extract the value after the = char  	 {  		country.Gfx = line.Split ('=') [1].Trim ();  		continue;  	}  	if (line.Contains ("color"))//if its the color line then split it at spaces and determine wich part is numeric  	 {  		List<string> colours = new List<string> ();  		string[] parts = line.Split (' ');  		foreach (string part in parts) {  			int num;  			if (int.TryParse (part' out num))//numeric check  			 {  				colours.Add (part);  			}  		}  		country.Color = new int[3] {  			Convert.ToInt32 (colours [0])'  			Convert.ToInt32 (colours [1])'  			Convert.ToInt32 (colours [2])  		};  		continue;  	}  	if (line.Contains ("historical_idea_groups")) {  		i++;  		int ideanum = 0;  		for (; !file [i].Contains ('}'); i++) {  			rawline = file [i];  			line = rawline.Split ('#') [0];  			if (line == "") {  				continue;  			}  			country.Ideas [ideanum] = line.Trim ('\t');  			ideanum++;  		}  		continue;  	}  	if (line.Contains ("historical_units")) {  		i++;  		List<string> units = new List<string> ();  		for (; !file [i].Contains ('}'); i++) {  			line = file [i].Split ('#') [0].Trim ('\t');  			if (line == "") {  				continue;  			}  			units.Add (line);  		}  		country.Units = units;  	}  	if (line.Contains ("preferred_religion")) {  		country.PreferedReligion = line.Split ('=') [1].Trim ();  	}  }  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,LoadCountry,The following statement contains a magic number: if (line.Contains ("color"))//if its the color line then split it at spaces and determine wich part is numeric   {  	List<string> colours = new List<string> ();  	string[] parts = line.Split (' ');  	foreach (string part in parts) {  		int num;  		if (int.TryParse (part' out num))//numeric check  		 {  			colours.Add (part);  		}  	}  	country.Color = new int[3] {  		Convert.ToInt32 (colours [0])'  		Convert.ToInt32 (colours [1])'  		Convert.ToInt32 (colours [2])  	};  	continue;  }  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,LoadCountry,The following statement contains a magic number: if (line.Contains ("color"))//if its the color line then split it at spaces and determine wich part is numeric   {  	List<string> colours = new List<string> ();  	string[] parts = line.Split (' ');  	foreach (string part in parts) {  		int num;  		if (int.TryParse (part' out num))//numeric check  		 {  			colours.Add (part);  		}  	}  	country.Color = new int[3] {  		Convert.ToInt32 (colours [0])'  		Convert.ToInt32 (colours [1])'  		Convert.ToInt32 (colours [2])  	};  	continue;  }  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,LoadCountry,The following statement contains a magic number: country.Color = new int[3] {  	Convert.ToInt32 (colours [0])'  	Convert.ToInt32 (colours [1])'  	Convert.ToInt32 (colours [2])  };  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,LoadCountry,The following statement contains a magic number: country.Color = new int[3] {  	Convert.ToInt32 (colours [0])'  	Convert.ToInt32 (colours [1])'  	Convert.ToInt32 (colours [2])  };  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,Logic,The following statement contains a magic number: for (; i < file.Count (); i++) {  	string line = SplitComments (file [i]) [0].Trim ('\t').Trim ();  	if (line == "") {  		continue;  	}  	if ((line.Contains ("OR") || line.Contains ("AND") || line.Contains ("NOT")) && line.Contains ("{") && !internal_block) {  		bool iblock = false;  		if (!(line.Contains ('{') && line.Contains ('}'))) {  			i++;  		}  		if (line.Contains ('{') && line.Contains ('}')) {  			iblock = true;  		}  		if (Logic (line.Trim ('\t').Split ('=') [0].Trim ().ToLower ()' country' file' i' iblock)) {  			switch (type) {  			case "or":  				return true;  			case "and":  				//do nothing  				break;  			case "not":  				return false;  			default:  				return false;  			}  		}  		else {  			switch (type) {  			case "or":  				//do nothing  				break;  			case "and":  				return false;  			case "not":  				//do nothing  				break;  			default:  				return false;  			}  		}  		if (!(line.Contains ('{') && line.Contains ('}'))) {  			i = ReadSyntax (i + 1' file);  		}  		continue;  	}  	if (line.Contains ("trigger")) {  		continue;  	}  	if (line.Contains ('}') && !internal_block) {  		break;  	}  	string property;  	string value;  	if (internal_block)//check if its a one line block  	 {  		property = line.Split ('=') [1].Trim ().Trim ('{').Trim ();  		value = line.Split ('=') [2].Trim ().Trim ('}').Trim ();  	}  	else {  		property = line.Split ('=') [0].Trim ();  		value = line.Split ('=') [1].Trim ();  	}  	switch (property) {  	case "tag":  		if (country.Tag == value) {  			switch (type) {  			case "or":  				return true;  			case "and":  				//do nothing  				break;  			case "not":  				return false;  			default:  				return false;  			}  		}  		else {  			switch (type) {  			case "or":  				//do nothing  				break;  			case "and":  				return false;  			case "not":  				//do nothing  				break;  			default:  				return false;  			}  		}  		break;  	case "primary_culture":  		if (country.Culture == value) {  			switch (type) {  			case "or":  				return true;  			case "and":  				//do nothing  				break;  			case "not":  				return false;  			default:  				return false;  			}  		}  		else {  			switch (type) {  			case "or":  				//do nothing  				break;  			case "and":  				return false;  			case "not":  				//do nothing  				break;  			default:  				return false;  			}  		}  		break;  	case "culture_group":  		if (country.Culturegroup == value) {  			switch (type) {  			case "or":  				return true;  			case "and":  				//do nothing  				break;  			case "not":  				return false;  			default:  				return false;  			}  		}  		else {  			switch (type) {  			case "or":  				//do nothing  				break;  			case "and":  				return false;  			case "not":  				//do nothing  				break;  			default:  				return false;  			}  		}  		break;  	case "religion":  		if (country.Religion == value) {  			switch (type) {  			case "or":  				return true;  			case "and":  				//do nothing  				break;  			case "not":  				return false;  			default:  				return false;  			}  		}  		else {  			switch (type) {  			case "or":  				//do nothing  				break;  			case "and":  				return false;  			case "not":  				//do nothing  				break;  			default:  				return false;  			}  		}  		break;  	case "religion_group":  		if (country.Religiongroup == value) {  			switch (type) {  			case "or":  				return true;  			case "and":  				//do nothing  				break;  			case "not":  				return false;  			default:  				return false;  			}  		}  		else {  			switch (type) {  			case "or":  				//do nothing  				break;  			case "and":  				return false;  			case "not":  				//do nothing  				break;  			default:  				return false;  			}  		}  		break;  	case "government":  		if ((country.Government == value) || ((country.Government == "theocratic_government") && (value == "theocracy"))) {  			switch (type) {  			case "or":  				return true;  			case "and":  				//do nothing  				break;  			case "not":  				return false;  			default:  				return false;  			}  		}  		else {  			switch (type) {  			case "or":  				//do nothing  				break;  			case "and":  				return false;  			case "not":  				//do nothing  				break;  			default:  				return false;  			}  		}  		break;  	case "region":  		if (country.Capitalregion == value) {  			switch (type) {  			case "or":  				return true;  			case "and":  				//do nothing  				break;  			case "not":  				return false;  			default:  				return false;  			}  		}  		else {  			switch (type) {  			case "or":  				//do nothing  				break;  			case "and":  				return false;  			case "not":  				//do nothing  				break;  			default:  				return false;  			}  		}  		break;  	}  	if (line.Contains ('{') && line.Contains ('}')) {  		break;  	}  }  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,Logic,The following statement contains a magic number: if (internal_block)//check if its a one line block   {  	property = line.Split ('=') [1].Trim ().Trim ('{').Trim ();  	value = line.Split ('=') [2].Trim ().Trim ('}').Trim ();  }  else {  	property = line.Split ('=') [0].Trim ();  	value = line.Split ('=') [1].Trim ();  }  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,Logic,The following statement contains a magic number: value = line.Split ('=') [2].Trim ().Trim ('}').Trim ();  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,SaveCountry,The following statement contains a magic number: if (filename == null) {  	MessageBox.Show ("Selected country has no entry in the history/countries folder"' "FileError");  }  else {  	//load the original file and itirate through it to copy it to the new file filling in the selected country details  	string[] original = File.ReadAllLines (eulocation + "\\history\\countries\\" + filename' Encoding.Default);  	StreamWriter writer = new StreamWriter (new FileStream (savelocation + "\\" + modname.Trim () + "\\history\\countries\\" + filename' FileMode.Append' FileAccess.Write)' Encoding.Default);  	//the actual writer  	int i = 0;  	for (; i < original.Length; i++)//itirate through the original and put in the same order the value and keywords in the new modfile  	 {  		string comment = "";  		string line = "";  		line = SplitComments (original [i]) [0];  		comment = SplitComments (original [i]) [1];  		if (line.Contains ("government"))//check wich property this is  		 {  			writer.WriteLine ("government = " + country.Government + comment);  			//insert the type' the value and the optional comments into the new mod file  			continue;  		}  		if (line.Contains ("mercantilism")) {  			writer.WriteLine ("mercantilism = " + country.Mercantilism + comment);  			continue;  		}  		if (line.Contains ("technology_group")) {  			writer.WriteLine ("technology_group = " + country.Techgroup + comment);  			continue;  		}  		if (line.Contains ("religion")) {  			writer.WriteLine ("religion = " + country.Religion + comment);  			continue;  		}  		if (line.Contains ("primary_culture")) {  			writer.WriteLine ("primary_culture = " + country.Culture + comment);  			continue;  		}  		if (line.Contains ("capital")) {  			writer.WriteLine ("capital = " + country.Capital + comment);  			continue;  		}  		if (line == "")//if the first block is over and the history part begins' then break out of the first loop  		 {  			break;  		}  	}  	for (i++; i < original.Length; i++)//copy over the history part for government stuff and rulers  	 {  		writer.WriteLine (original [i]);  	}  	writer.Close ();  	//now save the common/countries/<name>.txt file  	//first load the original  	original = File.ReadAllLines (eulocation + "\\common\\countries\\" + country.Name + ".txt"' Encoding.Default);  	writer = new StreamWriter (new FileStream (savelocation + "\\" + modname.Trim () + "\\common\\countries\\" + country.Name + ".txt"' FileMode.Append' FileAccess.Write)' Encoding.Default);  	for (i = 0; i < original.Length; i++) {  		string comment = SplitComments (original [i]) [1];  		string line = SplitComments (original [i]) [0];  		//if its a empty line then just copy that over  		if (original [i].Trim (' '' '\t') == "") {  			writer.WriteLine ("");  			continue;  		}  		//writing the actual file  		if (line.Contains ("preferred_religion")) {  			if (country.PreferedReligion != "") {  				writer.WriteLine ("preferred_religion = " + country.PreferedReligion);  			}  			continue;  		}  		if (line.Contains ("graphical_culture")) {  			writer.WriteLine ("graphical_culture = " + country.Gfx + comment);  			continue;  		}  		if (line.Contains ("color")) {  			writer.WriteLine ("color = { " + country.Color [0] + "  " + country.Color [1] + "  " + country.Color [2] + " }" + comment);  			continue;  		}  		if (line.Contains ("historical_idea_groups")) {  			writer.WriteLine ("historical_idea_groups = {" + comment);  			foreach (string idea in country.Ideas) {  				if (idea != "") {  					writer.WriteLine ("\t" + idea);  				}  			}  			i = ReadSyntax (i + 1' original.ToList ());  		}  		if (line.Contains ("historical_units")) {  			writer.WriteLine ("historical_units = {" + comment);  			foreach (string unit in country.Units) {  				writer.WriteLine ("\t" + unit);  			}  			writer.WriteLine ("}");  			for (; !original [i].Contains ('}'); i++) {  				//search the closing tag     			}  			i++;  			//skip over the closing tag because we already wrote it  		}  		//if there is no editable stuff then just copy over the original  		writer.WriteLine (original [i]);  	}  	writer.Close ();  	//now save the ideagroup  	//first check if its a country idea group or group idea or default idea  	if (country.Nationalideagroup.Split ('_') [0].Length == 3 && country.Nationalideagroup != "default_ideas")//3 letter tag in front of the name so its a specific country idea  	 {  		//load old file and create new one  		string filelocation = savelocation + "\\" + modname.Trim () + "\\common\\ideas\\00_country_ideas.txt";  		File.Delete (filelocation);  		writer = new StreamWriter (new FileStream (filelocation' FileMode.Append' FileAccess.Write)' Encoding.Default);  		//first delete all the old tag references  		DeleteCountryTag (country' NIdeasFile1' writer);  		writer.Close ();  		//then reload the file  		original = File.ReadAllLines (filelocation' Encoding.Default);  		File.Delete (filelocation);  		writer = new StreamWriter (new FileStream (filelocation' FileMode.Append' FileAccess.Write)' Encoding.Default);  		//and begin editing for adding the country  		bool found = false;  		i = 0;  		for (; i < original.Length; i++) {  			//splitting the comments  			string line = SplitComments (original [i]) [0];  			string comment = SplitComments (original [i]) [1];  			//if the ideagroup is reached start searching for the trigger' otherwise copy over the original  			if (line.Contains (country.Nationalideagroup)) {  				found = true;  				writer.WriteLine (original [i]);  				//write the beginning of the ideagroup to the new file  				//look for the trigger  				int j = i + 1;  				for (; original [j] != "}"; j++) {  					line = SplitComments (original [j]) [0];  					comment = SplitComments (original [j]) [1];  					if (line.Contains ("trigger")) {  						//write the triggerline:  						writer.WriteLine (original [j]);  						j++;  						//then write the or statement' since we are going to add a country its easiest to just always add a OR statement  						writer.WriteLine ("\t\tOR = {");  						for (; !original [j].Contains ('}'); j++)//copy the original triggers into the statement  						 {  							line = SplitComments (original [j]) [0];  							comment = SplitComments (original [j]) [1];  							if (!line.Contains ("OR")) {  								if (!line.Contains ("\t\t\t")) {  									writer.WriteLine ("\t" + original [j]);  								}  								else {  									writer.WriteLine (original [j]);  								}  							}  						}  						//loop has ended so we are at the end of the original trigger  						//now add our own country and close the or statement and the trigger  						writer.WriteLine ("\t\t\ttag = " + country.Tag);  						writer.WriteLine ("\t\t}");  						writer.WriteLine ("\t}");  						j++;  					}  					else {  						//if not the trigger then just copy  						writer.WriteLine (original [j]);  					}  				}  				i = j;  			}  			else {  				//if not the right idea group then just copy  				writer.WriteLine (original [i]);  			}  		}  		writer.Close ();  		if (!found) {  			//if group is not found then display error message  			MessageBox.Show ("Idea group not found in appropriated file"' "Error");  		}  	}  	else {  		if (country.Nationalideagroup != "default_ideas")//not default and not country specific so its in the group file  		 {  			string filelocation = savelocation + "\\" + modname.Trim () + "\\common\\ideas\\zz_group_ideas.txt";  			//load old file and create new one  			File.Delete (filelocation);  			writer = new StreamWriter (new FileStream (filelocation' FileMode.Append' FileAccess.Write)' Encoding.Default);  			//first delete all the old tag references  			DeleteCountryTag (country' NIdeasFile2' writer);  			writer.Close ();  			//then reload the file  			original = File.ReadAllLines (filelocation' Encoding.Default);  			File.Delete (filelocation);  			writer = new StreamWriter (new FileStream (filelocation' FileMode.Append' FileAccess.Write)' Encoding.Default);  			//and begin editing for adding the country  			bool found = false;  			i = 0;  			for (; i < original.Length; i++) {  				//splitting the comments  				string line = SplitComments (original [i]) [0];  				string comment = SplitComments (original [i]) [1];  				//if the ideagroup is reached start searching for the trigger' otherwise copy over the original  				if (line.Contains (country.Nationalideagroup)) {  					found = true;  					writer.WriteLine (original [i]);  					//write the beginning of the ideagroup to the new file  					//look for the trigger  					int j = i + 1;  					for (; original [j] != "}"; j++) {  						line = SplitComments (original [j]) [0];  						comment = SplitComments (original [j]) [1];  						if (line.Contains ("trigger")) {  							//write the triggerline:  							writer.WriteLine (original [j]);  							j++;  							//now write the OR and AND construction to add our own tag  							writer.WriteLine ("\t\tOR = {");  							writer.WriteLine ("\t\t\tAND = {");  							bool extrablock = false;  							for (; !original [j].Contains ('}'); j++)//copy the original triggers into the statement  							 {  								if (SplitComments (original [i]) [0].Contains ('{')) {  									extrablock = true;  								}  								writer.WriteLine ("\t\t" + original [j]);  							}  							//loop has ended so we are at the end of the original trigger  							//now close the AND and add our own tag' then end the OR and the triggger  							if (extrablock) {  								writer.WriteLine ("\t\t\t\t}");  							}  							writer.WriteLine ("\t\t\t}");  							writer.WriteLine ("\t\t\ttag = " + country.Tag);  							writer.WriteLine ("\t\t}");  							writer.WriteLine ("\t}");  							j++;  						}  						else {  							//if not the trigger then just copy  							writer.WriteLine (original [j]);  						}  					}  					i = j;  				}  				else {  					//if not the right idea group then just copy  					writer.WriteLine (original [i]);  				}  			}  			writer.Close ();  			if (!found) {  				//if group is not found then display error message  				MessageBox.Show ("Idea group not found in appropriated file"' "Error");  			}  		}  		else {  			//if its default ideas then delete all the instances of the tag in other files' however a country will can still fall under a zz_group_ideas.txt entry' i will not change this because those ideas are always better then default_ideas  			writer = new StreamWriter (new FileStream (savelocation + "\\" + modname.Trim () + "\\common\\ideas\\00_country_ideas.txt"' FileMode.Append' FileAccess.Write)' Encoding.Default);  			DeleteCountryTag (country' NIdeasFile1' writer);  			writer.Close ();  		}  	}  }  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,SaveCountry,The following statement contains a magic number: if (filename == null) {  	MessageBox.Show ("Selected country has no entry in the history/countries folder"' "FileError");  }  else {  	//load the original file and itirate through it to copy it to the new file filling in the selected country details  	string[] original = File.ReadAllLines (eulocation + "\\history\\countries\\" + filename' Encoding.Default);  	StreamWriter writer = new StreamWriter (new FileStream (savelocation + "\\" + modname.Trim () + "\\history\\countries\\" + filename' FileMode.Append' FileAccess.Write)' Encoding.Default);  	//the actual writer  	int i = 0;  	for (; i < original.Length; i++)//itirate through the original and put in the same order the value and keywords in the new modfile  	 {  		string comment = "";  		string line = "";  		line = SplitComments (original [i]) [0];  		comment = SplitComments (original [i]) [1];  		if (line.Contains ("government"))//check wich property this is  		 {  			writer.WriteLine ("government = " + country.Government + comment);  			//insert the type' the value and the optional comments into the new mod file  			continue;  		}  		if (line.Contains ("mercantilism")) {  			writer.WriteLine ("mercantilism = " + country.Mercantilism + comment);  			continue;  		}  		if (line.Contains ("technology_group")) {  			writer.WriteLine ("technology_group = " + country.Techgroup + comment);  			continue;  		}  		if (line.Contains ("religion")) {  			writer.WriteLine ("religion = " + country.Religion + comment);  			continue;  		}  		if (line.Contains ("primary_culture")) {  			writer.WriteLine ("primary_culture = " + country.Culture + comment);  			continue;  		}  		if (line.Contains ("capital")) {  			writer.WriteLine ("capital = " + country.Capital + comment);  			continue;  		}  		if (line == "")//if the first block is over and the history part begins' then break out of the first loop  		 {  			break;  		}  	}  	for (i++; i < original.Length; i++)//copy over the history part for government stuff and rulers  	 {  		writer.WriteLine (original [i]);  	}  	writer.Close ();  	//now save the common/countries/<name>.txt file  	//first load the original  	original = File.ReadAllLines (eulocation + "\\common\\countries\\" + country.Name + ".txt"' Encoding.Default);  	writer = new StreamWriter (new FileStream (savelocation + "\\" + modname.Trim () + "\\common\\countries\\" + country.Name + ".txt"' FileMode.Append' FileAccess.Write)' Encoding.Default);  	for (i = 0; i < original.Length; i++) {  		string comment = SplitComments (original [i]) [1];  		string line = SplitComments (original [i]) [0];  		//if its a empty line then just copy that over  		if (original [i].Trim (' '' '\t') == "") {  			writer.WriteLine ("");  			continue;  		}  		//writing the actual file  		if (line.Contains ("preferred_religion")) {  			if (country.PreferedReligion != "") {  				writer.WriteLine ("preferred_religion = " + country.PreferedReligion);  			}  			continue;  		}  		if (line.Contains ("graphical_culture")) {  			writer.WriteLine ("graphical_culture = " + country.Gfx + comment);  			continue;  		}  		if (line.Contains ("color")) {  			writer.WriteLine ("color = { " + country.Color [0] + "  " + country.Color [1] + "  " + country.Color [2] + " }" + comment);  			continue;  		}  		if (line.Contains ("historical_idea_groups")) {  			writer.WriteLine ("historical_idea_groups = {" + comment);  			foreach (string idea in country.Ideas) {  				if (idea != "") {  					writer.WriteLine ("\t" + idea);  				}  			}  			i = ReadSyntax (i + 1' original.ToList ());  		}  		if (line.Contains ("historical_units")) {  			writer.WriteLine ("historical_units = {" + comment);  			foreach (string unit in country.Units) {  				writer.WriteLine ("\t" + unit);  			}  			writer.WriteLine ("}");  			for (; !original [i].Contains ('}'); i++) {  				//search the closing tag     			}  			i++;  			//skip over the closing tag because we already wrote it  		}  		//if there is no editable stuff then just copy over the original  		writer.WriteLine (original [i]);  	}  	writer.Close ();  	//now save the ideagroup  	//first check if its a country idea group or group idea or default idea  	if (country.Nationalideagroup.Split ('_') [0].Length == 3 && country.Nationalideagroup != "default_ideas")//3 letter tag in front of the name so its a specific country idea  	 {  		//load old file and create new one  		string filelocation = savelocation + "\\" + modname.Trim () + "\\common\\ideas\\00_country_ideas.txt";  		File.Delete (filelocation);  		writer = new StreamWriter (new FileStream (filelocation' FileMode.Append' FileAccess.Write)' Encoding.Default);  		//first delete all the old tag references  		DeleteCountryTag (country' NIdeasFile1' writer);  		writer.Close ();  		//then reload the file  		original = File.ReadAllLines (filelocation' Encoding.Default);  		File.Delete (filelocation);  		writer = new StreamWriter (new FileStream (filelocation' FileMode.Append' FileAccess.Write)' Encoding.Default);  		//and begin editing for adding the country  		bool found = false;  		i = 0;  		for (; i < original.Length; i++) {  			//splitting the comments  			string line = SplitComments (original [i]) [0];  			string comment = SplitComments (original [i]) [1];  			//if the ideagroup is reached start searching for the trigger' otherwise copy over the original  			if (line.Contains (country.Nationalideagroup)) {  				found = true;  				writer.WriteLine (original [i]);  				//write the beginning of the ideagroup to the new file  				//look for the trigger  				int j = i + 1;  				for (; original [j] != "}"; j++) {  					line = SplitComments (original [j]) [0];  					comment = SplitComments (original [j]) [1];  					if (line.Contains ("trigger")) {  						//write the triggerline:  						writer.WriteLine (original [j]);  						j++;  						//then write the or statement' since we are going to add a country its easiest to just always add a OR statement  						writer.WriteLine ("\t\tOR = {");  						for (; !original [j].Contains ('}'); j++)//copy the original triggers into the statement  						 {  							line = SplitComments (original [j]) [0];  							comment = SplitComments (original [j]) [1];  							if (!line.Contains ("OR")) {  								if (!line.Contains ("\t\t\t")) {  									writer.WriteLine ("\t" + original [j]);  								}  								else {  									writer.WriteLine (original [j]);  								}  							}  						}  						//loop has ended so we are at the end of the original trigger  						//now add our own country and close the or statement and the trigger  						writer.WriteLine ("\t\t\ttag = " + country.Tag);  						writer.WriteLine ("\t\t}");  						writer.WriteLine ("\t}");  						j++;  					}  					else {  						//if not the trigger then just copy  						writer.WriteLine (original [j]);  					}  				}  				i = j;  			}  			else {  				//if not the right idea group then just copy  				writer.WriteLine (original [i]);  			}  		}  		writer.Close ();  		if (!found) {  			//if group is not found then display error message  			MessageBox.Show ("Idea group not found in appropriated file"' "Error");  		}  	}  	else {  		if (country.Nationalideagroup != "default_ideas")//not default and not country specific so its in the group file  		 {  			string filelocation = savelocation + "\\" + modname.Trim () + "\\common\\ideas\\zz_group_ideas.txt";  			//load old file and create new one  			File.Delete (filelocation);  			writer = new StreamWriter (new FileStream (filelocation' FileMode.Append' FileAccess.Write)' Encoding.Default);  			//first delete all the old tag references  			DeleteCountryTag (country' NIdeasFile2' writer);  			writer.Close ();  			//then reload the file  			original = File.ReadAllLines (filelocation' Encoding.Default);  			File.Delete (filelocation);  			writer = new StreamWriter (new FileStream (filelocation' FileMode.Append' FileAccess.Write)' Encoding.Default);  			//and begin editing for adding the country  			bool found = false;  			i = 0;  			for (; i < original.Length; i++) {  				//splitting the comments  				string line = SplitComments (original [i]) [0];  				string comment = SplitComments (original [i]) [1];  				//if the ideagroup is reached start searching for the trigger' otherwise copy over the original  				if (line.Contains (country.Nationalideagroup)) {  					found = true;  					writer.WriteLine (original [i]);  					//write the beginning of the ideagroup to the new file  					//look for the trigger  					int j = i + 1;  					for (; original [j] != "}"; j++) {  						line = SplitComments (original [j]) [0];  						comment = SplitComments (original [j]) [1];  						if (line.Contains ("trigger")) {  							//write the triggerline:  							writer.WriteLine (original [j]);  							j++;  							//now write the OR and AND construction to add our own tag  							writer.WriteLine ("\t\tOR = {");  							writer.WriteLine ("\t\t\tAND = {");  							bool extrablock = false;  							for (; !original [j].Contains ('}'); j++)//copy the original triggers into the statement  							 {  								if (SplitComments (original [i]) [0].Contains ('{')) {  									extrablock = true;  								}  								writer.WriteLine ("\t\t" + original [j]);  							}  							//loop has ended so we are at the end of the original trigger  							//now close the AND and add our own tag' then end the OR and the triggger  							if (extrablock) {  								writer.WriteLine ("\t\t\t\t}");  							}  							writer.WriteLine ("\t\t\t}");  							writer.WriteLine ("\t\t\ttag = " + country.Tag);  							writer.WriteLine ("\t\t}");  							writer.WriteLine ("\t}");  							j++;  						}  						else {  							//if not the trigger then just copy  							writer.WriteLine (original [j]);  						}  					}  					i = j;  				}  				else {  					//if not the right idea group then just copy  					writer.WriteLine (original [i]);  				}  			}  			writer.Close ();  			if (!found) {  				//if group is not found then display error message  				MessageBox.Show ("Idea group not found in appropriated file"' "Error");  			}  		}  		else {  			//if its default ideas then delete all the instances of the tag in other files' however a country will can still fall under a zz_group_ideas.txt entry' i will not change this because those ideas are always better then default_ideas  			writer = new StreamWriter (new FileStream (savelocation + "\\" + modname.Trim () + "\\common\\ideas\\00_country_ideas.txt"' FileMode.Append' FileAccess.Write)' Encoding.Default);  			DeleteCountryTag (country' NIdeasFile1' writer);  			writer.Close ();  		}  	}  }  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,SaveCountry,The following statement contains a magic number: for (i = 0; i < original.Length; i++) {  	string comment = SplitComments (original [i]) [1];  	string line = SplitComments (original [i]) [0];  	//if its a empty line then just copy that over  	if (original [i].Trim (' '' '\t') == "") {  		writer.WriteLine ("");  		continue;  	}  	//writing the actual file  	if (line.Contains ("preferred_religion")) {  		if (country.PreferedReligion != "") {  			writer.WriteLine ("preferred_religion = " + country.PreferedReligion);  		}  		continue;  	}  	if (line.Contains ("graphical_culture")) {  		writer.WriteLine ("graphical_culture = " + country.Gfx + comment);  		continue;  	}  	if (line.Contains ("color")) {  		writer.WriteLine ("color = { " + country.Color [0] + "  " + country.Color [1] + "  " + country.Color [2] + " }" + comment);  		continue;  	}  	if (line.Contains ("historical_idea_groups")) {  		writer.WriteLine ("historical_idea_groups = {" + comment);  		foreach (string idea in country.Ideas) {  			if (idea != "") {  				writer.WriteLine ("\t" + idea);  			}  		}  		i = ReadSyntax (i + 1' original.ToList ());  	}  	if (line.Contains ("historical_units")) {  		writer.WriteLine ("historical_units = {" + comment);  		foreach (string unit in country.Units) {  			writer.WriteLine ("\t" + unit);  		}  		writer.WriteLine ("}");  		for (; !original [i].Contains ('}'); i++) {  			//search the closing tag     		}  		i++;  		//skip over the closing tag because we already wrote it  	}  	//if there is no editable stuff then just copy over the original  	writer.WriteLine (original [i]);  }  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,SaveCountry,The following statement contains a magic number: if (line.Contains ("color")) {  	writer.WriteLine ("color = { " + country.Color [0] + "  " + country.Color [1] + "  " + country.Color [2] + " }" + comment);  	continue;  }  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,SaveCountry,The following statement contains a magic number: writer.WriteLine ("color = { " + country.Color [0] + "  " + country.Color [1] + "  " + country.Color [2] + " }" + comment);  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,SaveCountry,The following statement contains a magic number: if (country.Nationalideagroup.Split ('_') [0].Length == 3 && country.Nationalideagroup != "default_ideas")//3 letter tag in front of the name so its a specific country idea   {  	//load old file and create new one  	string filelocation = savelocation + "\\" + modname.Trim () + "\\common\\ideas\\00_country_ideas.txt";  	File.Delete (filelocation);  	writer = new StreamWriter (new FileStream (filelocation' FileMode.Append' FileAccess.Write)' Encoding.Default);  	//first delete all the old tag references  	DeleteCountryTag (country' NIdeasFile1' writer);  	writer.Close ();  	//then reload the file  	original = File.ReadAllLines (filelocation' Encoding.Default);  	File.Delete (filelocation);  	writer = new StreamWriter (new FileStream (filelocation' FileMode.Append' FileAccess.Write)' Encoding.Default);  	//and begin editing for adding the country  	bool found = false;  	i = 0;  	for (; i < original.Length; i++) {  		//splitting the comments  		string line = SplitComments (original [i]) [0];  		string comment = SplitComments (original [i]) [1];  		//if the ideagroup is reached start searching for the trigger' otherwise copy over the original  		if (line.Contains (country.Nationalideagroup)) {  			found = true;  			writer.WriteLine (original [i]);  			//write the beginning of the ideagroup to the new file  			//look for the trigger  			int j = i + 1;  			for (; original [j] != "}"; j++) {  				line = SplitComments (original [j]) [0];  				comment = SplitComments (original [j]) [1];  				if (line.Contains ("trigger")) {  					//write the triggerline:  					writer.WriteLine (original [j]);  					j++;  					//then write the or statement' since we are going to add a country its easiest to just always add a OR statement  					writer.WriteLine ("\t\tOR = {");  					for (; !original [j].Contains ('}'); j++)//copy the original triggers into the statement  					 {  						line = SplitComments (original [j]) [0];  						comment = SplitComments (original [j]) [1];  						if (!line.Contains ("OR")) {  							if (!line.Contains ("\t\t\t")) {  								writer.WriteLine ("\t" + original [j]);  							}  							else {  								writer.WriteLine (original [j]);  							}  						}  					}  					//loop has ended so we are at the end of the original trigger  					//now add our own country and close the or statement and the trigger  					writer.WriteLine ("\t\t\ttag = " + country.Tag);  					writer.WriteLine ("\t\t}");  					writer.WriteLine ("\t}");  					j++;  				}  				else {  					//if not the trigger then just copy  					writer.WriteLine (original [j]);  				}  			}  			i = j;  		}  		else {  			//if not the right idea group then just copy  			writer.WriteLine (original [i]);  		}  	}  	writer.Close ();  	if (!found) {  		//if group is not found then display error message  		MessageBox.Show ("Idea group not found in appropriated file"' "Error");  	}  }  else {  	if (country.Nationalideagroup != "default_ideas")//not default and not country specific so its in the group file  	 {  		string filelocation = savelocation + "\\" + modname.Trim () + "\\common\\ideas\\zz_group_ideas.txt";  		//load old file and create new one  		File.Delete (filelocation);  		writer = new StreamWriter (new FileStream (filelocation' FileMode.Append' FileAccess.Write)' Encoding.Default);  		//first delete all the old tag references  		DeleteCountryTag (country' NIdeasFile2' writer);  		writer.Close ();  		//then reload the file  		original = File.ReadAllLines (filelocation' Encoding.Default);  		File.Delete (filelocation);  		writer = new StreamWriter (new FileStream (filelocation' FileMode.Append' FileAccess.Write)' Encoding.Default);  		//and begin editing for adding the country  		bool found = false;  		i = 0;  		for (; i < original.Length; i++) {  			//splitting the comments  			string line = SplitComments (original [i]) [0];  			string comment = SplitComments (original [i]) [1];  			//if the ideagroup is reached start searching for the trigger' otherwise copy over the original  			if (line.Contains (country.Nationalideagroup)) {  				found = true;  				writer.WriteLine (original [i]);  				//write the beginning of the ideagroup to the new file  				//look for the trigger  				int j = i + 1;  				for (; original [j] != "}"; j++) {  					line = SplitComments (original [j]) [0];  					comment = SplitComments (original [j]) [1];  					if (line.Contains ("trigger")) {  						//write the triggerline:  						writer.WriteLine (original [j]);  						j++;  						//now write the OR and AND construction to add our own tag  						writer.WriteLine ("\t\tOR = {");  						writer.WriteLine ("\t\t\tAND = {");  						bool extrablock = false;  						for (; !original [j].Contains ('}'); j++)//copy the original triggers into the statement  						 {  							if (SplitComments (original [i]) [0].Contains ('{')) {  								extrablock = true;  							}  							writer.WriteLine ("\t\t" + original [j]);  						}  						//loop has ended so we are at the end of the original trigger  						//now close the AND and add our own tag' then end the OR and the triggger  						if (extrablock) {  							writer.WriteLine ("\t\t\t\t}");  						}  						writer.WriteLine ("\t\t\t}");  						writer.WriteLine ("\t\t\ttag = " + country.Tag);  						writer.WriteLine ("\t\t}");  						writer.WriteLine ("\t}");  						j++;  					}  					else {  						//if not the trigger then just copy  						writer.WriteLine (original [j]);  					}  				}  				i = j;  			}  			else {  				//if not the right idea group then just copy  				writer.WriteLine (original [i]);  			}  		}  		writer.Close ();  		if (!found) {  			//if group is not found then display error message  			MessageBox.Show ("Idea group not found in appropriated file"' "Error");  		}  	}  	else {  		//if its default ideas then delete all the instances of the tag in other files' however a country will can still fall under a zz_group_ideas.txt entry' i will not change this because those ideas are always better then default_ideas  		writer = new StreamWriter (new FileStream (savelocation + "\\" + modname.Trim () + "\\common\\ideas\\00_country_ideas.txt"' FileMode.Append' FileAccess.Write)' Encoding.Default);  		DeleteCountryTag (country' NIdeasFile1' writer);  		writer.Close ();  	}  }  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,bt_down_Click,The following statement contains a magic number: if (selectedIndex < lb_units.Items.Count - 1 & selectedIndex != -1) {  	lb_units.Items.Insert (selectedIndex + 2' lb_units.Items [selectedIndex]);  	lb_units.Items.RemoveAt (selectedIndex);  	lb_units.SelectedIndex = selectedIndex + 1;  }  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,bt_down_Click,The following statement contains a magic number: lb_units.Items.Insert (selectedIndex + 2' lb_units.Items [selectedIndex]);  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,bt_edit_nationalideasgroup_Click,The following statement contains a magic number: if (cmb_nationalideasgroup.Text != "") {  	List<string> file;  	int filenumber;  	//first find out in wich file the ideagroup is in  	if (cmb_nationalideasgroup.Text.Split ('_') [0].Length == 3)//country ideas  	 {  		filenumber = 1;  		file = NIdeasFile1;  	}  	else {  		if (cmb_nationalideasgroup.Text == "default_ideas")//default ideas  		 {  			filenumber = 3;  			file = NIdeasFile3;  		}  		else//group ideas  		 {  			filenumber = 2;  			file = NIdeasFile2;  		}  	}  	SubEditor editor = new SubEditor ("National Ideas"' cmb_nationalideasgroup.Text' "Propertie"' "Propertie"' ExtractFirstLevelBlock (file' cmb_nationalideasgroup.Text)' new string[] {  		"start"'  		"bonus"'  		"trigger"'  		"free"  	}' options.modifiers);  	editor.ShowDialog ();  	switch (filenumber) {  	case 1:  		NIdeasFile1 = InsertBlock (NIdeasFile1' editor.Result' cmb_nationalideasgroup.Text);  		break;  	case 2:  		NIdeasFile2 = InsertBlock (NIdeasFile2' editor.Result' cmb_nationalideasgroup.Text);  		break;  	case 3:  		NIdeasFile3 = InsertBlock (NIdeasFile3' editor.Result' cmb_nationalideasgroup.Text);  		break;  	}  	editor.Dispose ();  }  else {  	MessageBox.Show ("Please choose a national idea group first"' "Error");  }  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,bt_edit_nationalideasgroup_Click,The following statement contains a magic number: if (cmb_nationalideasgroup.Text != "") {  	List<string> file;  	int filenumber;  	//first find out in wich file the ideagroup is in  	if (cmb_nationalideasgroup.Text.Split ('_') [0].Length == 3)//country ideas  	 {  		filenumber = 1;  		file = NIdeasFile1;  	}  	else {  		if (cmb_nationalideasgroup.Text == "default_ideas")//default ideas  		 {  			filenumber = 3;  			file = NIdeasFile3;  		}  		else//group ideas  		 {  			filenumber = 2;  			file = NIdeasFile2;  		}  	}  	SubEditor editor = new SubEditor ("National Ideas"' cmb_nationalideasgroup.Text' "Propertie"' "Propertie"' ExtractFirstLevelBlock (file' cmb_nationalideasgroup.Text)' new string[] {  		"start"'  		"bonus"'  		"trigger"'  		"free"  	}' options.modifiers);  	editor.ShowDialog ();  	switch (filenumber) {  	case 1:  		NIdeasFile1 = InsertBlock (NIdeasFile1' editor.Result' cmb_nationalideasgroup.Text);  		break;  	case 2:  		NIdeasFile2 = InsertBlock (NIdeasFile2' editor.Result' cmb_nationalideasgroup.Text);  		break;  	case 3:  		NIdeasFile3 = InsertBlock (NIdeasFile3' editor.Result' cmb_nationalideasgroup.Text);  		break;  	}  	editor.Dispose ();  }  else {  	MessageBox.Show ("Please choose a national idea group first"' "Error");  }  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,bt_edit_nationalideasgroup_Click,The following statement contains a magic number: if (cmb_nationalideasgroup.Text != "") {  	List<string> file;  	int filenumber;  	//first find out in wich file the ideagroup is in  	if (cmb_nationalideasgroup.Text.Split ('_') [0].Length == 3)//country ideas  	 {  		filenumber = 1;  		file = NIdeasFile1;  	}  	else {  		if (cmb_nationalideasgroup.Text == "default_ideas")//default ideas  		 {  			filenumber = 3;  			file = NIdeasFile3;  		}  		else//group ideas  		 {  			filenumber = 2;  			file = NIdeasFile2;  		}  	}  	SubEditor editor = new SubEditor ("National Ideas"' cmb_nationalideasgroup.Text' "Propertie"' "Propertie"' ExtractFirstLevelBlock (file' cmb_nationalideasgroup.Text)' new string[] {  		"start"'  		"bonus"'  		"trigger"'  		"free"  	}' options.modifiers);  	editor.ShowDialog ();  	switch (filenumber) {  	case 1:  		NIdeasFile1 = InsertBlock (NIdeasFile1' editor.Result' cmb_nationalideasgroup.Text);  		break;  	case 2:  		NIdeasFile2 = InsertBlock (NIdeasFile2' editor.Result' cmb_nationalideasgroup.Text);  		break;  	case 3:  		NIdeasFile3 = InsertBlock (NIdeasFile3' editor.Result' cmb_nationalideasgroup.Text);  		break;  	}  	editor.Dispose ();  }  else {  	MessageBox.Show ("Please choose a national idea group first"' "Error");  }  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,bt_edit_nationalideasgroup_Click,The following statement contains a magic number: if (cmb_nationalideasgroup.Text != "") {  	List<string> file;  	int filenumber;  	//first find out in wich file the ideagroup is in  	if (cmb_nationalideasgroup.Text.Split ('_') [0].Length == 3)//country ideas  	 {  		filenumber = 1;  		file = NIdeasFile1;  	}  	else {  		if (cmb_nationalideasgroup.Text == "default_ideas")//default ideas  		 {  			filenumber = 3;  			file = NIdeasFile3;  		}  		else//group ideas  		 {  			filenumber = 2;  			file = NIdeasFile2;  		}  	}  	SubEditor editor = new SubEditor ("National Ideas"' cmb_nationalideasgroup.Text' "Propertie"' "Propertie"' ExtractFirstLevelBlock (file' cmb_nationalideasgroup.Text)' new string[] {  		"start"'  		"bonus"'  		"trigger"'  		"free"  	}' options.modifiers);  	editor.ShowDialog ();  	switch (filenumber) {  	case 1:  		NIdeasFile1 = InsertBlock (NIdeasFile1' editor.Result' cmb_nationalideasgroup.Text);  		break;  	case 2:  		NIdeasFile2 = InsertBlock (NIdeasFile2' editor.Result' cmb_nationalideasgroup.Text);  		break;  	case 3:  		NIdeasFile3 = InsertBlock (NIdeasFile3' editor.Result' cmb_nationalideasgroup.Text);  		break;  	}  	editor.Dispose ();  }  else {  	MessageBox.Show ("Please choose a national idea group first"' "Error");  }  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,bt_edit_nationalideasgroup_Click,The following statement contains a magic number: if (cmb_nationalideasgroup.Text != "") {  	List<string> file;  	int filenumber;  	//first find out in wich file the ideagroup is in  	if (cmb_nationalideasgroup.Text.Split ('_') [0].Length == 3)//country ideas  	 {  		filenumber = 1;  		file = NIdeasFile1;  	}  	else {  		if (cmb_nationalideasgroup.Text == "default_ideas")//default ideas  		 {  			filenumber = 3;  			file = NIdeasFile3;  		}  		else//group ideas  		 {  			filenumber = 2;  			file = NIdeasFile2;  		}  	}  	SubEditor editor = new SubEditor ("National Ideas"' cmb_nationalideasgroup.Text' "Propertie"' "Propertie"' ExtractFirstLevelBlock (file' cmb_nationalideasgroup.Text)' new string[] {  		"start"'  		"bonus"'  		"trigger"'  		"free"  	}' options.modifiers);  	editor.ShowDialog ();  	switch (filenumber) {  	case 1:  		NIdeasFile1 = InsertBlock (NIdeasFile1' editor.Result' cmb_nationalideasgroup.Text);  		break;  	case 2:  		NIdeasFile2 = InsertBlock (NIdeasFile2' editor.Result' cmb_nationalideasgroup.Text);  		break;  	case 3:  		NIdeasFile3 = InsertBlock (NIdeasFile3' editor.Result' cmb_nationalideasgroup.Text);  		break;  	}  	editor.Dispose ();  }  else {  	MessageBox.Show ("Please choose a national idea group first"' "Error");  }  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,bt_edit_nationalideasgroup_Click,The following statement contains a magic number: if (cmb_nationalideasgroup.Text.Split ('_') [0].Length == 3)//country ideas   {  	filenumber = 1;  	file = NIdeasFile1;  }  else {  	if (cmb_nationalideasgroup.Text == "default_ideas")//default ideas  	 {  		filenumber = 3;  		file = NIdeasFile3;  	}  	else//group ideas  	 {  		filenumber = 2;  		file = NIdeasFile2;  	}  }  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,bt_edit_nationalideasgroup_Click,The following statement contains a magic number: if (cmb_nationalideasgroup.Text.Split ('_') [0].Length == 3)//country ideas   {  	filenumber = 1;  	file = NIdeasFile1;  }  else {  	if (cmb_nationalideasgroup.Text == "default_ideas")//default ideas  	 {  		filenumber = 3;  		file = NIdeasFile3;  	}  	else//group ideas  	 {  		filenumber = 2;  		file = NIdeasFile2;  	}  }  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,bt_edit_nationalideasgroup_Click,The following statement contains a magic number: if (cmb_nationalideasgroup.Text.Split ('_') [0].Length == 3)//country ideas   {  	filenumber = 1;  	file = NIdeasFile1;  }  else {  	if (cmb_nationalideasgroup.Text == "default_ideas")//default ideas  	 {  		filenumber = 3;  		file = NIdeasFile3;  	}  	else//group ideas  	 {  		filenumber = 2;  		file = NIdeasFile2;  	}  }  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,bt_edit_nationalideasgroup_Click,The following statement contains a magic number: if (cmb_nationalideasgroup.Text == "default_ideas")//default ideas   {  	filenumber = 3;  	file = NIdeasFile3;  }  else//group ideas   {  	filenumber = 2;  	file = NIdeasFile2;  }  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,bt_edit_nationalideasgroup_Click,The following statement contains a magic number: if (cmb_nationalideasgroup.Text == "default_ideas")//default ideas   {  	filenumber = 3;  	file = NIdeasFile3;  }  else//group ideas   {  	filenumber = 2;  	file = NIdeasFile2;  }  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,bt_edit_nationalideasgroup_Click,The following statement contains a magic number: filenumber = 3;  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,bt_edit_nationalideasgroup_Click,The following statement contains a magic number: filenumber = 2;  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,bt_edit_nationalideasgroup_Click,The following statement contains a magic number: switch (filenumber) {  case 1:  	NIdeasFile1 = InsertBlock (NIdeasFile1' editor.Result' cmb_nationalideasgroup.Text);  	break;  case 2:  	NIdeasFile2 = InsertBlock (NIdeasFile2' editor.Result' cmb_nationalideasgroup.Text);  	break;  case 3:  	NIdeasFile3 = InsertBlock (NIdeasFile3' editor.Result' cmb_nationalideasgroup.Text);  	break;  }  
Magic Number,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,bt_edit_nationalideasgroup_Click,The following statement contains a magic number: switch (filenumber) {  case 1:  	NIdeasFile1 = InsertBlock (NIdeasFile1' editor.Result' cmb_nationalideasgroup.Text);  	break;  case 2:  	NIdeasFile2 = InsertBlock (NIdeasFile2' editor.Result' cmb_nationalideasgroup.Text);  	break;  case 3:  	NIdeasFile3 = InsertBlock (NIdeasFile3' editor.Result' cmb_nationalideasgroup.Text);  	break;  }  
Duplicate Code,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,Logic,The method contains a code clone-set at the following line numbers (starting from the method definition): ((16' 41)' (67' 92)' (96' 121)' (125' 150)' (154' 179)' (183' 208)' (212' 237)' (241' 266))
Duplicate Code,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,Logic,The method contains a code clone-set at the following line numbers (starting from the method definition): ((67' 93)' (96' 122)' (125' 151)' (154' 180)' (183' 209)' (212' 238)' (241' 267))
Duplicate Code,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,SaveCountry,The method contains a code clone-set at the following line numbers (starting from the method definition): ((125' 150)' (200' 225))
Duplicate Code,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,SaveCountry,The method contains a code clone-set at the following line numbers (starting from the method definition): ((168' 191)' (243' 266))
Missing Default,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,LoadCountry,The following switch statement is missing a default case: switch (property) {  case "government":  	country.Government = value;  	break;  case "mercantilism":  	country.Mercantilism = decimal.Parse (value' CultureInfo.InvariantCulture);  	break;  case "technology_group":  	country.Techgroup = value;  	break;  case "religion":  	country.Religion = value;  	break;  case "primary_culture":  	country.Culture = value;  	break;  case "capital":  	country.Capital = Convert.ToInt32 (value);  	break;  }  
Missing Default,v1._0,main,C:\repos\williewonka_Clausewitz-EU4-Editor\dev\v1.0\Main.cs,bt_edit_nationalideasgroup_Click,The following switch statement is missing a default case: switch (filenumber) {  case 1:  	NIdeasFile1 = InsertBlock (NIdeasFile1' editor.Result' cmb_nationalideasgroup.Text);  	break;  case 2:  	NIdeasFile2 = InsertBlock (NIdeasFile2' editor.Result' cmb_nationalideasgroup.Text);  	break;  case 3:  	NIdeasFile3 = InsertBlock (NIdeasFile3' editor.Result' cmb_nationalideasgroup.Text);  	break;  }  
