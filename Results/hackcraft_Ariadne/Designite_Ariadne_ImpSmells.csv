Implementation smell,Namespace,Class,File,Method,Description
Long Method,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,PutIfMatch,The method has 100 lines of code.
Long Method,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,PutIfMatch,The method has 84 lines of code.
Long Method,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,PutIfMatch,The method has 84 lines of code.
Long Method,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,PutIfMatch,The method has 71 lines of code.
Complex Method,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Obtain,Cyclomatic complexity of the method is 11
Complex Method,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,PutIfMatch,Cyclomatic complexity of the method is 23
Complex Method,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,PutIfMatch,Cyclomatic complexity of the method is 18
Complex Method,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,PutIfMatch,Cyclomatic complexity of the method is 19
Complex Method,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,PutSingleThreaded,Cyclomatic complexity of the method is 12
Complex Method,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,HelpCopyLargeAll,Cyclomatic complexity of the method is 7
Complex Method,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,Cyclomatic complexity of the method is 9
Complex Method,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,PutIfMatch,Cyclomatic complexity of the method is 19
Complex Method,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,PutIfEmpty,Cyclomatic complexity of the method is 8
Complex Method,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,PutSingleThreaded,Cyclomatic complexity of the method is 12
Complex Method,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,HelpCopyLargeAll,Cyclomatic complexity of the method is 7
Complex Method,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,Cyclomatic complexity of the method is 9
Complex Method,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,SetEquals,Cyclomatic complexity of the method is 8
Complex Method,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,TryTake,Cyclomatic complexity of the method is 9
Complex Method,Ariadne.Collections,SlimConcurrentQueue,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\SlimConcurrentQueue.cs,EnqueueRange,Cyclomatic complexity of the method is 8
Long Parameter List,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Obtain,The method has 4 parameters.
Long Parameter List,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,PutIfMatch,The method has 5 parameters.
Long Parameter List,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,PutIfMatch,The method has 4 parameters.
Long Parameter List,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,PutIfEmpty,The method has 4 parameters.
Long Parameter List,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,PutSingleThreaded,The method has 4 parameters.
Long Parameter List,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,HelpCopyLarge,The method has 4 parameters.
Long Parameter List,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,HelpCopyLargeAll,The method has 5 parameters.
Long Parameter List,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,HelpCopyLargeSome,The method has 5 parameters.
Long Parameter List,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,CopySlot,The method has 6 parameters.
Long Parameter List,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Update,The method has 5 parameters.
Long Parameter List,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Update,The method has 4 parameters.
Long Parameter List,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Update,The method has 4 parameters.
Long Parameter List,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Update,The method has 4 parameters.
Long Parameter List,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,AddOrUpdate,The method has 5 parameters.
Long Parameter List,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,AddOrUpdate,The method has 4 parameters.
Long Parameter List,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,AddOrUpdate,The method has 4 parameters.
Long Parameter List,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,AddOrUpdate,The method has 4 parameters.
Long Parameter List,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,AddOrUpdate,The method has 4 parameters.
Long Parameter List,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Remove,The method has 4 parameters.
Long Parameter List,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,PutSingleThreaded,The method has 4 parameters.
Long Parameter List,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,HelpCopyLarge,The method has 4 parameters.
Long Parameter List,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,HelpCopyLargeAll,The method has 5 parameters.
Long Parameter List,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,HelpCopyLargeSome,The method has 5 parameters.
Long Parameter List,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,CopySlot,The method has 6 parameters.
Long Parameter List,Ariadne,Pool,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Pool.cs,Pool,The method has 4 parameters.
Long Statement,Ariadne,Strings,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Strings.cs,InvalidCastKeys,The length of the statement  "	return string.Format (CultureInfo.CurrentCulture' RM.GetString ("Invalid_Cast_Keys")' argument.FullName' target.FullName); " is 122.
Long Statement,Ariadne,Strings,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Strings.cs,InvalidCastValues,The length of the statement  "	return string.Format (CultureInfo.CurrentCulture' RM.GetString ("Invalid_Cast_Values")' argument.FullName' target.FullName); " is 124.
Empty Catch Block,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,EstimateNecessaryCapacity,The method has an empty catch block.
Empty Catch Block,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,EstimateNecessaryCapacity,The method has an empty catch block.
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,ThreadSafeDictionary,The following statement contains a magic number: if (capacity >= 0 && capacity <= 0x40000000) {  	Validation.NullCheck (comparer' "comparer");  	if (capacity == 0)  		capacity = DefaultCapacity;  	else {  		// A classic hash-table trade-off. The (debated) advantages  		// of prime-number sized tables vs. the speed of masking rather  		// than modding. We go for the latter.  		unchecked {  			// binary round-up  			--capacity;  			capacity |= capacity >> 1;  			capacity |= capacity >> 2;  			capacity |= capacity >> 4;  			capacity |= capacity >> 8;  			capacity |= capacity >> 16;  			++capacity;  		}  	}  	_table = new Table (capacity' new Counter ());  	_cmp = comparer.WellDistributed ();  } else  	throw new ArgumentOutOfRangeException ("capacity");  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,ThreadSafeDictionary,The following statement contains a magic number: if (capacity >= 0 && capacity <= 0x40000000) {  	Validation.NullCheck (comparer' "comparer");  	if (capacity == 0)  		capacity = DefaultCapacity;  	else {  		// A classic hash-table trade-off. The (debated) advantages  		// of prime-number sized tables vs. the speed of masking rather  		// than modding. We go for the latter.  		unchecked {  			// binary round-up  			--capacity;  			capacity |= capacity >> 1;  			capacity |= capacity >> 2;  			capacity |= capacity >> 4;  			capacity |= capacity >> 8;  			capacity |= capacity >> 16;  			++capacity;  		}  	}  	_table = new Table (capacity' new Counter ());  	_cmp = comparer.WellDistributed ();  } else  	throw new ArgumentOutOfRangeException ("capacity");  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,ThreadSafeDictionary,The following statement contains a magic number: if (capacity >= 0 && capacity <= 0x40000000) {  	Validation.NullCheck (comparer' "comparer");  	if (capacity == 0)  		capacity = DefaultCapacity;  	else {  		// A classic hash-table trade-off. The (debated) advantages  		// of prime-number sized tables vs. the speed of masking rather  		// than modding. We go for the latter.  		unchecked {  			// binary round-up  			--capacity;  			capacity |= capacity >> 1;  			capacity |= capacity >> 2;  			capacity |= capacity >> 4;  			capacity |= capacity >> 8;  			capacity |= capacity >> 16;  			++capacity;  		}  	}  	_table = new Table (capacity' new Counter ());  	_cmp = comparer.WellDistributed ();  } else  	throw new ArgumentOutOfRangeException ("capacity");  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,ThreadSafeDictionary,The following statement contains a magic number: if (capacity >= 0 && capacity <= 0x40000000) {  	Validation.NullCheck (comparer' "comparer");  	if (capacity == 0)  		capacity = DefaultCapacity;  	else {  		// A classic hash-table trade-off. The (debated) advantages  		// of prime-number sized tables vs. the speed of masking rather  		// than modding. We go for the latter.  		unchecked {  			// binary round-up  			--capacity;  			capacity |= capacity >> 1;  			capacity |= capacity >> 2;  			capacity |= capacity >> 4;  			capacity |= capacity >> 8;  			capacity |= capacity >> 16;  			++capacity;  		}  	}  	_table = new Table (capacity' new Counter ());  	_cmp = comparer.WellDistributed ();  } else  	throw new ArgumentOutOfRangeException ("capacity");  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,ThreadSafeDictionary,The following statement contains a magic number: if (capacity == 0)  	capacity = DefaultCapacity;  else {  	// A classic hash-table trade-off. The (debated) advantages  	// of prime-number sized tables vs. the speed of masking rather  	// than modding. We go for the latter.  	unchecked {  		// binary round-up  		--capacity;  		capacity |= capacity >> 1;  		capacity |= capacity >> 2;  		capacity |= capacity >> 4;  		capacity |= capacity >> 8;  		capacity |= capacity >> 16;  		++capacity;  	}  }  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,ThreadSafeDictionary,The following statement contains a magic number: if (capacity == 0)  	capacity = DefaultCapacity;  else {  	// A classic hash-table trade-off. The (debated) advantages  	// of prime-number sized tables vs. the speed of masking rather  	// than modding. We go for the latter.  	unchecked {  		// binary round-up  		--capacity;  		capacity |= capacity >> 1;  		capacity |= capacity >> 2;  		capacity |= capacity >> 4;  		capacity |= capacity >> 8;  		capacity |= capacity >> 16;  		++capacity;  	}  }  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,ThreadSafeDictionary,The following statement contains a magic number: if (capacity == 0)  	capacity = DefaultCapacity;  else {  	// A classic hash-table trade-off. The (debated) advantages  	// of prime-number sized tables vs. the speed of masking rather  	// than modding. We go for the latter.  	unchecked {  		// binary round-up  		--capacity;  		capacity |= capacity >> 1;  		capacity |= capacity >> 2;  		capacity |= capacity >> 4;  		capacity |= capacity >> 8;  		capacity |= capacity >> 16;  		++capacity;  	}  }  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,ThreadSafeDictionary,The following statement contains a magic number: if (capacity == 0)  	capacity = DefaultCapacity;  else {  	// A classic hash-table trade-off. The (debated) advantages  	// of prime-number sized tables vs. the speed of masking rather  	// than modding. We go for the latter.  	unchecked {  		// binary round-up  		--capacity;  		capacity |= capacity >> 1;  		capacity |= capacity >> 2;  		capacity |= capacity >> 4;  		capacity |= capacity >> 8;  		capacity |= capacity >> 16;  		++capacity;  	}  }  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,ThreadSafeDictionary,The following statement contains a magic number: unchecked {  	// binary round-up  	--capacity;  	capacity |= capacity >> 1;  	capacity |= capacity >> 2;  	capacity |= capacity >> 4;  	capacity |= capacity >> 8;  	capacity |= capacity >> 16;  	++capacity;  }  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,ThreadSafeDictionary,The following statement contains a magic number: unchecked {  	// binary round-up  	--capacity;  	capacity |= capacity >> 1;  	capacity |= capacity >> 2;  	capacity |= capacity >> 4;  	capacity |= capacity >> 8;  	capacity |= capacity >> 16;  	++capacity;  }  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,ThreadSafeDictionary,The following statement contains a magic number: unchecked {  	// binary round-up  	--capacity;  	capacity |= capacity >> 1;  	capacity |= capacity >> 2;  	capacity |= capacity >> 4;  	capacity |= capacity >> 8;  	capacity |= capacity >> 16;  	++capacity;  }  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,ThreadSafeDictionary,The following statement contains a magic number: unchecked {  	// binary round-up  	--capacity;  	capacity |= capacity >> 1;  	capacity |= capacity >> 2;  	capacity |= capacity >> 4;  	capacity |= capacity >> 8;  	capacity |= capacity >> 16;  	++capacity;  }  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,ThreadSafeDictionary,The following statement contains a magic number: capacity |= capacity >> 2;  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,ThreadSafeDictionary,The following statement contains a magic number: capacity |= capacity >> 4;  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,ThreadSafeDictionary,The following statement contains a magic number: capacity |= capacity >> 8;  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,ThreadSafeDictionary,The following statement contains a magic number: capacity |= capacity >> 16;  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,EstimateNecessaryCapacity,The following statement contains a magic number: if (collection != null) {  	// Analysis disable once EmptyGeneralCatchClause  	try {  		var colKVP = collection as ICollection<KeyValuePair<TKey' TValue>>;  		if (colKVP != null)  			return Math.Min (colKVP.Count' 1024);  		// let’s not go above 1024 just in case there’s only a few distinct items.  		var col = collection as ICollection;  		if (col != null)  			return Math.Min (col.Count' 1024);  	} catch {  		// if some collection throws on Count but doesn’t throw when iterated through' then well that would  		// be pretty weird' but since our calling Count is an optimisation' we should tolerate all  		// exceptions.  	}  	return DefaultCapacity;  }  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,EstimateNecessaryCapacity,The following statement contains a magic number: if (collection != null) {  	// Analysis disable once EmptyGeneralCatchClause  	try {  		var colKVP = collection as ICollection<KeyValuePair<TKey' TValue>>;  		if (colKVP != null)  			return Math.Min (colKVP.Count' 1024);  		// let’s not go above 1024 just in case there’s only a few distinct items.  		var col = collection as ICollection;  		if (col != null)  			return Math.Min (col.Count' 1024);  	} catch {  		// if some collection throws on Count but doesn’t throw when iterated through' then well that would  		// be pretty weird' but since our calling Count is an optimisation' we should tolerate all  		// exceptions.  	}  	return DefaultCapacity;  }  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,EstimateNecessaryCapacity,The following statement contains a magic number: try {  	var colKVP = collection as ICollection<KeyValuePair<TKey' TValue>>;  	if (colKVP != null)  		return Math.Min (colKVP.Count' 1024);  	// let’s not go above 1024 just in case there’s only a few distinct items.  	var col = collection as ICollection;  	if (col != null)  		return Math.Min (col.Count' 1024);  } catch {  	// if some collection throws on Count but doesn’t throw when iterated through' then well that would  	// be pretty weird' but since our calling Count is an optimisation' we should tolerate all  	// exceptions.  }  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,EstimateNecessaryCapacity,The following statement contains a magic number: try {  	var colKVP = collection as ICollection<KeyValuePair<TKey' TValue>>;  	if (colKVP != null)  		return Math.Min (colKVP.Count' 1024);  	// let’s not go above 1024 just in case there’s only a few distinct items.  	var col = collection as ICollection;  	if (col != null)  		return Math.Min (col.Count' 1024);  } catch {  	// if some collection throws on Count but doesn’t throw when iterated through' then well that would  	// be pretty weird' but since our calling Count is an optimisation' we should tolerate all  	// exceptions.  }  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,EstimateNecessaryCapacity,The following statement contains a magic number: if (colKVP != null)  	return Math.Min (colKVP.Count' 1024);  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,EstimateNecessaryCapacity,The following statement contains a magic number: return Math.Min (colKVP.Count' 1024);  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,EstimateNecessaryCapacity,The following statement contains a magic number: if (col != null)  	return Math.Min (col.Count' 1024);  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,EstimateNecessaryCapacity,The following statement contains a magic number: return Math.Min (col.Count' 1024);  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: if (sz >= (cap * 3) >> 2)  	newCap = sz << 3;  else if (sz >= cap >> 1)  	newCap = sz << 2;  else if (sz >= cap >> 2)  	newCap = sz << 1;  else  	newCap = sz;  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: if (sz >= (cap * 3) >> 2)  	newCap = sz << 3;  else if (sz >= cap >> 1)  	newCap = sz << 2;  else if (sz >= cap >> 2)  	newCap = sz << 1;  else  	newCap = sz;  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: if (sz >= (cap * 3) >> 2)  	newCap = sz << 3;  else if (sz >= cap >> 1)  	newCap = sz << 2;  else if (sz >= cap >> 2)  	newCap = sz << 1;  else  	newCap = sz;  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: if (sz >= (cap * 3) >> 2)  	newCap = sz << 3;  else if (sz >= cap >> 1)  	newCap = sz << 2;  else if (sz >= cap >> 2)  	newCap = sz << 1;  else  	newCap = sz;  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: if (sz >= (cap * 3) >> 2)  	newCap = sz << 3;  else if (sz >= cap >> 1)  	newCap = sz << 2;  else if (sz >= cap >> 2)  	newCap = sz << 1;  else  	newCap = sz;  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: newCap = sz << 3;  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: if (sz >= cap >> 1)  	newCap = sz << 2;  else if (sz >= cap >> 2)  	newCap = sz << 1;  else  	newCap = sz;  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: if (sz >= cap >> 1)  	newCap = sz << 2;  else if (sz >= cap >> 2)  	newCap = sz << 1;  else  	newCap = sz;  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: newCap = sz << 2;  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: if (sz >= cap >> 2)  	newCap = sz << 1;  else  	newCap = sz;  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: unchecked {  	// binary round-up  	--newCap;  	newCap |= newCap >> 1;  	newCap |= newCap >> 2;  	newCap |= newCap >> 4;  	newCap |= newCap >> 8;  	newCap |= newCap >> 16;  	++newCap;  }  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: unchecked {  	// binary round-up  	--newCap;  	newCap |= newCap >> 1;  	newCap |= newCap >> 2;  	newCap |= newCap >> 4;  	newCap |= newCap >> 8;  	newCap |= newCap >> 16;  	++newCap;  }  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: unchecked {  	// binary round-up  	--newCap;  	newCap |= newCap >> 1;  	newCap |= newCap >> 2;  	newCap |= newCap >> 4;  	newCap |= newCap >> 8;  	newCap |= newCap >> 16;  	++newCap;  }  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: unchecked {  	// binary round-up  	--newCap;  	newCap |= newCap >> 1;  	newCap |= newCap >> 2;  	newCap |= newCap >> 4;  	newCap |= newCap >> 8;  	newCap |= newCap >> 16;  	++newCap;  }  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: newCap |= newCap >> 2;  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: newCap |= newCap >> 4;  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: newCap |= newCap >> 8;  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: newCap |= newCap >> 16;  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: if (megabytes > 0) {  	int resizers = tab.IncResizers ();  	if (resizers > 2) {  		if (tab.Next != null)  			return;  		Thread.SpinWait (20);  		if (tab.Next != null)  			return;  		Thread.Sleep (Math.Max (megabytes * 5 * resizers' 200));  	}  }  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: if (megabytes > 0) {  	int resizers = tab.IncResizers ();  	if (resizers > 2) {  		if (tab.Next != null)  			return;  		Thread.SpinWait (20);  		if (tab.Next != null)  			return;  		Thread.Sleep (Math.Max (megabytes * 5 * resizers' 200));  	}  }  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: if (megabytes > 0) {  	int resizers = tab.IncResizers ();  	if (resizers > 2) {  		if (tab.Next != null)  			return;  		Thread.SpinWait (20);  		if (tab.Next != null)  			return;  		Thread.Sleep (Math.Max (megabytes * 5 * resizers' 200));  	}  }  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: if (megabytes > 0) {  	int resizers = tab.IncResizers ();  	if (resizers > 2) {  		if (tab.Next != null)  			return;  		Thread.SpinWait (20);  		if (tab.Next != null)  			return;  		Thread.Sleep (Math.Max (megabytes * 5 * resizers' 200));  	}  }  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: if (resizers > 2) {  	if (tab.Next != null)  		return;  	Thread.SpinWait (20);  	if (tab.Next != null)  		return;  	Thread.Sleep (Math.Max (megabytes * 5 * resizers' 200));  }  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: if (resizers > 2) {  	if (tab.Next != null)  		return;  	Thread.SpinWait (20);  	if (tab.Next != null)  		return;  	Thread.Sleep (Math.Max (megabytes * 5 * resizers' 200));  }  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: if (resizers > 2) {  	if (tab.Next != null)  		return;  	Thread.SpinWait (20);  	if (tab.Next != null)  		return;  	Thread.Sleep (Math.Max (megabytes * 5 * resizers' 200));  }  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: if (resizers > 2) {  	if (tab.Next != null)  		return;  	Thread.SpinWait (20);  	if (tab.Next != null)  		return;  	Thread.Sleep (Math.Max (megabytes * 5 * resizers' 200));  }  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: Thread.SpinWait (20);  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: Thread.Sleep (Math.Max (megabytes * 5 * resizers' 200));  
Magic Number,Ariadne.Collections,ThreadSafeDictionary,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: Thread.Sleep (Math.Max (megabytes * 5 * resizers' 200));  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,ThreadSafeSet,The following statement contains a magic number: if (capacity >= 0 && capacity <= 0x40000000) {  	Validation.NullCheck (comparer' "comparer");  	if (capacity == 0)  		capacity = DefaultCapacity;  	else {  		unchecked {  			// binary round-up  			--capacity;  			capacity |= capacity >> 1;  			capacity |= capacity >> 2;  			capacity |= capacity >> 4;  			capacity |= capacity >> 8;  			capacity |= capacity >> 16;  			++capacity;  		}  	}  	_table = new Table (capacity' new Counter ());  	_cmp = comparer.WellDistributed ();  } else  	throw new ArgumentOutOfRangeException ("capacity");  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,ThreadSafeSet,The following statement contains a magic number: if (capacity >= 0 && capacity <= 0x40000000) {  	Validation.NullCheck (comparer' "comparer");  	if (capacity == 0)  		capacity = DefaultCapacity;  	else {  		unchecked {  			// binary round-up  			--capacity;  			capacity |= capacity >> 1;  			capacity |= capacity >> 2;  			capacity |= capacity >> 4;  			capacity |= capacity >> 8;  			capacity |= capacity >> 16;  			++capacity;  		}  	}  	_table = new Table (capacity' new Counter ());  	_cmp = comparer.WellDistributed ();  } else  	throw new ArgumentOutOfRangeException ("capacity");  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,ThreadSafeSet,The following statement contains a magic number: if (capacity >= 0 && capacity <= 0x40000000) {  	Validation.NullCheck (comparer' "comparer");  	if (capacity == 0)  		capacity = DefaultCapacity;  	else {  		unchecked {  			// binary round-up  			--capacity;  			capacity |= capacity >> 1;  			capacity |= capacity >> 2;  			capacity |= capacity >> 4;  			capacity |= capacity >> 8;  			capacity |= capacity >> 16;  			++capacity;  		}  	}  	_table = new Table (capacity' new Counter ());  	_cmp = comparer.WellDistributed ();  } else  	throw new ArgumentOutOfRangeException ("capacity");  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,ThreadSafeSet,The following statement contains a magic number: if (capacity >= 0 && capacity <= 0x40000000) {  	Validation.NullCheck (comparer' "comparer");  	if (capacity == 0)  		capacity = DefaultCapacity;  	else {  		unchecked {  			// binary round-up  			--capacity;  			capacity |= capacity >> 1;  			capacity |= capacity >> 2;  			capacity |= capacity >> 4;  			capacity |= capacity >> 8;  			capacity |= capacity >> 16;  			++capacity;  		}  	}  	_table = new Table (capacity' new Counter ());  	_cmp = comparer.WellDistributed ();  } else  	throw new ArgumentOutOfRangeException ("capacity");  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,ThreadSafeSet,The following statement contains a magic number: if (capacity == 0)  	capacity = DefaultCapacity;  else {  	unchecked {  		// binary round-up  		--capacity;  		capacity |= capacity >> 1;  		capacity |= capacity >> 2;  		capacity |= capacity >> 4;  		capacity |= capacity >> 8;  		capacity |= capacity >> 16;  		++capacity;  	}  }  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,ThreadSafeSet,The following statement contains a magic number: if (capacity == 0)  	capacity = DefaultCapacity;  else {  	unchecked {  		// binary round-up  		--capacity;  		capacity |= capacity >> 1;  		capacity |= capacity >> 2;  		capacity |= capacity >> 4;  		capacity |= capacity >> 8;  		capacity |= capacity >> 16;  		++capacity;  	}  }  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,ThreadSafeSet,The following statement contains a magic number: if (capacity == 0)  	capacity = DefaultCapacity;  else {  	unchecked {  		// binary round-up  		--capacity;  		capacity |= capacity >> 1;  		capacity |= capacity >> 2;  		capacity |= capacity >> 4;  		capacity |= capacity >> 8;  		capacity |= capacity >> 16;  		++capacity;  	}  }  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,ThreadSafeSet,The following statement contains a magic number: if (capacity == 0)  	capacity = DefaultCapacity;  else {  	unchecked {  		// binary round-up  		--capacity;  		capacity |= capacity >> 1;  		capacity |= capacity >> 2;  		capacity |= capacity >> 4;  		capacity |= capacity >> 8;  		capacity |= capacity >> 16;  		++capacity;  	}  }  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,ThreadSafeSet,The following statement contains a magic number: unchecked {  	// binary round-up  	--capacity;  	capacity |= capacity >> 1;  	capacity |= capacity >> 2;  	capacity |= capacity >> 4;  	capacity |= capacity >> 8;  	capacity |= capacity >> 16;  	++capacity;  }  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,ThreadSafeSet,The following statement contains a magic number: unchecked {  	// binary round-up  	--capacity;  	capacity |= capacity >> 1;  	capacity |= capacity >> 2;  	capacity |= capacity >> 4;  	capacity |= capacity >> 8;  	capacity |= capacity >> 16;  	++capacity;  }  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,ThreadSafeSet,The following statement contains a magic number: unchecked {  	// binary round-up  	--capacity;  	capacity |= capacity >> 1;  	capacity |= capacity >> 2;  	capacity |= capacity >> 4;  	capacity |= capacity >> 8;  	capacity |= capacity >> 16;  	++capacity;  }  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,ThreadSafeSet,The following statement contains a magic number: unchecked {  	// binary round-up  	--capacity;  	capacity |= capacity >> 1;  	capacity |= capacity >> 2;  	capacity |= capacity >> 4;  	capacity |= capacity >> 8;  	capacity |= capacity >> 16;  	++capacity;  }  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,ThreadSafeSet,The following statement contains a magic number: capacity |= capacity >> 2;  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,ThreadSafeSet,The following statement contains a magic number: capacity |= capacity >> 4;  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,ThreadSafeSet,The following statement contains a magic number: capacity |= capacity >> 8;  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,ThreadSafeSet,The following statement contains a magic number: capacity |= capacity >> 16;  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,EstimateNecessaryCapacity,The following statement contains a magic number: if (collection != null) {  	// Analysis disable once EmptyGeneralCatchClause  	try {  		var colT = collection as ICollection<T>;  		if (colT != null)  			return Math.Min (colT.Count' 1024);  		// let’s not go above 1024 just in case there’s only a few distinct items.  		var col = collection as ICollection;  		if (col != null)  			return Math.Min (col.Count' 1024);  	} catch {  		// if some collection throws on Count but doesn’t throw when iterated through' then well that would be  		// pretty weird' but since our calling Count is an optimisation' we should tolerate that.  	}  	return DefaultCapacity;  }  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,EstimateNecessaryCapacity,The following statement contains a magic number: if (collection != null) {  	// Analysis disable once EmptyGeneralCatchClause  	try {  		var colT = collection as ICollection<T>;  		if (colT != null)  			return Math.Min (colT.Count' 1024);  		// let’s not go above 1024 just in case there’s only a few distinct items.  		var col = collection as ICollection;  		if (col != null)  			return Math.Min (col.Count' 1024);  	} catch {  		// if some collection throws on Count but doesn’t throw when iterated through' then well that would be  		// pretty weird' but since our calling Count is an optimisation' we should tolerate that.  	}  	return DefaultCapacity;  }  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,EstimateNecessaryCapacity,The following statement contains a magic number: try {  	var colT = collection as ICollection<T>;  	if (colT != null)  		return Math.Min (colT.Count' 1024);  	// let’s not go above 1024 just in case there’s only a few distinct items.  	var col = collection as ICollection;  	if (col != null)  		return Math.Min (col.Count' 1024);  } catch {  	// if some collection throws on Count but doesn’t throw when iterated through' then well that would be  	// pretty weird' but since our calling Count is an optimisation' we should tolerate that.  }  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,EstimateNecessaryCapacity,The following statement contains a magic number: try {  	var colT = collection as ICollection<T>;  	if (colT != null)  		return Math.Min (colT.Count' 1024);  	// let’s not go above 1024 just in case there’s only a few distinct items.  	var col = collection as ICollection;  	if (col != null)  		return Math.Min (col.Count' 1024);  } catch {  	// if some collection throws on Count but doesn’t throw when iterated through' then well that would be  	// pretty weird' but since our calling Count is an optimisation' we should tolerate that.  }  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,EstimateNecessaryCapacity,The following statement contains a magic number: if (colT != null)  	return Math.Min (colT.Count' 1024);  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,EstimateNecessaryCapacity,The following statement contains a magic number: return Math.Min (colT.Count' 1024);  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,EstimateNecessaryCapacity,The following statement contains a magic number: if (col != null)  	return Math.Min (col.Count' 1024);  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,EstimateNecessaryCapacity,The following statement contains a magic number: return Math.Min (col.Count' 1024);  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: if (sz >= (cap * 3) >> 2)  	newCap = sz << 3;  else if (sz >= cap >> 1)  	newCap = sz << 2;  else if (sz >= cap >> 2)  	newCap = sz << 1;  else  	newCap = sz;  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: if (sz >= (cap * 3) >> 2)  	newCap = sz << 3;  else if (sz >= cap >> 1)  	newCap = sz << 2;  else if (sz >= cap >> 2)  	newCap = sz << 1;  else  	newCap = sz;  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: if (sz >= (cap * 3) >> 2)  	newCap = sz << 3;  else if (sz >= cap >> 1)  	newCap = sz << 2;  else if (sz >= cap >> 2)  	newCap = sz << 1;  else  	newCap = sz;  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: if (sz >= (cap * 3) >> 2)  	newCap = sz << 3;  else if (sz >= cap >> 1)  	newCap = sz << 2;  else if (sz >= cap >> 2)  	newCap = sz << 1;  else  	newCap = sz;  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: if (sz >= (cap * 3) >> 2)  	newCap = sz << 3;  else if (sz >= cap >> 1)  	newCap = sz << 2;  else if (sz >= cap >> 2)  	newCap = sz << 1;  else  	newCap = sz;  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: newCap = sz << 3;  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: if (sz >= cap >> 1)  	newCap = sz << 2;  else if (sz >= cap >> 2)  	newCap = sz << 1;  else  	newCap = sz;  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: if (sz >= cap >> 1)  	newCap = sz << 2;  else if (sz >= cap >> 2)  	newCap = sz << 1;  else  	newCap = sz;  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: newCap = sz << 2;  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: if (sz >= cap >> 2)  	newCap = sz << 1;  else  	newCap = sz;  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: unchecked {  	// binary round-up  	--newCap;  	newCap |= newCap >> 1;  	newCap |= newCap >> 2;  	newCap |= newCap >> 4;  	newCap |= newCap >> 8;  	newCap |= newCap >> 16;  	++newCap;  }  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: unchecked {  	// binary round-up  	--newCap;  	newCap |= newCap >> 1;  	newCap |= newCap >> 2;  	newCap |= newCap >> 4;  	newCap |= newCap >> 8;  	newCap |= newCap >> 16;  	++newCap;  }  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: unchecked {  	// binary round-up  	--newCap;  	newCap |= newCap >> 1;  	newCap |= newCap >> 2;  	newCap |= newCap >> 4;  	newCap |= newCap >> 8;  	newCap |= newCap >> 16;  	++newCap;  }  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: unchecked {  	// binary round-up  	--newCap;  	newCap |= newCap >> 1;  	newCap |= newCap >> 2;  	newCap |= newCap >> 4;  	newCap |= newCap >> 8;  	newCap |= newCap >> 16;  	++newCap;  }  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: newCap |= newCap >> 2;  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: newCap |= newCap >> 4;  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: newCap |= newCap >> 8;  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: newCap |= newCap >> 16;  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: if (megabytes > 0) {  	int resizers = tab.IncResizers ();  	if (resizers > 2) {  		if (tab.Next != null)  			return;  		Thread.SpinWait (20);  		if (tab.Next != null)  			return;  		Thread.Sleep (Math.Max (megabytes * 5 * resizers' 200));  	}  }  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: if (megabytes > 0) {  	int resizers = tab.IncResizers ();  	if (resizers > 2) {  		if (tab.Next != null)  			return;  		Thread.SpinWait (20);  		if (tab.Next != null)  			return;  		Thread.Sleep (Math.Max (megabytes * 5 * resizers' 200));  	}  }  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: if (megabytes > 0) {  	int resizers = tab.IncResizers ();  	if (resizers > 2) {  		if (tab.Next != null)  			return;  		Thread.SpinWait (20);  		if (tab.Next != null)  			return;  		Thread.Sleep (Math.Max (megabytes * 5 * resizers' 200));  	}  }  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: if (megabytes > 0) {  	int resizers = tab.IncResizers ();  	if (resizers > 2) {  		if (tab.Next != null)  			return;  		Thread.SpinWait (20);  		if (tab.Next != null)  			return;  		Thread.Sleep (Math.Max (megabytes * 5 * resizers' 200));  	}  }  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: if (resizers > 2) {  	if (tab.Next != null)  		return;  	Thread.SpinWait (20);  	if (tab.Next != null)  		return;  	Thread.Sleep (Math.Max (megabytes * 5 * resizers' 200));  }  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: if (resizers > 2) {  	if (tab.Next != null)  		return;  	Thread.SpinWait (20);  	if (tab.Next != null)  		return;  	Thread.Sleep (Math.Max (megabytes * 5 * resizers' 200));  }  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: if (resizers > 2) {  	if (tab.Next != null)  		return;  	Thread.SpinWait (20);  	if (tab.Next != null)  		return;  	Thread.Sleep (Math.Max (megabytes * 5 * resizers' 200));  }  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: if (resizers > 2) {  	if (tab.Next != null)  		return;  	Thread.SpinWait (20);  	if (tab.Next != null)  		return;  	Thread.Sleep (Math.Max (megabytes * 5 * resizers' 200));  }  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: Thread.SpinWait (20);  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: Thread.Sleep (Math.Max (megabytes * 5 * resizers' 200));  
Magic Number,Ariadne.Collections,ThreadSafeSet,D:\newReposJune17\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: Thread.Sleep (Math.Max (megabytes * 5 * resizers' 200));  
