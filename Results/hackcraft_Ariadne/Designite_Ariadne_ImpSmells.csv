Implementation smell,Namespace,Class,File,Method,Description
Long Method,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,PutIfMatch,The method has 120 lines of code.
Long Method,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,PutIfMatch,The method has 102 lines of code.
Long Method,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,PutIfMatch,The method has 101 lines of code.
Complex Method,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,PutIfMatch,Cyclomatic complexity of the method is 21
Complex Method,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,PutIfMatch,Cyclomatic complexity of the method is 17
Complex Method,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,PutIfMatch,Cyclomatic complexity of the method is 18
Complex Method,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,PutSingleThreaded,Cyclomatic complexity of the method is 10
Complex Method,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,CopySlot,Cyclomatic complexity of the method is 8
Complex Method,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,Cyclomatic complexity of the method is 11
Complex Method,Ariadne.Collections,ThreadSafeSet<T>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,PutIfMatch,Cyclomatic complexity of the method is 20
Complex Method,Ariadne.Collections,ThreadSafeSet<T>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,PutSingleThreaded,Cyclomatic complexity of the method is 10
Complex Method,Ariadne.Collections,ThreadSafeSet<T>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,CopySlot,Cyclomatic complexity of the method is 8
Complex Method,Ariadne.Collections,ThreadSafeSet<T>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,Cyclomatic complexity of the method is 11
Complex Method,Ariadne.Collections,ThreadSafeSet<T>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,SetEquals,Cyclomatic complexity of the method is 8
Long Parameter List,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,PutIfMatch,The method has 5 parameters. Parameters: table' hash' pair' valCmp' replaced
Long Parameter List,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,HelpCopyLargeAll,The method has 5 parameters. Parameters: table' records' deadKey' capacity' copyIdx
Long Parameter List,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,HelpCopyLargeSome,The method has 5 parameters. Parameters: table' records' deadKey' capacity' copyIdx
Long Parameter List,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,CopySlot,The method has 6 parameters. Parameters: table' deadKey' keyValue' hash' kv' oldKV
Long Parameter List,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Update,The method has 5 parameters. Parameters: key' value' compare' comparer' previous
Long Parameter List,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,AddOrUpdate,The method has 5 parameters. Parameters: key' value' compare' comparer' previous
Long Parameter List,Ariadne.Collections,ThreadSafeSet<T>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,HelpCopyLargeAll,The method has 5 parameters. Parameters: table' records' deadItem' capacity' copyIdx
Long Parameter List,Ariadne.Collections,ThreadSafeSet<T>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,HelpCopyLargeSome,The method has 5 parameters. Parameters: table' records' deadItem' capacity' copyIdx
Long Parameter List,Ariadne.Collections,ThreadSafeSet<T>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,CopySlot,The method has 6 parameters. Parameters: table' deadItem' boxRef' hash' box' oldBox
Long Statement,Ariadne,Strings,C:\repos\hackcraft_Ariadne\Ariadne\Strings.cs,InvalidCastKeys,The length of the statement  "            return string.Format(CultureInfo.CurrentCulture' RM.GetString("Invalid_Cast_Keys")' argument.FullName' target.FullName); " is 120.
Long Statement,Ariadne,Strings,C:\repos\hackcraft_Ariadne\Ariadne\Strings.cs,InvalidCastValues,The length of the statement  "            return string.Format(CultureInfo.CurrentCulture' RM.GetString("Invalid_Cast_Values")' argument.FullName' target.FullName); " is 122.
Empty Catch Block,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,EstimateNecessaryCapacity,The method has an empty catch block.
Empty Catch Block,Ariadne.Collections,ThreadSafeSet<T>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,EstimateNecessaryCapacity,The method has an empty catch block.
Magic Number,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,ThreadSafeDictionary,The following statement contains a magic number: if(capacity >= 0 && capacity <= 0x40000000)              {                  Validation.NullCheck(comparer' "comparer");                  if(capacity == 0)                      capacity = DefaultCapacity;                  else                  {                      // A classic hash-table trade-off. The (debated) advantages                      // of prime-number sized tables vs. the speed of masking rather                      // than modding. We go for the latter.                      unchecked                      {                          // binary round-up                          --capacity;                          capacity |= capacity >> 1;                          capacity |= capacity >> 2;                          capacity |= capacity >> 4;                          capacity |= capacity >> 8;                          capacity |= capacity >> 16;                          ++capacity;                      }                  }                    _table = new Table(capacity' new Counter());                  _cmp = comparer.WellDistributed();              }              else                  throw new ArgumentOutOfRangeException("capacity");
Magic Number,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,ThreadSafeDictionary,The following statement contains a magic number: if(capacity >= 0 && capacity <= 0x40000000)              {                  Validation.NullCheck(comparer' "comparer");                  if(capacity == 0)                      capacity = DefaultCapacity;                  else                  {                      // A classic hash-table trade-off. The (debated) advantages                      // of prime-number sized tables vs. the speed of masking rather                      // than modding. We go for the latter.                      unchecked                      {                          // binary round-up                          --capacity;                          capacity |= capacity >> 1;                          capacity |= capacity >> 2;                          capacity |= capacity >> 4;                          capacity |= capacity >> 8;                          capacity |= capacity >> 16;                          ++capacity;                      }                  }                    _table = new Table(capacity' new Counter());                  _cmp = comparer.WellDistributed();              }              else                  throw new ArgumentOutOfRangeException("capacity");
Magic Number,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,ThreadSafeDictionary,The following statement contains a magic number: if(capacity >= 0 && capacity <= 0x40000000)              {                  Validation.NullCheck(comparer' "comparer");                  if(capacity == 0)                      capacity = DefaultCapacity;                  else                  {                      // A classic hash-table trade-off. The (debated) advantages                      // of prime-number sized tables vs. the speed of masking rather                      // than modding. We go for the latter.                      unchecked                      {                          // binary round-up                          --capacity;                          capacity |= capacity >> 1;                          capacity |= capacity >> 2;                          capacity |= capacity >> 4;                          capacity |= capacity >> 8;                          capacity |= capacity >> 16;                          ++capacity;                      }                  }                    _table = new Table(capacity' new Counter());                  _cmp = comparer.WellDistributed();              }              else                  throw new ArgumentOutOfRangeException("capacity");
Magic Number,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,ThreadSafeDictionary,The following statement contains a magic number: if(capacity >= 0 && capacity <= 0x40000000)              {                  Validation.NullCheck(comparer' "comparer");                  if(capacity == 0)                      capacity = DefaultCapacity;                  else                  {                      // A classic hash-table trade-off. The (debated) advantages                      // of prime-number sized tables vs. the speed of masking rather                      // than modding. We go for the latter.                      unchecked                      {                          // binary round-up                          --capacity;                          capacity |= capacity >> 1;                          capacity |= capacity >> 2;                          capacity |= capacity >> 4;                          capacity |= capacity >> 8;                          capacity |= capacity >> 16;                          ++capacity;                      }                  }                    _table = new Table(capacity' new Counter());                  _cmp = comparer.WellDistributed();              }              else                  throw new ArgumentOutOfRangeException("capacity");
Magic Number,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,EstimateNecessaryCapacity,The following statement contains a magic number: if(collection != null)              {                  // Analysis disable once EmptyGeneralCatchClause                  try                  {                      var colKVP = collection as ICollection<KeyValuePair<TKey' TValue>>;                      if(colKVP != null)                          return Math.Min(colKVP.Count' 1024); // let’s not go above 1024 just in case there’s only a few distinct items.                      var col = collection as ICollection;                      if(col != null)                          return Math.Min(col.Count' 1024);                  }                  catch                  {                      // if some collection throws on Count but doesn’t throw when iterated through' then well that would                      // be pretty weird' but since our calling Count is an optimisation' we should tolerate all                      // exceptions.                  }                  return DefaultCapacity;              }
Magic Number,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,EstimateNecessaryCapacity,The following statement contains a magic number: if(collection != null)              {                  // Analysis disable once EmptyGeneralCatchClause                  try                  {                      var colKVP = collection as ICollection<KeyValuePair<TKey' TValue>>;                      if(colKVP != null)                          return Math.Min(colKVP.Count' 1024); // let’s not go above 1024 just in case there’s only a few distinct items.                      var col = collection as ICollection;                      if(col != null)                          return Math.Min(col.Count' 1024);                  }                  catch                  {                      // if some collection throws on Count but doesn’t throw when iterated through' then well that would                      // be pretty weird' but since our calling Count is an optimisation' we should tolerate all                      // exceptions.                  }                  return DefaultCapacity;              }
Magic Number,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: if(sz >= (cap * 3) >> 2)                  newCap = sz << 3;              else if(sz >= cap >> 1)                  newCap = sz << 2;              else if(sz >= cap >> 2)                  newCap = sz << 1;              else                  newCap = sz;
Magic Number,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: if(sz >= (cap * 3) >> 2)                  newCap = sz << 3;              else if(sz >= cap >> 1)                  newCap = sz << 2;              else if(sz >= cap >> 2)                  newCap = sz << 1;              else                  newCap = sz;
Magic Number,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: if(sz >= (cap * 3) >> 2)                  newCap = sz << 3;              else if(sz >= cap >> 1)                  newCap = sz << 2;              else if(sz >= cap >> 2)                  newCap = sz << 1;              else                  newCap = sz;
Magic Number,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: if(sz >= (cap * 3) >> 2)                  newCap = sz << 3;              else if(sz >= cap >> 1)                  newCap = sz << 2;              else if(sz >= cap >> 2)                  newCap = sz << 1;              else                  newCap = sz;
Magic Number,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: if(sz >= (cap * 3) >> 2)                  newCap = sz << 3;              else if(sz >= cap >> 1)                  newCap = sz << 2;              else if(sz >= cap >> 2)                  newCap = sz << 1;              else                  newCap = sz;
Magic Number,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: unchecked              {                  // binary round-up                  --newCap;                  newCap |= newCap >> 1;                  newCap |= newCap >> 2;                  newCap |= newCap >> 4;                  newCap |= newCap >> 8;                  newCap |= newCap >> 16;                  ++newCap;              }
Magic Number,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: unchecked              {                  // binary round-up                  --newCap;                  newCap |= newCap >> 1;                  newCap |= newCap >> 2;                  newCap |= newCap >> 4;                  newCap |= newCap >> 8;                  newCap |= newCap >> 16;                  ++newCap;              }
Magic Number,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: unchecked              {                  // binary round-up                  --newCap;                  newCap |= newCap >> 1;                  newCap |= newCap >> 2;                  newCap |= newCap >> 4;                  newCap |= newCap >> 8;                  newCap |= newCap >> 16;                  ++newCap;              }
Magic Number,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: unchecked              {                  // binary round-up                  --newCap;                  newCap |= newCap >> 1;                  newCap |= newCap >> 2;                  newCap |= newCap >> 4;                  newCap |= newCap >> 8;                  newCap |= newCap >> 16;                  ++newCap;              }
Magic Number,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: int megabytes = newCap >> 18;
Magic Number,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: if(megabytes > 0)              {                  int resizers = tab.IncResizers();                  if(resizers > 2)                  {                      if(tab.Next != null)                          return;                      Thread.SpinWait(20);                      if(tab.Next != null)                          return;                      Thread.Sleep(Math.Max(megabytes * 5 * resizers' 200));                  }              }
Magic Number,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: if(megabytes > 0)              {                  int resizers = tab.IncResizers();                  if(resizers > 2)                  {                      if(tab.Next != null)                          return;                      Thread.SpinWait(20);                      if(tab.Next != null)                          return;                      Thread.Sleep(Math.Max(megabytes * 5 * resizers' 200));                  }              }
Magic Number,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: if(megabytes > 0)              {                  int resizers = tab.IncResizers();                  if(resizers > 2)                  {                      if(tab.Next != null)                          return;                      Thread.SpinWait(20);                      if(tab.Next != null)                          return;                      Thread.Sleep(Math.Max(megabytes * 5 * resizers' 200));                  }              }
Magic Number,Ariadne.Collections,ThreadSafeDictionary<TKey;TValue>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeDictionary.cs,Resize,The following statement contains a magic number: if(megabytes > 0)              {                  int resizers = tab.IncResizers();                  if(resizers > 2)                  {                      if(tab.Next != null)                          return;                      Thread.SpinWait(20);                      if(tab.Next != null)                          return;                      Thread.Sleep(Math.Max(megabytes * 5 * resizers' 200));                  }              }
Magic Number,Ariadne.Collections,ThreadSafeSet<T>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,ThreadSafeSet,The following statement contains a magic number: if(capacity >= 0 && capacity <= 0x40000000)              {                  Validation.NullCheck(comparer' "comparer");                  if(capacity == 0)                      capacity = DefaultCapacity;                  else                  {                      unchecked                      {                          // binary round-up                          --capacity;                          capacity |= capacity >> 1;                          capacity |= capacity >> 2;                          capacity |= capacity >> 4;                          capacity |= capacity >> 8;                          capacity |= capacity >> 16;                          ++capacity;                      }                  }                                        _table = new Table(capacity' new Counter());                  _cmp = comparer.WellDistributed();              }              else                  throw new ArgumentOutOfRangeException("capacity");
Magic Number,Ariadne.Collections,ThreadSafeSet<T>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,ThreadSafeSet,The following statement contains a magic number: if(capacity >= 0 && capacity <= 0x40000000)              {                  Validation.NullCheck(comparer' "comparer");                  if(capacity == 0)                      capacity = DefaultCapacity;                  else                  {                      unchecked                      {                          // binary round-up                          --capacity;                          capacity |= capacity >> 1;                          capacity |= capacity >> 2;                          capacity |= capacity >> 4;                          capacity |= capacity >> 8;                          capacity |= capacity >> 16;                          ++capacity;                      }                  }                                        _table = new Table(capacity' new Counter());                  _cmp = comparer.WellDistributed();              }              else                  throw new ArgumentOutOfRangeException("capacity");
Magic Number,Ariadne.Collections,ThreadSafeSet<T>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,ThreadSafeSet,The following statement contains a magic number: if(capacity >= 0 && capacity <= 0x40000000)              {                  Validation.NullCheck(comparer' "comparer");                  if(capacity == 0)                      capacity = DefaultCapacity;                  else                  {                      unchecked                      {                          // binary round-up                          --capacity;                          capacity |= capacity >> 1;                          capacity |= capacity >> 2;                          capacity |= capacity >> 4;                          capacity |= capacity >> 8;                          capacity |= capacity >> 16;                          ++capacity;                      }                  }                                        _table = new Table(capacity' new Counter());                  _cmp = comparer.WellDistributed();              }              else                  throw new ArgumentOutOfRangeException("capacity");
Magic Number,Ariadne.Collections,ThreadSafeSet<T>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,ThreadSafeSet,The following statement contains a magic number: if(capacity >= 0 && capacity <= 0x40000000)              {                  Validation.NullCheck(comparer' "comparer");                  if(capacity == 0)                      capacity = DefaultCapacity;                  else                  {                      unchecked                      {                          // binary round-up                          --capacity;                          capacity |= capacity >> 1;                          capacity |= capacity >> 2;                          capacity |= capacity >> 4;                          capacity |= capacity >> 8;                          capacity |= capacity >> 16;                          ++capacity;                      }                  }                                        _table = new Table(capacity' new Counter());                  _cmp = comparer.WellDistributed();              }              else                  throw new ArgumentOutOfRangeException("capacity");
Magic Number,Ariadne.Collections,ThreadSafeSet<T>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,EstimateNecessaryCapacity,The following statement contains a magic number: if(collection != null)              {                  // Analysis disable once EmptyGeneralCatchClause                  try                  {                      var colT = collection as ICollection<T>;                      if(colT != null)                          return Math.Min(colT.Count' 1024); // let’s not go above 1024 just in case there’s only a few distinct items.                      var col = collection as ICollection;                      if(col != null)                          return Math.Min(col.Count' 1024);                  }                  catch                  {                      // if some collection throws on Count but doesn’t throw when iterated through' then well that would be                      // pretty weird' but since our calling Count is an optimisation' we should tolerate that.                  }                  return DefaultCapacity;              }
Magic Number,Ariadne.Collections,ThreadSafeSet<T>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,EstimateNecessaryCapacity,The following statement contains a magic number: if(collection != null)              {                  // Analysis disable once EmptyGeneralCatchClause                  try                  {                      var colT = collection as ICollection<T>;                      if(colT != null)                          return Math.Min(colT.Count' 1024); // let’s not go above 1024 just in case there’s only a few distinct items.                      var col = collection as ICollection;                      if(col != null)                          return Math.Min(col.Count' 1024);                  }                  catch                  {                      // if some collection throws on Count but doesn’t throw when iterated through' then well that would be                      // pretty weird' but since our calling Count is an optimisation' we should tolerate that.                  }                  return DefaultCapacity;              }
Magic Number,Ariadne.Collections,ThreadSafeSet<T>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: if(sz >= (cap * 3) >> 2)                  newCap = sz << 3;              else if(sz >= cap >> 1)                  newCap = sz << 2;              else if(sz >= cap >> 2)                  newCap = sz << 1;              else                  newCap = sz;
Magic Number,Ariadne.Collections,ThreadSafeSet<T>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: if(sz >= (cap * 3) >> 2)                  newCap = sz << 3;              else if(sz >= cap >> 1)                  newCap = sz << 2;              else if(sz >= cap >> 2)                  newCap = sz << 1;              else                  newCap = sz;
Magic Number,Ariadne.Collections,ThreadSafeSet<T>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: if(sz >= (cap * 3) >> 2)                  newCap = sz << 3;              else if(sz >= cap >> 1)                  newCap = sz << 2;              else if(sz >= cap >> 2)                  newCap = sz << 1;              else                  newCap = sz;
Magic Number,Ariadne.Collections,ThreadSafeSet<T>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: if(sz >= (cap * 3) >> 2)                  newCap = sz << 3;              else if(sz >= cap >> 1)                  newCap = sz << 2;              else if(sz >= cap >> 2)                  newCap = sz << 1;              else                  newCap = sz;
Magic Number,Ariadne.Collections,ThreadSafeSet<T>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: if(sz >= (cap * 3) >> 2)                  newCap = sz << 3;              else if(sz >= cap >> 1)                  newCap = sz << 2;              else if(sz >= cap >> 2)                  newCap = sz << 1;              else                  newCap = sz;
Magic Number,Ariadne.Collections,ThreadSafeSet<T>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: unchecked              {                  // binary round-up                  --newCap;                  newCap |= newCap >> 1;                  newCap |= newCap >> 2;                  newCap |= newCap >> 4;                  newCap |= newCap >> 8;                  newCap |= newCap >> 16;                  ++newCap;              }
Magic Number,Ariadne.Collections,ThreadSafeSet<T>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: unchecked              {                  // binary round-up                  --newCap;                  newCap |= newCap >> 1;                  newCap |= newCap >> 2;                  newCap |= newCap >> 4;                  newCap |= newCap >> 8;                  newCap |= newCap >> 16;                  ++newCap;              }
Magic Number,Ariadne.Collections,ThreadSafeSet<T>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: unchecked              {                  // binary round-up                  --newCap;                  newCap |= newCap >> 1;                  newCap |= newCap >> 2;                  newCap |= newCap >> 4;                  newCap |= newCap >> 8;                  newCap |= newCap >> 16;                  ++newCap;              }
Magic Number,Ariadne.Collections,ThreadSafeSet<T>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: unchecked              {                  // binary round-up                  --newCap;                  newCap |= newCap >> 1;                  newCap |= newCap >> 2;                  newCap |= newCap >> 4;                  newCap |= newCap >> 8;                  newCap |= newCap >> 16;                  ++newCap;              }
Magic Number,Ariadne.Collections,ThreadSafeSet<T>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: int megabytes = newCap >> 18;
Magic Number,Ariadne.Collections,ThreadSafeSet<T>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: if(megabytes > 0)              {                  int resizers = tab.IncResizers();                  if(resizers > 2)                  {                      if(tab.Next != null)                          return;                      Thread.SpinWait(20);                      if(tab.Next != null)                          return;                      Thread.Sleep(Math.Max(megabytes * 5 * resizers' 200));                  }              }
Magic Number,Ariadne.Collections,ThreadSafeSet<T>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: if(megabytes > 0)              {                  int resizers = tab.IncResizers();                  if(resizers > 2)                  {                      if(tab.Next != null)                          return;                      Thread.SpinWait(20);                      if(tab.Next != null)                          return;                      Thread.Sleep(Math.Max(megabytes * 5 * resizers' 200));                  }              }
Magic Number,Ariadne.Collections,ThreadSafeSet<T>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: if(megabytes > 0)              {                  int resizers = tab.IncResizers();                  if(resizers > 2)                  {                      if(tab.Next != null)                          return;                      Thread.SpinWait(20);                      if(tab.Next != null)                          return;                      Thread.Sleep(Math.Max(megabytes * 5 * resizers' 200));                  }              }
Magic Number,Ariadne.Collections,ThreadSafeSet<T>,C:\repos\hackcraft_Ariadne\Ariadne\Collections\ThreadSafeSet.cs,Resize,The following statement contains a magic number: if(megabytes > 0)              {                  int resizers = tab.IncResizers();                  if(resizers > 2)                  {                      if(tab.Next != null)                          return;                      Thread.SpinWait(20);                      if(tab.Next != null)                          return;                      Thread.Sleep(Math.Max(megabytes * 5 * resizers' 200));                  }              }
