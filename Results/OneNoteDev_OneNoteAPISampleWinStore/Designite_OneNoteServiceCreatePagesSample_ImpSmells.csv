Implementation smell,Namespace,Class,File,Method,Description
Complex Method,OneNoteCloudCreatePagesSample.Common,RichTextColumns,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\Common\RichTextColumns.cs,MeasureOverride,Cyclomatic complexity of the method is 8
Long Parameter List,OneNoteCloudCreatePagesSample.DataModel,SampleDataItem,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\DataModel\SampleDataSource.cs,SampleDataItem,The method has 6 parameters. Parameters: uniqueId' title' imagePath' description' action' group
Long Identifier,OneNoteCloudCreatePagesSample.Common,SettingsFlyout,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\Common\SettingsFlyout.cs,,The length of the parameter MainContentTransitionsProperty is 30.
Long Statement,OneNoteCloudCreatePagesSample,CreateExamples,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\CreateExamples.cs,CreatePageWithEmbeddedWebPage,The length of the statement  "                "<p>Lorem ipsum dolor sit amet' consectetur adipiscing elit. Nullam vehicula magna quis mauris accumsan' nec imperdiet nisi tempus. Suspendisse potenti. " + " is 156.
Long Statement,OneNoteCloudCreatePagesSample,CreateExamples,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\CreateExamples.cs,CreatePageWithEmbeddedWebPage,The length of the statement  "                "Duis vel nulla sit amet turpis venenatis elementum. Cras laoreet quis nisi et sagittis. Donec euismod at tortor ut porta. Duis libero urna' viverra id " + " is 155.
Long Statement,OneNoteCloudCreatePagesSample,CreateExamples,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\CreateExamples.cs,CreatePageWithEmbeddedWebPage,The length of the statement  "                "aliquam in' ornare sed orci. Pellentesque condimentum gravida felis' sed pulvinar erat suscipit sit amet. Nulla id felis quis sem blandit dapibus. Ut " + " is 154.
Long Statement,OneNoteCloudCreatePagesSample,CreateExamples,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\CreateExamples.cs,TranslateResponse,The length of the statement  "            // Extract the correlation id.  Apps should log this if they want to collcet the data to diagnose failures with Microsoft support  " is 129.
Long Statement,OneNoteCloudCreatePagesSample,MainPage,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\MainPage.xaml.cs,AttemptRefreshToken,The length of the statement  "            //If the user is signed in and has not yet signed out' we will attempt to refresh the token if necessary before sending a create page request " is 141.
Long Statement,OneNoteCloudCreatePagesSample.Common,SuspensionManager,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\Common\SuspensionManager.cs,SaveAsync,The length of the statement  "                StorageFile file = await ApplicationData.Current.LocalFolder.CreateFileAsync(SessionStateFilename' CreationCollisionOption.ReplaceExisting); " is 140.
Long Statement,OneNoteCloudCreatePagesSample.Common,SuspensionManager,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\Common\SuspensionManager.cs,RegisterFrame,The length of the statement  "                throw new InvalidOperationException("Frames must be either be registered before accessing frame session state' or not registered at all"); " is 138.
Complex Conditional,OneNoteCloudCreatePagesSample.Common,LayoutAwarePage,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "(args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167)"  is complex.
Complex Conditional,OneNoteCloudCreatePagesSample.Common,LayoutAwarePage,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt)"  is complex.
Complex Conditional,OneNoteCloudCreatePagesSample.Common,LayoutAwarePage,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt)"  is complex.
Empty Catch Block,OneNoteCloudCreatePagesSample,App,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\App.xaml.cs,OnLaunched,The method has an empty catch block.
Empty Catch Block,OneNoteCloudCreatePagesSample,AccountFlyout,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\AccountFlyout.xaml.cs,SignInClick,The method has an empty catch block.
Empty Catch Block,OneNoteCloudCreatePagesSample,AccountFlyout,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\AccountFlyout.xaml.cs,SignOutClick,The method has an empty catch block.
Empty Catch Block,OneNoteCloudCreatePagesSample,AccountFlyout,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\AccountFlyout.xaml.cs,UpdateState,The method has an empty catch block.
Magic Number,OneNoteCloudCreatePagesSample,MainPage,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\MainPage.xaml.cs,DetermineVisualState,The following statement contains a magic number: if (viewState == ApplicationViewState.Filled ||                  viewState == ApplicationViewState.FullScreenLandscape)              {                  var windowWidth = Window.Current.Bounds.Width;                  if (windowWidth >= 1366) return "FullScreenLandscapeOrWide";                  return "FilledOrNarrow";              }
Magic Number,OneNoteCloudCreatePagesSample.Common,LayoutAwarePage,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  const CoreVirtualKeyStates downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      args.Handled = true;                      this.GoBack(this' new RoutedEventArgs());                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      args.Handled = true;                      this.GoForward(this' new RoutedEventArgs());                  }              }
Magic Number,OneNoteCloudCreatePagesSample.Common,LayoutAwarePage,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  const CoreVirtualKeyStates downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      args.Handled = true;                      this.GoBack(this' new RoutedEventArgs());                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      args.Handled = true;                      this.GoForward(this' new RoutedEventArgs());                  }              }
Magic Number,OneNoteCloudCreatePagesSample.Common,LayoutAwarePage,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  const CoreVirtualKeyStates downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      args.Handled = true;                      this.GoBack(this' new RoutedEventArgs());                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      args.Handled = true;                      this.GoForward(this' new RoutedEventArgs());                  }              }
Magic Number,OneNoteCloudCreatePagesSample.Common,LayoutAwarePage,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  const CoreVirtualKeyStates downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      args.Handled = true;                      this.GoBack(this' new RoutedEventArgs());                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      args.Handled = true;                      this.GoForward(this' new RoutedEventArgs());                  }              }
Magic Number,OneNoteCloudCreatePagesSample.DataModel,SampleDataGroup,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,OneNoteCloudCreatePagesSample.DataModel,SampleDataGroup,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,OneNoteCloudCreatePagesSample.DataModel,SampleDataGroup,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,OneNoteCloudCreatePagesSample.DataModel,SampleDataGroup,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,OneNoteCloudCreatePagesSample.DataModel,SampleDataGroup,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,OneNoteCloudCreatePagesSample.DataModel,SampleDataGroup,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,OneNoteCloudCreatePagesSample.DataModel,SampleDataGroup,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,OneNoteCloudCreatePagesSample.DataModel,SampleDataGroup,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,OneNoteCloudCreatePagesSample.DataModel,SampleDataGroup,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,OneNoteCloudCreatePagesSample.DataModel,SampleDataGroup,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,OneNoteCloudCreatePagesSample.DataModel,SampleDataGroup,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,OneNoteCloudCreatePagesSample.DataModel,SampleDataGroup,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,OneNoteCloudCreatePagesSample.DataModel,SampleDataGroup,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,OneNoteCloudCreatePagesSample.DataModel,SampleDataGroup,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Missing Default,OneNoteCloudCreatePagesSample.DataModel,SampleDataGroup,C:\repos\OneNoteDev_OneNoteAPISampleWinStore\OneNoteCloudCreatePagesSample\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following switch statement is missing a default case: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
