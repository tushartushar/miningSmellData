Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Ivis.Editor.IO,DocumentBackBuffer,C:\repos\tongko_CGIFEditor\Conceptual Graphers Interchange Format Editor\Ivis.Editor.IO\DocumentBackBuffer.cs,Get,Cyclomatic complexity of the method is 9
Magic Number,Ivis.Editor.IO,DocumentBackBuffer,C:\repos\tongko_CGIFEditor\Conceptual Graphers Interchange Format Editor\Ivis.Editor.IO\DocumentBackBuffer.cs,Get,The following statement contains a magic number: using (var accessor = _mappedFile.CreateViewAccessor (offset' length)) {  	var ofs = 0;  	while (length > 0) {  		var len = (int)Math.Min (length' MemBlockSize / 4);  		var count = accessor.ReadArray (offset' buffer' ofs' len);  		if (count < len)  			break;  		offset += count;  		ofs += count;  		length -= count;  	}  }  
Magic Number,Ivis.Editor.IO,DocumentBackBuffer,C:\repos\tongko_CGIFEditor\Conceptual Graphers Interchange Format Editor\Ivis.Editor.IO\DocumentBackBuffer.cs,Get,The following statement contains a magic number: while (length > 0) {  	var len = (int)Math.Min (length' MemBlockSize / 4);  	var count = accessor.ReadArray (offset' buffer' ofs' len);  	if (count < len)  		break;  	offset += count;  	ofs += count;  	length -= count;  }  
Magic Number,Ivis.Editor.IO,DocumentBackBuffer,C:\repos\tongko_CGIFEditor\Conceptual Graphers Interchange Format Editor\Ivis.Editor.IO\DocumentBackBuffer.cs,Set,The following statement contains a magic number: using (var accessor = _mappedFile.CreateViewAccessor (backBuffer.StartIndex' backBuffer.Length)) {  	var length = backBuffer.Length;  	var offset = backBuffer.StartIndex;  	var ofs = 0;  	while (length > 0) {  		var len = (int)Math.Min (length' MemBlockSize / 4);  		accessor.WriteArray (offset' backBuffer.Buffer' ofs' len);  		offset += len;  		ofs += len;  		length -= len;  	}  }  
Magic Number,Ivis.Editor.IO,DocumentBackBuffer,C:\repos\tongko_CGIFEditor\Conceptual Graphers Interchange Format Editor\Ivis.Editor.IO\DocumentBackBuffer.cs,Set,The following statement contains a magic number: while (length > 0) {  	var len = (int)Math.Min (length' MemBlockSize / 4);  	accessor.WriteArray (offset' backBuffer.Buffer' ofs' len);  	offset += len;  	ofs += len;  	length -= len;  }  
