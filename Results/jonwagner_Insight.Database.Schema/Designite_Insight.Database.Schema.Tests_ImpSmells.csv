Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Insight.Database.Schema.Tests,AutoProcTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\AutoProcTests.cs,AutoProcShouldGenerateNamesAutomatically,The length of the statement  "			Assert.AreEqual("CREATE PROCEDURE [dbo].[InsertBeer]\r\n(\r\n\t@ID int'\r\n\t@Name varchar(256)'\r\n\t@OriginalGravity decimal(18'2)\r\n)\r\nAS\r\n\r\nINSERT INTO [dbo].[Beer]\r\n(\r\n\t[ID]'\r\n\t[Name]'\r\n\t[OriginalGravity]\r\n)\r\nVALUES\r\n(\r\n\t@ID'\r\n\t@Name'\r\n\t@OriginalGravity\r\n)\r\n\r\nGO\r\n"' p.Sql); " is 320.
Long Statement,Insight.Database.Schema.Tests,AutoProcTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\AutoProcTests.cs,AutoProcAllowsForTemplateNames,The length of the statement  "			Assert.AreEqual("CREATE PROCEDURE [dbo].[Users_Insert]\r\n(\r\n\t@ID int\r\n)\r\nAS\r\n\r\nINSERT INTO [dbo].[Users]\r\n(\r\n\t[ID]\r\n)\r\nVALUES\r\n(\r\n\t@ID\r\n)\r\n\r\nGO\r\n"' p.Sql); " is 189.
Long Statement,Insight.Database.Schema.Tests,AutoProcTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\AutoProcTests.cs,TestSelectGeneration,The length of the statement  "			Assert.AreEqual("CREATE PROCEDURE [dbo].[SelectBeer]\r\n(\r\n\t@ID int\r\n)\r\nAS\r\nSELECT * FROM [dbo].[Beer] WHERE \r\n\t[ID]=@ID\r\n\r\nGO\r\n"' p.Sql); " is 156.
Long Statement,Insight.Database.Schema.Tests,AutoProcTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\AutoProcTests.cs,TestInsertGeneration,The length of the statement  "			Assert.AreEqual("CREATE PROCEDURE [dbo].[InsertBeer]\r\n(\r\n\t@Name varchar(256)'\r\n\t@OriginalGravity decimal(18'2)\r\n)\r\nAS\r\n\r\nDECLARE @T TABLE(\r\n[ID] int)\r\n\r\nINSERT INTO [dbo].[Beer]\r\n(\r\n\t[Name]'\r\n\t[OriginalGravity]\r\n)\r\nOUTPUT\r\n\tInserted.[ID]\r\nINTO @T\r\nVALUES\r\n(\r\n\t@Name'\r\n\t@OriginalGravity\r\n)\r\nSELECT * FROM @T\r\n\r\nGO\r\n"' p.Sql); " is 383.
Long Statement,Insight.Database.Schema.Tests,AutoProcTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\AutoProcTests.cs,TestUpdateGeneration,The length of the statement  "			Assert.AreEqual("CREATE PROCEDURE [dbo].[UpdateBeer]\r\n(\r\n\t@ID int'\r\n\t@Name varchar(256)'\r\n\t@OriginalGravity decimal(18'2)\r\n)\r\nAS\r\nDECLARE @T TABLE(\r\n[ID] int)\r\n\r\nUPDATE [dbo].[Beer] SET\r\n\t[Name]=@Name'\r\n\t[OriginalGravity]=@OriginalGravity\r\nOUTPUT\r\n\tInserted.[ID]\r\nINTO @T\r\nWHERE\r\n\t[ID]=@ID\r\nSELECT * FROM @T\r\n\r\nGO\r\n"' p.Sql); " is 374.
Long Statement,Insight.Database.Schema.Tests,AutoProcTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\AutoProcTests.cs,TestDeleteGeneration,The length of the statement  "			Assert.AreEqual("CREATE PROCEDURE [dbo].[DeleteBeer]\r\n(\r\n\t@ID int\r\n)\r\nAS\r\nDELETE FROM [dbo].[Beer] WHERE\r\n\t[ID]=@ID\r\n\r\nGO\r\n"' p.Sql); " is 153.
Long Statement,Insight.Database.Schema.Tests,AutoProcTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\AutoProcTests.cs,InsertWithNoIdentitiesShouldOmitOutputStatement,The length of the statement  "			Assert.AreEqual("CREATE PROCEDURE [dbo].[InsertBeer]\r\n(\r\n\t@ID int'\r\n\t@Name varchar(256)'\r\n\t@OriginalGravity decimal(18'2)\r\n)\r\nAS\r\n\r\nINSERT INTO [dbo].[Beer]\r\n(\r\n\t[ID]'\r\n\t[Name]'\r\n\t[OriginalGravity]\r\n)\r\nVALUES\r\n(\r\n\t@ID'\r\n\t@Name'\r\n\t@OriginalGravity\r\n)\r\n\r\nGO\r\n"' p.Sql); " is 320.
Long Statement,Insight.Database.Schema.Tests,AutoProcTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\AutoProcTests.cs,UpdateWithOnlyKeysShouldRaiseError,The length of the statement  "			Assert.AreEqual("CREATE PROCEDURE [dbo].[UpdateBeer]\r\n(\r\n\t@ID int'\r\n\t@Name varchar(256)\r\n)\r\nAS\r\nRAISERROR (N'There are no UPDATEable fields on [dbo].[Beer]'' 18' 0)\r\n\r\nGO\r\n"' p.Sql); " is 202.
Long Statement,Insight.Database.Schema.Tests,AutoProcTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\AutoProcTests.cs,TestTableTypeGeneration,The length of the statement  "			Assert.AreEqual("CREATE TYPE [dbo].[BeerTable]\r\nAS TABLE\r\n(\r\n\t[ID] int NULL'\r\n\t[Name] varchar(256) NOT NULL'\r\n\t[OriginalGravity] decimal(18'2) NOT NULL\r\n'[_insight_rownumber] [int] IDENTITY\r\n)\r\n\r\nGO\r\n"' p.Sql); " is 233.
Long Statement,Insight.Database.Schema.Tests,AutoProcTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\AutoProcTests.cs,TestSingularSqlGeneration,The length of the statement  "			Assert.AreEqual("CREATE PROCEDURE [dbo].[DeletePerson]\r\n(\r\n\t@ID int\r\n)\r\nAS\r\nDELETE FROM [dbo].[People] WHERE\r\n\t[ID]=@ID\r\n\r\nGO\r\n"' p.Sql); " is 157.
Long Statement,Insight.Database.Schema.Tests,AutoProcTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\AutoProcTests.cs,TestSingularOverride,The length of the statement  "			Assert.AreEqual("CREATE PROCEDURE [dbo].[DeleteFoo]\r\n(\r\n\t@ID int\r\n)\r\nAS\r\nDELETE FROM [dbo].[People] WHERE\r\n\t[ID]=@ID\r\n\r\nGO\r\n"' p.Sql); " is 154.
Long Statement,Insight.Database.Schema.Tests,SchemaRegistryTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\SchemaRegistryTests.cs,SchemaRegistryIsCreatedAutomatically,The length of the statement  "				Assert.AreEqual(1' connection.ExecuteScalarSql<int>("SELECT COUNT(*) FROM sys.objects WHERE name = @Name"' new Dictionary<string' object> () { { "Name"' SchemaRegistry.SchemaRegistryTableName } })); " is 198.
Long Statement,Insight.Database.Schema.Tests,SchemaRegistryTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\SchemaRegistryTests.cs,SchemaRegistryShouldScriptCreateTableAndSelect,The length of the statement  "				Assert.IsTrue(connection.ScriptLog.ToString().Contains(String.Format("CREATE TABLE [{0}]"' SchemaRegistry.SchemaRegistryTableName))); " is 133.
Long Statement,Insight.Database.Schema.Tests,SchemaRegistryTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\SchemaRegistryTests.cs,SchemaRegistryShouldScriptCreateTableAndSelect,The length of the statement  "				Assert.IsTrue(connection.ExecutionLog.ToString().Contains(String.Format("CREATE TABLE [{0}]"' SchemaRegistry.SchemaRegistryTableName))); " is 136.
Long Statement,Insight.Database.Schema.Tests,SchemaRegistryTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\SchemaRegistryTests.cs,SchemaRegistryShouldScriptCreateTableAndSelect,The length of the statement  "				Assert.IsFalse(connection.ScriptLog.ToString().Contains(String.Format("SELECT * FROM [{0}]"' SchemaRegistry.SchemaRegistryTableName))); " is 135.
Long Statement,Insight.Database.Schema.Tests,SchemaRegistryTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\SchemaRegistryTests.cs,SchemaRegistryShouldScriptCreateTableAndSelect,The length of the statement  "				Assert.IsTrue(connection.ExecutionLog.ToString().Contains(String.Format("SELECT * FROM [{0}]"' SchemaRegistry.SchemaRegistryTableName))); " is 137.
Long Statement,Insight.Database.Schema.Tests,SchemaRegistryTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\SchemaRegistryTests.cs,SchemaRegistryShouldNotExecuteSchemaUpdateInRecordOnlyMode,The length of the statement  "				Assert.IsTrue(connection.ScriptLog.ToString().Contains(String.Format("DELETE FROM [{0}]"' SchemaRegistry.SchemaRegistryTableName))); " is 132.
Long Statement,Insight.Database.Schema.Tests,SchemaRegistryTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\SchemaRegistryTests.cs,SchemaRegistryShouldNotExecuteSchemaUpdateInRecordOnlyMode,The length of the statement  "				Assert.IsTrue(connection.ScriptLog.ToString().Contains(String.Format("INSERT INTO [{0}]"' SchemaRegistry.SchemaRegistryTableName))); " is 132.
Long Statement,Insight.Database.Schema.Tests,SchemaRegistryTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\SchemaRegistryTests.cs,SchemaRegistryShouldNotExecuteSchemaUpdateInRecordOnlyMode,The length of the statement  "				Assert.IsFalse(connection.ExecutionLog.ToString().Contains(String.Format("DELETE FROM [{0}]"' SchemaRegistry.SchemaRegistryTableName))); " is 136.
Long Statement,Insight.Database.Schema.Tests,SchemaRegistryTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\SchemaRegistryTests.cs,SchemaRegistryShouldNotExecuteSchemaUpdateInRecordOnlyMode,The length of the statement  "				Assert.IsFalse(connection.ExecutionLog.ToString().Contains(String.Format("INSERT INTO [{0}]"' SchemaRegistry.SchemaRegistryTableName))); " is 136.
Long Statement,Insight.Database.Schema.Tests,DatabaseTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\DatabaseTests.cs,TestCreateDatabaseWithPath,The length of the statement  "				Assert.True(SchemaInstaller.CreateDatabase(connectionString' ConfigurationManager.AppSettings["filepath"] ?? Environment.GetEnvironmentVariable("TEMP"))); " is 154.
Long Statement,Insight.Database.Schema.Tests,InstallerTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\InstallerTests.cs,TestModifyingDefaults,The length of the statement  "				Assert.AreEqual(initialSchema.Any(s => s.Contains("DEFAULT ('Foo')"))' DefaultExists(connection' "Beer"' "Description"' "('Foo')")); " is 132.
Long Statement,Insight.Database.Schema.Tests,InstallerTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\InstallerTests.cs,TestModifyingDefaults,The length of the statement  "				Assert.AreEqual(initialSchema.Any(s => s.Contains("DEFAULT 'Moo'"))' DefaultExists(connection' "Beer"' "Description"' "('Moo')")); " is 130.
Long Statement,Insight.Database.Schema.Tests,InstallerTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\InstallerTests.cs,TestModifyingDefaults,The length of the statement  "				Assert.AreEqual(finalSchema.Any(s => s.Contains("DEFAULT ('Foo')"))' DefaultExists(connection' "Beer"' "Description"' "('Foo')")); " is 130.
Long Statement,Insight.Database.Schema.Tests,InstallerTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\InstallerTests.cs,TestModifyingDefaults,The length of the statement  "				Assert.AreEqual(finalSchema.Any(s => s.Contains("DEFAULT 'Moo'"))' DefaultExists(connection' "Beer"' "Description"' "('Moo')")); " is 128.
Long Statement,Insight.Database.Schema.Tests,InstallerTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\InstallerTests.cs,TestModifyingDefaultsWithData,The length of the statement  "				InstallAndVerify(connection' new[] { "CREATE TABLE Beer ([ID] [int] NULL DEFAULT (0)' Style [varchar](128) NOT NULL DEFAULT ('IPA'))" }); " is 137.
Long Statement,Insight.Database.Schema.Tests,InstallerTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\InstallerTests.cs,TestInstallingAutoProcTypes,The length of the statement  "				InstallAndVerify(connection' new [] { sql' "AUTOPROC All Insight_TypeTest"' "ALTER TABLE Insight_TypeTest ADD CONSTRAINT PK_Insight_TableTest PRIMARY KEY ([ID])" }); " is 165.
Long Statement,Insight.Database.Schema.Tests,InstallerTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\InstallerTests.cs,TestColumnRename,The length of the statement  "			string after = "CREATE TABLE Insight_RenameTest ([ID] int NOT NULL' [Renamed] [int] NOT NULL) -- [Renamed] WAS [Column]"; " is 121.
Long Statement,Insight.Database.Schema.Tests,InstallerTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\InstallerTests.cs,TestMultiplePermissions,The length of the statement  "				Assert.AreEqual(0' connection.QuerySql("select * from sys.database_permissions p where p.major_id = object_id('foo')"' null).Count); " is 132.
Long Statement,Insight.Database.Schema.Tests,SqlParserTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\SqlParserTests.cs,TestSqlNameParsing,The length of the statement  "			Regex regex = new Regex(SqlParser.SqlNameExpression' RegexOptions.IgnoreCase | RegexOptions.Singleline | RegexOptions.ExplicitCapture | RegexOptions.Compiled); " is 159.
Magic Number,Insight.Database.Schema.Tests,AutoProcExecutingTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\AutoProcTests.cs,UpsertShouldReturnRowsInOrder,The following statement contains a magic number: TestWithDrop(connectionString' () =>  			{  				using (var c = new SqlConnection(connectionString))  				{  					if (!SchemaInstaller.DatabaseExists(connectionString))  						SchemaInstaller.CreateDatabase(connectionString);  					c.Open();    					SchemaInstaller installer = new SchemaInstaller(c);  					SchemaObjectCollection schema = new SchemaObjectCollection();  					schema.Add("CREATE TABLE Beer ([id] [int] NOT NULL IDENTITY' [name] varchar(100))");  					schema.Add("ALTER TABLE Beer ADD CONSTRAINT PK_Beer PRIMARY KEY ([ID])");  					schema.Add("-- AUTOPROC All Beer");  					installer.Install("test"' schema);    					using (var reader = c.GetReaderSql(@"  						truncate table Beer    						declare @b BeerTable  						insert into @b (id' name) values (null' 'one')  						insert into @b (id' name) values (null' 'two')    						exec upsertBeers @b    						delete from @b  						insert into @b (id' name) values (1' 'one')  						insert into @b (id' name) values (2' 'two')  						insert into @b (id' name) values (null' 'three')    						exec upsertBeers @b  					"))  					{  						reader.NextResult();  						reader.Read(); Assert.AreEqual(1' reader.GetInt32(0));  						reader.Read(); Assert.AreEqual(2' reader.GetInt32(0));  						reader.Read(); Assert.AreEqual(3' reader.GetInt32(0));  					}  				}  			});
Magic Number,Insight.Database.Schema.Tests,AutoProcExecutingTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\AutoProcTests.cs,UpsertShouldReturnRowsInOrder,The following statement contains a magic number: TestWithDrop(connectionString' () =>  			{  				using (var c = new SqlConnection(connectionString))  				{  					if (!SchemaInstaller.DatabaseExists(connectionString))  						SchemaInstaller.CreateDatabase(connectionString);  					c.Open();    					SchemaInstaller installer = new SchemaInstaller(c);  					SchemaObjectCollection schema = new SchemaObjectCollection();  					schema.Add("CREATE TABLE Beer ([id] [int] NOT NULL IDENTITY' [name] varchar(100))");  					schema.Add("ALTER TABLE Beer ADD CONSTRAINT PK_Beer PRIMARY KEY ([ID])");  					schema.Add("-- AUTOPROC All Beer");  					installer.Install("test"' schema);    					using (var reader = c.GetReaderSql(@"  						truncate table Beer    						declare @b BeerTable  						insert into @b (id' name) values (null' 'one')  						insert into @b (id' name) values (null' 'two')    						exec upsertBeers @b    						delete from @b  						insert into @b (id' name) values (1' 'one')  						insert into @b (id' name) values (2' 'two')  						insert into @b (id' name) values (null' 'three')    						exec upsertBeers @b  					"))  					{  						reader.NextResult();  						reader.Read(); Assert.AreEqual(1' reader.GetInt32(0));  						reader.Read(); Assert.AreEqual(2' reader.GetInt32(0));  						reader.Read(); Assert.AreEqual(3' reader.GetInt32(0));  					}  				}  			});
Magic Number,Insight.Database.Schema.Tests,SchemaRegistryTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\SchemaRegistryTests.cs,SchemaRegistryCanAddNewRecords,The following statement contains a magic number: TestWithRollback(connectionString' connection =>  			{  				// create the registry  				SchemaRegistry registry = new SchemaRegistry(connection' TestSchemaGroup);    				// make sure the entries are empty  				Assert.AreEqual(0' registry.Entries.Count);    				// add an entry and save it to the database  				registry.Entries.Add(new SchemaRegistryEntry()  				{  					SchemaGroup = "test"'  					ObjectName = "Beer"'  					Type = SchemaObjectType.Table'  					Signature = "1234"'  					OriginalOrder = 1  				});  				registry.Commit();    				// create another registry and make sure it loads the entries  				registry = new SchemaRegistry(connection' TestSchemaGroup);  				Assert.AreEqual(1' registry.Entries.Count);    				// add an second entry and save it to the database  				registry.Entries.Add(new SchemaRegistryEntry()  				{  					SchemaGroup = "test"'  					ObjectName = "Beer2"'  					Type = SchemaObjectType.Table'  					Signature = "1234"'  					OriginalOrder = 2  				});  				registry.Commit();    				// create another registry and make sure it loads the entries  				registry = new SchemaRegistry(connection' TestSchemaGroup);  				Assert.AreEqual(2' registry.Entries.Count);  			});
Magic Number,Insight.Database.Schema.Tests,SchemaRegistryTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\SchemaRegistryTests.cs,SchemaRegistryCanAddNewRecords,The following statement contains a magic number: TestWithRollback(connectionString' connection =>  			{  				// create the registry  				SchemaRegistry registry = new SchemaRegistry(connection' TestSchemaGroup);    				// make sure the entries are empty  				Assert.AreEqual(0' registry.Entries.Count);    				// add an entry and save it to the database  				registry.Entries.Add(new SchemaRegistryEntry()  				{  					SchemaGroup = "test"'  					ObjectName = "Beer"'  					Type = SchemaObjectType.Table'  					Signature = "1234"'  					OriginalOrder = 1  				});  				registry.Commit();    				// create another registry and make sure it loads the entries  				registry = new SchemaRegistry(connection' TestSchemaGroup);  				Assert.AreEqual(1' registry.Entries.Count);    				// add an second entry and save it to the database  				registry.Entries.Add(new SchemaRegistryEntry()  				{  					SchemaGroup = "test"'  					ObjectName = "Beer2"'  					Type = SchemaObjectType.Table'  					Signature = "1234"'  					OriginalOrder = 2  				});  				registry.Commit();    				// create another registry and make sure it loads the entries  				registry = new SchemaRegistry(connection' TestSchemaGroup);  				Assert.AreEqual(2' registry.Entries.Count);  			});
Magic Number,Insight.Database.Schema.Tests,SqlParserTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\SqlParserTests.cs,TestTrailingWhiteSpaceAndComments,The following statement contains a magic number: AssertScriptCount(2' "CREATE PROC Foo AS SELECT 1 \n GO \n --comment \n CREATE PROC Goo AS SELECT 1 \n GO");
Magic Number,Insight.Database.Schema.Tests,SqlParserTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\SqlParserTests.cs,TestTrailingWhiteSpaceAndComments,The following statement contains a magic number: AssertScriptCount(2' "-- AUTOPROC Beer All \n GO \n -- AUTOPROC Glasses All");
Magic Number,Insight.Database.Schema.Tests,SqlParserTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\SqlParserTests.cs,TestTrailingWhiteSpaceAndComments,The following statement contains a magic number: AssertScriptCount(2' "CREATE PROC Foo AS SELECT 1 \n GO \n -- AUTOPROC Beer All");
Magic Number,Insight.Database.Schema.Tests,SqlParserTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\SqlParserTests.cs,TestTrailingWhiteSpaceAndComments,The following statement contains a magic number: AssertScriptCount(2' "CREATE PROC Foo AS SELECT 1 \n GO \n -- AUTOPROC Beer All");
Magic Number,Insight.Database.Schema.Tests,UseAutoProcTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\UseAutoProcTests.cs,InsertManySetsIDsProperly,The following statement contains a magic number: Test(c =>  			{  				var list = new List<Beer>();  				for (int i = 0; i < 20000; i++)  					list.Add(new Beer() { Name = i.ToString() });    				c.InsertList("InsertBeers"' list);    				for (int i = 0; i < list.Count; i++)  				{  					Assert.AreEqual(i.ToString()' c.ExecuteScalarSql<string>("SELECT Name FROM Beer WHERE ID=@id"' list[i]));  				}  			});
Magic Number,Insight.Database.Schema.Tests,UseAutoProcTests,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema.Tests\UseAutoProcTests.cs,UpsertManySetsIDsProperly,The following statement contains a magic number: Test(c =>  			{  				var list = new List<Beer>();  				for (int i = 0; i < 20000; i++)  					list.Add(new Beer() { Name = i.ToString() });    				c.InsertList("UpsertBeers"' list);    				for (int i = 0; i < list.Count; i++)  				{  					Assert.AreEqual(i.ToString()' c.ExecuteScalarSql<string>("SELECT Name FROM Beer WHERE ID=@id"' list[i]));  				}  			});
