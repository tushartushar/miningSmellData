Implementation smell,Namespace,Class,File,Method,Description
Long Method,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptColumnsAndConstraints,The method has 140 lines of code.
Long Method,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptIndexes,The method has 120 lines of code.
Complex Method,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,AutoProc,Cyclomatic complexity of the method is 9
Complex Method,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,GenerateSql,Cyclomatic complexity of the method is 15
Complex Method,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,GetProcs,Cyclomatic complexity of the method is 14
Complex Method,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,GenerateUpsertSql,Cyclomatic complexity of the method is 10
Complex Method,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,GenerateUpsertManySql,Cyclomatic complexity of the method is 9
Complex Method,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptUpdate,Cyclomatic complexity of the method is 11
Complex Method,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptColumnsAndConstraints,Cyclomatic complexity of the method is 14
Complex Method,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptIndexes,Cyclomatic complexity of the method is 10
Complex Method,Insight.Database.Schema.Implementation,Permission,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\Implementation\Permission.cs,Exists,Cyclomatic complexity of the method is 8
Complex Method,Insight.Database.Schema.Implementation,SchemaImpl,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\Implementation\SchemaImpl.cs,GetImplementation,Cyclomatic complexity of the method is 32
Long Statement,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,GenerateSql,The length of the statement  "				throw new InvalidOperationException(String.Format(CultureInfo.InvariantCulture' "Cannot generate AutoProcs for a table with no primary keys ({0})."' _tableName)); " is 162.
Long Statement,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,GetProcs,The length of the statement  "			if (_type.HasFlag(ProcTypes.IdTable)) yield return new Tuple<ProcTypes' string>(ProcTypes.IdTable' MakeTableName("IdTable")); " is 125.
Long Statement,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,GetProcs,The length of the statement  "			if (_type.HasFlag(ProcTypes.Select)) yield return new Tuple<ProcTypes' string>(ProcTypes.Select' MakeProcName(ProcTypes.Select.ToString()' false)); " is 147.
Long Statement,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,GetProcs,The length of the statement  "			if (_type.HasFlag(ProcTypes.Insert)) yield return new Tuple<ProcTypes' string>(ProcTypes.Insert' MakeProcName(ProcTypes.Insert.ToString()' false)); " is 147.
Long Statement,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,GetProcs,The length of the statement  "			if (_type.HasFlag(ProcTypes.Update)) yield return new Tuple<ProcTypes' string>(ProcTypes.Update' MakeProcName(ProcTypes.Update.ToString()' false)); " is 147.
Long Statement,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,GetProcs,The length of the statement  "			if (_type.HasFlag(ProcTypes.Upsert)) yield return new Tuple<ProcTypes' string>(ProcTypes.Upsert' MakeProcName(ProcTypes.Upsert.ToString()' false)); " is 147.
Long Statement,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,GetProcs,The length of the statement  "			if (_type.HasFlag(ProcTypes.Delete)) yield return new Tuple<ProcTypes' string>(ProcTypes.Delete' MakeProcName(ProcTypes.Delete.ToString()' false)); " is 147.
Long Statement,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,GetProcs,The length of the statement  "			if (_type.HasFlag(ProcTypes.SelectMany)) yield return new Tuple<ProcTypes' string>(ProcTypes.SelectMany' MakeProcName(ProcTypes.Select.ToString()' true)); " is 154.
Long Statement,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,GetProcs,The length of the statement  "			if (_type.HasFlag(ProcTypes.InsertMany)) yield return new Tuple<ProcTypes' string>(ProcTypes.InsertMany' MakeProcName(ProcTypes.Insert.ToString()' true)); " is 154.
Long Statement,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,GetProcs,The length of the statement  "			if (_type.HasFlag(ProcTypes.UpdateMany)) yield return new Tuple<ProcTypes' string>(ProcTypes.UpdateMany' MakeProcName(ProcTypes.Update.ToString()' true)); " is 154.
Long Statement,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,GetProcs,The length of the statement  "			if (_type.HasFlag(ProcTypes.UpsertMany)) yield return new Tuple<ProcTypes' string>(ProcTypes.UpsertMany' MakeProcName(ProcTypes.Upsert.ToString()' true)); " is 154.
Long Statement,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,GetProcs,The length of the statement  "			if (_type.HasFlag(ProcTypes.DeleteMany)) yield return new Tuple<ProcTypes' string>(ProcTypes.DeleteMany' MakeProcName(ProcTypes.Delete.ToString()' true)); " is 154.
Long Statement,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,GetProcs,The length of the statement  "			if (_type.HasFlag(ProcTypes.Find)) yield return new Tuple<ProcTypes' string>(ProcTypes.Find' MakeProcName(ProcTypes.Find.ToString()' true)); " is 140.
Long Statement,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,GenerateOutputTable,The length of the statement  "				(String.Compare(c.SqlType' "rowversion"' StringComparison.OrdinalIgnoreCase) == 0 || String.Compare(c.SqlType' "timestamp"' StringComparison.OrdinalIgnoreCase) == 0) ? "binary(8)" : c.SqlType)))); " is 196.
Long Statement,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,GenerateUpdateSql,The length of the statement  "					sb.AppendLine(String.Format(CultureInfo.InvariantCulture' "AND ({0}={1} OR {1} IS NULL)"' timestamp.Name' timestamp.ParameterName)); " is 132.
Long Statement,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,GenerateUpsertSql,The length of the statement  "						sb.AppendLine(String.Format(CultureInfo.InvariantCulture' "WHEN MATCHED AND (t.{0} = s.{0} OR s.{0} IS NULL) THEN UPDATE SET"' timestamp.Name)); " is 144.
Long Statement,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,GenerateSelectManySql,The length of the statement  "			sb.AppendFormat("CREATE PROCEDURE {0} (@{1} {2} READONLY)"' MakeProcName("Select"' plural: true)' parameterName' MakeTableName("IdTable")); " is 139.
Long Statement,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,GenerateInsertManySql,The length of the statement  "			sb.AppendFormat("CREATE PROCEDURE {0} (@{1} {2} READONLY)"' MakeProcName("Insert"' plural: true)' parameterName' MakeTableName("Table")); " is 137.
Long Statement,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,GenerateUpdateManySql,The length of the statement  "			sb.AppendFormat("CREATE PROCEDURE {0} (@{1} {2} READONLY)"' MakeProcName("Update"' plural: true)' parameterName' MakeTableName("Table")); " is 137.
Long Statement,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,GenerateUpdateManySql,The length of the statement  "				sb.AppendLine(String.Format(CultureInfo.InvariantCulture' "WHEN MATCHED AND (t.{0} = s.{0} OR s.{0} IS NULL) THEN UPDATE SET"' timestamp.Name)); " is 144.
Long Statement,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,GenerateUpsertManySql,The length of the statement  "			sb.AppendFormat("CREATE PROCEDURE {0} (@{1} {2} READONLY)"' MakeProcName("Upsert"' plural: true)' parameterName' MakeTableName("Table")); " is 137.
Long Statement,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,GenerateUpsertManySql,The length of the statement  "					sb.AppendLine(String.Format(CultureInfo.InvariantCulture' "WHEN MATCHED AND (t.{0} = s.{0} OR s.{0} IS NULL) THEN UPDATE SET"' timestamp.Name)); " is 144.
Long Statement,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,GenerateDeleteManySql,The length of the statement  "			sb.AppendFormat("CREATE PROCEDURE {0} (@{1} {2} READONLY)"' MakeProcName("Delete"' plural: true)' parameterName' MakeTableName("IdTable")); " is 139.
Long Statement,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,GenerateFindSql,The length of the statement  "			sb.AppendLine(Join(columns' ""' "SELECT @sql = @sql + CASE\r\n\tWHEN {1}Operator IN ('='' '<'' '>'' '<='' '>='' '<>'' 'LIKE') AND {1} IS NOT NULL THEN ' AND {0} ' + {1}Operator + ' {1}'" + " is 188.
Long Statement,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,GenerateFindSql,The length of the statement  "		    sb.AppendFormat("IF @TotalRows IS NOT NULL SET @sql = @sql + '' {1}=count(*) over() INTO {0}'"' tempTableName' countColumnName); " is 128.
Long Statement,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,GenerateFindSql,The length of the statement  "			sb.AppendFormat("IF @TotalRows IS NOT NULL SET @sql = @sql + ' SELECT * FROM {0} SET NOCOUNT ON SELECT TOP 1 @TotalRows={1} FROM {0} '"' tempTableName' countColumnName); " is 169.
Long Statement,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,MakeDropStatment,The length of the statement  "			return String.Format(CultureInfo.InvariantCulture' "IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{0}') AND type in (N'P'' N'PC')) DROP PROCEDURE {0}"' MakeProcName(type' plural)); " is 201.
Long Statement,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,MakeTableDropStatment,The length of the statement  "				IF EXISTS (SELECT * FROM sys.types st JOIN sys.schemas ss ON st.schema_id = ss.schema_id WHERE ss.name = N'{1}' AND st.name = N'{2}') " is 133.
Long Statement,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,Join,The length of the statement  "			return String.Join(divider + Environment.NewLine' columns.Select(col => String.Format(CultureInfo.InvariantCulture' "\t" + template'  " is 132.
Long Statement,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,VerifyOptimisticTimestamp,The length of the statement  "				throw new SchemaException(String.Format(CultureInfo.InvariantCulture' "Cannot find a timestamp column on Table {0} for concurrency checking"' _tableName)); " is 155.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,DatabaseExists,The length of the statement  "			using (var command = new SqlCommand("SELECT COUNT (*) FROM master.sys.databases WHERE name = @DatabaseName"' connection)) " is 121.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,CreateDatabase,The length of the statement  "				string createTempalte = string.IsNullOrWhiteSpace(folderPath) ? "CREATE DATABASE [{0}]" : "CREATE DATABASE [{0}] on (NAME=[{0}]' FILENAME='{1}\\{0}.mdf')"; " is 155.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,CreateDatabase,The length of the statement  "				using (var command = new SqlCommand(String.Format(CultureInfo.InvariantCulture' createTempalte' databaseName' folderPath)' connection)) " is 135.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,DropDatabase,The length of the statement  "					using (var command = new SqlCommand(String.Format(CultureInfo.InvariantCulture' "ALTER DATABASE [{0}] SET SINGLE_USER WITH ROLLBACK IMMEDIATE"' databaseName)' connection)) " is 171.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,DropDatabase,The length of the statement  "				using (var dropCommand = new SqlCommand(String.Format(CultureInfo.InvariantCulture' "DROP DATABASE [{0}]"' databaseName)' connection)) " is 134.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptChanges,The length of the statement  "			// WARNING: due to the way we script autoprocs (and maybe others)' this has to modify the database' then roll back the changes " is 126.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptChanges,The length of the statement  "			//	so you might not want to try this on a live production database. Go get a copy of your database' then do the scripting on a staging environment. " is 147.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptChanges,The length of the statement  "			using (TransactionScope transaction = new TransactionScope(TransactionScopeOption.Required' new TimeSpan(1' 0' 0' 0' 0))) " is 121.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,Install,The length of the statement  "			context.IsAzure = _connection.ExecuteScalarSql<bool>("SELECT CONVERT(bit' CASE WHEN SERVERPROPERTY('edition') = 'SQL Azure' THEN 1 ELSE 0 END)"' null); " is 151.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,Install,The length of the statement  "			// NOTE: we can't use System.Transactions.TransactionScope here' because certain operations cause SQL server to commit internal data structures " is 143.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,Install,The length of the statement  "					.Where(e => !context.SchemaObjects.Any(o => String.Compare(e.ObjectName' o.Name' StringComparison.OrdinalIgnoreCase) == 0)) " is 123.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,Install,The length of the statement  "				context.AddObjects = context.SchemaObjects.Where(o => !context.SchemaRegistry.Contains(o) && !o.Exists(_connection)).ToList(); " is 126.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,Install,The length of the statement  "							Console.WriteLine("WARNING: {0} {1} already exists in the database and cannot be modified. Assuming that it has not changed."' change.SchemaObjectType' change.Name); " is 165.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,Diff,The length of the statement  "			if (registry.Entries.Any(e => !schema.Any(o => String.Compare(e.ObjectName' o.Name' StringComparison.OrdinalIgnoreCase) == 0))) " is 127.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptUpdate,The length of the statement  "				var originalObject = context.SchemaObjects.Find(o => schemaObject.SchemaObjectType == o.SchemaObjectType && String.Compare(schemaObject.Name' o.Name' StringComparison.OrdinalIgnoreCase) == 0); " is 192.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptTableUpdate,The length of the statement  "				tempTable = constraintRegex.Replace(tempTable' match => "CONSTRAINT " + SqlParser.FormatSqlName(InsightTemp + SqlParser.UnformatSqlName(match.Groups[1].Value))); " is 161.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptTableUpdate,The length of the statement  "				var oldDataSpace = _connection.ExecuteScalarSql<int>("SELECT data_space_id FROM sys.indexes i WHERE i.object_id = OBJECT_ID(@Name) AND type <= 1"' new Dictionary<string' object> { { "Name"' oldTableName } }); " is 208.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptTableUpdate,The length of the statement  "				var newDataSpace = _connection.ExecuteScalarSql<int>("SELECT data_space_id FROM sys.indexes i WHERE i.object_id = OBJECT_ID(@Name) AND type <= 1"' new Dictionary<string' object> { { "Name"' newTableName } }); " is 208.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptTableUpdate,The length of the statement  "					throw new SchemaException(String.Format(CultureInfo.InvariantCulture' "Cannot move table {0} to another filegroup or partition"' oldTableName)); " is 144.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptColumnsAndConstraints,The length of the statement  "			Func<dynamic' dynamic' bool> compareColumns = (dynamic c1' dynamic c2) => (String.Compare(c1.Name' c2.Name' StringComparison.OrdinalIgnoreCase) == 0); " is 150.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptColumnsAndConstraints,The length of the statement  "				((String.Compare(c1.DefaultName' c2.DefaultName' StringComparison.OrdinalIgnoreCase) == 0) || (c1.DefaultIsSystemNamed == true && c2.DefaultIsSystemNamed == true)) && " is 166.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptColumnsAndConstraints,The length of the statement  "			foreach (dynamic oldColumn in oldColumns.Where(c => context.DropObjects.Any(d => String.Compare(d.ObjectName' getConstraintName(c)' StringComparison.OrdinalIgnoreCase) == 0))) " is 175.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptColumnsAndConstraints,The length of the statement  "			var renames = Regex.Matches(schemaObject.Sql' String.Format("(?<newname>{0}) WAS (?<oldname>{0})"' SqlParser.SqlNameExpression)); " is 129.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptColumnsAndConstraints,The length of the statement  "					context.DropObjects.Add(new SchemaRegistryEntry() { Type = SchemaObjectType.Default' ObjectName = SqlParser.FormatSqlName(oldTableName' oldColumn.Name) }); " is 155.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptColumnsAndConstraints,The length of the statement  "				sb.AppendLine(String.Join("'"' missingColumns.Select((dynamic o) => String.Format(" COLUMN {0}"' SqlParser.FormatSqlName(o.Name))))); " is 133.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptColumnsAndConstraints,The length of the statement  "						sb.AppendFormat("ALTER TABLE {0} DROP CONSTRAINT {1}\nGO\n"' oldTableName' SqlParser.FormatSqlName(oldColumn.DefaultName)); " is 123.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,GetColumnsForTable,The length of the statement  "				SELECT Name=c.name' ObjectID=c.object_id' ColumnID=c.column_id' TypeName = t.name' MaxLength=c.max_length' Precision=c.precision' Scale=c.scale' IsNullable=c.is_nullable' IsIdentity=c.is_identity' CollationName=c.Collation_Name'IdentitySeed=i.seed_value' IdentityIncrement=i.increment_value' Definition=cc.definition' " is 317.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptPermissions,The length of the statement  "				permissions = _connection.QuerySql(@"SELECT UserName=u.name' Permission=p.permission_name' ClassType=p.class_desc' ObjectName=ISNULL(o.name' t.name) " is 148.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptPermissions,The length of the statement  "				foreach (var proc in new AutoProc(schemaObject.Name' new SqlColumnDefinitionProvider(_connection)' context.SchemaObjects).GetProcs()) " is 133.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptPermissions,The length of the statement  "				permissions = _connection.QuerySql(@"SELECT UserName=u.name' Permission=p.permission_name' ClassType=p.class_desc' ObjectName=QUOTENAME(t.name) " is 143.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptPermissions,The length of the statement  "				context.AddObjects.Add(new SchemaObject(String.Format("GRANT {0} ON {1}{2} TO {3} -- DEPENDENCY"' permission.Permission' permission.ClassType == "TYPE" ? "TYPE::" : ""' SqlParser.FormatSqlName(permission.ObjectName)' SqlParser.FormatSqlName(permission.UserName)))); " is 265.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptStandardDependencies,The length of the statement  "						dropObject = new SchemaObject(_connection.ExecuteScalarSql<string>("SELECT definition FROM sys.sql_modules WHERE object_id = OBJECT_ID(@Name)"' new Dictionary<string' object>() { { "Name"' dependencyName } })); " is 210.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptStandardDependencies,The length of the statement  "						throw new InvalidOperationException(String.Format(CultureInfo.InvariantCulture' "Cannot generate dependencies for object {0}."' dependencyName)); " is 145.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptForeignKeys,The length of the statement  "				sb.AppendFormat(") ON DELETE {0} ON UPDATE {1}"' foreignKey.DeleteAction.Replace("_"' " ")' foreignKey.UpdateAction.Replace("_"' " ")); " is 135.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptIndexes,The length of the statement  "			// NOTE: order by type: do the clustered indexes first because they also drop nonclustered indexes if the object is a view (not a table) " is 136.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptIndexes,The length of the statement  "				Type=i.type_desc' IsUnique=i.is_unique' IsConstraint=CONVERT(bit' CASE WHEN k.object_id IS NOT NULL THEN 1 ELSE 0 END)' IsPrimaryKey=CONVERT(bit' CASE WHEN k.type_desc = 'PRIMARY_KEY_CONSTRAINT' THEN 1 ELSE 0 END)' DataSpace="; " is 227.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptIndexes,The length of the statement  "						LEFT JOIN sys.key_constraints k ON (o.object_id = k.parent_object_id AND i.index_id = k.unique_index_id AND is_system_named = 0)"; " is 130.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptIndexes,The length of the statement  "						LEFT JOIN sys.key_constraints k ON (o.object_id = k.parent_object_id AND i.index_id = k.unique_index_id AND is_system_named = 0)"; " is 130.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptIndexes,The length of the statement  "				sql += @" WHERE currentindex.object_id = OBJECT_ID(@ObjectName) AND currentIndex.type_desc = 'CLUSTERED' AND i.name IS NOT NULL"; " is 129.
Long Statement,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,VerifyObjects,The length of the statement  "					throw new SchemaException(String.Format(CultureInfo.InvariantCulture' "Schema Object {0} was not in the database"' schemaObject.Name)); " is 135.
Long Statement,Insight.Database.Schema,SchemaObject,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaObject.cs,ParseSql,The length of the statement  "                throw new SchemaParsingException(String.Format(CultureInfo.InvariantCulture' "Error parsing Sql: {0}"' invalid.Name)' _sql); " is 124.
Long Statement,Insight.Database.Schema,SchemaObjectCollection,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaObjectCollection.cs,Load,The length of the statement  "			foreach (string resourceName in assembly.GetManifestResourceNames().Where(rn => rn.EndsWith(".sql"' StringComparison.OrdinalIgnoreCase))) " is 137.
Long Statement,Insight.Database.Schema,SchemaObjectCollection,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaObjectCollection.cs,Validate,The length of the statement  "					throw new ArgumentException(String.Format(CultureInfo.InvariantCulture' Properties.Resources.DuplicateObjectName' schemaObject.Name)); " is 134.
Long Statement,Insight.Database.Schema,SchemaObjectCollection,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaObjectCollection.cs,Verify,The length of the statement  "						throw new SchemaException(String.Format(CultureInfo.InvariantCulture' "SchemaObject {0} was not in the database"' schemaObject.Name)); " is 134.
Long Statement,Insight.Database.Schema,SchemaRegistry,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaRegistry.cs,Commit,The length of the statement  "				Connection.ExecuteSql(String.Format(CultureInfo.InvariantCulture' "DELETE FROM [{0}] WHERE SchemaGroup = '{1}'"' SchemaRegistryTableName' SchemaGroup)); " is 152.
Long Statement,Insight.Database.Schema,SchemaRegistry,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaRegistry.cs,Commit,The length of the statement  "					Connection.ExecuteSql(String.Format(CultureInfo.InvariantCulture' "INSERT INTO [{0}] (SchemaGroup' ObjectName' Signature' Type' OriginalOrder) VALUES ('{1}'' '{2}'' '{3}'' '{4}'' '{5}')"'  " is 187.
Long Statement,Insight.Database.Schema,SqlColumnDefinitionProvider,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SqlColumnDefinitionProvider.cs,GetColumns,The length of the statement  "				SELECT c.name' type_name=t.name' c.max_length' c.precision' c.scale' is_identity' is_readonly = is_identity | is_computed' c.is_nullable' " is 137.
Long Statement,Insight.Database.Schema,SqlColumnDefinitionProvider,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SqlColumnDefinitionProvider.cs,GetColumns,The length of the statement  "							column.SqlType += String.Format(CultureInfo.InvariantCulture' "({0})"' GetColumnLength(column.SqlType' Int32.Parse(reader["max_length"].ToString()' CultureInfo.InvariantCulture))); " is 180.
Long Statement,Insight.Database.Schema,SqlColumnDefinitionProvider,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SqlColumnDefinitionProvider.cs,GetColumns,The length of the statement  "							column.SqlType += String.Format(CultureInfo.InvariantCulture' "({0}' {1})"' reader["precision"].ToString()' reader["scale"].ToString()); " is 136.
Long Statement,Insight.Database.Schema.Implementation,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\Implementation\AutoProc.cs,Install,The length of the statement  "			var sql = new Insight.Database.Schema.AutoProc(Name.Original' new SqlColumnDefinitionProvider(connection)' objects).Sql; " is 120.
Long Statement,Insight.Database.Schema.Implementation,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\Implementation\AutoProc.cs,Drop,The length of the statement  "			var sql = new Insight.Database.Schema.AutoProc(Name.Original' new SqlColumnDefinitionProvider(connection)' null).DropSql; " is 121.
Long Statement,Insight.Database.Schema.Implementation,PartitionFunction,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\Implementation\PartitionFunction.cs,CanModify,The length of the statement  "				"SELECT COUNT(*) FROM sys.partition_functions p JOIN sys.partition_schemes s ON (p.function_id = s.function_id) WHERE p.name = @Name"'  " is 134.
Long Statement,Insight.Database.Schema.Implementation,Permission,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\Implementation\Permission.cs,Exists,The length of the statement  "			Match m = Regex.Match(Name.Original' String.Format(CultureInfo.InvariantCulture' @"(?<permission>\w+)\s+ON\s+(?<object>{0})\s+TO\s+(?<user>{0})"' SqlParser.SqlNameExpression)); " is 176.
Long Statement,Insight.Database.Schema.Implementation,Permission,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\Implementation\Permission.cs,Exists,The length of the statement  "			var permissions = connection.QuerySql(@"SELECT PermissionName=p.permission_name' ObjectType=ISNULL(o.type_desc' p.class_desc) " is 125.
Long Statement,Insight.Database.Schema.Implementation,Permission,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\Implementation\Permission.cs,Exists,The length of the statement  "							throw new SchemaException(String.Format(CultureInfo.InvariantCulture' "GRANT ALL is not supported for {0} objects"' type)); " is 123.
Long Statement,Insight.Database.Schema.Implementation,Index,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\Implementation\Index.cs,CanModify,The length of the statement  "				if (Sql.IndexOf("NONCLUSTERED"' StringComparison.OrdinalIgnoreCase) == -1 && Sql.IndexOf("CLUSTERED"' StringComparison.OrdinalIgnoreCase) != -1) " is 144.
Long Statement,Insight.Database.Schema.Implementation,PrimaryKey,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\Implementation\PrimaryKey.cs,CanDrop,The length of the statement  "				if (Sql.IndexOf("NONCLUSTERED"' StringComparison.OrdinalIgnoreCase) == -1 && Sql.IndexOf("CLUSTERED"' StringComparison.OrdinalIgnoreCase) != -1) " is 144.
Long Statement,Insight.Database.Schema.Implementation,Schema,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\Implementation\Schema.cs,Exists,The length of the statement  "			return 0 < connection.ExecuteScalarSql<int>(String.Format("SELECT COUNT (*) FROM sys.schemas WHERE name = '{0}'"' Name.Object)); " is 128.
Long Statement,Insight.Database.Schema.Implementation,Schema,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\Implementation\Schema.cs,CanDrop,The length of the statement  "			return 0 == connection.ExecuteScalarSql<int>(String.Format("SELECT COUNT(*) FROM sys.objects o WHERE o.schema_id = SCHEMA_ID('{0}')"' Name.Object)); " is 148.
Long Statement,Insight.Database.Schema.Implementation,SchemaImpl,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\Implementation\SchemaImpl.cs,Install,The length of the statement  "				throw new InvalidOperationException(String.Format(CultureInfo.InvariantCulture' "Cannot create SQL object {0}: {1}"' Name.FullName' e.Message)' e);" is 147.
Empty Catch Block,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,DropDatabase,The method has an empty catch block.
Empty Catch Block,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,Install,The method has an empty catch block.
Empty Catch Block,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptTableUpdate,The method has an empty catch block.
Magic Number,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,AutoProc,The following statement contains a magic number: _tableName = new SqlName(match.Groups["tablename"].Value' 2);
Magic Number,Insight.Database.Schema,AutoProc,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\AutoProc.cs,MakeTableDropStatment,The following statement contains a magic number: var sqlName = new SqlName(MakeTableName(tableName)' 2);
Magic Number,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptColumnsAndConstraints,The following statement contains a magic number: Func<dynamic' string> getConstraintName = (dynamic c) => new SqlName(oldTableName' 2).Append(c.Name).FullName;
Magic Number,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptColumnsAndConstraints,The following statement contains a magic number: string defaultDefinition = column.DefaultDefinition.Substring(2' column.DefaultDefinition.Length - 4);
Magic Number,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,ScriptColumnsAndConstraints,The following statement contains a magic number: string defaultDefinition = column.DefaultDefinition.Substring(2' column.DefaultDefinition.Length - 4);
Magic Number,Insight.Database.Schema,SqlParser,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SqlParser.cs,UnformatSqlName,The following statement contains a magic number: return name.Substring(1' name.Length - 2);
Magic Number,Insight.Database.Schema,SqlColumnDefinitionProvider,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SqlColumnDefinitionProvider.cs,GetColumnLength,The following statement contains a magic number: maxLength /= 2;
Magic Number,Insight.Database.Schema.Implementation,Permission,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\Implementation\Permission.cs,Exists,The following statement contains a magic number: var objectName = new SqlName(o' o.Contains("TYPE::[dbo]") ? 3 : 2);
Magic Number,Insight.Database.Schema.Implementation,Permission,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\Implementation\Permission.cs,Exists,The following statement contains a magic number: var objectName = new SqlName(o' o.Contains("TYPE::[dbo]") ? 3 : 2);
Missing Default,Insight.Database.Schema,SchemaInstaller,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SchemaInstaller.cs,GetColumnDefinition,The following switch statement is missing a default case: switch (typeName)  				{  					case "nchar":  					case "char":  					case "nvarchar":  					case "varchar":  					case "varbinary":  						sb.AppendFormat("({0})"' SqlColumnDefinitionProvider.GetColumnLength(typeName' column.MaxLength));  						break;    					case "decimal":  					case "numeric":  						sb.AppendFormat("({0}' {1})"' column.Precision' column.Scale);  						break;  				}
Missing Default,Insight.Database.Schema,SqlColumnDefinitionProvider,D:\research\architectureSmells\repos\jonwagner_Insight.Database.Schema\Insight.Database.Schema\SqlColumnDefinitionProvider.cs,GetColumns,The following switch statement is missing a default case: switch (column.SqlType)  					{  						case "char":  						case "nchar":  						case "varchar":  						case "nvarchar":  						case "binary":  						case "varbinary":  							column.SqlType += String.Format(CultureInfo.InvariantCulture' "({0})"' GetColumnLength(column.SqlType' Int32.Parse(reader["max_length"].ToString()' CultureInfo.InvariantCulture)));  							break;    						case "decimal":  						case "numeric":  							column.SqlType += String.Format(CultureInfo.InvariantCulture' "({0}' {1})"' reader["precision"].ToString()' reader["scale"].ToString());  							break;    						case "float":  							column.SqlType += String.Format(CultureInfo.InvariantCulture' "({0})"' reader["precision"].ToString());  							break;    						case "real":  							break;    						case "rowversion":  						case "timestamp":  							column.IsReadOnly = true;  							column.IsRowVersion = true;  							column.IsUpdateNullable = true;  							break;  					}
