Implementation smell,Namespace,Class,File,Method,Description
Long Method,Cassette,PocoJsonSerializerStrategy,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,DeserializeObject,The method has 110 lines of code.
Complex Method,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,EscapeToJavascriptString,Cyclomatic complexity of the method is 11
Complex Method,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseObject,Cyclomatic complexity of the method is 8
Complex Method,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseValue,Cyclomatic complexity of the method is 12
Complex Method,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,Cyclomatic complexity of the method is 21
Complex Method,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,NextToken,Cyclomatic complexity of the method is 24
Complex Method,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,SerializeValue,Cyclomatic complexity of the method is 9
Complex Method,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,SerializeString,Cyclomatic complexity of the method is 9
Complex Method,Cassette,PocoJsonSerializerStrategy,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,DeserializeObject,Cyclomatic complexity of the method is 26
Complex Method,Cassette,BundleDescriptorReader,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleDescriptorReader.cs,ParseExternal,Cyclomatic complexity of the method is 17
Complex Method,Cassette.BundleProcessing,ReferenceParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleProcessing\ReferenceParser.cs,ParsePaths,Cyclomatic complexity of the method is 23
Complex Method,Cassette.HtmlTemplates,HtmlTemplateCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HtmlTemplates\HtmlTemplateCommentParser.cs,Parse,Cyclomatic complexity of the method is 15
Complex Method,Cassette.Scripts,JavaScriptCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Scripts\JavaScriptCommentParser.cs,Parse,Cyclomatic complexity of the method is 27
Complex Method,Cassette.Stylesheets,CssCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Stylesheets\CssCommentParser.cs,Parse,Cyclomatic complexity of the method is 18
Complex Method,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,ResolveInternal,Cyclomatic complexity of the method is 18
Complex Method,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,ConstructType,Cyclomatic complexity of the method is 9
Long Parameter List,Cassette,BundleCollection,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleCollection.cs,CreateDirectoryBundle,The method has 5 parameters.
Long Parameter List,Cassette,BundleCollection,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleCollection.cs,AddEmbeddedResources,The method has 5 parameters.
Long Parameter List,Cassette,CacheAwareBundleCollectionInitializer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\CacheAwareBundleCollectionInitializer.cs,CacheAwareBundleCollectionInitializer,The method has 5 parameters.
Long Parameter List,Cassette.Interop,ActiveScriptParseWrapper,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Interop\ActiveScriptParseWrapper.cs,AddScriptlet,The method has 9 parameters.
Long Parameter List,Cassette.Interop,ActiveScriptParseWrapper,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Interop\ActiveScriptParseWrapper.cs,ParseScriptText,The method has 7 parameters.
Long Parameter List,Cassette.Interop,IActiveScriptParse32,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Interop\IActiveScriptParse32.cs,AddScriptlet,The method has 11 parameters.
Long Parameter List,Cassette.Interop,IActiveScriptParse32,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Interop\IActiveScriptParse32.cs,ParseScriptText,The method has 9 parameters.
Long Parameter List,Cassette.Interop,IActiveScriptParse64,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Interop\IActiveScriptParse64.cs,AddScriptlet,The method has 11 parameters.
Long Parameter List,Cassette.Interop,IActiveScriptParse64,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Interop\IActiveScriptParse64.cs,ParseScriptText,The method has 9 parameters.
Long Parameter List,Cassette.Interop,IActiveScriptParseWrapper,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Interop\IActiveScriptParseWrapper.cs,AddScriptlet,The method has 9 parameters.
Long Parameter List,Cassette.Interop,IActiveScriptParseWrapper,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Interop\IActiveScriptParseWrapper.cs,ParseScriptText,The method has 7 parameters.
Long Parameter List,Cassette.Stylesheets,ExpandCssUrlsAssetTransformer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Stylesheets\ExpandCssUrlsAssetTransformer.cs,ReplaceUrlWithCassetteRawFileUrl,The method has 5 parameters.
Long Parameter List,Cassette.TinyIoC,TypeExtensions,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,GetGenericMethod,The method has 5 parameters.
Long Parameter List,Cassette.TinyIoC,TypeExtensions,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,GetMethod,The method has 5 parameters.
Long Parameter List,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,TryResolve,The method has 5 parameters.
Long Parameter List,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,ConstructType,The method has 5 parameters.
Long Identifier,Cassette,BundleCollection,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleCollection.cs,TryGetDescriptorFile,The length of the parameter typeSpecificDescriptorFilename is 30.
Long Identifier,Cassette,RuntimeBundleCollectionInitializer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\RuntimeBundleCollectionInitializer.cs,RuntimeBundleCollectionInitializer,The length of the parameter cacheAwareBundleCollectionInitializer is 37.
Long Identifier,Cassette.Caching,BundleCollectionCache,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Caching\BundleCollectionCache.cs,BundleCollectionCache,The length of the parameter getDeserializerForBundleTypeName is 32.
Long Identifier,Cassette.Caching,BundleCollectionCacheReader,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Caching\BundleCollectionCacheReader.cs,BundleCollectionCacheReader,The length of the parameter getDeserializerForBundleTypeName is 32.
Long Identifier,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,AutoRegister,The length of the parameter ignoreDuplicateImplementations is 30.
Long Identifier,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,AutoRegister,The length of the parameter ignoreDuplicateImplementations is 30.
Long Identifier,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,AutoRegister,The length of the parameter ignoreDuplicateImplementations is 30.
Long Identifier,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,AutoRegister,The length of the parameter ignoreDuplicateImplementations is 30.
Long Identifier,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,AutoRegisterInternal,The length of the parameter ignoreDuplicateImplementations is 30.
Long Statement,Cassette,AssemblyScanner,F:\newReposMay17\andrewdavey_cassette\src\Cassette\AssemblyScanner.cs,HashAssemblies,The length of the statement  "			var filenames = assemblies.Where (assembly => AssemblyIsNotIgnored (assembly) && IsNotDynamic (assembly)).Select (assembly => assembly.Location).OrderBy (filename => filename); " is 176.
Long Statement,Cassette,ConfigurationOrderAttribute,F:\newReposMay17\andrewdavey_cassette\src\Cassette\ConfigurationOrderAttribute.cs,GetOrder,The length of the statement  "	var attribute = type.GetCustomAttributes (typeof(ConfigurationOrderAttribute)' false).OfType<ConfigurationOrderAttribute> ().FirstOrDefault (); " is 143.
Long Statement,Cassette,ContainerConfiguration,F:\newReposMay17\andrewdavey_cassette\src\Cassette\ContainerConfiguration.cs,RegisterFileSearchServices,The length of the statement  "	container.RegisterMultiple (typeof(IFileSearchModifier<T>)' getImplementationTypes (typeof(IFileSearchModifier<T>))).AsMultiInstance (); " is 136.
Long Statement,Cassette,ContainerConfiguration,F:\newReposMay17\andrewdavey_cassette\src\Cassette\ContainerConfiguration.cs,RegisterBundlePipelineServices,The length of the statement  "	container.RegisterMultiple (typeof(IBundlePipelineModifier<T>)' getImplementationTypes (typeof(IBundlePipelineModifier<T>))).AsMultiInstance (); " is 144.
Long Statement,Cassette,FileAccessAuthorization,F:\newReposMay17\andrewdavey_cassette\src\Cassette\FileAccessAuthorization.cs,AllowAccess,The length of the statement  "		throw new ArgumentException (string.Format ("The path \"{0}\" is not application relative. It must start with \"~/\"."' path)' "path"); " is 135.
Long Statement,Cassette,FileAccessAuthorization,F:\newReposMay17\andrewdavey_cassette\src\Cassette\FileAccessAuthorization.cs,CanAccess,The length of the statement  "	return paths.Contains (path) || pathPredicates.Any (predicate => predicate (path)) || BundlesContainRawFileReference (path); " is 124.
Long Statement,Cassette,HostBase,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HostBase.cs,RegisterUrlGenerator,The length of the statement  "	container.Register<IUrlGenerator> ((c' n) => new UrlGenerator (c.Resolve<IUrlModifier> ()' c.Resolve<CassetteSettings> ().SourceDirectory' "cassette.axd/")); " is 157.
Long Statement,Cassette,HostBase,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HostBase.cs,RegisterBundleCollectionInitializer,The length of the statement  "	container.Register<IBundleCollectionInitializer> ((c' p) => new ExceptionCatchingBundleCollectionInitializer (c.Resolve<RuntimeBundleCollectionInitializer> ())); " is 161.
Long Statement,Cassette,HostBase,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HostBase.cs,RegisterSettings,The length of the statement  "	// Host specific settings configuration is named so that it's included when CassetteSettings asks for IEnumerable<IConfiguration<CassetteSettings>>. " is 148.
Long Statement,Cassette,HostBase,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HostBase.cs,RegisterFileSearchProvider,The length of the statement  "	container.Register (typeof(IFileSearchProvider)' (c' p) => new FileSearchProvider (bundleType => c.Resolve<IFileSearch> (FileSearchComponentName (bundleType)))); " is 161.
Long Statement,Cassette,HostBase,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HostBase.cs,RegisterPerRequestServices,The length of the statement  "	container.Register (typeof(IReferenceBuilder)' typeof(ReferenceBuilder)).AsPerRequestSingleton (CreateRequestLifetimeProvider ()); " is 130.
Long Statement,Cassette,HostBase,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HostBase.cs,RegisterConfigurationTypes,The length of the statement  "	where interfaceType.IsGenericType && interfaceType.GetGenericTypeDefinition () == typeof(IConfiguration<>) && interfaceType != typeof(IConfiguration<TinyIoCContainer>) " is 167.
Long Statement,Cassette,BundleCollection,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleCollection.cs,GetReadLock,The length of the statement  "		// this prevents unintentional "caching" of compiler errors for things like Less or Compass until the AppDomain recycles " is 120.
Long Statement,Cassette,BundleCollection,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleCollection.cs,Add,The length of the statement  "		throw new ArgumentException (string.Format ("A {0} with the path \"{1}\" has already been added to the collection."' bundle.GetType ().Name' bundle.Path)); " is 155.
Long Statement,Cassette,BundleCollection,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleCollection.cs,Add,The length of the statement  "	var directory = bundleDirectoryExists ? settings.SourceDirectory.GetDirectory (applicationRelativePath) : settings.SourceDirectory; " is 131.
Long Statement,Cassette,BundleCollection,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleCollection.cs,AddPerSubDirectory,The length of the statement  "	Trace.Source.TraceInformation (string.Format ("Creating {0} for each subdirectory of {1}"' typeof(T).Name' applicationRelativePath)); " is 133.
Long Statement,Cassette,BundleCollection,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleCollection.cs,AddPerSubDirectory,The length of the statement  "		var topLevelFiles = fileSearch.FindFiles (parentDirectory).Where (f => f.Directory.Equals (parentDirectory)).ToArray (); " is 120.
Long Statement,Cassette,BundleCollection,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleCollection.cs,AddUrlWithLocalAssets,The length of the statement  "		throw new ArgumentException ("Cannot determine the type of bundle to add. Specify the type using the generic overload of this method."); " is 136.
Long Statement,Cassette,BundleCollection,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleCollection.cs,AddUrlWithLocalAssets,The length of the statement  "	var existingBundle = bundles.FirstOrDefault (b => b.ContainsPath (PathUtilities.AppRelative (localAssetSettings.Path))); " is 120.
Long Statement,Cassette,BundleCollection,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleCollection.cs,AddUrlWithAlias,The length of the statement  "		throw new ArgumentException ("Cannot determine the type of bundle to add. Specify the type using the generic overload of this method."); " is 136.
Long Statement,Cassette,BundleCollection,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleCollection.cs,AddUrl,The length of the statement  "		throw new ArgumentException ("Cannot determine the type of bundle to add. Specify the type using the generic overload of this method."); " is 136.
Long Statement,Cassette,BundleCollection,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleCollection.cs,AddPerIndividualFile,The length of the statement  "	var directory = string.IsNullOrEmpty (directoryPath) ? settings.SourceDirectory : settings.SourceDirectory.GetDirectory (directoryPath); " is 136.
Long Statement,Cassette,BundleCollection,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleCollection.cs,ValidateBundleReferences,The length of the statement  "	select string.Format ("Reference error in bundle descriptor for \"{0}\". Cannot find \"{1}\"."' bundle.Path' reference); " is 120.
Long Statement,Cassette,BundleCollection,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleCollection.cs,BuildBundleImmediateReferenceDictionary,The length of the statement  "		references = new HashedSet<Bundle> (GetNonSameBundleAssetReferences (bundle).Select (r => r.ToPath).Concat (bundle.References).SelectMany (FindBundlesContainingPath).ToList ()) " is 176.
Long Statement,Cassette,BundleCollection,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleCollection.cs,CreateAssetReferenceNotFoundMessage,The length of the statement  "		return string.Format ("Reference error in \"{0}\"' line {1}. Cannot find \"{2}\"."' reference.FromAssetPath' reference.SourceLineNumber' reference.ToPath); " is 155.
Long Statement,Cassette,BundleCollection,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleCollection.cs,ThrowCircularBundleReferenceException,The length of the statement  "	var details = string.Join (Environment.NewLine' cycles.Select (cycle => "[" + string.Join ("' "' cycle.Select (m => m.Path).ToArray ()) + "]").ToArray ()); " is 155.
Long Statement,Cassette,RawFileReferenceFinder,F:\newReposMay17\andrewdavey_cassette\src\Cassette\RawFileReferenceFinder.cs,Visit,The length of the statement  "	var found = asset.References.Any (r => r.Type == AssetReferenceType.RawFilename && r.ToPath.Equals (filename' StringComparison.OrdinalIgnoreCase)); " is 147.
Long Statement,Cassette,ResourceAsset,F:\newReposMay17\andrewdavey_cassette\src\Cassette\ResourceAsset.cs,OpenStreamCore,The length of the statement  "		throw new InvalidOperationException (string.Format ("Resource {0} not found in assembly {1}."' resourceName' assembly.FullName)); " is 129.
Long Statement,Cassette,FileSystemWatchingBundleRebuilder,F:\newReposMay17\andrewdavey_cassette\src\Cassette\FileSystemWatchingBundleRebuilder.cs,GetBundleDescriptorFilenames,The length of the statement  "	return new HashedCompareSet<string> (bundleTypes.Select (type => type.Name + ".txt").ToArray ()' StringComparer.OrdinalIgnoreCase); " is 131.
Long Statement,Cassette,FileSystemWatchingBundleRebuilder,F:\newReposMay17\andrewdavey_cassette\src\Cassette\FileSystemWatchingBundleRebuilder.cs,Start,The length of the statement  "	fileSystemWatcher = settings.SourceDirectory.WatchForChanges (HandleCreated' HandleChanged' HandleDeleted' HandleRenamed); " is 122.
Long Statement,Cassette,AssetDeserializer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\AssetDeserializer.cs,GetAssetCacheValidatorType,The length of the statement  "	var typeName = assetElement.AttributeValueOrThrow ("AssetCacheValidatorType"' () => new CassetteDeserializationException ("Asset manifest element missing \"AssetCacheValidatorType\" attribute.")); " is 196.
Long Statement,Cassette,AssetDeserializer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\AssetDeserializer.cs,GetPathAttribute,The length of the statement  "	return assetElement.AttributeValueOrThrow ("Path"' () => new CassetteDeserializationException ("Asset manifest element missing \"Path\" attribute.")); " is 150.
Long Statement,Cassette,AssetDeserializer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\AssetDeserializer.cs,GetReferencePath,The length of the statement  "	return referenceElement.AttributeValueOrThrow ("Path"' () => new CassetteDeserializationException ("Reference manifest element missing \"Path\" attribute.")); " is 158.
Long Statement,Cassette,AssetDeserializer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\AssetDeserializer.cs,GetReferenceType,The length of the statement  "	return ParseAssetReferenceType (referenceElement.AttributeValueOrThrow ("Type"' () => new CassetteDeserializationException ("Reference manifest element missing \"Type\" attribute."))); " is 184.
Long Statement,Cassette,AssetDeserializer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\AssetDeserializer.cs,GetSourceLineNumber,The length of the statement  "	return ParseSourceLineNumber (referenceElement.AttributeValueOrThrow ("SourceLineNumber"' () => new CassetteDeserializationException ("Reference manifest element missing \"SourceLineNumber\" attribute."))); " is 206.
Long Statement,Cassette,AssetDeserializer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\AssetDeserializer.cs,ParseSourceLineNumber,The length of the statement  "	throw new CassetteDeserializationException (string.Format ("Invalid asset reference source line number \"{0}\"."' sourceLineNumberString)); " is 139.
Long Statement,Cassette,AssetSerializer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\AssetSerializer.cs,AssetElement,The length of the statement  "	return new XElement ("Asset"' new XAttribute ("Path"' asset.Path)' new XAttribute ("AssetCacheValidatorType"' asset.AssetCacheValidatorType.AssemblyQualifiedName)' ReferenceElements (asset.References)); " is 202.
Long Statement,Cassette,AssetSerializer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\AssetSerializer.cs,ReferenceElement,The length of the statement  "	return new XElement ("Reference"' new XAttribute ("Path"' reference.ToPath)' new XAttribute ("Type"' Enum.GetName (typeof(AssetReferenceType)' reference.Type))' new XAttribute ("SourceLineNumber"' reference.SourceLineNumber.ToString (CultureInfo.InvariantCulture))); " is 266.
Long Statement,Cassette,BundleDeserializer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleDeserializer.cs,GetRequiredAttribute,The length of the statement  "	return element.AttributeValueOrThrow (attributeName' () => new CassetteDeserializationException (string.Format ("Bundle manifest element missing \"{0}\" attribute."' attributeName))); " is 183.
Long Statement,Cassette,BundleDeserializer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleDeserializer.cs,GetHtmlAttributeElementNameAttribute,The length of the statement  "	return attributeElement.AttributeValueOrThrow ("Name"' () => new CassetteDeserializationException ("HtmlAttribute manifest element is missing \"Name\" attribute.")); " is 165.
Long Statement,Cassette,BundleDeserializer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleDeserializer.cs,GetReferencePathAttribute,The length of the statement  "	return referenceElement.AttributeValueOrThrow ("Path"' () => new CassetteDeserializationException ("Reference manifest element missing \"Path\" attribute.")); " is 158.
Long Statement,Cassette,BundleDeserializer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleDeserializer.cs,CreateHtmlRenderer,The length of the statement  "	var typeName = element.AttributeValueOrThrow (attributeName' () => new CassetteDeserializationException (string.Format ("Bundle manifest element missing \"{0}\" attribute."' attributeName))); " is 191.
Long Statement,Cassette,BundleSerializer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleSerializer.cs,CreateElement,The length of the statement  "	var element = new XElement (ConventionalXElementName ()' DescriptorFilePathAttribute ()' PathAttribute ()' HashAttribute ()' ContentTypeAttribute ()' PageLocationAttribute ()' bundle.References.Select (SerializeReference)' HtmlAttributeElements ()); " is 249.
Long Statement,Cassette,BundleSerializer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleSerializer.cs,HtmlAttributeElements,The length of the statement  "	select new XElement ("HtmlAttribute"' new XAttribute ("Name"' attribute.Key)' attribute.Value != null ? new XAttribute ("Value"' attribute.Value) : null); " is 154.
Long Statement,Cassette,ConventionalMinifiedFileFilter,F:\newReposMay17\andrewdavey_cassette\src\Cassette\ConventionalMinifiedFileFilter.cs,AddToOutputIfDebugFileDoesNotExist,The length of the statement  "	var debugFileExists = filenames.Contains (fileMatch.BasicName + ".debug" + fileMatch.FileExtension) || filenames.Contains (fileMatch.BasicName + "-debug" + fileMatch.FileExtension); " is 181.
Long Statement,Cassette,FileAsset,F:\newReposMay17\andrewdavey_cassette\src\Cassette\FileAsset.cs,AddBundleReference,The length of the statement  "	var type = parentBundle.ContainsPath (appRelativeFilename) ? AssetReferenceType.SameBundle : AssetReferenceType.DifferentBundle; " is 128.
Long Statement,Cassette,FileAsset,F:\newReposMay17\andrewdavey_cassette\src\Cassette\FileAsset.cs,AddRawFileReference,The length of the statement  "		relativeFilename = PathUtilities.NormalizePath (PathUtilities.CombineWithForwardSlashes (sourceFile.Directory.FullPath' relativeFilename)); " is 139.
Long Statement,Cassette,AssetBase,F:\newReposMay17\andrewdavey_cassette\src\Cassette\AssetBase.cs,OpenStream,The length of the statement  "	var createStream = transformers.Aggregate<IAssetTransformer' Func<Stream>> (OpenStreamCore' (current' transformer) => transformer.Transform (current' this)); " is 157.
Long Statement,Cassette,BundleFactoryBase,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleFactoryBase.cs,FindFileOrThrow,The length of the statement  "	throw new FileNotFoundException (string.Format ("The asset file \"{0}\" was not found for bundle \"{1}\"."' filename' bundle.Path)); " is 132.
Long Statement,Cassette,BundleFactoryBase,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleFactoryBase.cs,ThrowIfShouldReferenceNonMinFile,The length of the statement  "			throw new ArgumentException (string.Format ("Bundle \"{0}\" references \"{1}\" when it should reference \"{2}\"."' bundle.Path' filename' nonMinFilename)); " is 155.
Long Statement,Cassette,BundleFactoryBase,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleFactoryBase.cs,ThrowIfShouldReferenceDebugFile,The length of the statement  "			throw new ArgumentException (string.Format ("Bundle \"{0}\" references \"{1}\" when it should reference \"{2}\"."' bundle.Path' filename' debugFilename)); " is 154.
Long Statement,Cassette,BundleFactoryBase,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleFactoryBase.cs,AddAllSubDirectoryAssetsToBundle,The length of the statement  "	var filesInSubDirectory = remainingFiles.Where (file => file.FullPath.StartsWith (path' StringComparison.OrdinalIgnoreCase)).ToArray (); " is 136.
Long Statement,Cassette,FileSearch,F:\newReposMay17\andrewdavey_cassette\src\Cassette\FileSearch.cs,IsDescriptorFilename,The length of the statement  "	return file.FullPath.EndsWith ("/bundle.txt"' StringComparison.OrdinalIgnoreCase) || file.FullPath.EndsWith ("/scriptbundle.txt"' StringComparison.OrdinalIgnoreCase) || file.FullPath.EndsWith ("/stylesheetbundle.txt"' StringComparison.OrdinalIgnoreCase) || file.FullPath.EndsWith ("/htmltemplatebundle.txt"' StringComparison.OrdinalIgnoreCase); " is 344.
Long Statement,Cassette,ReferenceBuilder,F:\newReposMay17\andrewdavey_cassette\src\Cassette\ReferenceBuilder.cs,CreateExternalBundleByInferringTypeFromFileExtension,The length of the statement  "		throw new ArgumentException (string.Format ("Cannot determine the type of bundle for the URL \"{0}\". Specify the type using the generic type parameter."' path)); " is 162.
Long Statement,Cassette,ReferenceBuilder,F:\newReposMay17\andrewdavey_cassette\src\Cassette\ReferenceBuilder.cs,ThrowRewritingRequiredException,The length of the statement  "		throw new InvalidOperationException ("Cannot add a bundle reference. The bundles have already been rendered. Either move the reference before the render call' or set ICassetteApplication.IsHtmlRewritingEnabled to true in your Cassette configuration."); " is 252.
Long Statement,Cassette,ReferenceBuilder,F:\newReposMay17\andrewdavey_cassette\src\Cassette\ReferenceBuilder.cs,ThrowRewritingRequiredException,The length of the statement  "		throw new InvalidOperationException (string.Format ("Cannot add a bundle reference' for location \"{0}\". This location has already been rendered. Either move the reference before the render call' or set ICassetteApplication.IsHtmlRewritingEnabled to true in your Cassette configuration."' location)); " is 301.
Long Statement,Cassette,ReferenceBuilder,F:\newReposMay17\andrewdavey_cassette\src\Cassette\ReferenceBuilder.cs,CreateHtml,The length of the statement  "	return string.Join (Environment.NewLine' GetBundles (location).OfType<T> ().Select (bundle => bundle.Render ()).ToArray ()); " is 124.
Long Statement,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The length of the statement  "					if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) " is 132.
Long Statement,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The length of the statement  "							if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) { " is 168.
Long Statement,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseNumber,The length of the statement  "	if (str.IndexOf ("."' StringComparison.OrdinalIgnoreCase) != -1 || str.IndexOf ("e"' StringComparison.OrdinalIgnoreCase) != -1) { " is 129.
Long Statement,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseNumber,The length of the statement  "		success = double.TryParse (new string (json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 125.
Long Statement,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseNumber,The length of the statement  "		success = long.TryParse (new string (json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 123.
Long Statement,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,NextToken,The length of the statement  "		if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') { " is 134.
Long Statement,Cassette,PocoJsonSerializerStrategy,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,DeserializeObject,The length of the statement  "			if (type == typeof(DateTime) || (ReflectionUtils.IsNullableType (type) && Nullable.GetUnderlyingType (type) == typeof(DateTime))) " is 129.
Long Statement,Cassette,PocoJsonSerializerStrategy,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,DeserializeObject,The length of the statement  "				obj = DateTime.ParseExact (str' Iso8601Format' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 144.
Long Statement,Cassette,PocoJsonSerializerStrategy,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,DeserializeObject,The length of the statement  "			else if (type == typeof(Guid) || (ReflectionUtils.IsNullableType (type) && Nullable.GetUnderlyingType (type) == typeof(Guid))) " is 126.
Long Statement,Cassette,PocoJsonSerializerStrategy,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,DeserializeObject,The length of the statement  "		                    type == typeof(int) || type == typeof(long) || type == typeof(double) ||type == typeof(float) || type == typeof(bool) || type == typeof(decimal) ||type == typeof(byte) || type == typeof(short)" is 192.
Long Statement,Cassette,BundleDescriptorReader,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleDescriptorReader.cs,ParseExternal,The length of the statement  "	var keyValueRegex = new Regex (@"^\s* (?<key>[a-z]+) \s* = \s* (?<value>.*)$"' RegexOptions.IgnoreCase | RegexOptions.IgnorePatternWhitespace); " is 143.
Long Statement,Cassette,BundleDescriptorReader,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleDescriptorReader.cs,ParseExternal,The length of the statement  "			throw new Exception ("The [external] section of bundle descriptor must contain a \"url\" property before the \"fallbackCondition\" property."); " is 143.
Long Statement,Cassette,AssetReference,F:\newReposMay17\andrewdavey_cassette\src\Cassette\AssetReference.cs,ValidatePath,The length of the statement  "			throw new ArgumentException (string.Format ("Referenced path must be application relative and start with a \"~\". Path: {0}"' path)' "path"); " is 141.
Long Statement,Cassette,Bundle,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Bundle.cs,SortAssetsByDependency,The length of the statement  "	var graph = new Graph<IAsset> (Assets' asset => asset.References.Where (reference => reference.Type == AssetReferenceType.SameBundle).Select (reference => assetsByFilename [reference.ToPath])); " is 193.
Long Statement,Cassette,Bundle,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Bundle.cs,SortAssetsByDependency,The length of the statement  "		var details = string.Join (Environment.NewLine' cycles.Select (cycle => "[" + string.Join ("' "' cycle.Select (a => a.Path).ToArray ()) + "]").ToArray ()); " is 155.
Long Statement,Cassette,UrlGenerator,F:\newReposMay17\andrewdavey_cassette\src\Cassette\UrlGenerator.cs,CreateAssetUrl,The length of the statement  "	// This maintains the asset directory structure i.e. two assets in the same directory appear together in web browser JavaScript development tooling. " is 148.
Long Statement,Cassette,UrlGenerator,F:\newReposMay17\andrewdavey_cassette\src\Cassette\UrlGenerator.cs,CreateCachedFileUrl,The length of the statement  "		throw new ArgumentException ("Filename must be application relative (starting with '~'). Filename: " + filename' "filename"); " is 125.
Long Statement,Cassette.BundleProcessing,ReferenceParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleProcessing\ReferenceParser.cs,ParsePaths,The length of the statement  "		throw new Exception (string.Format ("Asset reference error in {0} line {1}. Missing closing double quote (\")."' sourceAsset.Path' lineNumber)); " is 144.
Long Statement,Cassette.BundleProcessing,ReferenceParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleProcessing\ReferenceParser.cs,ParsePaths,The length of the statement  "		throw new Exception (string.Format ("Asset reference error in {0} line {1}. Missing closing single quote (')."' sourceAsset.Path' lineNumber)); " is 143.
Long Statement,Cassette.Caching,BundleCollectionCacheWriter,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Caching\BundleCollectionCacheWriter.cs,WriteManifestFile,The length of the statement  "	var manifestDocuent = new XDocument (new XElement ("BundleCollection"' new XAttribute ("Version"' manifest.Version)' new XAttribute ("IsStatic"' manifest.IsStatic))); " is 166.
Long Statement,Cassette.HtmlTemplates,WrapJavaScriptHtmlTemplates,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HtmlTemplates\WrapJavaScriptHtmlTemplates.cs,Process,The length of the statement  "		throw new ArgumentException ("WrapJavaScriptHtmlTemplates should only process a bundle where the assets have been concatenated."' "bundle"); " is 140.
Long Statement,Cassette.HtmlTemplates,ParseHtmlTemplateReferences,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HtmlTemplates\ParseHtmlTemplateReferences.cs,ShouldParseAsset,The length of the statement  "	return asset.Path.EndsWith (".htm"' StringComparison.OrdinalIgnoreCase) || asset.Path.EndsWith (".html"' StringComparison.OrdinalIgnoreCase) || asset.Path.EndsWith (".jst"' StringComparison.OrdinalIgnoreCase) || asset.Path.EndsWith (".tmpl"' StringComparison.OrdinalIgnoreCase) || asset.Path.EndsWith (".mustache"' StringComparison.OrdinalIgnoreCase); " is 351.
Long Statement,Cassette.HtmlTemplates,RemoteHtmlTemplateBundleRenderer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HtmlTemplates\RemoteHtmlTemplateBundleRenderer.cs,Render,The length of the statement  "	return string.Format ("<script src=\"{0}\" type=\"text/javascript\"{1}></script>"' urlGenerator.CreateBundleUrl (bundle)' bundle.HtmlAttributes.CombinedAttributes); " is 164.
Long Statement,Cassette.HtmlTemplates,WrapHtmlTemplateInScriptElement,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HtmlTemplates\WrapHtmlTemplateInScriptElement.cs,Transform,The length of the statement  "		var scriptElement = String.Format ("<script id=\"{0}\" type=\"{1}\"{2}>{3}</script>"' idStrategy.HtmlTemplateId (bundle' asset)' bundle.ContentType' bundle.HtmlAttributes.CombinedAttributes' template); " is 201.
Long Statement,Cassette.Interop,ActiveScriptParseWrapper,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Interop\ActiveScriptParseWrapper.cs,AddScriptlet,The length of the statement  "		parse32.AddScriptlet (defaultName' code' itemName' subItemName' eventName' delimiter' sourceContextCookie' startingLineNumber' flags' out name' out exceptionInfo); " is 163.
Long Statement,Cassette.Interop,ActiveScriptParseWrapper,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Interop\ActiveScriptParseWrapper.cs,AddScriptlet,The length of the statement  "		parse64.AddScriptlet (defaultName' code' itemName' subItemName' eventName' delimiter' sourceContextCookie' startingLineNumber' flags' out name' out exceptionInfo); " is 163.
Long Statement,Cassette.Interop,ActiveScriptParseWrapper,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Interop\ActiveScriptParseWrapper.cs,ParseScriptText,The length of the statement  "		parse32.ParseScriptText (code' itemName' context' delimiter' sourceContextCookie' startingLineNumber' flags' out result' out exceptionInfo); " is 140.
Long Statement,Cassette.Interop,ActiveScriptParseWrapper,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Interop\ActiveScriptParseWrapper.cs,ParseScriptText,The length of the statement  "		parse64.ParseScriptText (code' itemName' context' delimiter' sourceContextCookie' startingLineNumber' flags' out result' out exceptionInfo); " is 140.
Long Statement,Cassette.IO,FileSystemDirectory,F:\newReposMay17\andrewdavey_cassette\src\Cassette\IO\FileSystemDirectory.cs,WatchForChanges,The length of the statement  "	watcher.Renamed += (s' e) => pathRenamed (ConvertSystemPathToAppPath (e.OldFullPath)' ConvertSystemPathToAppPath (e.FullPath)); " is 127.
Long Statement,Cassette.IO,FileSystemDirectory,F:\newReposMay17\andrewdavey_cassette\src\Cassette\IO\FileSystemDirectory.cs,TryGetAsSubDirectory,The length of the statement  "	var isSubDirectory = directory.fullSystemPath.Length >= fullSystemPath.Length && directory.fullSystemPath.Substring (0' fullSystemPath.Length).Equals (fullSystemPath' StringComparison.OrdinalIgnoreCase); " is 203.
Long Statement,Cassette.IO,IsolatedStorageDirectory,F:\newReposMay17\andrewdavey_cassette\src\Cassette\IO\IsolatedStorageDirectory.cs,GetFiles,The length of the statement  "	return storage.GetFileNames (searchPattern).Select (filename => new IsolatedStorageFile (GetAbsolutePath (filename)' getStorage' this)); " is 136.
Long Statement,Cassette.Scripts,ExternalScriptBundleDeserializer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Scripts\ExternalScriptBundleDeserializer.cs,GetUrlAttribute,The length of the statement  "	return manifestElement.AttributeValueOrThrow ("Url"' () => new CassetteDeserializationException ("ExternalScriptBundle manifest element is missing \"Url\" attribute.")); " is 169.
Long Statement,Reflection,ReflectionUtils,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,IsTypeGenericeCollectionInterface,The length of the statement  "	return (genericDefinition == typeof(IList<>) || genericDefinition == typeof(ICollection<>) || genericDefinition == typeof(IEnumerable<>)); " is 138.
Long Statement,Reflection,ReflectionUtils,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ToNullableType,The length of the statement  "	return obj == null ? null : Convert.ChangeType (obj' Nullable.GetUnderlyingType (nullableType)' CultureInfo.InvariantCulture); " is 126.
Long Statement,Reflection,CacheResolver,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,GetNewInstance,The length of the statement  "                    ConstructorInfo constructorInfo = type.GetConstructor(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance' null' Type.EmptyTypes' null);" is 153.
Long Statement,Reflection,CacheResolver,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,GetNewInstance,The length of the statement  "	ConstructorInfo constructorInfo = type.GetConstructor (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance' null' Type.EmptyTypes' null); " is 154.
Long Statement,Reflection,CacheResolver,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,CreateGetHandler,The length of the statement  "                DynamicMethod dynamicGet = CreateDynamicMethod("Get" + fieldInfo.Name' fieldInfo.DeclaringType' new Type[] { typeof(object) }' fieldInfo.DeclaringType);" is 152.
Long Statement,Reflection,CacheResolver,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,CreateSetHandler,The length of the statement  "                DynamicMethod dynamicSet = CreateDynamicMethod("Set" + fieldInfo.Name' null' new Type[] { typeof(object)' typeof(object) }' fieldInfo.DeclaringType);" is 149.
Long Statement,Reflection,CacheResolver,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,CreateGetHandler,The length of the statement  "                DynamicMethod dynamicGet = CreateDynamicMethod("Get" + propertyInfo.Name' propertyInfo.DeclaringType' new Type[] { typeof(object) }' propertyInfo.DeclaringType);" is 161.
Long Statement,Reflection,CacheResolver,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,CreateSetHandler,The length of the statement  "                DynamicMethod dynamicSet = CreateDynamicMethod("Set" + propertyInfo.Name' null' new Type[] { typeof(object)' typeof(object) }' propertyInfo.DeclaringType);" is 155.
Long Statement,Cassette.Stylesheets,CssUrlToDataUriTransformer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Stylesheets\CssUrlToDataUriTransformer.cs,Transform,The length of the statement  "		var matches = urlRegex.Matches (css).Cast<Match> ().Select (match => CreateCssUrlMatchTransformer (match' asset' rootDirectory)).Where (match => match.CanTransform && shouldEmbedUrl (match.Url)).Reverse (); " is 206.
Long Statement,Cassette.Stylesheets,ExternalStylesheetBundleDeserializer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Stylesheets\ExternalStylesheetBundleDeserializer.cs,GetUrlAttribute,The length of the statement  "	return manifestElement.AttributeValueOrThrow ("Url"' () => new CassetteDeserializationException ("ExternalStylesheetBundle manifest element is missing \"Url\" attribute.")); " is 173.
Long Statement,Cassette.Stylesheets,ExpandCssUrlsAssetTransformer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Stylesheets\ExpandCssUrlsAssetTransformer.cs,UrlMatchesInReverse,The length of the statement  "	return CssUrlRegex.Matches (css).Cast<Match> ().Where (IsRelativeUrl).OrderByDescending (match => match.Index).ToArray (); " is 122.
Long Statement,Cassette.TinyIoC,TypeExtensions,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,GetMethod,The length of the statement  "	var methods = sourceType.GetMethods (bindingFlags).Where (mi => string.Equals (methodName' mi.Name' StringComparison.InvariantCulture)).Where (mi => mi.ContainsGenericParameters).Where (mi => mi.GetGenericArguments ().Length == genericTypes.Length).Where (mi => mi.GetParameters ().Length == parameterTypes.Length).Select (mi => mi.MakeGenericMethod (genericTypes)).Where (mi => mi.GetParameters ().Select (pi => pi.ParameterType).SequenceEqual (parameterTypes)).ToList (); " is 473.
Long Statement,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,AutoRegister,The length of the statement  "	AutoRegisterInternal (AppDomain.CurrentDomain.GetAssemblies ().Where (a => !IsIgnoredAssembly (a))' true' registrationPredicate); " is 129.
Long Statement,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,AutoRegister,The length of the statement  "	AutoRegisterInternal (AppDomain.CurrentDomain.GetAssemblies ().Where (a => !IsIgnoredAssembly (a))' ignoreDuplicateImplementations' null); " is 138.
Long Statement,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,AutoRegister,The length of the statement  "	AutoRegisterInternal (AppDomain.CurrentDomain.GetAssemblies ().Where (a => !IsIgnoredAssembly (a))' ignoreDuplicateImplementations' registrationPredicate); " is 155.
Long Statement,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,AutoRegister,The length of the statement  "	            AutoRegisterInternal(new Assembly[] { this.GetType().Assembly }' ignoreDuplicateImplementations' registrationPredicate);" is 120.
Long Statement,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,Register,The length of the statement  "	return this.RegisterInternal (registerType' string.Empty' GetDefaultObjectFactory (registerType' registerImplementation)); " is 122.
Long Statement,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,Register,The length of the statement  "	return RegisterInternal (registerType' string.Empty' new InstanceFactory (registerType' registerImplementation' instance)); " is 123.
Long Statement,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,RegisterMultiple,The length of the statement  "			throw new ArgumentException (String.Format ("types: The type {0} is not assignable from {1}"' registrationType.FullName' type.FullName)); " is 137.
Long Statement,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,Resolve,The length of the statement  "	return ResolveInternal (new TypeRegistration (resolveType' name)' NamedParameterOverloads.Default' ResolveOptions.Default); " is 123.
Long Statement,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,CanResolve,The length of the statement  "	return CanResolveInternal (new TypeRegistration (resolveType)' NamedParameterOverloads.Default' ResolveOptions.Default); " is 120.
Long Statement,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,CanResolve,The length of the statement  "	return CanResolveInternal (new TypeRegistration (resolveType' name)' NamedParameterOverloads.Default' ResolveOptions.Default); " is 126.
Long Statement,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,AutoRegisterInternal,The length of the statement  "		var types = assemblies.SelectMany (a => a.SafeGetTypes ()).Where (t => !IsIgnoredType (t' registrationPredicate)).ToList (); " is 124.
Long Statement,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,AutoRegisterInternal,The length of the statement  "		where (type.IsClass == true) && (type.IsAbstract == false) && (type != this.GetType () && (type.DeclaringType != this.GetType ()) && (!type.IsGenericTypeDefinition)) " is 165.
Long Statement,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,AutoRegisterInternal,The length of the statement  "		where ((type.IsInterface == true || type.IsAbstract == true) && (type.DeclaringType != this.GetType ()) && (!type.IsGenericTypeDefinition)) " is 139.
Long Statement,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,CanResolveInternal,The length of the statement  "	if (!String.IsNullOrEmpty (name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.AttemptUnnamedResolution) { " is 133.
Long Statement,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,CanResolveInternal,The length of the statement  "	if ((options.UnregisteredResolutionAction == UnregisteredResolutionActions.AttemptResolve) || (checkType.IsGenericType && options.UnregisteredResolutionAction == UnregisteredResolutionActions.GenericsOnly)) " is 206.
Long Statement,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,CanResolveInternal,The length of the statement  "		return (GetBestConstructor (checkType' parameters' options) != null) ? true : (_Parent != null) ? _Parent.CanResolveInternal (registration' parameters' options) : false; " is 169.
Long Statement,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,IsAutomaticLazyFactoryRequest,The length of the statement  "	if ((genericType == typeof(Func<' ' >) && type.GetGenericArguments () [0] == typeof(string) && type.GetGenericArguments () [1] == typeof(IDictionary<String' object>))) " is 167.
Long Statement,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,ResolveInternal,The length of the statement  "	if (!String.IsNullOrEmpty (registration.Name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.Fail) " is 124.
Long Statement,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,ResolveInternal,The length of the statement  "	if (!String.IsNullOrEmpty (registration.Name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.AttemptUnnamedResolution) { " is 146.
Long Statement,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,ResolveInternal,The length of the statement  "	if ((options.UnregisteredResolutionAction == UnregisteredResolutionActions.AttemptResolve) || (registration.Type.IsGenericType && options.UnregisteredResolutionAction == UnregisteredResolutionActions.GenericsOnly)) { " is 216.
Long Statement,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "	if ((genericType == typeof(Func<' ' >) && type.GetGenericArguments () [0] == typeof(string) && type.GetGenericArguments () [1] == typeof(IDictionary<string' object>))) { " is 169.
Long Statement,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "		var resolveCall = Expression.Call (Expression.Constant (this)' resolveMethod' name' Expression.Call (typeof(NamedParameterOverloads)' "FromIDictionary"' null' parameters)); " is 172.
Long Statement,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,GetIEnumerableRequest,The length of the statement  "	var genericResolveAllMethod = this.GetType ().GetGenericMethod (BindingFlags.Public | BindingFlags.Instance' "ResolveAll"' type.GetGenericArguments ()' new[] { " is 159.
Long Statement,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,CanConstruct,The length of the statement  "		if (!isParameterOverload && !CanResolveInternal (new TypeRegistration (parameter.ParameterType)' NamedParameterOverloads.Default' options)) " is 139.
Long Statement,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,ConstructType,The length of the statement  "		constructor = GetBestConstructor (typeToConstruct' parameters' options) ?? GetTypeConstructors (typeToConstruct).LastOrDefault (); " is 130.
Long Statement,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,ConstructType,The length of the statement  "			args [parameterIndex] = parameters.ContainsKey (currentParam.Name) ? parameters [currentParam.Name] : ResolveInternal (new TypeRegistration (currentParam.ParameterType)' NamedParameterOverloads.Default' options); " is 212.
Long Statement,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,BuildUpInternal,The length of the statement  "				property.SetValue (input' ResolveInternal (new TypeRegistration (property.PropertyType)' NamedParameterOverloads.Default' resolveOptions)' null); " is 145.
Long Statement,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,ResolveAllInternal,The length of the statement  "	var registrations = _RegisteredTypes.Keys.Where (tr => tr.Type == resolveType).Concat (GetParentRegistrationsForType (resolveType)); " is 132.
Long Statement,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,ResolveAllInternal,The length of the statement  "	return registrations.Select (registration => this.ResolveInternal (registration' NamedParameterOverloads.Default' ResolveOptions.Default)); " is 139.
Long Statement,Cassette.TinyIoC,TinyIoCExtensions,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoCExtensions.cs,AsPerRequestSingleton,The length of the statement  "	return TinyIoCContainer.RegisterOptions.ToCustomLifetimeManager (registerOptions' lifetimeProvider' "per request singleton"); " is 125.
Long Statement,Cassette.Utilities,StringExtensions,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Utilities\StringExtensions.cs,IsUrl,The length of the statement  "	return s.StartsWith ("http:"' StringComparison.OrdinalIgnoreCase) || s.StartsWith ("https:"' StringComparison.OrdinalIgnoreCase) || s.StartsWith ("//"); " is 152.
Complex Conditional,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,NextToken,The conditional expression  "json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e'"  is complex.
Complex Conditional,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,NextToken,The conditional expression  "json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e'"  is complex.
Complex Conditional,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,NextToken,The conditional expression  "json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l'"  is complex.
Complex Conditional,Cassette,PocoJsonSerializerStrategy,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,DeserializeObject,The conditional expression  "(value is long && type == typeof(long)) || (value is double && type == typeof(double))"  is complex.
Complex Conditional,Cassette,PocoJsonSerializerStrategy,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,DeserializeObject,The conditional expression  "(value is double && type != typeof(double)) || (value is long && type != typeof(long))"  is complex.
Empty Catch Block,Cassette.Interop,ActiveScriptException,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Interop\ActiveScriptException.cs,Create,The method has an empty catch block.
Empty Catch Block,Cassette.Interop,ActiveScriptException,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Interop\ActiveScriptException.cs,Create,The method has an empty catch block.
Empty Catch Block,Cassette.Interop,ActiveScriptException,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Interop\ActiveScriptException.cs,Create,The method has an empty catch block.
Empty Catch Block,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,AutoRegisterInternal,The method has an empty catch block.
Empty Catch Block,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,AutoRegisterInternal,The method has an empty catch block.
Empty Catch Block,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,BuildUpInternal,The method has an empty catch block.
Magic Number,Cassette,FileSystemWatchingBundleRebuilder,F:\newReposMay17\andrewdavey_cassette\src\Cassette\FileSystemWatchingBundleRebuilder.cs,QueueRebuild,The following statement contains a magic number: rebuildDelayTimer.Change (100' Timeout.Infinite);  
Magic Number,Cassette,BundleFactoryBase,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleFactoryBase.cs,ThrowIfShouldReferenceNonMinFile,The following statement contains a magic number: if (minMatch.Success) {  	var nonMinFilename = minMatch.Groups [1].Value + minMatch.Groups [2].Value;  	if (filesByPath.ContainsKey (nonMinFilename)) {  		throw new ArgumentException (string.Format ("Bundle \"{0}\" references \"{1}\" when it should reference \"{2}\"."' bundle.Path' filename' nonMinFilename));  	}  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,EscapeToJavascriptString,The following statement contains a magic number: for (int i = 0; i < jsonString.Length;) {  	c = jsonString [i++];  	if (c == '\\') {  		int remainingLength = jsonString.Length - i;  		if (remainingLength >= 2) {  			char lookahead = jsonString [i];  			if (lookahead == '\\') {  				sb.Append ('\\');  				++i;  			} else if (lookahead == '"') {  				sb.Append ("\"");  				++i;  			} else if (lookahead == 't') {  				sb.Append ('\t');  				++i;  			} else if (lookahead == 'b') {  				sb.Append ('\b');  				++i;  			} else if (lookahead == 'n') {  				sb.Append ('\n');  				++i;  			} else if (lookahead == 'r') {  				sb.Append ('\r');  				++i;  			}  		}  	} else {  		sb.Append (c);  	}  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,EscapeToJavascriptString,The following statement contains a magic number: if (c == '\\') {  	int remainingLength = jsonString.Length - i;  	if (remainingLength >= 2) {  		char lookahead = jsonString [i];  		if (lookahead == '\\') {  			sb.Append ('\\');  			++i;  		} else if (lookahead == '"') {  			sb.Append ("\"");  			++i;  		} else if (lookahead == 't') {  			sb.Append ('\t');  			++i;  		} else if (lookahead == 'b') {  			sb.Append ('\b');  			++i;  		} else if (lookahead == 'n') {  			sb.Append ('\n');  			++i;  		} else if (lookahead == 'r') {  			sb.Append ('\r');  			++i;  		}  	}  } else {  	sb.Append (c);  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,EscapeToJavascriptString,The following statement contains a magic number: if (remainingLength >= 2) {  	char lookahead = jsonString [i];  	if (lookahead == '\\') {  		sb.Append ('\\');  		++i;  	} else if (lookahead == '"') {  		sb.Append ("\"");  		++i;  	} else if (lookahead == 't') {  		sb.Append ('\t');  		++i;  	} else if (lookahead == 'b') {  		sb.Append ('\b');  		++i;  	} else if (lookahead == 'n') {  		sb.Append ('\n');  		++i;  	} else if (lookahead == 'r') {  		sb.Append ('\r');  		++i;  	}  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete) {  	if (index == json.Length) {  		break;  	}  	c = json [index++];  	if (c == '"') {  		complete = true;  		break;  	} else if (c == '\\') {  		if (index == json.Length)  			break;  		c = json [index++];  		if (c == '"')  			s.Append ('"');  		else if (c == '\\')  			s.Append ('\\');  		else if (c == '/')  			s.Append ('/');  		else if (c == 'b')  			s.Append ('\b');  		else if (c == 'f')  			s.Append ('\f');  		else if (c == 'n')  			s.Append ('\n');  		else if (c == 'r')  			s.Append ('\r');  		else if (c == 't')  			s.Append ('\t');  		else if (c == 'u') {  			int remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				// parse the 32 bit hex into an integer codepoint  				uint codePoint;  				if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  					return "";  				// convert the integer codepoint to a unicode char and add to string  				if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  				 {  					index += 4;  					// skip 4 chars  					remainingLength = json.Length - index;  					if (remainingLength >= 6) {  						uint lowCodePoint;  						if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  							if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  							 {  								s.Append ((char)codePoint);  								s.Append ((char)lowCodePoint);  								index += 6;  								// skip 6 chars  								continue;  							}  						}  					}  					success = false;  					// invalid surrogate pair  					return "";  				}  				#if SILVERLIGHT  				                            s.Append(ConvertFromUtf32((int)codePoint)); #else  				s.Append (Char.ConvertFromUtf32 ((int)codePoint));  				#endif  				// skip 4 chars  				index += 4;  			} else  				break;  		}  	} else  		s.Append (c);  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete) {  	if (index == json.Length) {  		break;  	}  	c = json [index++];  	if (c == '"') {  		complete = true;  		break;  	} else if (c == '\\') {  		if (index == json.Length)  			break;  		c = json [index++];  		if (c == '"')  			s.Append ('"');  		else if (c == '\\')  			s.Append ('\\');  		else if (c == '/')  			s.Append ('/');  		else if (c == 'b')  			s.Append ('\b');  		else if (c == 'f')  			s.Append ('\f');  		else if (c == 'n')  			s.Append ('\n');  		else if (c == 'r')  			s.Append ('\r');  		else if (c == 't')  			s.Append ('\t');  		else if (c == 'u') {  			int remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				// parse the 32 bit hex into an integer codepoint  				uint codePoint;  				if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  					return "";  				// convert the integer codepoint to a unicode char and add to string  				if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  				 {  					index += 4;  					// skip 4 chars  					remainingLength = json.Length - index;  					if (remainingLength >= 6) {  						uint lowCodePoint;  						if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  							if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  							 {  								s.Append ((char)codePoint);  								s.Append ((char)lowCodePoint);  								index += 6;  								// skip 6 chars  								continue;  							}  						}  					}  					success = false;  					// invalid surrogate pair  					return "";  				}  				#if SILVERLIGHT  				                            s.Append(ConvertFromUtf32((int)codePoint)); #else  				s.Append (Char.ConvertFromUtf32 ((int)codePoint));  				#endif  				// skip 4 chars  				index += 4;  			} else  				break;  		}  	} else  		s.Append (c);  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete) {  	if (index == json.Length) {  		break;  	}  	c = json [index++];  	if (c == '"') {  		complete = true;  		break;  	} else if (c == '\\') {  		if (index == json.Length)  			break;  		c = json [index++];  		if (c == '"')  			s.Append ('"');  		else if (c == '\\')  			s.Append ('\\');  		else if (c == '/')  			s.Append ('/');  		else if (c == 'b')  			s.Append ('\b');  		else if (c == 'f')  			s.Append ('\f');  		else if (c == 'n')  			s.Append ('\n');  		else if (c == 'r')  			s.Append ('\r');  		else if (c == 't')  			s.Append ('\t');  		else if (c == 'u') {  			int remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				// parse the 32 bit hex into an integer codepoint  				uint codePoint;  				if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  					return "";  				// convert the integer codepoint to a unicode char and add to string  				if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  				 {  					index += 4;  					// skip 4 chars  					remainingLength = json.Length - index;  					if (remainingLength >= 6) {  						uint lowCodePoint;  						if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  							if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  							 {  								s.Append ((char)codePoint);  								s.Append ((char)lowCodePoint);  								index += 6;  								// skip 6 chars  								continue;  							}  						}  					}  					success = false;  					// invalid surrogate pair  					return "";  				}  				#if SILVERLIGHT  				                            s.Append(ConvertFromUtf32((int)codePoint)); #else  				s.Append (Char.ConvertFromUtf32 ((int)codePoint));  				#endif  				// skip 4 chars  				index += 4;  			} else  				break;  		}  	} else  		s.Append (c);  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete) {  	if (index == json.Length) {  		break;  	}  	c = json [index++];  	if (c == '"') {  		complete = true;  		break;  	} else if (c == '\\') {  		if (index == json.Length)  			break;  		c = json [index++];  		if (c == '"')  			s.Append ('"');  		else if (c == '\\')  			s.Append ('\\');  		else if (c == '/')  			s.Append ('/');  		else if (c == 'b')  			s.Append ('\b');  		else if (c == 'f')  			s.Append ('\f');  		else if (c == 'n')  			s.Append ('\n');  		else if (c == 'r')  			s.Append ('\r');  		else if (c == 't')  			s.Append ('\t');  		else if (c == 'u') {  			int remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				// parse the 32 bit hex into an integer codepoint  				uint codePoint;  				if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  					return "";  				// convert the integer codepoint to a unicode char and add to string  				if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  				 {  					index += 4;  					// skip 4 chars  					remainingLength = json.Length - index;  					if (remainingLength >= 6) {  						uint lowCodePoint;  						if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  							if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  							 {  								s.Append ((char)codePoint);  								s.Append ((char)lowCodePoint);  								index += 6;  								// skip 6 chars  								continue;  							}  						}  					}  					success = false;  					// invalid surrogate pair  					return "";  				}  				#if SILVERLIGHT  				                            s.Append(ConvertFromUtf32((int)codePoint)); #else  				s.Append (Char.ConvertFromUtf32 ((int)codePoint));  				#endif  				// skip 4 chars  				index += 4;  			} else  				break;  		}  	} else  		s.Append (c);  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete) {  	if (index == json.Length) {  		break;  	}  	c = json [index++];  	if (c == '"') {  		complete = true;  		break;  	} else if (c == '\\') {  		if (index == json.Length)  			break;  		c = json [index++];  		if (c == '"')  			s.Append ('"');  		else if (c == '\\')  			s.Append ('\\');  		else if (c == '/')  			s.Append ('/');  		else if (c == 'b')  			s.Append ('\b');  		else if (c == 'f')  			s.Append ('\f');  		else if (c == 'n')  			s.Append ('\n');  		else if (c == 'r')  			s.Append ('\r');  		else if (c == 't')  			s.Append ('\t');  		else if (c == 'u') {  			int remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				// parse the 32 bit hex into an integer codepoint  				uint codePoint;  				if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  					return "";  				// convert the integer codepoint to a unicode char and add to string  				if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  				 {  					index += 4;  					// skip 4 chars  					remainingLength = json.Length - index;  					if (remainingLength >= 6) {  						uint lowCodePoint;  						if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  							if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  							 {  								s.Append ((char)codePoint);  								s.Append ((char)lowCodePoint);  								index += 6;  								// skip 6 chars  								continue;  							}  						}  					}  					success = false;  					// invalid surrogate pair  					return "";  				}  				#if SILVERLIGHT  				                            s.Append(ConvertFromUtf32((int)codePoint)); #else  				s.Append (Char.ConvertFromUtf32 ((int)codePoint));  				#endif  				// skip 4 chars  				index += 4;  			} else  				break;  		}  	} else  		s.Append (c);  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete) {  	if (index == json.Length) {  		break;  	}  	c = json [index++];  	if (c == '"') {  		complete = true;  		break;  	} else if (c == '\\') {  		if (index == json.Length)  			break;  		c = json [index++];  		if (c == '"')  			s.Append ('"');  		else if (c == '\\')  			s.Append ('\\');  		else if (c == '/')  			s.Append ('/');  		else if (c == 'b')  			s.Append ('\b');  		else if (c == 'f')  			s.Append ('\f');  		else if (c == 'n')  			s.Append ('\n');  		else if (c == 'r')  			s.Append ('\r');  		else if (c == 't')  			s.Append ('\t');  		else if (c == 'u') {  			int remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				// parse the 32 bit hex into an integer codepoint  				uint codePoint;  				if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  					return "";  				// convert the integer codepoint to a unicode char and add to string  				if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  				 {  					index += 4;  					// skip 4 chars  					remainingLength = json.Length - index;  					if (remainingLength >= 6) {  						uint lowCodePoint;  						if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  							if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  							 {  								s.Append ((char)codePoint);  								s.Append ((char)lowCodePoint);  								index += 6;  								// skip 6 chars  								continue;  							}  						}  					}  					success = false;  					// invalid surrogate pair  					return "";  				}  				#if SILVERLIGHT  				                            s.Append(ConvertFromUtf32((int)codePoint)); #else  				s.Append (Char.ConvertFromUtf32 ((int)codePoint));  				#endif  				// skip 4 chars  				index += 4;  			} else  				break;  		}  	} else  		s.Append (c);  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete) {  	if (index == json.Length) {  		break;  	}  	c = json [index++];  	if (c == '"') {  		complete = true;  		break;  	} else if (c == '\\') {  		if (index == json.Length)  			break;  		c = json [index++];  		if (c == '"')  			s.Append ('"');  		else if (c == '\\')  			s.Append ('\\');  		else if (c == '/')  			s.Append ('/');  		else if (c == 'b')  			s.Append ('\b');  		else if (c == 'f')  			s.Append ('\f');  		else if (c == 'n')  			s.Append ('\n');  		else if (c == 'r')  			s.Append ('\r');  		else if (c == 't')  			s.Append ('\t');  		else if (c == 'u') {  			int remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				// parse the 32 bit hex into an integer codepoint  				uint codePoint;  				if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  					return "";  				// convert the integer codepoint to a unicode char and add to string  				if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  				 {  					index += 4;  					// skip 4 chars  					remainingLength = json.Length - index;  					if (remainingLength >= 6) {  						uint lowCodePoint;  						if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  							if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  							 {  								s.Append ((char)codePoint);  								s.Append ((char)lowCodePoint);  								index += 6;  								// skip 6 chars  								continue;  							}  						}  					}  					success = false;  					// invalid surrogate pair  					return "";  				}  				#if SILVERLIGHT  				                            s.Append(ConvertFromUtf32((int)codePoint)); #else  				s.Append (Char.ConvertFromUtf32 ((int)codePoint));  				#endif  				// skip 4 chars  				index += 4;  			} else  				break;  		}  	} else  		s.Append (c);  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete) {  	if (index == json.Length) {  		break;  	}  	c = json [index++];  	if (c == '"') {  		complete = true;  		break;  	} else if (c == '\\') {  		if (index == json.Length)  			break;  		c = json [index++];  		if (c == '"')  			s.Append ('"');  		else if (c == '\\')  			s.Append ('\\');  		else if (c == '/')  			s.Append ('/');  		else if (c == 'b')  			s.Append ('\b');  		else if (c == 'f')  			s.Append ('\f');  		else if (c == 'n')  			s.Append ('\n');  		else if (c == 'r')  			s.Append ('\r');  		else if (c == 't')  			s.Append ('\t');  		else if (c == 'u') {  			int remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				// parse the 32 bit hex into an integer codepoint  				uint codePoint;  				if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  					return "";  				// convert the integer codepoint to a unicode char and add to string  				if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  				 {  					index += 4;  					// skip 4 chars  					remainingLength = json.Length - index;  					if (remainingLength >= 6) {  						uint lowCodePoint;  						if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  							if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  							 {  								s.Append ((char)codePoint);  								s.Append ((char)lowCodePoint);  								index += 6;  								// skip 6 chars  								continue;  							}  						}  					}  					success = false;  					// invalid surrogate pair  					return "";  				}  				#if SILVERLIGHT  				                            s.Append(ConvertFromUtf32((int)codePoint)); #else  				s.Append (Char.ConvertFromUtf32 ((int)codePoint));  				#endif  				// skip 4 chars  				index += 4;  			} else  				break;  		}  	} else  		s.Append (c);  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete) {  	if (index == json.Length) {  		break;  	}  	c = json [index++];  	if (c == '"') {  		complete = true;  		break;  	} else if (c == '\\') {  		if (index == json.Length)  			break;  		c = json [index++];  		if (c == '"')  			s.Append ('"');  		else if (c == '\\')  			s.Append ('\\');  		else if (c == '/')  			s.Append ('/');  		else if (c == 'b')  			s.Append ('\b');  		else if (c == 'f')  			s.Append ('\f');  		else if (c == 'n')  			s.Append ('\n');  		else if (c == 'r')  			s.Append ('\r');  		else if (c == 't')  			s.Append ('\t');  		else if (c == 'u') {  			int remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				// parse the 32 bit hex into an integer codepoint  				uint codePoint;  				if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  					return "";  				// convert the integer codepoint to a unicode char and add to string  				if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  				 {  					index += 4;  					// skip 4 chars  					remainingLength = json.Length - index;  					if (remainingLength >= 6) {  						uint lowCodePoint;  						if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  							if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  							 {  								s.Append ((char)codePoint);  								s.Append ((char)lowCodePoint);  								index += 6;  								// skip 6 chars  								continue;  							}  						}  					}  					success = false;  					// invalid surrogate pair  					return "";  				}  				#if SILVERLIGHT  				                            s.Append(ConvertFromUtf32((int)codePoint)); #else  				s.Append (Char.ConvertFromUtf32 ((int)codePoint));  				#endif  				// skip 4 chars  				index += 4;  			} else  				break;  		}  	} else  		s.Append (c);  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	complete = true;  	break;  } else if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	complete = true;  	break;  } else if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	complete = true;  	break;  } else if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	complete = true;  	break;  } else if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	complete = true;  	break;  } else if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	complete = true;  	break;  } else if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	complete = true;  	break;  } else if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	complete = true;  	break;  } else if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	complete = true;  	break;  } else if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"')  	s.Append ('"');  else if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"')  	s.Append ('"');  else if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"')  	s.Append ('"');  else if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"')  	s.Append ('"');  else if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"')  	s.Append ('"');  else if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"')  	s.Append ('"');  else if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"')  	s.Append ('"');  else if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"')  	s.Append ('"');  else if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"')  	s.Append ('"');  else if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 4) {  	// parse the 32 bit hex into an integer codepoint  	uint codePoint;  	if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  		return "";  	// convert the integer codepoint to a unicode char and add to string  	if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  	 {  		index += 4;  		// skip 4 chars  		remainingLength = json.Length - index;  		if (remainingLength >= 6) {  			uint lowCodePoint;  			if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  				if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  				 {  					s.Append ((char)codePoint);  					s.Append ((char)lowCodePoint);  					index += 6;  					// skip 6 chars  					continue;  				}  			}  		}  		success = false;  		// invalid surrogate pair  		return "";  	}  	#if SILVERLIGHT  	                            s.Append(ConvertFromUtf32((int)codePoint)); #else  	s.Append (Char.ConvertFromUtf32 ((int)codePoint));  	#endif  	// skip 4 chars  	index += 4;  } else  	break;  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 4) {  	// parse the 32 bit hex into an integer codepoint  	uint codePoint;  	if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  		return "";  	// convert the integer codepoint to a unicode char and add to string  	if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  	 {  		index += 4;  		// skip 4 chars  		remainingLength = json.Length - index;  		if (remainingLength >= 6) {  			uint lowCodePoint;  			if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  				if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  				 {  					s.Append ((char)codePoint);  					s.Append ((char)lowCodePoint);  					index += 6;  					// skip 6 chars  					continue;  				}  			}  		}  		success = false;  		// invalid surrogate pair  		return "";  	}  	#if SILVERLIGHT  	                            s.Append(ConvertFromUtf32((int)codePoint)); #else  	s.Append (Char.ConvertFromUtf32 ((int)codePoint));  	#endif  	// skip 4 chars  	index += 4;  } else  	break;  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 4) {  	// parse the 32 bit hex into an integer codepoint  	uint codePoint;  	if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  		return "";  	// convert the integer codepoint to a unicode char and add to string  	if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  	 {  		index += 4;  		// skip 4 chars  		remainingLength = json.Length - index;  		if (remainingLength >= 6) {  			uint lowCodePoint;  			if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  				if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  				 {  					s.Append ((char)codePoint);  					s.Append ((char)lowCodePoint);  					index += 6;  					// skip 6 chars  					continue;  				}  			}  		}  		success = false;  		// invalid surrogate pair  		return "";  	}  	#if SILVERLIGHT  	                            s.Append(ConvertFromUtf32((int)codePoint)); #else  	s.Append (Char.ConvertFromUtf32 ((int)codePoint));  	#endif  	// skip 4 chars  	index += 4;  } else  	break;  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 4) {  	// parse the 32 bit hex into an integer codepoint  	uint codePoint;  	if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  		return "";  	// convert the integer codepoint to a unicode char and add to string  	if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  	 {  		index += 4;  		// skip 4 chars  		remainingLength = json.Length - index;  		if (remainingLength >= 6) {  			uint lowCodePoint;  			if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  				if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  				 {  					s.Append ((char)codePoint);  					s.Append ((char)lowCodePoint);  					index += 6;  					// skip 6 chars  					continue;  				}  			}  		}  		success = false;  		// invalid surrogate pair  		return "";  	}  	#if SILVERLIGHT  	                            s.Append(ConvertFromUtf32((int)codePoint)); #else  	s.Append (Char.ConvertFromUtf32 ((int)codePoint));  	#endif  	// skip 4 chars  	index += 4;  } else  	break;  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 4) {  	// parse the 32 bit hex into an integer codepoint  	uint codePoint;  	if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  		return "";  	// convert the integer codepoint to a unicode char and add to string  	if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  	 {  		index += 4;  		// skip 4 chars  		remainingLength = json.Length - index;  		if (remainingLength >= 6) {  			uint lowCodePoint;  			if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  				if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  				 {  					s.Append ((char)codePoint);  					s.Append ((char)lowCodePoint);  					index += 6;  					// skip 6 chars  					continue;  				}  			}  		}  		success = false;  		// invalid surrogate pair  		return "";  	}  	#if SILVERLIGHT  	                            s.Append(ConvertFromUtf32((int)codePoint)); #else  	s.Append (Char.ConvertFromUtf32 ((int)codePoint));  	#endif  	// skip 4 chars  	index += 4;  } else  	break;  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 4) {  	// parse the 32 bit hex into an integer codepoint  	uint codePoint;  	if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  		return "";  	// convert the integer codepoint to a unicode char and add to string  	if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  	 {  		index += 4;  		// skip 4 chars  		remainingLength = json.Length - index;  		if (remainingLength >= 6) {  			uint lowCodePoint;  			if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  				if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  				 {  					s.Append ((char)codePoint);  					s.Append ((char)lowCodePoint);  					index += 6;  					// skip 6 chars  					continue;  				}  			}  		}  		success = false;  		// invalid surrogate pair  		return "";  	}  	#if SILVERLIGHT  	                            s.Append(ConvertFromUtf32((int)codePoint)); #else  	s.Append (Char.ConvertFromUtf32 ((int)codePoint));  	#endif  	// skip 4 chars  	index += 4;  } else  	break;  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 4) {  	// parse the 32 bit hex into an integer codepoint  	uint codePoint;  	if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  		return "";  	// convert the integer codepoint to a unicode char and add to string  	if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  	 {  		index += 4;  		// skip 4 chars  		remainingLength = json.Length - index;  		if (remainingLength >= 6) {  			uint lowCodePoint;  			if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  				if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  				 {  					s.Append ((char)codePoint);  					s.Append ((char)lowCodePoint);  					index += 6;  					// skip 6 chars  					continue;  				}  			}  		}  		success = false;  		// invalid surrogate pair  		return "";  	}  	#if SILVERLIGHT  	                            s.Append(ConvertFromUtf32((int)codePoint)); #else  	s.Append (Char.ConvertFromUtf32 ((int)codePoint));  	#endif  	// skip 4 chars  	index += 4;  } else  	break;  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 4) {  	// parse the 32 bit hex into an integer codepoint  	uint codePoint;  	if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  		return "";  	// convert the integer codepoint to a unicode char and add to string  	if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  	 {  		index += 4;  		// skip 4 chars  		remainingLength = json.Length - index;  		if (remainingLength >= 6) {  			uint lowCodePoint;  			if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  				if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  				 {  					s.Append ((char)codePoint);  					s.Append ((char)lowCodePoint);  					index += 6;  					// skip 6 chars  					continue;  				}  			}  		}  		success = false;  		// invalid surrogate pair  		return "";  	}  	#if SILVERLIGHT  	                            s.Append(ConvertFromUtf32((int)codePoint)); #else  	s.Append (Char.ConvertFromUtf32 ((int)codePoint));  	#endif  	// skip 4 chars  	index += 4;  } else  	break;  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 4) {  	// parse the 32 bit hex into an integer codepoint  	uint codePoint;  	if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  		return "";  	// convert the integer codepoint to a unicode char and add to string  	if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  	 {  		index += 4;  		// skip 4 chars  		remainingLength = json.Length - index;  		if (remainingLength >= 6) {  			uint lowCodePoint;  			if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  				if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  				 {  					s.Append ((char)codePoint);  					s.Append ((char)lowCodePoint);  					index += 6;  					// skip 6 chars  					continue;  				}  			}  		}  		success = false;  		// invalid surrogate pair  		return "";  	}  	#if SILVERLIGHT  	                            s.Append(ConvertFromUtf32((int)codePoint)); #else  	s.Append (Char.ConvertFromUtf32 ((int)codePoint));  	#endif  	// skip 4 chars  	index += 4;  } else  	break;  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  	return "";  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate   {  	index += 4;  	// skip 4 chars  	remainingLength = json.Length - index;  	if (remainingLength >= 6) {  		uint lowCodePoint;  		if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  			if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  			 {  				s.Append ((char)codePoint);  				s.Append ((char)lowCodePoint);  				index += 6;  				// skip 6 chars  				continue;  			}  		}  	}  	success = false;  	// invalid surrogate pair  	return "";  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate   {  	index += 4;  	// skip 4 chars  	remainingLength = json.Length - index;  	if (remainingLength >= 6) {  		uint lowCodePoint;  		if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  			if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  			 {  				s.Append ((char)codePoint);  				s.Append ((char)lowCodePoint);  				index += 6;  				// skip 6 chars  				continue;  			}  		}  	}  	success = false;  	// invalid surrogate pair  	return "";  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate   {  	index += 4;  	// skip 4 chars  	remainingLength = json.Length - index;  	if (remainingLength >= 6) {  		uint lowCodePoint;  		if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  			if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  			 {  				s.Append ((char)codePoint);  				s.Append ((char)lowCodePoint);  				index += 6;  				// skip 6 chars  				continue;  			}  		}  	}  	success = false;  	// invalid surrogate pair  	return "";  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate   {  	index += 4;  	// skip 4 chars  	remainingLength = json.Length - index;  	if (remainingLength >= 6) {  		uint lowCodePoint;  		if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  			if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  			 {  				s.Append ((char)codePoint);  				s.Append ((char)lowCodePoint);  				index += 6;  				// skip 6 chars  				continue;  			}  		}  	}  	success = false;  	// invalid surrogate pair  	return "";  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate   {  	index += 4;  	// skip 4 chars  	remainingLength = json.Length - index;  	if (remainingLength >= 6) {  		uint lowCodePoint;  		if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  			if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  			 {  				s.Append ((char)codePoint);  				s.Append ((char)lowCodePoint);  				index += 6;  				// skip 6 chars  				continue;  			}  		}  	}  	success = false;  	// invalid surrogate pair  	return "";  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate   {  	index += 4;  	// skip 4 chars  	remainingLength = json.Length - index;  	if (remainingLength >= 6) {  		uint lowCodePoint;  		if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  			if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  			 {  				s.Append ((char)codePoint);  				s.Append ((char)lowCodePoint);  				index += 6;  				// skip 6 chars  				continue;  			}  		}  	}  	success = false;  	// invalid surrogate pair  	return "";  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: index += 4;  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 6) {  	uint lowCodePoint;  	if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  		if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  		 {  			s.Append ((char)codePoint);  			s.Append ((char)lowCodePoint);  			index += 6;  			// skip 6 chars  			continue;  		}  	}  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 6) {  	uint lowCodePoint;  	if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  		if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  		 {  			s.Append ((char)codePoint);  			s.Append ((char)lowCodePoint);  			index += 6;  			// skip 6 chars  			continue;  		}  	}  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 6) {  	uint lowCodePoint;  	if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  		if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  		 {  			s.Append ((char)codePoint);  			s.Append ((char)lowCodePoint);  			index += 6;  			// skip 6 chars  			continue;  		}  	}  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 6) {  	uint lowCodePoint;  	if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  		if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  		 {  			s.Append ((char)codePoint);  			s.Append ((char)lowCodePoint);  			index += 6;  			// skip 6 chars  			continue;  		}  	}  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 6) {  	uint lowCodePoint;  	if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  		if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  		 {  			s.Append ((char)codePoint);  			s.Append ((char)lowCodePoint);  			index += 6;  			// skip 6 chars  			continue;  		}  	}  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  	if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  	 {  		s.Append ((char)codePoint);  		s.Append ((char)lowCodePoint);  		index += 6;  		// skip 6 chars  		continue;  	}  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  	if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  	 {  		s.Append ((char)codePoint);  		s.Append ((char)lowCodePoint);  		index += 6;  		// skip 6 chars  		continue;  	}  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  	if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  	 {  		s.Append ((char)codePoint);  		s.Append ((char)lowCodePoint);  		index += 6;  		// skip 6 chars  		continue;  	}  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  	if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  	 {  		s.Append ((char)codePoint);  		s.Append ((char)lowCodePoint);  		index += 6;  		// skip 6 chars  		continue;  	}  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate   {  	s.Append ((char)codePoint);  	s.Append ((char)lowCodePoint);  	index += 6;  	// skip 6 chars  	continue;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: index += 6;  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseString,The following statement contains a magic number: index += 4;  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5) {  	if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  		index += 5;  		return TOKEN_FALSE;  	}  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5) {  	if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  		index += 5;  		return TOKEN_FALSE;  	}  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5) {  	if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  		index += 5;  		return TOKEN_FALSE;  	}  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5) {  	if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  		index += 5;  		return TOKEN_FALSE;  	}  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5) {  	if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  		index += 5;  		return TOKEN_FALSE;  	}  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,NextToken,The following statement contains a magic number: if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  	index += 5;  	return TOKEN_FALSE;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,NextToken,The following statement contains a magic number: if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  	index += 5;  	return TOKEN_FALSE;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,NextToken,The following statement contains a magic number: if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  	index += 5;  	return TOKEN_FALSE;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,NextToken,The following statement contains a magic number: if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  	index += 5;  	return TOKEN_FALSE;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,NextToken,The following statement contains a magic number: index += 5;  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  		index += 4;  		return TOKEN_TRUE;  	}  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  		index += 4;  		return TOKEN_TRUE;  	}  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  		index += 4;  		return TOKEN_TRUE;  	}  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  		index += 4;  		return TOKEN_TRUE;  	}  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,NextToken,The following statement contains a magic number: if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  	index += 4;  	return TOKEN_TRUE;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,NextToken,The following statement contains a magic number: if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  	index += 4;  	return TOKEN_TRUE;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,NextToken,The following statement contains a magic number: if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  	index += 4;  	return TOKEN_TRUE;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,NextToken,The following statement contains a magic number: index += 4;  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  		index += 4;  		return TOKEN_NULL;  	}  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  		index += 4;  		return TOKEN_NULL;  	}  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  		index += 4;  		return TOKEN_NULL;  	}  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  		index += 4;  		return TOKEN_NULL;  	}  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,NextToken,The following statement contains a magic number: if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  	index += 4;  	return TOKEN_NULL;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,NextToken,The following statement contains a magic number: if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  	index += 4;  	return TOKEN_NULL;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,NextToken,The following statement contains a magic number: if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  	index += 4;  	return TOKEN_NULL;  }  
Magic Number,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,NextToken,The following statement contains a magic number: index += 4;  
Magic Number,Cassette.BundleProcessing,ReferenceParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleProcessing\ReferenceParser.cs,ParsePaths,The following statement contains a magic number: for (var i = 10; i < comment.Length; i++) {  	var c = comment [i];  	switch (state) {  	case State.None:  		if (char.IsWhiteSpace (c))  			continue;  		else if (c == '"') {  			state = State.InDoubleQuote;  			pathStart = i + 1;  		} else if (c == '\'') {  			state = State.InSingleQuote;  			pathStart = i + 1;  		} else {  			state = State.InRawPath;  			pathStart = i;  		}  		break;  	case State.InSingleQuote:  		if (c == '\'') {  			yield return comment.Substring (pathStart' i - pathStart);  			state = State.None;  		}  		break;  	case State.InDoubleQuote:  		if (c == '"') {  			yield return comment.Substring (pathStart' i - pathStart);  			state = State.None;  		}  		break;  	case State.InRawPath:  		if (char.IsWhiteSpace (c)) {  			yield return comment.Substring (pathStart' i - pathStart);  			state = State.None;  		}  		break;  	}  }  
Magic Number,Cassette.HtmlTemplates,HtmlTemplateCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HtmlTemplates\HtmlTemplateCommentParser.cs,Parse,The following statement contains a magic number: for (var i = 0; i <= code.Length - 3; i++) {  	switch (state) {  	case State.Code:  		if (code [i] == '\r') {  			if (i < code.Length - 1 && code [i + 1] == '\n') {  				i++;  			}  			line++;  			continue;  		} else if (code [i] == '\n') {  			line++;  			continue;  		} else if (i < code.Length - 4 && code.Substring (i' 4) == "<!--") {  			state = State.Comment;  			i += 3;  			commentStart = i + 1;  		}  		break;  	case State.Comment:  		if (code.Substring (i' 3) == "-->") {  			yield return new Comment {  				LineNumber = line'  				Value = code.Substring (commentStart' i - commentStart)  			};  			i += 2;  			state = State.Code;  		} else if (code [i] == '\r') {  			if (i < code.Length - 1 && code [i + 1] == '\n') {  				yield return new Comment {  					LineNumber = line'  					Value = code.Substring (commentStart' i - commentStart)  				};  				i++;  				commentStart = i + 1;  			}  			line++;  		} else if (code [i] == '\n') {  			yield return new Comment {  				LineNumber = line'  				Value = code.Substring (commentStart' i - commentStart)  			};  			i++;  			line++;  			commentStart = i;  		}  		break;  	}  }  
Magic Number,Cassette.HtmlTemplates,HtmlTemplateCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HtmlTemplates\HtmlTemplateCommentParser.cs,Parse,The following statement contains a magic number: for (var i = 0; i <= code.Length - 3; i++) {  	switch (state) {  	case State.Code:  		if (code [i] == '\r') {  			if (i < code.Length - 1 && code [i + 1] == '\n') {  				i++;  			}  			line++;  			continue;  		} else if (code [i] == '\n') {  			line++;  			continue;  		} else if (i < code.Length - 4 && code.Substring (i' 4) == "<!--") {  			state = State.Comment;  			i += 3;  			commentStart = i + 1;  		}  		break;  	case State.Comment:  		if (code.Substring (i' 3) == "-->") {  			yield return new Comment {  				LineNumber = line'  				Value = code.Substring (commentStart' i - commentStart)  			};  			i += 2;  			state = State.Code;  		} else if (code [i] == '\r') {  			if (i < code.Length - 1 && code [i + 1] == '\n') {  				yield return new Comment {  					LineNumber = line'  					Value = code.Substring (commentStart' i - commentStart)  				};  				i++;  				commentStart = i + 1;  			}  			line++;  		} else if (code [i] == '\n') {  			yield return new Comment {  				LineNumber = line'  				Value = code.Substring (commentStart' i - commentStart)  			};  			i++;  			line++;  			commentStart = i;  		}  		break;  	}  }  
Magic Number,Cassette.HtmlTemplates,HtmlTemplateCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HtmlTemplates\HtmlTemplateCommentParser.cs,Parse,The following statement contains a magic number: for (var i = 0; i <= code.Length - 3; i++) {  	switch (state) {  	case State.Code:  		if (code [i] == '\r') {  			if (i < code.Length - 1 && code [i + 1] == '\n') {  				i++;  			}  			line++;  			continue;  		} else if (code [i] == '\n') {  			line++;  			continue;  		} else if (i < code.Length - 4 && code.Substring (i' 4) == "<!--") {  			state = State.Comment;  			i += 3;  			commentStart = i + 1;  		}  		break;  	case State.Comment:  		if (code.Substring (i' 3) == "-->") {  			yield return new Comment {  				LineNumber = line'  				Value = code.Substring (commentStart' i - commentStart)  			};  			i += 2;  			state = State.Code;  		} else if (code [i] == '\r') {  			if (i < code.Length - 1 && code [i + 1] == '\n') {  				yield return new Comment {  					LineNumber = line'  					Value = code.Substring (commentStart' i - commentStart)  				};  				i++;  				commentStart = i + 1;  			}  			line++;  		} else if (code [i] == '\n') {  			yield return new Comment {  				LineNumber = line'  				Value = code.Substring (commentStart' i - commentStart)  			};  			i++;  			line++;  			commentStart = i;  		}  		break;  	}  }  
Magic Number,Cassette.HtmlTemplates,HtmlTemplateCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HtmlTemplates\HtmlTemplateCommentParser.cs,Parse,The following statement contains a magic number: for (var i = 0; i <= code.Length - 3; i++) {  	switch (state) {  	case State.Code:  		if (code [i] == '\r') {  			if (i < code.Length - 1 && code [i + 1] == '\n') {  				i++;  			}  			line++;  			continue;  		} else if (code [i] == '\n') {  			line++;  			continue;  		} else if (i < code.Length - 4 && code.Substring (i' 4) == "<!--") {  			state = State.Comment;  			i += 3;  			commentStart = i + 1;  		}  		break;  	case State.Comment:  		if (code.Substring (i' 3) == "-->") {  			yield return new Comment {  				LineNumber = line'  				Value = code.Substring (commentStart' i - commentStart)  			};  			i += 2;  			state = State.Code;  		} else if (code [i] == '\r') {  			if (i < code.Length - 1 && code [i + 1] == '\n') {  				yield return new Comment {  					LineNumber = line'  					Value = code.Substring (commentStart' i - commentStart)  				};  				i++;  				commentStart = i + 1;  			}  			line++;  		} else if (code [i] == '\n') {  			yield return new Comment {  				LineNumber = line'  				Value = code.Substring (commentStart' i - commentStart)  			};  			i++;  			line++;  			commentStart = i;  		}  		break;  	}  }  
Magic Number,Cassette.HtmlTemplates,HtmlTemplateCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HtmlTemplates\HtmlTemplateCommentParser.cs,Parse,The following statement contains a magic number: for (var i = 0; i <= code.Length - 3; i++) {  	switch (state) {  	case State.Code:  		if (code [i] == '\r') {  			if (i < code.Length - 1 && code [i + 1] == '\n') {  				i++;  			}  			line++;  			continue;  		} else if (code [i] == '\n') {  			line++;  			continue;  		} else if (i < code.Length - 4 && code.Substring (i' 4) == "<!--") {  			state = State.Comment;  			i += 3;  			commentStart = i + 1;  		}  		break;  	case State.Comment:  		if (code.Substring (i' 3) == "-->") {  			yield return new Comment {  				LineNumber = line'  				Value = code.Substring (commentStart' i - commentStart)  			};  			i += 2;  			state = State.Code;  		} else if (code [i] == '\r') {  			if (i < code.Length - 1 && code [i + 1] == '\n') {  				yield return new Comment {  					LineNumber = line'  					Value = code.Substring (commentStart' i - commentStart)  				};  				i++;  				commentStart = i + 1;  			}  			line++;  		} else if (code [i] == '\n') {  			yield return new Comment {  				LineNumber = line'  				Value = code.Substring (commentStart' i - commentStart)  			};  			i++;  			line++;  			commentStart = i;  		}  		break;  	}  }  
Magic Number,Cassette.HtmlTemplates,HtmlTemplateCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HtmlTemplates\HtmlTemplateCommentParser.cs,Parse,The following statement contains a magic number: for (var i = 0; i <= code.Length - 3; i++) {  	switch (state) {  	case State.Code:  		if (code [i] == '\r') {  			if (i < code.Length - 1 && code [i + 1] == '\n') {  				i++;  			}  			line++;  			continue;  		} else if (code [i] == '\n') {  			line++;  			continue;  		} else if (i < code.Length - 4 && code.Substring (i' 4) == "<!--") {  			state = State.Comment;  			i += 3;  			commentStart = i + 1;  		}  		break;  	case State.Comment:  		if (code.Substring (i' 3) == "-->") {  			yield return new Comment {  				LineNumber = line'  				Value = code.Substring (commentStart' i - commentStart)  			};  			i += 2;  			state = State.Code;  		} else if (code [i] == '\r') {  			if (i < code.Length - 1 && code [i + 1] == '\n') {  				yield return new Comment {  					LineNumber = line'  					Value = code.Substring (commentStart' i - commentStart)  				};  				i++;  				commentStart = i + 1;  			}  			line++;  		} else if (code [i] == '\n') {  			yield return new Comment {  				LineNumber = line'  				Value = code.Substring (commentStart' i - commentStart)  			};  			i++;  			line++;  			commentStart = i;  		}  		break;  	}  }  
Magic Number,Cassette.HtmlTemplates,HtmlTemplateCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HtmlTemplates\HtmlTemplateCommentParser.cs,Parse,The following statement contains a magic number: switch (state) {  case State.Code:  	if (code [i] == '\r') {  		if (i < code.Length - 1 && code [i + 1] == '\n') {  			i++;  		}  		line++;  		continue;  	} else if (code [i] == '\n') {  		line++;  		continue;  	} else if (i < code.Length - 4 && code.Substring (i' 4) == "<!--") {  		state = State.Comment;  		i += 3;  		commentStart = i + 1;  	}  	break;  case State.Comment:  	if (code.Substring (i' 3) == "-->") {  		yield return new Comment {  			LineNumber = line'  			Value = code.Substring (commentStart' i - commentStart)  		};  		i += 2;  		state = State.Code;  	} else if (code [i] == '\r') {  		if (i < code.Length - 1 && code [i + 1] == '\n') {  			yield return new Comment {  				LineNumber = line'  				Value = code.Substring (commentStart' i - commentStart)  			};  			i++;  			commentStart = i + 1;  		}  		line++;  	} else if (code [i] == '\n') {  		yield return new Comment {  			LineNumber = line'  			Value = code.Substring (commentStart' i - commentStart)  		};  		i++;  		line++;  		commentStart = i;  	}  	break;  }  
Magic Number,Cassette.HtmlTemplates,HtmlTemplateCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HtmlTemplates\HtmlTemplateCommentParser.cs,Parse,The following statement contains a magic number: switch (state) {  case State.Code:  	if (code [i] == '\r') {  		if (i < code.Length - 1 && code [i + 1] == '\n') {  			i++;  		}  		line++;  		continue;  	} else if (code [i] == '\n') {  		line++;  		continue;  	} else if (i < code.Length - 4 && code.Substring (i' 4) == "<!--") {  		state = State.Comment;  		i += 3;  		commentStart = i + 1;  	}  	break;  case State.Comment:  	if (code.Substring (i' 3) == "-->") {  		yield return new Comment {  			LineNumber = line'  			Value = code.Substring (commentStart' i - commentStart)  		};  		i += 2;  		state = State.Code;  	} else if (code [i] == '\r') {  		if (i < code.Length - 1 && code [i + 1] == '\n') {  			yield return new Comment {  				LineNumber = line'  				Value = code.Substring (commentStart' i - commentStart)  			};  			i++;  			commentStart = i + 1;  		}  		line++;  	} else if (code [i] == '\n') {  		yield return new Comment {  			LineNumber = line'  			Value = code.Substring (commentStart' i - commentStart)  		};  		i++;  		line++;  		commentStart = i;  	}  	break;  }  
Magic Number,Cassette.HtmlTemplates,HtmlTemplateCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HtmlTemplates\HtmlTemplateCommentParser.cs,Parse,The following statement contains a magic number: switch (state) {  case State.Code:  	if (code [i] == '\r') {  		if (i < code.Length - 1 && code [i + 1] == '\n') {  			i++;  		}  		line++;  		continue;  	} else if (code [i] == '\n') {  		line++;  		continue;  	} else if (i < code.Length - 4 && code.Substring (i' 4) == "<!--") {  		state = State.Comment;  		i += 3;  		commentStart = i + 1;  	}  	break;  case State.Comment:  	if (code.Substring (i' 3) == "-->") {  		yield return new Comment {  			LineNumber = line'  			Value = code.Substring (commentStart' i - commentStart)  		};  		i += 2;  		state = State.Code;  	} else if (code [i] == '\r') {  		if (i < code.Length - 1 && code [i + 1] == '\n') {  			yield return new Comment {  				LineNumber = line'  				Value = code.Substring (commentStart' i - commentStart)  			};  			i++;  			commentStart = i + 1;  		}  		line++;  	} else if (code [i] == '\n') {  		yield return new Comment {  			LineNumber = line'  			Value = code.Substring (commentStart' i - commentStart)  		};  		i++;  		line++;  		commentStart = i;  	}  	break;  }  
Magic Number,Cassette.HtmlTemplates,HtmlTemplateCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HtmlTemplates\HtmlTemplateCommentParser.cs,Parse,The following statement contains a magic number: switch (state) {  case State.Code:  	if (code [i] == '\r') {  		if (i < code.Length - 1 && code [i + 1] == '\n') {  			i++;  		}  		line++;  		continue;  	} else if (code [i] == '\n') {  		line++;  		continue;  	} else if (i < code.Length - 4 && code.Substring (i' 4) == "<!--") {  		state = State.Comment;  		i += 3;  		commentStart = i + 1;  	}  	break;  case State.Comment:  	if (code.Substring (i' 3) == "-->") {  		yield return new Comment {  			LineNumber = line'  			Value = code.Substring (commentStart' i - commentStart)  		};  		i += 2;  		state = State.Code;  	} else if (code [i] == '\r') {  		if (i < code.Length - 1 && code [i + 1] == '\n') {  			yield return new Comment {  				LineNumber = line'  				Value = code.Substring (commentStart' i - commentStart)  			};  			i++;  			commentStart = i + 1;  		}  		line++;  	} else if (code [i] == '\n') {  		yield return new Comment {  			LineNumber = line'  			Value = code.Substring (commentStart' i - commentStart)  		};  		i++;  		line++;  		commentStart = i;  	}  	break;  }  
Magic Number,Cassette.HtmlTemplates,HtmlTemplateCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HtmlTemplates\HtmlTemplateCommentParser.cs,Parse,The following statement contains a magic number: switch (state) {  case State.Code:  	if (code [i] == '\r') {  		if (i < code.Length - 1 && code [i + 1] == '\n') {  			i++;  		}  		line++;  		continue;  	} else if (code [i] == '\n') {  		line++;  		continue;  	} else if (i < code.Length - 4 && code.Substring (i' 4) == "<!--") {  		state = State.Comment;  		i += 3;  		commentStart = i + 1;  	}  	break;  case State.Comment:  	if (code.Substring (i' 3) == "-->") {  		yield return new Comment {  			LineNumber = line'  			Value = code.Substring (commentStart' i - commentStart)  		};  		i += 2;  		state = State.Code;  	} else if (code [i] == '\r') {  		if (i < code.Length - 1 && code [i + 1] == '\n') {  			yield return new Comment {  				LineNumber = line'  				Value = code.Substring (commentStart' i - commentStart)  			};  			i++;  			commentStart = i + 1;  		}  		line++;  	} else if (code [i] == '\n') {  		yield return new Comment {  			LineNumber = line'  			Value = code.Substring (commentStart' i - commentStart)  		};  		i++;  		line++;  		commentStart = i;  	}  	break;  }  
Magic Number,Cassette.HtmlTemplates,HtmlTemplateCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HtmlTemplates\HtmlTemplateCommentParser.cs,Parse,The following statement contains a magic number: if (code [i] == '\r') {  	if (i < code.Length - 1 && code [i + 1] == '\n') {  		i++;  	}  	line++;  	continue;  } else if (code [i] == '\n') {  	line++;  	continue;  } else if (i < code.Length - 4 && code.Substring (i' 4) == "<!--") {  	state = State.Comment;  	i += 3;  	commentStart = i + 1;  }  
Magic Number,Cassette.HtmlTemplates,HtmlTemplateCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HtmlTemplates\HtmlTemplateCommentParser.cs,Parse,The following statement contains a magic number: if (code [i] == '\r') {  	if (i < code.Length - 1 && code [i + 1] == '\n') {  		i++;  	}  	line++;  	continue;  } else if (code [i] == '\n') {  	line++;  	continue;  } else if (i < code.Length - 4 && code.Substring (i' 4) == "<!--") {  	state = State.Comment;  	i += 3;  	commentStart = i + 1;  }  
Magic Number,Cassette.HtmlTemplates,HtmlTemplateCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HtmlTemplates\HtmlTemplateCommentParser.cs,Parse,The following statement contains a magic number: if (code [i] == '\r') {  	if (i < code.Length - 1 && code [i + 1] == '\n') {  		i++;  	}  	line++;  	continue;  } else if (code [i] == '\n') {  	line++;  	continue;  } else if (i < code.Length - 4 && code.Substring (i' 4) == "<!--") {  	state = State.Comment;  	i += 3;  	commentStart = i + 1;  }  
Magic Number,Cassette.HtmlTemplates,HtmlTemplateCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HtmlTemplates\HtmlTemplateCommentParser.cs,Parse,The following statement contains a magic number: if (code [i] == '\n') {  	line++;  	continue;  } else if (i < code.Length - 4 && code.Substring (i' 4) == "<!--") {  	state = State.Comment;  	i += 3;  	commentStart = i + 1;  }  
Magic Number,Cassette.HtmlTemplates,HtmlTemplateCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HtmlTemplates\HtmlTemplateCommentParser.cs,Parse,The following statement contains a magic number: if (code [i] == '\n') {  	line++;  	continue;  } else if (i < code.Length - 4 && code.Substring (i' 4) == "<!--") {  	state = State.Comment;  	i += 3;  	commentStart = i + 1;  }  
Magic Number,Cassette.HtmlTemplates,HtmlTemplateCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HtmlTemplates\HtmlTemplateCommentParser.cs,Parse,The following statement contains a magic number: if (code [i] == '\n') {  	line++;  	continue;  } else if (i < code.Length - 4 && code.Substring (i' 4) == "<!--") {  	state = State.Comment;  	i += 3;  	commentStart = i + 1;  }  
Magic Number,Cassette.HtmlTemplates,HtmlTemplateCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HtmlTemplates\HtmlTemplateCommentParser.cs,Parse,The following statement contains a magic number: if (i < code.Length - 4 && code.Substring (i' 4) == "<!--") {  	state = State.Comment;  	i += 3;  	commentStart = i + 1;  }  
Magic Number,Cassette.HtmlTemplates,HtmlTemplateCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HtmlTemplates\HtmlTemplateCommentParser.cs,Parse,The following statement contains a magic number: if (i < code.Length - 4 && code.Substring (i' 4) == "<!--") {  	state = State.Comment;  	i += 3;  	commentStart = i + 1;  }  
Magic Number,Cassette.HtmlTemplates,HtmlTemplateCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HtmlTemplates\HtmlTemplateCommentParser.cs,Parse,The following statement contains a magic number: if (i < code.Length - 4 && code.Substring (i' 4) == "<!--") {  	state = State.Comment;  	i += 3;  	commentStart = i + 1;  }  
Magic Number,Cassette.HtmlTemplates,HtmlTemplateCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HtmlTemplates\HtmlTemplateCommentParser.cs,Parse,The following statement contains a magic number: i += 3;  
Magic Number,Cassette.HtmlTemplates,HtmlTemplateCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HtmlTemplates\HtmlTemplateCommentParser.cs,Parse,The following statement contains a magic number: if (code.Substring (i' 3) == "-->") {  	yield return new Comment {  		LineNumber = line'  		Value = code.Substring (commentStart' i - commentStart)  	};  	i += 2;  	state = State.Code;  } else if (code [i] == '\r') {  	if (i < code.Length - 1 && code [i + 1] == '\n') {  		yield return new Comment {  			LineNumber = line'  			Value = code.Substring (commentStart' i - commentStart)  		};  		i++;  		commentStart = i + 1;  	}  	line++;  } else if (code [i] == '\n') {  	yield return new Comment {  		LineNumber = line'  		Value = code.Substring (commentStart' i - commentStart)  	};  	i++;  	line++;  	commentStart = i;  }  
Magic Number,Cassette.HtmlTemplates,HtmlTemplateCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HtmlTemplates\HtmlTemplateCommentParser.cs,Parse,The following statement contains a magic number: if (code.Substring (i' 3) == "-->") {  	yield return new Comment {  		LineNumber = line'  		Value = code.Substring (commentStart' i - commentStart)  	};  	i += 2;  	state = State.Code;  } else if (code [i] == '\r') {  	if (i < code.Length - 1 && code [i + 1] == '\n') {  		yield return new Comment {  			LineNumber = line'  			Value = code.Substring (commentStart' i - commentStart)  		};  		i++;  		commentStart = i + 1;  	}  	line++;  } else if (code [i] == '\n') {  	yield return new Comment {  		LineNumber = line'  		Value = code.Substring (commentStart' i - commentStart)  	};  	i++;  	line++;  	commentStart = i;  }  
Magic Number,Cassette.HtmlTemplates,HtmlTemplateCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HtmlTemplates\HtmlTemplateCommentParser.cs,Parse,The following statement contains a magic number: i += 2;  
Magic Number,Cassette.IO,FileSystemDirectory,F:\newReposMay17\andrewdavey_cassette\src\Cassette\IO\FileSystemDirectory.cs,GetAbsolutePath,The following statement contains a magic number: if (filename.StartsWith ("~/")) {  	return GetRootDirectory ().GetAbsolutePath (filename.Substring (2));  }  
Magic Number,Cassette.IO,FileSystemDirectory,F:\newReposMay17\andrewdavey_cassette\src\Cassette\IO\FileSystemDirectory.cs,GetAbsolutePath,The following statement contains a magic number: return GetRootDirectory ().GetAbsolutePath (filename.Substring (2));  
Magic Number,Cassette.IO,FileSystemDirectory,F:\newReposMay17\andrewdavey_cassette\src\Cassette\IO\FileSystemDirectory.cs,GetDirectory,The following statement contains a magic number: if (path [0] == '~') {  	path = path.Length == 1 ? "" : path.Substring (2);  	return GetRootDirectory ().GetDirectory (path);  }  
Magic Number,Cassette.IO,FileSystemDirectory,F:\newReposMay17\andrewdavey_cassette\src\Cassette\IO\FileSystemDirectory.cs,GetDirectory,The following statement contains a magic number: path = path.Length == 1 ? "" : path.Substring (2);  
Magic Number,Cassette.IO,IsolatedStorageDirectory,F:\newReposMay17\andrewdavey_cassette\src\Cassette\IO\IsolatedStorageDirectory.cs,GetFile,The following statement contains a magic number: if (parts.Length > 2) {  	var subDirectory = string.Join ("/"' parts.Reverse ().Skip (1).Reverse ().ToArray ());  	directory = new IsolatedStorageDirectory (getStorage' subDirectory);  } else {  	directory = this;  }  
Magic Number,Cassette.IO,IsolatedStorageFile,F:\newReposMay17\andrewdavey_cassette\src\Cassette\IO\IsolatedStorageFile.cs,IsolatedStorageFile,The following statement contains a magic number: systemFilename = filename.Substring (2);  
Magic Number,Cassette.Scripts,JavaScriptCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Scripts\JavaScriptCommentParser.cs,Parse,The following statement contains a magic number: for (var i = 0; i < code.Length; i++) {  	var c = code [i];  	if (c == '\r') {  		if (i < code.Length - 1 && code [i + 1] == '\n') {  			i++;  		}  		line++;  		continue;  	} else if (c == '\n') {  		line++;  		continue;  	}  	switch (state) {  	case State.Code:  		if (c != '/')  			continue;  		if (i >= code.Length - 2)  			yield break;  		if (code [i + 1] == '/') {  			state = State.SingleLineComment;  			commentStart = i + 2;  			i++;  			// Skip the '/'  		} else if (code [i + 1] == '*') {  			state = State.MultiLineComment;  			commentStart = i + 2;  			i++;  			// Skip the '*'  		}  		break;  	case State.SingleLineComment:  		// Scan forward until newline or end of code.  		while (i < code.Length && code [i] != '\r' && code [i] != '\n') {  			i++;  		}  		yield return new Comment {  			LineNumber = line'  			Value = code.Substring (commentStart' i - commentStart)  		};  		if (i < code.Length - 1 && code [i] == '\r' && code [i + 1] == '\n')  			i++;  		line++;  		state = State.Code;  		break;  	case State.MultiLineComment:  		// Scan forwards until "*/" or end of code.  		while (i < code.Length - 1 && (code [i] != '*' || code [i + 1] != '/')) {  			// Track new lines within the comment.  			switch (code [i]) {  			case '\r':  				yield return new Comment {  					LineNumber = line'  					Value = code.Substring (commentStart' i - commentStart)  				};  				i++;  				if (i < code.Length && code [i] == '\n') {  					i++;  				}  				commentStart = i;  				line++;  				break;  			case '\n':  				yield return new Comment {  					LineNumber = line'  					Value = code.Substring (commentStart' i - commentStart)  				};  				i++;  				commentStart = i;  				line++;  				break;  			default:  				i++;  				break;  			}  		}  		yield return new Comment {  			LineNumber = line'  			Value = code.Substring (commentStart' i - commentStart)  		};  		i++;  		// Skip the '/'  		state = State.Code;  		break;  	}  }  
Magic Number,Cassette.Scripts,JavaScriptCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Scripts\JavaScriptCommentParser.cs,Parse,The following statement contains a magic number: for (var i = 0; i < code.Length; i++) {  	var c = code [i];  	if (c == '\r') {  		if (i < code.Length - 1 && code [i + 1] == '\n') {  			i++;  		}  		line++;  		continue;  	} else if (c == '\n') {  		line++;  		continue;  	}  	switch (state) {  	case State.Code:  		if (c != '/')  			continue;  		if (i >= code.Length - 2)  			yield break;  		if (code [i + 1] == '/') {  			state = State.SingleLineComment;  			commentStart = i + 2;  			i++;  			// Skip the '/'  		} else if (code [i + 1] == '*') {  			state = State.MultiLineComment;  			commentStart = i + 2;  			i++;  			// Skip the '*'  		}  		break;  	case State.SingleLineComment:  		// Scan forward until newline or end of code.  		while (i < code.Length && code [i] != '\r' && code [i] != '\n') {  			i++;  		}  		yield return new Comment {  			LineNumber = line'  			Value = code.Substring (commentStart' i - commentStart)  		};  		if (i < code.Length - 1 && code [i] == '\r' && code [i + 1] == '\n')  			i++;  		line++;  		state = State.Code;  		break;  	case State.MultiLineComment:  		// Scan forwards until "*/" or end of code.  		while (i < code.Length - 1 && (code [i] != '*' || code [i + 1] != '/')) {  			// Track new lines within the comment.  			switch (code [i]) {  			case '\r':  				yield return new Comment {  					LineNumber = line'  					Value = code.Substring (commentStart' i - commentStart)  				};  				i++;  				if (i < code.Length && code [i] == '\n') {  					i++;  				}  				commentStart = i;  				line++;  				break;  			case '\n':  				yield return new Comment {  					LineNumber = line'  					Value = code.Substring (commentStart' i - commentStart)  				};  				i++;  				commentStart = i;  				line++;  				break;  			default:  				i++;  				break;  			}  		}  		yield return new Comment {  			LineNumber = line'  			Value = code.Substring (commentStart' i - commentStart)  		};  		i++;  		// Skip the '/'  		state = State.Code;  		break;  	}  }  
Magic Number,Cassette.Scripts,JavaScriptCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Scripts\JavaScriptCommentParser.cs,Parse,The following statement contains a magic number: for (var i = 0; i < code.Length; i++) {  	var c = code [i];  	if (c == '\r') {  		if (i < code.Length - 1 && code [i + 1] == '\n') {  			i++;  		}  		line++;  		continue;  	} else if (c == '\n') {  		line++;  		continue;  	}  	switch (state) {  	case State.Code:  		if (c != '/')  			continue;  		if (i >= code.Length - 2)  			yield break;  		if (code [i + 1] == '/') {  			state = State.SingleLineComment;  			commentStart = i + 2;  			i++;  			// Skip the '/'  		} else if (code [i + 1] == '*') {  			state = State.MultiLineComment;  			commentStart = i + 2;  			i++;  			// Skip the '*'  		}  		break;  	case State.SingleLineComment:  		// Scan forward until newline or end of code.  		while (i < code.Length && code [i] != '\r' && code [i] != '\n') {  			i++;  		}  		yield return new Comment {  			LineNumber = line'  			Value = code.Substring (commentStart' i - commentStart)  		};  		if (i < code.Length - 1 && code [i] == '\r' && code [i + 1] == '\n')  			i++;  		line++;  		state = State.Code;  		break;  	case State.MultiLineComment:  		// Scan forwards until "*/" or end of code.  		while (i < code.Length - 1 && (code [i] != '*' || code [i + 1] != '/')) {  			// Track new lines within the comment.  			switch (code [i]) {  			case '\r':  				yield return new Comment {  					LineNumber = line'  					Value = code.Substring (commentStart' i - commentStart)  				};  				i++;  				if (i < code.Length && code [i] == '\n') {  					i++;  				}  				commentStart = i;  				line++;  				break;  			case '\n':  				yield return new Comment {  					LineNumber = line'  					Value = code.Substring (commentStart' i - commentStart)  				};  				i++;  				commentStart = i;  				line++;  				break;  			default:  				i++;  				break;  			}  		}  		yield return new Comment {  			LineNumber = line'  			Value = code.Substring (commentStart' i - commentStart)  		};  		i++;  		// Skip the '/'  		state = State.Code;  		break;  	}  }  
Magic Number,Cassette.Scripts,JavaScriptCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Scripts\JavaScriptCommentParser.cs,Parse,The following statement contains a magic number: switch (state) {  case State.Code:  	if (c != '/')  		continue;  	if (i >= code.Length - 2)  		yield break;  	if (code [i + 1] == '/') {  		state = State.SingleLineComment;  		commentStart = i + 2;  		i++;  		// Skip the '/'  	} else if (code [i + 1] == '*') {  		state = State.MultiLineComment;  		commentStart = i + 2;  		i++;  		// Skip the '*'  	}  	break;  case State.SingleLineComment:  	// Scan forward until newline or end of code.  	while (i < code.Length && code [i] != '\r' && code [i] != '\n') {  		i++;  	}  	yield return new Comment {  		LineNumber = line'  		Value = code.Substring (commentStart' i - commentStart)  	};  	if (i < code.Length - 1 && code [i] == '\r' && code [i + 1] == '\n')  		i++;  	line++;  	state = State.Code;  	break;  case State.MultiLineComment:  	// Scan forwards until "*/" or end of code.  	while (i < code.Length - 1 && (code [i] != '*' || code [i + 1] != '/')) {  		// Track new lines within the comment.  		switch (code [i]) {  		case '\r':  			yield return new Comment {  				LineNumber = line'  				Value = code.Substring (commentStart' i - commentStart)  			};  			i++;  			if (i < code.Length && code [i] == '\n') {  				i++;  			}  			commentStart = i;  			line++;  			break;  		case '\n':  			yield return new Comment {  				LineNumber = line'  				Value = code.Substring (commentStart' i - commentStart)  			};  			i++;  			commentStart = i;  			line++;  			break;  		default:  			i++;  			break;  		}  	}  	yield return new Comment {  		LineNumber = line'  		Value = code.Substring (commentStart' i - commentStart)  	};  	i++;  	// Skip the '/'  	state = State.Code;  	break;  }  
Magic Number,Cassette.Scripts,JavaScriptCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Scripts\JavaScriptCommentParser.cs,Parse,The following statement contains a magic number: switch (state) {  case State.Code:  	if (c != '/')  		continue;  	if (i >= code.Length - 2)  		yield break;  	if (code [i + 1] == '/') {  		state = State.SingleLineComment;  		commentStart = i + 2;  		i++;  		// Skip the '/'  	} else if (code [i + 1] == '*') {  		state = State.MultiLineComment;  		commentStart = i + 2;  		i++;  		// Skip the '*'  	}  	break;  case State.SingleLineComment:  	// Scan forward until newline or end of code.  	while (i < code.Length && code [i] != '\r' && code [i] != '\n') {  		i++;  	}  	yield return new Comment {  		LineNumber = line'  		Value = code.Substring (commentStart' i - commentStart)  	};  	if (i < code.Length - 1 && code [i] == '\r' && code [i + 1] == '\n')  		i++;  	line++;  	state = State.Code;  	break;  case State.MultiLineComment:  	// Scan forwards until "*/" or end of code.  	while (i < code.Length - 1 && (code [i] != '*' || code [i + 1] != '/')) {  		// Track new lines within the comment.  		switch (code [i]) {  		case '\r':  			yield return new Comment {  				LineNumber = line'  				Value = code.Substring (commentStart' i - commentStart)  			};  			i++;  			if (i < code.Length && code [i] == '\n') {  				i++;  			}  			commentStart = i;  			line++;  			break;  		case '\n':  			yield return new Comment {  				LineNumber = line'  				Value = code.Substring (commentStart' i - commentStart)  			};  			i++;  			commentStart = i;  			line++;  			break;  		default:  			i++;  			break;  		}  	}  	yield return new Comment {  		LineNumber = line'  		Value = code.Substring (commentStart' i - commentStart)  	};  	i++;  	// Skip the '/'  	state = State.Code;  	break;  }  
Magic Number,Cassette.Scripts,JavaScriptCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Scripts\JavaScriptCommentParser.cs,Parse,The following statement contains a magic number: switch (state) {  case State.Code:  	if (c != '/')  		continue;  	if (i >= code.Length - 2)  		yield break;  	if (code [i + 1] == '/') {  		state = State.SingleLineComment;  		commentStart = i + 2;  		i++;  		// Skip the '/'  	} else if (code [i + 1] == '*') {  		state = State.MultiLineComment;  		commentStart = i + 2;  		i++;  		// Skip the '*'  	}  	break;  case State.SingleLineComment:  	// Scan forward until newline or end of code.  	while (i < code.Length && code [i] != '\r' && code [i] != '\n') {  		i++;  	}  	yield return new Comment {  		LineNumber = line'  		Value = code.Substring (commentStart' i - commentStart)  	};  	if (i < code.Length - 1 && code [i] == '\r' && code [i + 1] == '\n')  		i++;  	line++;  	state = State.Code;  	break;  case State.MultiLineComment:  	// Scan forwards until "*/" or end of code.  	while (i < code.Length - 1 && (code [i] != '*' || code [i + 1] != '/')) {  		// Track new lines within the comment.  		switch (code [i]) {  		case '\r':  			yield return new Comment {  				LineNumber = line'  				Value = code.Substring (commentStart' i - commentStart)  			};  			i++;  			if (i < code.Length && code [i] == '\n') {  				i++;  			}  			commentStart = i;  			line++;  			break;  		case '\n':  			yield return new Comment {  				LineNumber = line'  				Value = code.Substring (commentStart' i - commentStart)  			};  			i++;  			commentStart = i;  			line++;  			break;  		default:  			i++;  			break;  		}  	}  	yield return new Comment {  		LineNumber = line'  		Value = code.Substring (commentStart' i - commentStart)  	};  	i++;  	// Skip the '/'  	state = State.Code;  	break;  }  
Magic Number,Cassette.Scripts,JavaScriptCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Scripts\JavaScriptCommentParser.cs,Parse,The following statement contains a magic number: if (i >= code.Length - 2)  	yield break;  
Magic Number,Cassette.Scripts,JavaScriptCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Scripts\JavaScriptCommentParser.cs,Parse,The following statement contains a magic number: if (code [i + 1] == '/') {  	state = State.SingleLineComment;  	commentStart = i + 2;  	i++;  	// Skip the '/'  } else if (code [i + 1] == '*') {  	state = State.MultiLineComment;  	commentStart = i + 2;  	i++;  	// Skip the '*'  }  
Magic Number,Cassette.Scripts,JavaScriptCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Scripts\JavaScriptCommentParser.cs,Parse,The following statement contains a magic number: if (code [i + 1] == '/') {  	state = State.SingleLineComment;  	commentStart = i + 2;  	i++;  	// Skip the '/'  } else if (code [i + 1] == '*') {  	state = State.MultiLineComment;  	commentStart = i + 2;  	i++;  	// Skip the '*'  }  
Magic Number,Cassette.Scripts,JavaScriptCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Scripts\JavaScriptCommentParser.cs,Parse,The following statement contains a magic number: commentStart = i + 2;  
Magic Number,Cassette.Scripts,JavaScriptCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Scripts\JavaScriptCommentParser.cs,Parse,The following statement contains a magic number: if (code [i + 1] == '*') {  	state = State.MultiLineComment;  	commentStart = i + 2;  	i++;  	// Skip the '*'  }  
Magic Number,Cassette.Scripts,JavaScriptCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Scripts\JavaScriptCommentParser.cs,Parse,The following statement contains a magic number: commentStart = i + 2;  
Magic Number,Cassette.Stylesheets,CssCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Stylesheets\CssCommentParser.cs,Parse,The following statement contains a magic number: for (var i = 0; i < code.Length; i++) {  	var c = code [i];  	if (c == '\r') {  		if (i < code.Length - 1 && code [i + 1] == '\n') {  			i++;  		}  		line++;  		continue;  	} else if (c == '\n') {  		line++;  		continue;  	}  	switch (state) {  	case State.Code:  		if (c != '/')  			continue;  		if (i >= code.Length - 2)  			yield break;  		if (code [i + 1] == '*') {  			state = State.Comment;  			commentStart = i + 2;  			i++;  			// Skip the '*'  		}  		break;  	case State.Comment:  		// Scan forwards until "*/" or end of code.  		while (i < code.Length - 1 && (code [i] != '*' || code [i + 1] != '/')) {  			// Track new lines within the comment.  			switch (code [i]) {  			case '\r':  				yield return new Comment {  					LineNumber = line'  					Value = code.Substring (commentStart' i - commentStart)  				};  				i++;  				if (i < code.Length && code [i] == '\n') {  					i++;  				}  				commentStart = i;  				line++;  				break;  			case '\n':  				yield return new Comment {  					LineNumber = line'  					Value = code.Substring (commentStart' i - commentStart)  				};  				i++;  				commentStart = i;  				line++;  				break;  			default:  				i++;  				break;  			}  		}  		yield return new Comment {  			LineNumber = line'  			Value = code.Substring (commentStart' i - commentStart)  		};  		i++;  		// Skip the '/'  		state = State.Code;  		break;  	}  }  
Magic Number,Cassette.Stylesheets,CssCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Stylesheets\CssCommentParser.cs,Parse,The following statement contains a magic number: for (var i = 0; i < code.Length; i++) {  	var c = code [i];  	if (c == '\r') {  		if (i < code.Length - 1 && code [i + 1] == '\n') {  			i++;  		}  		line++;  		continue;  	} else if (c == '\n') {  		line++;  		continue;  	}  	switch (state) {  	case State.Code:  		if (c != '/')  			continue;  		if (i >= code.Length - 2)  			yield break;  		if (code [i + 1] == '*') {  			state = State.Comment;  			commentStart = i + 2;  			i++;  			// Skip the '*'  		}  		break;  	case State.Comment:  		// Scan forwards until "*/" or end of code.  		while (i < code.Length - 1 && (code [i] != '*' || code [i + 1] != '/')) {  			// Track new lines within the comment.  			switch (code [i]) {  			case '\r':  				yield return new Comment {  					LineNumber = line'  					Value = code.Substring (commentStart' i - commentStart)  				};  				i++;  				if (i < code.Length && code [i] == '\n') {  					i++;  				}  				commentStart = i;  				line++;  				break;  			case '\n':  				yield return new Comment {  					LineNumber = line'  					Value = code.Substring (commentStart' i - commentStart)  				};  				i++;  				commentStart = i;  				line++;  				break;  			default:  				i++;  				break;  			}  		}  		yield return new Comment {  			LineNumber = line'  			Value = code.Substring (commentStart' i - commentStart)  		};  		i++;  		// Skip the '/'  		state = State.Code;  		break;  	}  }  
Magic Number,Cassette.Stylesheets,CssCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Stylesheets\CssCommentParser.cs,Parse,The following statement contains a magic number: switch (state) {  case State.Code:  	if (c != '/')  		continue;  	if (i >= code.Length - 2)  		yield break;  	if (code [i + 1] == '*') {  		state = State.Comment;  		commentStart = i + 2;  		i++;  		// Skip the '*'  	}  	break;  case State.Comment:  	// Scan forwards until "*/" or end of code.  	while (i < code.Length - 1 && (code [i] != '*' || code [i + 1] != '/')) {  		// Track new lines within the comment.  		switch (code [i]) {  		case '\r':  			yield return new Comment {  				LineNumber = line'  				Value = code.Substring (commentStart' i - commentStart)  			};  			i++;  			if (i < code.Length && code [i] == '\n') {  				i++;  			}  			commentStart = i;  			line++;  			break;  		case '\n':  			yield return new Comment {  				LineNumber = line'  				Value = code.Substring (commentStart' i - commentStart)  			};  			i++;  			commentStart = i;  			line++;  			break;  		default:  			i++;  			break;  		}  	}  	yield return new Comment {  		LineNumber = line'  		Value = code.Substring (commentStart' i - commentStart)  	};  	i++;  	// Skip the '/'  	state = State.Code;  	break;  }  
Magic Number,Cassette.Stylesheets,CssCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Stylesheets\CssCommentParser.cs,Parse,The following statement contains a magic number: switch (state) {  case State.Code:  	if (c != '/')  		continue;  	if (i >= code.Length - 2)  		yield break;  	if (code [i + 1] == '*') {  		state = State.Comment;  		commentStart = i + 2;  		i++;  		// Skip the '*'  	}  	break;  case State.Comment:  	// Scan forwards until "*/" or end of code.  	while (i < code.Length - 1 && (code [i] != '*' || code [i + 1] != '/')) {  		// Track new lines within the comment.  		switch (code [i]) {  		case '\r':  			yield return new Comment {  				LineNumber = line'  				Value = code.Substring (commentStart' i - commentStart)  			};  			i++;  			if (i < code.Length && code [i] == '\n') {  				i++;  			}  			commentStart = i;  			line++;  			break;  		case '\n':  			yield return new Comment {  				LineNumber = line'  				Value = code.Substring (commentStart' i - commentStart)  			};  			i++;  			commentStart = i;  			line++;  			break;  		default:  			i++;  			break;  		}  	}  	yield return new Comment {  		LineNumber = line'  		Value = code.Substring (commentStart' i - commentStart)  	};  	i++;  	// Skip the '/'  	state = State.Code;  	break;  }  
Magic Number,Cassette.Stylesheets,CssCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Stylesheets\CssCommentParser.cs,Parse,The following statement contains a magic number: if (i >= code.Length - 2)  	yield break;  
Magic Number,Cassette.Stylesheets,CssCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Stylesheets\CssCommentParser.cs,Parse,The following statement contains a magic number: if (code [i + 1] == '*') {  	state = State.Comment;  	commentStart = i + 2;  	i++;  	// Skip the '*'  }  
Magic Number,Cassette.Stylesheets,CssCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Stylesheets\CssCommentParser.cs,Parse,The following statement contains a magic number: commentStart = i + 2;  
Magic Number,Cassette.TinyIoC,TinyIoCContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette\TinyIoC\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The following statement contains a magic number: if ((genericType == typeof(Func<' ' >) && type.GetGenericArguments () [0] == typeof(string) && type.GetGenericArguments () [1] == typeof(IDictionary<string' object>))) {  	Type returnType = genericArguments [2];  	var name = Expression.Parameter (typeof(string)' "name");  	var parameters = Expression.Parameter (typeof(IDictionary<string' object>)' "parameters");  	MethodInfo resolveMethod = typeof(TinyIoCContainer).GetMethod ("Resolve"' new Type[] {  		typeof(String)'  		typeof(NamedParameterOverloads)  	});  	resolveMethod = resolveMethod.MakeGenericMethod (returnType);  	var resolveCall = Expression.Call (Expression.Constant (this)' resolveMethod' name' Expression.Call (typeof(NamedParameterOverloads)' "FromIDictionary"' null' parameters));  	var resolveLambda = Expression.Lambda (resolveCall' name' parameters).Compile ();  	return resolveLambda;  }  
Magic Number,Cassette.Utilities,ByteArrayExtensions,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Utilities\ByteArrayExtensions.cs,FromHexString,The following statement contains a magic number: for (var i = 0; i < hex.Length; i += 2) {  	bytes [i / 2] = Convert.ToByte (hex.Substring (i' 2)' 16);  }  
Magic Number,Cassette.Utilities,ByteArrayExtensions,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Utilities\ByteArrayExtensions.cs,FromHexString,The following statement contains a magic number: for (var i = 0; i < hex.Length; i += 2) {  	bytes [i / 2] = Convert.ToByte (hex.Substring (i' 2)' 16);  }  
Magic Number,Cassette.Utilities,ByteArrayExtensions,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Utilities\ByteArrayExtensions.cs,FromHexString,The following statement contains a magic number: for (var i = 0; i < hex.Length; i += 2) {  	bytes [i / 2] = Convert.ToByte (hex.Substring (i' 2)' 16);  }  
Magic Number,Cassette.Utilities,ByteArrayExtensions,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Utilities\ByteArrayExtensions.cs,FromHexString,The following statement contains a magic number: for (var i = 0; i < hex.Length; i += 2) {  	bytes [i / 2] = Convert.ToByte (hex.Substring (i' 2)' 16);  }  
Magic Number,Cassette.Utilities,ByteArrayExtensions,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Utilities\ByteArrayExtensions.cs,FromHexString,The following statement contains a magic number: i += 2
Magic Number,Cassette.Utilities,ByteArrayExtensions,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Utilities\ByteArrayExtensions.cs,FromHexString,The following statement contains a magic number: bytes [i / 2] = Convert.ToByte (hex.Substring (i' 2)' 16);  
Magic Number,Cassette.Utilities,ByteArrayExtensions,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Utilities\ByteArrayExtensions.cs,FromHexString,The following statement contains a magic number: bytes [i / 2] = Convert.ToByte (hex.Substring (i' 2)' 16);  
Magic Number,Cassette.Utilities,ByteArrayExtensions,F:\newReposMay17\andrewdavey_cassette\src\Cassette\Utilities\ByteArrayExtensions.cs,FromHexString,The following statement contains a magic number: bytes [i / 2] = Convert.ToByte (hex.Substring (i' 2)' 16);  
Missing Default,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,ParseValue,The following switch statement is missing a default case: switch (LookAhead (json' index)) {  case TOKEN_STRING:  	return ParseString (json' ref index' ref success);  case TOKEN_NUMBER:  	return ParseNumber (json' ref index' ref success);  case TOKEN_CURLY_OPEN:  	return ParseObject (json' ref index' ref success);  case TOKEN_SQUARED_OPEN:  	return ParseArray (json' ref index' ref success);  case TOKEN_TRUE:  	NextToken (json' ref index);  	return true;  case TOKEN_FALSE:  	NextToken (json' ref index);  	return false;  case TOKEN_NULL:  	NextToken (json' ref index);  	return null;  case TOKEN_NONE:  	break;  }  
Missing Default,Cassette,SimpleJson,F:\newReposMay17\andrewdavey_cassette\src\Cassette\SimpleJson\SimpleJson.cs,NextToken,The following switch statement is missing a default case: switch (c) {  case '{':  	return TOKEN_CURLY_OPEN;  case '}':  	return TOKEN_CURLY_CLOSE;  case '[':  	return TOKEN_SQUARED_OPEN;  case ']':  	return TOKEN_SQUARED_CLOSE;  case ''':  	return TOKEN_COMMA;  case '"':  	return TOKEN_STRING;  case '0':  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9':  case '-':  	return TOKEN_NUMBER;  case ':':  	return TOKEN_COLON;  }  
Missing Default,Cassette.BundleProcessing,ReferenceParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\BundleProcessing\ReferenceParser.cs,ParsePaths,The following switch statement is missing a default case: switch (state) {  case State.None:  	if (char.IsWhiteSpace (c))  		continue;  	else if (c == '"') {  		state = State.InDoubleQuote;  		pathStart = i + 1;  	} else if (c == '\'') {  		state = State.InSingleQuote;  		pathStart = i + 1;  	} else {  		state = State.InRawPath;  		pathStart = i;  	}  	break;  case State.InSingleQuote:  	if (c == '\'') {  		yield return comment.Substring (pathStart' i - pathStart);  		state = State.None;  	}  	break;  case State.InDoubleQuote:  	if (c == '"') {  		yield return comment.Substring (pathStart' i - pathStart);  		state = State.None;  	}  	break;  case State.InRawPath:  	if (char.IsWhiteSpace (c)) {  		yield return comment.Substring (pathStart' i - pathStart);  		state = State.None;  	}  	break;  }  
Missing Default,Cassette.HtmlTemplates,HtmlTemplateCommentParser,F:\newReposMay17\andrewdavey_cassette\src\Cassette\HtmlTemplates\HtmlTemplateCommentParser.cs,Parse,The following switch statement is missing a default case: switch (state) {  case State.Code:  	if (code [i] == '\r') {  		if (i < code.Length - 1 && code [i + 1] == '\n') {  			i++;  		}  		line++;  		continue;  	} else if (code [i] == '\n') {  		line++;  		continue;  	} else if (i < code.Length - 4 && code.Substring (i' 4) == "<!--") {  		state = State.Comment;  		i += 3;  		commentStart = i + 1;  	}  	break;  case State.Comment:  	if (code.Substring (i' 3) == "-->") {  		yield return new Comment {  			LineNumber = line'  			Value = code.Substring (commentStart' i - commentStart)  		};  		i += 2;  		state = State.Code;  	} else if (code [i] == '\r') {  		if (i < code.Length - 1 && code [i + 1] == '\n') {  			yield return new Comment {  				LineNumber = line'  				Value = code.Substring (commentStart' i - commentStart)  			};  			i++;  			commentStart = i + 1;  		}  		line++;  	} else if (code [i] == '\n') {  		yield return new Comment {  			LineNumber = line'  			Value = code.Substring (commentStart' i - commentStart)  		};  		i++;  		line++;  		commentStart = i;  	}  	break;  }  
