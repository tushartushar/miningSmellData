Implementation smell,Namespace,Class,File,Method,Description
Long Method,Cassette.Spriting.Spritastic.Generator,SpriteContainer,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,AddImage,The method has 100 lines of code.
Complex Method,Cassette.Spriting.Spritastic.Generator,CssImageExtractor,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\CssImageExtractor.cs,ExtractImageUrls,Cyclomatic complexity of the method is 9
Complex Method,Cassette.Spriting.Spritastic.Generator,CssImageExtractor,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\CssImageExtractor.cs,InheritMissingProperties,Cyclomatic complexity of the method is 11
Complex Method,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,BackgroundImageClass,Cyclomatic complexity of the method is 15
Complex Method,Cassette.Spriting.Spritastic.Selector,CssSelectorAnalyzer,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Selector\CssSelectorAnalyzer.cs,FindToken,Cyclomatic complexity of the method is 8
Long Statement,Cassette.Spriting.Spritastic.Generator,CssImageExtractor,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\CssImageExtractor.cs,DerivableHasMissingProperty,The length of the statement  "            if ((imageClass.PropertyCompletion & property) != property && (derrivableClass.PropertyCompletion & property) == property) " is 122.
Long Statement,Cassette.Spriting.Spritastic.Generator,CssImageExtractor,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\CssImageExtractor.cs,CanSprite,The length of the statement  "                    || ((imageClass.YOffset.PositionMode == PositionMode.Unit) && (imageClass.YOffset.Offset >= 0 || imageClass.Height > 0)))) " is 122.
Long Statement,Cassette.Spriting.Spritastic.Generator,SpritedImage,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpritedImage.cs,Render,The length of the statement  "            var newClass = CssClass.ImageUrl != null && CssClass.OriginalClassString.IndexOf(CssClass.ImageUrl' StringComparison.OrdinalIgnoreCase) > -1 " is 140.
Long Statement,Cassette.Spriting.Spritastic.Generator,SpriteManager,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteManager.cs,Add,The length of the statement  "                var clonedImage = new SpritedImage(originalImage.AverageColor' image' originalImage.Image) { Position = originalImage.Position' Url = originalImage.Url' Metadata = imageKey }; " is 175.
Long Statement,Cassette.Spriting.Spritastic.Generator,SpriteManager,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteManager.cs,Add,The length of the statement  "            if (SpriteContainer.Size >= config.SpriteSizeLimit || (SpriteContainer.Colors >= config.SpriteColorLimit && !config.ImageQuantizationDisabled && !config.ImageOptimizationDisabled)) " is 180.
Long Statement,Cassette.Spriting.Spritastic.Generator,SpriteManager,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteManager.cs,Flush,The length of the statement  "                        optBytes = (config.ImageOptimizationDisabled || !config.IsFullTrust) ? bytes : pngOptimizer.OptimizePng(bytes' config.ImageOptimizationCompressionLevel' config.ImageQuantizationDisabled); " is 187.
Long Statement,Cassette.Spriting.Spritastic.Generator,SpriteWriter,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteWriter.cs,GetBytes,The length of the statement  "                    SpriteImage.Save(stream' ImageCodecInfo.GetImageEncoders().First(x => x.MimeType == mimeType)' spriteEncoderParameters); " is 120.
Long Statement,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,ParseNumericOffset,The length of the statement  "            if (offsetString.Length > 2 && "|in|cm|mm|em|ex|pt|pc".IndexOf(offsetString.Substring(offsetString.Length-2'2)' StringComparison.Ordinal) > -1) " is 143.
Long Statement,Cassette.Spriting.Spritastic.Selector,CssSelectorAnalyzer,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Selector\CssSelectorAnalyzer.cs,FindToken,The length of the statement  "                var idx = tokens[tokenIdx] == "*" ? 0 : targetSelector.IndexOf(tokens[tokenIdx]' targetOffset' StringComparison.OrdinalIgnoreCase); " is 131.
Long Statement,Cassette.Spriting.Spritastic.Selector,CssSelectorAnalyzer,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Selector\CssSelectorAnalyzer.cs,FindToken,The length of the statement  "                if ((idx == 0 || targetSelector.IndexOfAny(new[] { ' '' '\n'' '\r'' '\t'' '>' }' idx-1' 1) == idx-1 || targetSelector[idx] == '.' || targetSelector[idx] == '#') && " is 163.
Long Statement,Cassette.Spriting.Spritastic.Selector,CssSelectorAnalyzer,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Selector\CssSelectorAnalyzer.cs,FindToken,The length of the statement  "                    var targetTokens = Regex.SelectorSplitPattern.Split(targetSelector.Substring(startTargetIdx' endTargetdx - startTargetIdx + 1)); " is 128.
Complex Conditional,Cassette.Spriting.Spritastic.Generator,CssImageExtractor,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\CssImageExtractor.cs,CanSprite,The conditional expression  "imageClass.Width > 0                  && imageClass.Repeat == RepeatStyle.NoRepeat                  && ((imageClass.YOffset.PositionMode == PositionMode.Direction)                      || (imageClass.YOffset.PositionMode == PositionMode.Percent)                      || ((imageClass.YOffset.PositionMode == PositionMode.Unit) && (imageClass.YOffset.Offset >= 0 || imageClass.Height > 0)))"  is complex.
Complex Conditional,Cassette.Spriting.Spritastic.Generator,SpriteManager,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteManager.cs,Add,The conditional expression  "SpriteContainer.Size >= config.SpriteSizeLimit || (SpriteContainer.Colors >= config.SpriteColorLimit && !config.ImageQuantizationDisabled && !config.ImageOptimizationDisabled)"  is complex.
Complex Conditional,Cassette.Spriting.Spritastic.Selector,CssSelectorAnalyzer,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Selector\CssSelectorAnalyzer.cs,FindToken,The conditional expression  "(idx == 0 || targetSelector.IndexOfAny(new[] { ' '' '\n'' '\r'' '\t'' '>' }' idx-1' 1) == idx-1 || targetSelector[idx] == '.' || targetSelector[idx] == '#') &&                      (targetSelector.Length <= endIdx ||                      targetSelector.IndexOfAny(new[] {' '' '\n'' '\r'' '\t'' ':'' '.'' '#'' '>'}' endIdx' 1) == endIdx)"  is complex.
Magic Number,Cassette.Spriting,DefaultSpritingSettingsConfiguration,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\DefaultSpritingSettingsConfiguration.cs,Configure,The following statement contains a magic number: settings.SpriteColorLimit = 5000;
Magic Number,Cassette.Spriting,DefaultSpritingSettingsConfiguration,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\DefaultSpritingSettingsConfiguration.cs,Configure,The following statement contains a magic number: settings.SpriteSizeLimit = 50000;
Magic Number,Cassette.Spriting,DefaultSpritingSettingsConfiguration,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\DefaultSpritingSettingsConfiguration.cs,Configure,The following statement contains a magic number: settings.ImageOptimizationCompressionLevel = 5;
Magic Number,Cassette.Spriting.Spritastic.Generator,SpriteContainer,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,AddImage,The following statement contains a magic number: using (var originalBitmap = new Bitmap(new MemoryStream(imageBytes)))              {                  var width = image.Width ?? originalBitmap.Width; //cliped width of original image                  var height = image.Height ?? originalBitmap.Height;                  using (var writer = new SpriteWriter(width' height))                  {                      var x = image.XOffset.Offset < 0 ? Math.Abs(image.XOffset.Offset) : 0; //offset on original                      var y = image.YOffset.Offset < 0 ? Math.Abs(image.YOffset.Offset) : 0;                      var imageWidth = width; //canvas width                      if (width + x > originalBitmap.Width)                             width = originalBitmap.Width - x;                      var imageHeight = height;                      if (height + y > originalBitmap.Height)                          height = originalBitmap.Height - y;                      var offsetX = 0;                      var offsetY = 0;                      if (image.XOffset.PositionMode == PositionMode.Direction)                      {                          switch (image.XOffset.Direction)                          {                              case Direction.Left:                                  image.XOffset = new Position { PositionMode = PositionMode.Percent' Offset = 0};                                  break;                              case Direction.Center:                                  image.XOffset = new Position { PositionMode = PositionMode.Percent' Offset = 50};                                  break;                              case Direction.Right:                                  image.XOffset = new Position { PositionMode = PositionMode.Percent' Offset = 100 };                                  break;                          }                      }                      if (image.YOffset.PositionMode == PositionMode.Direction)                          switch (image.YOffset.Direction)                          {                              case Direction.Top:                                  image.YOffset = new Position { PositionMode = PositionMode.Percent' Offset = 0 };                                  break;                              case Direction.Center:                                  image.YOffset = new Position { PositionMode = PositionMode.Percent' Offset = 50 };                                  break;                              case Direction.Bottom:                                  image.YOffset = new Position { PositionMode = PositionMode.Percent' Offset = 100 };                                  break;                          }                      if (image.XOffset.PositionMode == PositionMode.Percent)                      {                          if (originalBitmap.Width > imageWidth)                              x = (int)Math.Round((originalBitmap.Width - imageWidth) * (image.XOffset.Offset / 100f)' 0);                          else                              offsetX = (int)Math.Round((imageWidth - originalBitmap.Width) * (image.XOffset.Offset / 100f)' 0);                      }                      else if (image.XOffset.PositionMode == PositionMode.Unit && image.XOffset.Offset > 0)                      {                          offsetX = image.XOffset.Offset;                          if (originalBitmap.Width + offsetX > imageWidth)                              width = imageWidth - offsetX;                      }                        if (image.YOffset.PositionMode == PositionMode.Percent)                      {                          if (originalBitmap.Height > imageHeight)                              y = (int)Math.Round((originalBitmap.Height - height) * (image.YOffset.Offset / 100f)' 0);                          else                              offsetY = (int)Math.Round((imageHeight - originalBitmap.Height) * (image.YOffset.Offset / 100f)' 0);                      }                        try                      {                          using (var bm = originalBitmap.Clone(new Rectangle(x' y' width' height)' originalBitmap.PixelFormat))                          {                              writer.WriteImage(bm' offsetX' offsetY);                          }                      }                      catch (OutOfMemoryException)                      {                          throw new InvalidOperationException(string.Format("Unable to Add {0} to Sprite."' image.ImageUrl));                      }                      bitmap = writer.SpriteImage;                      if ((originalBitmap.Width * originalBitmap.Height) > (bitmap.Width * bitmap.Height))                          Size += writer.GetBytes("image/png").Length;                      else                          Size += imageBytes.Length;                  }              }
Magic Number,Cassette.Spriting.Spritastic.Generator,SpriteContainer,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,AddImage,The following statement contains a magic number: using (var originalBitmap = new Bitmap(new MemoryStream(imageBytes)))              {                  var width = image.Width ?? originalBitmap.Width; //cliped width of original image                  var height = image.Height ?? originalBitmap.Height;                  using (var writer = new SpriteWriter(width' height))                  {                      var x = image.XOffset.Offset < 0 ? Math.Abs(image.XOffset.Offset) : 0; //offset on original                      var y = image.YOffset.Offset < 0 ? Math.Abs(image.YOffset.Offset) : 0;                      var imageWidth = width; //canvas width                      if (width + x > originalBitmap.Width)                             width = originalBitmap.Width - x;                      var imageHeight = height;                      if (height + y > originalBitmap.Height)                          height = originalBitmap.Height - y;                      var offsetX = 0;                      var offsetY = 0;                      if (image.XOffset.PositionMode == PositionMode.Direction)                      {                          switch (image.XOffset.Direction)                          {                              case Direction.Left:                                  image.XOffset = new Position { PositionMode = PositionMode.Percent' Offset = 0};                                  break;                              case Direction.Center:                                  image.XOffset = new Position { PositionMode = PositionMode.Percent' Offset = 50};                                  break;                              case Direction.Right:                                  image.XOffset = new Position { PositionMode = PositionMode.Percent' Offset = 100 };                                  break;                          }                      }                      if (image.YOffset.PositionMode == PositionMode.Direction)                          switch (image.YOffset.Direction)                          {                              case Direction.Top:                                  image.YOffset = new Position { PositionMode = PositionMode.Percent' Offset = 0 };                                  break;                              case Direction.Center:                                  image.YOffset = new Position { PositionMode = PositionMode.Percent' Offset = 50 };                                  break;                              case Direction.Bottom:                                  image.YOffset = new Position { PositionMode = PositionMode.Percent' Offset = 100 };                                  break;                          }                      if (image.XOffset.PositionMode == PositionMode.Percent)                      {                          if (originalBitmap.Width > imageWidth)                              x = (int)Math.Round((originalBitmap.Width - imageWidth) * (image.XOffset.Offset / 100f)' 0);                          else                              offsetX = (int)Math.Round((imageWidth - originalBitmap.Width) * (image.XOffset.Offset / 100f)' 0);                      }                      else if (image.XOffset.PositionMode == PositionMode.Unit && image.XOffset.Offset > 0)                      {                          offsetX = image.XOffset.Offset;                          if (originalBitmap.Width + offsetX > imageWidth)                              width = imageWidth - offsetX;                      }                        if (image.YOffset.PositionMode == PositionMode.Percent)                      {                          if (originalBitmap.Height > imageHeight)                              y = (int)Math.Round((originalBitmap.Height - height) * (image.YOffset.Offset / 100f)' 0);                          else                              offsetY = (int)Math.Round((imageHeight - originalBitmap.Height) * (image.YOffset.Offset / 100f)' 0);                      }                        try                      {                          using (var bm = originalBitmap.Clone(new Rectangle(x' y' width' height)' originalBitmap.PixelFormat))                          {                              writer.WriteImage(bm' offsetX' offsetY);                          }                      }                      catch (OutOfMemoryException)                      {                          throw new InvalidOperationException(string.Format("Unable to Add {0} to Sprite."' image.ImageUrl));                      }                      bitmap = writer.SpriteImage;                      if ((originalBitmap.Width * originalBitmap.Height) > (bitmap.Width * bitmap.Height))                          Size += writer.GetBytes("image/png").Length;                      else                          Size += imageBytes.Length;                  }              }
Magic Number,Cassette.Spriting.Spritastic.Generator,SpriteContainer,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,AddImage,The following statement contains a magic number: using (var originalBitmap = new Bitmap(new MemoryStream(imageBytes)))              {                  var width = image.Width ?? originalBitmap.Width; //cliped width of original image                  var height = image.Height ?? originalBitmap.Height;                  using (var writer = new SpriteWriter(width' height))                  {                      var x = image.XOffset.Offset < 0 ? Math.Abs(image.XOffset.Offset) : 0; //offset on original                      var y = image.YOffset.Offset < 0 ? Math.Abs(image.YOffset.Offset) : 0;                      var imageWidth = width; //canvas width                      if (width + x > originalBitmap.Width)                             width = originalBitmap.Width - x;                      var imageHeight = height;                      if (height + y > originalBitmap.Height)                          height = originalBitmap.Height - y;                      var offsetX = 0;                      var offsetY = 0;                      if (image.XOffset.PositionMode == PositionMode.Direction)                      {                          switch (image.XOffset.Direction)                          {                              case Direction.Left:                                  image.XOffset = new Position { PositionMode = PositionMode.Percent' Offset = 0};                                  break;                              case Direction.Center:                                  image.XOffset = new Position { PositionMode = PositionMode.Percent' Offset = 50};                                  break;                              case Direction.Right:                                  image.XOffset = new Position { PositionMode = PositionMode.Percent' Offset = 100 };                                  break;                          }                      }                      if (image.YOffset.PositionMode == PositionMode.Direction)                          switch (image.YOffset.Direction)                          {                              case Direction.Top:                                  image.YOffset = new Position { PositionMode = PositionMode.Percent' Offset = 0 };                                  break;                              case Direction.Center:                                  image.YOffset = new Position { PositionMode = PositionMode.Percent' Offset = 50 };                                  break;                              case Direction.Bottom:                                  image.YOffset = new Position { PositionMode = PositionMode.Percent' Offset = 100 };                                  break;                          }                      if (image.XOffset.PositionMode == PositionMode.Percent)                      {                          if (originalBitmap.Width > imageWidth)                              x = (int)Math.Round((originalBitmap.Width - imageWidth) * (image.XOffset.Offset / 100f)' 0);                          else                              offsetX = (int)Math.Round((imageWidth - originalBitmap.Width) * (image.XOffset.Offset / 100f)' 0);                      }                      else if (image.XOffset.PositionMode == PositionMode.Unit && image.XOffset.Offset > 0)                      {                          offsetX = image.XOffset.Offset;                          if (originalBitmap.Width + offsetX > imageWidth)                              width = imageWidth - offsetX;                      }                        if (image.YOffset.PositionMode == PositionMode.Percent)                      {                          if (originalBitmap.Height > imageHeight)                              y = (int)Math.Round((originalBitmap.Height - height) * (image.YOffset.Offset / 100f)' 0);                          else                              offsetY = (int)Math.Round((imageHeight - originalBitmap.Height) * (image.YOffset.Offset / 100f)' 0);                      }                        try                      {                          using (var bm = originalBitmap.Clone(new Rectangle(x' y' width' height)' originalBitmap.PixelFormat))                          {                              writer.WriteImage(bm' offsetX' offsetY);                          }                      }                      catch (OutOfMemoryException)                      {                          throw new InvalidOperationException(string.Format("Unable to Add {0} to Sprite."' image.ImageUrl));                      }                      bitmap = writer.SpriteImage;                      if ((originalBitmap.Width * originalBitmap.Height) > (bitmap.Width * bitmap.Height))                          Size += writer.GetBytes("image/png").Length;                      else                          Size += imageBytes.Length;                  }              }
Magic Number,Cassette.Spriting.Spritastic.Generator,SpriteContainer,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,AddImage,The following statement contains a magic number: using (var originalBitmap = new Bitmap(new MemoryStream(imageBytes)))              {                  var width = image.Width ?? originalBitmap.Width; //cliped width of original image                  var height = image.Height ?? originalBitmap.Height;                  using (var writer = new SpriteWriter(width' height))                  {                      var x = image.XOffset.Offset < 0 ? Math.Abs(image.XOffset.Offset) : 0; //offset on original                      var y = image.YOffset.Offset < 0 ? Math.Abs(image.YOffset.Offset) : 0;                      var imageWidth = width; //canvas width                      if (width + x > originalBitmap.Width)                             width = originalBitmap.Width - x;                      var imageHeight = height;                      if (height + y > originalBitmap.Height)                          height = originalBitmap.Height - y;                      var offsetX = 0;                      var offsetY = 0;                      if (image.XOffset.PositionMode == PositionMode.Direction)                      {                          switch (image.XOffset.Direction)                          {                              case Direction.Left:                                  image.XOffset = new Position { PositionMode = PositionMode.Percent' Offset = 0};                                  break;                              case Direction.Center:                                  image.XOffset = new Position { PositionMode = PositionMode.Percent' Offset = 50};                                  break;                              case Direction.Right:                                  image.XOffset = new Position { PositionMode = PositionMode.Percent' Offset = 100 };                                  break;                          }                      }                      if (image.YOffset.PositionMode == PositionMode.Direction)                          switch (image.YOffset.Direction)                          {                              case Direction.Top:                                  image.YOffset = new Position { PositionMode = PositionMode.Percent' Offset = 0 };                                  break;                              case Direction.Center:                                  image.YOffset = new Position { PositionMode = PositionMode.Percent' Offset = 50 };                                  break;                              case Direction.Bottom:                                  image.YOffset = new Position { PositionMode = PositionMode.Percent' Offset = 100 };                                  break;                          }                      if (image.XOffset.PositionMode == PositionMode.Percent)                      {                          if (originalBitmap.Width > imageWidth)                              x = (int)Math.Round((originalBitmap.Width - imageWidth) * (image.XOffset.Offset / 100f)' 0);                          else                              offsetX = (int)Math.Round((imageWidth - originalBitmap.Width) * (image.XOffset.Offset / 100f)' 0);                      }                      else if (image.XOffset.PositionMode == PositionMode.Unit && image.XOffset.Offset > 0)                      {                          offsetX = image.XOffset.Offset;                          if (originalBitmap.Width + offsetX > imageWidth)                              width = imageWidth - offsetX;                      }                        if (image.YOffset.PositionMode == PositionMode.Percent)                      {                          if (originalBitmap.Height > imageHeight)                              y = (int)Math.Round((originalBitmap.Height - height) * (image.YOffset.Offset / 100f)' 0);                          else                              offsetY = (int)Math.Round((imageHeight - originalBitmap.Height) * (image.YOffset.Offset / 100f)' 0);                      }                        try                      {                          using (var bm = originalBitmap.Clone(new Rectangle(x' y' width' height)' originalBitmap.PixelFormat))                          {                              writer.WriteImage(bm' offsetX' offsetY);                          }                      }                      catch (OutOfMemoryException)                      {                          throw new InvalidOperationException(string.Format("Unable to Add {0} to Sprite."' image.ImageUrl));                      }                      bitmap = writer.SpriteImage;                      if ((originalBitmap.Width * originalBitmap.Height) > (bitmap.Width * bitmap.Height))                          Size += writer.GetBytes("image/png").Length;                      else                          Size += imageBytes.Length;                  }              }
Magic Number,Cassette.Spriting.Spritastic.Generator,SpriteContainer,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,GetColors,The following statement contains a magic number: try              {                  var byteLength = data.Stride < 0 ? -data.Stride : data.Stride;                  var buffer = new Byte[byteLength * bitmap.Height];                  var offset = 0;                  Marshal.Copy(data.Scan0' buffer' 0' buffer.Length);                  for (var y = 0; y < bitmap.Height; y++)                  {                      for (var x = 0; x < bitmap.Width; x++)                      {                          var argb = BitConverter.ToInt32(buffer' offset);                          uniqueColors.Add(argb);                          totalArgb += argb;                          ++total;                          offset += 4;                      }                  }                    return (int)(totalArgb / total);              }              finally              {                  bitmap.UnlockBits(data);              }
Magic Number,Cassette.Spriting.Spritastic.Generator,SpriteWriter,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteWriter.cs,GetBytes,The following statement contains a magic number: using (var spriteEncoderParameters = new EncoderParameters(1))              {                  spriteEncoderParameters.Param[0] = new EncoderParameter(Encoder.Quality' 90);                  using (var stream = new MemoryStream())                  {                      SpriteImage.Save(stream' ImageCodecInfo.GetImageEncoders().First(x => x.MimeType == mimeType)' spriteEncoderParameters);                      return stream.GetBuffer();                  }              }
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,BackgroundImageClass,The following statement contains a magic number: if (paddingMatches.Count > 0)              {                  foreach (var pads in from Match paddingMatch in paddingMatches select GetPadding(paddingMatch))                  {                      if (pads[0] != null)                      {                          PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingTop;                          PaddingTop = pads[0];                      }                      if (pads[1] != null)                      {                          PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingRight;                          PaddingRight = pads[1];                      }                      if (pads[2] != null)                      {                          PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingBottom;                          PaddingBottom = pads[2];                      }                      if (pads[3] != null)                      {                          PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingLeft;                          PaddingLeft = pads[3];                      }                  }              }
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,BackgroundImageClass,The following statement contains a magic number: if (paddingMatches.Count > 0)              {                  foreach (var pads in from Match paddingMatch in paddingMatches select GetPadding(paddingMatch))                  {                      if (pads[0] != null)                      {                          PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingTop;                          PaddingTop = pads[0];                      }                      if (pads[1] != null)                      {                          PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingRight;                          PaddingRight = pads[1];                      }                      if (pads[2] != null)                      {                          PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingBottom;                          PaddingBottom = pads[2];                      }                      if (pads[3] != null)                      {                          PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingLeft;                          PaddingLeft = pads[3];                      }                  }              }
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,BackgroundImageClass,The following statement contains a magic number: if (paddingMatches.Count > 0)              {                  foreach (var pads in from Match paddingMatch in paddingMatches select GetPadding(paddingMatch))                  {                      if (pads[0] != null)                      {                          PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingTop;                          PaddingTop = pads[0];                      }                      if (pads[1] != null)                      {                          PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingRight;                          PaddingRight = pads[1];                      }                      if (pads[2] != null)                      {                          PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingBottom;                          PaddingBottom = pads[2];                      }                      if (pads[3] != null)                      {                          PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingLeft;                          PaddingLeft = pads[3];                      }                  }              }
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,BackgroundImageClass,The following statement contains a magic number: if (paddingMatches.Count > 0)              {                  foreach (var pads in from Match paddingMatch in paddingMatches select GetPadding(paddingMatch))                  {                      if (pads[0] != null)                      {                          PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingTop;                          PaddingTop = pads[0];                      }                      if (pads[1] != null)                      {                          PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingRight;                          PaddingRight = pads[1];                      }                      if (pads[2] != null)                      {                          PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingBottom;                          PaddingBottom = pads[2];                      }                      if (pads[3] != null)                      {                          PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingLeft;                          PaddingLeft = pads[3];                      }                  }              }
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: var padVals = new int?[4];
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-left")                  padVals[3] = calcPadPixels(pad1' ExplicitWidth);              else if (side == "-right")                  padVals[1] = calcPadPixels(pad1' ExplicitWidth);              else if (side == "-top")                  padVals[0] = calcPadPixels(pad1' ExplicitHeight);              else if (side == "-bottom")                  padVals[2] = calcPadPixels(pad1' ExplicitHeight);              else              {                  var groupCount = paddingMatch.Groups.Cast<Group>().Count(x => x.Length > 0);                  switch (groupCount-1)                  {                      case 1:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad1' ExplicitWidth);                          padVals[2] = calcPadPixels(pad1' ExplicitHeight);                          padVals[3] = calcPadPixels(pad1' ExplicitWidth);                          break;                      case 2:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad1' ExplicitHeight);                          padVals[3] = calcPadPixels(pad2' ExplicitWidth);                          break;                      case 3:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad3' ExplicitHeight);                          padVals[3] = calcPadPixels(pad2' ExplicitWidth);                          break;                      case 4:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad3' ExplicitHeight);                          padVals[3] = calcPadPixels(pad4' ExplicitWidth);                          break;                  }              }
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-left")                  padVals[3] = calcPadPixels(pad1' ExplicitWidth);              else if (side == "-right")                  padVals[1] = calcPadPixels(pad1' ExplicitWidth);              else if (side == "-top")                  padVals[0] = calcPadPixels(pad1' ExplicitHeight);              else if (side == "-bottom")                  padVals[2] = calcPadPixels(pad1' ExplicitHeight);              else              {                  var groupCount = paddingMatch.Groups.Cast<Group>().Count(x => x.Length > 0);                  switch (groupCount-1)                  {                      case 1:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad1' ExplicitWidth);                          padVals[2] = calcPadPixels(pad1' ExplicitHeight);                          padVals[3] = calcPadPixels(pad1' ExplicitWidth);                          break;                      case 2:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad1' ExplicitHeight);                          padVals[3] = calcPadPixels(pad2' ExplicitWidth);                          break;                      case 3:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad3' ExplicitHeight);                          padVals[3] = calcPadPixels(pad2' ExplicitWidth);                          break;                      case 4:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad3' ExplicitHeight);                          padVals[3] = calcPadPixels(pad4' ExplicitWidth);                          break;                  }              }
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-left")                  padVals[3] = calcPadPixels(pad1' ExplicitWidth);              else if (side == "-right")                  padVals[1] = calcPadPixels(pad1' ExplicitWidth);              else if (side == "-top")                  padVals[0] = calcPadPixels(pad1' ExplicitHeight);              else if (side == "-bottom")                  padVals[2] = calcPadPixels(pad1' ExplicitHeight);              else              {                  var groupCount = paddingMatch.Groups.Cast<Group>().Count(x => x.Length > 0);                  switch (groupCount-1)                  {                      case 1:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad1' ExplicitWidth);                          padVals[2] = calcPadPixels(pad1' ExplicitHeight);                          padVals[3] = calcPadPixels(pad1' ExplicitWidth);                          break;                      case 2:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad1' ExplicitHeight);                          padVals[3] = calcPadPixels(pad2' ExplicitWidth);                          break;                      case 3:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad3' ExplicitHeight);                          padVals[3] = calcPadPixels(pad2' ExplicitWidth);                          break;                      case 4:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad3' ExplicitHeight);                          padVals[3] = calcPadPixels(pad4' ExplicitWidth);                          break;                  }              }
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-left")                  padVals[3] = calcPadPixels(pad1' ExplicitWidth);              else if (side == "-right")                  padVals[1] = calcPadPixels(pad1' ExplicitWidth);              else if (side == "-top")                  padVals[0] = calcPadPixels(pad1' ExplicitHeight);              else if (side == "-bottom")                  padVals[2] = calcPadPixels(pad1' ExplicitHeight);              else              {                  var groupCount = paddingMatch.Groups.Cast<Group>().Count(x => x.Length > 0);                  switch (groupCount-1)                  {                      case 1:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad1' ExplicitWidth);                          padVals[2] = calcPadPixels(pad1' ExplicitHeight);                          padVals[3] = calcPadPixels(pad1' ExplicitWidth);                          break;                      case 2:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad1' ExplicitHeight);                          padVals[3] = calcPadPixels(pad2' ExplicitWidth);                          break;                      case 3:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad3' ExplicitHeight);                          padVals[3] = calcPadPixels(pad2' ExplicitWidth);                          break;                      case 4:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad3' ExplicitHeight);                          padVals[3] = calcPadPixels(pad4' ExplicitWidth);                          break;                  }              }
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-left")                  padVals[3] = calcPadPixels(pad1' ExplicitWidth);              else if (side == "-right")                  padVals[1] = calcPadPixels(pad1' ExplicitWidth);              else if (side == "-top")                  padVals[0] = calcPadPixels(pad1' ExplicitHeight);              else if (side == "-bottom")                  padVals[2] = calcPadPixels(pad1' ExplicitHeight);              else              {                  var groupCount = paddingMatch.Groups.Cast<Group>().Count(x => x.Length > 0);                  switch (groupCount-1)                  {                      case 1:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad1' ExplicitWidth);                          padVals[2] = calcPadPixels(pad1' ExplicitHeight);                          padVals[3] = calcPadPixels(pad1' ExplicitWidth);                          break;                      case 2:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad1' ExplicitHeight);                          padVals[3] = calcPadPixels(pad2' ExplicitWidth);                          break;                      case 3:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad3' ExplicitHeight);                          padVals[3] = calcPadPixels(pad2' ExplicitWidth);                          break;                      case 4:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad3' ExplicitHeight);                          padVals[3] = calcPadPixels(pad4' ExplicitWidth);                          break;                  }              }
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-left")                  padVals[3] = calcPadPixels(pad1' ExplicitWidth);              else if (side == "-right")                  padVals[1] = calcPadPixels(pad1' ExplicitWidth);              else if (side == "-top")                  padVals[0] = calcPadPixels(pad1' ExplicitHeight);              else if (side == "-bottom")                  padVals[2] = calcPadPixels(pad1' ExplicitHeight);              else              {                  var groupCount = paddingMatch.Groups.Cast<Group>().Count(x => x.Length > 0);                  switch (groupCount-1)                  {                      case 1:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad1' ExplicitWidth);                          padVals[2] = calcPadPixels(pad1' ExplicitHeight);                          padVals[3] = calcPadPixels(pad1' ExplicitWidth);                          break;                      case 2:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad1' ExplicitHeight);                          padVals[3] = calcPadPixels(pad2' ExplicitWidth);                          break;                      case 3:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad3' ExplicitHeight);                          padVals[3] = calcPadPixels(pad2' ExplicitWidth);                          break;                      case 4:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad3' ExplicitHeight);                          padVals[3] = calcPadPixels(pad4' ExplicitWidth);                          break;                  }              }
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-left")                  padVals[3] = calcPadPixels(pad1' ExplicitWidth);              else if (side == "-right")                  padVals[1] = calcPadPixels(pad1' ExplicitWidth);              else if (side == "-top")                  padVals[0] = calcPadPixels(pad1' ExplicitHeight);              else if (side == "-bottom")                  padVals[2] = calcPadPixels(pad1' ExplicitHeight);              else              {                  var groupCount = paddingMatch.Groups.Cast<Group>().Count(x => x.Length > 0);                  switch (groupCount-1)                  {                      case 1:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad1' ExplicitWidth);                          padVals[2] = calcPadPixels(pad1' ExplicitHeight);                          padVals[3] = calcPadPixels(pad1' ExplicitWidth);                          break;                      case 2:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad1' ExplicitHeight);                          padVals[3] = calcPadPixels(pad2' ExplicitWidth);                          break;                      case 3:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad3' ExplicitHeight);                          padVals[3] = calcPadPixels(pad2' ExplicitWidth);                          break;                      case 4:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad3' ExplicitHeight);                          padVals[3] = calcPadPixels(pad4' ExplicitWidth);                          break;                  }              }
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-left")                  padVals[3] = calcPadPixels(pad1' ExplicitWidth);              else if (side == "-right")                  padVals[1] = calcPadPixels(pad1' ExplicitWidth);              else if (side == "-top")                  padVals[0] = calcPadPixels(pad1' ExplicitHeight);              else if (side == "-bottom")                  padVals[2] = calcPadPixels(pad1' ExplicitHeight);              else              {                  var groupCount = paddingMatch.Groups.Cast<Group>().Count(x => x.Length > 0);                  switch (groupCount-1)                  {                      case 1:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad1' ExplicitWidth);                          padVals[2] = calcPadPixels(pad1' ExplicitHeight);                          padVals[3] = calcPadPixels(pad1' ExplicitWidth);                          break;                      case 2:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad1' ExplicitHeight);                          padVals[3] = calcPadPixels(pad2' ExplicitWidth);                          break;                      case 3:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad3' ExplicitHeight);                          padVals[3] = calcPadPixels(pad2' ExplicitWidth);                          break;                      case 4:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad3' ExplicitHeight);                          padVals[3] = calcPadPixels(pad4' ExplicitWidth);                          break;                  }              }
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-left")                  padVals[3] = calcPadPixels(pad1' ExplicitWidth);              else if (side == "-right")                  padVals[1] = calcPadPixels(pad1' ExplicitWidth);              else if (side == "-top")                  padVals[0] = calcPadPixels(pad1' ExplicitHeight);              else if (side == "-bottom")                  padVals[2] = calcPadPixels(pad1' ExplicitHeight);              else              {                  var groupCount = paddingMatch.Groups.Cast<Group>().Count(x => x.Length > 0);                  switch (groupCount-1)                  {                      case 1:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad1' ExplicitWidth);                          padVals[2] = calcPadPixels(pad1' ExplicitHeight);                          padVals[3] = calcPadPixels(pad1' ExplicitWidth);                          break;                      case 2:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad1' ExplicitHeight);                          padVals[3] = calcPadPixels(pad2' ExplicitWidth);                          break;                      case 3:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad3' ExplicitHeight);                          padVals[3] = calcPadPixels(pad2' ExplicitWidth);                          break;                      case 4:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad3' ExplicitHeight);                          padVals[3] = calcPadPixels(pad4' ExplicitWidth);                          break;                  }              }
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-left")                  padVals[3] = calcPadPixels(pad1' ExplicitWidth);              else if (side == "-right")                  padVals[1] = calcPadPixels(pad1' ExplicitWidth);              else if (side == "-top")                  padVals[0] = calcPadPixels(pad1' ExplicitHeight);              else if (side == "-bottom")                  padVals[2] = calcPadPixels(pad1' ExplicitHeight);              else              {                  var groupCount = paddingMatch.Groups.Cast<Group>().Count(x => x.Length > 0);                  switch (groupCount-1)                  {                      case 1:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad1' ExplicitWidth);                          padVals[2] = calcPadPixels(pad1' ExplicitHeight);                          padVals[3] = calcPadPixels(pad1' ExplicitWidth);                          break;                      case 2:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad1' ExplicitHeight);                          padVals[3] = calcPadPixels(pad2' ExplicitWidth);                          break;                      case 3:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad3' ExplicitHeight);                          padVals[3] = calcPadPixels(pad2' ExplicitWidth);                          break;                      case 4:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad3' ExplicitHeight);                          padVals[3] = calcPadPixels(pad4' ExplicitWidth);                          break;                  }              }
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-left")                  padVals[3] = calcPadPixels(pad1' ExplicitWidth);              else if (side == "-right")                  padVals[1] = calcPadPixels(pad1' ExplicitWidth);              else if (side == "-top")                  padVals[0] = calcPadPixels(pad1' ExplicitHeight);              else if (side == "-bottom")                  padVals[2] = calcPadPixels(pad1' ExplicitHeight);              else              {                  var groupCount = paddingMatch.Groups.Cast<Group>().Count(x => x.Length > 0);                  switch (groupCount-1)                  {                      case 1:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad1' ExplicitWidth);                          padVals[2] = calcPadPixels(pad1' ExplicitHeight);                          padVals[3] = calcPadPixels(pad1' ExplicitWidth);                          break;                      case 2:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad1' ExplicitHeight);                          padVals[3] = calcPadPixels(pad2' ExplicitWidth);                          break;                      case 3:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad3' ExplicitHeight);                          padVals[3] = calcPadPixels(pad2' ExplicitWidth);                          break;                      case 4:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad3' ExplicitHeight);                          padVals[3] = calcPadPixels(pad4' ExplicitWidth);                          break;                  }              }
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-left")                  padVals[3] = calcPadPixels(pad1' ExplicitWidth);              else if (side == "-right")                  padVals[1] = calcPadPixels(pad1' ExplicitWidth);              else if (side == "-top")                  padVals[0] = calcPadPixels(pad1' ExplicitHeight);              else if (side == "-bottom")                  padVals[2] = calcPadPixels(pad1' ExplicitHeight);              else              {                  var groupCount = paddingMatch.Groups.Cast<Group>().Count(x => x.Length > 0);                  switch (groupCount-1)                  {                      case 1:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad1' ExplicitWidth);                          padVals[2] = calcPadPixels(pad1' ExplicitHeight);                          padVals[3] = calcPadPixels(pad1' ExplicitWidth);                          break;                      case 2:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad1' ExplicitHeight);                          padVals[3] = calcPadPixels(pad2' ExplicitWidth);                          break;                      case 3:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad3' ExplicitHeight);                          padVals[3] = calcPadPixels(pad2' ExplicitWidth);                          break;                      case 4:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad3' ExplicitHeight);                          padVals[3] = calcPadPixels(pad4' ExplicitWidth);                          break;                  }              }
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-left")                  padVals[3] = calcPadPixels(pad1' ExplicitWidth);              else if (side == "-right")                  padVals[1] = calcPadPixels(pad1' ExplicitWidth);              else if (side == "-top")                  padVals[0] = calcPadPixels(pad1' ExplicitHeight);              else if (side == "-bottom")                  padVals[2] = calcPadPixels(pad1' ExplicitHeight);              else              {                  var groupCount = paddingMatch.Groups.Cast<Group>().Count(x => x.Length > 0);                  switch (groupCount-1)                  {                      case 1:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad1' ExplicitWidth);                          padVals[2] = calcPadPixels(pad1' ExplicitHeight);                          padVals[3] = calcPadPixels(pad1' ExplicitWidth);                          break;                      case 2:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad1' ExplicitHeight);                          padVals[3] = calcPadPixels(pad2' ExplicitWidth);                          break;                      case 3:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad3' ExplicitHeight);                          padVals[3] = calcPadPixels(pad2' ExplicitWidth);                          break;                      case 4:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad3' ExplicitHeight);                          padVals[3] = calcPadPixels(pad4' ExplicitWidth);                          break;                  }              }
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,ParseNumericOffset,The following statement contains a magic number: if (offsetString.Length > 2 && "|in|cm|mm|em|ex|pt|pc".IndexOf(offsetString.Substring(offsetString.Length-2'2)' StringComparison.Ordinal) > -1)                  return offset;
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,ParseNumericOffset,The following statement contains a magic number: if (offsetString.Length > 2 && "|in|cm|mm|em|ex|pt|pc".IndexOf(offsetString.Substring(offsetString.Length-2'2)' StringComparison.Ordinal) > -1)                  return offset;
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,ParseNumericOffset,The following statement contains a magic number: if (offsetString.Length > 2 && "|in|cm|mm|em|ex|pt|pc".IndexOf(offsetString.Substring(offsetString.Length-2'2)' StringComparison.Ordinal) > -1)                  return offset;
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,ParseNumericOffset,The following statement contains a magic number: if (offsetString.EndsWith("px"))                  trim = 2;
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,ScoreSpecificity,The following statement contains a magic number: foreach (char c in Selector)              {                  switch (c)                  {                      case '#':                          score += 100;                          break;                      case '.':                      case '[':                      case ':':                          score += 10;                          break;                      case '*':                      case '+':                      case '>':                          break;                      default:                          if (lastChar == ' ')                              score += 1;                          break;                  }                  lastChar = c;              }
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,ScoreSpecificity,The following statement contains a magic number: foreach (char c in Selector)              {                  switch (c)                  {                      case '#':                          score += 100;                          break;                      case '.':                      case '[':                      case ':':                          score += 10;                          break;                      case '*':                      case '+':                      case '>':                          break;                      default:                          if (lastChar == ' ')                              score += 1;                          break;                  }                  lastChar = c;              }
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,ScoreSpecificity,The following statement contains a magic number: score -= (matches.Count * 9);
Magic Number,Cassette.Spriting.Spritastic.Utilities,PngOptimizer,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Utilities\PngOptimizer.cs,OptimizePng,The following statement contains a magic number: if (!imageQuantizationDisabled)              {                  using (var unQuantized = new Bitmap(new MemoryStream(bytes)))                  {                      using (var quantized = wuQuantizer.QuantizeImage(unQuantized' 10' 5))                      {                          var memStream = new MemoryStream();                          quantized.Save(memStream' ImageFormat.Png);                          optimizedBytes = memStream.GetBuffer();                      }                  }              }
Magic Number,Cassette.Spriting.Spritastic.Utilities,PngOptimizer,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Utilities\PngOptimizer.cs,OptimizePng,The following statement contains a magic number: if (!imageQuantizationDisabled)              {                  using (var unQuantized = new Bitmap(new MemoryStream(bytes)))                  {                      using (var quantized = wuQuantizer.QuantizeImage(unQuantized' 10' 5))                      {                          var memStream = new MemoryStream();                          quantized.Save(memStream' ImageFormat.Png);                          optimizedBytes = memStream.GetBuffer();                      }                  }              }
Magic Number,Cassette.Spriting.Spritastic.Utilities,PngOptimizer,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Utilities\PngOptimizer.cs,InvokeExecutable,The following statement contains a magic number: using(var process = new Process())              {                  process.StartInfo = new ProcessStartInfo                                          {                      UseShellExecute = false'                      RedirectStandardOutput = true'                      CreateNoWindow = true'                      FileName = executable'                      Arguments = arguments                  };                  process.Start();                  process.StandardOutput.ReadToEnd();                  process.WaitForExit(10000);                  if(!process.HasExited)                  {                      process.Kill();                      throw new OptimizationException                          (string.Format("Unable to optimize image using executable {0} with arguments {1}"'                           executable' arguments));                  }              }
Magic Number,Cassette.Spriting.Spritastic.Utilities,WebClientWrapper,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Utilities\WebClientWrapper.cs,WebClientWrapper,The following statement contains a magic number: if (TrustLevelChecker.IsFullTrust() && Environment.Version.Major < 4)                  return;
Magic Number,Cassette.Spriting.Spritastic.Utilities,WebClientWrapper,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Utilities\WebClientWrapper.cs,DownloadBytes,The following statement contains a magic number: try              {                  using (var client = new WebClient())                  {                      if (TrustLevelChecker.IsFullTrust() || Environment.Version.Major >= 4)                          client.Proxy = proxy;                      client.Credentials = CredentialCache.DefaultCredentials;                      return client.DownloadData(url);                  }              }              catch (Exception ex)              {                  throw new SpriteException(                      string.Format("Spritastic had problems accessing {0}. Error Message from WebClient is: {1}"' url'                                    ex.Message)' ex);              }
Missing Default,Cassette.Spriting.Spritastic.Generator,SpriteContainer,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,AddImage,The following switch statement is missing a default case: switch (image.XOffset.Direction)                          {                              case Direction.Left:                                  image.XOffset = new Position { PositionMode = PositionMode.Percent' Offset = 0};                                  break;                              case Direction.Center:                                  image.XOffset = new Position { PositionMode = PositionMode.Percent' Offset = 50};                                  break;                              case Direction.Right:                                  image.XOffset = new Position { PositionMode = PositionMode.Percent' Offset = 100 };                                  break;                          }
Missing Default,Cassette.Spriting.Spritastic.Generator,SpriteContainer,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,AddImage,The following switch statement is missing a default case: switch (image.YOffset.Direction)                          {                              case Direction.Top:                                  image.YOffset = new Position { PositionMode = PositionMode.Percent' Offset = 0 };                                  break;                              case Direction.Center:                                  image.YOffset = new Position { PositionMode = PositionMode.Percent' Offset = 50 };                                  break;                              case Direction.Bottom:                                  image.YOffset = new Position { PositionMode = PositionMode.Percent' Offset = 100 };                                  break;                          }
Missing Default,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,C:\repos\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following switch statement is missing a default case: switch (groupCount-1)                  {                      case 1:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad1' ExplicitWidth);                          padVals[2] = calcPadPixels(pad1' ExplicitHeight);                          padVals[3] = calcPadPixels(pad1' ExplicitWidth);                          break;                      case 2:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad1' ExplicitHeight);                          padVals[3] = calcPadPixels(pad2' ExplicitWidth);                          break;                      case 3:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad3' ExplicitHeight);                          padVals[3] = calcPadPixels(pad2' ExplicitWidth);                          break;                      case 4:                          padVals[0] = calcPadPixels(pad1' ExplicitHeight);                          padVals[1] = calcPadPixels(pad2' ExplicitWidth);                          padVals[2] = calcPadPixels(pad3' ExplicitHeight);                          padVals[3] = calcPadPixels(pad4' ExplicitWidth);                          break;                  }
