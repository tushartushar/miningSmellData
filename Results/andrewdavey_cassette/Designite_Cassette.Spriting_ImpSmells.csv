Implementation smell,Namespace,Class,File,Method,Description
Long Method,Cassette.Spriting.Spritastic.Generator,SpriteContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,AddImage,The method has 108 lines of code.
Complex Method,Cassette.Spriting.Spritastic.Generator,CssImageExtractor,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\CssImageExtractor.cs,ExtractImageUrls,Cyclomatic complexity of the method is 10
Complex Method,Cassette.Spriting.Spritastic.Generator,CssImageExtractor,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\CssImageExtractor.cs,InheritMissingProperties,Cyclomatic complexity of the method is 11
Complex Method,Cassette.Spriting.Spritastic.Generator,SpriteContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,AddImage,Cyclomatic complexity of the method is 30
Complex Method,Cassette.Spriting.Spritastic.Generator,SpriteManager,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteManager.cs,Flush,Cyclomatic complexity of the method is 9
Complex Method,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,BackgroundImageClass,Cyclomatic complexity of the method is 16
Complex Method,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,Cyclomatic complexity of the method is 28
Complex Method,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,SetOffsets,Cyclomatic complexity of the method is 10
Complex Method,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,ScoreSpecificity,Cyclomatic complexity of the method is 17
Long Statement,Cassette.Spriting.Spritastic.Generator,CssImageExtractor,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\CssImageExtractor.cs,ExtractImageUrls,The length of the statement  "					if (targetSelectors.Any (targetSelector => cssSelectorAnalyzer.IsInScopeOfTarget (targetSelector.Trim ()' selector.Trim ()))) " is 125.
Long Statement,Cassette.Spriting.Spritastic.Generator,CssImageExtractor,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\CssImageExtractor.cs,DerivableHasMissingProperty,The length of the statement  "	if ((imageClass.PropertyCompletion & property) != property && (derrivableClass.PropertyCompletion & property) == property) { " is 124.
Long Statement,Cassette.Spriting.Spritastic.Generator,CssImageExtractor,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\CssImageExtractor.cs,CanSprite,The length of the statement  "	if (imageClass.Width > 0 && imageClass.Repeat == RepeatStyle.NoRepeat && ((imageClass.YOffset.PositionMode == PositionMode.Direction) || (imageClass.YOffset.PositionMode == PositionMode.Percent) || ((imageClass.YOffset.PositionMode == PositionMode.Unit) && (imageClass.YOffset.Offset >= 0 || imageClass.Height > 0)))) " is 317.
Long Statement,Cassette.Spriting.Spritastic.Generator,CssImageExtractor,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\CssImageExtractor.cs,IsComplete,The length of the statement  "	return (imageClass.PropertyCompletion & (PropertyCompletion.HasHeight | PropertyCompletion.HasImage | PropertyCompletion.HasPaddingBottom | PropertyCompletion.HasPaddingLeft | PropertyCompletion.HasPaddingRight | PropertyCompletion.HasPaddingTop | PropertyCompletion.HasRepeat | PropertyCompletion.HasWidth | PropertyCompletion.HasXOffset | PropertyCompletion.HasYOffset)) == (PropertyCompletion.HasHeight | PropertyCompletion.HasImage | PropertyCompletion.HasPaddingBottom | PropertyCompletion.HasPaddingLeft | PropertyCompletion.HasPaddingRight | PropertyCompletion.HasPaddingTop | PropertyCompletion.HasRepeat | PropertyCompletion.HasWidth | PropertyCompletion.HasXOffset | PropertyCompletion.HasYOffset); " is 708.
Long Statement,Cassette.Spriting.Spritastic.Generator,SpriteContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,GetColors,The length of the statement  "	var data = bitmap.LockBits (Rectangle.FromLTRB (0' 0' bitmap.Width' bitmap.Height)' ImageLockMode.ReadOnly' bitmap.PixelFormat); " is 128.
Long Statement,Cassette.Spriting.Spritastic.Generator,SpritedImage,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpritedImage.cs,Render,The length of the statement  "	var newClass = CssClass.ImageUrl != null && CssClass.OriginalClassString.IndexOf (CssClass.ImageUrl' StringComparison.OrdinalIgnoreCase) > -1 ? CssClass.OriginalClassString.ToLower ().Replace (CssClass.ImageUrl.ToLower ()' Url) : CssClass.OriginalClassString.ToLower ().Replace ("}"' string.Format (";background-image: url('{0}')}}"' Url)); " is 340.
Long Statement,Cassette.Spriting.Spritastic.Generator,SpritedImage,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpritedImage.cs,Render,The length of the statement  "	return newClass.Replace ("}"' string.Format (";background-position: -{0}px {1}{2};}}"' Position' yOffset' CssClass.Important ? " !important" : string.Empty)); " is 158.
Long Statement,Cassette.Spriting.Spritastic.Generator,SpriteManager,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteManager.cs,Add,The length of the statement  "	if (SpriteContainer.Size >= config.SpriteSizeLimit || (SpriteContainer.Colors >= config.SpriteColorLimit && !config.ImageQuantizationDisabled && !config.ImageOptimizationDisabled)) " is 180.
Long Statement,Cassette.Spriting.Spritastic.Generator,SpriteManager,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteManager.cs,Flush,The length of the statement  "				optBytes = (config.ImageOptimizationDisabled || !config.IsFullTrust) ? bytes : pngOptimizer.OptimizePng (bytes' config.ImageOptimizationCompressionLevel' config.ImageQuantizationDisabled); " is 188.
Long Statement,Cassette.Spriting.Spritastic.Generator,SpriteWriter,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteWriter.cs,GetBytes,The length of the statement  "			SpriteImage.Save (stream' ImageCodecInfo.GetImageEncoders ().First (x => x.MimeType == mimeType)' spriteEncoderParameters); " is 123.
Long Statement,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,SetOffsets,The length of the statement  "	var offset1Position = "'top'bottom'right'left'center".IndexOf (offset1' StringComparison.Ordinal) > 0 ? ParseStringOffset (offset1) : ParseNumericOffset (offset1); " is 163.
Long Statement,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,SetOffsets,The length of the statement  "	var offset2Position = "'top'bottom'right'left'center".IndexOf (offset2' StringComparison.Ordinal) > 0 ? ParseStringOffset (offset2) : ParseNumericOffset (offset2); " is 163.
Long Statement,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,ParseNumericOffset,The length of the statement  "	if (offsetString.Length > 2 && "|in|cm|mm|em|ex|pt|pc".IndexOf (offsetString.Substring (offsetString.Length - 2' 2)' StringComparison.Ordinal) > -1) " is 148.
Long Statement,Cassette.Spriting.Spritastic.Selector,CssSelectorAnalyzer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Selector\CssSelectorAnalyzer.cs,FindToken,The length of the statement  "		var idx = tokens [tokenIdx] == "*" ? 0 : targetSelector.IndexOf (tokens [tokenIdx]' targetOffset' StringComparison.OrdinalIgnoreCase); " is 134.
Long Statement,Cassette.Spriting.Spritastic.Selector,CssSelectorAnalyzer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Selector\CssSelectorAnalyzer.cs,FindToken,The length of the statement  "		}' idx - 1' 1) == idx - 1 || targetSelector [idx] == '.' || targetSelector [idx] == '#') && (targetSelector.Length <= endIdx || targetSelector.IndexOfAny (new[] { " is 162.
Long Statement,Cassette.Spriting.Spritastic.Selector,CssSelectorAnalyzer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Selector\CssSelectorAnalyzer.cs,FindToken,The length of the statement  "			var targetTokens = Regex.SelectorSplitPattern.Split (targetSelector.Substring (startTargetIdx' endTargetdx - startTargetIdx + 1)); " is 130.
Long Statement,Cassette.Spriting.Spritastic.Utilities,PngOptimizer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Utilities\PngOptimizer.cs,InvokeExecutable,The length of the statement  "			throw new OptimizationException (string.Format ("Unable to optimize image using executable {0} with arguments {1}"' executable' arguments)); " is 140.
Long Statement,Cassette.Spriting.Spritastic.Utilities,Tracer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Utilities\Tracer.cs,LogImplementation,The length of the statement  "	System.Diagnostics.Trace.TraceInformation (string.Format ("TIME--{0}::THREAD--{1}/{2}::MSG--{3}"' DateTime.Now.TimeOfDay' Thread.CurrentThread.ManagedThreadId' Process.GetCurrentProcess ().Id' msg)); " is 199.
Long Statement,Cassette.Spriting.Spritastic.Utilities,WebClientWrapper,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Utilities\WebClientWrapper.cs,DownloadBytes,The length of the statement  "		throw new SpriteException (string.Format ("Spritastic had problems accessing {0}. Error Message from WebClient is: {1}"' url' ex.Message)' ex); " is 143.
Complex Conditional,Cassette.Spriting.Spritastic.Generator,CssImageExtractor,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\CssImageExtractor.cs,CanSprite,The conditional expression  "imageClass.Width > 0 && imageClass.Repeat == RepeatStyle.NoRepeat && ((imageClass.YOffset.PositionMode == PositionMode.Direction) || (imageClass.YOffset.PositionMode == PositionMode.Percent) || ((imageClass.YOffset.PositionMode == PositionMode.Unit) && (imageClass.YOffset.Offset >= 0 || imageClass.Height > 0)))"  is complex.
Complex Conditional,Cassette.Spriting.Spritastic.Generator,SpriteManager,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteManager.cs,Add,The conditional expression  "SpriteContainer.Size >= config.SpriteSizeLimit || (SpriteContainer.Colors >= config.SpriteColorLimit && !config.ImageQuantizationDisabled && !config.ImageOptimizationDisabled)"  is complex.
Complex Conditional,Cassette.Spriting.Spritastic.Selector,CssSelectorAnalyzer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Selector\CssSelectorAnalyzer.cs,FindToken,The conditional expression  "(idx == 0 || targetSelector.IndexOfAny (new[] {  	' ''  	'\n''  	'\r''  	'\t''  	'>'  }' idx - 1' 1) == idx - 1 || targetSelector [idx] == '.' || targetSelector [idx] == '#') && (targetSelector.Length <= endIdx || targetSelector.IndexOfAny (new[] {  	' ''  	'\n''  	'\r''  	'\t''  	':''  	'.''  	'#''  	'>'  }' endIdx' 1) == endIdx)"  is complex.
Magic Number,Cassette.Spriting,DefaultSpritingSettingsConfiguration,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\DefaultSpritingSettingsConfiguration.cs,Configure,The following statement contains a magic number: settings.SpriteColorLimit = 5000;  
Magic Number,Cassette.Spriting,DefaultSpritingSettingsConfiguration,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\DefaultSpritingSettingsConfiguration.cs,Configure,The following statement contains a magic number: settings.SpriteSizeLimit = 50000;  
Magic Number,Cassette.Spriting,DefaultSpritingSettingsConfiguration,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\DefaultSpritingSettingsConfiguration.cs,Configure,The following statement contains a magic number: settings.ImageOptimizationCompressionLevel = 5;  
Magic Number,Cassette.Spriting.Spritastic.Generator,SpriteContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,AddImage,The following statement contains a magic number: using (var originalBitmap = new Bitmap (new MemoryStream (imageBytes))) {  	var width = image.Width ?? originalBitmap.Width;  	//cliped width of original image  	var height = image.Height ?? originalBitmap.Height;  	using (var writer = new SpriteWriter (width' height)) {  		var x = image.XOffset.Offset < 0 ? Math.Abs (image.XOffset.Offset) : 0;  		//offset on original  		var y = image.YOffset.Offset < 0 ? Math.Abs (image.YOffset.Offset) : 0;  		var imageWidth = width;  		//canvas width  		if (width + x > originalBitmap.Width)  			width = originalBitmap.Width - x;  		var imageHeight = height;  		if (height + y > originalBitmap.Height)  			height = originalBitmap.Height - y;  		var offsetX = 0;  		var offsetY = 0;  		if (image.XOffset.PositionMode == PositionMode.Direction) {  			switch (image.XOffset.Direction) {  			case Direction.Left:  				image.XOffset = new Position {  					PositionMode = PositionMode.Percent'  					Offset = 0  				};  				break;  			case Direction.Center:  				image.XOffset = new Position {  					PositionMode = PositionMode.Percent'  					Offset = 50  				};  				break;  			case Direction.Right:  				image.XOffset = new Position {  					PositionMode = PositionMode.Percent'  					Offset = 100  				};  				break;  			}  		}  		if (image.YOffset.PositionMode == PositionMode.Direction)  			switch (image.YOffset.Direction) {  			case Direction.Top:  				image.YOffset = new Position {  					PositionMode = PositionMode.Percent'  					Offset = 0  				};  				break;  			case Direction.Center:  				image.YOffset = new Position {  					PositionMode = PositionMode.Percent'  					Offset = 50  				};  				break;  			case Direction.Bottom:  				image.YOffset = new Position {  					PositionMode = PositionMode.Percent'  					Offset = 100  				};  				break;  			}  		if (image.XOffset.PositionMode == PositionMode.Percent) {  			if (originalBitmap.Width > imageWidth)  				x = (int)Math.Round ((originalBitmap.Width - imageWidth) * (image.XOffset.Offset / 100f)' 0);  			else  				offsetX = (int)Math.Round ((imageWidth - originalBitmap.Width) * (image.XOffset.Offset / 100f)' 0);  		} else if (image.XOffset.PositionMode == PositionMode.Unit && image.XOffset.Offset > 0) {  			offsetX = image.XOffset.Offset;  			if (originalBitmap.Width + offsetX > imageWidth)  				width = imageWidth - offsetX;  		}  		if (image.YOffset.PositionMode == PositionMode.Percent) {  			if (originalBitmap.Height > imageHeight)  				y = (int)Math.Round ((originalBitmap.Height - height) * (image.YOffset.Offset / 100f)' 0);  			else  				offsetY = (int)Math.Round ((imageHeight - originalBitmap.Height) * (image.YOffset.Offset / 100f)' 0);  		}  		try {  			using (var bm = originalBitmap.Clone (new Rectangle (x' y' width' height)' originalBitmap.PixelFormat)) {  				writer.WriteImage (bm' offsetX' offsetY);  			}  		} catch (OutOfMemoryException) {  			throw new InvalidOperationException (string.Format ("Unable to Add {0} to Sprite."' image.ImageUrl));  		}  		bitmap = writer.SpriteImage;  		if ((originalBitmap.Width * originalBitmap.Height) > (bitmap.Width * bitmap.Height))  			Size += writer.GetBytes ("image/png").Length;  		else  			Size += imageBytes.Length;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Generator,SpriteContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,AddImage,The following statement contains a magic number: using (var originalBitmap = new Bitmap (new MemoryStream (imageBytes))) {  	var width = image.Width ?? originalBitmap.Width;  	//cliped width of original image  	var height = image.Height ?? originalBitmap.Height;  	using (var writer = new SpriteWriter (width' height)) {  		var x = image.XOffset.Offset < 0 ? Math.Abs (image.XOffset.Offset) : 0;  		//offset on original  		var y = image.YOffset.Offset < 0 ? Math.Abs (image.YOffset.Offset) : 0;  		var imageWidth = width;  		//canvas width  		if (width + x > originalBitmap.Width)  			width = originalBitmap.Width - x;  		var imageHeight = height;  		if (height + y > originalBitmap.Height)  			height = originalBitmap.Height - y;  		var offsetX = 0;  		var offsetY = 0;  		if (image.XOffset.PositionMode == PositionMode.Direction) {  			switch (image.XOffset.Direction) {  			case Direction.Left:  				image.XOffset = new Position {  					PositionMode = PositionMode.Percent'  					Offset = 0  				};  				break;  			case Direction.Center:  				image.XOffset = new Position {  					PositionMode = PositionMode.Percent'  					Offset = 50  				};  				break;  			case Direction.Right:  				image.XOffset = new Position {  					PositionMode = PositionMode.Percent'  					Offset = 100  				};  				break;  			}  		}  		if (image.YOffset.PositionMode == PositionMode.Direction)  			switch (image.YOffset.Direction) {  			case Direction.Top:  				image.YOffset = new Position {  					PositionMode = PositionMode.Percent'  					Offset = 0  				};  				break;  			case Direction.Center:  				image.YOffset = new Position {  					PositionMode = PositionMode.Percent'  					Offset = 50  				};  				break;  			case Direction.Bottom:  				image.YOffset = new Position {  					PositionMode = PositionMode.Percent'  					Offset = 100  				};  				break;  			}  		if (image.XOffset.PositionMode == PositionMode.Percent) {  			if (originalBitmap.Width > imageWidth)  				x = (int)Math.Round ((originalBitmap.Width - imageWidth) * (image.XOffset.Offset / 100f)' 0);  			else  				offsetX = (int)Math.Round ((imageWidth - originalBitmap.Width) * (image.XOffset.Offset / 100f)' 0);  		} else if (image.XOffset.PositionMode == PositionMode.Unit && image.XOffset.Offset > 0) {  			offsetX = image.XOffset.Offset;  			if (originalBitmap.Width + offsetX > imageWidth)  				width = imageWidth - offsetX;  		}  		if (image.YOffset.PositionMode == PositionMode.Percent) {  			if (originalBitmap.Height > imageHeight)  				y = (int)Math.Round ((originalBitmap.Height - height) * (image.YOffset.Offset / 100f)' 0);  			else  				offsetY = (int)Math.Round ((imageHeight - originalBitmap.Height) * (image.YOffset.Offset / 100f)' 0);  		}  		try {  			using (var bm = originalBitmap.Clone (new Rectangle (x' y' width' height)' originalBitmap.PixelFormat)) {  				writer.WriteImage (bm' offsetX' offsetY);  			}  		} catch (OutOfMemoryException) {  			throw new InvalidOperationException (string.Format ("Unable to Add {0} to Sprite."' image.ImageUrl));  		}  		bitmap = writer.SpriteImage;  		if ((originalBitmap.Width * originalBitmap.Height) > (bitmap.Width * bitmap.Height))  			Size += writer.GetBytes ("image/png").Length;  		else  			Size += imageBytes.Length;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Generator,SpriteContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,AddImage,The following statement contains a magic number: using (var originalBitmap = new Bitmap (new MemoryStream (imageBytes))) {  	var width = image.Width ?? originalBitmap.Width;  	//cliped width of original image  	var height = image.Height ?? originalBitmap.Height;  	using (var writer = new SpriteWriter (width' height)) {  		var x = image.XOffset.Offset < 0 ? Math.Abs (image.XOffset.Offset) : 0;  		//offset on original  		var y = image.YOffset.Offset < 0 ? Math.Abs (image.YOffset.Offset) : 0;  		var imageWidth = width;  		//canvas width  		if (width + x > originalBitmap.Width)  			width = originalBitmap.Width - x;  		var imageHeight = height;  		if (height + y > originalBitmap.Height)  			height = originalBitmap.Height - y;  		var offsetX = 0;  		var offsetY = 0;  		if (image.XOffset.PositionMode == PositionMode.Direction) {  			switch (image.XOffset.Direction) {  			case Direction.Left:  				image.XOffset = new Position {  					PositionMode = PositionMode.Percent'  					Offset = 0  				};  				break;  			case Direction.Center:  				image.XOffset = new Position {  					PositionMode = PositionMode.Percent'  					Offset = 50  				};  				break;  			case Direction.Right:  				image.XOffset = new Position {  					PositionMode = PositionMode.Percent'  					Offset = 100  				};  				break;  			}  		}  		if (image.YOffset.PositionMode == PositionMode.Direction)  			switch (image.YOffset.Direction) {  			case Direction.Top:  				image.YOffset = new Position {  					PositionMode = PositionMode.Percent'  					Offset = 0  				};  				break;  			case Direction.Center:  				image.YOffset = new Position {  					PositionMode = PositionMode.Percent'  					Offset = 50  				};  				break;  			case Direction.Bottom:  				image.YOffset = new Position {  					PositionMode = PositionMode.Percent'  					Offset = 100  				};  				break;  			}  		if (image.XOffset.PositionMode == PositionMode.Percent) {  			if (originalBitmap.Width > imageWidth)  				x = (int)Math.Round ((originalBitmap.Width - imageWidth) * (image.XOffset.Offset / 100f)' 0);  			else  				offsetX = (int)Math.Round ((imageWidth - originalBitmap.Width) * (image.XOffset.Offset / 100f)' 0);  		} else if (image.XOffset.PositionMode == PositionMode.Unit && image.XOffset.Offset > 0) {  			offsetX = image.XOffset.Offset;  			if (originalBitmap.Width + offsetX > imageWidth)  				width = imageWidth - offsetX;  		}  		if (image.YOffset.PositionMode == PositionMode.Percent) {  			if (originalBitmap.Height > imageHeight)  				y = (int)Math.Round ((originalBitmap.Height - height) * (image.YOffset.Offset / 100f)' 0);  			else  				offsetY = (int)Math.Round ((imageHeight - originalBitmap.Height) * (image.YOffset.Offset / 100f)' 0);  		}  		try {  			using (var bm = originalBitmap.Clone (new Rectangle (x' y' width' height)' originalBitmap.PixelFormat)) {  				writer.WriteImage (bm' offsetX' offsetY);  			}  		} catch (OutOfMemoryException) {  			throw new InvalidOperationException (string.Format ("Unable to Add {0} to Sprite."' image.ImageUrl));  		}  		bitmap = writer.SpriteImage;  		if ((originalBitmap.Width * originalBitmap.Height) > (bitmap.Width * bitmap.Height))  			Size += writer.GetBytes ("image/png").Length;  		else  			Size += imageBytes.Length;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Generator,SpriteContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,AddImage,The following statement contains a magic number: using (var originalBitmap = new Bitmap (new MemoryStream (imageBytes))) {  	var width = image.Width ?? originalBitmap.Width;  	//cliped width of original image  	var height = image.Height ?? originalBitmap.Height;  	using (var writer = new SpriteWriter (width' height)) {  		var x = image.XOffset.Offset < 0 ? Math.Abs (image.XOffset.Offset) : 0;  		//offset on original  		var y = image.YOffset.Offset < 0 ? Math.Abs (image.YOffset.Offset) : 0;  		var imageWidth = width;  		//canvas width  		if (width + x > originalBitmap.Width)  			width = originalBitmap.Width - x;  		var imageHeight = height;  		if (height + y > originalBitmap.Height)  			height = originalBitmap.Height - y;  		var offsetX = 0;  		var offsetY = 0;  		if (image.XOffset.PositionMode == PositionMode.Direction) {  			switch (image.XOffset.Direction) {  			case Direction.Left:  				image.XOffset = new Position {  					PositionMode = PositionMode.Percent'  					Offset = 0  				};  				break;  			case Direction.Center:  				image.XOffset = new Position {  					PositionMode = PositionMode.Percent'  					Offset = 50  				};  				break;  			case Direction.Right:  				image.XOffset = new Position {  					PositionMode = PositionMode.Percent'  					Offset = 100  				};  				break;  			}  		}  		if (image.YOffset.PositionMode == PositionMode.Direction)  			switch (image.YOffset.Direction) {  			case Direction.Top:  				image.YOffset = new Position {  					PositionMode = PositionMode.Percent'  					Offset = 0  				};  				break;  			case Direction.Center:  				image.YOffset = new Position {  					PositionMode = PositionMode.Percent'  					Offset = 50  				};  				break;  			case Direction.Bottom:  				image.YOffset = new Position {  					PositionMode = PositionMode.Percent'  					Offset = 100  				};  				break;  			}  		if (image.XOffset.PositionMode == PositionMode.Percent) {  			if (originalBitmap.Width > imageWidth)  				x = (int)Math.Round ((originalBitmap.Width - imageWidth) * (image.XOffset.Offset / 100f)' 0);  			else  				offsetX = (int)Math.Round ((imageWidth - originalBitmap.Width) * (image.XOffset.Offset / 100f)' 0);  		} else if (image.XOffset.PositionMode == PositionMode.Unit && image.XOffset.Offset > 0) {  			offsetX = image.XOffset.Offset;  			if (originalBitmap.Width + offsetX > imageWidth)  				width = imageWidth - offsetX;  		}  		if (image.YOffset.PositionMode == PositionMode.Percent) {  			if (originalBitmap.Height > imageHeight)  				y = (int)Math.Round ((originalBitmap.Height - height) * (image.YOffset.Offset / 100f)' 0);  			else  				offsetY = (int)Math.Round ((imageHeight - originalBitmap.Height) * (image.YOffset.Offset / 100f)' 0);  		}  		try {  			using (var bm = originalBitmap.Clone (new Rectangle (x' y' width' height)' originalBitmap.PixelFormat)) {  				writer.WriteImage (bm' offsetX' offsetY);  			}  		} catch (OutOfMemoryException) {  			throw new InvalidOperationException (string.Format ("Unable to Add {0} to Sprite."' image.ImageUrl));  		}  		bitmap = writer.SpriteImage;  		if ((originalBitmap.Width * originalBitmap.Height) > (bitmap.Width * bitmap.Height))  			Size += writer.GetBytes ("image/png").Length;  		else  			Size += imageBytes.Length;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Generator,SpriteContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,AddImage,The following statement contains a magic number: using (var writer = new SpriteWriter (width' height)) {  	var x = image.XOffset.Offset < 0 ? Math.Abs (image.XOffset.Offset) : 0;  	//offset on original  	var y = image.YOffset.Offset < 0 ? Math.Abs (image.YOffset.Offset) : 0;  	var imageWidth = width;  	//canvas width  	if (width + x > originalBitmap.Width)  		width = originalBitmap.Width - x;  	var imageHeight = height;  	if (height + y > originalBitmap.Height)  		height = originalBitmap.Height - y;  	var offsetX = 0;  	var offsetY = 0;  	if (image.XOffset.PositionMode == PositionMode.Direction) {  		switch (image.XOffset.Direction) {  		case Direction.Left:  			image.XOffset = new Position {  				PositionMode = PositionMode.Percent'  				Offset = 0  			};  			break;  		case Direction.Center:  			image.XOffset = new Position {  				PositionMode = PositionMode.Percent'  				Offset = 50  			};  			break;  		case Direction.Right:  			image.XOffset = new Position {  				PositionMode = PositionMode.Percent'  				Offset = 100  			};  			break;  		}  	}  	if (image.YOffset.PositionMode == PositionMode.Direction)  		switch (image.YOffset.Direction) {  		case Direction.Top:  			image.YOffset = new Position {  				PositionMode = PositionMode.Percent'  				Offset = 0  			};  			break;  		case Direction.Center:  			image.YOffset = new Position {  				PositionMode = PositionMode.Percent'  				Offset = 50  			};  			break;  		case Direction.Bottom:  			image.YOffset = new Position {  				PositionMode = PositionMode.Percent'  				Offset = 100  			};  			break;  		}  	if (image.XOffset.PositionMode == PositionMode.Percent) {  		if (originalBitmap.Width > imageWidth)  			x = (int)Math.Round ((originalBitmap.Width - imageWidth) * (image.XOffset.Offset / 100f)' 0);  		else  			offsetX = (int)Math.Round ((imageWidth - originalBitmap.Width) * (image.XOffset.Offset / 100f)' 0);  	} else if (image.XOffset.PositionMode == PositionMode.Unit && image.XOffset.Offset > 0) {  		offsetX = image.XOffset.Offset;  		if (originalBitmap.Width + offsetX > imageWidth)  			width = imageWidth - offsetX;  	}  	if (image.YOffset.PositionMode == PositionMode.Percent) {  		if (originalBitmap.Height > imageHeight)  			y = (int)Math.Round ((originalBitmap.Height - height) * (image.YOffset.Offset / 100f)' 0);  		else  			offsetY = (int)Math.Round ((imageHeight - originalBitmap.Height) * (image.YOffset.Offset / 100f)' 0);  	}  	try {  		using (var bm = originalBitmap.Clone (new Rectangle (x' y' width' height)' originalBitmap.PixelFormat)) {  			writer.WriteImage (bm' offsetX' offsetY);  		}  	} catch (OutOfMemoryException) {  		throw new InvalidOperationException (string.Format ("Unable to Add {0} to Sprite."' image.ImageUrl));  	}  	bitmap = writer.SpriteImage;  	if ((originalBitmap.Width * originalBitmap.Height) > (bitmap.Width * bitmap.Height))  		Size += writer.GetBytes ("image/png").Length;  	else  		Size += imageBytes.Length;  }  
Magic Number,Cassette.Spriting.Spritastic.Generator,SpriteContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,AddImage,The following statement contains a magic number: using (var writer = new SpriteWriter (width' height)) {  	var x = image.XOffset.Offset < 0 ? Math.Abs (image.XOffset.Offset) : 0;  	//offset on original  	var y = image.YOffset.Offset < 0 ? Math.Abs (image.YOffset.Offset) : 0;  	var imageWidth = width;  	//canvas width  	if (width + x > originalBitmap.Width)  		width = originalBitmap.Width - x;  	var imageHeight = height;  	if (height + y > originalBitmap.Height)  		height = originalBitmap.Height - y;  	var offsetX = 0;  	var offsetY = 0;  	if (image.XOffset.PositionMode == PositionMode.Direction) {  		switch (image.XOffset.Direction) {  		case Direction.Left:  			image.XOffset = new Position {  				PositionMode = PositionMode.Percent'  				Offset = 0  			};  			break;  		case Direction.Center:  			image.XOffset = new Position {  				PositionMode = PositionMode.Percent'  				Offset = 50  			};  			break;  		case Direction.Right:  			image.XOffset = new Position {  				PositionMode = PositionMode.Percent'  				Offset = 100  			};  			break;  		}  	}  	if (image.YOffset.PositionMode == PositionMode.Direction)  		switch (image.YOffset.Direction) {  		case Direction.Top:  			image.YOffset = new Position {  				PositionMode = PositionMode.Percent'  				Offset = 0  			};  			break;  		case Direction.Center:  			image.YOffset = new Position {  				PositionMode = PositionMode.Percent'  				Offset = 50  			};  			break;  		case Direction.Bottom:  			image.YOffset = new Position {  				PositionMode = PositionMode.Percent'  				Offset = 100  			};  			break;  		}  	if (image.XOffset.PositionMode == PositionMode.Percent) {  		if (originalBitmap.Width > imageWidth)  			x = (int)Math.Round ((originalBitmap.Width - imageWidth) * (image.XOffset.Offset / 100f)' 0);  		else  			offsetX = (int)Math.Round ((imageWidth - originalBitmap.Width) * (image.XOffset.Offset / 100f)' 0);  	} else if (image.XOffset.PositionMode == PositionMode.Unit && image.XOffset.Offset > 0) {  		offsetX = image.XOffset.Offset;  		if (originalBitmap.Width + offsetX > imageWidth)  			width = imageWidth - offsetX;  	}  	if (image.YOffset.PositionMode == PositionMode.Percent) {  		if (originalBitmap.Height > imageHeight)  			y = (int)Math.Round ((originalBitmap.Height - height) * (image.YOffset.Offset / 100f)' 0);  		else  			offsetY = (int)Math.Round ((imageHeight - originalBitmap.Height) * (image.YOffset.Offset / 100f)' 0);  	}  	try {  		using (var bm = originalBitmap.Clone (new Rectangle (x' y' width' height)' originalBitmap.PixelFormat)) {  			writer.WriteImage (bm' offsetX' offsetY);  		}  	} catch (OutOfMemoryException) {  		throw new InvalidOperationException (string.Format ("Unable to Add {0} to Sprite."' image.ImageUrl));  	}  	bitmap = writer.SpriteImage;  	if ((originalBitmap.Width * originalBitmap.Height) > (bitmap.Width * bitmap.Height))  		Size += writer.GetBytes ("image/png").Length;  	else  		Size += imageBytes.Length;  }  
Magic Number,Cassette.Spriting.Spritastic.Generator,SpriteContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,AddImage,The following statement contains a magic number: using (var writer = new SpriteWriter (width' height)) {  	var x = image.XOffset.Offset < 0 ? Math.Abs (image.XOffset.Offset) : 0;  	//offset on original  	var y = image.YOffset.Offset < 0 ? Math.Abs (image.YOffset.Offset) : 0;  	var imageWidth = width;  	//canvas width  	if (width + x > originalBitmap.Width)  		width = originalBitmap.Width - x;  	var imageHeight = height;  	if (height + y > originalBitmap.Height)  		height = originalBitmap.Height - y;  	var offsetX = 0;  	var offsetY = 0;  	if (image.XOffset.PositionMode == PositionMode.Direction) {  		switch (image.XOffset.Direction) {  		case Direction.Left:  			image.XOffset = new Position {  				PositionMode = PositionMode.Percent'  				Offset = 0  			};  			break;  		case Direction.Center:  			image.XOffset = new Position {  				PositionMode = PositionMode.Percent'  				Offset = 50  			};  			break;  		case Direction.Right:  			image.XOffset = new Position {  				PositionMode = PositionMode.Percent'  				Offset = 100  			};  			break;  		}  	}  	if (image.YOffset.PositionMode == PositionMode.Direction)  		switch (image.YOffset.Direction) {  		case Direction.Top:  			image.YOffset = new Position {  				PositionMode = PositionMode.Percent'  				Offset = 0  			};  			break;  		case Direction.Center:  			image.YOffset = new Position {  				PositionMode = PositionMode.Percent'  				Offset = 50  			};  			break;  		case Direction.Bottom:  			image.YOffset = new Position {  				PositionMode = PositionMode.Percent'  				Offset = 100  			};  			break;  		}  	if (image.XOffset.PositionMode == PositionMode.Percent) {  		if (originalBitmap.Width > imageWidth)  			x = (int)Math.Round ((originalBitmap.Width - imageWidth) * (image.XOffset.Offset / 100f)' 0);  		else  			offsetX = (int)Math.Round ((imageWidth - originalBitmap.Width) * (image.XOffset.Offset / 100f)' 0);  	} else if (image.XOffset.PositionMode == PositionMode.Unit && image.XOffset.Offset > 0) {  		offsetX = image.XOffset.Offset;  		if (originalBitmap.Width + offsetX > imageWidth)  			width = imageWidth - offsetX;  	}  	if (image.YOffset.PositionMode == PositionMode.Percent) {  		if (originalBitmap.Height > imageHeight)  			y = (int)Math.Round ((originalBitmap.Height - height) * (image.YOffset.Offset / 100f)' 0);  		else  			offsetY = (int)Math.Round ((imageHeight - originalBitmap.Height) * (image.YOffset.Offset / 100f)' 0);  	}  	try {  		using (var bm = originalBitmap.Clone (new Rectangle (x' y' width' height)' originalBitmap.PixelFormat)) {  			writer.WriteImage (bm' offsetX' offsetY);  		}  	} catch (OutOfMemoryException) {  		throw new InvalidOperationException (string.Format ("Unable to Add {0} to Sprite."' image.ImageUrl));  	}  	bitmap = writer.SpriteImage;  	if ((originalBitmap.Width * originalBitmap.Height) > (bitmap.Width * bitmap.Height))  		Size += writer.GetBytes ("image/png").Length;  	else  		Size += imageBytes.Length;  }  
Magic Number,Cassette.Spriting.Spritastic.Generator,SpriteContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,AddImage,The following statement contains a magic number: using (var writer = new SpriteWriter (width' height)) {  	var x = image.XOffset.Offset < 0 ? Math.Abs (image.XOffset.Offset) : 0;  	//offset on original  	var y = image.YOffset.Offset < 0 ? Math.Abs (image.YOffset.Offset) : 0;  	var imageWidth = width;  	//canvas width  	if (width + x > originalBitmap.Width)  		width = originalBitmap.Width - x;  	var imageHeight = height;  	if (height + y > originalBitmap.Height)  		height = originalBitmap.Height - y;  	var offsetX = 0;  	var offsetY = 0;  	if (image.XOffset.PositionMode == PositionMode.Direction) {  		switch (image.XOffset.Direction) {  		case Direction.Left:  			image.XOffset = new Position {  				PositionMode = PositionMode.Percent'  				Offset = 0  			};  			break;  		case Direction.Center:  			image.XOffset = new Position {  				PositionMode = PositionMode.Percent'  				Offset = 50  			};  			break;  		case Direction.Right:  			image.XOffset = new Position {  				PositionMode = PositionMode.Percent'  				Offset = 100  			};  			break;  		}  	}  	if (image.YOffset.PositionMode == PositionMode.Direction)  		switch (image.YOffset.Direction) {  		case Direction.Top:  			image.YOffset = new Position {  				PositionMode = PositionMode.Percent'  				Offset = 0  			};  			break;  		case Direction.Center:  			image.YOffset = new Position {  				PositionMode = PositionMode.Percent'  				Offset = 50  			};  			break;  		case Direction.Bottom:  			image.YOffset = new Position {  				PositionMode = PositionMode.Percent'  				Offset = 100  			};  			break;  		}  	if (image.XOffset.PositionMode == PositionMode.Percent) {  		if (originalBitmap.Width > imageWidth)  			x = (int)Math.Round ((originalBitmap.Width - imageWidth) * (image.XOffset.Offset / 100f)' 0);  		else  			offsetX = (int)Math.Round ((imageWidth - originalBitmap.Width) * (image.XOffset.Offset / 100f)' 0);  	} else if (image.XOffset.PositionMode == PositionMode.Unit && image.XOffset.Offset > 0) {  		offsetX = image.XOffset.Offset;  		if (originalBitmap.Width + offsetX > imageWidth)  			width = imageWidth - offsetX;  	}  	if (image.YOffset.PositionMode == PositionMode.Percent) {  		if (originalBitmap.Height > imageHeight)  			y = (int)Math.Round ((originalBitmap.Height - height) * (image.YOffset.Offset / 100f)' 0);  		else  			offsetY = (int)Math.Round ((imageHeight - originalBitmap.Height) * (image.YOffset.Offset / 100f)' 0);  	}  	try {  		using (var bm = originalBitmap.Clone (new Rectangle (x' y' width' height)' originalBitmap.PixelFormat)) {  			writer.WriteImage (bm' offsetX' offsetY);  		}  	} catch (OutOfMemoryException) {  		throw new InvalidOperationException (string.Format ("Unable to Add {0} to Sprite."' image.ImageUrl));  	}  	bitmap = writer.SpriteImage;  	if ((originalBitmap.Width * originalBitmap.Height) > (bitmap.Width * bitmap.Height))  		Size += writer.GetBytes ("image/png").Length;  	else  		Size += imageBytes.Length;  }  
Magic Number,Cassette.Spriting.Spritastic.Generator,SpriteContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,AddImage,The following statement contains a magic number: if (image.XOffset.PositionMode == PositionMode.Direction) {  	switch (image.XOffset.Direction) {  	case Direction.Left:  		image.XOffset = new Position {  			PositionMode = PositionMode.Percent'  			Offset = 0  		};  		break;  	case Direction.Center:  		image.XOffset = new Position {  			PositionMode = PositionMode.Percent'  			Offset = 50  		};  		break;  	case Direction.Right:  		image.XOffset = new Position {  			PositionMode = PositionMode.Percent'  			Offset = 100  		};  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Generator,SpriteContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,AddImage,The following statement contains a magic number: if (image.XOffset.PositionMode == PositionMode.Direction) {  	switch (image.XOffset.Direction) {  	case Direction.Left:  		image.XOffset = new Position {  			PositionMode = PositionMode.Percent'  			Offset = 0  		};  		break;  	case Direction.Center:  		image.XOffset = new Position {  			PositionMode = PositionMode.Percent'  			Offset = 50  		};  		break;  	case Direction.Right:  		image.XOffset = new Position {  			PositionMode = PositionMode.Percent'  			Offset = 100  		};  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Generator,SpriteContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,AddImage,The following statement contains a magic number: switch (image.XOffset.Direction) {  case Direction.Left:  	image.XOffset = new Position {  		PositionMode = PositionMode.Percent'  		Offset = 0  	};  	break;  case Direction.Center:  	image.XOffset = new Position {  		PositionMode = PositionMode.Percent'  		Offset = 50  	};  	break;  case Direction.Right:  	image.XOffset = new Position {  		PositionMode = PositionMode.Percent'  		Offset = 100  	};  	break;  }  
Magic Number,Cassette.Spriting.Spritastic.Generator,SpriteContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,AddImage,The following statement contains a magic number: switch (image.XOffset.Direction) {  case Direction.Left:  	image.XOffset = new Position {  		PositionMode = PositionMode.Percent'  		Offset = 0  	};  	break;  case Direction.Center:  	image.XOffset = new Position {  		PositionMode = PositionMode.Percent'  		Offset = 50  	};  	break;  case Direction.Right:  	image.XOffset = new Position {  		PositionMode = PositionMode.Percent'  		Offset = 100  	};  	break;  }  
Magic Number,Cassette.Spriting.Spritastic.Generator,SpriteContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,AddImage,The following statement contains a magic number: image.XOffset = new Position {  	PositionMode = PositionMode.Percent'  	Offset = 50  };  
Magic Number,Cassette.Spriting.Spritastic.Generator,SpriteContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,AddImage,The following statement contains a magic number: image.XOffset = new Position {  	PositionMode = PositionMode.Percent'  	Offset = 100  };  
Magic Number,Cassette.Spriting.Spritastic.Generator,SpriteContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,AddImage,The following statement contains a magic number: if (image.YOffset.PositionMode == PositionMode.Direction)  	switch (image.YOffset.Direction) {  	case Direction.Top:  		image.YOffset = new Position {  			PositionMode = PositionMode.Percent'  			Offset = 0  		};  		break;  	case Direction.Center:  		image.YOffset = new Position {  			PositionMode = PositionMode.Percent'  			Offset = 50  		};  		break;  	case Direction.Bottom:  		image.YOffset = new Position {  			PositionMode = PositionMode.Percent'  			Offset = 100  		};  		break;  	}  
Magic Number,Cassette.Spriting.Spritastic.Generator,SpriteContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,AddImage,The following statement contains a magic number: if (image.YOffset.PositionMode == PositionMode.Direction)  	switch (image.YOffset.Direction) {  	case Direction.Top:  		image.YOffset = new Position {  			PositionMode = PositionMode.Percent'  			Offset = 0  		};  		break;  	case Direction.Center:  		image.YOffset = new Position {  			PositionMode = PositionMode.Percent'  			Offset = 50  		};  		break;  	case Direction.Bottom:  		image.YOffset = new Position {  			PositionMode = PositionMode.Percent'  			Offset = 100  		};  		break;  	}  
Magic Number,Cassette.Spriting.Spritastic.Generator,SpriteContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,AddImage,The following statement contains a magic number: switch (image.YOffset.Direction) {  case Direction.Top:  	image.YOffset = new Position {  		PositionMode = PositionMode.Percent'  		Offset = 0  	};  	break;  case Direction.Center:  	image.YOffset = new Position {  		PositionMode = PositionMode.Percent'  		Offset = 50  	};  	break;  case Direction.Bottom:  	image.YOffset = new Position {  		PositionMode = PositionMode.Percent'  		Offset = 100  	};  	break;  }  
Magic Number,Cassette.Spriting.Spritastic.Generator,SpriteContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,AddImage,The following statement contains a magic number: switch (image.YOffset.Direction) {  case Direction.Top:  	image.YOffset = new Position {  		PositionMode = PositionMode.Percent'  		Offset = 0  	};  	break;  case Direction.Center:  	image.YOffset = new Position {  		PositionMode = PositionMode.Percent'  		Offset = 50  	};  	break;  case Direction.Bottom:  	image.YOffset = new Position {  		PositionMode = PositionMode.Percent'  		Offset = 100  	};  	break;  }  
Magic Number,Cassette.Spriting.Spritastic.Generator,SpriteContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,AddImage,The following statement contains a magic number: image.YOffset = new Position {  	PositionMode = PositionMode.Percent'  	Offset = 50  };  
Magic Number,Cassette.Spriting.Spritastic.Generator,SpriteContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,AddImage,The following statement contains a magic number: image.YOffset = new Position {  	PositionMode = PositionMode.Percent'  	Offset = 100  };  
Magic Number,Cassette.Spriting.Spritastic.Generator,SpriteContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,GetColors,The following statement contains a magic number: try {  	var byteLength = data.Stride < 0 ? -data.Stride : data.Stride;  	var buffer = new Byte[byteLength * bitmap.Height];  	var offset = 0;  	Marshal.Copy (data.Scan0' buffer' 0' buffer.Length);  	for (var y = 0; y < bitmap.Height; y++) {  		for (var x = 0; x < bitmap.Width; x++) {  			var argb = BitConverter.ToInt32 (buffer' offset);  			uniqueColors.Add (argb);  			totalArgb += argb;  			++total;  			offset += 4;  		}  	}  	return (int)(totalArgb / total);  } finally {  	bitmap.UnlockBits (data);  }  
Magic Number,Cassette.Spriting.Spritastic.Generator,SpriteContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,GetColors,The following statement contains a magic number: for (var y = 0; y < bitmap.Height; y++) {  	for (var x = 0; x < bitmap.Width; x++) {  		var argb = BitConverter.ToInt32 (buffer' offset);  		uniqueColors.Add (argb);  		totalArgb += argb;  		++total;  		offset += 4;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Generator,SpriteContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,GetColors,The following statement contains a magic number: for (var x = 0; x < bitmap.Width; x++) {  	var argb = BitConverter.ToInt32 (buffer' offset);  	uniqueColors.Add (argb);  	totalArgb += argb;  	++total;  	offset += 4;  }  
Magic Number,Cassette.Spriting.Spritastic.Generator,SpriteContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,GetColors,The following statement contains a magic number: offset += 4;  
Magic Number,Cassette.Spriting.Spritastic.Generator,SpriteWriter,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteWriter.cs,GetBytes,The following statement contains a magic number: using (var spriteEncoderParameters = new EncoderParameters (1)) {  	spriteEncoderParameters.Param [0] = new EncoderParameter (Encoder.Quality' 90);  	using (var stream = new MemoryStream ()) {  		SpriteImage.Save (stream' ImageCodecInfo.GetImageEncoders ().First (x => x.MimeType == mimeType)' spriteEncoderParameters);  		return stream.GetBuffer ();  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Generator,SpriteWriter,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteWriter.cs,GetBytes,The following statement contains a magic number: spriteEncoderParameters.Param [0] = new EncoderParameter (Encoder.Quality' 90);  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,BackgroundImageClass,The following statement contains a magic number: if (paddingMatches.Count > 0) {  	foreach (var pads in from Match paddingMatch in paddingMatches  	select GetPadding (paddingMatch)) {  		if (pads [0] != null) {  			PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingTop;  			PaddingTop = pads [0];  		}  		if (pads [1] != null) {  			PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingRight;  			PaddingRight = pads [1];  		}  		if (pads [2] != null) {  			PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingBottom;  			PaddingBottom = pads [2];  		}  		if (pads [3] != null) {  			PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingLeft;  			PaddingLeft = pads [3];  		}  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,BackgroundImageClass,The following statement contains a magic number: if (paddingMatches.Count > 0) {  	foreach (var pads in from Match paddingMatch in paddingMatches  	select GetPadding (paddingMatch)) {  		if (pads [0] != null) {  			PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingTop;  			PaddingTop = pads [0];  		}  		if (pads [1] != null) {  			PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingRight;  			PaddingRight = pads [1];  		}  		if (pads [2] != null) {  			PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingBottom;  			PaddingBottom = pads [2];  		}  		if (pads [3] != null) {  			PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingLeft;  			PaddingLeft = pads [3];  		}  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,BackgroundImageClass,The following statement contains a magic number: if (paddingMatches.Count > 0) {  	foreach (var pads in from Match paddingMatch in paddingMatches  	select GetPadding (paddingMatch)) {  		if (pads [0] != null) {  			PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingTop;  			PaddingTop = pads [0];  		}  		if (pads [1] != null) {  			PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingRight;  			PaddingRight = pads [1];  		}  		if (pads [2] != null) {  			PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingBottom;  			PaddingBottom = pads [2];  		}  		if (pads [3] != null) {  			PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingLeft;  			PaddingLeft = pads [3];  		}  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,BackgroundImageClass,The following statement contains a magic number: if (paddingMatches.Count > 0) {  	foreach (var pads in from Match paddingMatch in paddingMatches  	select GetPadding (paddingMatch)) {  		if (pads [0] != null) {  			PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingTop;  			PaddingTop = pads [0];  		}  		if (pads [1] != null) {  			PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingRight;  			PaddingRight = pads [1];  		}  		if (pads [2] != null) {  			PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingBottom;  			PaddingBottom = pads [2];  		}  		if (pads [3] != null) {  			PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingLeft;  			PaddingLeft = pads [3];  		}  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,BackgroundImageClass,The following statement contains a magic number: foreach (var pads in from Match paddingMatch in paddingMatches  select GetPadding (paddingMatch)) {  	if (pads [0] != null) {  		PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingTop;  		PaddingTop = pads [0];  	}  	if (pads [1] != null) {  		PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingRight;  		PaddingRight = pads [1];  	}  	if (pads [2] != null) {  		PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingBottom;  		PaddingBottom = pads [2];  	}  	if (pads [3] != null) {  		PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingLeft;  		PaddingLeft = pads [3];  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,BackgroundImageClass,The following statement contains a magic number: foreach (var pads in from Match paddingMatch in paddingMatches  select GetPadding (paddingMatch)) {  	if (pads [0] != null) {  		PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingTop;  		PaddingTop = pads [0];  	}  	if (pads [1] != null) {  		PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingRight;  		PaddingRight = pads [1];  	}  	if (pads [2] != null) {  		PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingBottom;  		PaddingBottom = pads [2];  	}  	if (pads [3] != null) {  		PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingLeft;  		PaddingLeft = pads [3];  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,BackgroundImageClass,The following statement contains a magic number: foreach (var pads in from Match paddingMatch in paddingMatches  select GetPadding (paddingMatch)) {  	if (pads [0] != null) {  		PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingTop;  		PaddingTop = pads [0];  	}  	if (pads [1] != null) {  		PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingRight;  		PaddingRight = pads [1];  	}  	if (pads [2] != null) {  		PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingBottom;  		PaddingBottom = pads [2];  	}  	if (pads [3] != null) {  		PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingLeft;  		PaddingLeft = pads [3];  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,BackgroundImageClass,The following statement contains a magic number: foreach (var pads in from Match paddingMatch in paddingMatches  select GetPadding (paddingMatch)) {  	if (pads [0] != null) {  		PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingTop;  		PaddingTop = pads [0];  	}  	if (pads [1] != null) {  		PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingRight;  		PaddingRight = pads [1];  	}  	if (pads [2] != null) {  		PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingBottom;  		PaddingBottom = pads [2];  	}  	if (pads [3] != null) {  		PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingLeft;  		PaddingLeft = pads [3];  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,BackgroundImageClass,The following statement contains a magic number: if (pads [2] != null) {  	PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingBottom;  	PaddingBottom = pads [2];  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,BackgroundImageClass,The following statement contains a magic number: if (pads [2] != null) {  	PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingBottom;  	PaddingBottom = pads [2];  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,BackgroundImageClass,The following statement contains a magic number: PaddingBottom = pads [2];  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,BackgroundImageClass,The following statement contains a magic number: if (pads [3] != null) {  	PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingLeft;  	PaddingLeft = pads [3];  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,BackgroundImageClass,The following statement contains a magic number: if (pads [3] != null) {  	PropertyCompletion = PropertyCompletion | PropertyCompletion.HasPaddingLeft;  	PaddingLeft = pads [3];  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,BackgroundImageClass,The following statement contains a magic number: PaddingLeft = pads [3];  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-left")  	padVals [3] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-right")  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-left")  	padVals [3] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-right")  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-left")  	padVals [3] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-right")  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-left")  	padVals [3] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-right")  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-left")  	padVals [3] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-right")  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-left")  	padVals [3] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-right")  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-left")  	padVals [3] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-right")  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-left")  	padVals [3] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-right")  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-left")  	padVals [3] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-right")  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-left")  	padVals [3] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-right")  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-left")  	padVals [3] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-right")  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-left")  	padVals [3] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-right")  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-left")  	padVals [3] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-right")  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: padVals [3] = calcPadPixels (pad1' ExplicitWidth);  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-right")  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-right")  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-right")  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-right")  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-right")  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-right")  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-right")  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-right")  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-right")  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-right")  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-right")  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-right")  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  else if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-top")  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  else if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: if (side == "-bottom")  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  else {  	var groupCount = paddingMatch.Groups.Cast<Group> ().Count (x => x.Length > 0);  	switch (groupCount - 1) {  	case 1:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad1' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad1' ExplicitWidth);  		break;  	case 2:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad1' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 3:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad2' ExplicitWidth);  		break;  	case 4:  		padVals [0] = calcPadPixels (pad1' ExplicitHeight);  		padVals [1] = calcPadPixels (pad2' ExplicitWidth);  		padVals [2] = calcPadPixels (pad3' ExplicitHeight);  		padVals [3] = calcPadPixels (pad4' ExplicitWidth);  		break;  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: padVals [2] = calcPadPixels (pad1' ExplicitHeight);  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: switch (groupCount - 1) {  case 1:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  	padVals [3] = calcPadPixels (pad1' ExplicitWidth);  	break;  case 2:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  	padVals [3] = calcPadPixels (pad2' ExplicitWidth);  	break;  case 3:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad3' ExplicitHeight);  	padVals [3] = calcPadPixels (pad2' ExplicitWidth);  	break;  case 4:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad3' ExplicitHeight);  	padVals [3] = calcPadPixels (pad4' ExplicitWidth);  	break;  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: switch (groupCount - 1) {  case 1:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  	padVals [3] = calcPadPixels (pad1' ExplicitWidth);  	break;  case 2:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  	padVals [3] = calcPadPixels (pad2' ExplicitWidth);  	break;  case 3:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad3' ExplicitHeight);  	padVals [3] = calcPadPixels (pad2' ExplicitWidth);  	break;  case 4:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad3' ExplicitHeight);  	padVals [3] = calcPadPixels (pad4' ExplicitWidth);  	break;  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: switch (groupCount - 1) {  case 1:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  	padVals [3] = calcPadPixels (pad1' ExplicitWidth);  	break;  case 2:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  	padVals [3] = calcPadPixels (pad2' ExplicitWidth);  	break;  case 3:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad3' ExplicitHeight);  	padVals [3] = calcPadPixels (pad2' ExplicitWidth);  	break;  case 4:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad3' ExplicitHeight);  	padVals [3] = calcPadPixels (pad4' ExplicitWidth);  	break;  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: switch (groupCount - 1) {  case 1:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  	padVals [3] = calcPadPixels (pad1' ExplicitWidth);  	break;  case 2:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  	padVals [3] = calcPadPixels (pad2' ExplicitWidth);  	break;  case 3:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad3' ExplicitHeight);  	padVals [3] = calcPadPixels (pad2' ExplicitWidth);  	break;  case 4:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad3' ExplicitHeight);  	padVals [3] = calcPadPixels (pad4' ExplicitWidth);  	break;  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: switch (groupCount - 1) {  case 1:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  	padVals [3] = calcPadPixels (pad1' ExplicitWidth);  	break;  case 2:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  	padVals [3] = calcPadPixels (pad2' ExplicitWidth);  	break;  case 3:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad3' ExplicitHeight);  	padVals [3] = calcPadPixels (pad2' ExplicitWidth);  	break;  case 4:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad3' ExplicitHeight);  	padVals [3] = calcPadPixels (pad4' ExplicitWidth);  	break;  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: switch (groupCount - 1) {  case 1:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  	padVals [3] = calcPadPixels (pad1' ExplicitWidth);  	break;  case 2:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  	padVals [3] = calcPadPixels (pad2' ExplicitWidth);  	break;  case 3:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad3' ExplicitHeight);  	padVals [3] = calcPadPixels (pad2' ExplicitWidth);  	break;  case 4:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad3' ExplicitHeight);  	padVals [3] = calcPadPixels (pad4' ExplicitWidth);  	break;  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: switch (groupCount - 1) {  case 1:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  	padVals [3] = calcPadPixels (pad1' ExplicitWidth);  	break;  case 2:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  	padVals [3] = calcPadPixels (pad2' ExplicitWidth);  	break;  case 3:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad3' ExplicitHeight);  	padVals [3] = calcPadPixels (pad2' ExplicitWidth);  	break;  case 4:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad3' ExplicitHeight);  	padVals [3] = calcPadPixels (pad4' ExplicitWidth);  	break;  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: switch (groupCount - 1) {  case 1:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  	padVals [3] = calcPadPixels (pad1' ExplicitWidth);  	break;  case 2:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  	padVals [3] = calcPadPixels (pad2' ExplicitWidth);  	break;  case 3:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad3' ExplicitHeight);  	padVals [3] = calcPadPixels (pad2' ExplicitWidth);  	break;  case 4:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad3' ExplicitHeight);  	padVals [3] = calcPadPixels (pad4' ExplicitWidth);  	break;  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: switch (groupCount - 1) {  case 1:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  	padVals [3] = calcPadPixels (pad1' ExplicitWidth);  	break;  case 2:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  	padVals [3] = calcPadPixels (pad2' ExplicitWidth);  	break;  case 3:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad3' ExplicitHeight);  	padVals [3] = calcPadPixels (pad2' ExplicitWidth);  	break;  case 4:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad3' ExplicitHeight);  	padVals [3] = calcPadPixels (pad4' ExplicitWidth);  	break;  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: switch (groupCount - 1) {  case 1:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  	padVals [3] = calcPadPixels (pad1' ExplicitWidth);  	break;  case 2:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  	padVals [3] = calcPadPixels (pad2' ExplicitWidth);  	break;  case 3:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad3' ExplicitHeight);  	padVals [3] = calcPadPixels (pad2' ExplicitWidth);  	break;  case 4:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad3' ExplicitHeight);  	padVals [3] = calcPadPixels (pad4' ExplicitWidth);  	break;  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: switch (groupCount - 1) {  case 1:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  	padVals [3] = calcPadPixels (pad1' ExplicitWidth);  	break;  case 2:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  	padVals [3] = calcPadPixels (pad2' ExplicitWidth);  	break;  case 3:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad3' ExplicitHeight);  	padVals [3] = calcPadPixels (pad2' ExplicitWidth);  	break;  case 4:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad3' ExplicitHeight);  	padVals [3] = calcPadPixels (pad4' ExplicitWidth);  	break;  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: padVals [2] = calcPadPixels (pad1' ExplicitHeight);  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: padVals [3] = calcPadPixels (pad1' ExplicitWidth);  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: padVals [2] = calcPadPixels (pad1' ExplicitHeight);  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: padVals [3] = calcPadPixels (pad2' ExplicitWidth);  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: padVals [2] = calcPadPixels (pad3' ExplicitHeight);  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: padVals [3] = calcPadPixels (pad2' ExplicitWidth);  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: padVals [2] = calcPadPixels (pad3' ExplicitHeight);  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following statement contains a magic number: padVals [3] = calcPadPixels (pad4' ExplicitWidth);  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,ParseNumericOffset,The following statement contains a magic number: if (offsetString.Length > 2 && "|in|cm|mm|em|ex|pt|pc".IndexOf (offsetString.Substring (offsetString.Length - 2' 2)' StringComparison.Ordinal) > -1)  	return offset;  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,ParseNumericOffset,The following statement contains a magic number: if (offsetString.Length > 2 && "|in|cm|mm|em|ex|pt|pc".IndexOf (offsetString.Substring (offsetString.Length - 2' 2)' StringComparison.Ordinal) > -1)  	return offset;  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,ParseNumericOffset,The following statement contains a magic number: if (offsetString.Length > 2 && "|in|cm|mm|em|ex|pt|pc".IndexOf (offsetString.Substring (offsetString.Length - 2' 2)' StringComparison.Ordinal) > -1)  	return offset;  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,ParseNumericOffset,The following statement contains a magic number: if (offsetString.EndsWith ("px"))  	trim = 2;  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,ParseNumericOffset,The following statement contains a magic number: trim = 2;  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,ScoreSpecificity,The following statement contains a magic number: foreach (char c in Selector) {  	switch (c) {  	case '#':  		score += 100;  		break;  	case '.':  	case '[':  	case ':':  		score += 10;  		break;  	case '*':  	case '+':  	case '>':  		break;  	default:  		if (lastChar == ' ')  			score += 1;  		break;  	}  	lastChar = c;  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,ScoreSpecificity,The following statement contains a magic number: foreach (char c in Selector) {  	switch (c) {  	case '#':  		score += 100;  		break;  	case '.':  	case '[':  	case ':':  		score += 10;  		break;  	case '*':  	case '+':  	case '>':  		break;  	default:  		if (lastChar == ' ')  			score += 1;  		break;  	}  	lastChar = c;  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,ScoreSpecificity,The following statement contains a magic number: switch (c) {  case '#':  	score += 100;  	break;  case '.':  case '[':  case ':':  	score += 10;  	break;  case '*':  case '+':  case '>':  	break;  default:  	if (lastChar == ' ')  		score += 1;  	break;  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,ScoreSpecificity,The following statement contains a magic number: switch (c) {  case '#':  	score += 100;  	break;  case '.':  case '[':  case ':':  	score += 10;  	break;  case '*':  case '+':  case '>':  	break;  default:  	if (lastChar == ' ')  		score += 1;  	break;  }  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,ScoreSpecificity,The following statement contains a magic number: score += 100;  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,ScoreSpecificity,The following statement contains a magic number: score += 10;  
Magic Number,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,ScoreSpecificity,The following statement contains a magic number: score -= (matches.Count * 9);  
Magic Number,Cassette.Spriting.Spritastic.Utilities,PngOptimizer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Utilities\PngOptimizer.cs,OptimizePng,The following statement contains a magic number: if (!imageQuantizationDisabled) {  	using (var unQuantized = new Bitmap (new MemoryStream (bytes))) {  		using (var quantized = wuQuantizer.QuantizeImage (unQuantized' 10' 5)) {  			var memStream = new MemoryStream ();  			quantized.Save (memStream' ImageFormat.Png);  			optimizedBytes = memStream.GetBuffer ();  		}  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Utilities,PngOptimizer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Utilities\PngOptimizer.cs,OptimizePng,The following statement contains a magic number: if (!imageQuantizationDisabled) {  	using (var unQuantized = new Bitmap (new MemoryStream (bytes))) {  		using (var quantized = wuQuantizer.QuantizeImage (unQuantized' 10' 5)) {  			var memStream = new MemoryStream ();  			quantized.Save (memStream' ImageFormat.Png);  			optimizedBytes = memStream.GetBuffer ();  		}  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Utilities,PngOptimizer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Utilities\PngOptimizer.cs,OptimizePng,The following statement contains a magic number: using (var unQuantized = new Bitmap (new MemoryStream (bytes))) {  	using (var quantized = wuQuantizer.QuantizeImage (unQuantized' 10' 5)) {  		var memStream = new MemoryStream ();  		quantized.Save (memStream' ImageFormat.Png);  		optimizedBytes = memStream.GetBuffer ();  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Utilities,PngOptimizer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Utilities\PngOptimizer.cs,OptimizePng,The following statement contains a magic number: using (var unQuantized = new Bitmap (new MemoryStream (bytes))) {  	using (var quantized = wuQuantizer.QuantizeImage (unQuantized' 10' 5)) {  		var memStream = new MemoryStream ();  		quantized.Save (memStream' ImageFormat.Png);  		optimizedBytes = memStream.GetBuffer ();  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Utilities,PngOptimizer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Utilities\PngOptimizer.cs,OptimizePng,The following statement contains a magic number: using (var quantized = wuQuantizer.QuantizeImage (unQuantized' 10' 5)) {  	var memStream = new MemoryStream ();  	quantized.Save (memStream' ImageFormat.Png);  	optimizedBytes = memStream.GetBuffer ();  }  
Magic Number,Cassette.Spriting.Spritastic.Utilities,PngOptimizer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Utilities\PngOptimizer.cs,OptimizePng,The following statement contains a magic number: using (var quantized = wuQuantizer.QuantizeImage (unQuantized' 10' 5)) {  	var memStream = new MemoryStream ();  	quantized.Save (memStream' ImageFormat.Png);  	optimizedBytes = memStream.GetBuffer ();  }  
Magic Number,Cassette.Spriting.Spritastic.Utilities,PngOptimizer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Utilities\PngOptimizer.cs,InvokeExecutable,The following statement contains a magic number: using (var process = new Process ()) {  	process.StartInfo = new ProcessStartInfo {  		UseShellExecute = false'  		RedirectStandardOutput = true'  		CreateNoWindow = true'  		FileName = executable'  		Arguments = arguments  	};  	process.Start ();  	process.StandardOutput.ReadToEnd ();  	process.WaitForExit (10000);  	if (!process.HasExited) {  		process.Kill ();  		throw new OptimizationException (string.Format ("Unable to optimize image using executable {0} with arguments {1}"' executable' arguments));  	}  }  
Magic Number,Cassette.Spriting.Spritastic.Utilities,PngOptimizer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Utilities\PngOptimizer.cs,InvokeExecutable,The following statement contains a magic number: process.WaitForExit (10000);  
Magic Number,Cassette.Spriting.Spritastic.Utilities,WebClientWrapper,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Utilities\WebClientWrapper.cs,WebClientWrapper,The following statement contains a magic number: if (TrustLevelChecker.IsFullTrust () && Environment.Version.Major < 4)  	return;  
Magic Number,Cassette.Spriting.Spritastic.Utilities,WebClientWrapper,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Utilities\WebClientWrapper.cs,DownloadBytes,The following statement contains a magic number: try {  	using (var client = new WebClient ()) {  		if (TrustLevelChecker.IsFullTrust () || Environment.Version.Major >= 4)  			client.Proxy = proxy;  		client.Credentials = CredentialCache.DefaultCredentials;  		return client.DownloadData (url);  	}  } catch (Exception ex) {  	throw new SpriteException (string.Format ("Spritastic had problems accessing {0}. Error Message from WebClient is: {1}"' url' ex.Message)' ex);  }  
Magic Number,Cassette.Spriting.Spritastic.Utilities,WebClientWrapper,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Utilities\WebClientWrapper.cs,DownloadBytes,The following statement contains a magic number: using (var client = new WebClient ()) {  	if (TrustLevelChecker.IsFullTrust () || Environment.Version.Major >= 4)  		client.Proxy = proxy;  	client.Credentials = CredentialCache.DefaultCredentials;  	return client.DownloadData (url);  }  
Magic Number,Cassette.Spriting.Spritastic.Utilities,WebClientWrapper,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Utilities\WebClientWrapper.cs,DownloadBytes,The following statement contains a magic number: if (TrustLevelChecker.IsFullTrust () || Environment.Version.Major >= 4)  	client.Proxy = proxy;  
Missing Default,Cassette.Spriting.Spritastic.Generator,SpriteContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,AddImage,The following switch statement is missing a default case: switch (image.XOffset.Direction) {  case Direction.Left:  	image.XOffset = new Position {  		PositionMode = PositionMode.Percent'  		Offset = 0  	};  	break;  case Direction.Center:  	image.XOffset = new Position {  		PositionMode = PositionMode.Percent'  		Offset = 50  	};  	break;  case Direction.Right:  	image.XOffset = new Position {  		PositionMode = PositionMode.Percent'  		Offset = 100  	};  	break;  }  
Missing Default,Cassette.Spriting.Spritastic.Generator,SpriteContainer,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Generator\SpriteContainer.cs,AddImage,The following switch statement is missing a default case: switch (image.YOffset.Direction) {  case Direction.Top:  	image.YOffset = new Position {  		PositionMode = PositionMode.Percent'  		Offset = 0  	};  	break;  case Direction.Center:  	image.YOffset = new Position {  		PositionMode = PositionMode.Percent'  		Offset = 50  	};  	break;  case Direction.Bottom:  	image.YOffset = new Position {  		PositionMode = PositionMode.Percent'  		Offset = 100  	};  	break;  }  
Missing Default,Cassette.Spriting.Spritastic.Parser,BackgroundImageClass,F:\newReposMay17\andrewdavey_cassette\src\Cassette.Spriting\Spritastic\Parser\BackgroundImageClass.cs,GetPadding,The following switch statement is missing a default case: switch (groupCount - 1) {  case 1:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad1' ExplicitWidth);  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  	padVals [3] = calcPadPixels (pad1' ExplicitWidth);  	break;  case 2:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad1' ExplicitHeight);  	padVals [3] = calcPadPixels (pad2' ExplicitWidth);  	break;  case 3:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad3' ExplicitHeight);  	padVals [3] = calcPadPixels (pad2' ExplicitWidth);  	break;  case 4:  	padVals [0] = calcPadPixels (pad1' ExplicitHeight);  	padVals [1] = calcPadPixels (pad2' ExplicitWidth);  	padVals [2] = calcPadPixels (pad3' ExplicitHeight);  	padVals [3] = calcPadPixels (pad4' ExplicitWidth);  	break;  }  
