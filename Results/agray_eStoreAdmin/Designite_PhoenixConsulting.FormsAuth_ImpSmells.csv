Implementation smell,Namespace,Class,File,Method,Description
Complex Method,com.phoenixconsulting.authentication,FormsAuthenticator,C:\repos\agray_eStoreAdmin\PhoenixConsulting.FormsAuth\FormsAuthenticator.cs,addUser,Cyclomatic complexity of the method is 38
Long Parameter List,com.phoenixconsulting.authentication,FormsAuthenticator,C:\repos\agray_eStoreAdmin\PhoenixConsulting.FormsAuth\FormsAuthenticator.cs,addUser,The method has 5 parameters.
Long Statement,com.phoenixconsulting.authentication,FormsAuthenticator,C:\repos\agray_eStoreAdmin\PhoenixConsulting.FormsAuth\FormsAuthenticator.cs,addUser,The length of the statement  "	MembershipUser newUser = Membership.CreateUser (HttpUtility.HtmlEncode (username.Trim ())' HttpUtility.HtmlEncode (password.Trim ())' HttpUtility.HtmlEncode (email.Trim ())' HttpUtility.HtmlEncode (question.Trim ())' HttpUtility.HtmlEncode (answer.Trim ())' true' out createStatus); " is 282.
Missing Default,com.phoenixconsulting.authentication,FormsAuthenticator,C:\repos\agray_eStoreAdmin\PhoenixConsulting.FormsAuth\FormsAuthenticator.cs,addUser,The following switch statement is missing a default case: switch (createStatus) {  case MembershipCreateStatus.Success:  	CreateResultMessage = "&raquo; The user was successfully created. &laquo;";  	break;  case MembershipCreateStatus.InvalidUserName:  	CreateResultMessage = "The user name was not found in the database.";  	break;  case MembershipCreateStatus.InvalidPassword:  	CreateResultMessage = "The password is not formatted correctly.";  	break;  case MembershipCreateStatus.InvalidQuestion:  	CreateResultMessage = "The password question is not formatted correctly.";  	break;  case MembershipCreateStatus.InvalidAnswer:  	CreateResultMessage = "The password answer is not formatted correctly.";  	break;  case MembershipCreateStatus.InvalidEmail:  	CreateResultMessage = "The e-mail address is not formatted correctly.";  	break;  case MembershipCreateStatus.DuplicateUserName:  	CreateResultMessage = "The user name already exists in the database for the application.";  	break;  case MembershipCreateStatus.DuplicateEmail:  	CreateResultMessage = "The e-mail address already exists in the database for the application.";  	break;  case MembershipCreateStatus.UserRejected:  	CreateResultMessage = "The user was not created' for a reason defined by the provider.";  	break;  case MembershipCreateStatus.InvalidProviderUserKey:  	CreateResultMessage = "The provider user key is of an invalid type or format.";  	break;  case MembershipCreateStatus.DuplicateProviderUserKey:  	CreateResultMessage = "The ProviderUserKey already exists in the database for the application.";  	break;  case MembershipCreateStatus.ProviderError:  	CreateResultMessage = "The provider returned an error that is not described by other ";  	CreateResultMessage += "MembershipCreateStatus enumeration values.";  	break;  }  
