Implementation smell,Namespace,Class,File,Method,Description
Long Method,TextureReplacer,Personaliser,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Personaliser.cs,personaliseKerbal,The method has 119 lines of code.
Long Method,TextureReplacer,Personaliser,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Personaliser.cs,load,The method has 108 lines of code.
Long Method,TextureReplacer,Replacer,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Replacer.cs,load,The method has 160 lines of code.
Long Method,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The method has 184 lines of code.
Complex Method,TextureReplacer,Loader,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Loader.cs,readConfig,Cyclomatic complexity of the method is 37
Complex Method,TextureReplacer,Loader,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Loader.cs,configure,Cyclomatic complexity of the method is 8
Complex Method,TextureReplacer,Loader,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Loader.cs,processTextures,Cyclomatic complexity of the method is 11
Complex Method,TextureReplacer,Personaliser,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Personaliser.cs,personaliseKerbal,Cyclomatic complexity of the method is 65
Complex Method,TextureReplacer,Personaliser,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Personaliser.cs,loadSuitMap,Cyclomatic complexity of the method is 9
Complex Method,TextureReplacer,Personaliser,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Personaliser.cs,readKerbalsConfigs,Cyclomatic complexity of the method is 10
Complex Method,TextureReplacer,Personaliser,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Personaliser.cs,load,Cyclomatic complexity of the method is 30
Complex Method,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,load,Cyclomatic complexity of the method is 30
Complex Method,TextureReplacer,Replacer,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Replacer.cs,replaceTextures,Cyclomatic complexity of the method is 9
Complex Method,TextureReplacer,Replacer,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Replacer.cs,load,Cyclomatic complexity of the method is 71
Complex Method,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,Cyclomatic complexity of the method is 42
Complex Method,TextureReplacer,TRReflection,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRReflection.cs,OnStart,Cyclomatic complexity of the method is 10
Long Statement,TextureReplacer,Loader,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Loader.cs,configure,The length of the statement  "	bool isATMDetected = AssemblyLoader.loadedAssemblies.Any (a => a.name.StartsWith ("ActiveTextureManagement"' StringComparison.Ordinal)); " is 136.
Long Statement,TextureReplacer,Loader,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Loader.cs,processTextures,The length of the statement  "		if (isMipmapGenEnabled.Value && texture.mipmapCount == 1 && (texture.width > 1 || texture.height > 1) && generateMipmaps.Any (r => r.IsMatch (texture.name)) && texture.name != HUD_NAVBALL && texture.name != IVA_NAVBALL) { " is 221.
Long Statement,TextureReplacer,Loader,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Loader.cs,processTextures,The length of the statement  "			if (isCompressionEnabled.Value && quality > 0 && (texture.width >> quality) % 4 != 0 && (texture.width >> quality) % 4 != 0) { " is 126.
Long Statement,TextureReplacer,Loader,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Loader.cs,processTextures,The length of the statement  "			Util.log ("{0} {1} [{2}x{3} {4} -> {5}]"' hasGenMipmaps && hasCompressed ? "Generated mipmaps & compressed" : hasGenMipmaps ? "Generated mipmaps for" : "Compressed"' texture.name' texture.width' texture.height' format' texture.format); " is 235.
Long Statement,TextureReplacer,Loader,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Loader.cs,initialise,The length of the statement  "		Util.log ("Texture unloading freed approximately {0:0.0} MiB = {1:0.0} MB of system RAM"' memorySpared / 1024.0 / 1024.0' memorySpared / 1000.0 / 1000.0); " is 154.
Long Statement,TextureReplacer,Personaliser,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Personaliser.cs,isAtmBreathable,The length of the statement  "	bool value = !HighLogic.LoadedSceneIsFlight || (FlightGlobals.getStaticPressure () >= atmSuitPressure && atmSuitBodies.Contains (FlightGlobals.currentMainBody.bodyName)); " is 170.
Long Statement,TextureReplacer,Personaliser,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Personaliser.cs,load,The length of the statement  "		ConfigNode scenarioNode = HighLogic.CurrentGame.config.GetNodes ("SCENARIO").FirstOrDefault (n => n.GetValue ("name") == "TRScenario"); " is 135.
Long Statement,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,setReflectionType,The length of the statement  "		SkinnedMeshRenderer visor = evas [i].GetComponentsInChildren<SkinnedMeshRenderer> (true).First (m => m.name == "visor"); " is 120.
Long Statement,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,load,The length of the statement  "		if (envMapFaces.Any (t => t.width != envMapSize || t.height != envMapSize) || envMapFaces.Any (t => !Util.isPow2 (t.width) || !Util.isPow2 (t.height))) { " is 153.
Long Statement,TextureReplacer,TRActivator,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRActivator.cs,Start,The length of the statement  "	if ((HighLogic.LoadedSceneIsFlight || HighLogic.LoadedSceneIsEditor) && Reflections.instance.reflectionType == Reflections.Type.REAL) { " is 135.
Long Statement,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The length of the statement  "		Texture2D suitTex = suit == defaultSuit && kerbalData != null && kerbalData.isVeteran ? defaultSuit.suitVeteran : (suit.suit ?? defaultSuit.suit); " is 146.
Long Statement,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The length of the statement  "	personaliser.isHelmetRemovalEnabled = GUILayout.Toggle (personaliser.isHelmetRemovalEnabled' "Remove IVA helmets in safe situations"); " is 134.
Long Statement,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The length of the statement  "	personaliser.isAtmSuitEnabled = GUILayout.Toggle (personaliser.isAtmSuitEnabled' "Spawn Kerbals in IVA suits when in breathable atmosphere"); " is 141.
Long Statement,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,addAppButton,The length of the statement  "		appButton = ApplicationLauncher.Instance.AddModApplication (enable' disable' null' null' null' null' ApplicationLauncher.AppScenes.SPACECENTER' appIcon); " is 153.
Long Statement,TextureReplacer,TRReflection,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRReflection.cs,OnStart,The length of the statement  "			success |= script == null ? reflections.applyStatic (material' reflectiveShader' reflectionColour) : script.apply (material' reflectiveShader' reflectionColour); " is 161.
Complex Conditional,TextureReplacer,Loader,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Loader.cs,processTextures,The conditional expression  "isMipmapGenEnabled.Value && texture.mipmapCount == 1 && (texture.width > 1 || texture.height > 1) && generateMipmaps.Any (r => r.IsMatch (texture.name)) && texture.name != HUD_NAVBALL && texture.name != IVA_NAVBALL"  is complex.
Complex Conditional,TextureReplacer,Loader,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Loader.cs,processTextures,The conditional expression  "isCompressionEnabled.Value && quality > 0 && (texture.width >> quality) % 4 != 0 && (texture.width >> quality) % 4 != 0"  is complex.
Complex Conditional,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,load,The conditional expression  "envMapFaces.Any (t => t.width != envMapSize || t.height != envMapSize) || envMapFaces.Any (t => !Util.isPow2 (t.width) || !Util.isPow2 (t.height))"  is complex.
Empty Catch Block,TextureReplacer,Util,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Util.cs,parse,The method has an empty catch block.
Empty Catch Block,TextureReplacer,Util,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Util.cs,parse,The method has an empty catch block.
Magic Number,TextureReplacer,Loader,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Loader.cs,textureSize,The following statement contains a magic number: return texture.format == TextureFormat.DXT1 || texture.format == TextureFormat.RGB24 ? nPixels * 3 : nPixels * 4;  
Magic Number,TextureReplacer,Loader,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Loader.cs,textureSize,The following statement contains a magic number: return texture.format == TextureFormat.DXT1 || texture.format == TextureFormat.RGB24 ? nPixels * 3 : nPixels * 4;  
Magic Number,TextureReplacer,Loader,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Loader.cs,processTextures,The following statement contains a magic number: for (int i = lastTextureCount; i < texInfos.Count; ++i) {  	GameDatabase.TextureInfo texInfo = texInfos [i];  	Texture2D texture = texInfo.texture;  	if (texture == null)  		continue;  	// Apply trilinear filter.  	if (texture.filterMode == FilterMode.Bilinear)  		texture.filterMode = FilterMode.Trilinear;  	if (!texInfo.isReadable)  		continue;  	// `texture.GetPixel() throws an exception if the texture is not readable and hence it  	// cannot be compressed nor mipmaps generated.  	try {  		texture.GetPixel (0' 0);  	} catch (UnityException) {  		continue;  	}  	TextureFormat format = texture.format;  	bool hasGenMipmaps = false;  	bool hasCompressed = false;  	// Generate mipmaps if necessary. Images that may be UI icons should be excluded to prevent  	// blurriness when using less-than-full texture quality.  	if (isMipmapGenEnabled.Value && texture.mipmapCount == 1 && (texture.width > 1 || texture.height > 1) && generateMipmaps.Any (r => r.IsMatch (texture.name)) && texture.name != HUD_NAVBALL && texture.name != IVA_NAVBALL) {  		Color32[] pixels32 = texture.GetPixels32 ();  		// PNGs are always loaded as transparent' so we check if they actually contain any  		// transparent pixels. Convert non-transparent PNGs to RGB.  		bool hasAlpha = format == TextureFormat.RGBA32 || format == TextureFormat.DXT5;  		bool isTransparent = hasAlpha && pixels32.Any (p => p.a != 255);  		// Workaround for a Unity + D3D bug.  		int quality = QualitySettings.masterTextureLimit;  		if (isCompressionEnabled.Value && quality > 0 && (texture.width >> quality) % 4 != 0 && (texture.width >> quality) % 4 != 0) {  			QualitySettings.masterTextureLimit = 0;  		}  		// Rebuild texture. This time with mipmaps.  		TextureFormat newFormat = isTransparent ? TextureFormat.RGBA32 : TextureFormat.RGB24;  		texture.Resize (texture.width' texture.height' newFormat' true);  		texture.SetPixels32 (pixels32);  		texture.Apply (true' false);  		if (quality != QualitySettings.masterTextureLimit)  			QualitySettings.masterTextureLimit = quality;  		hasGenMipmaps = true;  	}  	// Compress if necessary.  	if (isCompressionEnabled.Value && texture.format != TextureFormat.DXT1 && texture.format != TextureFormat.DXT5) {  		texture.Compress (true);  		texInfos [i].isCompressed = true;  		hasCompressed = true;  	}  	if (hasGenMipmaps || hasCompressed) {  		Util.log ("{0} {1} [{2}x{3} {4} -> {5}]"' hasGenMipmaps && hasCompressed ? "Generated mipmaps & compressed" : hasGenMipmaps ? "Generated mipmaps for" : "Compressed"' texture.name' texture.width' texture.height' format' texture.format);  	}  }  
Magic Number,TextureReplacer,Loader,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Loader.cs,processTextures,The following statement contains a magic number: for (int i = lastTextureCount; i < texInfos.Count; ++i) {  	GameDatabase.TextureInfo texInfo = texInfos [i];  	Texture2D texture = texInfo.texture;  	if (texture == null)  		continue;  	// Apply trilinear filter.  	if (texture.filterMode == FilterMode.Bilinear)  		texture.filterMode = FilterMode.Trilinear;  	if (!texInfo.isReadable)  		continue;  	// `texture.GetPixel() throws an exception if the texture is not readable and hence it  	// cannot be compressed nor mipmaps generated.  	try {  		texture.GetPixel (0' 0);  	} catch (UnityException) {  		continue;  	}  	TextureFormat format = texture.format;  	bool hasGenMipmaps = false;  	bool hasCompressed = false;  	// Generate mipmaps if necessary. Images that may be UI icons should be excluded to prevent  	// blurriness when using less-than-full texture quality.  	if (isMipmapGenEnabled.Value && texture.mipmapCount == 1 && (texture.width > 1 || texture.height > 1) && generateMipmaps.Any (r => r.IsMatch (texture.name)) && texture.name != HUD_NAVBALL && texture.name != IVA_NAVBALL) {  		Color32[] pixels32 = texture.GetPixels32 ();  		// PNGs are always loaded as transparent' so we check if they actually contain any  		// transparent pixels. Convert non-transparent PNGs to RGB.  		bool hasAlpha = format == TextureFormat.RGBA32 || format == TextureFormat.DXT5;  		bool isTransparent = hasAlpha && pixels32.Any (p => p.a != 255);  		// Workaround for a Unity + D3D bug.  		int quality = QualitySettings.masterTextureLimit;  		if (isCompressionEnabled.Value && quality > 0 && (texture.width >> quality) % 4 != 0 && (texture.width >> quality) % 4 != 0) {  			QualitySettings.masterTextureLimit = 0;  		}  		// Rebuild texture. This time with mipmaps.  		TextureFormat newFormat = isTransparent ? TextureFormat.RGBA32 : TextureFormat.RGB24;  		texture.Resize (texture.width' texture.height' newFormat' true);  		texture.SetPixels32 (pixels32);  		texture.Apply (true' false);  		if (quality != QualitySettings.masterTextureLimit)  			QualitySettings.masterTextureLimit = quality;  		hasGenMipmaps = true;  	}  	// Compress if necessary.  	if (isCompressionEnabled.Value && texture.format != TextureFormat.DXT1 && texture.format != TextureFormat.DXT5) {  		texture.Compress (true);  		texInfos [i].isCompressed = true;  		hasCompressed = true;  	}  	if (hasGenMipmaps || hasCompressed) {  		Util.log ("{0} {1} [{2}x{3} {4} -> {5}]"' hasGenMipmaps && hasCompressed ? "Generated mipmaps & compressed" : hasGenMipmaps ? "Generated mipmaps for" : "Compressed"' texture.name' texture.width' texture.height' format' texture.format);  	}  }  
Magic Number,TextureReplacer,Loader,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Loader.cs,processTextures,The following statement contains a magic number: for (int i = lastTextureCount; i < texInfos.Count; ++i) {  	GameDatabase.TextureInfo texInfo = texInfos [i];  	Texture2D texture = texInfo.texture;  	if (texture == null)  		continue;  	// Apply trilinear filter.  	if (texture.filterMode == FilterMode.Bilinear)  		texture.filterMode = FilterMode.Trilinear;  	if (!texInfo.isReadable)  		continue;  	// `texture.GetPixel() throws an exception if the texture is not readable and hence it  	// cannot be compressed nor mipmaps generated.  	try {  		texture.GetPixel (0' 0);  	} catch (UnityException) {  		continue;  	}  	TextureFormat format = texture.format;  	bool hasGenMipmaps = false;  	bool hasCompressed = false;  	// Generate mipmaps if necessary. Images that may be UI icons should be excluded to prevent  	// blurriness when using less-than-full texture quality.  	if (isMipmapGenEnabled.Value && texture.mipmapCount == 1 && (texture.width > 1 || texture.height > 1) && generateMipmaps.Any (r => r.IsMatch (texture.name)) && texture.name != HUD_NAVBALL && texture.name != IVA_NAVBALL) {  		Color32[] pixels32 = texture.GetPixels32 ();  		// PNGs are always loaded as transparent' so we check if they actually contain any  		// transparent pixels. Convert non-transparent PNGs to RGB.  		bool hasAlpha = format == TextureFormat.RGBA32 || format == TextureFormat.DXT5;  		bool isTransparent = hasAlpha && pixels32.Any (p => p.a != 255);  		// Workaround for a Unity + D3D bug.  		int quality = QualitySettings.masterTextureLimit;  		if (isCompressionEnabled.Value && quality > 0 && (texture.width >> quality) % 4 != 0 && (texture.width >> quality) % 4 != 0) {  			QualitySettings.masterTextureLimit = 0;  		}  		// Rebuild texture. This time with mipmaps.  		TextureFormat newFormat = isTransparent ? TextureFormat.RGBA32 : TextureFormat.RGB24;  		texture.Resize (texture.width' texture.height' newFormat' true);  		texture.SetPixels32 (pixels32);  		texture.Apply (true' false);  		if (quality != QualitySettings.masterTextureLimit)  			QualitySettings.masterTextureLimit = quality;  		hasGenMipmaps = true;  	}  	// Compress if necessary.  	if (isCompressionEnabled.Value && texture.format != TextureFormat.DXT1 && texture.format != TextureFormat.DXT5) {  		texture.Compress (true);  		texInfos [i].isCompressed = true;  		hasCompressed = true;  	}  	if (hasGenMipmaps || hasCompressed) {  		Util.log ("{0} {1} [{2}x{3} {4} -> {5}]"' hasGenMipmaps && hasCompressed ? "Generated mipmaps & compressed" : hasGenMipmaps ? "Generated mipmaps for" : "Compressed"' texture.name' texture.width' texture.height' format' texture.format);  	}  }  
Magic Number,TextureReplacer,Loader,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Loader.cs,processTextures,The following statement contains a magic number: if (isMipmapGenEnabled.Value && texture.mipmapCount == 1 && (texture.width > 1 || texture.height > 1) && generateMipmaps.Any (r => r.IsMatch (texture.name)) && texture.name != HUD_NAVBALL && texture.name != IVA_NAVBALL) {  	Color32[] pixels32 = texture.GetPixels32 ();  	// PNGs are always loaded as transparent' so we check if they actually contain any  	// transparent pixels. Convert non-transparent PNGs to RGB.  	bool hasAlpha = format == TextureFormat.RGBA32 || format == TextureFormat.DXT5;  	bool isTransparent = hasAlpha && pixels32.Any (p => p.a != 255);  	// Workaround for a Unity + D3D bug.  	int quality = QualitySettings.masterTextureLimit;  	if (isCompressionEnabled.Value && quality > 0 && (texture.width >> quality) % 4 != 0 && (texture.width >> quality) % 4 != 0) {  		QualitySettings.masterTextureLimit = 0;  	}  	// Rebuild texture. This time with mipmaps.  	TextureFormat newFormat = isTransparent ? TextureFormat.RGBA32 : TextureFormat.RGB24;  	texture.Resize (texture.width' texture.height' newFormat' true);  	texture.SetPixels32 (pixels32);  	texture.Apply (true' false);  	if (quality != QualitySettings.masterTextureLimit)  		QualitySettings.masterTextureLimit = quality;  	hasGenMipmaps = true;  }  
Magic Number,TextureReplacer,Loader,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Loader.cs,processTextures,The following statement contains a magic number: if (isMipmapGenEnabled.Value && texture.mipmapCount == 1 && (texture.width > 1 || texture.height > 1) && generateMipmaps.Any (r => r.IsMatch (texture.name)) && texture.name != HUD_NAVBALL && texture.name != IVA_NAVBALL) {  	Color32[] pixels32 = texture.GetPixels32 ();  	// PNGs are always loaded as transparent' so we check if they actually contain any  	// transparent pixels. Convert non-transparent PNGs to RGB.  	bool hasAlpha = format == TextureFormat.RGBA32 || format == TextureFormat.DXT5;  	bool isTransparent = hasAlpha && pixels32.Any (p => p.a != 255);  	// Workaround for a Unity + D3D bug.  	int quality = QualitySettings.masterTextureLimit;  	if (isCompressionEnabled.Value && quality > 0 && (texture.width >> quality) % 4 != 0 && (texture.width >> quality) % 4 != 0) {  		QualitySettings.masterTextureLimit = 0;  	}  	// Rebuild texture. This time with mipmaps.  	TextureFormat newFormat = isTransparent ? TextureFormat.RGBA32 : TextureFormat.RGB24;  	texture.Resize (texture.width' texture.height' newFormat' true);  	texture.SetPixels32 (pixels32);  	texture.Apply (true' false);  	if (quality != QualitySettings.masterTextureLimit)  		QualitySettings.masterTextureLimit = quality;  	hasGenMipmaps = true;  }  
Magic Number,TextureReplacer,Loader,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Loader.cs,processTextures,The following statement contains a magic number: if (isMipmapGenEnabled.Value && texture.mipmapCount == 1 && (texture.width > 1 || texture.height > 1) && generateMipmaps.Any (r => r.IsMatch (texture.name)) && texture.name != HUD_NAVBALL && texture.name != IVA_NAVBALL) {  	Color32[] pixels32 = texture.GetPixels32 ();  	// PNGs are always loaded as transparent' so we check if they actually contain any  	// transparent pixels. Convert non-transparent PNGs to RGB.  	bool hasAlpha = format == TextureFormat.RGBA32 || format == TextureFormat.DXT5;  	bool isTransparent = hasAlpha && pixels32.Any (p => p.a != 255);  	// Workaround for a Unity + D3D bug.  	int quality = QualitySettings.masterTextureLimit;  	if (isCompressionEnabled.Value && quality > 0 && (texture.width >> quality) % 4 != 0 && (texture.width >> quality) % 4 != 0) {  		QualitySettings.masterTextureLimit = 0;  	}  	// Rebuild texture. This time with mipmaps.  	TextureFormat newFormat = isTransparent ? TextureFormat.RGBA32 : TextureFormat.RGB24;  	texture.Resize (texture.width' texture.height' newFormat' true);  	texture.SetPixels32 (pixels32);  	texture.Apply (true' false);  	if (quality != QualitySettings.masterTextureLimit)  		QualitySettings.masterTextureLimit = quality;  	hasGenMipmaps = true;  }  
Magic Number,TextureReplacer,Loader,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Loader.cs,processTextures,The following statement contains a magic number: if (isCompressionEnabled.Value && quality > 0 && (texture.width >> quality) % 4 != 0 && (texture.width >> quality) % 4 != 0) {  	QualitySettings.masterTextureLimit = 0;  }  
Magic Number,TextureReplacer,Loader,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Loader.cs,processTextures,The following statement contains a magic number: if (isCompressionEnabled.Value && quality > 0 && (texture.width >> quality) % 4 != 0 && (texture.width >> quality) % 4 != 0) {  	QualitySettings.masterTextureLimit = 0;  }  
Magic Number,TextureReplacer,Loader,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Loader.cs,initialise,The following statement contains a magic number: if (memorySpared > 0) {  	Util.log ("Texture unloading freed approximately {0:0.0} MiB = {1:0.0} MB of system RAM"' memorySpared / 1024.0 / 1024.0' memorySpared / 1000.0 / 1000.0);  }  
Magic Number,TextureReplacer,Loader,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Loader.cs,initialise,The following statement contains a magic number: if (memorySpared > 0) {  	Util.log ("Texture unloading freed approximately {0:0.0} MiB = {1:0.0} MB of system RAM"' memorySpared / 1024.0 / 1024.0' memorySpared / 1000.0 / 1000.0);  }  
Magic Number,TextureReplacer,Loader,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Loader.cs,initialise,The following statement contains a magic number: if (memorySpared > 0) {  	Util.log ("Texture unloading freed approximately {0:0.0} MiB = {1:0.0} MB of system RAM"' memorySpared / 1024.0 / 1024.0' memorySpared / 1000.0 / 1000.0);  }  
Magic Number,TextureReplacer,Loader,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Loader.cs,initialise,The following statement contains a magic number: if (memorySpared > 0) {  	Util.log ("Texture unloading freed approximately {0:0.0} MiB = {1:0.0} MB of system RAM"' memorySpared / 1024.0 / 1024.0' memorySpared / 1000.0 / 1000.0);  }  
Magic Number,TextureReplacer,Loader,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Loader.cs,initialise,The following statement contains a magic number: Util.log ("Texture unloading freed approximately {0:0.0} MiB = {1:0.0} MB of system RAM"' memorySpared / 1024.0 / 1024.0' memorySpared / 1000.0 / 1000.0);  
Magic Number,TextureReplacer,Loader,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Loader.cs,initialise,The following statement contains a magic number: Util.log ("Texture unloading freed approximately {0:0.0} MiB = {1:0.0} MB of system RAM"' memorySpared / 1024.0 / 1024.0' memorySpared / 1000.0 / 1000.0);  
Magic Number,TextureReplacer,Loader,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Loader.cs,initialise,The following statement contains a magic number: Util.log ("Texture unloading freed approximately {0:0.0} MiB = {1:0.0} MB of system RAM"' memorySpared / 1024.0 / 1024.0' memorySpared / 1000.0 / 1000.0);  
Magic Number,TextureReplacer,Loader,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Loader.cs,initialise,The following statement contains a magic number: Util.log ("Texture unloading freed approximately {0:0.0} MiB = {1:0.0} MB of system RAM"' memorySpared / 1024.0 / 1024.0' memorySpared / 1000.0 / 1000.0);  
Magic Number,TextureReplacer,Personaliser,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Personaliser.cs,loadKerbals,The following statement contains a magic number: foreach (ProtoCrewMember kerbal in roster.Crew.Concat (roster.Tourist).Concat (roster.Unowned)) {  	if (kerbal.rosterStatus == ProtoCrewMember.RosterStatus.Dead && kerbal.type != ProtoCrewMember.KerbalType.Unowned) {  		continue;  	}  	KerbalData kerbalData = getKerbalData (kerbal);  	string value = node.GetValue (kerbal.name);  	if (value != null) {  		string[] tokens = Util.splitConfigValue (value);  		string genderName = tokens.Length >= 1 ? tokens [0] : null;  		string headName = tokens.Length >= 2 ? tokens [1] : null;  		string suitName = tokens.Length >= 3 ? tokens [2] : null;  		if (genderName != null)  			kerbalData.gender = genderName == "F" ? 1 : 0;  		if (headName != null && headName != "GENERIC") {  			kerbalData.head = headName == "DEFAULT" ? defaultHead [(int)kerbal.gender] : heads.Find (h => h.name == headName);  		}  		if (suitName != null && suitName != "GENERIC")  			kerbalData.suit = suitName == "DEFAULT" ? defaultSuit : suits.Find (s => s.name == suitName);  		kerbal.gender = forceLegacyFemales ? ProtoCrewMember.Gender.Male : (ProtoCrewMember.Gender)kerbalData.gender;  	}  }  
Magic Number,TextureReplacer,Personaliser,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Personaliser.cs,loadKerbals,The following statement contains a magic number: foreach (ProtoCrewMember kerbal in roster.Crew.Concat (roster.Tourist).Concat (roster.Unowned)) {  	if (kerbal.rosterStatus == ProtoCrewMember.RosterStatus.Dead && kerbal.type != ProtoCrewMember.KerbalType.Unowned) {  		continue;  	}  	KerbalData kerbalData = getKerbalData (kerbal);  	string value = node.GetValue (kerbal.name);  	if (value != null) {  		string[] tokens = Util.splitConfigValue (value);  		string genderName = tokens.Length >= 1 ? tokens [0] : null;  		string headName = tokens.Length >= 2 ? tokens [1] : null;  		string suitName = tokens.Length >= 3 ? tokens [2] : null;  		if (genderName != null)  			kerbalData.gender = genderName == "F" ? 1 : 0;  		if (headName != null && headName != "GENERIC") {  			kerbalData.head = headName == "DEFAULT" ? defaultHead [(int)kerbal.gender] : heads.Find (h => h.name == headName);  		}  		if (suitName != null && suitName != "GENERIC")  			kerbalData.suit = suitName == "DEFAULT" ? defaultSuit : suits.Find (s => s.name == suitName);  		kerbal.gender = forceLegacyFemales ? ProtoCrewMember.Gender.Male : (ProtoCrewMember.Gender)kerbalData.gender;  	}  }  
Magic Number,TextureReplacer,Personaliser,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Personaliser.cs,loadKerbals,The following statement contains a magic number: foreach (ProtoCrewMember kerbal in roster.Crew.Concat (roster.Tourist).Concat (roster.Unowned)) {  	if (kerbal.rosterStatus == ProtoCrewMember.RosterStatus.Dead && kerbal.type != ProtoCrewMember.KerbalType.Unowned) {  		continue;  	}  	KerbalData kerbalData = getKerbalData (kerbal);  	string value = node.GetValue (kerbal.name);  	if (value != null) {  		string[] tokens = Util.splitConfigValue (value);  		string genderName = tokens.Length >= 1 ? tokens [0] : null;  		string headName = tokens.Length >= 2 ? tokens [1] : null;  		string suitName = tokens.Length >= 3 ? tokens [2] : null;  		if (genderName != null)  			kerbalData.gender = genderName == "F" ? 1 : 0;  		if (headName != null && headName != "GENERIC") {  			kerbalData.head = headName == "DEFAULT" ? defaultHead [(int)kerbal.gender] : heads.Find (h => h.name == headName);  		}  		if (suitName != null && suitName != "GENERIC")  			kerbalData.suit = suitName == "DEFAULT" ? defaultSuit : suits.Find (s => s.name == suitName);  		kerbal.gender = forceLegacyFemales ? ProtoCrewMember.Gender.Male : (ProtoCrewMember.Gender)kerbalData.gender;  	}  }  
Magic Number,TextureReplacer,Personaliser,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Personaliser.cs,loadKerbals,The following statement contains a magic number: if (value != null) {  	string[] tokens = Util.splitConfigValue (value);  	string genderName = tokens.Length >= 1 ? tokens [0] : null;  	string headName = tokens.Length >= 2 ? tokens [1] : null;  	string suitName = tokens.Length >= 3 ? tokens [2] : null;  	if (genderName != null)  		kerbalData.gender = genderName == "F" ? 1 : 0;  	if (headName != null && headName != "GENERIC") {  		kerbalData.head = headName == "DEFAULT" ? defaultHead [(int)kerbal.gender] : heads.Find (h => h.name == headName);  	}  	if (suitName != null && suitName != "GENERIC")  		kerbalData.suit = suitName == "DEFAULT" ? defaultSuit : suits.Find (s => s.name == suitName);  	kerbal.gender = forceLegacyFemales ? ProtoCrewMember.Gender.Male : (ProtoCrewMember.Gender)kerbalData.gender;  }  
Magic Number,TextureReplacer,Personaliser,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Personaliser.cs,loadKerbals,The following statement contains a magic number: if (value != null) {  	string[] tokens = Util.splitConfigValue (value);  	string genderName = tokens.Length >= 1 ? tokens [0] : null;  	string headName = tokens.Length >= 2 ? tokens [1] : null;  	string suitName = tokens.Length >= 3 ? tokens [2] : null;  	if (genderName != null)  		kerbalData.gender = genderName == "F" ? 1 : 0;  	if (headName != null && headName != "GENERIC") {  		kerbalData.head = headName == "DEFAULT" ? defaultHead [(int)kerbal.gender] : heads.Find (h => h.name == headName);  	}  	if (suitName != null && suitName != "GENERIC")  		kerbalData.suit = suitName == "DEFAULT" ? defaultSuit : suits.Find (s => s.name == suitName);  	kerbal.gender = forceLegacyFemales ? ProtoCrewMember.Gender.Male : (ProtoCrewMember.Gender)kerbalData.gender;  }  
Magic Number,TextureReplacer,Personaliser,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Personaliser.cs,loadKerbals,The following statement contains a magic number: if (value != null) {  	string[] tokens = Util.splitConfigValue (value);  	string genderName = tokens.Length >= 1 ? tokens [0] : null;  	string headName = tokens.Length >= 2 ? tokens [1] : null;  	string suitName = tokens.Length >= 3 ? tokens [2] : null;  	if (genderName != null)  		kerbalData.gender = genderName == "F" ? 1 : 0;  	if (headName != null && headName != "GENERIC") {  		kerbalData.head = headName == "DEFAULT" ? defaultHead [(int)kerbal.gender] : heads.Find (h => h.name == headName);  	}  	if (suitName != null && suitName != "GENERIC")  		kerbalData.suit = suitName == "DEFAULT" ? defaultSuit : suits.Find (s => s.name == suitName);  	kerbal.gender = forceLegacyFemales ? ProtoCrewMember.Gender.Male : (ProtoCrewMember.Gender)kerbalData.gender;  }  
Magic Number,TextureReplacer,Personaliser,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Personaliser.cs,load,The following statement contains a magic number: foreach (GameDatabase.TextureInfo texInfo in GameDatabase.Instance.databaseTexture) {  	Texture2D texture = texInfo.texture;  	if (texture == null || !texture.name.StartsWith (Util.DIR' StringComparison.Ordinal))  		continue;  	// Add a head texture.  	if (texture.name.StartsWith (DIR_HEADS' StringComparison.Ordinal)) {  		texture.wrapMode = TextureWrapMode.Clamp;  		string headName = texture.name.Substring (DIR_HEADS.Length);  		if (headName.EndsWith ("NRM"' StringComparison.Ordinal)) {  			string baseName = headName.Substring (0' headName.Length - 3);  			Head head = heads.Find (h => h.name == baseName);  			if (head != null)  				head.headNRM = texture;  		} else if (heads.All (h => h.name != headName)) {  			Head head = new Head {  				name = headName'  				head = texture  			};  			heads.Add (head);  		}  	} // Add a suit texture.  	else if (texture.name.StartsWith (DIR_SUITS' StringComparison.Ordinal)) {  		texture.wrapMode = TextureWrapMode.Clamp;  		int lastSlash = texture.name.LastIndexOf ('/');  		int dirNameLength = lastSlash - DIR_SUITS.Length;  		string originalName = texture.name.Substring (lastSlash + 1);  		if (dirNameLength < 1) {  			Util.log ("Suit texture should be inside a subdirectory: {0}"' texture.name);  		} else {  			string dirName = texture.name.Substring (DIR_SUITS.Length' dirNameLength);  			int index;  			if (!suitDirs.TryGetValue (dirName' out index)) {  				index = suits.Count;  				suits.Add (new Suit {  					name = dirName  				});  				suitDirs.Add (dirName' index);  			}  			Suit suit = suits [index];  			if (!suit.setTexture (originalName' texture))  				Util.log ("Unknown suit texture name \"{0}\": {1}"' originalName' texture.name);  		}  	} else if (texture.name.StartsWith (DIR_DEFAULT' StringComparison.Ordinal)) {  		int lastSlash = texture.name.LastIndexOf ('/');  		string originalName = texture.name.Substring (lastSlash + 1);  		if (originalName == "kerbalHead") {  			defaultHead [0].head = texture;  			texture.wrapMode = TextureWrapMode.Clamp;  		} else if (originalName == "kerbalHeadNRM") {  			defaultHead [0].headNRM = texture;  			texture.wrapMode = TextureWrapMode.Clamp;  		} else if (originalName == "kerbalGirl_06_BaseColor") {  			defaultHead [1].head = texture;  			texture.wrapMode = TextureWrapMode.Clamp;  		} else if (originalName == "kerbalGirl_06_BaseColorNRM") {  			defaultHead [1].headNRM = texture;  			texture.wrapMode = TextureWrapMode.Clamp;  		} else if (defaultSuit.setTexture (originalName' texture) || originalName == "kerbalMain") {  			texture.wrapMode = TextureWrapMode.Clamp;  		}  	}  	lastTextureName = texture.name;  }  
Magic Number,TextureReplacer,Personaliser,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Personaliser.cs,load,The following statement contains a magic number: if (texture.name.StartsWith (DIR_HEADS' StringComparison.Ordinal)) {  	texture.wrapMode = TextureWrapMode.Clamp;  	string headName = texture.name.Substring (DIR_HEADS.Length);  	if (headName.EndsWith ("NRM"' StringComparison.Ordinal)) {  		string baseName = headName.Substring (0' headName.Length - 3);  		Head head = heads.Find (h => h.name == baseName);  		if (head != null)  			head.headNRM = texture;  	} else if (heads.All (h => h.name != headName)) {  		Head head = new Head {  			name = headName'  			head = texture  		};  		heads.Add (head);  	}  } // Add a suit texture.  else if (texture.name.StartsWith (DIR_SUITS' StringComparison.Ordinal)) {  	texture.wrapMode = TextureWrapMode.Clamp;  	int lastSlash = texture.name.LastIndexOf ('/');  	int dirNameLength = lastSlash - DIR_SUITS.Length;  	string originalName = texture.name.Substring (lastSlash + 1);  	if (dirNameLength < 1) {  		Util.log ("Suit texture should be inside a subdirectory: {0}"' texture.name);  	} else {  		string dirName = texture.name.Substring (DIR_SUITS.Length' dirNameLength);  		int index;  		if (!suitDirs.TryGetValue (dirName' out index)) {  			index = suits.Count;  			suits.Add (new Suit {  				name = dirName  			});  			suitDirs.Add (dirName' index);  		}  		Suit suit = suits [index];  		if (!suit.setTexture (originalName' texture))  			Util.log ("Unknown suit texture name \"{0}\": {1}"' originalName' texture.name);  	}  } else if (texture.name.StartsWith (DIR_DEFAULT' StringComparison.Ordinal)) {  	int lastSlash = texture.name.LastIndexOf ('/');  	string originalName = texture.name.Substring (lastSlash + 1);  	if (originalName == "kerbalHead") {  		defaultHead [0].head = texture;  		texture.wrapMode = TextureWrapMode.Clamp;  	} else if (originalName == "kerbalHeadNRM") {  		defaultHead [0].headNRM = texture;  		texture.wrapMode = TextureWrapMode.Clamp;  	} else if (originalName == "kerbalGirl_06_BaseColor") {  		defaultHead [1].head = texture;  		texture.wrapMode = TextureWrapMode.Clamp;  	} else if (originalName == "kerbalGirl_06_BaseColorNRM") {  		defaultHead [1].headNRM = texture;  		texture.wrapMode = TextureWrapMode.Clamp;  	} else if (defaultSuit.setTexture (originalName' texture) || originalName == "kerbalMain") {  		texture.wrapMode = TextureWrapMode.Clamp;  	}  }  
Magic Number,TextureReplacer,Personaliser,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Personaliser.cs,load,The following statement contains a magic number: if (headName.EndsWith ("NRM"' StringComparison.Ordinal)) {  	string baseName = headName.Substring (0' headName.Length - 3);  	Head head = heads.Find (h => h.name == baseName);  	if (head != null)  		head.headNRM = texture;  } else if (heads.All (h => h.name != headName)) {  	Head head = new Head {  		name = headName'  		head = texture  	};  	heads.Add (head);  }  
Magic Number,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,setReflectionType,The following statement contains a magic number: for (int i = 0; i < 2; ++i) {  	// Set visor texture and reflection on proto-EVA Kerbal.  	SkinnedMeshRenderer visor = evas [i].GetComponentsInChildren<SkinnedMeshRenderer> (true).First (m => m.name == "visor");  	Material material = visor.sharedMaterial;  	bool enableStatic = isVisorReflectionEnabled && reflectionType == Type.STATIC;  	// We apply visor shader for real reflections later' through TREvaModule since we don't  	// want corrupted reflections in the main menu.  	material.shader = enableStatic ? visorShader : transparentSpecularShader;  	material.SetTexture (Util.CUBE_PROPERTY' enableStatic ? staticEnvMap : null);  	material.SetColor (Util.REFLECT_COLOR_PROPERTY' visorReflectionColour);  }  
Magic Number,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,load,The following statement contains a magic number: foreach (GameDatabase.TextureInfo texInfo in GameDatabase.Instance.databaseTexture) {  	Texture2D texture = texInfo.texture;  	if (texture == null || !texture.name.StartsWith (DIR_ENVMAP' System.StringComparison.Ordinal))  		continue;  	string originalName = texture.name.Substring (DIR_ENVMAP.Length);  	switch (originalName) {  	case "PositiveX":  		envMapFaces [0] = texture;  		break;  	case "NegativeX":  		envMapFaces [1] = texture;  		break;  	case "PositiveY":  		envMapFaces [2] = texture;  		break;  	case "NegativeY":  		envMapFaces [3] = texture;  		break;  	case "PositiveZ":  		envMapFaces [4] = texture;  		break;  	case "NegativeZ":  		envMapFaces [5] = texture;  		break;  	default:  		Util.log ("Invalid enironment map texture name {0}"' texture.name);  		break;  	}  }  
Magic Number,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,load,The following statement contains a magic number: foreach (GameDatabase.TextureInfo texInfo in GameDatabase.Instance.databaseTexture) {  	Texture2D texture = texInfo.texture;  	if (texture == null || !texture.name.StartsWith (DIR_ENVMAP' System.StringComparison.Ordinal))  		continue;  	string originalName = texture.name.Substring (DIR_ENVMAP.Length);  	switch (originalName) {  	case "PositiveX":  		envMapFaces [0] = texture;  		break;  	case "NegativeX":  		envMapFaces [1] = texture;  		break;  	case "PositiveY":  		envMapFaces [2] = texture;  		break;  	case "NegativeY":  		envMapFaces [3] = texture;  		break;  	case "PositiveZ":  		envMapFaces [4] = texture;  		break;  	case "NegativeZ":  		envMapFaces [5] = texture;  		break;  	default:  		Util.log ("Invalid enironment map texture name {0}"' texture.name);  		break;  	}  }  
Magic Number,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,load,The following statement contains a magic number: foreach (GameDatabase.TextureInfo texInfo in GameDatabase.Instance.databaseTexture) {  	Texture2D texture = texInfo.texture;  	if (texture == null || !texture.name.StartsWith (DIR_ENVMAP' System.StringComparison.Ordinal))  		continue;  	string originalName = texture.name.Substring (DIR_ENVMAP.Length);  	switch (originalName) {  	case "PositiveX":  		envMapFaces [0] = texture;  		break;  	case "NegativeX":  		envMapFaces [1] = texture;  		break;  	case "PositiveY":  		envMapFaces [2] = texture;  		break;  	case "NegativeY":  		envMapFaces [3] = texture;  		break;  	case "PositiveZ":  		envMapFaces [4] = texture;  		break;  	case "NegativeZ":  		envMapFaces [5] = texture;  		break;  	default:  		Util.log ("Invalid enironment map texture name {0}"' texture.name);  		break;  	}  }  
Magic Number,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,load,The following statement contains a magic number: foreach (GameDatabase.TextureInfo texInfo in GameDatabase.Instance.databaseTexture) {  	Texture2D texture = texInfo.texture;  	if (texture == null || !texture.name.StartsWith (DIR_ENVMAP' System.StringComparison.Ordinal))  		continue;  	string originalName = texture.name.Substring (DIR_ENVMAP.Length);  	switch (originalName) {  	case "PositiveX":  		envMapFaces [0] = texture;  		break;  	case "NegativeX":  		envMapFaces [1] = texture;  		break;  	case "PositiveY":  		envMapFaces [2] = texture;  		break;  	case "NegativeY":  		envMapFaces [3] = texture;  		break;  	case "PositiveZ":  		envMapFaces [4] = texture;  		break;  	case "NegativeZ":  		envMapFaces [5] = texture;  		break;  	default:  		Util.log ("Invalid enironment map texture name {0}"' texture.name);  		break;  	}  }  
Magic Number,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,load,The following statement contains a magic number: switch (originalName) {  case "PositiveX":  	envMapFaces [0] = texture;  	break;  case "NegativeX":  	envMapFaces [1] = texture;  	break;  case "PositiveY":  	envMapFaces [2] = texture;  	break;  case "NegativeY":  	envMapFaces [3] = texture;  	break;  case "PositiveZ":  	envMapFaces [4] = texture;  	break;  case "NegativeZ":  	envMapFaces [5] = texture;  	break;  default:  	Util.log ("Invalid enironment map texture name {0}"' texture.name);  	break;  }  
Magic Number,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,load,The following statement contains a magic number: switch (originalName) {  case "PositiveX":  	envMapFaces [0] = texture;  	break;  case "NegativeX":  	envMapFaces [1] = texture;  	break;  case "PositiveY":  	envMapFaces [2] = texture;  	break;  case "NegativeY":  	envMapFaces [3] = texture;  	break;  case "PositiveZ":  	envMapFaces [4] = texture;  	break;  case "NegativeZ":  	envMapFaces [5] = texture;  	break;  default:  	Util.log ("Invalid enironment map texture name {0}"' texture.name);  	break;  }  
Magic Number,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,load,The following statement contains a magic number: switch (originalName) {  case "PositiveX":  	envMapFaces [0] = texture;  	break;  case "NegativeX":  	envMapFaces [1] = texture;  	break;  case "PositiveY":  	envMapFaces [2] = texture;  	break;  case "NegativeY":  	envMapFaces [3] = texture;  	break;  case "PositiveZ":  	envMapFaces [4] = texture;  	break;  case "NegativeZ":  	envMapFaces [5] = texture;  	break;  default:  	Util.log ("Invalid enironment map texture name {0}"' texture.name);  	break;  }  
Magic Number,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,load,The following statement contains a magic number: switch (originalName) {  case "PositiveX":  	envMapFaces [0] = texture;  	break;  case "NegativeX":  	envMapFaces [1] = texture;  	break;  case "PositiveY":  	envMapFaces [2] = texture;  	break;  case "NegativeY":  	envMapFaces [3] = texture;  	break;  case "PositiveZ":  	envMapFaces [4] = texture;  	break;  case "NegativeZ":  	envMapFaces [5] = texture;  	break;  default:  	Util.log ("Invalid enironment map texture name {0}"' texture.name);  	break;  }  
Magic Number,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,load,The following statement contains a magic number: envMapFaces [2] = texture;  
Magic Number,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,load,The following statement contains a magic number: envMapFaces [3] = texture;  
Magic Number,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,load,The following statement contains a magic number: envMapFaces [4] = texture;  
Magic Number,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,load,The following statement contains a magic number: envMapFaces [5] = texture;  
Magic Number,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,load,The following statement contains a magic number: if (envMapFaces.Contains (null)) {  	Util.log ("Some environment map faces are missing. Static reflections disabled.");  } else {  	int envMapSize = envMapFaces [0].width;  	if (envMapFaces.Any (t => t.width != envMapSize || t.height != envMapSize) || envMapFaces.Any (t => !Util.isPow2 (t.width) || !Util.isPow2 (t.height))) {  		Util.log ("Invalid environment map faces. Static reflections disabled.");  	} else {  		try {  			staticEnvMap = new Cubemap (envMapSize' TextureFormat.RGB24' true);  			staticEnvMap.hideFlags = HideFlags.HideAndDontSave;  			staticEnvMap.wrapMode = TextureWrapMode.Clamp;  			staticEnvMap.SetPixels (envMapFaces [0].GetPixels ()' CubemapFace.PositiveX);  			staticEnvMap.SetPixels (envMapFaces [1].GetPixels ()' CubemapFace.NegativeX);  			staticEnvMap.SetPixels (envMapFaces [2].GetPixels ()' CubemapFace.PositiveY);  			staticEnvMap.SetPixels (envMapFaces [3].GetPixels ()' CubemapFace.NegativeY);  			staticEnvMap.SetPixels (envMapFaces [4].GetPixels ()' CubemapFace.PositiveZ);  			staticEnvMap.SetPixels (envMapFaces [5].GetPixels ()' CubemapFace.NegativeZ);  			staticEnvMap.Apply (true' false);  			Util.log ("Static environment map cube texture generated.");  		} catch (UnityException) {  			if (staticEnvMap != null)  				Object.DestroyImmediate (staticEnvMap);  			staticEnvMap = null;  			Util.log ("Failed to set up static reflections. Textures not readable?");  		}  	}  }  
Magic Number,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,load,The following statement contains a magic number: if (envMapFaces.Contains (null)) {  	Util.log ("Some environment map faces are missing. Static reflections disabled.");  } else {  	int envMapSize = envMapFaces [0].width;  	if (envMapFaces.Any (t => t.width != envMapSize || t.height != envMapSize) || envMapFaces.Any (t => !Util.isPow2 (t.width) || !Util.isPow2 (t.height))) {  		Util.log ("Invalid environment map faces. Static reflections disabled.");  	} else {  		try {  			staticEnvMap = new Cubemap (envMapSize' TextureFormat.RGB24' true);  			staticEnvMap.hideFlags = HideFlags.HideAndDontSave;  			staticEnvMap.wrapMode = TextureWrapMode.Clamp;  			staticEnvMap.SetPixels (envMapFaces [0].GetPixels ()' CubemapFace.PositiveX);  			staticEnvMap.SetPixels (envMapFaces [1].GetPixels ()' CubemapFace.NegativeX);  			staticEnvMap.SetPixels (envMapFaces [2].GetPixels ()' CubemapFace.PositiveY);  			staticEnvMap.SetPixels (envMapFaces [3].GetPixels ()' CubemapFace.NegativeY);  			staticEnvMap.SetPixels (envMapFaces [4].GetPixels ()' CubemapFace.PositiveZ);  			staticEnvMap.SetPixels (envMapFaces [5].GetPixels ()' CubemapFace.NegativeZ);  			staticEnvMap.Apply (true' false);  			Util.log ("Static environment map cube texture generated.");  		} catch (UnityException) {  			if (staticEnvMap != null)  				Object.DestroyImmediate (staticEnvMap);  			staticEnvMap = null;  			Util.log ("Failed to set up static reflections. Textures not readable?");  		}  	}  }  
Magic Number,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,load,The following statement contains a magic number: if (envMapFaces.Contains (null)) {  	Util.log ("Some environment map faces are missing. Static reflections disabled.");  } else {  	int envMapSize = envMapFaces [0].width;  	if (envMapFaces.Any (t => t.width != envMapSize || t.height != envMapSize) || envMapFaces.Any (t => !Util.isPow2 (t.width) || !Util.isPow2 (t.height))) {  		Util.log ("Invalid environment map faces. Static reflections disabled.");  	} else {  		try {  			staticEnvMap = new Cubemap (envMapSize' TextureFormat.RGB24' true);  			staticEnvMap.hideFlags = HideFlags.HideAndDontSave;  			staticEnvMap.wrapMode = TextureWrapMode.Clamp;  			staticEnvMap.SetPixels (envMapFaces [0].GetPixels ()' CubemapFace.PositiveX);  			staticEnvMap.SetPixels (envMapFaces [1].GetPixels ()' CubemapFace.NegativeX);  			staticEnvMap.SetPixels (envMapFaces [2].GetPixels ()' CubemapFace.PositiveY);  			staticEnvMap.SetPixels (envMapFaces [3].GetPixels ()' CubemapFace.NegativeY);  			staticEnvMap.SetPixels (envMapFaces [4].GetPixels ()' CubemapFace.PositiveZ);  			staticEnvMap.SetPixels (envMapFaces [5].GetPixels ()' CubemapFace.NegativeZ);  			staticEnvMap.Apply (true' false);  			Util.log ("Static environment map cube texture generated.");  		} catch (UnityException) {  			if (staticEnvMap != null)  				Object.DestroyImmediate (staticEnvMap);  			staticEnvMap = null;  			Util.log ("Failed to set up static reflections. Textures not readable?");  		}  	}  }  
Magic Number,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,load,The following statement contains a magic number: if (envMapFaces.Contains (null)) {  	Util.log ("Some environment map faces are missing. Static reflections disabled.");  } else {  	int envMapSize = envMapFaces [0].width;  	if (envMapFaces.Any (t => t.width != envMapSize || t.height != envMapSize) || envMapFaces.Any (t => !Util.isPow2 (t.width) || !Util.isPow2 (t.height))) {  		Util.log ("Invalid environment map faces. Static reflections disabled.");  	} else {  		try {  			staticEnvMap = new Cubemap (envMapSize' TextureFormat.RGB24' true);  			staticEnvMap.hideFlags = HideFlags.HideAndDontSave;  			staticEnvMap.wrapMode = TextureWrapMode.Clamp;  			staticEnvMap.SetPixels (envMapFaces [0].GetPixels ()' CubemapFace.PositiveX);  			staticEnvMap.SetPixels (envMapFaces [1].GetPixels ()' CubemapFace.NegativeX);  			staticEnvMap.SetPixels (envMapFaces [2].GetPixels ()' CubemapFace.PositiveY);  			staticEnvMap.SetPixels (envMapFaces [3].GetPixels ()' CubemapFace.NegativeY);  			staticEnvMap.SetPixels (envMapFaces [4].GetPixels ()' CubemapFace.PositiveZ);  			staticEnvMap.SetPixels (envMapFaces [5].GetPixels ()' CubemapFace.NegativeZ);  			staticEnvMap.Apply (true' false);  			Util.log ("Static environment map cube texture generated.");  		} catch (UnityException) {  			if (staticEnvMap != null)  				Object.DestroyImmediate (staticEnvMap);  			staticEnvMap = null;  			Util.log ("Failed to set up static reflections. Textures not readable?");  		}  	}  }  
Magic Number,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,load,The following statement contains a magic number: if (envMapFaces.Any (t => t.width != envMapSize || t.height != envMapSize) || envMapFaces.Any (t => !Util.isPow2 (t.width) || !Util.isPow2 (t.height))) {  	Util.log ("Invalid environment map faces. Static reflections disabled.");  } else {  	try {  		staticEnvMap = new Cubemap (envMapSize' TextureFormat.RGB24' true);  		staticEnvMap.hideFlags = HideFlags.HideAndDontSave;  		staticEnvMap.wrapMode = TextureWrapMode.Clamp;  		staticEnvMap.SetPixels (envMapFaces [0].GetPixels ()' CubemapFace.PositiveX);  		staticEnvMap.SetPixels (envMapFaces [1].GetPixels ()' CubemapFace.NegativeX);  		staticEnvMap.SetPixels (envMapFaces [2].GetPixels ()' CubemapFace.PositiveY);  		staticEnvMap.SetPixels (envMapFaces [3].GetPixels ()' CubemapFace.NegativeY);  		staticEnvMap.SetPixels (envMapFaces [4].GetPixels ()' CubemapFace.PositiveZ);  		staticEnvMap.SetPixels (envMapFaces [5].GetPixels ()' CubemapFace.NegativeZ);  		staticEnvMap.Apply (true' false);  		Util.log ("Static environment map cube texture generated.");  	} catch (UnityException) {  		if (staticEnvMap != null)  			Object.DestroyImmediate (staticEnvMap);  		staticEnvMap = null;  		Util.log ("Failed to set up static reflections. Textures not readable?");  	}  }  
Magic Number,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,load,The following statement contains a magic number: if (envMapFaces.Any (t => t.width != envMapSize || t.height != envMapSize) || envMapFaces.Any (t => !Util.isPow2 (t.width) || !Util.isPow2 (t.height))) {  	Util.log ("Invalid environment map faces. Static reflections disabled.");  } else {  	try {  		staticEnvMap = new Cubemap (envMapSize' TextureFormat.RGB24' true);  		staticEnvMap.hideFlags = HideFlags.HideAndDontSave;  		staticEnvMap.wrapMode = TextureWrapMode.Clamp;  		staticEnvMap.SetPixels (envMapFaces [0].GetPixels ()' CubemapFace.PositiveX);  		staticEnvMap.SetPixels (envMapFaces [1].GetPixels ()' CubemapFace.NegativeX);  		staticEnvMap.SetPixels (envMapFaces [2].GetPixels ()' CubemapFace.PositiveY);  		staticEnvMap.SetPixels (envMapFaces [3].GetPixels ()' CubemapFace.NegativeY);  		staticEnvMap.SetPixels (envMapFaces [4].GetPixels ()' CubemapFace.PositiveZ);  		staticEnvMap.SetPixels (envMapFaces [5].GetPixels ()' CubemapFace.NegativeZ);  		staticEnvMap.Apply (true' false);  		Util.log ("Static environment map cube texture generated.");  	} catch (UnityException) {  		if (staticEnvMap != null)  			Object.DestroyImmediate (staticEnvMap);  		staticEnvMap = null;  		Util.log ("Failed to set up static reflections. Textures not readable?");  	}  }  
Magic Number,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,load,The following statement contains a magic number: if (envMapFaces.Any (t => t.width != envMapSize || t.height != envMapSize) || envMapFaces.Any (t => !Util.isPow2 (t.width) || !Util.isPow2 (t.height))) {  	Util.log ("Invalid environment map faces. Static reflections disabled.");  } else {  	try {  		staticEnvMap = new Cubemap (envMapSize' TextureFormat.RGB24' true);  		staticEnvMap.hideFlags = HideFlags.HideAndDontSave;  		staticEnvMap.wrapMode = TextureWrapMode.Clamp;  		staticEnvMap.SetPixels (envMapFaces [0].GetPixels ()' CubemapFace.PositiveX);  		staticEnvMap.SetPixels (envMapFaces [1].GetPixels ()' CubemapFace.NegativeX);  		staticEnvMap.SetPixels (envMapFaces [2].GetPixels ()' CubemapFace.PositiveY);  		staticEnvMap.SetPixels (envMapFaces [3].GetPixels ()' CubemapFace.NegativeY);  		staticEnvMap.SetPixels (envMapFaces [4].GetPixels ()' CubemapFace.PositiveZ);  		staticEnvMap.SetPixels (envMapFaces [5].GetPixels ()' CubemapFace.NegativeZ);  		staticEnvMap.Apply (true' false);  		Util.log ("Static environment map cube texture generated.");  	} catch (UnityException) {  		if (staticEnvMap != null)  			Object.DestroyImmediate (staticEnvMap);  		staticEnvMap = null;  		Util.log ("Failed to set up static reflections. Textures not readable?");  	}  }  
Magic Number,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,load,The following statement contains a magic number: if (envMapFaces.Any (t => t.width != envMapSize || t.height != envMapSize) || envMapFaces.Any (t => !Util.isPow2 (t.width) || !Util.isPow2 (t.height))) {  	Util.log ("Invalid environment map faces. Static reflections disabled.");  } else {  	try {  		staticEnvMap = new Cubemap (envMapSize' TextureFormat.RGB24' true);  		staticEnvMap.hideFlags = HideFlags.HideAndDontSave;  		staticEnvMap.wrapMode = TextureWrapMode.Clamp;  		staticEnvMap.SetPixels (envMapFaces [0].GetPixels ()' CubemapFace.PositiveX);  		staticEnvMap.SetPixels (envMapFaces [1].GetPixels ()' CubemapFace.NegativeX);  		staticEnvMap.SetPixels (envMapFaces [2].GetPixels ()' CubemapFace.PositiveY);  		staticEnvMap.SetPixels (envMapFaces [3].GetPixels ()' CubemapFace.NegativeY);  		staticEnvMap.SetPixels (envMapFaces [4].GetPixels ()' CubemapFace.PositiveZ);  		staticEnvMap.SetPixels (envMapFaces [5].GetPixels ()' CubemapFace.NegativeZ);  		staticEnvMap.Apply (true' false);  		Util.log ("Static environment map cube texture generated.");  	} catch (UnityException) {  		if (staticEnvMap != null)  			Object.DestroyImmediate (staticEnvMap);  		staticEnvMap = null;  		Util.log ("Failed to set up static reflections. Textures not readable?");  	}  }  
Magic Number,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,load,The following statement contains a magic number: try {  	staticEnvMap = new Cubemap (envMapSize' TextureFormat.RGB24' true);  	staticEnvMap.hideFlags = HideFlags.HideAndDontSave;  	staticEnvMap.wrapMode = TextureWrapMode.Clamp;  	staticEnvMap.SetPixels (envMapFaces [0].GetPixels ()' CubemapFace.PositiveX);  	staticEnvMap.SetPixels (envMapFaces [1].GetPixels ()' CubemapFace.NegativeX);  	staticEnvMap.SetPixels (envMapFaces [2].GetPixels ()' CubemapFace.PositiveY);  	staticEnvMap.SetPixels (envMapFaces [3].GetPixels ()' CubemapFace.NegativeY);  	staticEnvMap.SetPixels (envMapFaces [4].GetPixels ()' CubemapFace.PositiveZ);  	staticEnvMap.SetPixels (envMapFaces [5].GetPixels ()' CubemapFace.NegativeZ);  	staticEnvMap.Apply (true' false);  	Util.log ("Static environment map cube texture generated.");  } catch (UnityException) {  	if (staticEnvMap != null)  		Object.DestroyImmediate (staticEnvMap);  	staticEnvMap = null;  	Util.log ("Failed to set up static reflections. Textures not readable?");  }  
Magic Number,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,load,The following statement contains a magic number: try {  	staticEnvMap = new Cubemap (envMapSize' TextureFormat.RGB24' true);  	staticEnvMap.hideFlags = HideFlags.HideAndDontSave;  	staticEnvMap.wrapMode = TextureWrapMode.Clamp;  	staticEnvMap.SetPixels (envMapFaces [0].GetPixels ()' CubemapFace.PositiveX);  	staticEnvMap.SetPixels (envMapFaces [1].GetPixels ()' CubemapFace.NegativeX);  	staticEnvMap.SetPixels (envMapFaces [2].GetPixels ()' CubemapFace.PositiveY);  	staticEnvMap.SetPixels (envMapFaces [3].GetPixels ()' CubemapFace.NegativeY);  	staticEnvMap.SetPixels (envMapFaces [4].GetPixels ()' CubemapFace.PositiveZ);  	staticEnvMap.SetPixels (envMapFaces [5].GetPixels ()' CubemapFace.NegativeZ);  	staticEnvMap.Apply (true' false);  	Util.log ("Static environment map cube texture generated.");  } catch (UnityException) {  	if (staticEnvMap != null)  		Object.DestroyImmediate (staticEnvMap);  	staticEnvMap = null;  	Util.log ("Failed to set up static reflections. Textures not readable?");  }  
Magic Number,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,load,The following statement contains a magic number: try {  	staticEnvMap = new Cubemap (envMapSize' TextureFormat.RGB24' true);  	staticEnvMap.hideFlags = HideFlags.HideAndDontSave;  	staticEnvMap.wrapMode = TextureWrapMode.Clamp;  	staticEnvMap.SetPixels (envMapFaces [0].GetPixels ()' CubemapFace.PositiveX);  	staticEnvMap.SetPixels (envMapFaces [1].GetPixels ()' CubemapFace.NegativeX);  	staticEnvMap.SetPixels (envMapFaces [2].GetPixels ()' CubemapFace.PositiveY);  	staticEnvMap.SetPixels (envMapFaces [3].GetPixels ()' CubemapFace.NegativeY);  	staticEnvMap.SetPixels (envMapFaces [4].GetPixels ()' CubemapFace.PositiveZ);  	staticEnvMap.SetPixels (envMapFaces [5].GetPixels ()' CubemapFace.NegativeZ);  	staticEnvMap.Apply (true' false);  	Util.log ("Static environment map cube texture generated.");  } catch (UnityException) {  	if (staticEnvMap != null)  		Object.DestroyImmediate (staticEnvMap);  	staticEnvMap = null;  	Util.log ("Failed to set up static reflections. Textures not readable?");  }  
Magic Number,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,load,The following statement contains a magic number: try {  	staticEnvMap = new Cubemap (envMapSize' TextureFormat.RGB24' true);  	staticEnvMap.hideFlags = HideFlags.HideAndDontSave;  	staticEnvMap.wrapMode = TextureWrapMode.Clamp;  	staticEnvMap.SetPixels (envMapFaces [0].GetPixels ()' CubemapFace.PositiveX);  	staticEnvMap.SetPixels (envMapFaces [1].GetPixels ()' CubemapFace.NegativeX);  	staticEnvMap.SetPixels (envMapFaces [2].GetPixels ()' CubemapFace.PositiveY);  	staticEnvMap.SetPixels (envMapFaces [3].GetPixels ()' CubemapFace.NegativeY);  	staticEnvMap.SetPixels (envMapFaces [4].GetPixels ()' CubemapFace.PositiveZ);  	staticEnvMap.SetPixels (envMapFaces [5].GetPixels ()' CubemapFace.NegativeZ);  	staticEnvMap.Apply (true' false);  	Util.log ("Static environment map cube texture generated.");  } catch (UnityException) {  	if (staticEnvMap != null)  		Object.DestroyImmediate (staticEnvMap);  	staticEnvMap = null;  	Util.log ("Failed to set up static reflections. Textures not readable?");  }  
Magic Number,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,load,The following statement contains a magic number: staticEnvMap.SetPixels (envMapFaces [2].GetPixels ()' CubemapFace.PositiveY);  
Magic Number,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,load,The following statement contains a magic number: staticEnvMap.SetPixels (envMapFaces [3].GetPixels ()' CubemapFace.NegativeY);  
Magic Number,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,load,The following statement contains a magic number: staticEnvMap.SetPixels (envMapFaces [4].GetPixels ()' CubemapFace.PositiveZ);  
Magic Number,TextureReplacer,Reflections,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Reflections.cs,load,The following statement contains a magic number: staticEnvMap.SetPixels (envMapFaces [5].GetPixels ()' CubemapFace.NegativeZ);  
Magic Number,TextureReplacer,Replacer,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Replacer.cs,load,The following statement contains a magic number: for (int i = 0; i < 2; ++i) {  	foreach (SkinnedMeshRenderer smr in maleMeshes [i]) {  		// Many meshes share material' so it suffices to enumerate only one mesh for each material.  		switch (smr.name) {  		case "headMesh01":  			// Replace with bump-mapped shader so normal maps for heads will work.  			smr.sharedMaterial.shader = headShader;  			if (headNormalMaps [0] != null)  				smr.sharedMaterial.SetTexture (Util.BUMPMAP_PROPERTY' headNormalMaps [0]);  			headMaterial = smr.sharedMaterial;  			break;  		case "body01":  			// Also replace shader on EVA suits to match the one on IVA suits and to enable heat effects.  			smr.sharedMaterial.shader = suitShader;  			suitMaterials [i] = smr.sharedMaterial;  			break;  		case "helmet":  			// Also replace shader on EVA suits to match the one on IVA suits and to enable heat effects.  			smr.sharedMaterial.shader = suitShader;  			helmetMaterials [i] = smr.sharedMaterial;  			break;  		case "jetpack_base01":  			// Also replace shader on EVA suits to match the one on IVA suits and to enable heat effects.  			smr.sharedMaterial.shader = suitShader;  			jetpackMaterial = smr.sharedMaterial;  			break;  		case "visor":  			if (smr.transform.root == maleIva.transform && ivaVisorTexture != null) {  				smr.sharedMaterial.mainTexture = ivaVisorTexture;  				smr.sharedMaterial.color = Color.white;  			} else if (smr.transform.root == maleEva.transform && evaVisorTexture != null) {  				smr.sharedMaterial.mainTexture = evaVisorTexture;  				smr.sharedMaterial.color = Color.white;  			}  			visorMaterials [i] = smr.sharedMaterial;  			break;  		}  	}  }  
Magic Number,TextureReplacer,Replacer,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Replacer.cs,load,The following statement contains a magic number: for (int i = 0; i < 2; ++i) {  	foreach (SkinnedMeshRenderer smr in femaleMeshes [i]) {  		// Here we must enumarate all meshes wherever we are replacing the material.  		switch (smr.name) {  		case "headMesh":  			smr.sharedMaterial.shader = headShader;  			if (headNormalMaps [1] != null)  				smr.sharedMaterial.SetTexture (Util.BUMPMAP_PROPERTY' headNormalMaps [1]);  			break;  		case "mesh_female_kerbalAstronaut01_kerbalGirl_mesh_upTeeth01":  		case "mesh_female_kerbalAstronaut01_kerbalGirl_mesh_downTeeth01":  		case "upTeeth01":  		case "downTeeth01":  			// Females don't have textured teeth' they use the same material as for the eyeballs. Extending female  			// head material/texture to their teeth is not possible since teeth overlap with some ponytail subtexture.  			// However' female teeth map to the same texture coordinates as male teeth' so we fix this by applying  			// male head & teeth material for female teeth.  			smr.sharedMaterial = headMaterial;  			break;  		case "mesh_female_kerbalAstronaut01_body01":  		case "body01":  			smr.sharedMaterial = suitMaterials [i];  			break;  		case "mesh_female_kerbalAstronaut01_helmet":  		case "helmet":  			smr.sharedMaterial = helmetMaterials [i];  			break;  		case "jetpack_base01":  			smr.sharedMaterial = jetpackMaterial;  			break;  		case "mesh_female_kerbalAstronaut01_visor":  		case "visor":  			smr.sharedMaterial = visorMaterials [i];  			break;  		}  	}  }  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: GUILayout.BeginVertical (GUILayout.Width (200));  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: GUILayout.Space (10);  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: if (head != null) {  	GUILayout.Box (head.head' GUILayout.Width (200)' GUILayout.Height (200));  	GUILayout.Label (head.name);  }  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: if (head != null) {  	GUILayout.Box (head.head' GUILayout.Width (200)' GUILayout.Height (200));  	GUILayout.Label (head.name);  }  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: GUILayout.Box (head.head' GUILayout.Width (200)' GUILayout.Height (200));  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: GUILayout.Box (head.head' GUILayout.Width (200)' GUILayout.Height (200));  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: if (suit != null) {  	Texture2D suitTex = suit == defaultSuit && kerbalData != null && kerbalData.isVeteran ? defaultSuit.suitVeteran : (suit.suit ?? defaultSuit.suit);  	Texture2D helmetTex = suit.helmet ?? defaultSuit.helmet;  	Texture2D evaSuitTex = suit.evaSuit ?? defaultSuit.evaSuit;  	Texture2D evaHelmetTex = suit.evaHelmet ?? defaultSuit.evaHelmet;  	GUILayout.BeginHorizontal ();  	GUILayout.Box (suitTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.Space (10);  	GUILayout.Box (helmetTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.EndHorizontal ();  	GUILayout.Space (10);  	GUILayout.BeginHorizontal ();  	GUILayout.Box (evaSuitTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.Space (10);  	GUILayout.Box (evaHelmetTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.EndHorizontal ();  	GUILayout.Label (suit.name);  }  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: if (suit != null) {  	Texture2D suitTex = suit == defaultSuit && kerbalData != null && kerbalData.isVeteran ? defaultSuit.suitVeteran : (suit.suit ?? defaultSuit.suit);  	Texture2D helmetTex = suit.helmet ?? defaultSuit.helmet;  	Texture2D evaSuitTex = suit.evaSuit ?? defaultSuit.evaSuit;  	Texture2D evaHelmetTex = suit.evaHelmet ?? defaultSuit.evaHelmet;  	GUILayout.BeginHorizontal ();  	GUILayout.Box (suitTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.Space (10);  	GUILayout.Box (helmetTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.EndHorizontal ();  	GUILayout.Space (10);  	GUILayout.BeginHorizontal ();  	GUILayout.Box (evaSuitTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.Space (10);  	GUILayout.Box (evaHelmetTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.EndHorizontal ();  	GUILayout.Label (suit.name);  }  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: if (suit != null) {  	Texture2D suitTex = suit == defaultSuit && kerbalData != null && kerbalData.isVeteran ? defaultSuit.suitVeteran : (suit.suit ?? defaultSuit.suit);  	Texture2D helmetTex = suit.helmet ?? defaultSuit.helmet;  	Texture2D evaSuitTex = suit.evaSuit ?? defaultSuit.evaSuit;  	Texture2D evaHelmetTex = suit.evaHelmet ?? defaultSuit.evaHelmet;  	GUILayout.BeginHorizontal ();  	GUILayout.Box (suitTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.Space (10);  	GUILayout.Box (helmetTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.EndHorizontal ();  	GUILayout.Space (10);  	GUILayout.BeginHorizontal ();  	GUILayout.Box (evaSuitTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.Space (10);  	GUILayout.Box (evaHelmetTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.EndHorizontal ();  	GUILayout.Label (suit.name);  }  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: if (suit != null) {  	Texture2D suitTex = suit == defaultSuit && kerbalData != null && kerbalData.isVeteran ? defaultSuit.suitVeteran : (suit.suit ?? defaultSuit.suit);  	Texture2D helmetTex = suit.helmet ?? defaultSuit.helmet;  	Texture2D evaSuitTex = suit.evaSuit ?? defaultSuit.evaSuit;  	Texture2D evaHelmetTex = suit.evaHelmet ?? defaultSuit.evaHelmet;  	GUILayout.BeginHorizontal ();  	GUILayout.Box (suitTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.Space (10);  	GUILayout.Box (helmetTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.EndHorizontal ();  	GUILayout.Space (10);  	GUILayout.BeginHorizontal ();  	GUILayout.Box (evaSuitTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.Space (10);  	GUILayout.Box (evaHelmetTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.EndHorizontal ();  	GUILayout.Label (suit.name);  }  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: if (suit != null) {  	Texture2D suitTex = suit == defaultSuit && kerbalData != null && kerbalData.isVeteran ? defaultSuit.suitVeteran : (suit.suit ?? defaultSuit.suit);  	Texture2D helmetTex = suit.helmet ?? defaultSuit.helmet;  	Texture2D evaSuitTex = suit.evaSuit ?? defaultSuit.evaSuit;  	Texture2D evaHelmetTex = suit.evaHelmet ?? defaultSuit.evaHelmet;  	GUILayout.BeginHorizontal ();  	GUILayout.Box (suitTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.Space (10);  	GUILayout.Box (helmetTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.EndHorizontal ();  	GUILayout.Space (10);  	GUILayout.BeginHorizontal ();  	GUILayout.Box (evaSuitTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.Space (10);  	GUILayout.Box (evaHelmetTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.EndHorizontal ();  	GUILayout.Label (suit.name);  }  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: if (suit != null) {  	Texture2D suitTex = suit == defaultSuit && kerbalData != null && kerbalData.isVeteran ? defaultSuit.suitVeteran : (suit.suit ?? defaultSuit.suit);  	Texture2D helmetTex = suit.helmet ?? defaultSuit.helmet;  	Texture2D evaSuitTex = suit.evaSuit ?? defaultSuit.evaSuit;  	Texture2D evaHelmetTex = suit.evaHelmet ?? defaultSuit.evaHelmet;  	GUILayout.BeginHorizontal ();  	GUILayout.Box (suitTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.Space (10);  	GUILayout.Box (helmetTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.EndHorizontal ();  	GUILayout.Space (10);  	GUILayout.BeginHorizontal ();  	GUILayout.Box (evaSuitTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.Space (10);  	GUILayout.Box (evaHelmetTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.EndHorizontal ();  	GUILayout.Label (suit.name);  }  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: if (suit != null) {  	Texture2D suitTex = suit == defaultSuit && kerbalData != null && kerbalData.isVeteran ? defaultSuit.suitVeteran : (suit.suit ?? defaultSuit.suit);  	Texture2D helmetTex = suit.helmet ?? defaultSuit.helmet;  	Texture2D evaSuitTex = suit.evaSuit ?? defaultSuit.evaSuit;  	Texture2D evaHelmetTex = suit.evaHelmet ?? defaultSuit.evaHelmet;  	GUILayout.BeginHorizontal ();  	GUILayout.Box (suitTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.Space (10);  	GUILayout.Box (helmetTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.EndHorizontal ();  	GUILayout.Space (10);  	GUILayout.BeginHorizontal ();  	GUILayout.Box (evaSuitTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.Space (10);  	GUILayout.Box (evaHelmetTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.EndHorizontal ();  	GUILayout.Label (suit.name);  }  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: if (suit != null) {  	Texture2D suitTex = suit == defaultSuit && kerbalData != null && kerbalData.isVeteran ? defaultSuit.suitVeteran : (suit.suit ?? defaultSuit.suit);  	Texture2D helmetTex = suit.helmet ?? defaultSuit.helmet;  	Texture2D evaSuitTex = suit.evaSuit ?? defaultSuit.evaSuit;  	Texture2D evaHelmetTex = suit.evaHelmet ?? defaultSuit.evaHelmet;  	GUILayout.BeginHorizontal ();  	GUILayout.Box (suitTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.Space (10);  	GUILayout.Box (helmetTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.EndHorizontal ();  	GUILayout.Space (10);  	GUILayout.BeginHorizontal ();  	GUILayout.Box (evaSuitTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.Space (10);  	GUILayout.Box (evaHelmetTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.EndHorizontal ();  	GUILayout.Label (suit.name);  }  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: if (suit != null) {  	Texture2D suitTex = suit == defaultSuit && kerbalData != null && kerbalData.isVeteran ? defaultSuit.suitVeteran : (suit.suit ?? defaultSuit.suit);  	Texture2D helmetTex = suit.helmet ?? defaultSuit.helmet;  	Texture2D evaSuitTex = suit.evaSuit ?? defaultSuit.evaSuit;  	Texture2D evaHelmetTex = suit.evaHelmet ?? defaultSuit.evaHelmet;  	GUILayout.BeginHorizontal ();  	GUILayout.Box (suitTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.Space (10);  	GUILayout.Box (helmetTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.EndHorizontal ();  	GUILayout.Space (10);  	GUILayout.BeginHorizontal ();  	GUILayout.Box (evaSuitTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.Space (10);  	GUILayout.Box (evaHelmetTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.EndHorizontal ();  	GUILayout.Label (suit.name);  }  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: if (suit != null) {  	Texture2D suitTex = suit == defaultSuit && kerbalData != null && kerbalData.isVeteran ? defaultSuit.suitVeteran : (suit.suit ?? defaultSuit.suit);  	Texture2D helmetTex = suit.helmet ?? defaultSuit.helmet;  	Texture2D evaSuitTex = suit.evaSuit ?? defaultSuit.evaSuit;  	Texture2D evaHelmetTex = suit.evaHelmet ?? defaultSuit.evaHelmet;  	GUILayout.BeginHorizontal ();  	GUILayout.Box (suitTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.Space (10);  	GUILayout.Box (helmetTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.EndHorizontal ();  	GUILayout.Space (10);  	GUILayout.BeginHorizontal ();  	GUILayout.Box (evaSuitTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.Space (10);  	GUILayout.Box (evaHelmetTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.EndHorizontal ();  	GUILayout.Label (suit.name);  }  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: if (suit != null) {  	Texture2D suitTex = suit == defaultSuit && kerbalData != null && kerbalData.isVeteran ? defaultSuit.suitVeteran : (suit.suit ?? defaultSuit.suit);  	Texture2D helmetTex = suit.helmet ?? defaultSuit.helmet;  	Texture2D evaSuitTex = suit.evaSuit ?? defaultSuit.evaSuit;  	Texture2D evaHelmetTex = suit.evaHelmet ?? defaultSuit.evaHelmet;  	GUILayout.BeginHorizontal ();  	GUILayout.Box (suitTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.Space (10);  	GUILayout.Box (helmetTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.EndHorizontal ();  	GUILayout.Space (10);  	GUILayout.BeginHorizontal ();  	GUILayout.Box (evaSuitTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.Space (10);  	GUILayout.Box (evaHelmetTex' GUILayout.Width (100)' GUILayout.Height (100));  	GUILayout.EndHorizontal ();  	GUILayout.Label (suit.name);  }  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: GUILayout.Box (suitTex' GUILayout.Width (100)' GUILayout.Height (100));  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: GUILayout.Box (suitTex' GUILayout.Width (100)' GUILayout.Height (100));  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: GUILayout.Space (10);  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: GUILayout.Box (helmetTex' GUILayout.Width (100)' GUILayout.Height (100));  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: GUILayout.Box (helmetTex' GUILayout.Width (100)' GUILayout.Height (100));  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: GUILayout.Space (10);  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: GUILayout.Box (evaSuitTex' GUILayout.Width (100)' GUILayout.Height (100));  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: GUILayout.Box (evaSuitTex' GUILayout.Width (100)' GUILayout.Height (100));  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: GUILayout.Space (10);  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: GUILayout.Box (evaHelmetTex' GUILayout.Width (100)' GUILayout.Height (100));  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: GUILayout.Box (evaHelmetTex' GUILayout.Width (100)' GUILayout.Height (100));  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: GUILayout.BeginVertical (GUILayout.Width (120));  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: if (kerbalData != null || selectedClass != null) {  	GUILayout.Space (130);  	GUILayout.BeginHorizontal ();  	GUI.enabled = personaliser.suits.Count != 0;  	if (GUILayout.Button ("<")) {  		suitIndex = suitIndex == -1 ? 0 : suitIndex;  		suitIndex = (personaliser.suits.Count + suitIndex - 1) % personaliser.suits.Count;  		if (kerbalData != null) {  			kerbalData.suit = personaliser.suits [suitIndex];  			kerbalData.cabinSuit = null;  		} else {  			personaliser.classSuits [selectedClass] = personaliser.suits [suitIndex];  		}  	}  	if (GUILayout.Button (">")) {  		suitIndex = (suitIndex + 1) % personaliser.suits.Count;  		if (kerbalData != null) {  			kerbalData.suit = personaliser.suits [suitIndex];  			kerbalData.cabinSuit = null;  		} else {  			personaliser.classSuits [selectedClass] = personaliser.suits [suitIndex];  		}  	}  	GUI.enabled = true;  	GUILayout.EndHorizontal ();  	GUI.color = suit == defaultSuit && (kerbalData == null || kerbalData.suit != null) ? SELECTED_COLOUR : Color.white;  	if (GUILayout.Button ("Default")) {  		if (kerbalData != null) {  			kerbalData.suit = defaultSuit;  			kerbalData.cabinSuit = null;  		} else {  			personaliser.classSuits [selectedClass] = defaultSuit;  		}  	}  	GUI.color = suit == null || (kerbalData != null && kerbalData.suit == null) ? SELECTED_COLOUR : Color.white;  	if (GUILayout.Button ("Unset/Generic")) {  		if (kerbalData != null) {  			kerbalData.suit = null;  			kerbalData.cabinSuit = null;  		} else {  			personaliser.classSuits [selectedClass] = null;  		}  	}  	GUI.color = Color.white;  }  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: GUILayout.Space (130);  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: GUILayout.Space (10);  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: GUILayout.Label ("Reflections"' GUILayout.Width (120));  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: reflectionType = (Reflections.Type)GUILayout.SelectionGrid ((int)reflectionType' REFLECTION_TYPES' 3);  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,windowHandler,The following statement contains a magic number: GUI.DragWindow (new Rect (0' 0' Screen.width' 30));  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,OnGUI,The following statement contains a magic number: if (isEnabled) {  	GUI.skin = HighLogic.Skin;  	windowRect = GUILayout.Window (WINDOW_ID' windowRect' windowHandler' "TextureReplacer");  	windowRect.x = Math.Max (0' Math.Min (Screen.width - 30' windowRect.x));  	windowRect.y = Math.Max (0' Math.Min (Screen.height - 30' windowRect.y));  }  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,OnGUI,The following statement contains a magic number: if (isEnabled) {  	GUI.skin = HighLogic.Skin;  	windowRect = GUILayout.Window (WINDOW_ID' windowRect' windowHandler' "TextureReplacer");  	windowRect.x = Math.Max (0' Math.Min (Screen.width - 30' windowRect.x));  	windowRect.y = Math.Max (0' Math.Min (Screen.height - 30' windowRect.y));  }  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,OnGUI,The following statement contains a magic number: windowRect.x = Math.Max (0' Math.Min (Screen.width - 30' windowRect.x));  
Magic Number,TextureReplacer,TRGui,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\TRGui.cs,OnGUI,The following statement contains a magic number: windowRect.y = Math.Max (0' Math.Min (Screen.height - 30' windowRect.y));  
Magic Number,TextureReplacer,Util,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Util.cs,parse,The following statement contains a magic number: if (name != null) {  	string[] components = splitConfigValue (name);  	if (components.Length >= 3) {  		float.TryParse (components [0]' out variable.r);  		float.TryParse (components [1]' out variable.g);  		float.TryParse (components [2]' out variable.b);  	}  	if (components.Length >= 4)  		float.TryParse (components [3]' out variable.a);  }  
Magic Number,TextureReplacer,Util,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Util.cs,parse,The following statement contains a magic number: if (name != null) {  	string[] components = splitConfigValue (name);  	if (components.Length >= 3) {  		float.TryParse (components [0]' out variable.r);  		float.TryParse (components [1]' out variable.g);  		float.TryParse (components [2]' out variable.b);  	}  	if (components.Length >= 4)  		float.TryParse (components [3]' out variable.a);  }  
Magic Number,TextureReplacer,Util,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Util.cs,parse,The following statement contains a magic number: if (name != null) {  	string[] components = splitConfigValue (name);  	if (components.Length >= 3) {  		float.TryParse (components [0]' out variable.r);  		float.TryParse (components [1]' out variable.g);  		float.TryParse (components [2]' out variable.b);  	}  	if (components.Length >= 4)  		float.TryParse (components [3]' out variable.a);  }  
Magic Number,TextureReplacer,Util,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Util.cs,parse,The following statement contains a magic number: if (name != null) {  	string[] components = splitConfigValue (name);  	if (components.Length >= 3) {  		float.TryParse (components [0]' out variable.r);  		float.TryParse (components [1]' out variable.g);  		float.TryParse (components [2]' out variable.b);  	}  	if (components.Length >= 4)  		float.TryParse (components [3]' out variable.a);  }  
Magic Number,TextureReplacer,Util,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Util.cs,parse,The following statement contains a magic number: if (components.Length >= 3) {  	float.TryParse (components [0]' out variable.r);  	float.TryParse (components [1]' out variable.g);  	float.TryParse (components [2]' out variable.b);  }  
Magic Number,TextureReplacer,Util,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Util.cs,parse,The following statement contains a magic number: if (components.Length >= 3) {  	float.TryParse (components [0]' out variable.r);  	float.TryParse (components [1]' out variable.g);  	float.TryParse (components [2]' out variable.b);  }  
Magic Number,TextureReplacer,Util,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Util.cs,parse,The following statement contains a magic number: float.TryParse (components [2]' out variable.b);  
Magic Number,TextureReplacer,Util,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Util.cs,parse,The following statement contains a magic number: if (components.Length >= 4)  	float.TryParse (components [3]' out variable.a);  
Magic Number,TextureReplacer,Util,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Util.cs,parse,The following statement contains a magic number: if (components.Length >= 4)  	float.TryParse (components [3]' out variable.a);  
Magic Number,TextureReplacer,Util,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Util.cs,parse,The following statement contains a magic number: float.TryParse (components [3]' out variable.a);  
Missing Default,TextureReplacer,Replacer,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Replacer.cs,load,The following switch statement is missing a default case: switch (smr.name) {  case "headMesh01":  	// Replace with bump-mapped shader so normal maps for heads will work.  	smr.sharedMaterial.shader = headShader;  	if (headNormalMaps [0] != null)  		smr.sharedMaterial.SetTexture (Util.BUMPMAP_PROPERTY' headNormalMaps [0]);  	headMaterial = smr.sharedMaterial;  	break;  case "body01":  	// Also replace shader on EVA suits to match the one on IVA suits and to enable heat effects.  	smr.sharedMaterial.shader = suitShader;  	suitMaterials [i] = smr.sharedMaterial;  	break;  case "helmet":  	// Also replace shader on EVA suits to match the one on IVA suits and to enable heat effects.  	smr.sharedMaterial.shader = suitShader;  	helmetMaterials [i] = smr.sharedMaterial;  	break;  case "jetpack_base01":  	// Also replace shader on EVA suits to match the one on IVA suits and to enable heat effects.  	smr.sharedMaterial.shader = suitShader;  	jetpackMaterial = smr.sharedMaterial;  	break;  case "visor":  	if (smr.transform.root == maleIva.transform && ivaVisorTexture != null) {  		smr.sharedMaterial.mainTexture = ivaVisorTexture;  		smr.sharedMaterial.color = Color.white;  	} else if (smr.transform.root == maleEva.transform && evaVisorTexture != null) {  		smr.sharedMaterial.mainTexture = evaVisorTexture;  		smr.sharedMaterial.color = Color.white;  	}  	visorMaterials [i] = smr.sharedMaterial;  	break;  }  
Missing Default,TextureReplacer,Replacer,F:\newReposMay17\ducakar_TextureReplacer\TextureReplacer\Replacer.cs,load,The following switch statement is missing a default case: switch (smr.name) {  case "headMesh":  	smr.sharedMaterial.shader = headShader;  	if (headNormalMaps [1] != null)  		smr.sharedMaterial.SetTexture (Util.BUMPMAP_PROPERTY' headNormalMaps [1]);  	break;  case "mesh_female_kerbalAstronaut01_kerbalGirl_mesh_upTeeth01":  case "mesh_female_kerbalAstronaut01_kerbalGirl_mesh_downTeeth01":  case "upTeeth01":  case "downTeeth01":  	// Females don't have textured teeth' they use the same material as for the eyeballs. Extending female  	// head material/texture to their teeth is not possible since teeth overlap with some ponytail subtexture.  	// However' female teeth map to the same texture coordinates as male teeth' so we fix this by applying  	// male head & teeth material for female teeth.  	smr.sharedMaterial = headMaterial;  	break;  case "mesh_female_kerbalAstronaut01_body01":  case "body01":  	smr.sharedMaterial = suitMaterials [i];  	break;  case "mesh_female_kerbalAstronaut01_helmet":  case "helmet":  	smr.sharedMaterial = helmetMaterials [i];  	break;  case "jetpack_base01":  	smr.sharedMaterial = jetpackMaterial;  	break;  case "mesh_female_kerbalAstronaut01_visor":  case "visor":  	smr.sharedMaterial = visorMaterials [i];  	break;  }  
