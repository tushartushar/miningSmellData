Implementation smell,Namespace,Class,File,Method,Description
Long Method,Ds3Examples,Ds3ExampleClient,C:\repos\SpectraLogic_ds3_net_sdk\Ds3Examples\Ds3ExampleClient.cs,Main,The method has 139 lines of code.
Complex Method,Ds3Examples,Ds3ExampleClient,C:\repos\SpectraLogic_ds3_net_sdk\Ds3Examples\Ds3ExampleClient.cs,Main,Cyclomatic complexity of the method is 12
Long Parameter List,Ds3Examples,Ds3ExampleClient,C:\repos\SpectraLogic_ds3_net_sdk\Ds3Examples\Ds3ExampleClient.cs,runPutWithChecksum,The method has 5 parameters.
Long Parameter List,Ds3Examples,Ds3ExampleClient,C:\repos\SpectraLogic_ds3_net_sdk\Ds3Examples\Ds3ExampleClient.cs,runGetObjects,The method has 6 parameters.
Long Parameter List,Ds3Examples,Ds3ExampleClient,C:\repos\SpectraLogic_ds3_net_sdk\Ds3Examples\Ds3ExampleClient.cs,GetObjects,The method has 6 parameters.
Long Statement,Ds3Examples,BulkGetExample,C:\repos\SpectraLogic_ds3_net_sdk\Ds3Examples\BulkGetExample.cs,Main,The length of the statement  "	IDs3Client client = new Ds3Builder (ConfigurationManager.AppSettings ["Ds3Endpoint"]' new Credentials (ConfigurationManager.AppSettings ["Ds3AccessKey"]' ConfigurationManager.AppSettings ["Ds3SecretKey"])).Build (); " is 215.
Long Statement,Ds3Examples,BulkPutExample,C:\repos\SpectraLogic_ds3_net_sdk\Ds3Examples\BulkPutExample.cs,Main,The length of the statement  "	IDs3Client client = new Ds3Builder (ConfigurationManager.AppSettings ["Ds3Endpoint"]' new Credentials (ConfigurationManager.AppSettings ["Ds3AccessKey"]' ConfigurationManager.AppSettings ["Ds3SecretKey"])).Build (); " is 215.
Long Statement,Ds3Examples,BulkPutWithStreamStrategyExample,C:\repos\SpectraLogic_ds3_net_sdk\Ds3Examples\BulkPutWithStreamStrategyExample.cs,Main,The length of the statement  "	var client = new Ds3Builder (ConfigurationManager.AppSettings ["Ds3Endpoint"]' new Credentials (ConfigurationManager.AppSettings ["Ds3AccessKey"]' ConfigurationManager.AppSettings ["Ds3SecretKey"])).Build (); " is 208.
Long Statement,Ds3Examples,Ds3ExampleClient,C:\repos\SpectraLogic_ds3_net_sdk\Ds3Examples\Ds3ExampleClient.cs,runPing,The length of the statement  "	return string.Format ("Object 'ApiVer: {0}' | BackendAct: {1} | SN: {2} | BuildVer: {3} | BuildRev: {4} | BuildPath: {5} "' sysinf.ApiVersion' sysinf.BackendActivated' sysinf.SerialNumber' sysinf.BuildInformation.Version' sysinf.BuildInformation.Revision' sysinf.BuildInformation.Branch); " is 288.
Long Statement,Ds3Examples,Ds3ExampleClient,C:\repos\SpectraLogic_ds3_net_sdk\Ds3Examples\Ds3ExampleClient.cs,Main,The length of the statement  "		exampleClient.runPutWithChecksum (bucket' testSourceDirectory' testChecksumFile' testChecksumCrc32C' ChecksumType.Type.CRC_32C); " is 128.
Long Statement,Ds3Examples,GetAvailableChunksExample,C:\repos\SpectraLogic_ds3_net_sdk\Ds3Examples\GetAvailableChunksExample.cs,Main,The length of the statement  "		var chunkResponse = client.GetJobChunksReadyForClientProcessingSpectraS3 (new GetJobChunksReadyForClientProcessingSpectraS3Request (jobId).WithPreferredNumberOfChunks (10)); " is 173.
Long Statement,Ds3Examples,GetAvailableChunksExample,C:\repos\SpectraLogic_ds3_net_sdk\Ds3Examples\GetAvailableChunksExample.cs,Main,The length of the statement  "		}' Thread.Sleep// If this matcher is called this means that we need to wait before we can safely continue processing chunks " is 123.
Long Statement,Ds3Examples,ListBucketsExample,C:\repos\SpectraLogic_ds3_net_sdk\Ds3Examples\ListBucketsExample.cs,Main,The length of the statement  "	IDs3Client client = new Ds3Builder (ConfigurationManager.AppSettings ["Ds3Endpoint"]' new Credentials (ConfigurationManager.AppSettings ["Ds3AccessKey"]' ConfigurationManager.AppSettings ["Ds3SecretKey"])).Build (); " is 215.
Long Statement,Ds3Examples,ListObjectsExample,C:\repos\SpectraLogic_ds3_net_sdk\Ds3Examples\ListObjectsExample.cs,Main,The length of the statement  "	IDs3Client client = new Ds3Builder (ConfigurationManager.AppSettings ["Ds3Endpoint"]' new Credentials (ConfigurationManager.AppSettings ["Ds3AccessKey"]' ConfigurationManager.AppSettings ["Ds3SecretKey"])).Build (); " is 215.
Long Statement,Ds3Examples,WithMetadataExample,C:\repos\SpectraLogic_ds3_net_sdk\Ds3Examples\WithMetadataExample.cs,Main,The length of the statement  "	IDs3Client client = new Ds3Builder (ConfigurationManager.AppSettings ["Ds3Endpoint"]' new Credentials (ConfigurationManager.AppSettings ["Ds3AccessKey"]' ConfigurationManager.AppSettings ["Ds3SecretKey"])).Build (); " is 215.
Magic Number,Ds3Examples,Ds3ExampleClient,C:\repos\SpectraLogic_ds3_net_sdk\Ds3Examples\Ds3ExampleClient.cs,Main,The following statement contains a magic number: try {  	// set up test files  	Ds3ExampleClient.SetupFiles (testSourceDirectory' testSourceSubDirectory);  	// connect to machine  	string systeminfo = exampleClient.runPing ();  	if (clientSwitch.TraceVerbose) {  		Trace.WriteLine (systeminfo);  	}  	// List all contents before operations  	Console.WriteLine ("\nSTARTING STATE:");  	exampleClient.runListAll ();  	// force removal of test bucket from previous executions.  	exampleClient.runCleanAll (bucket);  	#region put objects  	/*************************************************************                  *** PUT FILES TO DEVICE FROM LOCAL FILESYSTEM  AND STREAM ***                  *************************************************************/// create a bucket on the device  	exampleClient.runCreateBucket (bucket);  	// put a single file into the bucket  	exampleClient.runPut (bucket' testSourceDirectory' testSourceFile);  	// put a single file into the bucket with precomputed checksum  	exampleClient.runPutWithChecksum (bucket' testSourceDirectory' testChecksumFile' testChecksumCrc32C' ChecksumType.Type.CRC_32C);  	// put a single file into the bucket with dynamically generated checksum  	exampleClient.runPutWithChecksum (bucket' testSourceDirectory' testSourceFile2' string.Empty' ChecksumType.Type.MD5);  	// put a file into the bucket from stream  	exampleClient.runPutFromStream (bucket' binaryFile' binaryFileSize);  	// copy the whole directory with a file prefix  	exampleClient.runBulkPut (bucket' testSourceDirectory' prefix);  	// copy a local directory' recursively into the bucket  	if (Directory.Exists (sourceDir)) {  		exampleClient.runBulkPut (bucket' sourceDir);  	}  	else {  		if (clientSwitch.TraceInfo) {  			Trace.WriteLine ("set srcDirectory variable to put local data");  		}  	}  	// List all contents  	Console.WriteLine ("\nAFTER PUT:");  	exampleClient.runListAll ();  	#endregion put objects  	#region list objects  	/*************************************************                  ***  LIST OBJECT NAMES FROM DEVICE            ***                  *************************************************/Console.WriteLine ("\nLIST:");  	// get bucket list  	Console.WriteLine ("Buckets:");  	long bucketCount = exampleClient.runListBuckets ();  	// get object list  	Console.WriteLine ("Objects in {0}:"' bucket);  	int objectCount = exampleClient.runListObjects (bucket);  	// get object list in pages  	Console.WriteLine ("Objects in {0}:"' bucket);  	string objectName = null;  	S3ObjectType type = S3ObjectType.DATA;  	long version = 1L;  	int pageSize = objectCount / 3;  	for (int offset = 0; offset < objectCount; offset += pageSize) {  		Console.WriteLine (string.Format ("Get {0} (offset = {1})"' bucket' offset));  		exampleClient.runGetObjects (bucket' objectName' pageSize' offset' type' version);  	}  	#endregion listobjects  	#region get objects  	/*************************************************                  *** RESTORE OBJECTS FROM DEVICE TO FILESYSTEM ***                  *************************************************/// get single file from out-of-box example  	exampleClient.runGet (bucket' testRestoreDirectory' testSourceFile);  	// restore whole bucket into local directory  	if (!string.IsNullOrEmpty (destDir)) {  		exampleClient.runBulkGet (bucket' destDir' string.Empty);  	}  	#endregion get objects  	#region delete objects  	/*************************************************                  ***         DELETE FILES FROM DEVICE          ***                  *************************************************/// delete a single object  	exampleClient.runDeleteObject (bucket' testSourceFile);  	// delete all objects in a folder  	exampleClient.runDeleteFolder (bucket' testSourceSubDirectory);  	// delete all objects in a bucket but not the bucket  	exampleClient.runDeleteObjects (bucket);  	// delete an empty bucket  	exampleClient.runDeleteBucket (bucket);  	// List all contents   	Console.WriteLine ("\nAFTER DELETE:");  	exampleClient.runListAll ();  	#endregion delete objects  }  catch (Exception ex) {  	Console.WriteLine (ex.Message);  }  
Magic Number,Ds3Examples,GetAvailableChunksExample,C:\repos\SpectraLogic_ds3_net_sdk\Ds3Examples\GetAvailableChunksExample.cs,Main,The following statement contains a magic number: while (chunkSet.Count > 0) {  	// Get the set of chunks that are currently available for processing  	var chunkResponse = client.GetJobChunksReadyForClientProcessingSpectraS3 (new GetJobChunksReadyForClientProcessingSpectraS3Request (jobId).WithPreferredNumberOfChunks (10));  	// This can be changed to any number  	// but 10 is a good default and you  	// are not guaranteed to get this many           	chunkResponse.Match ((ts' response) =>  {  		// If this matcher is called this means that we can safely process chunks without  		// fear of the PutObject call failing due to cache unavailable conditions  		// It is also safe to process all the chunks in parallel as well' or to process  		// each chunk sequentially' while sending each object in parallel  		foreach (var chunk in response.Objects) {  			chunkSet.Remove (chunk.ChunkId);  			// this next step can be done in parallel  			foreach (var obj in chunk.ObjectsList) {  				// Create the stream and seek to the correct position for that  				// blob offset' and then wrap in a ObjectRequestStream to   				// limit the amount of data transferred to the length of the   				// blob being processed.  				var stream = streamBuilder.Invoke (obj.Name);  				stream.Seek (obj.Offset' System.IO.SeekOrigin.Begin);  				var wrappedStream = new ObjectRequestStream (stream' obj.Length);  				// Put the blob  				client.PutObject (new PutObjectRequest (bucket' obj.Name' wrappedStream).WithJob (jobId).WithOffset (obj.Offset));  			}  		}  	}' Thread.Sleep// If this matcher is called this means that we need to wait before we can safely continue processing chunks  	);  }  
