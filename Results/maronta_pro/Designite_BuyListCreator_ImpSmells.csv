Implementation smell,Namespace,Class,File,Method,Description
Long Method,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,CreateParamInfoGenerator,The method has 340 lines of code.
Long Method,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetTypeDeserializer,The method has 329 lines of code.
Complex Method,BuyListCreator,Form1,C:\repos\maronta_pro\BuyListCreator\Form1.cs,button1_Click,Cyclomatic complexity of the method is 8
Complex Method,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,ExecuteImpl,Cyclomatic complexity of the method is 8
Complex Method,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateMapper,Cyclomatic complexity of the method is 8
Complex Method,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateDeserializers,Cyclomatic complexity of the method is 9
Complex Method,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,Cyclomatic complexity of the method is 8
Complex Method,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,Format,Cyclomatic complexity of the method is 20
Complex Method,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,CreateParamInfoGenerator,Cyclomatic complexity of the method is 64
Complex Method,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetTypeDeserializer,Cyclomatic complexity of the method is 68
Complex Method,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,LoadLocal,Cyclomatic complexity of the method is 17
Complex Method,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,StoreLocal,Cyclomatic complexity of the method is 17
Complex Method,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,EmitInt32,Cyclomatic complexity of the method is 34
Complex Method,Dapper,DynamicParameters,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,AddDynamicParams,Cyclomatic complexity of the method is 9
Complex Method,Dapper,DynamicParameters,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,AddParameters,Cyclomatic complexity of the method is 15
Long Parameter List,Dapper,CommandDefinition,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,CommandDefinition,The method has 6 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,Execute,The method has 6 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,ExecuteReader,The method has 6 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,Query,The method has 7 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,Query,The method has 7 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,Query,The method has 8 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,QueryMultiple,The method has 6 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,Query,The method has 9 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,Query,The method has 9 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,Query,The method has 9 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,Query,The method has 9 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,Query,The method has 9 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,Query,The method has 9 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,MultiMap,The method has 9 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,MultiMapImpl,The method has 6 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateMapper,The method has 9 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetCacheInfo,The method has 6 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetDeserializer,The method has 5 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetDapperRowDeserializer,The method has 5 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The method has 5 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,CreateParamInfoGenerator,The method has 6 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetStructDeserializer,The method has 9 parameters.
Long Parameter List,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetTypeDeserializer,The method has 10 parameters.
Long Parameter List,Dapper,DynamicParameters,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,Add,The method has 5 parameters.
Long Parameter List,Dapper,DefaultTypeMap,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetMember,The method has 5 parameters.
Long Statement,BuyListCreator,Form1,C:\repos\maronta_pro\BuyListCreator\Form1.cs,button1_Click,The length of the statement  "			txtResult.Text += dorder.Code.ToString () + "'" + dorder.BrandNM + "'" + dorder.Price.ToString () + "'" + dorder.OrderNumber.ToString () + "'" + (dorder.OrderType == 0 ? "買" : "売") + Environment.NewLine; " is 203.
Long Statement,Dapper,CommandDefinition,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetBindByName,The length of the statement  "	if (prop != null && prop.CanWrite && prop.PropertyType == typeof(bool) && ((indexers = prop.GetIndexParameters ()) == null || indexers.Length == 0) && (setter = prop.GetSetMethod ()) != null) { " is 193.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetCachedSQL,The length of the statement  "	var data = _queryCache.Select (pair => Tuple.Create (pair.Key.connectionString' pair.Key.sql' pair.Value.GetHitCount ())); " is 122.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,AddTypeHandler,The length of the statement  "	typeof(TypeHandlerCache<>).MakeGenericType (type).GetMethod ("SetHandler"' BindingFlags.Static | BindingFlags.NonPublic).Invoke (null' new object[] { " is 149.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,LookupDbType,The length of the statement  "	throw new NotSupportedException (string.Format ("The member {0} of type {1} cannot be used as a parameter value"' name' type)); " is 127.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,Execute,The length of the statement  "	var command = new CommandDefinition (sql' (object)param' transaction' commandTimeout' commandType' CommandFlags.Buffered); " is 122.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,ExecuteReader,The length of the statement  "	var command = new CommandDefinition (sql' (object)param' transaction' commandTimeout' commandType' CommandFlags.Buffered); " is 122.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,Query,The length of the statement  "	var command = new CommandDefinition (sql' (object)param' transaction' commandTimeout' commandType' buffered ? CommandFlags.Buffered : CommandFlags.None); " is 153.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,Query,The length of the statement  "	var command = new CommandDefinition (sql' (object)param' transaction' commandTimeout' commandType' buffered ? CommandFlags.Buffered : CommandFlags.None); " is 153.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,QueryMultiple,The length of the statement  "	var command = new CommandDefinition (sql' (object)param' transaction' commandTimeout' commandType' CommandFlags.Buffered); " is 122.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,QueryMultipleImpl,The length of the statement  "	Identity identity = new Identity (command.CommandText' command.CommandType' cnn' typeof(GridReader)' param == null ? null : param.GetType ()' null); " is 148.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,QueryImpl,The length of the statement  "	var identity = new Identity (command.CommandText' command.CommandType' cnn' effectiveType' param == null ? null : param.GetType ()' null); " is 138.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,Query,The length of the statement  "	return MultiMap<TFirst' TSecond' DontMap' DontMap' DontMap' DontMap' DontMap' TReturn> (cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 181.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,Query,The length of the statement  "	return MultiMap<TFirst' TSecond' TThird' DontMap' DontMap' DontMap' DontMap' TReturn> (cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 180.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,Query,The length of the statement  "	return MultiMap<TFirst' TSecond' TThird' TFourth' DontMap' DontMap' DontMap' TReturn> (cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 180.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,Query,The length of the statement  "	return MultiMap<TFirst' TSecond' TThird' TFourth' TFifth' DontMap' DontMap' TReturn> (cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 179.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,Query,The length of the statement  "	return MultiMap<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' DontMap' TReturn> (cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 178.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,Query,The length of the statement  "	return MultiMap<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn> (cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 179.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,MultiMap,The length of the statement  "	var command = new CommandDefinition (sql' (object)param' transaction' commandTimeout' commandType' buffered ? CommandFlags.Buffered : CommandFlags.None); " is 153.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,MultiMap,The length of the statement  "	var results = MultiMapImpl<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn> (cnn' command' map' splitOn' null' null); " is 137.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,MultiMapImpl,The length of the statement  "	identity = identity ?? new Identity (command.CommandText' command.CommandType' cnn' typeof(TFirst)' param == null ? null : param.GetType ()' new[] { " is 148.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,MultiMapImpl,The length of the statement  "		if ((deserializer = cinfo.Deserializer).Func == null || (otherDeserializers = cinfo.OtherDeserializers) == null || hash != deserializer.Hash) { " is 143.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,MultiMapImpl,The length of the statement  "		Func<IDataReader' TReturn> mapIt = GenerateMapper<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn> (deserializer.Func' otherDeserializers' map); " is 164.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateMapper,The length of the statement  "		return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)); " is 158.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateMapper,The length of the statement  "		return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)); " is 204.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateMapper,The length of the statement  "		return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)); " is 248.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateMapper,The length of the statement  "		return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)); " is 292.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateMapper,The length of the statement  "		return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r)); " is 340.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetCacheInfo,The length of the statement  "			else if (exampleParameters is IEnumerable<KeyValuePair<string' object>> && exampleParameters is System.Dynamic.IDynamicMetaObjectProvider) { " is 140.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetDeserializer,The length of the statement  "	if (!(typeMap.ContainsKey (type) || type.IsEnum || type.FullName == LinqBinary || (type.IsValueType && (underlyingType = Nullable.GetUnderlyingType (type)) != null && underlyingType.IsEnum))) { " is 193.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,FilterParameters,The length of the statement  "	return parameters.Where (p => Regex.IsMatch (sql' @"[?@:]" + p.Name + "([^a-zA-Z0-9_]+|$)"' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant)); " is 175.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,CreateParamInfoGenerator,The length of the statement  "		if (dbType != DbType.Time && handler == null)// https://connect.microsoft.com/VisualStudio/feedback/details/381934/sqlparameter-dbtype-dbtype-time-sets-the-parameter-to-sqldbtype-datetime-instead-of-sqldbtype-time " is 213.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,CreateParamInfoGenerator,The length of the statement  "				il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("ToArray"' BindingFlags.Public | BindingFlags.Instance)' null); " is 123.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetStructDeserializer,The length of the statement  "	// no point using special per-type handling here; it boils down to the same' plus not all are supported anyway (see: SqlDataReader.GetChar - not supported!) " is 156.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetTypeDeserializer,The length of the statement  "			string proposedTypes = "(" + string.Join ("' "' types.Select ((t' i) => t.FullName + " " + names [i]).ToArray ()) + ")"; " is 120.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetTypeDeserializer,The length of the statement  "			throw new InvalidOperationException (string.Format ("A parameterless default constructor or one matching signature {0} is required for {1} materialization"' proposedTypes' type.FullName)); " is 188.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetTypeDeserializer,The length of the statement  "	var members = (specializedConstructor != null ? names.Select (n => typeMap.GetConstructorParameter (specializedConstructor' n)) : names.Select (n => typeMap.GetMember (n))).ToList (); " is 183.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetTypeDeserializer,The length of the statement  "				il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod (memberType == typeof(char) ? "ReadChar" : "ReadNullableChar"' BindingFlags.Static | BindingFlags.Public)' null); " is 168.
Long Statement,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetOperator,The length of the statement  "	return ResolveOperator (fromMethods = from.GetMethods (BindingFlags.Static | BindingFlags.Public)' from' to' "op_Implicit") ?? ResolveOperator (toMethods = to.GetMethods (BindingFlags.Static | BindingFlags.Public)' from' to' "op_Implicit") ?? ResolveOperator (fromMethods' from' to' "op_Explicit") ?? ResolveOperator (toMethods' from' to' "op_Explicit"); " is 354.
Long Statement,Dapper,DbString,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,AddParameter,The length of the statement  "	param.DbType = IsAnsi ? (IsFixedLength ? DbType.AnsiStringFixedLength : DbType.AnsiString) : (IsFixedLength ? DbType.StringFixedLength : DbType.String); " is 152.
Long Statement,Dapper,DefaultTypeMap,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetPropertySetter,The length of the statement  "	return propertyInfo.DeclaringType == type ? propertyInfo.GetSetMethod (true) : propertyInfo.DeclaringType.GetProperty (propertyInfo.Name' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance' Type.DefaultBinder' propertyInfo.PropertyType' propertyInfo.GetIndexParameters ().Select (p => p.ParameterType).ToArray ()' null).GetSetMethod (true); " is 358.
Long Statement,Dapper,DefaultTypeMap,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetSettableProps,The length of the statement  "	return t.GetProperties (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).Where (p => GetPropertySetter (p' t) != null).ToList (); " is 150.
Long Statement,Dapper,DefaultTypeMap,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,FindConstructor,The length of the statement  "	foreach (ConstructorInfo ctor in constructors.OrderBy (c => c.IsPublic ? 0 : (c.IsPrivate ? 2 : 1)).ThenBy (c => c.GetParameters ().Length)) { " is 142.
Long Statement,Dapper,DefaultTypeMap,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,FindConstructor,The length of the statement  "			if (unboxedType != types [i] && !(unboxedType.IsEnum && Enum.GetUnderlyingType (unboxedType) == types [i]) && !(unboxedType == typeof(char) && types [i] == typeof(string))) " is 172.
Long Statement,Dapper,DefaultTypeMap,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetConstructorParameter,The length of the statement  "	return new SimpleMemberMap (columnName' parameters.FirstOrDefault (p => string.Equals (p.Name' columnName' StringComparison.OrdinalIgnoreCase))); " is 145.
Long Statement,Dapper,DefaultTypeMap,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetMember,The length of the statement  "	var property = _properties.FirstOrDefault (p => string.Equals (p.Name' columnName' StringComparison.Ordinal)) ?? _properties.FirstOrDefault (p => string.Equals (p.Name' columnName' StringComparison.OrdinalIgnoreCase)); " is 218.
Long Statement,Dapper,DefaultTypeMap,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetMember,The length of the statement  "	var field = _fields.FirstOrDefault (p => string.Equals (p.Name' columnName' StringComparison.Ordinal)) ?? _fields.FirstOrDefault (p => string.Equals (p.Name' columnName' StringComparison.OrdinalIgnoreCase)); " is 207.
Complex Conditional,Dapper,CommandDefinition,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetBindByName,The conditional expression  "prop != null && prop.CanWrite && prop.PropertyType == typeof(bool) && ((indexers = prop.GetIndexParameters ()) == null || indexers.Length == 0) && (setter = prop.GetSetMethod ()) != null"  is complex.
Complex Conditional,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetDeserializer,The conditional expression  "!(typeMap.ContainsKey (type) || type.IsEnum || type.FullName == LinqBinary || (type.IsValueType && (underlyingType = Nullable.GetUnderlyingType (type)) != null && underlyingType.IsEnum))"  is complex.
Complex Conditional,Dapper,DefaultTypeMap,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,FindConstructor,The conditional expression  "unboxedType != types [i] && !(unboxedType.IsEnum && Enum.GetUnderlyingType (unboxedType) == types [i]) && !(unboxedType == typeof(char) && types [i] == typeof(string))"  is complex.
Empty Catch Block,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,QueryMultipleImpl,The method has an empty catch block.
Empty Catch Block,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,QueryImpl,The method has an empty catch block.
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetColumnHash,The following statement contains a magic number: unchecked {  	int colCount = reader.FieldCount' hash = colCount;  	for (int i = 0; i < colCount; i++) {  		// binding code is only interested in names - not types  		object tmp = reader.GetName (i);  		hash = (hash * 31) + (tmp == null ? 0 : tmp.GetHashCode ());  	}  	return hash;  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetColumnHash,The following statement contains a magic number: for (int i = 0; i < colCount; i++) {  	// binding code is only interested in names - not types  	object tmp = reader.GetName (i);  	hash = (hash * 31) + (tmp == null ? 0 : tmp.GetHashCode ());  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetColumnHash,The following statement contains a magic number: hash = (hash * 31) + (tmp == null ? 0 : tmp.GetHashCode ());  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (list != null) {  	if (FeatureSupport.Get (command.Connection).Arrays) {  		var arrayParm = command.CreateParameter ();  		arrayParm.Value = list;  		arrayParm.ParameterName = namePrefix;  		command.Parameters.Add (arrayParm);  	}  	else {  		bool isString = value is IEnumerable<string>;  		bool isDbString = value is IEnumerable<DbString>;  		foreach (var item in list) {  			count++;  			var listParam = command.CreateParameter ();  			listParam.ParameterName = namePrefix + count;  			listParam.Value = item ?? DBNull.Value;  			if (isString) {  				listParam.Size = 4000;  				if (item != null && ((string)item).Length > 4000) {  					listParam.Size = -1;  				}  			}  			if (isDbString && item as DbString != null) {  				var str = item as DbString;  				str.AddParameter (command' listParam.ParameterName);  			}  			else {  				command.Parameters.Add (listParam);  			}  		}  		var regexIncludingUnknown = @"([?@:]" + Regex.Escape (namePrefix) + @")(\s+(?i)unknown(?-i))?";  		if (count == 0) {  			command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  				var variableName = match.Groups [1].Value;  				if (match.Groups [2].Success) {  					// looks like an optimize hint; leave it alone!  					return match.Value;  				}  				else {  					return "(SELECT " + variableName + " WHERE 1 = 0)";  				}  			});  			var dummyParam = command.CreateParameter ();  			dummyParam.ParameterName = namePrefix;  			dummyParam.Value = DBNull.Value;  			command.Parameters.Add (dummyParam);  		}  		else {  			command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  				var variableName = match.Groups [1].Value;  				if (match.Groups [2].Success) {  					// looks like an optimize hint; expand it  					var suffix = match.Groups [2].Value;  					var sb = new StringBuilder (variableName).Append (1).Append (suffix);  					for (int i = 2; i <= count; i++) {  						sb.Append (''').Append (variableName).Append (i).Append (suffix);  					}  					return sb.ToString ();  				}  				else {  					var sb = new StringBuilder ("(").Append (variableName).Append (1);  					for (int i = 2; i <= count; i++) {  						sb.Append (''').Append (variableName).Append (i);  					}  					return sb.Append (')').ToString ();  				}  			});  		}  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (list != null) {  	if (FeatureSupport.Get (command.Connection).Arrays) {  		var arrayParm = command.CreateParameter ();  		arrayParm.Value = list;  		arrayParm.ParameterName = namePrefix;  		command.Parameters.Add (arrayParm);  	}  	else {  		bool isString = value is IEnumerable<string>;  		bool isDbString = value is IEnumerable<DbString>;  		foreach (var item in list) {  			count++;  			var listParam = command.CreateParameter ();  			listParam.ParameterName = namePrefix + count;  			listParam.Value = item ?? DBNull.Value;  			if (isString) {  				listParam.Size = 4000;  				if (item != null && ((string)item).Length > 4000) {  					listParam.Size = -1;  				}  			}  			if (isDbString && item as DbString != null) {  				var str = item as DbString;  				str.AddParameter (command' listParam.ParameterName);  			}  			else {  				command.Parameters.Add (listParam);  			}  		}  		var regexIncludingUnknown = @"([?@:]" + Regex.Escape (namePrefix) + @")(\s+(?i)unknown(?-i))?";  		if (count == 0) {  			command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  				var variableName = match.Groups [1].Value;  				if (match.Groups [2].Success) {  					// looks like an optimize hint; leave it alone!  					return match.Value;  				}  				else {  					return "(SELECT " + variableName + " WHERE 1 = 0)";  				}  			});  			var dummyParam = command.CreateParameter ();  			dummyParam.ParameterName = namePrefix;  			dummyParam.Value = DBNull.Value;  			command.Parameters.Add (dummyParam);  		}  		else {  			command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  				var variableName = match.Groups [1].Value;  				if (match.Groups [2].Success) {  					// looks like an optimize hint; expand it  					var suffix = match.Groups [2].Value;  					var sb = new StringBuilder (variableName).Append (1).Append (suffix);  					for (int i = 2; i <= count; i++) {  						sb.Append (''').Append (variableName).Append (i).Append (suffix);  					}  					return sb.ToString ();  				}  				else {  					var sb = new StringBuilder ("(").Append (variableName).Append (1);  					for (int i = 2; i <= count; i++) {  						sb.Append (''').Append (variableName).Append (i);  					}  					return sb.Append (')').ToString ();  				}  			});  		}  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (list != null) {  	if (FeatureSupport.Get (command.Connection).Arrays) {  		var arrayParm = command.CreateParameter ();  		arrayParm.Value = list;  		arrayParm.ParameterName = namePrefix;  		command.Parameters.Add (arrayParm);  	}  	else {  		bool isString = value is IEnumerable<string>;  		bool isDbString = value is IEnumerable<DbString>;  		foreach (var item in list) {  			count++;  			var listParam = command.CreateParameter ();  			listParam.ParameterName = namePrefix + count;  			listParam.Value = item ?? DBNull.Value;  			if (isString) {  				listParam.Size = 4000;  				if (item != null && ((string)item).Length > 4000) {  					listParam.Size = -1;  				}  			}  			if (isDbString && item as DbString != null) {  				var str = item as DbString;  				str.AddParameter (command' listParam.ParameterName);  			}  			else {  				command.Parameters.Add (listParam);  			}  		}  		var regexIncludingUnknown = @"([?@:]" + Regex.Escape (namePrefix) + @")(\s+(?i)unknown(?-i))?";  		if (count == 0) {  			command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  				var variableName = match.Groups [1].Value;  				if (match.Groups [2].Success) {  					// looks like an optimize hint; leave it alone!  					return match.Value;  				}  				else {  					return "(SELECT " + variableName + " WHERE 1 = 0)";  				}  			});  			var dummyParam = command.CreateParameter ();  			dummyParam.ParameterName = namePrefix;  			dummyParam.Value = DBNull.Value;  			command.Parameters.Add (dummyParam);  		}  		else {  			command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  				var variableName = match.Groups [1].Value;  				if (match.Groups [2].Success) {  					// looks like an optimize hint; expand it  					var suffix = match.Groups [2].Value;  					var sb = new StringBuilder (variableName).Append (1).Append (suffix);  					for (int i = 2; i <= count; i++) {  						sb.Append (''').Append (variableName).Append (i).Append (suffix);  					}  					return sb.ToString ();  				}  				else {  					var sb = new StringBuilder ("(").Append (variableName).Append (1);  					for (int i = 2; i <= count; i++) {  						sb.Append (''').Append (variableName).Append (i);  					}  					return sb.Append (')').ToString ();  				}  			});  		}  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (list != null) {  	if (FeatureSupport.Get (command.Connection).Arrays) {  		var arrayParm = command.CreateParameter ();  		arrayParm.Value = list;  		arrayParm.ParameterName = namePrefix;  		command.Parameters.Add (arrayParm);  	}  	else {  		bool isString = value is IEnumerable<string>;  		bool isDbString = value is IEnumerable<DbString>;  		foreach (var item in list) {  			count++;  			var listParam = command.CreateParameter ();  			listParam.ParameterName = namePrefix + count;  			listParam.Value = item ?? DBNull.Value;  			if (isString) {  				listParam.Size = 4000;  				if (item != null && ((string)item).Length > 4000) {  					listParam.Size = -1;  				}  			}  			if (isDbString && item as DbString != null) {  				var str = item as DbString;  				str.AddParameter (command' listParam.ParameterName);  			}  			else {  				command.Parameters.Add (listParam);  			}  		}  		var regexIncludingUnknown = @"([?@:]" + Regex.Escape (namePrefix) + @")(\s+(?i)unknown(?-i))?";  		if (count == 0) {  			command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  				var variableName = match.Groups [1].Value;  				if (match.Groups [2].Success) {  					// looks like an optimize hint; leave it alone!  					return match.Value;  				}  				else {  					return "(SELECT " + variableName + " WHERE 1 = 0)";  				}  			});  			var dummyParam = command.CreateParameter ();  			dummyParam.ParameterName = namePrefix;  			dummyParam.Value = DBNull.Value;  			command.Parameters.Add (dummyParam);  		}  		else {  			command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  				var variableName = match.Groups [1].Value;  				if (match.Groups [2].Success) {  					// looks like an optimize hint; expand it  					var suffix = match.Groups [2].Value;  					var sb = new StringBuilder (variableName).Append (1).Append (suffix);  					for (int i = 2; i <= count; i++) {  						sb.Append (''').Append (variableName).Append (i).Append (suffix);  					}  					return sb.ToString ();  				}  				else {  					var sb = new StringBuilder ("(").Append (variableName).Append (1);  					for (int i = 2; i <= count; i++) {  						sb.Append (''').Append (variableName).Append (i);  					}  					return sb.Append (')').ToString ();  				}  			});  		}  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (list != null) {  	if (FeatureSupport.Get (command.Connection).Arrays) {  		var arrayParm = command.CreateParameter ();  		arrayParm.Value = list;  		arrayParm.ParameterName = namePrefix;  		command.Parameters.Add (arrayParm);  	}  	else {  		bool isString = value is IEnumerable<string>;  		bool isDbString = value is IEnumerable<DbString>;  		foreach (var item in list) {  			count++;  			var listParam = command.CreateParameter ();  			listParam.ParameterName = namePrefix + count;  			listParam.Value = item ?? DBNull.Value;  			if (isString) {  				listParam.Size = 4000;  				if (item != null && ((string)item).Length > 4000) {  					listParam.Size = -1;  				}  			}  			if (isDbString && item as DbString != null) {  				var str = item as DbString;  				str.AddParameter (command' listParam.ParameterName);  			}  			else {  				command.Parameters.Add (listParam);  			}  		}  		var regexIncludingUnknown = @"([?@:]" + Regex.Escape (namePrefix) + @")(\s+(?i)unknown(?-i))?";  		if (count == 0) {  			command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  				var variableName = match.Groups [1].Value;  				if (match.Groups [2].Success) {  					// looks like an optimize hint; leave it alone!  					return match.Value;  				}  				else {  					return "(SELECT " + variableName + " WHERE 1 = 0)";  				}  			});  			var dummyParam = command.CreateParameter ();  			dummyParam.ParameterName = namePrefix;  			dummyParam.Value = DBNull.Value;  			command.Parameters.Add (dummyParam);  		}  		else {  			command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  				var variableName = match.Groups [1].Value;  				if (match.Groups [2].Success) {  					// looks like an optimize hint; expand it  					var suffix = match.Groups [2].Value;  					var sb = new StringBuilder (variableName).Append (1).Append (suffix);  					for (int i = 2; i <= count; i++) {  						sb.Append (''').Append (variableName).Append (i).Append (suffix);  					}  					return sb.ToString ();  				}  				else {  					var sb = new StringBuilder ("(").Append (variableName).Append (1);  					for (int i = 2; i <= count; i++) {  						sb.Append (''').Append (variableName).Append (i);  					}  					return sb.Append (')').ToString ();  				}  			});  		}  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (list != null) {  	if (FeatureSupport.Get (command.Connection).Arrays) {  		var arrayParm = command.CreateParameter ();  		arrayParm.Value = list;  		arrayParm.ParameterName = namePrefix;  		command.Parameters.Add (arrayParm);  	}  	else {  		bool isString = value is IEnumerable<string>;  		bool isDbString = value is IEnumerable<DbString>;  		foreach (var item in list) {  			count++;  			var listParam = command.CreateParameter ();  			listParam.ParameterName = namePrefix + count;  			listParam.Value = item ?? DBNull.Value;  			if (isString) {  				listParam.Size = 4000;  				if (item != null && ((string)item).Length > 4000) {  					listParam.Size = -1;  				}  			}  			if (isDbString && item as DbString != null) {  				var str = item as DbString;  				str.AddParameter (command' listParam.ParameterName);  			}  			else {  				command.Parameters.Add (listParam);  			}  		}  		var regexIncludingUnknown = @"([?@:]" + Regex.Escape (namePrefix) + @")(\s+(?i)unknown(?-i))?";  		if (count == 0) {  			command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  				var variableName = match.Groups [1].Value;  				if (match.Groups [2].Success) {  					// looks like an optimize hint; leave it alone!  					return match.Value;  				}  				else {  					return "(SELECT " + variableName + " WHERE 1 = 0)";  				}  			});  			var dummyParam = command.CreateParameter ();  			dummyParam.ParameterName = namePrefix;  			dummyParam.Value = DBNull.Value;  			command.Parameters.Add (dummyParam);  		}  		else {  			command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  				var variableName = match.Groups [1].Value;  				if (match.Groups [2].Success) {  					// looks like an optimize hint; expand it  					var suffix = match.Groups [2].Value;  					var sb = new StringBuilder (variableName).Append (1).Append (suffix);  					for (int i = 2; i <= count; i++) {  						sb.Append (''').Append (variableName).Append (i).Append (suffix);  					}  					return sb.ToString ();  				}  				else {  					var sb = new StringBuilder ("(").Append (variableName).Append (1);  					for (int i = 2; i <= count; i++) {  						sb.Append (''').Append (variableName).Append (i);  					}  					return sb.Append (')').ToString ();  				}  			});  		}  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (list != null) {  	if (FeatureSupport.Get (command.Connection).Arrays) {  		var arrayParm = command.CreateParameter ();  		arrayParm.Value = list;  		arrayParm.ParameterName = namePrefix;  		command.Parameters.Add (arrayParm);  	}  	else {  		bool isString = value is IEnumerable<string>;  		bool isDbString = value is IEnumerable<DbString>;  		foreach (var item in list) {  			count++;  			var listParam = command.CreateParameter ();  			listParam.ParameterName = namePrefix + count;  			listParam.Value = item ?? DBNull.Value;  			if (isString) {  				listParam.Size = 4000;  				if (item != null && ((string)item).Length > 4000) {  					listParam.Size = -1;  				}  			}  			if (isDbString && item as DbString != null) {  				var str = item as DbString;  				str.AddParameter (command' listParam.ParameterName);  			}  			else {  				command.Parameters.Add (listParam);  			}  		}  		var regexIncludingUnknown = @"([?@:]" + Regex.Escape (namePrefix) + @")(\s+(?i)unknown(?-i))?";  		if (count == 0) {  			command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  				var variableName = match.Groups [1].Value;  				if (match.Groups [2].Success) {  					// looks like an optimize hint; leave it alone!  					return match.Value;  				}  				else {  					return "(SELECT " + variableName + " WHERE 1 = 0)";  				}  			});  			var dummyParam = command.CreateParameter ();  			dummyParam.ParameterName = namePrefix;  			dummyParam.Value = DBNull.Value;  			command.Parameters.Add (dummyParam);  		}  		else {  			command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  				var variableName = match.Groups [1].Value;  				if (match.Groups [2].Success) {  					// looks like an optimize hint; expand it  					var suffix = match.Groups [2].Value;  					var sb = new StringBuilder (variableName).Append (1).Append (suffix);  					for (int i = 2; i <= count; i++) {  						sb.Append (''').Append (variableName).Append (i).Append (suffix);  					}  					return sb.ToString ();  				}  				else {  					var sb = new StringBuilder ("(").Append (variableName).Append (1);  					for (int i = 2; i <= count; i++) {  						sb.Append (''').Append (variableName).Append (i);  					}  					return sb.Append (')').ToString ();  				}  			});  		}  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (FeatureSupport.Get (command.Connection).Arrays) {  	var arrayParm = command.CreateParameter ();  	arrayParm.Value = list;  	arrayParm.ParameterName = namePrefix;  	command.Parameters.Add (arrayParm);  }  else {  	bool isString = value is IEnumerable<string>;  	bool isDbString = value is IEnumerable<DbString>;  	foreach (var item in list) {  		count++;  		var listParam = command.CreateParameter ();  		listParam.ParameterName = namePrefix + count;  		listParam.Value = item ?? DBNull.Value;  		if (isString) {  			listParam.Size = 4000;  			if (item != null && ((string)item).Length > 4000) {  				listParam.Size = -1;  			}  		}  		if (isDbString && item as DbString != null) {  			var str = item as DbString;  			str.AddParameter (command' listParam.ParameterName);  		}  		else {  			command.Parameters.Add (listParam);  		}  	}  	var regexIncludingUnknown = @"([?@:]" + Regex.Escape (namePrefix) + @")(\s+(?i)unknown(?-i))?";  	if (count == 0) {  		command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  			var variableName = match.Groups [1].Value;  			if (match.Groups [2].Success) {  				// looks like an optimize hint; leave it alone!  				return match.Value;  			}  			else {  				return "(SELECT " + variableName + " WHERE 1 = 0)";  			}  		});  		var dummyParam = command.CreateParameter ();  		dummyParam.ParameterName = namePrefix;  		dummyParam.Value = DBNull.Value;  		command.Parameters.Add (dummyParam);  	}  	else {  		command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  			var variableName = match.Groups [1].Value;  			if (match.Groups [2].Success) {  				// looks like an optimize hint; expand it  				var suffix = match.Groups [2].Value;  				var sb = new StringBuilder (variableName).Append (1).Append (suffix);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (variableName).Append (i).Append (suffix);  				}  				return sb.ToString ();  			}  			else {  				var sb = new StringBuilder ("(").Append (variableName).Append (1);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (variableName).Append (i);  				}  				return sb.Append (')').ToString ();  			}  		});  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (FeatureSupport.Get (command.Connection).Arrays) {  	var arrayParm = command.CreateParameter ();  	arrayParm.Value = list;  	arrayParm.ParameterName = namePrefix;  	command.Parameters.Add (arrayParm);  }  else {  	bool isString = value is IEnumerable<string>;  	bool isDbString = value is IEnumerable<DbString>;  	foreach (var item in list) {  		count++;  		var listParam = command.CreateParameter ();  		listParam.ParameterName = namePrefix + count;  		listParam.Value = item ?? DBNull.Value;  		if (isString) {  			listParam.Size = 4000;  			if (item != null && ((string)item).Length > 4000) {  				listParam.Size = -1;  			}  		}  		if (isDbString && item as DbString != null) {  			var str = item as DbString;  			str.AddParameter (command' listParam.ParameterName);  		}  		else {  			command.Parameters.Add (listParam);  		}  	}  	var regexIncludingUnknown = @"([?@:]" + Regex.Escape (namePrefix) + @")(\s+(?i)unknown(?-i))?";  	if (count == 0) {  		command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  			var variableName = match.Groups [1].Value;  			if (match.Groups [2].Success) {  				// looks like an optimize hint; leave it alone!  				return match.Value;  			}  			else {  				return "(SELECT " + variableName + " WHERE 1 = 0)";  			}  		});  		var dummyParam = command.CreateParameter ();  		dummyParam.ParameterName = namePrefix;  		dummyParam.Value = DBNull.Value;  		command.Parameters.Add (dummyParam);  	}  	else {  		command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  			var variableName = match.Groups [1].Value;  			if (match.Groups [2].Success) {  				// looks like an optimize hint; expand it  				var suffix = match.Groups [2].Value;  				var sb = new StringBuilder (variableName).Append (1).Append (suffix);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (variableName).Append (i).Append (suffix);  				}  				return sb.ToString ();  			}  			else {  				var sb = new StringBuilder ("(").Append (variableName).Append (1);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (variableName).Append (i);  				}  				return sb.Append (')').ToString ();  			}  		});  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (FeatureSupport.Get (command.Connection).Arrays) {  	var arrayParm = command.CreateParameter ();  	arrayParm.Value = list;  	arrayParm.ParameterName = namePrefix;  	command.Parameters.Add (arrayParm);  }  else {  	bool isString = value is IEnumerable<string>;  	bool isDbString = value is IEnumerable<DbString>;  	foreach (var item in list) {  		count++;  		var listParam = command.CreateParameter ();  		listParam.ParameterName = namePrefix + count;  		listParam.Value = item ?? DBNull.Value;  		if (isString) {  			listParam.Size = 4000;  			if (item != null && ((string)item).Length > 4000) {  				listParam.Size = -1;  			}  		}  		if (isDbString && item as DbString != null) {  			var str = item as DbString;  			str.AddParameter (command' listParam.ParameterName);  		}  		else {  			command.Parameters.Add (listParam);  		}  	}  	var regexIncludingUnknown = @"([?@:]" + Regex.Escape (namePrefix) + @")(\s+(?i)unknown(?-i))?";  	if (count == 0) {  		command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  			var variableName = match.Groups [1].Value;  			if (match.Groups [2].Success) {  				// looks like an optimize hint; leave it alone!  				return match.Value;  			}  			else {  				return "(SELECT " + variableName + " WHERE 1 = 0)";  			}  		});  		var dummyParam = command.CreateParameter ();  		dummyParam.ParameterName = namePrefix;  		dummyParam.Value = DBNull.Value;  		command.Parameters.Add (dummyParam);  	}  	else {  		command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  			var variableName = match.Groups [1].Value;  			if (match.Groups [2].Success) {  				// looks like an optimize hint; expand it  				var suffix = match.Groups [2].Value;  				var sb = new StringBuilder (variableName).Append (1).Append (suffix);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (variableName).Append (i).Append (suffix);  				}  				return sb.ToString ();  			}  			else {  				var sb = new StringBuilder ("(").Append (variableName).Append (1);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (variableName).Append (i);  				}  				return sb.Append (')').ToString ();  			}  		});  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (FeatureSupport.Get (command.Connection).Arrays) {  	var arrayParm = command.CreateParameter ();  	arrayParm.Value = list;  	arrayParm.ParameterName = namePrefix;  	command.Parameters.Add (arrayParm);  }  else {  	bool isString = value is IEnumerable<string>;  	bool isDbString = value is IEnumerable<DbString>;  	foreach (var item in list) {  		count++;  		var listParam = command.CreateParameter ();  		listParam.ParameterName = namePrefix + count;  		listParam.Value = item ?? DBNull.Value;  		if (isString) {  			listParam.Size = 4000;  			if (item != null && ((string)item).Length > 4000) {  				listParam.Size = -1;  			}  		}  		if (isDbString && item as DbString != null) {  			var str = item as DbString;  			str.AddParameter (command' listParam.ParameterName);  		}  		else {  			command.Parameters.Add (listParam);  		}  	}  	var regexIncludingUnknown = @"([?@:]" + Regex.Escape (namePrefix) + @")(\s+(?i)unknown(?-i))?";  	if (count == 0) {  		command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  			var variableName = match.Groups [1].Value;  			if (match.Groups [2].Success) {  				// looks like an optimize hint; leave it alone!  				return match.Value;  			}  			else {  				return "(SELECT " + variableName + " WHERE 1 = 0)";  			}  		});  		var dummyParam = command.CreateParameter ();  		dummyParam.ParameterName = namePrefix;  		dummyParam.Value = DBNull.Value;  		command.Parameters.Add (dummyParam);  	}  	else {  		command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  			var variableName = match.Groups [1].Value;  			if (match.Groups [2].Success) {  				// looks like an optimize hint; expand it  				var suffix = match.Groups [2].Value;  				var sb = new StringBuilder (variableName).Append (1).Append (suffix);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (variableName).Append (i).Append (suffix);  				}  				return sb.ToString ();  			}  			else {  				var sb = new StringBuilder ("(").Append (variableName).Append (1);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (variableName).Append (i);  				}  				return sb.Append (')').ToString ();  			}  		});  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (FeatureSupport.Get (command.Connection).Arrays) {  	var arrayParm = command.CreateParameter ();  	arrayParm.Value = list;  	arrayParm.ParameterName = namePrefix;  	command.Parameters.Add (arrayParm);  }  else {  	bool isString = value is IEnumerable<string>;  	bool isDbString = value is IEnumerable<DbString>;  	foreach (var item in list) {  		count++;  		var listParam = command.CreateParameter ();  		listParam.ParameterName = namePrefix + count;  		listParam.Value = item ?? DBNull.Value;  		if (isString) {  			listParam.Size = 4000;  			if (item != null && ((string)item).Length > 4000) {  				listParam.Size = -1;  			}  		}  		if (isDbString && item as DbString != null) {  			var str = item as DbString;  			str.AddParameter (command' listParam.ParameterName);  		}  		else {  			command.Parameters.Add (listParam);  		}  	}  	var regexIncludingUnknown = @"([?@:]" + Regex.Escape (namePrefix) + @")(\s+(?i)unknown(?-i))?";  	if (count == 0) {  		command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  			var variableName = match.Groups [1].Value;  			if (match.Groups [2].Success) {  				// looks like an optimize hint; leave it alone!  				return match.Value;  			}  			else {  				return "(SELECT " + variableName + " WHERE 1 = 0)";  			}  		});  		var dummyParam = command.CreateParameter ();  		dummyParam.ParameterName = namePrefix;  		dummyParam.Value = DBNull.Value;  		command.Parameters.Add (dummyParam);  	}  	else {  		command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  			var variableName = match.Groups [1].Value;  			if (match.Groups [2].Success) {  				// looks like an optimize hint; expand it  				var suffix = match.Groups [2].Value;  				var sb = new StringBuilder (variableName).Append (1).Append (suffix);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (variableName).Append (i).Append (suffix);  				}  				return sb.ToString ();  			}  			else {  				var sb = new StringBuilder ("(").Append (variableName).Append (1);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (variableName).Append (i);  				}  				return sb.Append (')').ToString ();  			}  		});  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (FeatureSupport.Get (command.Connection).Arrays) {  	var arrayParm = command.CreateParameter ();  	arrayParm.Value = list;  	arrayParm.ParameterName = namePrefix;  	command.Parameters.Add (arrayParm);  }  else {  	bool isString = value is IEnumerable<string>;  	bool isDbString = value is IEnumerable<DbString>;  	foreach (var item in list) {  		count++;  		var listParam = command.CreateParameter ();  		listParam.ParameterName = namePrefix + count;  		listParam.Value = item ?? DBNull.Value;  		if (isString) {  			listParam.Size = 4000;  			if (item != null && ((string)item).Length > 4000) {  				listParam.Size = -1;  			}  		}  		if (isDbString && item as DbString != null) {  			var str = item as DbString;  			str.AddParameter (command' listParam.ParameterName);  		}  		else {  			command.Parameters.Add (listParam);  		}  	}  	var regexIncludingUnknown = @"([?@:]" + Regex.Escape (namePrefix) + @")(\s+(?i)unknown(?-i))?";  	if (count == 0) {  		command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  			var variableName = match.Groups [1].Value;  			if (match.Groups [2].Success) {  				// looks like an optimize hint; leave it alone!  				return match.Value;  			}  			else {  				return "(SELECT " + variableName + " WHERE 1 = 0)";  			}  		});  		var dummyParam = command.CreateParameter ();  		dummyParam.ParameterName = namePrefix;  		dummyParam.Value = DBNull.Value;  		command.Parameters.Add (dummyParam);  	}  	else {  		command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  			var variableName = match.Groups [1].Value;  			if (match.Groups [2].Success) {  				// looks like an optimize hint; expand it  				var suffix = match.Groups [2].Value;  				var sb = new StringBuilder (variableName).Append (1).Append (suffix);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (variableName).Append (i).Append (suffix);  				}  				return sb.ToString ();  			}  			else {  				var sb = new StringBuilder ("(").Append (variableName).Append (1);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (variableName).Append (i);  				}  				return sb.Append (')').ToString ();  			}  		});  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (FeatureSupport.Get (command.Connection).Arrays) {  	var arrayParm = command.CreateParameter ();  	arrayParm.Value = list;  	arrayParm.ParameterName = namePrefix;  	command.Parameters.Add (arrayParm);  }  else {  	bool isString = value is IEnumerable<string>;  	bool isDbString = value is IEnumerable<DbString>;  	foreach (var item in list) {  		count++;  		var listParam = command.CreateParameter ();  		listParam.ParameterName = namePrefix + count;  		listParam.Value = item ?? DBNull.Value;  		if (isString) {  			listParam.Size = 4000;  			if (item != null && ((string)item).Length > 4000) {  				listParam.Size = -1;  			}  		}  		if (isDbString && item as DbString != null) {  			var str = item as DbString;  			str.AddParameter (command' listParam.ParameterName);  		}  		else {  			command.Parameters.Add (listParam);  		}  	}  	var regexIncludingUnknown = @"([?@:]" + Regex.Escape (namePrefix) + @")(\s+(?i)unknown(?-i))?";  	if (count == 0) {  		command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  			var variableName = match.Groups [1].Value;  			if (match.Groups [2].Success) {  				// looks like an optimize hint; leave it alone!  				return match.Value;  			}  			else {  				return "(SELECT " + variableName + " WHERE 1 = 0)";  			}  		});  		var dummyParam = command.CreateParameter ();  		dummyParam.ParameterName = namePrefix;  		dummyParam.Value = DBNull.Value;  		command.Parameters.Add (dummyParam);  	}  	else {  		command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  			var variableName = match.Groups [1].Value;  			if (match.Groups [2].Success) {  				// looks like an optimize hint; expand it  				var suffix = match.Groups [2].Value;  				var sb = new StringBuilder (variableName).Append (1).Append (suffix);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (variableName).Append (i).Append (suffix);  				}  				return sb.ToString ();  			}  			else {  				var sb = new StringBuilder ("(").Append (variableName).Append (1);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (variableName).Append (i);  				}  				return sb.Append (')').ToString ();  			}  		});  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: foreach (var item in list) {  	count++;  	var listParam = command.CreateParameter ();  	listParam.ParameterName = namePrefix + count;  	listParam.Value = item ?? DBNull.Value;  	if (isString) {  		listParam.Size = 4000;  		if (item != null && ((string)item).Length > 4000) {  			listParam.Size = -1;  		}  	}  	if (isDbString && item as DbString != null) {  		var str = item as DbString;  		str.AddParameter (command' listParam.ParameterName);  	}  	else {  		command.Parameters.Add (listParam);  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: foreach (var item in list) {  	count++;  	var listParam = command.CreateParameter ();  	listParam.ParameterName = namePrefix + count;  	listParam.Value = item ?? DBNull.Value;  	if (isString) {  		listParam.Size = 4000;  		if (item != null && ((string)item).Length > 4000) {  			listParam.Size = -1;  		}  	}  	if (isDbString && item as DbString != null) {  		var str = item as DbString;  		str.AddParameter (command' listParam.ParameterName);  	}  	else {  		command.Parameters.Add (listParam);  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (isString) {  	listParam.Size = 4000;  	if (item != null && ((string)item).Length > 4000) {  		listParam.Size = -1;  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (isString) {  	listParam.Size = 4000;  	if (item != null && ((string)item).Length > 4000) {  		listParam.Size = -1;  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: listParam.Size = 4000;  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (item != null && ((string)item).Length > 4000) {  	listParam.Size = -1;  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (count == 0) {  	command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  		var variableName = match.Groups [1].Value;  		if (match.Groups [2].Success) {  			// looks like an optimize hint; leave it alone!  			return match.Value;  		}  		else {  			return "(SELECT " + variableName + " WHERE 1 = 0)";  		}  	});  	var dummyParam = command.CreateParameter ();  	dummyParam.ParameterName = namePrefix;  	dummyParam.Value = DBNull.Value;  	command.Parameters.Add (dummyParam);  }  else {  	command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  		var variableName = match.Groups [1].Value;  		if (match.Groups [2].Success) {  			// looks like an optimize hint; expand it  			var suffix = match.Groups [2].Value;  			var sb = new StringBuilder (variableName).Append (1).Append (suffix);  			for (int i = 2; i <= count; i++) {  				sb.Append (''').Append (variableName).Append (i).Append (suffix);  			}  			return sb.ToString ();  		}  		else {  			var sb = new StringBuilder ("(").Append (variableName).Append (1);  			for (int i = 2; i <= count; i++) {  				sb.Append (''').Append (variableName).Append (i);  			}  			return sb.Append (')').ToString ();  		}  	});  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (count == 0) {  	command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  		var variableName = match.Groups [1].Value;  		if (match.Groups [2].Success) {  			// looks like an optimize hint; leave it alone!  			return match.Value;  		}  		else {  			return "(SELECT " + variableName + " WHERE 1 = 0)";  		}  	});  	var dummyParam = command.CreateParameter ();  	dummyParam.ParameterName = namePrefix;  	dummyParam.Value = DBNull.Value;  	command.Parameters.Add (dummyParam);  }  else {  	command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  		var variableName = match.Groups [1].Value;  		if (match.Groups [2].Success) {  			// looks like an optimize hint; expand it  			var suffix = match.Groups [2].Value;  			var sb = new StringBuilder (variableName).Append (1).Append (suffix);  			for (int i = 2; i <= count; i++) {  				sb.Append (''').Append (variableName).Append (i).Append (suffix);  			}  			return sb.ToString ();  		}  		else {  			var sb = new StringBuilder ("(").Append (variableName).Append (1);  			for (int i = 2; i <= count; i++) {  				sb.Append (''').Append (variableName).Append (i);  			}  			return sb.Append (')').ToString ();  		}  	});  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (count == 0) {  	command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  		var variableName = match.Groups [1].Value;  		if (match.Groups [2].Success) {  			// looks like an optimize hint; leave it alone!  			return match.Value;  		}  		else {  			return "(SELECT " + variableName + " WHERE 1 = 0)";  		}  	});  	var dummyParam = command.CreateParameter ();  	dummyParam.ParameterName = namePrefix;  	dummyParam.Value = DBNull.Value;  	command.Parameters.Add (dummyParam);  }  else {  	command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  		var variableName = match.Groups [1].Value;  		if (match.Groups [2].Success) {  			// looks like an optimize hint; expand it  			var suffix = match.Groups [2].Value;  			var sb = new StringBuilder (variableName).Append (1).Append (suffix);  			for (int i = 2; i <= count; i++) {  				sb.Append (''').Append (variableName).Append (i).Append (suffix);  			}  			return sb.ToString ();  		}  		else {  			var sb = new StringBuilder ("(").Append (variableName).Append (1);  			for (int i = 2; i <= count; i++) {  				sb.Append (''').Append (variableName).Append (i);  			}  			return sb.Append (')').ToString ();  		}  	});  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (count == 0) {  	command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  		var variableName = match.Groups [1].Value;  		if (match.Groups [2].Success) {  			// looks like an optimize hint; leave it alone!  			return match.Value;  		}  		else {  			return "(SELECT " + variableName + " WHERE 1 = 0)";  		}  	});  	var dummyParam = command.CreateParameter ();  	dummyParam.ParameterName = namePrefix;  	dummyParam.Value = DBNull.Value;  	command.Parameters.Add (dummyParam);  }  else {  	command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  		var variableName = match.Groups [1].Value;  		if (match.Groups [2].Success) {  			// looks like an optimize hint; expand it  			var suffix = match.Groups [2].Value;  			var sb = new StringBuilder (variableName).Append (1).Append (suffix);  			for (int i = 2; i <= count; i++) {  				sb.Append (''').Append (variableName).Append (i).Append (suffix);  			}  			return sb.ToString ();  		}  		else {  			var sb = new StringBuilder ("(").Append (variableName).Append (1);  			for (int i = 2; i <= count; i++) {  				sb.Append (''').Append (variableName).Append (i);  			}  			return sb.Append (')').ToString ();  		}  	});  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (count == 0) {  	command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  		var variableName = match.Groups [1].Value;  		if (match.Groups [2].Success) {  			// looks like an optimize hint; leave it alone!  			return match.Value;  		}  		else {  			return "(SELECT " + variableName + " WHERE 1 = 0)";  		}  	});  	var dummyParam = command.CreateParameter ();  	dummyParam.ParameterName = namePrefix;  	dummyParam.Value = DBNull.Value;  	command.Parameters.Add (dummyParam);  }  else {  	command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  		var variableName = match.Groups [1].Value;  		if (match.Groups [2].Success) {  			// looks like an optimize hint; expand it  			var suffix = match.Groups [2].Value;  			var sb = new StringBuilder (variableName).Append (1).Append (suffix);  			for (int i = 2; i <= count; i++) {  				sb.Append (''').Append (variableName).Append (i).Append (suffix);  			}  			return sb.ToString ();  		}  		else {  			var sb = new StringBuilder ("(").Append (variableName).Append (1);  			for (int i = 2; i <= count; i++) {  				sb.Append (''').Append (variableName).Append (i);  			}  			return sb.Append (')').ToString ();  		}  	});  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  	var variableName = match.Groups [1].Value;  	if (match.Groups [2].Success) {  		// looks like an optimize hint; leave it alone!  		return match.Value;  	}  	else {  		return "(SELECT " + variableName + " WHERE 1 = 0)";  	}  });  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (match.Groups [2].Success) {  	// looks like an optimize hint; leave it alone!  	return match.Value;  }  else {  	return "(SELECT " + variableName + " WHERE 1 = 0)";  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  	var variableName = match.Groups [1].Value;  	if (match.Groups [2].Success) {  		// looks like an optimize hint; expand it  		var suffix = match.Groups [2].Value;  		var sb = new StringBuilder (variableName).Append (1).Append (suffix);  		for (int i = 2; i <= count; i++) {  			sb.Append (''').Append (variableName).Append (i).Append (suffix);  		}  		return sb.ToString ();  	}  	else {  		var sb = new StringBuilder ("(").Append (variableName).Append (1);  		for (int i = 2; i <= count; i++) {  			sb.Append (''').Append (variableName).Append (i);  		}  		return sb.Append (')').ToString ();  	}  });  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  	var variableName = match.Groups [1].Value;  	if (match.Groups [2].Success) {  		// looks like an optimize hint; expand it  		var suffix = match.Groups [2].Value;  		var sb = new StringBuilder (variableName).Append (1).Append (suffix);  		for (int i = 2; i <= count; i++) {  			sb.Append (''').Append (variableName).Append (i).Append (suffix);  		}  		return sb.ToString ();  	}  	else {  		var sb = new StringBuilder ("(").Append (variableName).Append (1);  		for (int i = 2; i <= count; i++) {  			sb.Append (''').Append (variableName).Append (i);  		}  		return sb.Append (')').ToString ();  	}  });  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  	var variableName = match.Groups [1].Value;  	if (match.Groups [2].Success) {  		// looks like an optimize hint; expand it  		var suffix = match.Groups [2].Value;  		var sb = new StringBuilder (variableName).Append (1).Append (suffix);  		for (int i = 2; i <= count; i++) {  			sb.Append (''').Append (variableName).Append (i).Append (suffix);  		}  		return sb.ToString ();  	}  	else {  		var sb = new StringBuilder ("(").Append (variableName).Append (1);  		for (int i = 2; i <= count; i++) {  			sb.Append (''').Append (variableName).Append (i);  		}  		return sb.Append (')').ToString ();  	}  });  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match =>  {  	var variableName = match.Groups [1].Value;  	if (match.Groups [2].Success) {  		// looks like an optimize hint; expand it  		var suffix = match.Groups [2].Value;  		var sb = new StringBuilder (variableName).Append (1).Append (suffix);  		for (int i = 2; i <= count; i++) {  			sb.Append (''').Append (variableName).Append (i).Append (suffix);  		}  		return sb.ToString ();  	}  	else {  		var sb = new StringBuilder ("(").Append (variableName).Append (1);  		for (int i = 2; i <= count; i++) {  			sb.Append (''').Append (variableName).Append (i);  		}  		return sb.Append (')').ToString ();  	}  });  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (match.Groups [2].Success) {  	// looks like an optimize hint; expand it  	var suffix = match.Groups [2].Value;  	var sb = new StringBuilder (variableName).Append (1).Append (suffix);  	for (int i = 2; i <= count; i++) {  		sb.Append (''').Append (variableName).Append (i).Append (suffix);  	}  	return sb.ToString ();  }  else {  	var sb = new StringBuilder ("(").Append (variableName).Append (1);  	for (int i = 2; i <= count; i++) {  		sb.Append (''').Append (variableName).Append (i);  	}  	return sb.Append (')').ToString ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (match.Groups [2].Success) {  	// looks like an optimize hint; expand it  	var suffix = match.Groups [2].Value;  	var sb = new StringBuilder (variableName).Append (1).Append (suffix);  	for (int i = 2; i <= count; i++) {  		sb.Append (''').Append (variableName).Append (i).Append (suffix);  	}  	return sb.ToString ();  }  else {  	var sb = new StringBuilder ("(").Append (variableName).Append (1);  	for (int i = 2; i <= count; i++) {  		sb.Append (''').Append (variableName).Append (i);  	}  	return sb.Append (')').ToString ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (match.Groups [2].Success) {  	// looks like an optimize hint; expand it  	var suffix = match.Groups [2].Value;  	var sb = new StringBuilder (variableName).Append (1).Append (suffix);  	for (int i = 2; i <= count; i++) {  		sb.Append (''').Append (variableName).Append (i).Append (suffix);  	}  	return sb.ToString ();  }  else {  	var sb = new StringBuilder ("(").Append (variableName).Append (1);  	for (int i = 2; i <= count; i++) {  		sb.Append (''').Append (variableName).Append (i);  	}  	return sb.Append (')').ToString ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (match.Groups [2].Success) {  	// looks like an optimize hint; expand it  	var suffix = match.Groups [2].Value;  	var sb = new StringBuilder (variableName).Append (1).Append (suffix);  	for (int i = 2; i <= count; i++) {  		sb.Append (''').Append (variableName).Append (i).Append (suffix);  	}  	return sb.ToString ();  }  else {  	var sb = new StringBuilder ("(").Append (variableName).Append (1);  	for (int i = 2; i <= count; i++) {  		sb.Append (''').Append (variableName).Append (i);  	}  	return sb.Append (')').ToString ();  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: for (int i = 2; i <= count; i++) {  	sb.Append (''').Append (variableName).Append (i).Append (suffix);  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,PackListParameters,The following statement contains a magic number: for (int i = 2; i <= count; i++) {  	sb.Append (''').Append (variableName).Append (i);  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,ReplaceLiterals,The following statement contains a magic number: foreach (var token in tokens) {  	object value = parameters [token.Member];  	#pragma  	string text = Format (value);  	#pragma  	sql = sql.Replace (token.Token' text);  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,ReplaceLiterals,The following statement contains a magic number: foreach (var token in tokens) {  	object value = parameters [token.Member];  	#pragma  	string text = Format (value);  	#pragma  	sql = sql.Replace (token.Token' text);  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: foreach (var prop in props) {  	if (typeof(ICustomQueryParameter).IsAssignableFrom (prop.PropertyType)) {  		il.Emit (OpCodes.Ldloc_0);  		// stack is now [parameters] [typed-param]  		il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  		// stack is [parameters] [custom]  		il.Emit (OpCodes.Ldarg_0);  		// stack is now [parameters] [custom] [command]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [custom] [command] [name]  		il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("AddParameter")' null);  		// stack is now [parameters]  		continue;  	}  	ITypeHandler handler;  	DbType dbType = LookupDbType (prop.PropertyType' prop.Name' out handler);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		// this actually represents special handling for list types;  		il.Emit (OpCodes.Ldarg_0);  		// stack is now [parameters] [command]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [command] [name]  		il.Emit (OpCodes.Ldloc_0);  		// stack is now [parameters] [command] [name] [typed-param]  		il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  		// stack is [parameters] [command] [name] [typed-value]  		if (prop.PropertyType.IsValueType) {  			il.Emit (OpCodes.Box' prop.PropertyType);  			// stack is [parameters] [command] [name] [boxed-value]  		}  		il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod ("PackListParameters")' null);  		// stack is [parameters]  		continue;  	}  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [parameters]  	il.Emit (OpCodes.Ldarg_0);  	// stack is now [parameters] [parameters] [command]  	if (checkForDuplicates) {  		// need to be a little careful about adding; use a utility method  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [parameters] [command] [name]  		il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod ("FindOrAddParameter")' null);  		// stack is [parameters] [parameter]  	}  	else {  		// no risk of duplicates; just blindly add  		il.EmitCall (OpCodes.Callvirt' typeof(IDbCommand).GetMethod ("CreateParameter")' null);  		// stack is now [parameters] [parameters] [parameter]  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [parameters] [parameter] [parameter]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [parameters] [parameter] [parameter] [name]  		il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("ParameterName").GetSetMethod ()' null);  		// stack is now [parameters] [parameters] [parameter]  	}  	if (dbType != DbType.Time && handler == null)// https://connect.microsoft.com/VisualStudio/feedback/details/381934/sqlparameter-dbtype-dbtype-time-sets-the-parameter-to-sqldbtype-datetime-instead-of-sqldbtype-time  	 {  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [[parameters]] [parameter] [parameter]  		EmitInt32 (il' (int)dbType);  		// stack is now [parameters] [[parameters]] [parameter] [parameter] [db-type]  		il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("DbType").GetSetMethod ()' null);  		// stack is now [parameters] [[parameters]] [parameter]  	}  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [[parameters]] [parameter] [parameter]  	EmitInt32 (il' (int)ParameterDirection.Input);  	// stack is now [parameters] [[parameters]] [parameter] [parameter] [dir]  	il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("Direction").GetSetMethod ()' null);  	// stack is now [parameters] [[parameters]] [parameter]  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [[parameters]] [parameter] [parameter]  	il.Emit (OpCodes.Ldloc_0);  	// stack is now [parameters] [[parameters]] [parameter] [parameter] [typed-param]  	il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  	// stack is [parameters] [[parameters]] [parameter] [parameter] [typed-value]  	bool checkForNull = true;  	if (prop.PropertyType.IsValueType) {  		il.Emit (OpCodes.Box' prop.PropertyType);  		// stack is [parameters] [[parameters]] [parameter] [parameter] [boxed-value]  		if (Nullable.GetUnderlyingType (prop.PropertyType) == null) {  			// struct but not Nullable<T>; boxed value cannot be null  			checkForNull = false;  		}  	}  	if (checkForNull) {  		if (dbType == DbType.String && !haveInt32Arg1) {  			il.DeclareLocal (typeof(int));  			haveInt32Arg1 = true;  		}  		// relative stack: [boxed value]  		il.Emit (OpCodes.Dup);  		// relative stack: [boxed value] [boxed value]  		Label notNull = il.DefineLabel ();  		Label? allDone = dbType == DbType.String ? il.DefineLabel () : (Label?)null;  		il.Emit (OpCodes.Brtrue_S' notNull);  		// relative stack [boxed value = null]  		il.Emit (OpCodes.Pop);  		// relative stack empty  		il.Emit (OpCodes.Ldsfld' typeof(DBNull).GetField ("Value"));  		// relative stack [DBNull]  		if (dbType == DbType.String) {  			EmitInt32 (il' 0);  			il.Emit (OpCodes.Stloc_1);  		}  		if (allDone != null)  			il.Emit (OpCodes.Br_S' allDone.Value);  		il.MarkLabel (notNull);  		if (prop.PropertyType == typeof(string)) {  			il.Emit (OpCodes.Dup);  			// [string] [string]  			il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  			// [string] [length]  			EmitInt32 (il' 4000);  			// [string] [length] [4000]  			il.Emit (OpCodes.Cgt);  			// [string] [0 or 1]  			Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  			il.Emit (OpCodes.Brtrue_S' isLong);  			EmitInt32 (il' 4000);  			// [string] [4000]  			il.Emit (OpCodes.Br_S' lenDone);  			il.MarkLabel (isLong);  			EmitInt32 (il' -1);  			// [string] [-1]  			il.MarkLabel (lenDone);  			il.Emit (OpCodes.Stloc_1);  			// [string]   		}  		if (prop.PropertyType.FullName == LinqBinary) {  			il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("ToArray"' BindingFlags.Public | BindingFlags.Instance)' null);  		}  		if (allDone != null)  			il.MarkLabel (allDone.Value);  		// relative stack [boxed value or DBNull]  	}  	if (handler != null) {  		#pragma  		il.Emit (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (prop.PropertyType).GetMethod ("SetValue"));  		// stack is now [parameters] [[parameters]] [parameter]  		#pragma  	}  	else {  		il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("Value").GetSetMethod ()' null);  		// stack is now [parameters] [[parameters]] [parameter]  	}  	if (prop.PropertyType == typeof(string)) {  		var endOfSize = il.DefineLabel ();  		// don't set if 0  		il.Emit (OpCodes.Ldloc_1);  		// [parameters] [[parameters]] [parameter] [size]  		il.Emit (OpCodes.Brfalse_S' endOfSize);  		// [parameters] [[parameters]] [parameter]  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [[parameters]] [parameter] [parameter]  		il.Emit (OpCodes.Ldloc_1);  		// stack is now [parameters] [[parameters]] [parameter] [parameter] [size]  		il.EmitCall (OpCodes.Callvirt' typeof(IDbDataParameter).GetProperty ("Size").GetSetMethod ()' null);  		// stack is now [parameters] [[parameters]] [parameter]  		il.MarkLabel (endOfSize);  	}  	if (checkForDuplicates) {  		// stack is now [parameters] [parameter]  		il.Emit (OpCodes.Pop);  		// don't need parameter any more  	}  	else {  		// stack is now [parameters] [parameters] [parameter]  		// blindly add  		il.EmitCall (OpCodes.Callvirt' typeof(IList).GetMethod ("Add")' null);  		// stack is now [parameters]  		il.Emit (OpCodes.Pop);  		// IList.Add returns the new index (int); we don't care  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: foreach (var prop in props) {  	if (typeof(ICustomQueryParameter).IsAssignableFrom (prop.PropertyType)) {  		il.Emit (OpCodes.Ldloc_0);  		// stack is now [parameters] [typed-param]  		il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  		// stack is [parameters] [custom]  		il.Emit (OpCodes.Ldarg_0);  		// stack is now [parameters] [custom] [command]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [custom] [command] [name]  		il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("AddParameter")' null);  		// stack is now [parameters]  		continue;  	}  	ITypeHandler handler;  	DbType dbType = LookupDbType (prop.PropertyType' prop.Name' out handler);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		// this actually represents special handling for list types;  		il.Emit (OpCodes.Ldarg_0);  		// stack is now [parameters] [command]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [command] [name]  		il.Emit (OpCodes.Ldloc_0);  		// stack is now [parameters] [command] [name] [typed-param]  		il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  		// stack is [parameters] [command] [name] [typed-value]  		if (prop.PropertyType.IsValueType) {  			il.Emit (OpCodes.Box' prop.PropertyType);  			// stack is [parameters] [command] [name] [boxed-value]  		}  		il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod ("PackListParameters")' null);  		// stack is [parameters]  		continue;  	}  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [parameters]  	il.Emit (OpCodes.Ldarg_0);  	// stack is now [parameters] [parameters] [command]  	if (checkForDuplicates) {  		// need to be a little careful about adding; use a utility method  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [parameters] [command] [name]  		il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod ("FindOrAddParameter")' null);  		// stack is [parameters] [parameter]  	}  	else {  		// no risk of duplicates; just blindly add  		il.EmitCall (OpCodes.Callvirt' typeof(IDbCommand).GetMethod ("CreateParameter")' null);  		// stack is now [parameters] [parameters] [parameter]  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [parameters] [parameter] [parameter]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [parameters] [parameter] [parameter] [name]  		il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("ParameterName").GetSetMethod ()' null);  		// stack is now [parameters] [parameters] [parameter]  	}  	if (dbType != DbType.Time && handler == null)// https://connect.microsoft.com/VisualStudio/feedback/details/381934/sqlparameter-dbtype-dbtype-time-sets-the-parameter-to-sqldbtype-datetime-instead-of-sqldbtype-time  	 {  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [[parameters]] [parameter] [parameter]  		EmitInt32 (il' (int)dbType);  		// stack is now [parameters] [[parameters]] [parameter] [parameter] [db-type]  		il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("DbType").GetSetMethod ()' null);  		// stack is now [parameters] [[parameters]] [parameter]  	}  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [[parameters]] [parameter] [parameter]  	EmitInt32 (il' (int)ParameterDirection.Input);  	// stack is now [parameters] [[parameters]] [parameter] [parameter] [dir]  	il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("Direction").GetSetMethod ()' null);  	// stack is now [parameters] [[parameters]] [parameter]  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [[parameters]] [parameter] [parameter]  	il.Emit (OpCodes.Ldloc_0);  	// stack is now [parameters] [[parameters]] [parameter] [parameter] [typed-param]  	il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  	// stack is [parameters] [[parameters]] [parameter] [parameter] [typed-value]  	bool checkForNull = true;  	if (prop.PropertyType.IsValueType) {  		il.Emit (OpCodes.Box' prop.PropertyType);  		// stack is [parameters] [[parameters]] [parameter] [parameter] [boxed-value]  		if (Nullable.GetUnderlyingType (prop.PropertyType) == null) {  			// struct but not Nullable<T>; boxed value cannot be null  			checkForNull = false;  		}  	}  	if (checkForNull) {  		if (dbType == DbType.String && !haveInt32Arg1) {  			il.DeclareLocal (typeof(int));  			haveInt32Arg1 = true;  		}  		// relative stack: [boxed value]  		il.Emit (OpCodes.Dup);  		// relative stack: [boxed value] [boxed value]  		Label notNull = il.DefineLabel ();  		Label? allDone = dbType == DbType.String ? il.DefineLabel () : (Label?)null;  		il.Emit (OpCodes.Brtrue_S' notNull);  		// relative stack [boxed value = null]  		il.Emit (OpCodes.Pop);  		// relative stack empty  		il.Emit (OpCodes.Ldsfld' typeof(DBNull).GetField ("Value"));  		// relative stack [DBNull]  		if (dbType == DbType.String) {  			EmitInt32 (il' 0);  			il.Emit (OpCodes.Stloc_1);  		}  		if (allDone != null)  			il.Emit (OpCodes.Br_S' allDone.Value);  		il.MarkLabel (notNull);  		if (prop.PropertyType == typeof(string)) {  			il.Emit (OpCodes.Dup);  			// [string] [string]  			il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  			// [string] [length]  			EmitInt32 (il' 4000);  			// [string] [length] [4000]  			il.Emit (OpCodes.Cgt);  			// [string] [0 or 1]  			Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  			il.Emit (OpCodes.Brtrue_S' isLong);  			EmitInt32 (il' 4000);  			// [string] [4000]  			il.Emit (OpCodes.Br_S' lenDone);  			il.MarkLabel (isLong);  			EmitInt32 (il' -1);  			// [string] [-1]  			il.MarkLabel (lenDone);  			il.Emit (OpCodes.Stloc_1);  			// [string]   		}  		if (prop.PropertyType.FullName == LinqBinary) {  			il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("ToArray"' BindingFlags.Public | BindingFlags.Instance)' null);  		}  		if (allDone != null)  			il.MarkLabel (allDone.Value);  		// relative stack [boxed value or DBNull]  	}  	if (handler != null) {  		#pragma  		il.Emit (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (prop.PropertyType).GetMethod ("SetValue"));  		// stack is now [parameters] [[parameters]] [parameter]  		#pragma  	}  	else {  		il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("Value").GetSetMethod ()' null);  		// stack is now [parameters] [[parameters]] [parameter]  	}  	if (prop.PropertyType == typeof(string)) {  		var endOfSize = il.DefineLabel ();  		// don't set if 0  		il.Emit (OpCodes.Ldloc_1);  		// [parameters] [[parameters]] [parameter] [size]  		il.Emit (OpCodes.Brfalse_S' endOfSize);  		// [parameters] [[parameters]] [parameter]  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [[parameters]] [parameter] [parameter]  		il.Emit (OpCodes.Ldloc_1);  		// stack is now [parameters] [[parameters]] [parameter] [parameter] [size]  		il.EmitCall (OpCodes.Callvirt' typeof(IDbDataParameter).GetProperty ("Size").GetSetMethod ()' null);  		// stack is now [parameters] [[parameters]] [parameter]  		il.MarkLabel (endOfSize);  	}  	if (checkForDuplicates) {  		// stack is now [parameters] [parameter]  		il.Emit (OpCodes.Pop);  		// don't need parameter any more  	}  	else {  		// stack is now [parameters] [parameters] [parameter]  		// blindly add  		il.EmitCall (OpCodes.Callvirt' typeof(IList).GetMethod ("Add")' null);  		// stack is now [parameters]  		il.Emit (OpCodes.Pop);  		// IList.Add returns the new index (int); we don't care  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: foreach (var prop in props) {  	if (typeof(ICustomQueryParameter).IsAssignableFrom (prop.PropertyType)) {  		il.Emit (OpCodes.Ldloc_0);  		// stack is now [parameters] [typed-param]  		il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  		// stack is [parameters] [custom]  		il.Emit (OpCodes.Ldarg_0);  		// stack is now [parameters] [custom] [command]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [custom] [command] [name]  		il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("AddParameter")' null);  		// stack is now [parameters]  		continue;  	}  	ITypeHandler handler;  	DbType dbType = LookupDbType (prop.PropertyType' prop.Name' out handler);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		// this actually represents special handling for list types;  		il.Emit (OpCodes.Ldarg_0);  		// stack is now [parameters] [command]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [command] [name]  		il.Emit (OpCodes.Ldloc_0);  		// stack is now [parameters] [command] [name] [typed-param]  		il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  		// stack is [parameters] [command] [name] [typed-value]  		if (prop.PropertyType.IsValueType) {  			il.Emit (OpCodes.Box' prop.PropertyType);  			// stack is [parameters] [command] [name] [boxed-value]  		}  		il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod ("PackListParameters")' null);  		// stack is [parameters]  		continue;  	}  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [parameters]  	il.Emit (OpCodes.Ldarg_0);  	// stack is now [parameters] [parameters] [command]  	if (checkForDuplicates) {  		// need to be a little careful about adding; use a utility method  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [parameters] [command] [name]  		il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod ("FindOrAddParameter")' null);  		// stack is [parameters] [parameter]  	}  	else {  		// no risk of duplicates; just blindly add  		il.EmitCall (OpCodes.Callvirt' typeof(IDbCommand).GetMethod ("CreateParameter")' null);  		// stack is now [parameters] [parameters] [parameter]  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [parameters] [parameter] [parameter]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [parameters] [parameter] [parameter] [name]  		il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("ParameterName").GetSetMethod ()' null);  		// stack is now [parameters] [parameters] [parameter]  	}  	if (dbType != DbType.Time && handler == null)// https://connect.microsoft.com/VisualStudio/feedback/details/381934/sqlparameter-dbtype-dbtype-time-sets-the-parameter-to-sqldbtype-datetime-instead-of-sqldbtype-time  	 {  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [[parameters]] [parameter] [parameter]  		EmitInt32 (il' (int)dbType);  		// stack is now [parameters] [[parameters]] [parameter] [parameter] [db-type]  		il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("DbType").GetSetMethod ()' null);  		// stack is now [parameters] [[parameters]] [parameter]  	}  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [[parameters]] [parameter] [parameter]  	EmitInt32 (il' (int)ParameterDirection.Input);  	// stack is now [parameters] [[parameters]] [parameter] [parameter] [dir]  	il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("Direction").GetSetMethod ()' null);  	// stack is now [parameters] [[parameters]] [parameter]  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [[parameters]] [parameter] [parameter]  	il.Emit (OpCodes.Ldloc_0);  	// stack is now [parameters] [[parameters]] [parameter] [parameter] [typed-param]  	il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  	// stack is [parameters] [[parameters]] [parameter] [parameter] [typed-value]  	bool checkForNull = true;  	if (prop.PropertyType.IsValueType) {  		il.Emit (OpCodes.Box' prop.PropertyType);  		// stack is [parameters] [[parameters]] [parameter] [parameter] [boxed-value]  		if (Nullable.GetUnderlyingType (prop.PropertyType) == null) {  			// struct but not Nullable<T>; boxed value cannot be null  			checkForNull = false;  		}  	}  	if (checkForNull) {  		if (dbType == DbType.String && !haveInt32Arg1) {  			il.DeclareLocal (typeof(int));  			haveInt32Arg1 = true;  		}  		// relative stack: [boxed value]  		il.Emit (OpCodes.Dup);  		// relative stack: [boxed value] [boxed value]  		Label notNull = il.DefineLabel ();  		Label? allDone = dbType == DbType.String ? il.DefineLabel () : (Label?)null;  		il.Emit (OpCodes.Brtrue_S' notNull);  		// relative stack [boxed value = null]  		il.Emit (OpCodes.Pop);  		// relative stack empty  		il.Emit (OpCodes.Ldsfld' typeof(DBNull).GetField ("Value"));  		// relative stack [DBNull]  		if (dbType == DbType.String) {  			EmitInt32 (il' 0);  			il.Emit (OpCodes.Stloc_1);  		}  		if (allDone != null)  			il.Emit (OpCodes.Br_S' allDone.Value);  		il.MarkLabel (notNull);  		if (prop.PropertyType == typeof(string)) {  			il.Emit (OpCodes.Dup);  			// [string] [string]  			il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  			// [string] [length]  			EmitInt32 (il' 4000);  			// [string] [length] [4000]  			il.Emit (OpCodes.Cgt);  			// [string] [0 or 1]  			Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  			il.Emit (OpCodes.Brtrue_S' isLong);  			EmitInt32 (il' 4000);  			// [string] [4000]  			il.Emit (OpCodes.Br_S' lenDone);  			il.MarkLabel (isLong);  			EmitInt32 (il' -1);  			// [string] [-1]  			il.MarkLabel (lenDone);  			il.Emit (OpCodes.Stloc_1);  			// [string]   		}  		if (prop.PropertyType.FullName == LinqBinary) {  			il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("ToArray"' BindingFlags.Public | BindingFlags.Instance)' null);  		}  		if (allDone != null)  			il.MarkLabel (allDone.Value);  		// relative stack [boxed value or DBNull]  	}  	if (handler != null) {  		#pragma  		il.Emit (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (prop.PropertyType).GetMethod ("SetValue"));  		// stack is now [parameters] [[parameters]] [parameter]  		#pragma  	}  	else {  		il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("Value").GetSetMethod ()' null);  		// stack is now [parameters] [[parameters]] [parameter]  	}  	if (prop.PropertyType == typeof(string)) {  		var endOfSize = il.DefineLabel ();  		// don't set if 0  		il.Emit (OpCodes.Ldloc_1);  		// [parameters] [[parameters]] [parameter] [size]  		il.Emit (OpCodes.Brfalse_S' endOfSize);  		// [parameters] [[parameters]] [parameter]  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [[parameters]] [parameter] [parameter]  		il.Emit (OpCodes.Ldloc_1);  		// stack is now [parameters] [[parameters]] [parameter] [parameter] [size]  		il.EmitCall (OpCodes.Callvirt' typeof(IDbDataParameter).GetProperty ("Size").GetSetMethod ()' null);  		// stack is now [parameters] [[parameters]] [parameter]  		il.MarkLabel (endOfSize);  	}  	if (checkForDuplicates) {  		// stack is now [parameters] [parameter]  		il.Emit (OpCodes.Pop);  		// don't need parameter any more  	}  	else {  		// stack is now [parameters] [parameters] [parameter]  		// blindly add  		il.EmitCall (OpCodes.Callvirt' typeof(IList).GetMethod ("Add")' null);  		// stack is now [parameters]  		il.Emit (OpCodes.Pop);  		// IList.Add returns the new index (int); we don't care  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: foreach (var prop in props) {  	if (typeof(ICustomQueryParameter).IsAssignableFrom (prop.PropertyType)) {  		il.Emit (OpCodes.Ldloc_0);  		// stack is now [parameters] [typed-param]  		il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  		// stack is [parameters] [custom]  		il.Emit (OpCodes.Ldarg_0);  		// stack is now [parameters] [custom] [command]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [custom] [command] [name]  		il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("AddParameter")' null);  		// stack is now [parameters]  		continue;  	}  	ITypeHandler handler;  	DbType dbType = LookupDbType (prop.PropertyType' prop.Name' out handler);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		// this actually represents special handling for list types;  		il.Emit (OpCodes.Ldarg_0);  		// stack is now [parameters] [command]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [command] [name]  		il.Emit (OpCodes.Ldloc_0);  		// stack is now [parameters] [command] [name] [typed-param]  		il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  		// stack is [parameters] [command] [name] [typed-value]  		if (prop.PropertyType.IsValueType) {  			il.Emit (OpCodes.Box' prop.PropertyType);  			// stack is [parameters] [command] [name] [boxed-value]  		}  		il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod ("PackListParameters")' null);  		// stack is [parameters]  		continue;  	}  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [parameters]  	il.Emit (OpCodes.Ldarg_0);  	// stack is now [parameters] [parameters] [command]  	if (checkForDuplicates) {  		// need to be a little careful about adding; use a utility method  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [parameters] [command] [name]  		il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod ("FindOrAddParameter")' null);  		// stack is [parameters] [parameter]  	}  	else {  		// no risk of duplicates; just blindly add  		il.EmitCall (OpCodes.Callvirt' typeof(IDbCommand).GetMethod ("CreateParameter")' null);  		// stack is now [parameters] [parameters] [parameter]  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [parameters] [parameter] [parameter]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [parameters] [parameter] [parameter] [name]  		il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("ParameterName").GetSetMethod ()' null);  		// stack is now [parameters] [parameters] [parameter]  	}  	if (dbType != DbType.Time && handler == null)// https://connect.microsoft.com/VisualStudio/feedback/details/381934/sqlparameter-dbtype-dbtype-time-sets-the-parameter-to-sqldbtype-datetime-instead-of-sqldbtype-time  	 {  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [[parameters]] [parameter] [parameter]  		EmitInt32 (il' (int)dbType);  		// stack is now [parameters] [[parameters]] [parameter] [parameter] [db-type]  		il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("DbType").GetSetMethod ()' null);  		// stack is now [parameters] [[parameters]] [parameter]  	}  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [[parameters]] [parameter] [parameter]  	EmitInt32 (il' (int)ParameterDirection.Input);  	// stack is now [parameters] [[parameters]] [parameter] [parameter] [dir]  	il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("Direction").GetSetMethod ()' null);  	// stack is now [parameters] [[parameters]] [parameter]  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [[parameters]] [parameter] [parameter]  	il.Emit (OpCodes.Ldloc_0);  	// stack is now [parameters] [[parameters]] [parameter] [parameter] [typed-param]  	il.Emit (OpCodes.Callvirt' prop.GetGetMethod ());  	// stack is [parameters] [[parameters]] [parameter] [parameter] [typed-value]  	bool checkForNull = true;  	if (prop.PropertyType.IsValueType) {  		il.Emit (OpCodes.Box' prop.PropertyType);  		// stack is [parameters] [[parameters]] [parameter] [parameter] [boxed-value]  		if (Nullable.GetUnderlyingType (prop.PropertyType) == null) {  			// struct but not Nullable<T>; boxed value cannot be null  			checkForNull = false;  		}  	}  	if (checkForNull) {  		if (dbType == DbType.String && !haveInt32Arg1) {  			il.DeclareLocal (typeof(int));  			haveInt32Arg1 = true;  		}  		// relative stack: [boxed value]  		il.Emit (OpCodes.Dup);  		// relative stack: [boxed value] [boxed value]  		Label notNull = il.DefineLabel ();  		Label? allDone = dbType == DbType.String ? il.DefineLabel () : (Label?)null;  		il.Emit (OpCodes.Brtrue_S' notNull);  		// relative stack [boxed value = null]  		il.Emit (OpCodes.Pop);  		// relative stack empty  		il.Emit (OpCodes.Ldsfld' typeof(DBNull).GetField ("Value"));  		// relative stack [DBNull]  		if (dbType == DbType.String) {  			EmitInt32 (il' 0);  			il.Emit (OpCodes.Stloc_1);  		}  		if (allDone != null)  			il.Emit (OpCodes.Br_S' allDone.Value);  		il.MarkLabel (notNull);  		if (prop.PropertyType == typeof(string)) {  			il.Emit (OpCodes.Dup);  			// [string] [string]  			il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  			// [string] [length]  			EmitInt32 (il' 4000);  			// [string] [length] [4000]  			il.Emit (OpCodes.Cgt);  			// [string] [0 or 1]  			Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  			il.Emit (OpCodes.Brtrue_S' isLong);  			EmitInt32 (il' 4000);  			// [string] [4000]  			il.Emit (OpCodes.Br_S' lenDone);  			il.MarkLabel (isLong);  			EmitInt32 (il' -1);  			// [string] [-1]  			il.MarkLabel (lenDone);  			il.Emit (OpCodes.Stloc_1);  			// [string]   		}  		if (prop.PropertyType.FullName == LinqBinary) {  			il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("ToArray"' BindingFlags.Public | BindingFlags.Instance)' null);  		}  		if (allDone != null)  			il.MarkLabel (allDone.Value);  		// relative stack [boxed value or DBNull]  	}  	if (handler != null) {  		#pragma  		il.Emit (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (prop.PropertyType).GetMethod ("SetValue"));  		// stack is now [parameters] [[parameters]] [parameter]  		#pragma  	}  	else {  		il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("Value").GetSetMethod ()' null);  		// stack is now [parameters] [[parameters]] [parameter]  	}  	if (prop.PropertyType == typeof(string)) {  		var endOfSize = il.DefineLabel ();  		// don't set if 0  		il.Emit (OpCodes.Ldloc_1);  		// [parameters] [[parameters]] [parameter] [size]  		il.Emit (OpCodes.Brfalse_S' endOfSize);  		// [parameters] [[parameters]] [parameter]  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [[parameters]] [parameter] [parameter]  		il.Emit (OpCodes.Ldloc_1);  		// stack is now [parameters] [[parameters]] [parameter] [parameter] [size]  		il.EmitCall (OpCodes.Callvirt' typeof(IDbDataParameter).GetProperty ("Size").GetSetMethod ()' null);  		// stack is now [parameters] [[parameters]] [parameter]  		il.MarkLabel (endOfSize);  	}  	if (checkForDuplicates) {  		// stack is now [parameters] [parameter]  		il.Emit (OpCodes.Pop);  		// don't need parameter any more  	}  	else {  		// stack is now [parameters] [parameters] [parameter]  		// blindly add  		il.EmitCall (OpCodes.Callvirt' typeof(IList).GetMethod ("Add")' null);  		// stack is now [parameters]  		il.Emit (OpCodes.Pop);  		// IList.Add returns the new index (int); we don't care  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: if (checkForNull) {  	if (dbType == DbType.String && !haveInt32Arg1) {  		il.DeclareLocal (typeof(int));  		haveInt32Arg1 = true;  	}  	// relative stack: [boxed value]  	il.Emit (OpCodes.Dup);  	// relative stack: [boxed value] [boxed value]  	Label notNull = il.DefineLabel ();  	Label? allDone = dbType == DbType.String ? il.DefineLabel () : (Label?)null;  	il.Emit (OpCodes.Brtrue_S' notNull);  	// relative stack [boxed value = null]  	il.Emit (OpCodes.Pop);  	// relative stack empty  	il.Emit (OpCodes.Ldsfld' typeof(DBNull).GetField ("Value"));  	// relative stack [DBNull]  	if (dbType == DbType.String) {  		EmitInt32 (il' 0);  		il.Emit (OpCodes.Stloc_1);  	}  	if (allDone != null)  		il.Emit (OpCodes.Br_S' allDone.Value);  	il.MarkLabel (notNull);  	if (prop.PropertyType == typeof(string)) {  		il.Emit (OpCodes.Dup);  		// [string] [string]  		il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  		// [string] [length]  		EmitInt32 (il' 4000);  		// [string] [length] [4000]  		il.Emit (OpCodes.Cgt);  		// [string] [0 or 1]  		Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  		il.Emit (OpCodes.Brtrue_S' isLong);  		EmitInt32 (il' 4000);  		// [string] [4000]  		il.Emit (OpCodes.Br_S' lenDone);  		il.MarkLabel (isLong);  		EmitInt32 (il' -1);  		// [string] [-1]  		il.MarkLabel (lenDone);  		il.Emit (OpCodes.Stloc_1);  		// [string]   	}  	if (prop.PropertyType.FullName == LinqBinary) {  		il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("ToArray"' BindingFlags.Public | BindingFlags.Instance)' null);  	}  	if (allDone != null)  		il.MarkLabel (allDone.Value);  	// relative stack [boxed value or DBNull]  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: if (checkForNull) {  	if (dbType == DbType.String && !haveInt32Arg1) {  		il.DeclareLocal (typeof(int));  		haveInt32Arg1 = true;  	}  	// relative stack: [boxed value]  	il.Emit (OpCodes.Dup);  	// relative stack: [boxed value] [boxed value]  	Label notNull = il.DefineLabel ();  	Label? allDone = dbType == DbType.String ? il.DefineLabel () : (Label?)null;  	il.Emit (OpCodes.Brtrue_S' notNull);  	// relative stack [boxed value = null]  	il.Emit (OpCodes.Pop);  	// relative stack empty  	il.Emit (OpCodes.Ldsfld' typeof(DBNull).GetField ("Value"));  	// relative stack [DBNull]  	if (dbType == DbType.String) {  		EmitInt32 (il' 0);  		il.Emit (OpCodes.Stloc_1);  	}  	if (allDone != null)  		il.Emit (OpCodes.Br_S' allDone.Value);  	il.MarkLabel (notNull);  	if (prop.PropertyType == typeof(string)) {  		il.Emit (OpCodes.Dup);  		// [string] [string]  		il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  		// [string] [length]  		EmitInt32 (il' 4000);  		// [string] [length] [4000]  		il.Emit (OpCodes.Cgt);  		// [string] [0 or 1]  		Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  		il.Emit (OpCodes.Brtrue_S' isLong);  		EmitInt32 (il' 4000);  		// [string] [4000]  		il.Emit (OpCodes.Br_S' lenDone);  		il.MarkLabel (isLong);  		EmitInt32 (il' -1);  		// [string] [-1]  		il.MarkLabel (lenDone);  		il.Emit (OpCodes.Stloc_1);  		// [string]   	}  	if (prop.PropertyType.FullName == LinqBinary) {  		il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("ToArray"' BindingFlags.Public | BindingFlags.Instance)' null);  	}  	if (allDone != null)  		il.MarkLabel (allDone.Value);  	// relative stack [boxed value or DBNull]  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: if (prop.PropertyType == typeof(string)) {  	il.Emit (OpCodes.Dup);  	// [string] [string]  	il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  	// [string] [length]  	EmitInt32 (il' 4000);  	// [string] [length] [4000]  	il.Emit (OpCodes.Cgt);  	// [string] [0 or 1]  	Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  	il.Emit (OpCodes.Brtrue_S' isLong);  	EmitInt32 (il' 4000);  	// [string] [4000]  	il.Emit (OpCodes.Br_S' lenDone);  	il.MarkLabel (isLong);  	EmitInt32 (il' -1);  	// [string] [-1]  	il.MarkLabel (lenDone);  	il.Emit (OpCodes.Stloc_1);  	// [string]   }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: if (prop.PropertyType == typeof(string)) {  	il.Emit (OpCodes.Dup);  	// [string] [string]  	il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  	// [string] [length]  	EmitInt32 (il' 4000);  	// [string] [length] [4000]  	il.Emit (OpCodes.Cgt);  	// [string] [0 or 1]  	Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  	il.Emit (OpCodes.Brtrue_S' isLong);  	EmitInt32 (il' 4000);  	// [string] [4000]  	il.Emit (OpCodes.Br_S' lenDone);  	il.MarkLabel (isLong);  	EmitInt32 (il' -1);  	// [string] [-1]  	il.MarkLabel (lenDone);  	il.Emit (OpCodes.Stloc_1);  	// [string]   }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: EmitInt32 (il' 4000);  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: EmitInt32 (il' 4000);  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: if (handler != null) {  	#pragma  	il.Emit (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (prop.PropertyType).GetMethod ("SetValue"));  	// stack is now [parameters] [[parameters]] [parameter]  	#pragma  }  else {  	il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("Value").GetSetMethod ()' null);  	// stack is now [parameters] [[parameters]] [parameter]  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: if (handler != null) {  	#pragma  	il.Emit (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (prop.PropertyType).GetMethod ("SetValue"));  	// stack is now [parameters] [[parameters]] [parameter]  	#pragma  }  else {  	il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("Value").GetSetMethod ()' null);  	// stack is now [parameters] [[parameters]] [parameter]  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetTypeDeserializer,The following statement contains a magic number: foreach (var item in members) {  	if (item != null) {  		if (specializedConstructor == null)  			il.Emit (OpCodes.Dup);  		// stack is now [target][target]  		Label isDbNullLabel = il.DefineLabel ();  		Label finishLabel = il.DefineLabel ();  		il.Emit (OpCodes.Ldarg_0);  		// stack is now [target][target][reader]  		EmitInt32 (il' index);  		// stack is now [target][target][reader][index]  		il.Emit (OpCodes.Dup);  		// stack is now [target][target][reader][index][index]  		il.Emit (OpCodes.Stloc_0);  		// stack is now [target][target][reader][index]  		il.Emit (OpCodes.Callvirt' getItem);  		// stack is now [target][target][value-as-object]  		Type memberType = item.MemberType;  		if (memberType == typeof(char) || memberType == typeof(char?)) {  			il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod (memberType == typeof(char) ? "ReadChar" : "ReadNullableChar"' BindingFlags.Static | BindingFlags.Public)' null);  			// stack is now [target][target][typed-value]  		}  		else {  			il.Emit (OpCodes.Dup);  			// stack is now [target][target][value][value]  			il.Emit (OpCodes.Isinst' typeof(DBNull));  			// stack is now [target][target][value-as-object][DBNull or null]  			il.Emit (OpCodes.Brtrue_S' isDbNullLabel);  			// stack is now [target][target][value-as-object]  			// unbox nullable enums as the primitive' i.e. byte etc  			var nullUnderlyingType = Nullable.GetUnderlyingType (memberType);  			var unboxType = nullUnderlyingType != null && nullUnderlyingType.IsEnum ? nullUnderlyingType : memberType;  			if (unboxType.IsEnum) {  				if (enumDeclareLocal == -1) {  					enumDeclareLocal = il.DeclareLocal (typeof(string)).LocalIndex;  				}  				Label isNotString = il.DefineLabel ();  				il.Emit (OpCodes.Dup);  				// stack is now [target][target][value][value]  				il.Emit (OpCodes.Isinst' typeof(string));  				// stack is now [target][target][value-as-object][string or null]  				il.Emit (OpCodes.Dup);  				// stack is now [target][target][value-as-object][string or null][string or null]  				StoreLocal (il' enumDeclareLocal);  				// stack is now [target][target][value-as-object][string or null]  				il.Emit (OpCodes.Brfalse_S' isNotString);  				// stack is now [target][target][value-as-object]  				il.Emit (OpCodes.Pop);  				// stack is now [target][target]  				il.Emit (OpCodes.Ldtoken' unboxType);  				// stack is now [target][target][enum-type-token]  				il.EmitCall (OpCodes.Call' typeof(Type).GetMethod ("GetTypeFromHandle")' null);  				// stack is now [target][target][enum-type]  				il.Emit (OpCodes.Ldloc_2);  				// stack is now [target][target][enum-type][string]  				il.Emit (OpCodes.Ldc_I4_1);  				// stack is now [target][target][enum-type][string][true]  				il.EmitCall (OpCodes.Call' enumParse' null);  				// stack is now [target][target][enum-as-object]  				il.MarkLabel (isNotString);  				il.Emit (OpCodes.Unbox_Any' unboxType);  				// stack is now [target][target][typed-value]  				if (nullUnderlyingType != null) {  					il.Emit (OpCodes.Newobj' memberType.GetConstructor (new[] {  						nullUnderlyingType  					}));  					// stack is now [target][target][enum-value]  				}  			}  			else if (memberType.FullName == LinqBinary) {  				il.Emit (OpCodes.Unbox_Any' typeof(byte[]));  				// stack is now [target][target][byte-array]  				il.Emit (OpCodes.Newobj' memberType.GetConstructor (new Type[] {  					typeof(byte[])  				}));  				// stack is now [target][target][binary]  			}  			else {  				Type dataType = reader.GetFieldType (index);  				TypeCode dataTypeCode = Type.GetTypeCode (dataType)' unboxTypeCode = Type.GetTypeCode (unboxType);  				if (dataType == unboxType || dataTypeCode == unboxTypeCode || dataTypeCode == Type.GetTypeCode (nullUnderlyingType)) {  					if (typeHandlers.ContainsKey (unboxType)) {  						#pragma  						il.EmitCall (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (unboxType).GetMethod ("Parse")' null);  						// stack is now [target][target][typed-value]  						#pragma  					}  					else {  						il.Emit (OpCodes.Unbox_Any' unboxType);  						// stack is now [target][target][typed-value]  					}  				}  				else {  					// not a direct match; need to tweak the unbox  					MethodInfo op;  					if ((op = GetOperator (dataType' nullUnderlyingType ?? unboxType)) != null) {  						// this is handy for things like decimal <===> double  						il.Emit (OpCodes.Unbox_Any' dataType);  						// stack is now [target][target][data-typed-value]  						il.Emit (OpCodes.Call' op);  						// stack is now [target][target][typed-value]  					}  					else {  						bool handled = true;  						OpCode opCode = default(OpCode);  						if (dataTypeCode == TypeCode.Decimal || unboxTypeCode == TypeCode.Decimal) {  							// no IL level conversions to/from decimal; I guess we could use the static operators' but  							// this feels an edge-case  							handled = false;  						}  						else {  							switch (unboxTypeCode) {  							case TypeCode.Byte:  								opCode = OpCodes.Conv_Ovf_I1_Un;  								break;  							case TypeCode.SByte:  								opCode = OpCodes.Conv_Ovf_I1;  								break;  							case TypeCode.UInt16:  								opCode = OpCodes.Conv_Ovf_I2_Un;  								break;  							case TypeCode.Int16:  								opCode = OpCodes.Conv_Ovf_I2;  								break;  							case TypeCode.UInt32:  								opCode = OpCodes.Conv_Ovf_I4_Un;  								break;  							case TypeCode.Boolean:  							// boolean is basically an int' at least at this level  							case TypeCode.Int32:  								opCode = OpCodes.Conv_Ovf_I4;  								break;  							case TypeCode.UInt64:  								opCode = OpCodes.Conv_Ovf_I8_Un;  								break;  							case TypeCode.Int64:  								opCode = OpCodes.Conv_Ovf_I8;  								break;  							case TypeCode.Single:  								opCode = OpCodes.Conv_R4;  								break;  							case TypeCode.Double:  								opCode = OpCodes.Conv_R8;  								break;  							default:  								handled = false;  								break;  							}  						}  						if (handled) {  							// unbox as the data-type' then use IL-level convert  							il.Emit (OpCodes.Unbox_Any' dataType);  							// stack is now [target][target][data-typed-value]  							il.Emit (opCode);  							// stack is now [target][target][typed-value]  							if (unboxTypeCode == TypeCode.Boolean) {  								// compare to zero; I checked "csc" - this is the trick it uses; nice  								il.Emit (OpCodes.Ldc_I4_0);  								il.Emit (OpCodes.Ceq);  								il.Emit (OpCodes.Ldc_I4_0);  								il.Emit (OpCodes.Ceq);  							}  						}  						else {  							// use flexible conversion  							il.Emit (OpCodes.Ldtoken' nullUnderlyingType ?? unboxType);  							// stack is now [target][target][value][member-type-token]  							il.EmitCall (OpCodes.Call' typeof(Type).GetMethod ("GetTypeFromHandle")' null);  							// stack is now [target][target][value][member-type]  							il.EmitCall (OpCodes.Call' typeof(Convert).GetMethod ("ChangeType"' new Type[] {  								typeof(object)'  								typeof(Type)  							})' null);  							// stack is now [target][target][boxed-member-type-value]  							il.Emit (OpCodes.Unbox_Any' nullUnderlyingType ?? unboxType);  							// stack is now [target][target][typed-value]  						}  					}  					if (nullUnderlyingType != null) {  						il.Emit (OpCodes.Newobj' unboxType.GetConstructor (new[] {  							nullUnderlyingType  						}));  						// stack is now [target][target][typed-value]  					}  				}  			}  		}  		if (specializedConstructor == null) {  			// Store the value in the property/field  			if (item.Property != null) {  				if (type.IsValueType) {  					il.Emit (OpCodes.Call' DefaultTypeMap.GetPropertySetter (item.Property' type));  					// stack is now [target]  				}  				else {  					il.Emit (OpCodes.Callvirt' DefaultTypeMap.GetPropertySetter (item.Property' type));  					// stack is now [target]  				}  			}  			else {  				il.Emit (OpCodes.Stfld' item.Field);  				// stack is now [target]  			}  		}  		il.Emit (OpCodes.Br_S' finishLabel);  		// stack is now [target]  		il.MarkLabel (isDbNullLabel);  		// incoming stack: [target][target][value]  		if (specializedConstructor != null) {  			il.Emit (OpCodes.Pop);  			if (item.MemberType.IsValueType) {  				int localIndex = il.DeclareLocal (item.MemberType).LocalIndex;  				LoadLocalAddress (il' localIndex);  				il.Emit (OpCodes.Initobj' item.MemberType);  				LoadLocal (il' localIndex);  			}  			else {  				il.Emit (OpCodes.Ldnull);  			}  		}  		else {  			il.Emit (OpCodes.Pop);  			// stack is now [target][target]  			il.Emit (OpCodes.Pop);  			// stack is now [target]  		}  		if (first && returnNullIfFirstMissing) {  			il.Emit (OpCodes.Pop);  			il.Emit (OpCodes.Ldnull);  			// stack is now [null]  			il.Emit (OpCodes.Stloc_1);  			il.Emit (OpCodes.Br' allDone);  		}  		il.MarkLabel (finishLabel);  	}  	first = false;  	index += 1;  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetTypeDeserializer,The following statement contains a magic number: foreach (var item in members) {  	if (item != null) {  		if (specializedConstructor == null)  			il.Emit (OpCodes.Dup);  		// stack is now [target][target]  		Label isDbNullLabel = il.DefineLabel ();  		Label finishLabel = il.DefineLabel ();  		il.Emit (OpCodes.Ldarg_0);  		// stack is now [target][target][reader]  		EmitInt32 (il' index);  		// stack is now [target][target][reader][index]  		il.Emit (OpCodes.Dup);  		// stack is now [target][target][reader][index][index]  		il.Emit (OpCodes.Stloc_0);  		// stack is now [target][target][reader][index]  		il.Emit (OpCodes.Callvirt' getItem);  		// stack is now [target][target][value-as-object]  		Type memberType = item.MemberType;  		if (memberType == typeof(char) || memberType == typeof(char?)) {  			il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod (memberType == typeof(char) ? "ReadChar" : "ReadNullableChar"' BindingFlags.Static | BindingFlags.Public)' null);  			// stack is now [target][target][typed-value]  		}  		else {  			il.Emit (OpCodes.Dup);  			// stack is now [target][target][value][value]  			il.Emit (OpCodes.Isinst' typeof(DBNull));  			// stack is now [target][target][value-as-object][DBNull or null]  			il.Emit (OpCodes.Brtrue_S' isDbNullLabel);  			// stack is now [target][target][value-as-object]  			// unbox nullable enums as the primitive' i.e. byte etc  			var nullUnderlyingType = Nullable.GetUnderlyingType (memberType);  			var unboxType = nullUnderlyingType != null && nullUnderlyingType.IsEnum ? nullUnderlyingType : memberType;  			if (unboxType.IsEnum) {  				if (enumDeclareLocal == -1) {  					enumDeclareLocal = il.DeclareLocal (typeof(string)).LocalIndex;  				}  				Label isNotString = il.DefineLabel ();  				il.Emit (OpCodes.Dup);  				// stack is now [target][target][value][value]  				il.Emit (OpCodes.Isinst' typeof(string));  				// stack is now [target][target][value-as-object][string or null]  				il.Emit (OpCodes.Dup);  				// stack is now [target][target][value-as-object][string or null][string or null]  				StoreLocal (il' enumDeclareLocal);  				// stack is now [target][target][value-as-object][string or null]  				il.Emit (OpCodes.Brfalse_S' isNotString);  				// stack is now [target][target][value-as-object]  				il.Emit (OpCodes.Pop);  				// stack is now [target][target]  				il.Emit (OpCodes.Ldtoken' unboxType);  				// stack is now [target][target][enum-type-token]  				il.EmitCall (OpCodes.Call' typeof(Type).GetMethod ("GetTypeFromHandle")' null);  				// stack is now [target][target][enum-type]  				il.Emit (OpCodes.Ldloc_2);  				// stack is now [target][target][enum-type][string]  				il.Emit (OpCodes.Ldc_I4_1);  				// stack is now [target][target][enum-type][string][true]  				il.EmitCall (OpCodes.Call' enumParse' null);  				// stack is now [target][target][enum-as-object]  				il.MarkLabel (isNotString);  				il.Emit (OpCodes.Unbox_Any' unboxType);  				// stack is now [target][target][typed-value]  				if (nullUnderlyingType != null) {  					il.Emit (OpCodes.Newobj' memberType.GetConstructor (new[] {  						nullUnderlyingType  					}));  					// stack is now [target][target][enum-value]  				}  			}  			else if (memberType.FullName == LinqBinary) {  				il.Emit (OpCodes.Unbox_Any' typeof(byte[]));  				// stack is now [target][target][byte-array]  				il.Emit (OpCodes.Newobj' memberType.GetConstructor (new Type[] {  					typeof(byte[])  				}));  				// stack is now [target][target][binary]  			}  			else {  				Type dataType = reader.GetFieldType (index);  				TypeCode dataTypeCode = Type.GetTypeCode (dataType)' unboxTypeCode = Type.GetTypeCode (unboxType);  				if (dataType == unboxType || dataTypeCode == unboxTypeCode || dataTypeCode == Type.GetTypeCode (nullUnderlyingType)) {  					if (typeHandlers.ContainsKey (unboxType)) {  						#pragma  						il.EmitCall (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (unboxType).GetMethod ("Parse")' null);  						// stack is now [target][target][typed-value]  						#pragma  					}  					else {  						il.Emit (OpCodes.Unbox_Any' unboxType);  						// stack is now [target][target][typed-value]  					}  				}  				else {  					// not a direct match; need to tweak the unbox  					MethodInfo op;  					if ((op = GetOperator (dataType' nullUnderlyingType ?? unboxType)) != null) {  						// this is handy for things like decimal <===> double  						il.Emit (OpCodes.Unbox_Any' dataType);  						// stack is now [target][target][data-typed-value]  						il.Emit (OpCodes.Call' op);  						// stack is now [target][target][typed-value]  					}  					else {  						bool handled = true;  						OpCode opCode = default(OpCode);  						if (dataTypeCode == TypeCode.Decimal || unboxTypeCode == TypeCode.Decimal) {  							// no IL level conversions to/from decimal; I guess we could use the static operators' but  							// this feels an edge-case  							handled = false;  						}  						else {  							switch (unboxTypeCode) {  							case TypeCode.Byte:  								opCode = OpCodes.Conv_Ovf_I1_Un;  								break;  							case TypeCode.SByte:  								opCode = OpCodes.Conv_Ovf_I1;  								break;  							case TypeCode.UInt16:  								opCode = OpCodes.Conv_Ovf_I2_Un;  								break;  							case TypeCode.Int16:  								opCode = OpCodes.Conv_Ovf_I2;  								break;  							case TypeCode.UInt32:  								opCode = OpCodes.Conv_Ovf_I4_Un;  								break;  							case TypeCode.Boolean:  							// boolean is basically an int' at least at this level  							case TypeCode.Int32:  								opCode = OpCodes.Conv_Ovf_I4;  								break;  							case TypeCode.UInt64:  								opCode = OpCodes.Conv_Ovf_I8_Un;  								break;  							case TypeCode.Int64:  								opCode = OpCodes.Conv_Ovf_I8;  								break;  							case TypeCode.Single:  								opCode = OpCodes.Conv_R4;  								break;  							case TypeCode.Double:  								opCode = OpCodes.Conv_R8;  								break;  							default:  								handled = false;  								break;  							}  						}  						if (handled) {  							// unbox as the data-type' then use IL-level convert  							il.Emit (OpCodes.Unbox_Any' dataType);  							// stack is now [target][target][data-typed-value]  							il.Emit (opCode);  							// stack is now [target][target][typed-value]  							if (unboxTypeCode == TypeCode.Boolean) {  								// compare to zero; I checked "csc" - this is the trick it uses; nice  								il.Emit (OpCodes.Ldc_I4_0);  								il.Emit (OpCodes.Ceq);  								il.Emit (OpCodes.Ldc_I4_0);  								il.Emit (OpCodes.Ceq);  							}  						}  						else {  							// use flexible conversion  							il.Emit (OpCodes.Ldtoken' nullUnderlyingType ?? unboxType);  							// stack is now [target][target][value][member-type-token]  							il.EmitCall (OpCodes.Call' typeof(Type).GetMethod ("GetTypeFromHandle")' null);  							// stack is now [target][target][value][member-type]  							il.EmitCall (OpCodes.Call' typeof(Convert).GetMethod ("ChangeType"' new Type[] {  								typeof(object)'  								typeof(Type)  							})' null);  							// stack is now [target][target][boxed-member-type-value]  							il.Emit (OpCodes.Unbox_Any' nullUnderlyingType ?? unboxType);  							// stack is now [target][target][typed-value]  						}  					}  					if (nullUnderlyingType != null) {  						il.Emit (OpCodes.Newobj' unboxType.GetConstructor (new[] {  							nullUnderlyingType  						}));  						// stack is now [target][target][typed-value]  					}  				}  			}  		}  		if (specializedConstructor == null) {  			// Store the value in the property/field  			if (item.Property != null) {  				if (type.IsValueType) {  					il.Emit (OpCodes.Call' DefaultTypeMap.GetPropertySetter (item.Property' type));  					// stack is now [target]  				}  				else {  					il.Emit (OpCodes.Callvirt' DefaultTypeMap.GetPropertySetter (item.Property' type));  					// stack is now [target]  				}  			}  			else {  				il.Emit (OpCodes.Stfld' item.Field);  				// stack is now [target]  			}  		}  		il.Emit (OpCodes.Br_S' finishLabel);  		// stack is now [target]  		il.MarkLabel (isDbNullLabel);  		// incoming stack: [target][target][value]  		if (specializedConstructor != null) {  			il.Emit (OpCodes.Pop);  			if (item.MemberType.IsValueType) {  				int localIndex = il.DeclareLocal (item.MemberType).LocalIndex;  				LoadLocalAddress (il' localIndex);  				il.Emit (OpCodes.Initobj' item.MemberType);  				LoadLocal (il' localIndex);  			}  			else {  				il.Emit (OpCodes.Ldnull);  			}  		}  		else {  			il.Emit (OpCodes.Pop);  			// stack is now [target][target]  			il.Emit (OpCodes.Pop);  			// stack is now [target]  		}  		if (first && returnNullIfFirstMissing) {  			il.Emit (OpCodes.Pop);  			il.Emit (OpCodes.Ldnull);  			// stack is now [null]  			il.Emit (OpCodes.Stloc_1);  			il.Emit (OpCodes.Br' allDone);  		}  		il.MarkLabel (finishLabel);  	}  	first = false;  	index += 1;  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetTypeDeserializer,The following statement contains a magic number: if (item != null) {  	if (specializedConstructor == null)  		il.Emit (OpCodes.Dup);  	// stack is now [target][target]  	Label isDbNullLabel = il.DefineLabel ();  	Label finishLabel = il.DefineLabel ();  	il.Emit (OpCodes.Ldarg_0);  	// stack is now [target][target][reader]  	EmitInt32 (il' index);  	// stack is now [target][target][reader][index]  	il.Emit (OpCodes.Dup);  	// stack is now [target][target][reader][index][index]  	il.Emit (OpCodes.Stloc_0);  	// stack is now [target][target][reader][index]  	il.Emit (OpCodes.Callvirt' getItem);  	// stack is now [target][target][value-as-object]  	Type memberType = item.MemberType;  	if (memberType == typeof(char) || memberType == typeof(char?)) {  		il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod (memberType == typeof(char) ? "ReadChar" : "ReadNullableChar"' BindingFlags.Static | BindingFlags.Public)' null);  		// stack is now [target][target][typed-value]  	}  	else {  		il.Emit (OpCodes.Dup);  		// stack is now [target][target][value][value]  		il.Emit (OpCodes.Isinst' typeof(DBNull));  		// stack is now [target][target][value-as-object][DBNull or null]  		il.Emit (OpCodes.Brtrue_S' isDbNullLabel);  		// stack is now [target][target][value-as-object]  		// unbox nullable enums as the primitive' i.e. byte etc  		var nullUnderlyingType = Nullable.GetUnderlyingType (memberType);  		var unboxType = nullUnderlyingType != null && nullUnderlyingType.IsEnum ? nullUnderlyingType : memberType;  		if (unboxType.IsEnum) {  			if (enumDeclareLocal == -1) {  				enumDeclareLocal = il.DeclareLocal (typeof(string)).LocalIndex;  			}  			Label isNotString = il.DefineLabel ();  			il.Emit (OpCodes.Dup);  			// stack is now [target][target][value][value]  			il.Emit (OpCodes.Isinst' typeof(string));  			// stack is now [target][target][value-as-object][string or null]  			il.Emit (OpCodes.Dup);  			// stack is now [target][target][value-as-object][string or null][string or null]  			StoreLocal (il' enumDeclareLocal);  			// stack is now [target][target][value-as-object][string or null]  			il.Emit (OpCodes.Brfalse_S' isNotString);  			// stack is now [target][target][value-as-object]  			il.Emit (OpCodes.Pop);  			// stack is now [target][target]  			il.Emit (OpCodes.Ldtoken' unboxType);  			// stack is now [target][target][enum-type-token]  			il.EmitCall (OpCodes.Call' typeof(Type).GetMethod ("GetTypeFromHandle")' null);  			// stack is now [target][target][enum-type]  			il.Emit (OpCodes.Ldloc_2);  			// stack is now [target][target][enum-type][string]  			il.Emit (OpCodes.Ldc_I4_1);  			// stack is now [target][target][enum-type][string][true]  			il.EmitCall (OpCodes.Call' enumParse' null);  			// stack is now [target][target][enum-as-object]  			il.MarkLabel (isNotString);  			il.Emit (OpCodes.Unbox_Any' unboxType);  			// stack is now [target][target][typed-value]  			if (nullUnderlyingType != null) {  				il.Emit (OpCodes.Newobj' memberType.GetConstructor (new[] {  					nullUnderlyingType  				}));  				// stack is now [target][target][enum-value]  			}  		}  		else if (memberType.FullName == LinqBinary) {  			il.Emit (OpCodes.Unbox_Any' typeof(byte[]));  			// stack is now [target][target][byte-array]  			il.Emit (OpCodes.Newobj' memberType.GetConstructor (new Type[] {  				typeof(byte[])  			}));  			// stack is now [target][target][binary]  		}  		else {  			Type dataType = reader.GetFieldType (index);  			TypeCode dataTypeCode = Type.GetTypeCode (dataType)' unboxTypeCode = Type.GetTypeCode (unboxType);  			if (dataType == unboxType || dataTypeCode == unboxTypeCode || dataTypeCode == Type.GetTypeCode (nullUnderlyingType)) {  				if (typeHandlers.ContainsKey (unboxType)) {  					#pragma  					il.EmitCall (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (unboxType).GetMethod ("Parse")' null);  					// stack is now [target][target][typed-value]  					#pragma  				}  				else {  					il.Emit (OpCodes.Unbox_Any' unboxType);  					// stack is now [target][target][typed-value]  				}  			}  			else {  				// not a direct match; need to tweak the unbox  				MethodInfo op;  				if ((op = GetOperator (dataType' nullUnderlyingType ?? unboxType)) != null) {  					// this is handy for things like decimal <===> double  					il.Emit (OpCodes.Unbox_Any' dataType);  					// stack is now [target][target][data-typed-value]  					il.Emit (OpCodes.Call' op);  					// stack is now [target][target][typed-value]  				}  				else {  					bool handled = true;  					OpCode opCode = default(OpCode);  					if (dataTypeCode == TypeCode.Decimal || unboxTypeCode == TypeCode.Decimal) {  						// no IL level conversions to/from decimal; I guess we could use the static operators' but  						// this feels an edge-case  						handled = false;  					}  					else {  						switch (unboxTypeCode) {  						case TypeCode.Byte:  							opCode = OpCodes.Conv_Ovf_I1_Un;  							break;  						case TypeCode.SByte:  							opCode = OpCodes.Conv_Ovf_I1;  							break;  						case TypeCode.UInt16:  							opCode = OpCodes.Conv_Ovf_I2_Un;  							break;  						case TypeCode.Int16:  							opCode = OpCodes.Conv_Ovf_I2;  							break;  						case TypeCode.UInt32:  							opCode = OpCodes.Conv_Ovf_I4_Un;  							break;  						case TypeCode.Boolean:  						// boolean is basically an int' at least at this level  						case TypeCode.Int32:  							opCode = OpCodes.Conv_Ovf_I4;  							break;  						case TypeCode.UInt64:  							opCode = OpCodes.Conv_Ovf_I8_Un;  							break;  						case TypeCode.Int64:  							opCode = OpCodes.Conv_Ovf_I8;  							break;  						case TypeCode.Single:  							opCode = OpCodes.Conv_R4;  							break;  						case TypeCode.Double:  							opCode = OpCodes.Conv_R8;  							break;  						default:  							handled = false;  							break;  						}  					}  					if (handled) {  						// unbox as the data-type' then use IL-level convert  						il.Emit (OpCodes.Unbox_Any' dataType);  						// stack is now [target][target][data-typed-value]  						il.Emit (opCode);  						// stack is now [target][target][typed-value]  						if (unboxTypeCode == TypeCode.Boolean) {  							// compare to zero; I checked "csc" - this is the trick it uses; nice  							il.Emit (OpCodes.Ldc_I4_0);  							il.Emit (OpCodes.Ceq);  							il.Emit (OpCodes.Ldc_I4_0);  							il.Emit (OpCodes.Ceq);  						}  					}  					else {  						// use flexible conversion  						il.Emit (OpCodes.Ldtoken' nullUnderlyingType ?? unboxType);  						// stack is now [target][target][value][member-type-token]  						il.EmitCall (OpCodes.Call' typeof(Type).GetMethod ("GetTypeFromHandle")' null);  						// stack is now [target][target][value][member-type]  						il.EmitCall (OpCodes.Call' typeof(Convert).GetMethod ("ChangeType"' new Type[] {  							typeof(object)'  							typeof(Type)  						})' null);  						// stack is now [target][target][boxed-member-type-value]  						il.Emit (OpCodes.Unbox_Any' nullUnderlyingType ?? unboxType);  						// stack is now [target][target][typed-value]  					}  				}  				if (nullUnderlyingType != null) {  					il.Emit (OpCodes.Newobj' unboxType.GetConstructor (new[] {  						nullUnderlyingType  					}));  					// stack is now [target][target][typed-value]  				}  			}  		}  	}  	if (specializedConstructor == null) {  		// Store the value in the property/field  		if (item.Property != null) {  			if (type.IsValueType) {  				il.Emit (OpCodes.Call' DefaultTypeMap.GetPropertySetter (item.Property' type));  				// stack is now [target]  			}  			else {  				il.Emit (OpCodes.Callvirt' DefaultTypeMap.GetPropertySetter (item.Property' type));  				// stack is now [target]  			}  		}  		else {  			il.Emit (OpCodes.Stfld' item.Field);  			// stack is now [target]  		}  	}  	il.Emit (OpCodes.Br_S' finishLabel);  	// stack is now [target]  	il.MarkLabel (isDbNullLabel);  	// incoming stack: [target][target][value]  	if (specializedConstructor != null) {  		il.Emit (OpCodes.Pop);  		if (item.MemberType.IsValueType) {  			int localIndex = il.DeclareLocal (item.MemberType).LocalIndex;  			LoadLocalAddress (il' localIndex);  			il.Emit (OpCodes.Initobj' item.MemberType);  			LoadLocal (il' localIndex);  		}  		else {  			il.Emit (OpCodes.Ldnull);  		}  	}  	else {  		il.Emit (OpCodes.Pop);  		// stack is now [target][target]  		il.Emit (OpCodes.Pop);  		// stack is now [target]  	}  	if (first && returnNullIfFirstMissing) {  		il.Emit (OpCodes.Pop);  		il.Emit (OpCodes.Ldnull);  		// stack is now [null]  		il.Emit (OpCodes.Stloc_1);  		il.Emit (OpCodes.Br' allDone);  	}  	il.MarkLabel (finishLabel);  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetTypeDeserializer,The following statement contains a magic number: if (item != null) {  	if (specializedConstructor == null)  		il.Emit (OpCodes.Dup);  	// stack is now [target][target]  	Label isDbNullLabel = il.DefineLabel ();  	Label finishLabel = il.DefineLabel ();  	il.Emit (OpCodes.Ldarg_0);  	// stack is now [target][target][reader]  	EmitInt32 (il' index);  	// stack is now [target][target][reader][index]  	il.Emit (OpCodes.Dup);  	// stack is now [target][target][reader][index][index]  	il.Emit (OpCodes.Stloc_0);  	// stack is now [target][target][reader][index]  	il.Emit (OpCodes.Callvirt' getItem);  	// stack is now [target][target][value-as-object]  	Type memberType = item.MemberType;  	if (memberType == typeof(char) || memberType == typeof(char?)) {  		il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod (memberType == typeof(char) ? "ReadChar" : "ReadNullableChar"' BindingFlags.Static | BindingFlags.Public)' null);  		// stack is now [target][target][typed-value]  	}  	else {  		il.Emit (OpCodes.Dup);  		// stack is now [target][target][value][value]  		il.Emit (OpCodes.Isinst' typeof(DBNull));  		// stack is now [target][target][value-as-object][DBNull or null]  		il.Emit (OpCodes.Brtrue_S' isDbNullLabel);  		// stack is now [target][target][value-as-object]  		// unbox nullable enums as the primitive' i.e. byte etc  		var nullUnderlyingType = Nullable.GetUnderlyingType (memberType);  		var unboxType = nullUnderlyingType != null && nullUnderlyingType.IsEnum ? nullUnderlyingType : memberType;  		if (unboxType.IsEnum) {  			if (enumDeclareLocal == -1) {  				enumDeclareLocal = il.DeclareLocal (typeof(string)).LocalIndex;  			}  			Label isNotString = il.DefineLabel ();  			il.Emit (OpCodes.Dup);  			// stack is now [target][target][value][value]  			il.Emit (OpCodes.Isinst' typeof(string));  			// stack is now [target][target][value-as-object][string or null]  			il.Emit (OpCodes.Dup);  			// stack is now [target][target][value-as-object][string or null][string or null]  			StoreLocal (il' enumDeclareLocal);  			// stack is now [target][target][value-as-object][string or null]  			il.Emit (OpCodes.Brfalse_S' isNotString);  			// stack is now [target][target][value-as-object]  			il.Emit (OpCodes.Pop);  			// stack is now [target][target]  			il.Emit (OpCodes.Ldtoken' unboxType);  			// stack is now [target][target][enum-type-token]  			il.EmitCall (OpCodes.Call' typeof(Type).GetMethod ("GetTypeFromHandle")' null);  			// stack is now [target][target][enum-type]  			il.Emit (OpCodes.Ldloc_2);  			// stack is now [target][target][enum-type][string]  			il.Emit (OpCodes.Ldc_I4_1);  			// stack is now [target][target][enum-type][string][true]  			il.EmitCall (OpCodes.Call' enumParse' null);  			// stack is now [target][target][enum-as-object]  			il.MarkLabel (isNotString);  			il.Emit (OpCodes.Unbox_Any' unboxType);  			// stack is now [target][target][typed-value]  			if (nullUnderlyingType != null) {  				il.Emit (OpCodes.Newobj' memberType.GetConstructor (new[] {  					nullUnderlyingType  				}));  				// stack is now [target][target][enum-value]  			}  		}  		else if (memberType.FullName == LinqBinary) {  			il.Emit (OpCodes.Unbox_Any' typeof(byte[]));  			// stack is now [target][target][byte-array]  			il.Emit (OpCodes.Newobj' memberType.GetConstructor (new Type[] {  				typeof(byte[])  			}));  			// stack is now [target][target][binary]  		}  		else {  			Type dataType = reader.GetFieldType (index);  			TypeCode dataTypeCode = Type.GetTypeCode (dataType)' unboxTypeCode = Type.GetTypeCode (unboxType);  			if (dataType == unboxType || dataTypeCode == unboxTypeCode || dataTypeCode == Type.GetTypeCode (nullUnderlyingType)) {  				if (typeHandlers.ContainsKey (unboxType)) {  					#pragma  					il.EmitCall (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (unboxType).GetMethod ("Parse")' null);  					// stack is now [target][target][typed-value]  					#pragma  				}  				else {  					il.Emit (OpCodes.Unbox_Any' unboxType);  					// stack is now [target][target][typed-value]  				}  			}  			else {  				// not a direct match; need to tweak the unbox  				MethodInfo op;  				if ((op = GetOperator (dataType' nullUnderlyingType ?? unboxType)) != null) {  					// this is handy for things like decimal <===> double  					il.Emit (OpCodes.Unbox_Any' dataType);  					// stack is now [target][target][data-typed-value]  					il.Emit (OpCodes.Call' op);  					// stack is now [target][target][typed-value]  				}  				else {  					bool handled = true;  					OpCode opCode = default(OpCode);  					if (dataTypeCode == TypeCode.Decimal || unboxTypeCode == TypeCode.Decimal) {  						// no IL level conversions to/from decimal; I guess we could use the static operators' but  						// this feels an edge-case  						handled = false;  					}  					else {  						switch (unboxTypeCode) {  						case TypeCode.Byte:  							opCode = OpCodes.Conv_Ovf_I1_Un;  							break;  						case TypeCode.SByte:  							opCode = OpCodes.Conv_Ovf_I1;  							break;  						case TypeCode.UInt16:  							opCode = OpCodes.Conv_Ovf_I2_Un;  							break;  						case TypeCode.Int16:  							opCode = OpCodes.Conv_Ovf_I2;  							break;  						case TypeCode.UInt32:  							opCode = OpCodes.Conv_Ovf_I4_Un;  							break;  						case TypeCode.Boolean:  						// boolean is basically an int' at least at this level  						case TypeCode.Int32:  							opCode = OpCodes.Conv_Ovf_I4;  							break;  						case TypeCode.UInt64:  							opCode = OpCodes.Conv_Ovf_I8_Un;  							break;  						case TypeCode.Int64:  							opCode = OpCodes.Conv_Ovf_I8;  							break;  						case TypeCode.Single:  							opCode = OpCodes.Conv_R4;  							break;  						case TypeCode.Double:  							opCode = OpCodes.Conv_R8;  							break;  						default:  							handled = false;  							break;  						}  					}  					if (handled) {  						// unbox as the data-type' then use IL-level convert  						il.Emit (OpCodes.Unbox_Any' dataType);  						// stack is now [target][target][data-typed-value]  						il.Emit (opCode);  						// stack is now [target][target][typed-value]  						if (unboxTypeCode == TypeCode.Boolean) {  							// compare to zero; I checked "csc" - this is the trick it uses; nice  							il.Emit (OpCodes.Ldc_I4_0);  							il.Emit (OpCodes.Ceq);  							il.Emit (OpCodes.Ldc_I4_0);  							il.Emit (OpCodes.Ceq);  						}  					}  					else {  						// use flexible conversion  						il.Emit (OpCodes.Ldtoken' nullUnderlyingType ?? unboxType);  						// stack is now [target][target][value][member-type-token]  						il.EmitCall (OpCodes.Call' typeof(Type).GetMethod ("GetTypeFromHandle")' null);  						// stack is now [target][target][value][member-type]  						il.EmitCall (OpCodes.Call' typeof(Convert).GetMethod ("ChangeType"' new Type[] {  							typeof(object)'  							typeof(Type)  						})' null);  						// stack is now [target][target][boxed-member-type-value]  						il.Emit (OpCodes.Unbox_Any' nullUnderlyingType ?? unboxType);  						// stack is now [target][target][typed-value]  					}  				}  				if (nullUnderlyingType != null) {  					il.Emit (OpCodes.Newobj' unboxType.GetConstructor (new[] {  						nullUnderlyingType  					}));  					// stack is now [target][target][typed-value]  				}  			}  		}  	}  	if (specializedConstructor == null) {  		// Store the value in the property/field  		if (item.Property != null) {  			if (type.IsValueType) {  				il.Emit (OpCodes.Call' DefaultTypeMap.GetPropertySetter (item.Property' type));  				// stack is now [target]  			}  			else {  				il.Emit (OpCodes.Callvirt' DefaultTypeMap.GetPropertySetter (item.Property' type));  				// stack is now [target]  			}  		}  		else {  			il.Emit (OpCodes.Stfld' item.Field);  			// stack is now [target]  		}  	}  	il.Emit (OpCodes.Br_S' finishLabel);  	// stack is now [target]  	il.MarkLabel (isDbNullLabel);  	// incoming stack: [target][target][value]  	if (specializedConstructor != null) {  		il.Emit (OpCodes.Pop);  		if (item.MemberType.IsValueType) {  			int localIndex = il.DeclareLocal (item.MemberType).LocalIndex;  			LoadLocalAddress (il' localIndex);  			il.Emit (OpCodes.Initobj' item.MemberType);  			LoadLocal (il' localIndex);  		}  		else {  			il.Emit (OpCodes.Ldnull);  		}  	}  	else {  		il.Emit (OpCodes.Pop);  		// stack is now [target][target]  		il.Emit (OpCodes.Pop);  		// stack is now [target]  	}  	if (first && returnNullIfFirstMissing) {  		il.Emit (OpCodes.Pop);  		il.Emit (OpCodes.Ldnull);  		// stack is now [null]  		il.Emit (OpCodes.Stloc_1);  		il.Emit (OpCodes.Br' allDone);  	}  	il.MarkLabel (finishLabel);  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetTypeDeserializer,The following statement contains a magic number: if (memberType == typeof(char) || memberType == typeof(char?)) {  	il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod (memberType == typeof(char) ? "ReadChar" : "ReadNullableChar"' BindingFlags.Static | BindingFlags.Public)' null);  	// stack is now [target][target][typed-value]  }  else {  	il.Emit (OpCodes.Dup);  	// stack is now [target][target][value][value]  	il.Emit (OpCodes.Isinst' typeof(DBNull));  	// stack is now [target][target][value-as-object][DBNull or null]  	il.Emit (OpCodes.Brtrue_S' isDbNullLabel);  	// stack is now [target][target][value-as-object]  	// unbox nullable enums as the primitive' i.e. byte etc  	var nullUnderlyingType = Nullable.GetUnderlyingType (memberType);  	var unboxType = nullUnderlyingType != null && nullUnderlyingType.IsEnum ? nullUnderlyingType : memberType;  	if (unboxType.IsEnum) {  		if (enumDeclareLocal == -1) {  			enumDeclareLocal = il.DeclareLocal (typeof(string)).LocalIndex;  		}  		Label isNotString = il.DefineLabel ();  		il.Emit (OpCodes.Dup);  		// stack is now [target][target][value][value]  		il.Emit (OpCodes.Isinst' typeof(string));  		// stack is now [target][target][value-as-object][string or null]  		il.Emit (OpCodes.Dup);  		// stack is now [target][target][value-as-object][string or null][string or null]  		StoreLocal (il' enumDeclareLocal);  		// stack is now [target][target][value-as-object][string or null]  		il.Emit (OpCodes.Brfalse_S' isNotString);  		// stack is now [target][target][value-as-object]  		il.Emit (OpCodes.Pop);  		// stack is now [target][target]  		il.Emit (OpCodes.Ldtoken' unboxType);  		// stack is now [target][target][enum-type-token]  		il.EmitCall (OpCodes.Call' typeof(Type).GetMethod ("GetTypeFromHandle")' null);  		// stack is now [target][target][enum-type]  		il.Emit (OpCodes.Ldloc_2);  		// stack is now [target][target][enum-type][string]  		il.Emit (OpCodes.Ldc_I4_1);  		// stack is now [target][target][enum-type][string][true]  		il.EmitCall (OpCodes.Call' enumParse' null);  		// stack is now [target][target][enum-as-object]  		il.MarkLabel (isNotString);  		il.Emit (OpCodes.Unbox_Any' unboxType);  		// stack is now [target][target][typed-value]  		if (nullUnderlyingType != null) {  			il.Emit (OpCodes.Newobj' memberType.GetConstructor (new[] {  				nullUnderlyingType  			}));  			// stack is now [target][target][enum-value]  		}  	}  	else if (memberType.FullName == LinqBinary) {  		il.Emit (OpCodes.Unbox_Any' typeof(byte[]));  		// stack is now [target][target][byte-array]  		il.Emit (OpCodes.Newobj' memberType.GetConstructor (new Type[] {  			typeof(byte[])  		}));  		// stack is now [target][target][binary]  	}  	else {  		Type dataType = reader.GetFieldType (index);  		TypeCode dataTypeCode = Type.GetTypeCode (dataType)' unboxTypeCode = Type.GetTypeCode (unboxType);  		if (dataType == unboxType || dataTypeCode == unboxTypeCode || dataTypeCode == Type.GetTypeCode (nullUnderlyingType)) {  			if (typeHandlers.ContainsKey (unboxType)) {  				#pragma  				il.EmitCall (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (unboxType).GetMethod ("Parse")' null);  				// stack is now [target][target][typed-value]  				#pragma  			}  			else {  				il.Emit (OpCodes.Unbox_Any' unboxType);  				// stack is now [target][target][typed-value]  			}  		}  		else {  			// not a direct match; need to tweak the unbox  			MethodInfo op;  			if ((op = GetOperator (dataType' nullUnderlyingType ?? unboxType)) != null) {  				// this is handy for things like decimal <===> double  				il.Emit (OpCodes.Unbox_Any' dataType);  				// stack is now [target][target][data-typed-value]  				il.Emit (OpCodes.Call' op);  				// stack is now [target][target][typed-value]  			}  			else {  				bool handled = true;  				OpCode opCode = default(OpCode);  				if (dataTypeCode == TypeCode.Decimal || unboxTypeCode == TypeCode.Decimal) {  					// no IL level conversions to/from decimal; I guess we could use the static operators' but  					// this feels an edge-case  					handled = false;  				}  				else {  					switch (unboxTypeCode) {  					case TypeCode.Byte:  						opCode = OpCodes.Conv_Ovf_I1_Un;  						break;  					case TypeCode.SByte:  						opCode = OpCodes.Conv_Ovf_I1;  						break;  					case TypeCode.UInt16:  						opCode = OpCodes.Conv_Ovf_I2_Un;  						break;  					case TypeCode.Int16:  						opCode = OpCodes.Conv_Ovf_I2;  						break;  					case TypeCode.UInt32:  						opCode = OpCodes.Conv_Ovf_I4_Un;  						break;  					case TypeCode.Boolean:  					// boolean is basically an int' at least at this level  					case TypeCode.Int32:  						opCode = OpCodes.Conv_Ovf_I4;  						break;  					case TypeCode.UInt64:  						opCode = OpCodes.Conv_Ovf_I8_Un;  						break;  					case TypeCode.Int64:  						opCode = OpCodes.Conv_Ovf_I8;  						break;  					case TypeCode.Single:  						opCode = OpCodes.Conv_R4;  						break;  					case TypeCode.Double:  						opCode = OpCodes.Conv_R8;  						break;  					default:  						handled = false;  						break;  					}  				}  				if (handled) {  					// unbox as the data-type' then use IL-level convert  					il.Emit (OpCodes.Unbox_Any' dataType);  					// stack is now [target][target][data-typed-value]  					il.Emit (opCode);  					// stack is now [target][target][typed-value]  					if (unboxTypeCode == TypeCode.Boolean) {  						// compare to zero; I checked "csc" - this is the trick it uses; nice  						il.Emit (OpCodes.Ldc_I4_0);  						il.Emit (OpCodes.Ceq);  						il.Emit (OpCodes.Ldc_I4_0);  						il.Emit (OpCodes.Ceq);  					}  				}  				else {  					// use flexible conversion  					il.Emit (OpCodes.Ldtoken' nullUnderlyingType ?? unboxType);  					// stack is now [target][target][value][member-type-token]  					il.EmitCall (OpCodes.Call' typeof(Type).GetMethod ("GetTypeFromHandle")' null);  					// stack is now [target][target][value][member-type]  					il.EmitCall (OpCodes.Call' typeof(Convert).GetMethod ("ChangeType"' new Type[] {  						typeof(object)'  						typeof(Type)  					})' null);  					// stack is now [target][target][boxed-member-type-value]  					il.Emit (OpCodes.Unbox_Any' nullUnderlyingType ?? unboxType);  					// stack is now [target][target][typed-value]  				}  			}  			if (nullUnderlyingType != null) {  				il.Emit (OpCodes.Newobj' unboxType.GetConstructor (new[] {  					nullUnderlyingType  				}));  				// stack is now [target][target][typed-value]  			}  		}  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetTypeDeserializer,The following statement contains a magic number: if (memberType == typeof(char) || memberType == typeof(char?)) {  	il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod (memberType == typeof(char) ? "ReadChar" : "ReadNullableChar"' BindingFlags.Static | BindingFlags.Public)' null);  	// stack is now [target][target][typed-value]  }  else {  	il.Emit (OpCodes.Dup);  	// stack is now [target][target][value][value]  	il.Emit (OpCodes.Isinst' typeof(DBNull));  	// stack is now [target][target][value-as-object][DBNull or null]  	il.Emit (OpCodes.Brtrue_S' isDbNullLabel);  	// stack is now [target][target][value-as-object]  	// unbox nullable enums as the primitive' i.e. byte etc  	var nullUnderlyingType = Nullable.GetUnderlyingType (memberType);  	var unboxType = nullUnderlyingType != null && nullUnderlyingType.IsEnum ? nullUnderlyingType : memberType;  	if (unboxType.IsEnum) {  		if (enumDeclareLocal == -1) {  			enumDeclareLocal = il.DeclareLocal (typeof(string)).LocalIndex;  		}  		Label isNotString = il.DefineLabel ();  		il.Emit (OpCodes.Dup);  		// stack is now [target][target][value][value]  		il.Emit (OpCodes.Isinst' typeof(string));  		// stack is now [target][target][value-as-object][string or null]  		il.Emit (OpCodes.Dup);  		// stack is now [target][target][value-as-object][string or null][string or null]  		StoreLocal (il' enumDeclareLocal);  		// stack is now [target][target][value-as-object][string or null]  		il.Emit (OpCodes.Brfalse_S' isNotString);  		// stack is now [target][target][value-as-object]  		il.Emit (OpCodes.Pop);  		// stack is now [target][target]  		il.Emit (OpCodes.Ldtoken' unboxType);  		// stack is now [target][target][enum-type-token]  		il.EmitCall (OpCodes.Call' typeof(Type).GetMethod ("GetTypeFromHandle")' null);  		// stack is now [target][target][enum-type]  		il.Emit (OpCodes.Ldloc_2);  		// stack is now [target][target][enum-type][string]  		il.Emit (OpCodes.Ldc_I4_1);  		// stack is now [target][target][enum-type][string][true]  		il.EmitCall (OpCodes.Call' enumParse' null);  		// stack is now [target][target][enum-as-object]  		il.MarkLabel (isNotString);  		il.Emit (OpCodes.Unbox_Any' unboxType);  		// stack is now [target][target][typed-value]  		if (nullUnderlyingType != null) {  			il.Emit (OpCodes.Newobj' memberType.GetConstructor (new[] {  				nullUnderlyingType  			}));  			// stack is now [target][target][enum-value]  		}  	}  	else if (memberType.FullName == LinqBinary) {  		il.Emit (OpCodes.Unbox_Any' typeof(byte[]));  		// stack is now [target][target][byte-array]  		il.Emit (OpCodes.Newobj' memberType.GetConstructor (new Type[] {  			typeof(byte[])  		}));  		// stack is now [target][target][binary]  	}  	else {  		Type dataType = reader.GetFieldType (index);  		TypeCode dataTypeCode = Type.GetTypeCode (dataType)' unboxTypeCode = Type.GetTypeCode (unboxType);  		if (dataType == unboxType || dataTypeCode == unboxTypeCode || dataTypeCode == Type.GetTypeCode (nullUnderlyingType)) {  			if (typeHandlers.ContainsKey (unboxType)) {  				#pragma  				il.EmitCall (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (unboxType).GetMethod ("Parse")' null);  				// stack is now [target][target][typed-value]  				#pragma  			}  			else {  				il.Emit (OpCodes.Unbox_Any' unboxType);  				// stack is now [target][target][typed-value]  			}  		}  		else {  			// not a direct match; need to tweak the unbox  			MethodInfo op;  			if ((op = GetOperator (dataType' nullUnderlyingType ?? unboxType)) != null) {  				// this is handy for things like decimal <===> double  				il.Emit (OpCodes.Unbox_Any' dataType);  				// stack is now [target][target][data-typed-value]  				il.Emit (OpCodes.Call' op);  				// stack is now [target][target][typed-value]  			}  			else {  				bool handled = true;  				OpCode opCode = default(OpCode);  				if (dataTypeCode == TypeCode.Decimal || unboxTypeCode == TypeCode.Decimal) {  					// no IL level conversions to/from decimal; I guess we could use the static operators' but  					// this feels an edge-case  					handled = false;  				}  				else {  					switch (unboxTypeCode) {  					case TypeCode.Byte:  						opCode = OpCodes.Conv_Ovf_I1_Un;  						break;  					case TypeCode.SByte:  						opCode = OpCodes.Conv_Ovf_I1;  						break;  					case TypeCode.UInt16:  						opCode = OpCodes.Conv_Ovf_I2_Un;  						break;  					case TypeCode.Int16:  						opCode = OpCodes.Conv_Ovf_I2;  						break;  					case TypeCode.UInt32:  						opCode = OpCodes.Conv_Ovf_I4_Un;  						break;  					case TypeCode.Boolean:  					// boolean is basically an int' at least at this level  					case TypeCode.Int32:  						opCode = OpCodes.Conv_Ovf_I4;  						break;  					case TypeCode.UInt64:  						opCode = OpCodes.Conv_Ovf_I8_Un;  						break;  					case TypeCode.Int64:  						opCode = OpCodes.Conv_Ovf_I8;  						break;  					case TypeCode.Single:  						opCode = OpCodes.Conv_R4;  						break;  					case TypeCode.Double:  						opCode = OpCodes.Conv_R8;  						break;  					default:  						handled = false;  						break;  					}  				}  				if (handled) {  					// unbox as the data-type' then use IL-level convert  					il.Emit (OpCodes.Unbox_Any' dataType);  					// stack is now [target][target][data-typed-value]  					il.Emit (opCode);  					// stack is now [target][target][typed-value]  					if (unboxTypeCode == TypeCode.Boolean) {  						// compare to zero; I checked "csc" - this is the trick it uses; nice  						il.Emit (OpCodes.Ldc_I4_0);  						il.Emit (OpCodes.Ceq);  						il.Emit (OpCodes.Ldc_I4_0);  						il.Emit (OpCodes.Ceq);  					}  				}  				else {  					// use flexible conversion  					il.Emit (OpCodes.Ldtoken' nullUnderlyingType ?? unboxType);  					// stack is now [target][target][value][member-type-token]  					il.EmitCall (OpCodes.Call' typeof(Type).GetMethod ("GetTypeFromHandle")' null);  					// stack is now [target][target][value][member-type]  					il.EmitCall (OpCodes.Call' typeof(Convert).GetMethod ("ChangeType"' new Type[] {  						typeof(object)'  						typeof(Type)  					})' null);  					// stack is now [target][target][boxed-member-type-value]  					il.Emit (OpCodes.Unbox_Any' nullUnderlyingType ?? unboxType);  					// stack is now [target][target][typed-value]  				}  			}  			if (nullUnderlyingType != null) {  				il.Emit (OpCodes.Newobj' unboxType.GetConstructor (new[] {  					nullUnderlyingType  				}));  				// stack is now [target][target][typed-value]  			}  		}  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetTypeDeserializer,The following statement contains a magic number: if (unboxType.IsEnum) {  	if (enumDeclareLocal == -1) {  		enumDeclareLocal = il.DeclareLocal (typeof(string)).LocalIndex;  	}  	Label isNotString = il.DefineLabel ();  	il.Emit (OpCodes.Dup);  	// stack is now [target][target][value][value]  	il.Emit (OpCodes.Isinst' typeof(string));  	// stack is now [target][target][value-as-object][string or null]  	il.Emit (OpCodes.Dup);  	// stack is now [target][target][value-as-object][string or null][string or null]  	StoreLocal (il' enumDeclareLocal);  	// stack is now [target][target][value-as-object][string or null]  	il.Emit (OpCodes.Brfalse_S' isNotString);  	// stack is now [target][target][value-as-object]  	il.Emit (OpCodes.Pop);  	// stack is now [target][target]  	il.Emit (OpCodes.Ldtoken' unboxType);  	// stack is now [target][target][enum-type-token]  	il.EmitCall (OpCodes.Call' typeof(Type).GetMethod ("GetTypeFromHandle")' null);  	// stack is now [target][target][enum-type]  	il.Emit (OpCodes.Ldloc_2);  	// stack is now [target][target][enum-type][string]  	il.Emit (OpCodes.Ldc_I4_1);  	// stack is now [target][target][enum-type][string][true]  	il.EmitCall (OpCodes.Call' enumParse' null);  	// stack is now [target][target][enum-as-object]  	il.MarkLabel (isNotString);  	il.Emit (OpCodes.Unbox_Any' unboxType);  	// stack is now [target][target][typed-value]  	if (nullUnderlyingType != null) {  		il.Emit (OpCodes.Newobj' memberType.GetConstructor (new[] {  			nullUnderlyingType  		}));  		// stack is now [target][target][enum-value]  	}  }  else if (memberType.FullName == LinqBinary) {  	il.Emit (OpCodes.Unbox_Any' typeof(byte[]));  	// stack is now [target][target][byte-array]  	il.Emit (OpCodes.Newobj' memberType.GetConstructor (new Type[] {  		typeof(byte[])  	}));  	// stack is now [target][target][binary]  }  else {  	Type dataType = reader.GetFieldType (index);  	TypeCode dataTypeCode = Type.GetTypeCode (dataType)' unboxTypeCode = Type.GetTypeCode (unboxType);  	if (dataType == unboxType || dataTypeCode == unboxTypeCode || dataTypeCode == Type.GetTypeCode (nullUnderlyingType)) {  		if (typeHandlers.ContainsKey (unboxType)) {  			#pragma  			il.EmitCall (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (unboxType).GetMethod ("Parse")' null);  			// stack is now [target][target][typed-value]  			#pragma  		}  		else {  			il.Emit (OpCodes.Unbox_Any' unboxType);  			// stack is now [target][target][typed-value]  		}  	}  	else {  		// not a direct match; need to tweak the unbox  		MethodInfo op;  		if ((op = GetOperator (dataType' nullUnderlyingType ?? unboxType)) != null) {  			// this is handy for things like decimal <===> double  			il.Emit (OpCodes.Unbox_Any' dataType);  			// stack is now [target][target][data-typed-value]  			il.Emit (OpCodes.Call' op);  			// stack is now [target][target][typed-value]  		}  		else {  			bool handled = true;  			OpCode opCode = default(OpCode);  			if (dataTypeCode == TypeCode.Decimal || unboxTypeCode == TypeCode.Decimal) {  				// no IL level conversions to/from decimal; I guess we could use the static operators' but  				// this feels an edge-case  				handled = false;  			}  			else {  				switch (unboxTypeCode) {  				case TypeCode.Byte:  					opCode = OpCodes.Conv_Ovf_I1_Un;  					break;  				case TypeCode.SByte:  					opCode = OpCodes.Conv_Ovf_I1;  					break;  				case TypeCode.UInt16:  					opCode = OpCodes.Conv_Ovf_I2_Un;  					break;  				case TypeCode.Int16:  					opCode = OpCodes.Conv_Ovf_I2;  					break;  				case TypeCode.UInt32:  					opCode = OpCodes.Conv_Ovf_I4_Un;  					break;  				case TypeCode.Boolean:  				// boolean is basically an int' at least at this level  				case TypeCode.Int32:  					opCode = OpCodes.Conv_Ovf_I4;  					break;  				case TypeCode.UInt64:  					opCode = OpCodes.Conv_Ovf_I8_Un;  					break;  				case TypeCode.Int64:  					opCode = OpCodes.Conv_Ovf_I8;  					break;  				case TypeCode.Single:  					opCode = OpCodes.Conv_R4;  					break;  				case TypeCode.Double:  					opCode = OpCodes.Conv_R8;  					break;  				default:  					handled = false;  					break;  				}  			}  			if (handled) {  				// unbox as the data-type' then use IL-level convert  				il.Emit (OpCodes.Unbox_Any' dataType);  				// stack is now [target][target][data-typed-value]  				il.Emit (opCode);  				// stack is now [target][target][typed-value]  				if (unboxTypeCode == TypeCode.Boolean) {  					// compare to zero; I checked "csc" - this is the trick it uses; nice  					il.Emit (OpCodes.Ldc_I4_0);  					il.Emit (OpCodes.Ceq);  					il.Emit (OpCodes.Ldc_I4_0);  					il.Emit (OpCodes.Ceq);  				}  			}  			else {  				// use flexible conversion  				il.Emit (OpCodes.Ldtoken' nullUnderlyingType ?? unboxType);  				// stack is now [target][target][value][member-type-token]  				il.EmitCall (OpCodes.Call' typeof(Type).GetMethod ("GetTypeFromHandle")' null);  				// stack is now [target][target][value][member-type]  				il.EmitCall (OpCodes.Call' typeof(Convert).GetMethod ("ChangeType"' new Type[] {  					typeof(object)'  					typeof(Type)  				})' null);  				// stack is now [target][target][boxed-member-type-value]  				il.Emit (OpCodes.Unbox_Any' nullUnderlyingType ?? unboxType);  				// stack is now [target][target][typed-value]  			}  		}  		if (nullUnderlyingType != null) {  			il.Emit (OpCodes.Newobj' unboxType.GetConstructor (new[] {  				nullUnderlyingType  			}));  			// stack is now [target][target][typed-value]  		}  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetTypeDeserializer,The following statement contains a magic number: if (unboxType.IsEnum) {  	if (enumDeclareLocal == -1) {  		enumDeclareLocal = il.DeclareLocal (typeof(string)).LocalIndex;  	}  	Label isNotString = il.DefineLabel ();  	il.Emit (OpCodes.Dup);  	// stack is now [target][target][value][value]  	il.Emit (OpCodes.Isinst' typeof(string));  	// stack is now [target][target][value-as-object][string or null]  	il.Emit (OpCodes.Dup);  	// stack is now [target][target][value-as-object][string or null][string or null]  	StoreLocal (il' enumDeclareLocal);  	// stack is now [target][target][value-as-object][string or null]  	il.Emit (OpCodes.Brfalse_S' isNotString);  	// stack is now [target][target][value-as-object]  	il.Emit (OpCodes.Pop);  	// stack is now [target][target]  	il.Emit (OpCodes.Ldtoken' unboxType);  	// stack is now [target][target][enum-type-token]  	il.EmitCall (OpCodes.Call' typeof(Type).GetMethod ("GetTypeFromHandle")' null);  	// stack is now [target][target][enum-type]  	il.Emit (OpCodes.Ldloc_2);  	// stack is now [target][target][enum-type][string]  	il.Emit (OpCodes.Ldc_I4_1);  	// stack is now [target][target][enum-type][string][true]  	il.EmitCall (OpCodes.Call' enumParse' null);  	// stack is now [target][target][enum-as-object]  	il.MarkLabel (isNotString);  	il.Emit (OpCodes.Unbox_Any' unboxType);  	// stack is now [target][target][typed-value]  	if (nullUnderlyingType != null) {  		il.Emit (OpCodes.Newobj' memberType.GetConstructor (new[] {  			nullUnderlyingType  		}));  		// stack is now [target][target][enum-value]  	}  }  else if (memberType.FullName == LinqBinary) {  	il.Emit (OpCodes.Unbox_Any' typeof(byte[]));  	// stack is now [target][target][byte-array]  	il.Emit (OpCodes.Newobj' memberType.GetConstructor (new Type[] {  		typeof(byte[])  	}));  	// stack is now [target][target][binary]  }  else {  	Type dataType = reader.GetFieldType (index);  	TypeCode dataTypeCode = Type.GetTypeCode (dataType)' unboxTypeCode = Type.GetTypeCode (unboxType);  	if (dataType == unboxType || dataTypeCode == unboxTypeCode || dataTypeCode == Type.GetTypeCode (nullUnderlyingType)) {  		if (typeHandlers.ContainsKey (unboxType)) {  			#pragma  			il.EmitCall (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (unboxType).GetMethod ("Parse")' null);  			// stack is now [target][target][typed-value]  			#pragma  		}  		else {  			il.Emit (OpCodes.Unbox_Any' unboxType);  			// stack is now [target][target][typed-value]  		}  	}  	else {  		// not a direct match; need to tweak the unbox  		MethodInfo op;  		if ((op = GetOperator (dataType' nullUnderlyingType ?? unboxType)) != null) {  			// this is handy for things like decimal <===> double  			il.Emit (OpCodes.Unbox_Any' dataType);  			// stack is now [target][target][data-typed-value]  			il.Emit (OpCodes.Call' op);  			// stack is now [target][target][typed-value]  		}  		else {  			bool handled = true;  			OpCode opCode = default(OpCode);  			if (dataTypeCode == TypeCode.Decimal || unboxTypeCode == TypeCode.Decimal) {  				// no IL level conversions to/from decimal; I guess we could use the static operators' but  				// this feels an edge-case  				handled = false;  			}  			else {  				switch (unboxTypeCode) {  				case TypeCode.Byte:  					opCode = OpCodes.Conv_Ovf_I1_Un;  					break;  				case TypeCode.SByte:  					opCode = OpCodes.Conv_Ovf_I1;  					break;  				case TypeCode.UInt16:  					opCode = OpCodes.Conv_Ovf_I2_Un;  					break;  				case TypeCode.Int16:  					opCode = OpCodes.Conv_Ovf_I2;  					break;  				case TypeCode.UInt32:  					opCode = OpCodes.Conv_Ovf_I4_Un;  					break;  				case TypeCode.Boolean:  				// boolean is basically an int' at least at this level  				case TypeCode.Int32:  					opCode = OpCodes.Conv_Ovf_I4;  					break;  				case TypeCode.UInt64:  					opCode = OpCodes.Conv_Ovf_I8_Un;  					break;  				case TypeCode.Int64:  					opCode = OpCodes.Conv_Ovf_I8;  					break;  				case TypeCode.Single:  					opCode = OpCodes.Conv_R4;  					break;  				case TypeCode.Double:  					opCode = OpCodes.Conv_R8;  					break;  				default:  					handled = false;  					break;  				}  			}  			if (handled) {  				// unbox as the data-type' then use IL-level convert  				il.Emit (OpCodes.Unbox_Any' dataType);  				// stack is now [target][target][data-typed-value]  				il.Emit (opCode);  				// stack is now [target][target][typed-value]  				if (unboxTypeCode == TypeCode.Boolean) {  					// compare to zero; I checked "csc" - this is the trick it uses; nice  					il.Emit (OpCodes.Ldc_I4_0);  					il.Emit (OpCodes.Ceq);  					il.Emit (OpCodes.Ldc_I4_0);  					il.Emit (OpCodes.Ceq);  				}  			}  			else {  				// use flexible conversion  				il.Emit (OpCodes.Ldtoken' nullUnderlyingType ?? unboxType);  				// stack is now [target][target][value][member-type-token]  				il.EmitCall (OpCodes.Call' typeof(Type).GetMethod ("GetTypeFromHandle")' null);  				// stack is now [target][target][value][member-type]  				il.EmitCall (OpCodes.Call' typeof(Convert).GetMethod ("ChangeType"' new Type[] {  					typeof(object)'  					typeof(Type)  				})' null);  				// stack is now [target][target][boxed-member-type-value]  				il.Emit (OpCodes.Unbox_Any' nullUnderlyingType ?? unboxType);  				// stack is now [target][target][typed-value]  			}  		}  		if (nullUnderlyingType != null) {  			il.Emit (OpCodes.Newobj' unboxType.GetConstructor (new[] {  				nullUnderlyingType  			}));  			// stack is now [target][target][typed-value]  		}  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetTypeDeserializer,The following statement contains a magic number: if (memberType.FullName == LinqBinary) {  	il.Emit (OpCodes.Unbox_Any' typeof(byte[]));  	// stack is now [target][target][byte-array]  	il.Emit (OpCodes.Newobj' memberType.GetConstructor (new Type[] {  		typeof(byte[])  	}));  	// stack is now [target][target][binary]  }  else {  	Type dataType = reader.GetFieldType (index);  	TypeCode dataTypeCode = Type.GetTypeCode (dataType)' unboxTypeCode = Type.GetTypeCode (unboxType);  	if (dataType == unboxType || dataTypeCode == unboxTypeCode || dataTypeCode == Type.GetTypeCode (nullUnderlyingType)) {  		if (typeHandlers.ContainsKey (unboxType)) {  			#pragma  			il.EmitCall (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (unboxType).GetMethod ("Parse")' null);  			// stack is now [target][target][typed-value]  			#pragma  		}  		else {  			il.Emit (OpCodes.Unbox_Any' unboxType);  			// stack is now [target][target][typed-value]  		}  	}  	else {  		// not a direct match; need to tweak the unbox  		MethodInfo op;  		if ((op = GetOperator (dataType' nullUnderlyingType ?? unboxType)) != null) {  			// this is handy for things like decimal <===> double  			il.Emit (OpCodes.Unbox_Any' dataType);  			// stack is now [target][target][data-typed-value]  			il.Emit (OpCodes.Call' op);  			// stack is now [target][target][typed-value]  		}  		else {  			bool handled = true;  			OpCode opCode = default(OpCode);  			if (dataTypeCode == TypeCode.Decimal || unboxTypeCode == TypeCode.Decimal) {  				// no IL level conversions to/from decimal; I guess we could use the static operators' but  				// this feels an edge-case  				handled = false;  			}  			else {  				switch (unboxTypeCode) {  				case TypeCode.Byte:  					opCode = OpCodes.Conv_Ovf_I1_Un;  					break;  				case TypeCode.SByte:  					opCode = OpCodes.Conv_Ovf_I1;  					break;  				case TypeCode.UInt16:  					opCode = OpCodes.Conv_Ovf_I2_Un;  					break;  				case TypeCode.Int16:  					opCode = OpCodes.Conv_Ovf_I2;  					break;  				case TypeCode.UInt32:  					opCode = OpCodes.Conv_Ovf_I4_Un;  					break;  				case TypeCode.Boolean:  				// boolean is basically an int' at least at this level  				case TypeCode.Int32:  					opCode = OpCodes.Conv_Ovf_I4;  					break;  				case TypeCode.UInt64:  					opCode = OpCodes.Conv_Ovf_I8_Un;  					break;  				case TypeCode.Int64:  					opCode = OpCodes.Conv_Ovf_I8;  					break;  				case TypeCode.Single:  					opCode = OpCodes.Conv_R4;  					break;  				case TypeCode.Double:  					opCode = OpCodes.Conv_R8;  					break;  				default:  					handled = false;  					break;  				}  			}  			if (handled) {  				// unbox as the data-type' then use IL-level convert  				il.Emit (OpCodes.Unbox_Any' dataType);  				// stack is now [target][target][data-typed-value]  				il.Emit (opCode);  				// stack is now [target][target][typed-value]  				if (unboxTypeCode == TypeCode.Boolean) {  					// compare to zero; I checked "csc" - this is the trick it uses; nice  					il.Emit (OpCodes.Ldc_I4_0);  					il.Emit (OpCodes.Ceq);  					il.Emit (OpCodes.Ldc_I4_0);  					il.Emit (OpCodes.Ceq);  				}  			}  			else {  				// use flexible conversion  				il.Emit (OpCodes.Ldtoken' nullUnderlyingType ?? unboxType);  				// stack is now [target][target][value][member-type-token]  				il.EmitCall (OpCodes.Call' typeof(Type).GetMethod ("GetTypeFromHandle")' null);  				// stack is now [target][target][value][member-type]  				il.EmitCall (OpCodes.Call' typeof(Convert).GetMethod ("ChangeType"' new Type[] {  					typeof(object)'  					typeof(Type)  				})' null);  				// stack is now [target][target][boxed-member-type-value]  				il.Emit (OpCodes.Unbox_Any' nullUnderlyingType ?? unboxType);  				// stack is now [target][target][typed-value]  			}  		}  		if (nullUnderlyingType != null) {  			il.Emit (OpCodes.Newobj' unboxType.GetConstructor (new[] {  				nullUnderlyingType  			}));  			// stack is now [target][target][typed-value]  		}  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetTypeDeserializer,The following statement contains a magic number: if (memberType.FullName == LinqBinary) {  	il.Emit (OpCodes.Unbox_Any' typeof(byte[]));  	// stack is now [target][target][byte-array]  	il.Emit (OpCodes.Newobj' memberType.GetConstructor (new Type[] {  		typeof(byte[])  	}));  	// stack is now [target][target][binary]  }  else {  	Type dataType = reader.GetFieldType (index);  	TypeCode dataTypeCode = Type.GetTypeCode (dataType)' unboxTypeCode = Type.GetTypeCode (unboxType);  	if (dataType == unboxType || dataTypeCode == unboxTypeCode || dataTypeCode == Type.GetTypeCode (nullUnderlyingType)) {  		if (typeHandlers.ContainsKey (unboxType)) {  			#pragma  			il.EmitCall (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (unboxType).GetMethod ("Parse")' null);  			// stack is now [target][target][typed-value]  			#pragma  		}  		else {  			il.Emit (OpCodes.Unbox_Any' unboxType);  			// stack is now [target][target][typed-value]  		}  	}  	else {  		// not a direct match; need to tweak the unbox  		MethodInfo op;  		if ((op = GetOperator (dataType' nullUnderlyingType ?? unboxType)) != null) {  			// this is handy for things like decimal <===> double  			il.Emit (OpCodes.Unbox_Any' dataType);  			// stack is now [target][target][data-typed-value]  			il.Emit (OpCodes.Call' op);  			// stack is now [target][target][typed-value]  		}  		else {  			bool handled = true;  			OpCode opCode = default(OpCode);  			if (dataTypeCode == TypeCode.Decimal || unboxTypeCode == TypeCode.Decimal) {  				// no IL level conversions to/from decimal; I guess we could use the static operators' but  				// this feels an edge-case  				handled = false;  			}  			else {  				switch (unboxTypeCode) {  				case TypeCode.Byte:  					opCode = OpCodes.Conv_Ovf_I1_Un;  					break;  				case TypeCode.SByte:  					opCode = OpCodes.Conv_Ovf_I1;  					break;  				case TypeCode.UInt16:  					opCode = OpCodes.Conv_Ovf_I2_Un;  					break;  				case TypeCode.Int16:  					opCode = OpCodes.Conv_Ovf_I2;  					break;  				case TypeCode.UInt32:  					opCode = OpCodes.Conv_Ovf_I4_Un;  					break;  				case TypeCode.Boolean:  				// boolean is basically an int' at least at this level  				case TypeCode.Int32:  					opCode = OpCodes.Conv_Ovf_I4;  					break;  				case TypeCode.UInt64:  					opCode = OpCodes.Conv_Ovf_I8_Un;  					break;  				case TypeCode.Int64:  					opCode = OpCodes.Conv_Ovf_I8;  					break;  				case TypeCode.Single:  					opCode = OpCodes.Conv_R4;  					break;  				case TypeCode.Double:  					opCode = OpCodes.Conv_R8;  					break;  				default:  					handled = false;  					break;  				}  			}  			if (handled) {  				// unbox as the data-type' then use IL-level convert  				il.Emit (OpCodes.Unbox_Any' dataType);  				// stack is now [target][target][data-typed-value]  				il.Emit (opCode);  				// stack is now [target][target][typed-value]  				if (unboxTypeCode == TypeCode.Boolean) {  					// compare to zero; I checked "csc" - this is the trick it uses; nice  					il.Emit (OpCodes.Ldc_I4_0);  					il.Emit (OpCodes.Ceq);  					il.Emit (OpCodes.Ldc_I4_0);  					il.Emit (OpCodes.Ceq);  				}  			}  			else {  				// use flexible conversion  				il.Emit (OpCodes.Ldtoken' nullUnderlyingType ?? unboxType);  				// stack is now [target][target][value][member-type-token]  				il.EmitCall (OpCodes.Call' typeof(Type).GetMethod ("GetTypeFromHandle")' null);  				// stack is now [target][target][value][member-type]  				il.EmitCall (OpCodes.Call' typeof(Convert).GetMethod ("ChangeType"' new Type[] {  					typeof(object)'  					typeof(Type)  				})' null);  				// stack is now [target][target][boxed-member-type-value]  				il.Emit (OpCodes.Unbox_Any' nullUnderlyingType ?? unboxType);  				// stack is now [target][target][typed-value]  			}  		}  		if (nullUnderlyingType != null) {  			il.Emit (OpCodes.Newobj' unboxType.GetConstructor (new[] {  				nullUnderlyingType  			}));  			// stack is now [target][target][typed-value]  		}  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetTypeDeserializer,The following statement contains a magic number: if (dataType == unboxType || dataTypeCode == unboxTypeCode || dataTypeCode == Type.GetTypeCode (nullUnderlyingType)) {  	if (typeHandlers.ContainsKey (unboxType)) {  		#pragma  		il.EmitCall (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (unboxType).GetMethod ("Parse")' null);  		// stack is now [target][target][typed-value]  		#pragma  	}  	else {  		il.Emit (OpCodes.Unbox_Any' unboxType);  		// stack is now [target][target][typed-value]  	}  }  else {  	// not a direct match; need to tweak the unbox  	MethodInfo op;  	if ((op = GetOperator (dataType' nullUnderlyingType ?? unboxType)) != null) {  		// this is handy for things like decimal <===> double  		il.Emit (OpCodes.Unbox_Any' dataType);  		// stack is now [target][target][data-typed-value]  		il.Emit (OpCodes.Call' op);  		// stack is now [target][target][typed-value]  	}  	else {  		bool handled = true;  		OpCode opCode = default(OpCode);  		if (dataTypeCode == TypeCode.Decimal || unboxTypeCode == TypeCode.Decimal) {  			// no IL level conversions to/from decimal; I guess we could use the static operators' but  			// this feels an edge-case  			handled = false;  		}  		else {  			switch (unboxTypeCode) {  			case TypeCode.Byte:  				opCode = OpCodes.Conv_Ovf_I1_Un;  				break;  			case TypeCode.SByte:  				opCode = OpCodes.Conv_Ovf_I1;  				break;  			case TypeCode.UInt16:  				opCode = OpCodes.Conv_Ovf_I2_Un;  				break;  			case TypeCode.Int16:  				opCode = OpCodes.Conv_Ovf_I2;  				break;  			case TypeCode.UInt32:  				opCode = OpCodes.Conv_Ovf_I4_Un;  				break;  			case TypeCode.Boolean:  			// boolean is basically an int' at least at this level  			case TypeCode.Int32:  				opCode = OpCodes.Conv_Ovf_I4;  				break;  			case TypeCode.UInt64:  				opCode = OpCodes.Conv_Ovf_I8_Un;  				break;  			case TypeCode.Int64:  				opCode = OpCodes.Conv_Ovf_I8;  				break;  			case TypeCode.Single:  				opCode = OpCodes.Conv_R4;  				break;  			case TypeCode.Double:  				opCode = OpCodes.Conv_R8;  				break;  			default:  				handled = false;  				break;  			}  		}  		if (handled) {  			// unbox as the data-type' then use IL-level convert  			il.Emit (OpCodes.Unbox_Any' dataType);  			// stack is now [target][target][data-typed-value]  			il.Emit (opCode);  			// stack is now [target][target][typed-value]  			if (unboxTypeCode == TypeCode.Boolean) {  				// compare to zero; I checked "csc" - this is the trick it uses; nice  				il.Emit (OpCodes.Ldc_I4_0);  				il.Emit (OpCodes.Ceq);  				il.Emit (OpCodes.Ldc_I4_0);  				il.Emit (OpCodes.Ceq);  			}  		}  		else {  			// use flexible conversion  			il.Emit (OpCodes.Ldtoken' nullUnderlyingType ?? unboxType);  			// stack is now [target][target][value][member-type-token]  			il.EmitCall (OpCodes.Call' typeof(Type).GetMethod ("GetTypeFromHandle")' null);  			// stack is now [target][target][value][member-type]  			il.EmitCall (OpCodes.Call' typeof(Convert).GetMethod ("ChangeType"' new Type[] {  				typeof(object)'  				typeof(Type)  			})' null);  			// stack is now [target][target][boxed-member-type-value]  			il.Emit (OpCodes.Unbox_Any' nullUnderlyingType ?? unboxType);  			// stack is now [target][target][typed-value]  		}  	}  	if (nullUnderlyingType != null) {  		il.Emit (OpCodes.Newobj' unboxType.GetConstructor (new[] {  			nullUnderlyingType  		}));  		// stack is now [target][target][typed-value]  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetTypeDeserializer,The following statement contains a magic number: if (dataType == unboxType || dataTypeCode == unboxTypeCode || dataTypeCode == Type.GetTypeCode (nullUnderlyingType)) {  	if (typeHandlers.ContainsKey (unboxType)) {  		#pragma  		il.EmitCall (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (unboxType).GetMethod ("Parse")' null);  		// stack is now [target][target][typed-value]  		#pragma  	}  	else {  		il.Emit (OpCodes.Unbox_Any' unboxType);  		// stack is now [target][target][typed-value]  	}  }  else {  	// not a direct match; need to tweak the unbox  	MethodInfo op;  	if ((op = GetOperator (dataType' nullUnderlyingType ?? unboxType)) != null) {  		// this is handy for things like decimal <===> double  		il.Emit (OpCodes.Unbox_Any' dataType);  		// stack is now [target][target][data-typed-value]  		il.Emit (OpCodes.Call' op);  		// stack is now [target][target][typed-value]  	}  	else {  		bool handled = true;  		OpCode opCode = default(OpCode);  		if (dataTypeCode == TypeCode.Decimal || unboxTypeCode == TypeCode.Decimal) {  			// no IL level conversions to/from decimal; I guess we could use the static operators' but  			// this feels an edge-case  			handled = false;  		}  		else {  			switch (unboxTypeCode) {  			case TypeCode.Byte:  				opCode = OpCodes.Conv_Ovf_I1_Un;  				break;  			case TypeCode.SByte:  				opCode = OpCodes.Conv_Ovf_I1;  				break;  			case TypeCode.UInt16:  				opCode = OpCodes.Conv_Ovf_I2_Un;  				break;  			case TypeCode.Int16:  				opCode = OpCodes.Conv_Ovf_I2;  				break;  			case TypeCode.UInt32:  				opCode = OpCodes.Conv_Ovf_I4_Un;  				break;  			case TypeCode.Boolean:  			// boolean is basically an int' at least at this level  			case TypeCode.Int32:  				opCode = OpCodes.Conv_Ovf_I4;  				break;  			case TypeCode.UInt64:  				opCode = OpCodes.Conv_Ovf_I8_Un;  				break;  			case TypeCode.Int64:  				opCode = OpCodes.Conv_Ovf_I8;  				break;  			case TypeCode.Single:  				opCode = OpCodes.Conv_R4;  				break;  			case TypeCode.Double:  				opCode = OpCodes.Conv_R8;  				break;  			default:  				handled = false;  				break;  			}  		}  		if (handled) {  			// unbox as the data-type' then use IL-level convert  			il.Emit (OpCodes.Unbox_Any' dataType);  			// stack is now [target][target][data-typed-value]  			il.Emit (opCode);  			// stack is now [target][target][typed-value]  			if (unboxTypeCode == TypeCode.Boolean) {  				// compare to zero; I checked "csc" - this is the trick it uses; nice  				il.Emit (OpCodes.Ldc_I4_0);  				il.Emit (OpCodes.Ceq);  				il.Emit (OpCodes.Ldc_I4_0);  				il.Emit (OpCodes.Ceq);  			}  		}  		else {  			// use flexible conversion  			il.Emit (OpCodes.Ldtoken' nullUnderlyingType ?? unboxType);  			// stack is now [target][target][value][member-type-token]  			il.EmitCall (OpCodes.Call' typeof(Type).GetMethod ("GetTypeFromHandle")' null);  			// stack is now [target][target][value][member-type]  			il.EmitCall (OpCodes.Call' typeof(Convert).GetMethod ("ChangeType"' new Type[] {  				typeof(object)'  				typeof(Type)  			})' null);  			// stack is now [target][target][boxed-member-type-value]  			il.Emit (OpCodes.Unbox_Any' nullUnderlyingType ?? unboxType);  			// stack is now [target][target][typed-value]  		}  	}  	if (nullUnderlyingType != null) {  		il.Emit (OpCodes.Newobj' unboxType.GetConstructor (new[] {  			nullUnderlyingType  		}));  		// stack is now [target][target][typed-value]  	}  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetTypeDeserializer,The following statement contains a magic number: if (typeHandlers.ContainsKey (unboxType)) {  	#pragma  	il.EmitCall (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (unboxType).GetMethod ("Parse")' null);  	// stack is now [target][target][typed-value]  	#pragma  }  else {  	il.Emit (OpCodes.Unbox_Any' unboxType);  	// stack is now [target][target][typed-value]  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,GetTypeDeserializer,The following statement contains a magic number: if (typeHandlers.ContainsKey (unboxType)) {  	#pragma  	il.EmitCall (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (unboxType).GetMethod ("Parse")' null);  	// stack is now [target][target][typed-value]  	#pragma  }  else {  	il.Emit (OpCodes.Unbox_Any' unboxType);  	// stack is now [target][target][typed-value]  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,LoadLocal,The following statement contains a magic number: switch (index) {  case 0:  	il.Emit (OpCodes.Ldloc_0);  	break;  case 1:  	il.Emit (OpCodes.Ldloc_1);  	break;  case 2:  	il.Emit (OpCodes.Ldloc_2);  	break;  case 3:  	il.Emit (OpCodes.Ldloc_3);  	break;  default:  	if (index <= 255) {  		il.Emit (OpCodes.Ldloc_S' (byte)index);  	}  	else {  		il.Emit (OpCodes.Ldloc' (short)index);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,LoadLocal,The following statement contains a magic number: switch (index) {  case 0:  	il.Emit (OpCodes.Ldloc_0);  	break;  case 1:  	il.Emit (OpCodes.Ldloc_1);  	break;  case 2:  	il.Emit (OpCodes.Ldloc_2);  	break;  case 3:  	il.Emit (OpCodes.Ldloc_3);  	break;  default:  	if (index <= 255) {  		il.Emit (OpCodes.Ldloc_S' (byte)index);  	}  	else {  		il.Emit (OpCodes.Ldloc' (short)index);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,LoadLocal,The following statement contains a magic number: switch (index) {  case 0:  	il.Emit (OpCodes.Ldloc_0);  	break;  case 1:  	il.Emit (OpCodes.Ldloc_1);  	break;  case 2:  	il.Emit (OpCodes.Ldloc_2);  	break;  case 3:  	il.Emit (OpCodes.Ldloc_3);  	break;  default:  	if (index <= 255) {  		il.Emit (OpCodes.Ldloc_S' (byte)index);  	}  	else {  		il.Emit (OpCodes.Ldloc' (short)index);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,LoadLocal,The following statement contains a magic number: if (index <= 255) {  	il.Emit (OpCodes.Ldloc_S' (byte)index);  }  else {  	il.Emit (OpCodes.Ldloc' (short)index);  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,StoreLocal,The following statement contains a magic number: switch (index) {  case 0:  	il.Emit (OpCodes.Stloc_0);  	break;  case 1:  	il.Emit (OpCodes.Stloc_1);  	break;  case 2:  	il.Emit (OpCodes.Stloc_2);  	break;  case 3:  	il.Emit (OpCodes.Stloc_3);  	break;  default:  	if (index <= 255) {  		il.Emit (OpCodes.Stloc_S' (byte)index);  	}  	else {  		il.Emit (OpCodes.Stloc' (short)index);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,StoreLocal,The following statement contains a magic number: switch (index) {  case 0:  	il.Emit (OpCodes.Stloc_0);  	break;  case 1:  	il.Emit (OpCodes.Stloc_1);  	break;  case 2:  	il.Emit (OpCodes.Stloc_2);  	break;  case 3:  	il.Emit (OpCodes.Stloc_3);  	break;  default:  	if (index <= 255) {  		il.Emit (OpCodes.Stloc_S' (byte)index);  	}  	else {  		il.Emit (OpCodes.Stloc' (short)index);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,StoreLocal,The following statement contains a magic number: switch (index) {  case 0:  	il.Emit (OpCodes.Stloc_0);  	break;  case 1:  	il.Emit (OpCodes.Stloc_1);  	break;  case 2:  	il.Emit (OpCodes.Stloc_2);  	break;  case 3:  	il.Emit (OpCodes.Stloc_3);  	break;  default:  	if (index <= 255) {  		il.Emit (OpCodes.Stloc_S' (byte)index);  	}  	else {  		il.Emit (OpCodes.Stloc' (short)index);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,StoreLocal,The following statement contains a magic number: if (index <= 255) {  	il.Emit (OpCodes.Stloc_S' (byte)index);  }  else {  	il.Emit (OpCodes.Stloc' (short)index);  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,LoadLocalAddress,The following statement contains a magic number: if (index <= 255) {  	il.Emit (OpCodes.Ldloca_S' (byte)index);  }  else {  	il.Emit (OpCodes.Ldloca' (short)index);  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	}  	else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,EmitInt32,The following statement contains a magic number: if (value >= -128 && value <= 127) {  	il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  }  else {  	il.Emit (OpCodes.Ldc_I4' value);  }  
Magic Number,Dapper,SqlMapper,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,EmitInt32,The following statement contains a magic number: if (value >= -128 && value <= 127) {  	il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  }  else {  	il.Emit (OpCodes.Ldc_I4' value);  }  
Magic Number,Dapper,DynamicParameters,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values) {  	var dbType = param.DbType;  	var val = param.Value;  	string name = Clean (param.Name);  	var isCustomQueryParameter = val is SqlMapper.ICustomQueryParameter;  	SqlMapper.ITypeHandler handler = null;  	if (dbType == null && val != null && !isCustomQueryParameter)  		dbType = SqlMapper.LookupDbType (val.GetType ()' name' out handler);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		#pragma  		SqlMapper.PackListParameters (command' name' val);  		#pragma  	}  	else if (isCustomQueryParameter) {  		((SqlMapper.ICustomQueryParameter)val).AddParameter (command' name);  	}  	else {  		bool add = !command.Parameters.Contains (name);  		IDbDataParameter p;  		if (add) {  			p = command.CreateParameter ();  			p.ParameterName = name;  		}  		else {  			p = (IDbDataParameter)command.Parameters [name];  		}  		if (handler == null) {  			p.Value = val ?? DBNull.Value;  		}  		else {  			handler.SetValue (p' val ?? DBNull.Value);  		}  		p.Direction = param.ParameterDirection;  		var s = val as string;  		if (s != null) {  			if (s.Length <= 4000) {  				p.Size = 4000;  			}  		}  		if (param.Size != null) {  			p.Size = param.Size.Value;  		}  		if (dbType != null && p.DbType != dbType) {  			p.DbType = dbType.Value;  		}  		if (add) {  			command.Parameters.Add (p);  		}  		param.AttachedParam = p;  	}  }  
Magic Number,Dapper,DynamicParameters,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values) {  	var dbType = param.DbType;  	var val = param.Value;  	string name = Clean (param.Name);  	var isCustomQueryParameter = val is SqlMapper.ICustomQueryParameter;  	SqlMapper.ITypeHandler handler = null;  	if (dbType == null && val != null && !isCustomQueryParameter)  		dbType = SqlMapper.LookupDbType (val.GetType ()' name' out handler);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		#pragma  		SqlMapper.PackListParameters (command' name' val);  		#pragma  	}  	else if (isCustomQueryParameter) {  		((SqlMapper.ICustomQueryParameter)val).AddParameter (command' name);  	}  	else {  		bool add = !command.Parameters.Contains (name);  		IDbDataParameter p;  		if (add) {  			p = command.CreateParameter ();  			p.ParameterName = name;  		}  		else {  			p = (IDbDataParameter)command.Parameters [name];  		}  		if (handler == null) {  			p.Value = val ?? DBNull.Value;  		}  		else {  			handler.SetValue (p' val ?? DBNull.Value);  		}  		p.Direction = param.ParameterDirection;  		var s = val as string;  		if (s != null) {  			if (s.Length <= 4000) {  				p.Size = 4000;  			}  		}  		if (param.Size != null) {  			p.Size = param.Size.Value;  		}  		if (dbType != null && p.DbType != dbType) {  			p.DbType = dbType.Value;  		}  		if (add) {  			command.Parameters.Add (p);  		}  		param.AttachedParam = p;  	}  }  
Magic Number,Dapper,DynamicParameters,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values) {  	var dbType = param.DbType;  	var val = param.Value;  	string name = Clean (param.Name);  	var isCustomQueryParameter = val is SqlMapper.ICustomQueryParameter;  	SqlMapper.ITypeHandler handler = null;  	if (dbType == null && val != null && !isCustomQueryParameter)  		dbType = SqlMapper.LookupDbType (val.GetType ()' name' out handler);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		#pragma  		SqlMapper.PackListParameters (command' name' val);  		#pragma  	}  	else if (isCustomQueryParameter) {  		((SqlMapper.ICustomQueryParameter)val).AddParameter (command' name);  	}  	else {  		bool add = !command.Parameters.Contains (name);  		IDbDataParameter p;  		if (add) {  			p = command.CreateParameter ();  			p.ParameterName = name;  		}  		else {  			p = (IDbDataParameter)command.Parameters [name];  		}  		if (handler == null) {  			p.Value = val ?? DBNull.Value;  		}  		else {  			handler.SetValue (p' val ?? DBNull.Value);  		}  		p.Direction = param.ParameterDirection;  		var s = val as string;  		if (s != null) {  			if (s.Length <= 4000) {  				p.Size = 4000;  			}  		}  		if (param.Size != null) {  			p.Size = param.Size.Value;  		}  		if (dbType != null && p.DbType != dbType) {  			p.DbType = dbType.Value;  		}  		if (add) {  			command.Parameters.Add (p);  		}  		param.AttachedParam = p;  	}  }  
Magic Number,Dapper,DynamicParameters,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values) {  	var dbType = param.DbType;  	var val = param.Value;  	string name = Clean (param.Name);  	var isCustomQueryParameter = val is SqlMapper.ICustomQueryParameter;  	SqlMapper.ITypeHandler handler = null;  	if (dbType == null && val != null && !isCustomQueryParameter)  		dbType = SqlMapper.LookupDbType (val.GetType ()' name' out handler);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		#pragma  		SqlMapper.PackListParameters (command' name' val);  		#pragma  	}  	else if (isCustomQueryParameter) {  		((SqlMapper.ICustomQueryParameter)val).AddParameter (command' name);  	}  	else {  		bool add = !command.Parameters.Contains (name);  		IDbDataParameter p;  		if (add) {  			p = command.CreateParameter ();  			p.ParameterName = name;  		}  		else {  			p = (IDbDataParameter)command.Parameters [name];  		}  		if (handler == null) {  			p.Value = val ?? DBNull.Value;  		}  		else {  			handler.SetValue (p' val ?? DBNull.Value);  		}  		p.Direction = param.ParameterDirection;  		var s = val as string;  		if (s != null) {  			if (s.Length <= 4000) {  				p.Size = 4000;  			}  		}  		if (param.Size != null) {  			p.Size = param.Size.Value;  		}  		if (dbType != null && p.DbType != dbType) {  			p.DbType = dbType.Value;  		}  		if (add) {  			command.Parameters.Add (p);  		}  		param.AttachedParam = p;  	}  }  
Magic Number,Dapper,DynamicParameters,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values) {  	var dbType = param.DbType;  	var val = param.Value;  	string name = Clean (param.Name);  	var isCustomQueryParameter = val is SqlMapper.ICustomQueryParameter;  	SqlMapper.ITypeHandler handler = null;  	if (dbType == null && val != null && !isCustomQueryParameter)  		dbType = SqlMapper.LookupDbType (val.GetType ()' name' out handler);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		#pragma  		SqlMapper.PackListParameters (command' name' val);  		#pragma  	}  	else if (isCustomQueryParameter) {  		((SqlMapper.ICustomQueryParameter)val).AddParameter (command' name);  	}  	else {  		bool add = !command.Parameters.Contains (name);  		IDbDataParameter p;  		if (add) {  			p = command.CreateParameter ();  			p.ParameterName = name;  		}  		else {  			p = (IDbDataParameter)command.Parameters [name];  		}  		if (handler == null) {  			p.Value = val ?? DBNull.Value;  		}  		else {  			handler.SetValue (p' val ?? DBNull.Value);  		}  		p.Direction = param.ParameterDirection;  		var s = val as string;  		if (s != null) {  			if (s.Length <= 4000) {  				p.Size = 4000;  			}  		}  		if (param.Size != null) {  			p.Size = param.Size.Value;  		}  		if (dbType != null && p.DbType != dbType) {  			p.DbType = dbType.Value;  		}  		if (add) {  			command.Parameters.Add (p);  		}  		param.AttachedParam = p;  	}  }  
Magic Number,Dapper,DynamicParameters,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values) {  	var dbType = param.DbType;  	var val = param.Value;  	string name = Clean (param.Name);  	var isCustomQueryParameter = val is SqlMapper.ICustomQueryParameter;  	SqlMapper.ITypeHandler handler = null;  	if (dbType == null && val != null && !isCustomQueryParameter)  		dbType = SqlMapper.LookupDbType (val.GetType ()' name' out handler);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		#pragma  		SqlMapper.PackListParameters (command' name' val);  		#pragma  	}  	else if (isCustomQueryParameter) {  		((SqlMapper.ICustomQueryParameter)val).AddParameter (command' name);  	}  	else {  		bool add = !command.Parameters.Contains (name);  		IDbDataParameter p;  		if (add) {  			p = command.CreateParameter ();  			p.ParameterName = name;  		}  		else {  			p = (IDbDataParameter)command.Parameters [name];  		}  		if (handler == null) {  			p.Value = val ?? DBNull.Value;  		}  		else {  			handler.SetValue (p' val ?? DBNull.Value);  		}  		p.Direction = param.ParameterDirection;  		var s = val as string;  		if (s != null) {  			if (s.Length <= 4000) {  				p.Size = 4000;  			}  		}  		if (param.Size != null) {  			p.Size = param.Size.Value;  		}  		if (dbType != null && p.DbType != dbType) {  			p.DbType = dbType.Value;  		}  		if (add) {  			command.Parameters.Add (p);  		}  		param.AttachedParam = p;  	}  }  
Magic Number,Dapper,DynamicParameters,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (dbType == DynamicParameters.EnumerableMultiParameter) {  	#pragma  	SqlMapper.PackListParameters (command' name' val);  	#pragma  }  else if (isCustomQueryParameter) {  	((SqlMapper.ICustomQueryParameter)val).AddParameter (command' name);  }  else {  	bool add = !command.Parameters.Contains (name);  	IDbDataParameter p;  	if (add) {  		p = command.CreateParameter ();  		p.ParameterName = name;  	}  	else {  		p = (IDbDataParameter)command.Parameters [name];  	}  	if (handler == null) {  		p.Value = val ?? DBNull.Value;  	}  	else {  		handler.SetValue (p' val ?? DBNull.Value);  	}  	p.Direction = param.ParameterDirection;  	var s = val as string;  	if (s != null) {  		if (s.Length <= 4000) {  			p.Size = 4000;  		}  	}  	if (param.Size != null) {  		p.Size = param.Size.Value;  	}  	if (dbType != null && p.DbType != dbType) {  		p.DbType = dbType.Value;  	}  	if (add) {  		command.Parameters.Add (p);  	}  	param.AttachedParam = p;  }  
Magic Number,Dapper,DynamicParameters,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (dbType == DynamicParameters.EnumerableMultiParameter) {  	#pragma  	SqlMapper.PackListParameters (command' name' val);  	#pragma  }  else if (isCustomQueryParameter) {  	((SqlMapper.ICustomQueryParameter)val).AddParameter (command' name);  }  else {  	bool add = !command.Parameters.Contains (name);  	IDbDataParameter p;  	if (add) {  		p = command.CreateParameter ();  		p.ParameterName = name;  	}  	else {  		p = (IDbDataParameter)command.Parameters [name];  	}  	if (handler == null) {  		p.Value = val ?? DBNull.Value;  	}  	else {  		handler.SetValue (p' val ?? DBNull.Value);  	}  	p.Direction = param.ParameterDirection;  	var s = val as string;  	if (s != null) {  		if (s.Length <= 4000) {  			p.Size = 4000;  		}  	}  	if (param.Size != null) {  		p.Size = param.Size.Value;  	}  	if (dbType != null && p.DbType != dbType) {  		p.DbType = dbType.Value;  	}  	if (add) {  		command.Parameters.Add (p);  	}  	param.AttachedParam = p;  }  
Magic Number,Dapper,DynamicParameters,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (dbType == DynamicParameters.EnumerableMultiParameter) {  	#pragma  	SqlMapper.PackListParameters (command' name' val);  	#pragma  }  else if (isCustomQueryParameter) {  	((SqlMapper.ICustomQueryParameter)val).AddParameter (command' name);  }  else {  	bool add = !command.Parameters.Contains (name);  	IDbDataParameter p;  	if (add) {  		p = command.CreateParameter ();  		p.ParameterName = name;  	}  	else {  		p = (IDbDataParameter)command.Parameters [name];  	}  	if (handler == null) {  		p.Value = val ?? DBNull.Value;  	}  	else {  		handler.SetValue (p' val ?? DBNull.Value);  	}  	p.Direction = param.ParameterDirection;  	var s = val as string;  	if (s != null) {  		if (s.Length <= 4000) {  			p.Size = 4000;  		}  	}  	if (param.Size != null) {  		p.Size = param.Size.Value;  	}  	if (dbType != null && p.DbType != dbType) {  		p.DbType = dbType.Value;  	}  	if (add) {  		command.Parameters.Add (p);  	}  	param.AttachedParam = p;  }  
Magic Number,Dapper,DynamicParameters,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (dbType == DynamicParameters.EnumerableMultiParameter) {  	#pragma  	SqlMapper.PackListParameters (command' name' val);  	#pragma  }  else if (isCustomQueryParameter) {  	((SqlMapper.ICustomQueryParameter)val).AddParameter (command' name);  }  else {  	bool add = !command.Parameters.Contains (name);  	IDbDataParameter p;  	if (add) {  		p = command.CreateParameter ();  		p.ParameterName = name;  	}  	else {  		p = (IDbDataParameter)command.Parameters [name];  	}  	if (handler == null) {  		p.Value = val ?? DBNull.Value;  	}  	else {  		handler.SetValue (p' val ?? DBNull.Value);  	}  	p.Direction = param.ParameterDirection;  	var s = val as string;  	if (s != null) {  		if (s.Length <= 4000) {  			p.Size = 4000;  		}  	}  	if (param.Size != null) {  		p.Size = param.Size.Value;  	}  	if (dbType != null && p.DbType != dbType) {  		p.DbType = dbType.Value;  	}  	if (add) {  		command.Parameters.Add (p);  	}  	param.AttachedParam = p;  }  
Magic Number,Dapper,DynamicParameters,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (dbType == DynamicParameters.EnumerableMultiParameter) {  	#pragma  	SqlMapper.PackListParameters (command' name' val);  	#pragma  }  else if (isCustomQueryParameter) {  	((SqlMapper.ICustomQueryParameter)val).AddParameter (command' name);  }  else {  	bool add = !command.Parameters.Contains (name);  	IDbDataParameter p;  	if (add) {  		p = command.CreateParameter ();  		p.ParameterName = name;  	}  	else {  		p = (IDbDataParameter)command.Parameters [name];  	}  	if (handler == null) {  		p.Value = val ?? DBNull.Value;  	}  	else {  		handler.SetValue (p' val ?? DBNull.Value);  	}  	p.Direction = param.ParameterDirection;  	var s = val as string;  	if (s != null) {  		if (s.Length <= 4000) {  			p.Size = 4000;  		}  	}  	if (param.Size != null) {  		p.Size = param.Size.Value;  	}  	if (dbType != null && p.DbType != dbType) {  		p.DbType = dbType.Value;  	}  	if (add) {  		command.Parameters.Add (p);  	}  	param.AttachedParam = p;  }  
Magic Number,Dapper,DynamicParameters,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (dbType == DynamicParameters.EnumerableMultiParameter) {  	#pragma  	SqlMapper.PackListParameters (command' name' val);  	#pragma  }  else if (isCustomQueryParameter) {  	((SqlMapper.ICustomQueryParameter)val).AddParameter (command' name);  }  else {  	bool add = !command.Parameters.Contains (name);  	IDbDataParameter p;  	if (add) {  		p = command.CreateParameter ();  		p.ParameterName = name;  	}  	else {  		p = (IDbDataParameter)command.Parameters [name];  	}  	if (handler == null) {  		p.Value = val ?? DBNull.Value;  	}  	else {  		handler.SetValue (p' val ?? DBNull.Value);  	}  	p.Direction = param.ParameterDirection;  	var s = val as string;  	if (s != null) {  		if (s.Length <= 4000) {  			p.Size = 4000;  		}  	}  	if (param.Size != null) {  		p.Size = param.Size.Value;  	}  	if (dbType != null && p.DbType != dbType) {  		p.DbType = dbType.Value;  	}  	if (add) {  		command.Parameters.Add (p);  	}  	param.AttachedParam = p;  }  
Magic Number,Dapper,DynamicParameters,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (isCustomQueryParameter) {  	((SqlMapper.ICustomQueryParameter)val).AddParameter (command' name);  }  else {  	bool add = !command.Parameters.Contains (name);  	IDbDataParameter p;  	if (add) {  		p = command.CreateParameter ();  		p.ParameterName = name;  	}  	else {  		p = (IDbDataParameter)command.Parameters [name];  	}  	if (handler == null) {  		p.Value = val ?? DBNull.Value;  	}  	else {  		handler.SetValue (p' val ?? DBNull.Value);  	}  	p.Direction = param.ParameterDirection;  	var s = val as string;  	if (s != null) {  		if (s.Length <= 4000) {  			p.Size = 4000;  		}  	}  	if (param.Size != null) {  		p.Size = param.Size.Value;  	}  	if (dbType != null && p.DbType != dbType) {  		p.DbType = dbType.Value;  	}  	if (add) {  		command.Parameters.Add (p);  	}  	param.AttachedParam = p;  }  
Magic Number,Dapper,DynamicParameters,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (isCustomQueryParameter) {  	((SqlMapper.ICustomQueryParameter)val).AddParameter (command' name);  }  else {  	bool add = !command.Parameters.Contains (name);  	IDbDataParameter p;  	if (add) {  		p = command.CreateParameter ();  		p.ParameterName = name;  	}  	else {  		p = (IDbDataParameter)command.Parameters [name];  	}  	if (handler == null) {  		p.Value = val ?? DBNull.Value;  	}  	else {  		handler.SetValue (p' val ?? DBNull.Value);  	}  	p.Direction = param.ParameterDirection;  	var s = val as string;  	if (s != null) {  		if (s.Length <= 4000) {  			p.Size = 4000;  		}  	}  	if (param.Size != null) {  		p.Size = param.Size.Value;  	}  	if (dbType != null && p.DbType != dbType) {  		p.DbType = dbType.Value;  	}  	if (add) {  		command.Parameters.Add (p);  	}  	param.AttachedParam = p;  }  
Magic Number,Dapper,DynamicParameters,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (s != null) {  	if (s.Length <= 4000) {  		p.Size = 4000;  	}  }  
Magic Number,Dapper,DynamicParameters,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (s != null) {  	if (s.Length <= 4000) {  		p.Size = 4000;  	}  }  
Magic Number,Dapper,DynamicParameters,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (s.Length <= 4000) {  	p.Size = 4000;  }  
Magic Number,Dapper,DynamicParameters,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (s.Length <= 4000) {  	p.Size = 4000;  }  
Magic Number,Dapper,DynamicParameters,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,AddParameters,The following statement contains a magic number: p.Size = 4000;  
Magic Number,Dapper,DbString,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,AddParameter,The following statement contains a magic number: if (Length == -1 && Value != null && Value.Length <= 4000) {  	param.Size = 4000;  }  else {  	param.Size = Length;  }  
Magic Number,Dapper,DbString,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,AddParameter,The following statement contains a magic number: if (Length == -1 && Value != null && Value.Length <= 4000) {  	param.Size = 4000;  }  else {  	param.Size = Length;  }  
Magic Number,Dapper,DbString,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,AddParameter,The following statement contains a magic number: param.Size = 4000;  
Magic Number,Dapper,DefaultTypeMap,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,FindConstructor,The following statement contains a magic number: foreach (ConstructorInfo ctor in constructors.OrderBy (c => c.IsPublic ? 0 : (c.IsPrivate ? 2 : 1)).ThenBy (c => c.GetParameters ().Length)) {  	ParameterInfo[] ctorParameters = ctor.GetParameters ();  	if (ctorParameters.Length == 0)  		return ctor;  	if (ctorParameters.Length != types.Length)  		continue;  	int i = 0;  	for (; i < ctorParameters.Length; i++) {  		if (!String.Equals (ctorParameters [i].Name' names [i]' StringComparison.OrdinalIgnoreCase))  			break;  		if (types [i] == typeof(byte[]) && ctorParameters [i].ParameterType.FullName == SqlMapper.LinqBinary)  			continue;  		var unboxedType = Nullable.GetUnderlyingType (ctorParameters [i].ParameterType) ?? ctorParameters [i].ParameterType;  		if (unboxedType != types [i] && !(unboxedType.IsEnum && Enum.GetUnderlyingType (unboxedType) == types [i]) && !(unboxedType == typeof(char) && types [i] == typeof(string)))  			break;  	}  	if (i == ctorParameters.Length)  		return ctor;  }  
Missing Default,Dapper,DynamicParameters,C:\repos\maronta_pro\BuyListCreator\SqlMapper.cs,Clean,The following switch statement is missing a default case: switch (name [0]) {  case '@':  case ':':  case '?':  	return name.Substring (1);  }  
