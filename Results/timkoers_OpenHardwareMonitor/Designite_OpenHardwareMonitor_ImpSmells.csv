Implementation smell,Namespace,Class,File,Method,Description
Long Method,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The method has 166 lines of code.
Long Method,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The method has 240 lines of code.
Long Method,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,treeView_Click,The method has 148 lines of code.
Complex Method,OpenHardwareMonitor.GUI,GadgetWindow,C:\repos\timkoers_OpenHardwareMonitor\GUI\GadgetWindow.cs,WndProc,Cyclomatic complexity of the method is 35
Complex Method,OpenHardwareMonitor.GUI,HardwareTypeImage,C:\repos\timkoers_OpenHardwareMonitor\GUI\HardwareTypeImage.cs,GetImage,Cyclomatic complexity of the method is 31
Complex Method,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,Cyclomatic complexity of the method is 32
Complex Method,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,OnPaint,Cyclomatic complexity of the method is 33
Complex Method,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,SensorNotifyIcon,Cyclomatic complexity of the method is 13
Complex Method,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,GetString,Cyclomatic complexity of the method is 11
Complex Method,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,Update,Cyclomatic complexity of the method is 43
Complex Method,OpenHardwareMonitor.GUI,StartupManager,C:\repos\timkoers_OpenHardwareMonitor\GUI\StartupManager.cs,StartupManager,Cyclomatic complexity of the method is 14
Complex Method,OpenHardwareMonitor.GUI,TypeNode,C:\repos\timkoers_OpenHardwareMonitor\GUI\TypeNode.cs,TypeNode,Cyclomatic complexity of the method is 44
Complex Method,OpenHardwareMonitor.GUI,HardwareNode,C:\repos\timkoers_OpenHardwareMonitor\GUI\HardwareNode.cs,SensorRemoved,Cyclomatic complexity of the method is 8
Complex Method,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,Cyclomatic complexity of the method is 9
Complex Method,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,timer_Tick,Cyclomatic complexity of the method is 8
Complex Method,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,treeView_Click,Cyclomatic complexity of the method is 16
Complex Method,OpenHardwareMonitor.GUI,SensorNode,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNode.cs,SensorNode,Cyclomatic complexity of the method is 33
Complex Method,OpenHardwareMonitor.Utilities,HttpServer,C:\repos\timkoers_OpenHardwareMonitor\Utilities\HttpServer.cs,ServeResourceFile,Cyclomatic complexity of the method is 8
Complex Method,OpenHardwareMonitor.Utilities,HttpServer,C:\repos\timkoers_OpenHardwareMonitor\Utilities\HttpServer.cs,ServeResourceImage,Cyclomatic complexity of the method is 8
Complex Method,OpenHardwareMonitor.Utilities,HttpServer,C:\repos\timkoers_OpenHardwareMonitor\Utilities\HttpServer.cs,GetcontentType,Cyclomatic complexity of the method is 16
Complex Method,OpenHardwareMonitor.Utilities,HttpServer,C:\repos\timkoers_OpenHardwareMonitor\Utilities\HttpServer.cs,GetHardwareImageFile,Cyclomatic complexity of the method is 10
Complex Method,OpenHardwareMonitor.Utilities,HttpServer,C:\repos\timkoers_OpenHardwareMonitor\Utilities\HttpServer.cs,GetTypeImageFile,Cyclomatic complexity of the method is 10
Complex Method,OpenHardwareMonitor.Utilities,Logger,C:\repos\timkoers_OpenHardwareMonitor\Utilities\Logger.cs,Log,Cyclomatic complexity of the method is 10
Long Parameter List,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreateMenu,The method has 28 parameters.
Long Parameter List,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The method has 23 parameters.
Long Parameter List,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,DrawImageWidthBorder,The method has 8 parameters.
Long Parameter List,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,DrawProgress,The method has 6 parameters.
Long Parameter List,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,SensorNotifyIcon,The method has 15 parameters.
Long Parameter List,OpenHardwareMonitor.GUI,SystemTray,C:\repos\timkoers_OpenHardwareMonitor\GUI\SystemTray.cs,SystemTray,The method has 9 parameters.
Long Parameter List,OpenHardwareMonitor.GUI,UserRadioGroup,C:\repos\timkoers_OpenHardwareMonitor\GUI\UserRadioGroup.cs,UserRadioGroup,The method has 6 parameters.
Long Parameter List,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The method has 30 parameters.
Long Parameter List,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,InitializePlotForm,The method has 12 parameters.
Long Parameter List,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,treeView_Click,The method has 24 parameters.
Long Parameter List,OpenHardwareMonitor.TaskScheduler,ITaskFolder,C:\repos\timkoers_OpenHardwareMonitor\GUI\TaskScheduler.cs,RegisterTask,The method has 7 parameters.
Long Parameter List,OpenHardwareMonitor.TaskScheduler,ITaskFolder,C:\repos\timkoers_OpenHardwareMonitor\GUI\TaskScheduler.cs,RegisterTaskDefinition,The method has 7 parameters.
Long Statement,OpenHardwareMonitor.GUI,GadgetWindow,C:\repos\timkoers_OpenHardwareMonitor\GUI\GadgetWindow.cs,MoveToBottom,The length of the statement  "	NativeMethods.SetWindowPos (handle' HWND_BOTTOM' 0' 0' 0' 0' SWP_NOMOVE | SWP_NOSIZE | SWP_NOACTIVATE | SWP_NOSENDCHANGING); " is 124.
Long Statement,OpenHardwareMonitor.GUI,GadgetWindow,C:\repos\timkoers_OpenHardwareMonitor\GUI\GadgetWindow.cs,MoveToTopMost,The length of the statement  "	NativeMethods.SetWindowPos (handle' HWND_TOPMOST' 0' 0' 0' 0' SWP_NOMOVE | SWP_NOSIZE | SWP_NOACTIVATE | SWP_NOSENDCHANGING); " is 125.
Long Statement,OpenHardwareMonitor.GUI,GadgetWindow,C:\repos\timkoers_OpenHardwareMonitor\GUI\GadgetWindow.cs,ShowContextMenu,The length of the statement  "	NativeMethods.TrackPopupMenuEx (contextMenu.Handle' TPM_RIGHTBUTTON | TPM_VERTICAL' position.X' position.Y' Handle' IntPtr.Zero); " is 129.
Long Statement,OpenHardwareMonitor.GUI,GadgetWindow,C:\repos\timkoers_OpenHardwareMonitor\GUI\GadgetWindow.cs,WndProc,The length of the statement  "				Point p = new Point (Macros.GET_X_LPARAM (message.LParam) - location.X' Macros.GET_Y_LPARAM (message.LParam) - location.Y); " is 123.
Long Statement,OpenHardwareMonitor.GUI,GadgetWindow,C:\repos\timkoers_OpenHardwareMonitor\GUI\GadgetWindow.cs,WndProc,The length of the statement  "				MouseDoubleClick (this' new MouseEventArgs (MouseButtons.Left' 2' Macros.GET_X_LPARAM (message.LParam) - location.X' Macros.GET_Y_LPARAM (message.LParam) - location.Y' 0)); " is 172.
Long Statement,OpenHardwareMonitor.GUI,GadgetWindow,C:\repos\timkoers_OpenHardwareMonitor\GUI\GadgetWindow.cs,WndProc,The length of the statement  "					NativeMethods.UpdateLayeredWindow (Handle' IntPtr.Zero' IntPtr.Zero' ref size' IntPtr.Zero' IntPtr.Zero' 0' IntPtr.Zero' 0); " is 124.
Long Statement,OpenHardwareMonitor.GUI,GadgetWindow,C:\repos\timkoers_OpenHardwareMonitor\GUI\GadgetWindow.cs,WndProc,The length of the statement  "					NativeMethods.SetWindowPos (Handle' IntPtr.Zero' location.X' location.Y' 0' 0' SWP_NOSIZE | SWP_NOACTIVATE | SWP_NOZORDER | SWP_NOSENDCHANGING); " is 144.
Long Statement,OpenHardwareMonitor.GUI,GadgetWindow,C:\repos\timkoers_OpenHardwareMonitor\GUI\GadgetWindow.cs,Redraw,The length of the statement  "	NativeMethods.UpdateLayeredWindow (Handle' IntPtr.Zero' IntPtr.Zero' ref size' handleBitmapDC' ref pointSource' 0' ref blend' ULW_ALPHA); " is 137.
Long Statement,OpenHardwareMonitor.GUI,GadgetWindow,C:\repos\timkoers_OpenHardwareMonitor\GUI\GadgetWindow.cs,Redraw,The length of the statement  "	NativeMethods.SetWindowPos (Handle' IntPtr.Zero' location.X' location.Y' 0' 0' SWP_NOSIZE | SWP_NOACTIVATE | SWP_NOZORDER | SWP_NOSENDCHANGING); " is 144.
Long Statement,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreatePlotModel,The length of the statement  "	timeAxis.Zoom (settings.GetValue ("plotPanel.MinTimeSpan"' 0.0f)' settings.GetValue ("plotPanel.MaxTimeSpan"' 10.0f * 60)); " is 123.
Long Statement,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreatePlotModel,The length of the statement  "		axis.Zoom (settings.GetValue ("plotPanel.Min" + axis.Key' float.NaN)' settings.GetValue ("plotPanel.Max" + axis.Key' float.NaN)); " is 129.
Long Statement,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,SetSensors,The length of the statement  "				Y = unitManager.TemperatureUnit == TemperatureUnit.Celsius ? value.Value : UnitManager.CelsiusToFahrenheit (value.Value).Value " is 126.
Long Statement,OpenHardwareMonitor.GUI,PortForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\PortForm.cs,getLocalIPold,The length of the statement  "	// localIP = System.Net.Dns.GetHostByName(Environment.MachineName).AddressList[0].ToString(); also gives the wrong IP address " is 125.
Long Statement,OpenHardwareMonitor.GUI,RAMForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\RAMForm.cs,RAMForm_Load,The length of the statement  "		ramCombo.Items.Add (moRAM ["Manufacturer"].ToString () + " " + moRAM ["PartNumber"].ToString () + " " + "(" + moRAM ["BankLabel"].ToString () + ")"); " is 149.
Long Statement,OpenHardwareMonitor.GUI,RAMForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\RAMForm.cs,RAMForm_Load,The length of the statement  "			WarningLabel.Text = "Open Hardware Monitor has detected that your motherboard cannot display the right RAM information." + Environment.NewLine + "Since Open Hardware Monitor depends on the motherboard information'" + Environment.NewLine + "wrong information may be displayed."; " is 277.
Long Statement,OpenHardwareMonitor.GUI,ReportForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\ReportForm.cs,sendButton_Click,The length of the statement  "	string report = "type=hardware&" + "version=" + Uri.EscapeDataString (version.ToString ()) + "&" + "report=" + Uri.EscapeDataString (reportTextBox.Text) + "&" + "comment=" + Uri.EscapeDataString (commentTextBox.Text) + "&" + "email=" + Uri.EscapeDataString (emailTextBox.Text); " is 277.
Long Statement,OpenHardwareMonitor.GUI,CrashForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\CrashForm.cs,sendButton_Click,The length of the statement  "		string report = "type=crash&" + "version=" + Uri.EscapeDataString (version.ToString ()) + "&" + "report=" + Uri.EscapeDataString (reportTextBox.Text) + "&" + "comment=" + Uri.EscapeDataString (commentTextBox.Text) + "&" + "email=" + Uri.EscapeDataString (emailTextBox.Text); " is 274.
Long Statement,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,Add,The length of the statement  "		while (i < list.Count && (list [i].SensorType < sensor.SensorType || (list [i].SensorType == sensor.SensorType && list [i].Index < sensor.Index))) " is 146.
Long Statement,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,DrawImageWidthBorder,The length of the statement  "	g.DrawImage (back' new Rectangle (l' t' width - l - r' height - t - b)' new Rectangle (l' t' back.Width - l - r' back.Height - t - b)' u); " is 138.
Long Statement,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,DrawImageWidthBorder,The length of the statement  "	g.DrawImage (back' new Rectangle (width - r' t' r' height - t - b)' new Rectangle (back.Width - r' t' r' back.Height - t - b)' u); " is 130.
Long Statement,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,DrawImageWidthBorder,The length of the statement  "	g.DrawImage (back' new Rectangle (l' height - b' width - l - r' b)' new Rectangle (l' back.Height - b' back.Width - l - r' b)' u); " is 130.
Long Statement,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,DrawImageWidthBorder,The length of the statement  "	g.DrawImage (back' new Rectangle (width - r' height - b' r' b)' new Rectangle (back.Width - r' back.Height - b' r' b)' u); " is 122.
Long Statement,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,DrawProgress,The length of the statement  "	g.DrawImage (barBack' new RectangleF (x + width * progress' y' width * (1 - progress)' height)' new RectangleF (barBack.Width * progress' 0' (1 - progress) * barBack.Width' barBack.Height)' GraphicsUnit.Pixel); " is 210.
Long Statement,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,DrawProgress,The length of the statement  "	g.DrawImage (barFore' new RectangleF (x' y' width * progress' height)' new RectangleF (0' 0' progress * barFore.Width' barFore.Height)' GraphicsUnit.Pixel); " is 156.
Long Statement,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,OnPaint,The length of the statement  "		g.DrawString ("Right-click on a sensor in the main window and select " + "\"Show in Gadget\" to show the sensor here."' smallFont' Brushes.White' new Rectangle (x' y - 1' w - rightBorder - x' 0)); " is 196.
Long Statement,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,OnPaint,The length of the statement  "			g.DrawImage (HardwareTypeImage.Instance.GetImage (pair.Key.HardwareType)' new Rectangle (x' y + 1' iconSize' iconSize)); " is 120.
Long Statement,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,OnPaint,The length of the statement  "			if ((sensor.SensorType != SensorType.Load && sensor.SensorType != SensorType.Control && sensor.SensorType != SensorType.Level) || !sensor.Value.HasValue) { " is 155.
Long Statement,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,OnPaint,The length of the statement  "				g.DrawString (formatted' smallFont' darkWhite' new RectangleF (-1' y - 1' w - rightMargin + 3' 0)' alignRightStringFormat); " is 123.
Long Statement,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,OnPaint,The length of the statement  "				remainingWidth = w - (int)Math.Floor (g.MeasureString (formatted' smallFont' w' StringFormat.GenericTypographic).Width) - rightMargin; " is 134.
Long Statement,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,OnPaint,The length of the statement  "				DrawProgress (g' w - progressWidth - rightMargin' y + 0.35f * sensorLineHeight' progressWidth' 0.6f * sensorLineHeight' 0.01f * sensor.Value.Value); " is 148.
Long Statement,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,OnPaint,The length of the statement  "				g.DrawString (sensor.Name' smallFont' darkWhite' new RectangleF (leftMargin - 1' y - 1' remainingWidth' 0)' trimStringFormat); " is 126.
Long Statement,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,CreateTransparentIcon,The length of the statement  "	TextRenderer.DrawText (graphics' text' small ? smallFont : font' new Point (-2' small ? 1 : 0)' Color.White' Color.Black); " is 122.
Long Statement,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,CreateTransparentIcon,The length of the statement  "	BitmapData data = bitmap.LockBits (new Rectangle (0' 0' bitmap.Width' bitmap.Height)' ImageLockMode.ReadOnly' PixelFormat.Format32bppArgb); " is 139.
Long Statement,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,CreatePercentageIcon,The length of the statement  "	BitmapData data = bitmap.LockBits (new Rectangle (0' 0' bitmap.Width' bitmap.Height)' ImageLockMode.ReadOnly' PixelFormat.Format32bppArgb); " is 139.
Long Statement,OpenHardwareMonitor.GUI,StartupManager,C:\repos\timkoers_OpenHardwareMonitor\GUI\StartupManager.cs,CreateSchedulerTask,The length of the statement  "	folder.RegisterTaskDefinition ("Startup"' definition' (int)TASK_CREATION.TASK_CREATE_OR_UPDATE' null' null' TASK_LOGON_TYPE.TASK_LOGON_INTERACTIVE_TOKEN' ""); " is 158.
Long Statement,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,InitializePlotForm,The length of the statement  "			plotForm.Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2); " is 131.
Long Statement,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,InsertSorted,The length of the statement  "	while (i < nodes.Count && nodes [i] is HardwareNode && ((HardwareNode)nodes [i]).Hardware.HardwareType < node.Hardware.HardwareType) " is 132.
Long Statement,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,nodeTextBoxText_EditorShowing,The length of the statement  "	e.Cancel = !(treeView.CurrentNode != null && (treeView.CurrentNode.Tag is SensorNode || treeView.CurrentNode.Tag is HardwareNode)); " is 131.
Long Statement,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,SaveConfiguration,The length of the statement  "		MessageBox.Show ("Access to the path '" + fileName + "' is denied. " + "The current settings could not be saved."' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 168.
Long Statement,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,SaveConfiguration,The length of the statement  "		MessageBox.Show ("The path '" + fileName + "' is not writeable. " + "The current settings could not be saved."' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 165.
Long Statement,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,treeView_Click,The length of the statement  "						// Harddrive with Identifier /hdd/7 is at the top of the list and harddrive with identifier /hdd/0 is at the bottom of the list!!! " is 130.
Long Statement,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,ShowHDDInfoMenuItem_Click,The length of the statement  "	System.Windows.Forms.MessageBox.Show ("Collected array of " + Convert.ToString (totalDisks) + hddText + ": " + Environment.NewLine + string.Join (Environment.NewLine' OpenHardwareMonitor.Hardware.HDD.HarddriveInformation.harddriveinformationList.ToArray ())); " is 259.
Long Statement,OpenHardwareMonitor.Utilities,Logger,C:\repos\timkoers_OpenHardwareMonitor\Utilities\Logger.cs,Log,The length of the statement  "		using (StreamWriter writer = new StreamWriter (new FileStream (fileName' FileMode.Append' FileAccess.Write' FileShare.ReadWrite))) { " is 132.
Long Statement,OpenHardwareMonitor,Program,C:\repos\timkoers_OpenHardwareMonitor\Program.cs,IsFileAvailable,The length of the statement  "		MessageBox.Show ("The following file could not be found: " + fileName + "\nPlease extract all files from the archive."' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 173.
Complex Conditional,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,OnPaint,The conditional expression  "(sensor.SensorType != SensorType.Load && sensor.SensorType != SensorType.Control && sensor.SensorType != SensorType.Level) || !sensor.Value.HasValue"  is complex.
Virtual Method Call from Constructor,OpenHardwareMonitor.GUI,Gadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\Gadget.cs,Gadget,The constructor "Gadget" calls a virtual method "OnPaint".
Virtual Method Call from Constructor,OpenHardwareMonitor.GUI,StartupManager,C:\repos\timkoers_OpenHardwareMonitor\GUI\StartupManager.cs,StartupManager,The constructor "StartupManager" calls a virtual method "Connect".
Virtual Method Call from Constructor,OpenHardwareMonitor.GUI,StartupManager,C:\repos\timkoers_OpenHardwareMonitor\GUI\StartupManager.cs,StartupManager,The constructor "StartupManager" calls a virtual method "GetRunningTasks".
Virtual Method Call from Constructor,OpenHardwareMonitor.GUI,StartupManager,C:\repos\timkoers_OpenHardwareMonitor\GUI\StartupManager.cs,StartupManager,The constructor "StartupManager" calls a virtual method "GetFolder".
Empty Catch Block,OpenHardwareMonitor.GUI,GadgetWindow,C:\repos\timkoers_OpenHardwareMonitor\GUI\GadgetWindow.cs,GadgetWindow,The method has an empty catch block.
Empty Catch Block,OpenHardwareMonitor.GUI,GadgetWindow,C:\repos\timkoers_OpenHardwareMonitor\GUI\GadgetWindow.cs,GadgetWindow,The method has an empty catch block.
Empty Catch Block,OpenHardwareMonitor.GUI,PortForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\PortForm.cs,webServerLinkLabel_LinkClicked,The method has an empty catch block.
Empty Catch Block,OpenHardwareMonitor.GUI,ReportForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\ReportForm.cs,ReportForm,The method has an empty catch block.
Empty Catch Block,OpenHardwareMonitor.GUI,CrashForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\CrashForm.cs,sendButton_Click,The method has an empty catch block.
Empty Catch Block,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The method has an empty catch block.
Empty Catch Block,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The method has an empty catch block.
Empty Catch Block,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The method has an empty catch block.
Empty Catch Block,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The method has an empty catch block.
Empty Catch Block,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The method has an empty catch block.
Empty Catch Block,OpenHardwareMonitor.GUI,StartupManager,C:\repos\timkoers_OpenHardwareMonitor\GUI\StartupManager.cs,DeleteSchedulerTask,The method has an empty catch block.
Empty Catch Block,OpenHardwareMonitor.GUI,StartupManager,C:\repos\timkoers_OpenHardwareMonitor\GUI\StartupManager.cs,DeleteSchedulerTask,The method has an empty catch block.
Empty Catch Block,OpenHardwareMonitor.GUI,AboutBox,C:\repos\timkoers_OpenHardwareMonitor\GUI\AboutBox.cs,linkLabel_LinkClicked,The method has an empty catch block.
Empty Catch Block,OpenHardwareMonitor.Utilities,HttpServer,C:\repos\timkoers_OpenHardwareMonitor\Utilities\HttpServer.cs,StopHTTPListener,The method has an empty catch block.
Empty Catch Block,OpenHardwareMonitor.Utilities,HttpServer,C:\repos\timkoers_OpenHardwareMonitor\Utilities\HttpServer.cs,StopHTTPListener,The method has an empty catch block.
Empty Catch Block,OpenHardwareMonitor.Utilities,HttpServer,C:\repos\timkoers_OpenHardwareMonitor\Utilities\HttpServer.cs,StopHTTPListener,The method has an empty catch block.
Empty Catch Block,OpenHardwareMonitor.Utilities,HttpServer,C:\repos\timkoers_OpenHardwareMonitor\Utilities\HttpServer.cs,StopHTTPListener,The method has an empty catch block.
Empty Catch Block,OpenHardwareMonitor.Utilities,HttpServer,C:\repos\timkoers_OpenHardwareMonitor\Utilities\HttpServer.cs,ServeResourceFile,The method has an empty catch block.
Empty Catch Block,OpenHardwareMonitor.Utilities,HttpServer,C:\repos\timkoers_OpenHardwareMonitor\Utilities\HttpServer.cs,ServeResourceFile,The method has an empty catch block.
Empty Catch Block,OpenHardwareMonitor.Utilities,HttpServer,C:\repos\timkoers_OpenHardwareMonitor\Utilities\HttpServer.cs,ServeResourceImage,The method has an empty catch block.
Empty Catch Block,OpenHardwareMonitor.Utilities,HttpServer,C:\repos\timkoers_OpenHardwareMonitor\Utilities\HttpServer.cs,SendJSON,The method has an empty catch block.
Empty Catch Block,OpenHardwareMonitor.Utilities,Logger,C:\repos\timkoers_OpenHardwareMonitor\Utilities\Logger.cs,Log,The method has an empty catch block.
Empty Catch Block,OpenHardwareMonitor,Program,C:\repos\timkoers_OpenHardwareMonitor\Program.cs,Application_ThreadException,The method has an empty catch block.
Empty Catch Block,OpenHardwareMonitor,Program,C:\repos\timkoers_OpenHardwareMonitor\Program.cs,CurrentDomain_UnhandledException,The method has an empty catch block.
Empty Catch Block,OpenHardwareMonitor.WMI,WmiProvider,C:\repos\timkoers_OpenHardwareMonitor\WMI\WmiProvider.cs,ComputerHardwareAdded,The method has an empty catch block.
Empty Catch Block,OpenHardwareMonitor.WMI,WmiProvider,C:\repos\timkoers_OpenHardwareMonitor\WMI\WmiProvider.cs,HardwareSensorAdded,The method has an empty catch block.
Empty Catch Block,OpenHardwareMonitor.WMI,WmiProvider,C:\repos\timkoers_OpenHardwareMonitor\WMI\WmiProvider.cs,RevokeInstance,The method has an empty catch block.
Empty Catch Block,OpenHardwareMonitor.WMI,WmiProvider,C:\repos\timkoers_OpenHardwareMonitor\WMI\WmiProvider.cs,Dispose,The method has an empty catch block.
Magic Number,OpenHardwareMonitor.GUI,GadgetWindow,C:\repos\timkoers_OpenHardwareMonitor\GUI\GadgetWindow.cs,WndProc,The following statement contains a magic number: switch (message.Msg) {  case WM_COMMAND:  	{  		// need to dispatch the message for the context menu  		if (message.LParam == IntPtr.Zero)  			commandDispatch.Invoke (null' new object[] {  				message.WParam.ToInt32 () & 0xFFFF  			});  	}  	break;  case WM_NCHITTEST:  	{  		message.Result = (IntPtr)HitResult.Caption;  		if (HitTest != null) {  			Point p = new Point (Macros.GET_X_LPARAM (message.LParam) - location.X' Macros.GET_Y_LPARAM (message.LParam) - location.Y);  			HitTestEventArgs e = new HitTestEventArgs (p' HitResult.Caption);  			HitTest (this' e);  			message.Result = (IntPtr)e.HitResult;  		}  	}  	break;  case WM_NCLBUTTONDBLCLK:  	{  		if (MouseDoubleClick != null) {  			MouseDoubleClick (this' new MouseEventArgs (MouseButtons.Left' 2' Macros.GET_X_LPARAM (message.LParam) - location.X' Macros.GET_Y_LPARAM (message.LParam) - location.Y' 0));  		}  		message.Result = IntPtr.Zero;  	}  	break;  case WM_NCRBUTTONDOWN:  	{  		message.Result = IntPtr.Zero;  	}  	break;  case WM_NCRBUTTONUP:  	{  		if (contextMenu != null)  			ShowContextMenu (new Point (Macros.GET_X_LPARAM (message.LParam)' Macros.GET_Y_LPARAM (message.LParam)));  		message.Result = IntPtr.Zero;  	}  	break;  case WM_WINDOWPOSCHANGING:  	{  		WindowPos wp = (WindowPos)Marshal.PtrToStructure (message.LParam' typeof(WindowPos));  		if (!lockPositionAndSize) {  			// prevent the window from leaving the screen  			if ((wp.flags & SWP_NOMOVE) == 0) {  				Rectangle rect = Screen.GetWorkingArea (new Rectangle (wp.x' wp.y' wp.cx' wp.cy));  				const int margin = 16;  				wp.x = Math.Max (wp.x' rect.Left - wp.cx + margin);  				wp.x = Math.Min (wp.x' rect.Right - margin);  				wp.y = Math.Max (wp.y' rect.Top - wp.cy + margin);  				wp.y = Math.Min (wp.y' rect.Bottom - margin);  			}  			// update location and fire event  			if ((wp.flags & SWP_NOMOVE) == 0) {  				if (location.X != wp.x || location.Y != wp.y) {  					location = new Point (wp.x' wp.y);  					if (LocationChanged != null)  						LocationChanged (this' EventArgs.Empty);  				}  			}  			// update size and fire event  			if ((wp.flags & SWP_NOSIZE) == 0) {  				if (size.Width != wp.cx || size.Height != wp.cy) {  					size = new Size (wp.cx' wp.cy);  					if (SizeChanged != null)  						SizeChanged (this' EventArgs.Empty);  				}  			}  			// update the size of the layered window  			if ((wp.flags & SWP_NOSIZE) == 0) {  				NativeMethods.UpdateLayeredWindow (Handle' IntPtr.Zero' IntPtr.Zero' ref size' IntPtr.Zero' IntPtr.Zero' 0' IntPtr.Zero' 0);  			}  			// update the position of the layered window  			if ((wp.flags & SWP_NOMOVE) == 0) {  				NativeMethods.SetWindowPos (Handle' IntPtr.Zero' location.X' location.Y' 0' 0' SWP_NOSIZE | SWP_NOACTIVATE | SWP_NOZORDER | SWP_NOSENDCHANGING);  			}  		}  		// do not forward any move or size messages  		wp.flags |= SWP_NOSIZE | SWP_NOMOVE;  		// suppress any frame changed events  		wp.flags &= ~SWP_FRAMECHANGED;  		Marshal.StructureToPtr (wp' message.LParam' false);  		message.Result = IntPtr.Zero;  	}  	break;  default:  	{  		base.WndProc (ref message);  	}  	break;  }  
Magic Number,OpenHardwareMonitor.GUI,GadgetWindow,C:\repos\timkoers_OpenHardwareMonitor\GUI\GadgetWindow.cs,WndProc,The following statement contains a magic number: switch (message.Msg) {  case WM_COMMAND:  	{  		// need to dispatch the message for the context menu  		if (message.LParam == IntPtr.Zero)  			commandDispatch.Invoke (null' new object[] {  				message.WParam.ToInt32 () & 0xFFFF  			});  	}  	break;  case WM_NCHITTEST:  	{  		message.Result = (IntPtr)HitResult.Caption;  		if (HitTest != null) {  			Point p = new Point (Macros.GET_X_LPARAM (message.LParam) - location.X' Macros.GET_Y_LPARAM (message.LParam) - location.Y);  			HitTestEventArgs e = new HitTestEventArgs (p' HitResult.Caption);  			HitTest (this' e);  			message.Result = (IntPtr)e.HitResult;  		}  	}  	break;  case WM_NCLBUTTONDBLCLK:  	{  		if (MouseDoubleClick != null) {  			MouseDoubleClick (this' new MouseEventArgs (MouseButtons.Left' 2' Macros.GET_X_LPARAM (message.LParam) - location.X' Macros.GET_Y_LPARAM (message.LParam) - location.Y' 0));  		}  		message.Result = IntPtr.Zero;  	}  	break;  case WM_NCRBUTTONDOWN:  	{  		message.Result = IntPtr.Zero;  	}  	break;  case WM_NCRBUTTONUP:  	{  		if (contextMenu != null)  			ShowContextMenu (new Point (Macros.GET_X_LPARAM (message.LParam)' Macros.GET_Y_LPARAM (message.LParam)));  		message.Result = IntPtr.Zero;  	}  	break;  case WM_WINDOWPOSCHANGING:  	{  		WindowPos wp = (WindowPos)Marshal.PtrToStructure (message.LParam' typeof(WindowPos));  		if (!lockPositionAndSize) {  			// prevent the window from leaving the screen  			if ((wp.flags & SWP_NOMOVE) == 0) {  				Rectangle rect = Screen.GetWorkingArea (new Rectangle (wp.x' wp.y' wp.cx' wp.cy));  				const int margin = 16;  				wp.x = Math.Max (wp.x' rect.Left - wp.cx + margin);  				wp.x = Math.Min (wp.x' rect.Right - margin);  				wp.y = Math.Max (wp.y' rect.Top - wp.cy + margin);  				wp.y = Math.Min (wp.y' rect.Bottom - margin);  			}  			// update location and fire event  			if ((wp.flags & SWP_NOMOVE) == 0) {  				if (location.X != wp.x || location.Y != wp.y) {  					location = new Point (wp.x' wp.y);  					if (LocationChanged != null)  						LocationChanged (this' EventArgs.Empty);  				}  			}  			// update size and fire event  			if ((wp.flags & SWP_NOSIZE) == 0) {  				if (size.Width != wp.cx || size.Height != wp.cy) {  					size = new Size (wp.cx' wp.cy);  					if (SizeChanged != null)  						SizeChanged (this' EventArgs.Empty);  				}  			}  			// update the size of the layered window  			if ((wp.flags & SWP_NOSIZE) == 0) {  				NativeMethods.UpdateLayeredWindow (Handle' IntPtr.Zero' IntPtr.Zero' ref size' IntPtr.Zero' IntPtr.Zero' 0' IntPtr.Zero' 0);  			}  			// update the position of the layered window  			if ((wp.flags & SWP_NOMOVE) == 0) {  				NativeMethods.SetWindowPos (Handle' IntPtr.Zero' location.X' location.Y' 0' 0' SWP_NOSIZE | SWP_NOACTIVATE | SWP_NOZORDER | SWP_NOSENDCHANGING);  			}  		}  		// do not forward any move or size messages  		wp.flags |= SWP_NOSIZE | SWP_NOMOVE;  		// suppress any frame changed events  		wp.flags &= ~SWP_FRAMECHANGED;  		Marshal.StructureToPtr (wp' message.LParam' false);  		message.Result = IntPtr.Zero;  	}  	break;  default:  	{  		base.WndProc (ref message);  	}  	break;  }  
Magic Number,OpenHardwareMonitor.GUI,GadgetWindow,C:\repos\timkoers_OpenHardwareMonitor\GUI\GadgetWindow.cs,WndProc,The following statement contains a magic number: if (MouseDoubleClick != null) {  	MouseDoubleClick (this' new MouseEventArgs (MouseButtons.Left' 2' Macros.GET_X_LPARAM (message.LParam) - location.X' Macros.GET_Y_LPARAM (message.LParam) - location.Y' 0));  }  
Magic Number,OpenHardwareMonitor.GUI,GadgetWindow,C:\repos\timkoers_OpenHardwareMonitor\GUI\GadgetWindow.cs,WndProc,The following statement contains a magic number: MouseDoubleClick (this' new MouseEventArgs (MouseButtons.Left' 2' Macros.GET_X_LPARAM (message.LParam) - location.X' Macros.GET_Y_LPARAM (message.LParam) - location.Y' 0));  
Magic Number,OpenHardwareMonitor.GUI,GadgetWindow,C:\repos\timkoers_OpenHardwareMonitor\GUI\GadgetWindow.cs,WndProc,The following statement contains a magic number: if (!lockPositionAndSize) {  	// prevent the window from leaving the screen  	if ((wp.flags & SWP_NOMOVE) == 0) {  		Rectangle rect = Screen.GetWorkingArea (new Rectangle (wp.x' wp.y' wp.cx' wp.cy));  		const int margin = 16;  		wp.x = Math.Max (wp.x' rect.Left - wp.cx + margin);  		wp.x = Math.Min (wp.x' rect.Right - margin);  		wp.y = Math.Max (wp.y' rect.Top - wp.cy + margin);  		wp.y = Math.Min (wp.y' rect.Bottom - margin);  	}  	// update location and fire event  	if ((wp.flags & SWP_NOMOVE) == 0) {  		if (location.X != wp.x || location.Y != wp.y) {  			location = new Point (wp.x' wp.y);  			if (LocationChanged != null)  				LocationChanged (this' EventArgs.Empty);  		}  	}  	// update size and fire event  	if ((wp.flags & SWP_NOSIZE) == 0) {  		if (size.Width != wp.cx || size.Height != wp.cy) {  			size = new Size (wp.cx' wp.cy);  			if (SizeChanged != null)  				SizeChanged (this' EventArgs.Empty);  		}  	}  	// update the size of the layered window  	if ((wp.flags & SWP_NOSIZE) == 0) {  		NativeMethods.UpdateLayeredWindow (Handle' IntPtr.Zero' IntPtr.Zero' ref size' IntPtr.Zero' IntPtr.Zero' 0' IntPtr.Zero' 0);  	}  	// update the position of the layered window  	if ((wp.flags & SWP_NOMOVE) == 0) {  		NativeMethods.SetWindowPos (Handle' IntPtr.Zero' location.X' location.Y' 0' 0' SWP_NOSIZE | SWP_NOACTIVATE | SWP_NOZORDER | SWP_NOSENDCHANGING);  	}  }  
Magic Number,OpenHardwareMonitor.GUI,GadgetWindow,C:\repos\timkoers_OpenHardwareMonitor\GUI\GadgetWindow.cs,WndProc,The following statement contains a magic number: if ((wp.flags & SWP_NOMOVE) == 0) {  	Rectangle rect = Screen.GetWorkingArea (new Rectangle (wp.x' wp.y' wp.cx' wp.cy));  	const int margin = 16;  	wp.x = Math.Max (wp.x' rect.Left - wp.cx + margin);  	wp.x = Math.Min (wp.x' rect.Right - margin);  	wp.y = Math.Max (wp.y' rect.Top - wp.cy + margin);  	wp.y = Math.Min (wp.y' rect.Bottom - margin);  }  
Magic Number,OpenHardwareMonitor.GUI,GadgetWindow,C:\repos\timkoers_OpenHardwareMonitor\GUI\GadgetWindow.cs,CreateBuffer,The following statement contains a magic number: info.BitCount = 32;  
Magic Number,OpenHardwareMonitor.GUI,GadgetWindow,C:\repos\timkoers_OpenHardwareMonitor\GUI\GadgetWindow.cs,CreateBuffer,The following statement contains a magic number: if (Environment.OSVersion.Version.Major > 5) {  	this.graphics.TextRenderingHint = TextRenderingHint.SystemDefault;  	this.graphics.SmoothingMode = SmoothingMode.HighQuality;  }  
Magic Number,OpenHardwareMonitor.GUI,HDDForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\HDDForm.cs,SelectRequestedHardDisk,The following statement contains a magic number: wait = new System.Timers.Timer (1000);  
Magic Number,OpenHardwareMonitor.GUI,NotifyIconAdv,C:\repos\timkoers_OpenHardwareMonitor\GUI\NotifyIconAdv.cs,NotifyIconAdv,The following statement contains a magic number: if ((p == 4) || (p == 128)) {  	// Unix  	genericNotifyIcon = new NotifyIcon ();  }  else {  	// Windows  	windowsNotifyIcon = new NotifyIconWindowsImplementation ();  }  
Magic Number,OpenHardwareMonitor.GUI,NotifyIconAdv,C:\repos\timkoers_OpenHardwareMonitor\GUI\NotifyIconAdv.cs,NotifyIconAdv,The following statement contains a magic number: if ((p == 4) || (p == 128)) {  	// Unix  	genericNotifyIcon = new NotifyIcon ();  }  else {  	// Windows  	windowsNotifyIcon = new NotifyIconWindowsImplementation ();  }  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreateMenu,The following statement contains a magic number: timeAxis.Zoom (0' 5 * 60);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreateMenu,The following statement contains a magic number: timeAxis.Zoom (0' 5 * 60);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreateMenu,The following statement contains a magic number: timeAxis.Zoom (0' 10 * 60);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreateMenu,The following statement contains a magic number: timeAxis.Zoom (0' 10 * 60);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreateMenu,The following statement contains a magic number: timeAxis.Zoom (0' 20 * 60);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreateMenu,The following statement contains a magic number: timeAxis.Zoom (0' 20 * 60);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreateMenu,The following statement contains a magic number: timeAxis.Zoom (0' 30 * 60);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreateMenu,The following statement contains a magic number: timeAxis.Zoom (0' 30 * 60);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreateMenu,The following statement contains a magic number: timeAxis.Zoom (0' 45 * 60);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreateMenu,The following statement contains a magic number: timeAxis.Zoom (0' 45 * 60);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreateMenu,The following statement contains a magic number: timeAxis.Zoom (0' 60 * 60);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreateMenu,The following statement contains a magic number: timeAxis.Zoom (0' 60 * 60);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreateMenu,The following statement contains a magic number: timeAxis.Zoom (0' 1.5 * 60 * 60);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreateMenu,The following statement contains a magic number: timeAxis.Zoom (0' 1.5 * 60 * 60);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreateMenu,The following statement contains a magic number: timeAxis.Zoom (0' 1.5 * 60 * 60);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreateMenu,The following statement contains a magic number: timeAxis.Zoom (0' 2 * 60 * 60);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreateMenu,The following statement contains a magic number: timeAxis.Zoom (0' 2 * 60 * 60);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreateMenu,The following statement contains a magic number: timeAxis.Zoom (0' 2 * 60 * 60);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreateMenu,The following statement contains a magic number: timeAxis.Zoom (0' 3 * 60 * 60);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreateMenu,The following statement contains a magic number: timeAxis.Zoom (0' 3 * 60 * 60);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreateMenu,The following statement contains a magic number: timeAxis.Zoom (0' 3 * 60 * 60);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreateMenu,The following statement contains a magic number: timeAxis.Zoom (0' 6 * 60 * 60);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreateMenu,The following statement contains a magic number: timeAxis.Zoom (0' 6 * 60 * 60);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreateMenu,The following statement contains a magic number: timeAxis.Zoom (0' 6 * 60 * 60);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreateMenu,The following statement contains a magic number: timeAxis.Zoom (0' 12 * 60 * 60);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreateMenu,The following statement contains a magic number: timeAxis.Zoom (0' 12 * 60 * 60);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreateMenu,The following statement contains a magic number: timeAxis.Zoom (0' 12 * 60 * 60);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreateMenu,The following statement contains a magic number: timeAxis.Zoom (0' 24 * 60 * 60);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreateMenu,The following statement contains a magic number: timeAxis.Zoom (0' 24 * 60 * 60);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreateMenu,The following statement contains a magic number: timeAxis.Zoom (0' 24 * 60 * 60);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreatePlotModel,The following statement contains a magic number: timeAxis.MajorGridlineColor = OxyColor.FromRgb (192' 192' 192);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreatePlotModel,The following statement contains a magic number: timeAxis.MajorGridlineColor = OxyColor.FromRgb (192' 192' 192);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreatePlotModel,The following statement contains a magic number: timeAxis.MajorGridlineColor = OxyColor.FromRgb (192' 192' 192);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreatePlotModel,The following statement contains a magic number: timeAxis.MinorGridlineColor = OxyColor.FromRgb (232' 232' 232);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreatePlotModel,The following statement contains a magic number: timeAxis.MinorGridlineColor = OxyColor.FromRgb (232' 232' 232);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreatePlotModel,The following statement contains a magic number: timeAxis.MinorGridlineColor = OxyColor.FromRgb (232' 232' 232);  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreatePlotModel,The following statement contains a magic number: timeAxis.AbsoluteMaximum = 24 * 60 * 60;  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreatePlotModel,The following statement contains a magic number: timeAxis.AbsoluteMaximum = 24 * 60 * 60;  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreatePlotModel,The following statement contains a magic number: timeAxis.AbsoluteMaximum = 24 * 60 * 60;  
Magic Number,OpenHardwareMonitor.GUI,PlotPanel,C:\repos\timkoers_OpenHardwareMonitor\GUI\PlotPanel.cs,CreatePlotModel,The following statement contains a magic number: timeAxis.Zoom (settings.GetValue ("plotPanel.MinTimeSpan"' 0.0f)' settings.GetValue ("plotPanel.MaxTimeSpan"' 10.0f * 60));  
Magic Number,OpenHardwareMonitor.GUI,RAMForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\RAMForm.cs,RAMForm_Load,The following statement contains a magic number: wait = new System.Timers.Timer (1000);  
Magic Number,OpenHardwareMonitor.GUI,ReportForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\ReportForm.cs,sendButton_Click,The following statement contains a magic number: request.Timeout = 5000;  
Magic Number,OpenHardwareMonitor.GUI,CrashForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\CrashForm.cs,sendButton_Click,The following statement contains a magic number: try {  	Version version = typeof(CrashForm).Assembly.GetName ().Version;  	WebRequest request = WebRequest.Create ("http://openhardwaremonitor.org/report.php");  	request.Method = "POST";  	request.Timeout = 5000;  	request.ContentType = "application/x-www-form-urlencoded";  	string report = "type=crash&" + "version=" + Uri.EscapeDataString (version.ToString ()) + "&" + "report=" + Uri.EscapeDataString (reportTextBox.Text) + "&" + "comment=" + Uri.EscapeDataString (commentTextBox.Text) + "&" + "email=" + Uri.EscapeDataString (emailTextBox.Text);  	byte[] byteArray = Encoding.UTF8.GetBytes (report);  	request.ContentLength = byteArray.Length;  	try {  		Stream dataStream = request.GetRequestStream ();  		dataStream.Write (byteArray' 0' byteArray.Length);  		dataStream.Close ();  		WebResponse response = request.GetResponse ();  		dataStream = response.GetResponseStream ();  		StreamReader reader = new StreamReader (dataStream);  		string responseFromServer = reader.ReadToEnd ();  		reader.Close ();  		dataStream.Close ();  		response.Close ();  		Close ();  	}  	catch (WebException) {  		MessageBox.Show ("Sending the crash report failed."' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  }  catch {  }  
Magic Number,OpenHardwareMonitor.GUI,CrashForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\CrashForm.cs,sendButton_Click,The following statement contains a magic number: request.Timeout = 5000;  
Magic Number,OpenHardwareMonitor.GUI,ParameterForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\ParameterForm.cs,dataGridView_CellValidating,The following statement contains a magic number: if (e.ColumnIndex == 2 && !float.TryParse (e.FormattedValue.ToString ()' out value)) {  	dataGridView.Rows [e.RowIndex].Cells [0].ErrorText = "Invalid value";  	e.Cancel = true;  }  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The following statement contains a magic number: this.Location = new Point (settings.GetValue ("sensorGadget.Location.X"' 100)' settings.GetValue ("sensorGadget.Location.Y"' 100));  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The following statement contains a magic number: this.Location = new Point (settings.GetValue ("sensorGadget.Location.X"' 100)' settings.GetValue ("sensorGadget.Location.Y"' 100));  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	float size;  	string name;  	switch (i) {  	case 0:  		size = 6.5f;  		name = "Small";  		break;  	case 1:  		size = 7.5f;  		name = "Medium";  		break;  	case 2:  		size = 9f;  		name = "Large";  		break;  	case 3:  		size = 11f;  		name = "Very Large";  		break;  	default:  		throw new NotImplementedException ();  	}  	MenuItem item = new MenuItem (name);  	item.Checked = fontSize == size;  	item.Click += delegate (object sender' EventArgs e) {  		SetFontSize (size);  		settings.SetValue ("sensorGadget.FontSize"' size);  		foreach (MenuItem mi in fontSizeMenu.MenuItems)  			mi.Checked = mi == item;  	};  	fontSizeMenu.MenuItems.Add (item);  }  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	float size;  	string name;  	switch (i) {  	case 0:  		size = 6.5f;  		name = "Small";  		break;  	case 1:  		size = 7.5f;  		name = "Medium";  		break;  	case 2:  		size = 9f;  		name = "Large";  		break;  	case 3:  		size = 11f;  		name = "Very Large";  		break;  	default:  		throw new NotImplementedException ();  	}  	MenuItem item = new MenuItem (name);  	item.Checked = fontSize == size;  	item.Click += delegate (object sender' EventArgs e) {  		SetFontSize (size);  		settings.SetValue ("sensorGadget.FontSize"' size);  		foreach (MenuItem mi in fontSizeMenu.MenuItems)  			mi.Checked = mi == item;  	};  	fontSizeMenu.MenuItems.Add (item);  }  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	float size;  	string name;  	switch (i) {  	case 0:  		size = 6.5f;  		name = "Small";  		break;  	case 1:  		size = 7.5f;  		name = "Medium";  		break;  	case 2:  		size = 9f;  		name = "Large";  		break;  	case 3:  		size = 11f;  		name = "Very Large";  		break;  	default:  		throw new NotImplementedException ();  	}  	MenuItem item = new MenuItem (name);  	item.Checked = fontSize == size;  	item.Click += delegate (object sender' EventArgs e) {  		SetFontSize (size);  		settings.SetValue ("sensorGadget.FontSize"' size);  		foreach (MenuItem mi in fontSizeMenu.MenuItems)  			mi.Checked = mi == item;  	};  	fontSizeMenu.MenuItems.Add (item);  }  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The following statement contains a magic number: switch (i) {  case 0:  	size = 6.5f;  	name = "Small";  	break;  case 1:  	size = 7.5f;  	name = "Medium";  	break;  case 2:  	size = 9f;  	name = "Large";  	break;  case 3:  	size = 11f;  	name = "Very Large";  	break;  default:  	throw new NotImplementedException ();  }  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The following statement contains a magic number: switch (i) {  case 0:  	size = 6.5f;  	name = "Small";  	break;  case 1:  	size = 7.5f;  	name = "Medium";  	break;  case 2:  	size = 9f;  	name = "Large";  	break;  case 3:  	size = 11f;  	name = "Very Large";  	break;  default:  	throw new NotImplementedException ();  }  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The following statement contains a magic number: Opacity = (byte)settings.GetValue ("sensorGadget.Opacity"' 255);  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	MenuItem item = new MenuItem ((20 * (i + 1)).ToString () + " %");  	byte o = (byte)(51 * (i + 1));  	item.Checked = Opacity == o;  	item.Click += delegate (object sender' EventArgs e) {  		Opacity = o;  		settings.SetValue ("sensorGadget.Opacity"' Opacity);  		foreach (MenuItem mi in opacityMenu.MenuItems)  			mi.Checked = mi == item;  	};  	opacityMenu.MenuItems.Add (item);  }  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	MenuItem item = new MenuItem ((20 * (i + 1)).ToString () + " %");  	byte o = (byte)(51 * (i + 1));  	item.Checked = Opacity == o;  	item.Click += delegate (object sender' EventArgs e) {  		Opacity = o;  		settings.SetValue ("sensorGadget.Opacity"' Opacity);  		foreach (MenuItem mi in opacityMenu.MenuItems)  			mi.Checked = mi == item;  	};  	opacityMenu.MenuItems.Add (item);  }  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	MenuItem item = new MenuItem ((20 * (i + 1)).ToString () + " %");  	byte o = (byte)(51 * (i + 1));  	item.Checked = Opacity == o;  	item.Click += delegate (object sender' EventArgs e) {  		Opacity = o;  		settings.SetValue ("sensorGadget.Opacity"' Opacity);  		foreach (MenuItem mi in opacityMenu.MenuItems)  			mi.Checked = mi == item;  	};  	opacityMenu.MenuItems.Add (item);  }  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The following statement contains a magic number: VisibleChanged += delegate (object sender' EventArgs e) {  	Rectangle bounds = new Rectangle (Location' Size);  	Screen screen = Screen.FromRectangle (bounds);  	Rectangle intersection = Rectangle.Intersect (screen.WorkingArea' bounds);  	if (intersection.Width < Math.Min (16' bounds.Width) || intersection.Height < Math.Min (16' bounds.Height)) {  		Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2);  	}  };  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The following statement contains a magic number: VisibleChanged += delegate (object sender' EventArgs e) {  	Rectangle bounds = new Rectangle (Location' Size);  	Screen screen = Screen.FromRectangle (bounds);  	Rectangle intersection = Rectangle.Intersect (screen.WorkingArea' bounds);  	if (intersection.Width < Math.Min (16' bounds.Width) || intersection.Height < Math.Min (16' bounds.Height)) {  		Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2);  	}  };  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The following statement contains a magic number: VisibleChanged += delegate (object sender' EventArgs e) {  	Rectangle bounds = new Rectangle (Location' Size);  	Screen screen = Screen.FromRectangle (bounds);  	Rectangle intersection = Rectangle.Intersect (screen.WorkingArea' bounds);  	if (intersection.Width < Math.Min (16' bounds.Width) || intersection.Height < Math.Min (16' bounds.Height)) {  		Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2);  	}  };  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The following statement contains a magic number: VisibleChanged += delegate (object sender' EventArgs e) {  	Rectangle bounds = new Rectangle (Location' Size);  	Screen screen = Screen.FromRectangle (bounds);  	Rectangle intersection = Rectangle.Intersect (screen.WorkingArea' bounds);  	if (intersection.Width < Math.Min (16' bounds.Width) || intersection.Height < Math.Min (16' bounds.Height)) {  		Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2);  	}  };  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The following statement contains a magic number: VisibleChanged += delegate (object sender' EventArgs e) {  	Rectangle bounds = new Rectangle (Location' Size);  	Screen screen = Screen.FromRectangle (bounds);  	Rectangle intersection = Rectangle.Intersect (screen.WorkingArea' bounds);  	if (intersection.Width < Math.Min (16' bounds.Width) || intersection.Height < Math.Min (16' bounds.Height)) {  		Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2);  	}  };  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The following statement contains a magic number: VisibleChanged += delegate (object sender' EventArgs e) {  	Rectangle bounds = new Rectangle (Location' Size);  	Screen screen = Screen.FromRectangle (bounds);  	Rectangle intersection = Rectangle.Intersect (screen.WorkingArea' bounds);  	if (intersection.Width < Math.Min (16' bounds.Width) || intersection.Height < Math.Min (16' bounds.Height)) {  		Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2);  	}  };  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The following statement contains a magic number: if (intersection.Width < Math.Min (16' bounds.Width) || intersection.Height < Math.Min (16' bounds.Height)) {  	Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2);  }  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The following statement contains a magic number: if (intersection.Width < Math.Min (16' bounds.Width) || intersection.Height < Math.Min (16' bounds.Height)) {  	Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2);  }  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The following statement contains a magic number: if (intersection.Width < Math.Min (16' bounds.Width) || intersection.Height < Math.Min (16' bounds.Height)) {  	Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2);  }  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The following statement contains a magic number: if (intersection.Width < Math.Min (16' bounds.Width) || intersection.Height < Math.Min (16' bounds.Height)) {  	Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2);  }  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The following statement contains a magic number: if (intersection.Width < Math.Min (16' bounds.Width) || intersection.Height < Math.Min (16' bounds.Height)) {  	Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2);  }  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The following statement contains a magic number: if (intersection.Width < Math.Min (16' bounds.Width) || intersection.Height < Math.Min (16' bounds.Height)) {  	Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2);  }  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The following statement contains a magic number: Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2);  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The following statement contains a magic number: Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2);  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The following statement contains a magic number: Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2);  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SensorGadget,The following statement contains a magic number: Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2);  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SetFontSize,The following statement contains a magic number: iconSize = (int)Math.Round (1.5 * scaledFontSize);  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SetFontSize,The following statement contains a magic number: hardwareLineHeight = (int)Math.Round (1.66 * scaledFontSize);  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SetFontSize,The following statement contains a magic number: sensorLineHeight = (int)Math.Round (1.33 * scaledFontSize);  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SetFontSize,The following statement contains a magic number: leftMargin = leftBorder + (int)Math.Round (0.3 * scaledFontSize);  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SetFontSize,The following statement contains a magic number: rightMargin = rightBorder + (int)Math.Round (0.3 * scaledFontSize);  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SetFontSize,The following statement contains a magic number: bottomMargin = bottomBorder + (int)Math.Round (0.3 * scaledFontSize);  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SetFontSize,The following statement contains a magic number: progressWidth = (int)Math.Round (5.3 * scaledFontSize);  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,SetFontSize,The following statement contains a magic number: Resize ((int)Math.Round (17.3 * scaledFontSize));  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,Resize,The following statement contains a magic number: if (sensors.Count == 0)  	y += 4 * sensorLineHeight + hardwareLineHeight;  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,Resize,The following statement contains a magic number: y += 4 * sensorLineHeight + hardwareLineHeight;  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,OnPaint,The following statement contains a magic number: foreach (KeyValuePair<IHardware' IList<ISensor>> pair in sensors) {  	if (hardwareNames.Value) {  		if (y > topMargin)  			y += hardwareLineHeight - sensorLineHeight;  		x = leftBorder + 1;  		g.DrawImage (HardwareTypeImage.Instance.GetImage (pair.Key.HardwareType)' new Rectangle (x' y + 1' iconSize' iconSize));  		x += iconSize + 1;  		g.DrawString (pair.Key.Name' largeFont' Brushes.White' new Rectangle (x' y - 1' w - rightBorder - x' 0)' stringFormat);  		y += hardwareLineHeight;  	}  	foreach (ISensor sensor in pair.Value) {  		int remainingWidth;  		if ((sensor.SensorType != SensorType.Load && sensor.SensorType != SensorType.Control && sensor.SensorType != SensorType.Level) || !sensor.Value.HasValue) {  			string formatted;  			if (sensor.Value.HasValue) {  				string format = "";  				switch (sensor.SensorType) {  				case SensorType.Voltage:  					format = "{0:F3} V";  					break;  				case SensorType.Clock:  					format = "{0:F0} MHz";  					break;  				case SensorType.Temperature:  					format = "{0:F1} °C";  					break;  				case SensorType.Fan:  					format = "{0:F0} RPM";  					break;  				case SensorType.Flow:  					format = "{0:F0} L/h";  					break;  				case SensorType.Power:  					format = "{0:F1} W";  					break;  				case SensorType.Data:  					format = "{0:F1} GB";  					break;  				case SensorType.Factor:  					format = "{0:F3}";  					break;  				}  				if (sensor.SensorType == SensorType.Temperature && unitManager.TemperatureUnit == TemperatureUnit.Fahrenheit) {  					formatted = string.Format ("{0:F1} °F"' UnitManager.CelsiusToFahrenheit (sensor.Value));  				}  				else {  					formatted = string.Format (format' sensor.Value);  				}  			}  			else {  				formatted = "-";  			}  			g.DrawString (formatted' smallFont' darkWhite' new RectangleF (-1' y - 1' w - rightMargin + 3' 0)' alignRightStringFormat);  			remainingWidth = w - (int)Math.Floor (g.MeasureString (formatted' smallFont' w' StringFormat.GenericTypographic).Width) - rightMargin;  		}  		else {  			DrawProgress (g' w - progressWidth - rightMargin' y + 0.35f * sensorLineHeight' progressWidth' 0.6f * sensorLineHeight' 0.01f * sensor.Value.Value);  			remainingWidth = w - progressWidth - rightMargin;  		}  		remainingWidth -= leftMargin + 2;  		if (remainingWidth > 0) {  			g.DrawString (sensor.Name' smallFont' darkWhite' new RectangleF (leftMargin - 1' y - 1' remainingWidth' 0)' trimStringFormat);  		}  		y += sensorLineHeight;  	}  }  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,OnPaint,The following statement contains a magic number: foreach (KeyValuePair<IHardware' IList<ISensor>> pair in sensors) {  	if (hardwareNames.Value) {  		if (y > topMargin)  			y += hardwareLineHeight - sensorLineHeight;  		x = leftBorder + 1;  		g.DrawImage (HardwareTypeImage.Instance.GetImage (pair.Key.HardwareType)' new Rectangle (x' y + 1' iconSize' iconSize));  		x += iconSize + 1;  		g.DrawString (pair.Key.Name' largeFont' Brushes.White' new Rectangle (x' y - 1' w - rightBorder - x' 0)' stringFormat);  		y += hardwareLineHeight;  	}  	foreach (ISensor sensor in pair.Value) {  		int remainingWidth;  		if ((sensor.SensorType != SensorType.Load && sensor.SensorType != SensorType.Control && sensor.SensorType != SensorType.Level) || !sensor.Value.HasValue) {  			string formatted;  			if (sensor.Value.HasValue) {  				string format = "";  				switch (sensor.SensorType) {  				case SensorType.Voltage:  					format = "{0:F3} V";  					break;  				case SensorType.Clock:  					format = "{0:F0} MHz";  					break;  				case SensorType.Temperature:  					format = "{0:F1} °C";  					break;  				case SensorType.Fan:  					format = "{0:F0} RPM";  					break;  				case SensorType.Flow:  					format = "{0:F0} L/h";  					break;  				case SensorType.Power:  					format = "{0:F1} W";  					break;  				case SensorType.Data:  					format = "{0:F1} GB";  					break;  				case SensorType.Factor:  					format = "{0:F3}";  					break;  				}  				if (sensor.SensorType == SensorType.Temperature && unitManager.TemperatureUnit == TemperatureUnit.Fahrenheit) {  					formatted = string.Format ("{0:F1} °F"' UnitManager.CelsiusToFahrenheit (sensor.Value));  				}  				else {  					formatted = string.Format (format' sensor.Value);  				}  			}  			else {  				formatted = "-";  			}  			g.DrawString (formatted' smallFont' darkWhite' new RectangleF (-1' y - 1' w - rightMargin + 3' 0)' alignRightStringFormat);  			remainingWidth = w - (int)Math.Floor (g.MeasureString (formatted' smallFont' w' StringFormat.GenericTypographic).Width) - rightMargin;  		}  		else {  			DrawProgress (g' w - progressWidth - rightMargin' y + 0.35f * sensorLineHeight' progressWidth' 0.6f * sensorLineHeight' 0.01f * sensor.Value.Value);  			remainingWidth = w - progressWidth - rightMargin;  		}  		remainingWidth -= leftMargin + 2;  		if (remainingWidth > 0) {  			g.DrawString (sensor.Name' smallFont' darkWhite' new RectangleF (leftMargin - 1' y - 1' remainingWidth' 0)' trimStringFormat);  		}  		y += sensorLineHeight;  	}  }  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,OnPaint,The following statement contains a magic number: foreach (ISensor sensor in pair.Value) {  	int remainingWidth;  	if ((sensor.SensorType != SensorType.Load && sensor.SensorType != SensorType.Control && sensor.SensorType != SensorType.Level) || !sensor.Value.HasValue) {  		string formatted;  		if (sensor.Value.HasValue) {  			string format = "";  			switch (sensor.SensorType) {  			case SensorType.Voltage:  				format = "{0:F3} V";  				break;  			case SensorType.Clock:  				format = "{0:F0} MHz";  				break;  			case SensorType.Temperature:  				format = "{0:F1} °C";  				break;  			case SensorType.Fan:  				format = "{0:F0} RPM";  				break;  			case SensorType.Flow:  				format = "{0:F0} L/h";  				break;  			case SensorType.Power:  				format = "{0:F1} W";  				break;  			case SensorType.Data:  				format = "{0:F1} GB";  				break;  			case SensorType.Factor:  				format = "{0:F3}";  				break;  			}  			if (sensor.SensorType == SensorType.Temperature && unitManager.TemperatureUnit == TemperatureUnit.Fahrenheit) {  				formatted = string.Format ("{0:F1} °F"' UnitManager.CelsiusToFahrenheit (sensor.Value));  			}  			else {  				formatted = string.Format (format' sensor.Value);  			}  		}  		else {  			formatted = "-";  		}  		g.DrawString (formatted' smallFont' darkWhite' new RectangleF (-1' y - 1' w - rightMargin + 3' 0)' alignRightStringFormat);  		remainingWidth = w - (int)Math.Floor (g.MeasureString (formatted' smallFont' w' StringFormat.GenericTypographic).Width) - rightMargin;  	}  	else {  		DrawProgress (g' w - progressWidth - rightMargin' y + 0.35f * sensorLineHeight' progressWidth' 0.6f * sensorLineHeight' 0.01f * sensor.Value.Value);  		remainingWidth = w - progressWidth - rightMargin;  	}  	remainingWidth -= leftMargin + 2;  	if (remainingWidth > 0) {  		g.DrawString (sensor.Name' smallFont' darkWhite' new RectangleF (leftMargin - 1' y - 1' remainingWidth' 0)' trimStringFormat);  	}  	y += sensorLineHeight;  }  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,OnPaint,The following statement contains a magic number: foreach (ISensor sensor in pair.Value) {  	int remainingWidth;  	if ((sensor.SensorType != SensorType.Load && sensor.SensorType != SensorType.Control && sensor.SensorType != SensorType.Level) || !sensor.Value.HasValue) {  		string formatted;  		if (sensor.Value.HasValue) {  			string format = "";  			switch (sensor.SensorType) {  			case SensorType.Voltage:  				format = "{0:F3} V";  				break;  			case SensorType.Clock:  				format = "{0:F0} MHz";  				break;  			case SensorType.Temperature:  				format = "{0:F1} °C";  				break;  			case SensorType.Fan:  				format = "{0:F0} RPM";  				break;  			case SensorType.Flow:  				format = "{0:F0} L/h";  				break;  			case SensorType.Power:  				format = "{0:F1} W";  				break;  			case SensorType.Data:  				format = "{0:F1} GB";  				break;  			case SensorType.Factor:  				format = "{0:F3}";  				break;  			}  			if (sensor.SensorType == SensorType.Temperature && unitManager.TemperatureUnit == TemperatureUnit.Fahrenheit) {  				formatted = string.Format ("{0:F1} °F"' UnitManager.CelsiusToFahrenheit (sensor.Value));  			}  			else {  				formatted = string.Format (format' sensor.Value);  			}  		}  		else {  			formatted = "-";  		}  		g.DrawString (formatted' smallFont' darkWhite' new RectangleF (-1' y - 1' w - rightMargin + 3' 0)' alignRightStringFormat);  		remainingWidth = w - (int)Math.Floor (g.MeasureString (formatted' smallFont' w' StringFormat.GenericTypographic).Width) - rightMargin;  	}  	else {  		DrawProgress (g' w - progressWidth - rightMargin' y + 0.35f * sensorLineHeight' progressWidth' 0.6f * sensorLineHeight' 0.01f * sensor.Value.Value);  		remainingWidth = w - progressWidth - rightMargin;  	}  	remainingWidth -= leftMargin + 2;  	if (remainingWidth > 0) {  		g.DrawString (sensor.Name' smallFont' darkWhite' new RectangleF (leftMargin - 1' y - 1' remainingWidth' 0)' trimStringFormat);  	}  	y += sensorLineHeight;  }  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,OnPaint,The following statement contains a magic number: if ((sensor.SensorType != SensorType.Load && sensor.SensorType != SensorType.Control && sensor.SensorType != SensorType.Level) || !sensor.Value.HasValue) {  	string formatted;  	if (sensor.Value.HasValue) {  		string format = "";  		switch (sensor.SensorType) {  		case SensorType.Voltage:  			format = "{0:F3} V";  			break;  		case SensorType.Clock:  			format = "{0:F0} MHz";  			break;  		case SensorType.Temperature:  			format = "{0:F1} °C";  			break;  		case SensorType.Fan:  			format = "{0:F0} RPM";  			break;  		case SensorType.Flow:  			format = "{0:F0} L/h";  			break;  		case SensorType.Power:  			format = "{0:F1} W";  			break;  		case SensorType.Data:  			format = "{0:F1} GB";  			break;  		case SensorType.Factor:  			format = "{0:F3}";  			break;  		}  		if (sensor.SensorType == SensorType.Temperature && unitManager.TemperatureUnit == TemperatureUnit.Fahrenheit) {  			formatted = string.Format ("{0:F1} °F"' UnitManager.CelsiusToFahrenheit (sensor.Value));  		}  		else {  			formatted = string.Format (format' sensor.Value);  		}  	}  	else {  		formatted = "-";  	}  	g.DrawString (formatted' smallFont' darkWhite' new RectangleF (-1' y - 1' w - rightMargin + 3' 0)' alignRightStringFormat);  	remainingWidth = w - (int)Math.Floor (g.MeasureString (formatted' smallFont' w' StringFormat.GenericTypographic).Width) - rightMargin;  }  else {  	DrawProgress (g' w - progressWidth - rightMargin' y + 0.35f * sensorLineHeight' progressWidth' 0.6f * sensorLineHeight' 0.01f * sensor.Value.Value);  	remainingWidth = w - progressWidth - rightMargin;  }  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,OnPaint,The following statement contains a magic number: g.DrawString (formatted' smallFont' darkWhite' new RectangleF (-1' y - 1' w - rightMargin + 3' 0)' alignRightStringFormat);  
Magic Number,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,OnPaint,The following statement contains a magic number: remainingWidth -= leftMargin + 2;  
Magic Number,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,SensorNotifyIcon,The following statement contains a magic number: this.pen = new Pen (Color.FromArgb (96' Color.Black));  
Magic Number,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,SensorNotifyIcon,The following statement contains a magic number: width = width < 16 ? 16 : width;  
Magic Number,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,SensorNotifyIcon,The following statement contains a magic number: width = width < 16 ? 16 : width;  
Magic Number,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,SensorNotifyIcon,The following statement contains a magic number: height = height < 16 ? 16 : height;  
Magic Number,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,SensorNotifyIcon,The following statement contains a magic number: height = height < 16 ? 16 : height;  
Magic Number,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,SensorNotifyIcon,The following statement contains a magic number: switch (family.Name) {  case "Segoe UI":  	baseSize = 12;  	break;  case "Tahoma":  	baseSize = 11;  	break;  default:  	baseSize = 12;  	break;  }  
Magic Number,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,SensorNotifyIcon,The following statement contains a magic number: switch (family.Name) {  case "Segoe UI":  	baseSize = 12;  	break;  case "Tahoma":  	baseSize = 11;  	break;  default:  	baseSize = 12;  	break;  }  
Magic Number,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,SensorNotifyIcon,The following statement contains a magic number: switch (family.Name) {  case "Segoe UI":  	baseSize = 12;  	break;  case "Tahoma":  	baseSize = 11;  	break;  default:  	baseSize = 12;  	break;  }  
Magic Number,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,SensorNotifyIcon,The following statement contains a magic number: baseSize = 12;  
Magic Number,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,SensorNotifyIcon,The following statement contains a magic number: baseSize = 11;  
Magic Number,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,SensorNotifyIcon,The following statement contains a magic number: baseSize = 12;  
Magic Number,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,SensorNotifyIcon,The following statement contains a magic number: if (Environment.OSVersion.Version.Major > 5) {  	this.graphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	this.graphics.SmoothingMode = SmoothingMode.HighQuality;  }  
Magic Number,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,CreateTransparentIcon,The following statement contains a magic number: TextRenderer.DrawText (graphics' text' small ? smallFont : font' new Point (-2' small ? 1 : 0)' Color.White' Color.Black);  
Magic Number,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,CreateTransparentIcon,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i += 4) {  	blue = bytes [i];  	green = bytes [i + 1];  	red = bytes [i + 2];  	bytes [i] = color.B;  	bytes [i + 1] = color.G;  	bytes [i + 2] = color.R;  	bytes [i + 3] = (byte)(0.3 * red + 0.59 * green + 0.11 * blue);  }  
Magic Number,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,CreateTransparentIcon,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i += 4) {  	blue = bytes [i];  	green = bytes [i + 1];  	red = bytes [i + 2];  	bytes [i] = color.B;  	bytes [i + 1] = color.G;  	bytes [i + 2] = color.R;  	bytes [i + 3] = (byte)(0.3 * red + 0.59 * green + 0.11 * blue);  }  
Magic Number,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,CreateTransparentIcon,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i += 4) {  	blue = bytes [i];  	green = bytes [i + 1];  	red = bytes [i + 2];  	bytes [i] = color.B;  	bytes [i + 1] = color.G;  	bytes [i + 2] = color.R;  	bytes [i + 3] = (byte)(0.3 * red + 0.59 * green + 0.11 * blue);  }  
Magic Number,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,CreateTransparentIcon,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i += 4) {  	blue = bytes [i];  	green = bytes [i + 1];  	red = bytes [i + 2];  	bytes [i] = color.B;  	bytes [i + 1] = color.G;  	bytes [i + 2] = color.R;  	bytes [i + 3] = (byte)(0.3 * red + 0.59 * green + 0.11 * blue);  }  
Magic Number,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,CreateTransparentIcon,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i += 4) {  	blue = bytes [i];  	green = bytes [i + 1];  	red = bytes [i + 2];  	bytes [i] = color.B;  	bytes [i + 1] = color.G;  	bytes [i + 2] = color.R;  	bytes [i + 3] = (byte)(0.3 * red + 0.59 * green + 0.11 * blue);  }  
Magic Number,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,CreateTransparentIcon,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i += 4) {  	blue = bytes [i];  	green = bytes [i + 1];  	red = bytes [i + 2];  	bytes [i] = color.B;  	bytes [i + 1] = color.G;  	bytes [i + 2] = color.R;  	bytes [i + 3] = (byte)(0.3 * red + 0.59 * green + 0.11 * blue);  }  
Magic Number,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,CreateTransparentIcon,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i += 4) {  	blue = bytes [i];  	green = bytes [i + 1];  	red = bytes [i + 2];  	bytes [i] = color.B;  	bytes [i + 1] = color.G;  	bytes [i + 2] = color.R;  	bytes [i + 3] = (byte)(0.3 * red + 0.59 * green + 0.11 * blue);  }  
Magic Number,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,CreateTransparentIcon,The following statement contains a magic number: i += 4
Magic Number,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,CreateTransparentIcon,The following statement contains a magic number: red = bytes [i + 2];  
Magic Number,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,CreateTransparentIcon,The following statement contains a magic number: bytes [i + 2] = color.R;  
Magic Number,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,CreateTransparentIcon,The following statement contains a magic number: bytes [i + 3] = (byte)(0.3 * red + 0.59 * green + 0.11 * blue);  
Magic Number,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,CreateTransparentIcon,The following statement contains a magic number: bytes [i + 3] = (byte)(0.3 * red + 0.59 * green + 0.11 * blue);  
Magic Number,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,CreateTransparentIcon,The following statement contains a magic number: bytes [i + 3] = (byte)(0.3 * red + 0.59 * green + 0.11 * blue);  
Magic Number,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,CreateTransparentIcon,The following statement contains a magic number: bytes [i + 3] = (byte)(0.3 * red + 0.59 * green + 0.11 * blue);  
Magic Number,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,CreatePercentageIcon,The following statement contains a magic number: graphics.FillRectangle (darkBrush' 0.5f' -0.5f' bitmap.Width - 2' bitmap.Height);  
Magic Number,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,CreatePercentageIcon,The following statement contains a magic number: graphics.FillRectangle (brush' 0.5f' -0.5f + y' bitmap.Width - 2' bitmap.Height - y);  
Magic Number,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,CreatePercentageIcon,The following statement contains a magic number: graphics.DrawRectangle (pen' 1' 0' bitmap.Width - 3' bitmap.Height - 1);  
Magic Number,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,Update,The following statement contains a magic number: hardwareName = hardwareName.Substring (0' Math.Min (63 - formattedValue.Length' hardwareName.Length));  
Magic Number,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,Update,The following statement contains a magic number: if (text.Length > 63)  	text = null;  
Magic Number,OpenHardwareMonitor.GUI,ShowDesktop,C:\repos\timkoers_OpenHardwareMonitor\GUI\ShowDesktop.cs,StartTimer,The following statement contains a magic number: timer.Change (0' 200);  
Magic Number,OpenHardwareMonitor.GUI,StartupManager,C:\repos\timkoers_OpenHardwareMonitor\GUI\StartupManager.cs,StartupManager,The following statement contains a magic number: if ((p == 4) || (p == 128)) {  	scheduler = null;  	isAvailable = false;  	return;  }  
Magic Number,OpenHardwareMonitor.GUI,StartupManager,C:\repos\timkoers_OpenHardwareMonitor\GUI\StartupManager.cs,StartupManager,The following statement contains a magic number: if ((p == 4) || (p == 128)) {  	scheduler = null;  	isAvailable = false;  	return;  }  
Magic Number,OpenHardwareMonitor.GUI,UnitManager,C:\repos\timkoers_OpenHardwareMonitor\GUI\UnitManager.cs,CelsiusToFahrenheit,The following statement contains a magic number: return valueInCelsius * 1.8f + 32;  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: foreach (TreeColumn column in treeView.Columns)  	column.Width = Math.Max (20' Math.Min (400' settings.GetValue ("treeView.Columns." + column.Header + ".Width"' column.Width)));  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: foreach (TreeColumn column in treeView.Columns)  	column.Width = Math.Max (20' Math.Min (400' settings.GetValue ("treeView.Columns." + column.Header + ".Width"' column.Width)));  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: column.Width = Math.Max (20' Math.Min (400' settings.GetValue ("treeView.Columns." + column.Header + ".Width"' column.Width)));  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: column.Width = Math.Max (20' Math.Min (400' settings.GetValue ("treeView.Columns." + column.Header + ".Width"' column.Width)));  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: if ((p == 4) || (p == 128)) {  	// Unix  	treeView.RowHeight = Math.Max (treeView.RowHeight' 18);  	splitContainer.BorderStyle = BorderStyle.None;  	splitContainer.Border3DStyle = Border3DStyle.Adjust;  	splitContainer.SplitterWidth = 4;  	treeView.BorderStyle = BorderStyle.Fixed3D;  	plotPanel.BorderStyle = BorderStyle.Fixed3D;  	gadgetMenuItem.Visible = false;  	minCloseMenuItem.Visible = false;  	minTrayMenuItem.Visible = false;  	startMinMenuItem.Visible = false;  }  else {  	// Windows  	treeView.RowHeight = Math.Max (treeView.Font.Height + 1' 18);  	gadget = new SensorGadget (computer' settings' unitManager);  	gadget.HideShowCommand += hideShowClick;  	wmiProvider = new WmiProvider (computer);  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: if ((p == 4) || (p == 128)) {  	// Unix  	treeView.RowHeight = Math.Max (treeView.RowHeight' 18);  	splitContainer.BorderStyle = BorderStyle.None;  	splitContainer.Border3DStyle = Border3DStyle.Adjust;  	splitContainer.SplitterWidth = 4;  	treeView.BorderStyle = BorderStyle.Fixed3D;  	plotPanel.BorderStyle = BorderStyle.Fixed3D;  	gadgetMenuItem.Visible = false;  	minCloseMenuItem.Visible = false;  	minTrayMenuItem.Visible = false;  	startMinMenuItem.Visible = false;  }  else {  	// Windows  	treeView.RowHeight = Math.Max (treeView.Font.Height + 1' 18);  	gadget = new SensorGadget (computer' settings' unitManager);  	gadget.HideShowCommand += hideShowClick;  	wmiProvider = new WmiProvider (computer);  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: if ((p == 4) || (p == 128)) {  	// Unix  	treeView.RowHeight = Math.Max (treeView.RowHeight' 18);  	splitContainer.BorderStyle = BorderStyle.None;  	splitContainer.Border3DStyle = Border3DStyle.Adjust;  	splitContainer.SplitterWidth = 4;  	treeView.BorderStyle = BorderStyle.Fixed3D;  	plotPanel.BorderStyle = BorderStyle.Fixed3D;  	gadgetMenuItem.Visible = false;  	minCloseMenuItem.Visible = false;  	minTrayMenuItem.Visible = false;  	startMinMenuItem.Visible = false;  }  else {  	// Windows  	treeView.RowHeight = Math.Max (treeView.Font.Height + 1' 18);  	gadget = new SensorGadget (computer' settings' unitManager);  	gadget.HideShowCommand += hideShowClick;  	wmiProvider = new WmiProvider (computer);  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: if ((p == 4) || (p == 128)) {  	// Unix  	treeView.RowHeight = Math.Max (treeView.RowHeight' 18);  	splitContainer.BorderStyle = BorderStyle.None;  	splitContainer.Border3DStyle = Border3DStyle.Adjust;  	splitContainer.SplitterWidth = 4;  	treeView.BorderStyle = BorderStyle.Fixed3D;  	plotPanel.BorderStyle = BorderStyle.Fixed3D;  	gadgetMenuItem.Visible = false;  	minCloseMenuItem.Visible = false;  	minTrayMenuItem.Visible = false;  	startMinMenuItem.Visible = false;  }  else {  	// Windows  	treeView.RowHeight = Math.Max (treeView.Font.Height + 1' 18);  	gadget = new SensorGadget (computer' settings' unitManager);  	gadget.HideShowCommand += hideShowClick;  	wmiProvider = new WmiProvider (computer);  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: if ((p == 4) || (p == 128)) {  	// Unix  	treeView.RowHeight = Math.Max (treeView.RowHeight' 18);  	splitContainer.BorderStyle = BorderStyle.None;  	splitContainer.Border3DStyle = Border3DStyle.Adjust;  	splitContainer.SplitterWidth = 4;  	treeView.BorderStyle = BorderStyle.Fixed3D;  	plotPanel.BorderStyle = BorderStyle.Fixed3D;  	gadgetMenuItem.Visible = false;  	minCloseMenuItem.Visible = false;  	minTrayMenuItem.Visible = false;  	startMinMenuItem.Visible = false;  }  else {  	// Windows  	treeView.RowHeight = Math.Max (treeView.Font.Height + 1' 18);  	gadget = new SensorGadget (computer' settings' unitManager);  	gadget.HideShowCommand += hideShowClick;  	wmiProvider = new WmiProvider (computer);  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: treeView.RowHeight = Math.Max (treeView.RowHeight' 18);  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: splitContainer.SplitterWidth = 4;  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: treeView.RowHeight = Math.Max (treeView.Font.Height + 1' 18);  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: plotColorPalette = new Color[13];  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: plotColorPalette [2] = Color.Green;  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: plotColorPalette [3] = Color.LightSeaGreen;  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: plotColorPalette [4] = Color.Goldenrod;  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: plotColorPalette [5] = Color.DarkViolet;  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: plotColorPalette [6] = Color.YellowGreen;  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: plotColorPalette [7] = Color.SaddleBrown;  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: plotColorPalette [8] = Color.RoyalBlue;  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: plotColorPalette [9] = Color.DeepPink;  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: plotColorPalette [10] = Color.MediumSeaGreen;  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: plotColorPalette [11] = Color.Olive;  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: plotColorPalette [12] = Color.Firebrick;  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: showMin.Changed += delegate (object sender' EventArgs e) {  	treeView.Columns [2].IsVisible = showMin.Value;  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: treeView.Columns [2].IsVisible = showMin.Value;  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: showMax.Changed += delegate (object sender' EventArgs e) {  	treeView.Columns [3].IsVisible = showMax.Value;  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: treeView.Columns [3].IsVisible = showMax.Value;  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: server = new HttpServer (root' this.settings.GetValue ("listenerPort"' 8085));  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: if (!PF.Visible) {  	runWebServer = new UserOption ("runWebServerMenuItem"' false' rWSMI' settings);  	runWebServer.Changed += delegate (object sender' EventArgs e) {  		if (runWebServer.Value)  			server.StartHTTPListener ();  		else  			server.StopHTTPListener ();  	};  	logSensors = new UserOption ("logSensorsMenuItem"' false' logSensorsMenuItem' settings);  	loggingInterval = new UserRadioGroup ("loggingInterval"' 0' new[] {  		log1sMenuItem'  		log2sMenuItem'  		log5sMenuItem'  		log10sMenuItem'  		log30sMenuItem'  		log1minMenuItem'  		log2minMenuItem'  		log5minMenuItem'  		log10minMenuItem'  		log30minMenuItem'  		log1hMenuItem'  		log2hMenuItem'  		log6hMenuItem  	}' settings);  	loggingInterval.Changed += (sender' e) =>  {  		switch (loggingInterval.Value) {  		case 0:  			logger.LoggingInterval = new TimeSpan (0' 0' 1);  			break;  		case 1:  			logger.LoggingInterval = new TimeSpan (0' 0' 2);  			break;  		case 2:  			logger.LoggingInterval = new TimeSpan (0' 0' 5);  			break;  		case 3:  			logger.LoggingInterval = new TimeSpan (0' 0' 10);  			break;  		case 4:  			logger.LoggingInterval = new TimeSpan (0' 0' 30);  			break;  		case 5:  			logger.LoggingInterval = new TimeSpan (0' 1' 0);  			break;  		case 6:  			logger.LoggingInterval = new TimeSpan (0' 2' 0);  			break;  		case 7:  			logger.LoggingInterval = new TimeSpan (0' 5' 0);  			break;  		case 8:  			logger.LoggingInterval = new TimeSpan (0' 10' 0);  			break;  		case 9:  			logger.LoggingInterval = new TimeSpan (0' 30' 0);  			break;  		case 10:  			logger.LoggingInterval = new TimeSpan (1' 0' 0);  			break;  		case 11:  			logger.LoggingInterval = new TimeSpan (2' 0' 0);  			break;  		case 12:  			logger.LoggingInterval = new TimeSpan (6' 0' 0);  			break;  		}  	};  	InitializePlotForm ();  	startupMenuItem.Visible = startupManager.IsAvailable;  	if (startMinMenuItem.Checked) {  		if (!minTrayMenuItem.Checked) {  			WindowState = FormWindowState.Minimized;  			Show ();  		}  	}  	else {  		Show ();  	}  	// Create a handle' otherwise calling Close() does not fire FormClosed       	IntPtr handle = Handle;  	// Make sure the settings are saved when the user logs off  	Microsoft.Win32.SystemEvents.SessionEnded += delegate {  		computer.Close ();  		SaveConfiguration ();  		if (runWebServer.Value)  			server.Quit ();  	};  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: if (!PF.Visible) {  	runWebServer = new UserOption ("runWebServerMenuItem"' false' rWSMI' settings);  	runWebServer.Changed += delegate (object sender' EventArgs e) {  		if (runWebServer.Value)  			server.StartHTTPListener ();  		else  			server.StopHTTPListener ();  	};  	logSensors = new UserOption ("logSensorsMenuItem"' false' logSensorsMenuItem' settings);  	loggingInterval = new UserRadioGroup ("loggingInterval"' 0' new[] {  		log1sMenuItem'  		log2sMenuItem'  		log5sMenuItem'  		log10sMenuItem'  		log30sMenuItem'  		log1minMenuItem'  		log2minMenuItem'  		log5minMenuItem'  		log10minMenuItem'  		log30minMenuItem'  		log1hMenuItem'  		log2hMenuItem'  		log6hMenuItem  	}' settings);  	loggingInterval.Changed += (sender' e) =>  {  		switch (loggingInterval.Value) {  		case 0:  			logger.LoggingInterval = new TimeSpan (0' 0' 1);  			break;  		case 1:  			logger.LoggingInterval = new TimeSpan (0' 0' 2);  			break;  		case 2:  			logger.LoggingInterval = new TimeSpan (0' 0' 5);  			break;  		case 3:  			logger.LoggingInterval = new TimeSpan (0' 0' 10);  			break;  		case 4:  			logger.LoggingInterval = new TimeSpan (0' 0' 30);  			break;  		case 5:  			logger.LoggingInterval = new TimeSpan (0' 1' 0);  			break;  		case 6:  			logger.LoggingInterval = new TimeSpan (0' 2' 0);  			break;  		case 7:  			logger.LoggingInterval = new TimeSpan (0' 5' 0);  			break;  		case 8:  			logger.LoggingInterval = new TimeSpan (0' 10' 0);  			break;  		case 9:  			logger.LoggingInterval = new TimeSpan (0' 30' 0);  			break;  		case 10:  			logger.LoggingInterval = new TimeSpan (1' 0' 0);  			break;  		case 11:  			logger.LoggingInterval = new TimeSpan (2' 0' 0);  			break;  		case 12:  			logger.LoggingInterval = new TimeSpan (6' 0' 0);  			break;  		}  	};  	InitializePlotForm ();  	startupMenuItem.Visible = startupManager.IsAvailable;  	if (startMinMenuItem.Checked) {  		if (!minTrayMenuItem.Checked) {  			WindowState = FormWindowState.Minimized;  			Show ();  		}  	}  	else {  		Show ();  	}  	// Create a handle' otherwise calling Close() does not fire FormClosed       	IntPtr handle = Handle;  	// Make sure the settings are saved when the user logs off  	Microsoft.Win32.SystemEvents.SessionEnded += delegate {  		computer.Close ();  		SaveConfiguration ();  		if (runWebServer.Value)  			server.Quit ();  	};  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: if (!PF.Visible) {  	runWebServer = new UserOption ("runWebServerMenuItem"' false' rWSMI' settings);  	runWebServer.Changed += delegate (object sender' EventArgs e) {  		if (runWebServer.Value)  			server.StartHTTPListener ();  		else  			server.StopHTTPListener ();  	};  	logSensors = new UserOption ("logSensorsMenuItem"' false' logSensorsMenuItem' settings);  	loggingInterval = new UserRadioGroup ("loggingInterval"' 0' new[] {  		log1sMenuItem'  		log2sMenuItem'  		log5sMenuItem'  		log10sMenuItem'  		log30sMenuItem'  		log1minMenuItem'  		log2minMenuItem'  		log5minMenuItem'  		log10minMenuItem'  		log30minMenuItem'  		log1hMenuItem'  		log2hMenuItem'  		log6hMenuItem  	}' settings);  	loggingInterval.Changed += (sender' e) =>  {  		switch (loggingInterval.Value) {  		case 0:  			logger.LoggingInterval = new TimeSpan (0' 0' 1);  			break;  		case 1:  			logger.LoggingInterval = new TimeSpan (0' 0' 2);  			break;  		case 2:  			logger.LoggingInterval = new TimeSpan (0' 0' 5);  			break;  		case 3:  			logger.LoggingInterval = new TimeSpan (0' 0' 10);  			break;  		case 4:  			logger.LoggingInterval = new TimeSpan (0' 0' 30);  			break;  		case 5:  			logger.LoggingInterval = new TimeSpan (0' 1' 0);  			break;  		case 6:  			logger.LoggingInterval = new TimeSpan (0' 2' 0);  			break;  		case 7:  			logger.LoggingInterval = new TimeSpan (0' 5' 0);  			break;  		case 8:  			logger.LoggingInterval = new TimeSpan (0' 10' 0);  			break;  		case 9:  			logger.LoggingInterval = new TimeSpan (0' 30' 0);  			break;  		case 10:  			logger.LoggingInterval = new TimeSpan (1' 0' 0);  			break;  		case 11:  			logger.LoggingInterval = new TimeSpan (2' 0' 0);  			break;  		case 12:  			logger.LoggingInterval = new TimeSpan (6' 0' 0);  			break;  		}  	};  	InitializePlotForm ();  	startupMenuItem.Visible = startupManager.IsAvailable;  	if (startMinMenuItem.Checked) {  		if (!minTrayMenuItem.Checked) {  			WindowState = FormWindowState.Minimized;  			Show ();  		}  	}  	else {  		Show ();  	}  	// Create a handle' otherwise calling Close() does not fire FormClosed       	IntPtr handle = Handle;  	// Make sure the settings are saved when the user logs off  	Microsoft.Win32.SystemEvents.SessionEnded += delegate {  		computer.Close ();  		SaveConfiguration ();  		if (runWebServer.Value)  			server.Quit ();  	};  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: if (!PF.Visible) {  	runWebServer = new UserOption ("runWebServerMenuItem"' false' rWSMI' settings);  	runWebServer.Changed += delegate (object sender' EventArgs e) {  		if (runWebServer.Value)  			server.StartHTTPListener ();  		else  			server.StopHTTPListener ();  	};  	logSensors = new UserOption ("logSensorsMenuItem"' false' logSensorsMenuItem' settings);  	loggingInterval = new UserRadioGroup ("loggingInterval"' 0' new[] {  		log1sMenuItem'  		log2sMenuItem'  		log5sMenuItem'  		log10sMenuItem'  		log30sMenuItem'  		log1minMenuItem'  		log2minMenuItem'  		log5minMenuItem'  		log10minMenuItem'  		log30minMenuItem'  		log1hMenuItem'  		log2hMenuItem'  		log6hMenuItem  	}' settings);  	loggingInterval.Changed += (sender' e) =>  {  		switch (loggingInterval.Value) {  		case 0:  			logger.LoggingInterval = new TimeSpan (0' 0' 1);  			break;  		case 1:  			logger.LoggingInterval = new TimeSpan (0' 0' 2);  			break;  		case 2:  			logger.LoggingInterval = new TimeSpan (0' 0' 5);  			break;  		case 3:  			logger.LoggingInterval = new TimeSpan (0' 0' 10);  			break;  		case 4:  			logger.LoggingInterval = new TimeSpan (0' 0' 30);  			break;  		case 5:  			logger.LoggingInterval = new TimeSpan (0' 1' 0);  			break;  		case 6:  			logger.LoggingInterval = new TimeSpan (0' 2' 0);  			break;  		case 7:  			logger.LoggingInterval = new TimeSpan (0' 5' 0);  			break;  		case 8:  			logger.LoggingInterval = new TimeSpan (0' 10' 0);  			break;  		case 9:  			logger.LoggingInterval = new TimeSpan (0' 30' 0);  			break;  		case 10:  			logger.LoggingInterval = new TimeSpan (1' 0' 0);  			break;  		case 11:  			logger.LoggingInterval = new TimeSpan (2' 0' 0);  			break;  		case 12:  			logger.LoggingInterval = new TimeSpan (6' 0' 0);  			break;  		}  	};  	InitializePlotForm ();  	startupMenuItem.Visible = startupManager.IsAvailable;  	if (startMinMenuItem.Checked) {  		if (!minTrayMenuItem.Checked) {  			WindowState = FormWindowState.Minimized;  			Show ();  		}  	}  	else {  		Show ();  	}  	// Create a handle' otherwise calling Close() does not fire FormClosed       	IntPtr handle = Handle;  	// Make sure the settings are saved when the user logs off  	Microsoft.Win32.SystemEvents.SessionEnded += delegate {  		computer.Close ();  		SaveConfiguration ();  		if (runWebServer.Value)  			server.Quit ();  	};  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: if (!PF.Visible) {  	runWebServer = new UserOption ("runWebServerMenuItem"' false' rWSMI' settings);  	runWebServer.Changed += delegate (object sender' EventArgs e) {  		if (runWebServer.Value)  			server.StartHTTPListener ();  		else  			server.StopHTTPListener ();  	};  	logSensors = new UserOption ("logSensorsMenuItem"' false' logSensorsMenuItem' settings);  	loggingInterval = new UserRadioGroup ("loggingInterval"' 0' new[] {  		log1sMenuItem'  		log2sMenuItem'  		log5sMenuItem'  		log10sMenuItem'  		log30sMenuItem'  		log1minMenuItem'  		log2minMenuItem'  		log5minMenuItem'  		log10minMenuItem'  		log30minMenuItem'  		log1hMenuItem'  		log2hMenuItem'  		log6hMenuItem  	}' settings);  	loggingInterval.Changed += (sender' e) =>  {  		switch (loggingInterval.Value) {  		case 0:  			logger.LoggingInterval = new TimeSpan (0' 0' 1);  			break;  		case 1:  			logger.LoggingInterval = new TimeSpan (0' 0' 2);  			break;  		case 2:  			logger.LoggingInterval = new TimeSpan (0' 0' 5);  			break;  		case 3:  			logger.LoggingInterval = new TimeSpan (0' 0' 10);  			break;  		case 4:  			logger.LoggingInterval = new TimeSpan (0' 0' 30);  			break;  		case 5:  			logger.LoggingInterval = new TimeSpan (0' 1' 0);  			break;  		case 6:  			logger.LoggingInterval = new TimeSpan (0' 2' 0);  			break;  		case 7:  			logger.LoggingInterval = new TimeSpan (0' 5' 0);  			break;  		case 8:  			logger.LoggingInterval = new TimeSpan (0' 10' 0);  			break;  		case 9:  			logger.LoggingInterval = new TimeSpan (0' 30' 0);  			break;  		case 10:  			logger.LoggingInterval = new TimeSpan (1' 0' 0);  			break;  		case 11:  			logger.LoggingInterval = new TimeSpan (2' 0' 0);  			break;  		case 12:  			logger.LoggingInterval = new TimeSpan (6' 0' 0);  			break;  		}  	};  	InitializePlotForm ();  	startupMenuItem.Visible = startupManager.IsAvailable;  	if (startMinMenuItem.Checked) {  		if (!minTrayMenuItem.Checked) {  			WindowState = FormWindowState.Minimized;  			Show ();  		}  	}  	else {  		Show ();  	}  	// Create a handle' otherwise calling Close() does not fire FormClosed       	IntPtr handle = Handle;  	// Make sure the settings are saved when the user logs off  	Microsoft.Win32.SystemEvents.SessionEnded += delegate {  		computer.Close ();  		SaveConfiguration ();  		if (runWebServer.Value)  			server.Quit ();  	};  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: if (!PF.Visible) {  	runWebServer = new UserOption ("runWebServerMenuItem"' false' rWSMI' settings);  	runWebServer.Changed += delegate (object sender' EventArgs e) {  		if (runWebServer.Value)  			server.StartHTTPListener ();  		else  			server.StopHTTPListener ();  	};  	logSensors = new UserOption ("logSensorsMenuItem"' false' logSensorsMenuItem' settings);  	loggingInterval = new UserRadioGroup ("loggingInterval"' 0' new[] {  		log1sMenuItem'  		log2sMenuItem'  		log5sMenuItem'  		log10sMenuItem'  		log30sMenuItem'  		log1minMenuItem'  		log2minMenuItem'  		log5minMenuItem'  		log10minMenuItem'  		log30minMenuItem'  		log1hMenuItem'  		log2hMenuItem'  		log6hMenuItem  	}' settings);  	loggingInterval.Changed += (sender' e) =>  {  		switch (loggingInterval.Value) {  		case 0:  			logger.LoggingInterval = new TimeSpan (0' 0' 1);  			break;  		case 1:  			logger.LoggingInterval = new TimeSpan (0' 0' 2);  			break;  		case 2:  			logger.LoggingInterval = new TimeSpan (0' 0' 5);  			break;  		case 3:  			logger.LoggingInterval = new TimeSpan (0' 0' 10);  			break;  		case 4:  			logger.LoggingInterval = new TimeSpan (0' 0' 30);  			break;  		case 5:  			logger.LoggingInterval = new TimeSpan (0' 1' 0);  			break;  		case 6:  			logger.LoggingInterval = new TimeSpan (0' 2' 0);  			break;  		case 7:  			logger.LoggingInterval = new TimeSpan (0' 5' 0);  			break;  		case 8:  			logger.LoggingInterval = new TimeSpan (0' 10' 0);  			break;  		case 9:  			logger.LoggingInterval = new TimeSpan (0' 30' 0);  			break;  		case 10:  			logger.LoggingInterval = new TimeSpan (1' 0' 0);  			break;  		case 11:  			logger.LoggingInterval = new TimeSpan (2' 0' 0);  			break;  		case 12:  			logger.LoggingInterval = new TimeSpan (6' 0' 0);  			break;  		}  	};  	InitializePlotForm ();  	startupMenuItem.Visible = startupManager.IsAvailable;  	if (startMinMenuItem.Checked) {  		if (!minTrayMenuItem.Checked) {  			WindowState = FormWindowState.Minimized;  			Show ();  		}  	}  	else {  		Show ();  	}  	// Create a handle' otherwise calling Close() does not fire FormClosed       	IntPtr handle = Handle;  	// Make sure the settings are saved when the user logs off  	Microsoft.Win32.SystemEvents.SessionEnded += delegate {  		computer.Close ();  		SaveConfiguration ();  		if (runWebServer.Value)  			server.Quit ();  	};  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: if (!PF.Visible) {  	runWebServer = new UserOption ("runWebServerMenuItem"' false' rWSMI' settings);  	runWebServer.Changed += delegate (object sender' EventArgs e) {  		if (runWebServer.Value)  			server.StartHTTPListener ();  		else  			server.StopHTTPListener ();  	};  	logSensors = new UserOption ("logSensorsMenuItem"' false' logSensorsMenuItem' settings);  	loggingInterval = new UserRadioGroup ("loggingInterval"' 0' new[] {  		log1sMenuItem'  		log2sMenuItem'  		log5sMenuItem'  		log10sMenuItem'  		log30sMenuItem'  		log1minMenuItem'  		log2minMenuItem'  		log5minMenuItem'  		log10minMenuItem'  		log30minMenuItem'  		log1hMenuItem'  		log2hMenuItem'  		log6hMenuItem  	}' settings);  	loggingInterval.Changed += (sender' e) =>  {  		switch (loggingInterval.Value) {  		case 0:  			logger.LoggingInterval = new TimeSpan (0' 0' 1);  			break;  		case 1:  			logger.LoggingInterval = new TimeSpan (0' 0' 2);  			break;  		case 2:  			logger.LoggingInterval = new TimeSpan (0' 0' 5);  			break;  		case 3:  			logger.LoggingInterval = new TimeSpan (0' 0' 10);  			break;  		case 4:  			logger.LoggingInterval = new TimeSpan (0' 0' 30);  			break;  		case 5:  			logger.LoggingInterval = new TimeSpan (0' 1' 0);  			break;  		case 6:  			logger.LoggingInterval = new TimeSpan (0' 2' 0);  			break;  		case 7:  			logger.LoggingInterval = new TimeSpan (0' 5' 0);  			break;  		case 8:  			logger.LoggingInterval = new TimeSpan (0' 10' 0);  			break;  		case 9:  			logger.LoggingInterval = new TimeSpan (0' 30' 0);  			break;  		case 10:  			logger.LoggingInterval = new TimeSpan (1' 0' 0);  			break;  		case 11:  			logger.LoggingInterval = new TimeSpan (2' 0' 0);  			break;  		case 12:  			logger.LoggingInterval = new TimeSpan (6' 0' 0);  			break;  		}  	};  	InitializePlotForm ();  	startupMenuItem.Visible = startupManager.IsAvailable;  	if (startMinMenuItem.Checked) {  		if (!minTrayMenuItem.Checked) {  			WindowState = FormWindowState.Minimized;  			Show ();  		}  	}  	else {  		Show ();  	}  	// Create a handle' otherwise calling Close() does not fire FormClosed       	IntPtr handle = Handle;  	// Make sure the settings are saved when the user logs off  	Microsoft.Win32.SystemEvents.SessionEnded += delegate {  		computer.Close ();  		SaveConfiguration ();  		if (runWebServer.Value)  			server.Quit ();  	};  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: if (!PF.Visible) {  	runWebServer = new UserOption ("runWebServerMenuItem"' false' rWSMI' settings);  	runWebServer.Changed += delegate (object sender' EventArgs e) {  		if (runWebServer.Value)  			server.StartHTTPListener ();  		else  			server.StopHTTPListener ();  	};  	logSensors = new UserOption ("logSensorsMenuItem"' false' logSensorsMenuItem' settings);  	loggingInterval = new UserRadioGroup ("loggingInterval"' 0' new[] {  		log1sMenuItem'  		log2sMenuItem'  		log5sMenuItem'  		log10sMenuItem'  		log30sMenuItem'  		log1minMenuItem'  		log2minMenuItem'  		log5minMenuItem'  		log10minMenuItem'  		log30minMenuItem'  		log1hMenuItem'  		log2hMenuItem'  		log6hMenuItem  	}' settings);  	loggingInterval.Changed += (sender' e) =>  {  		switch (loggingInterval.Value) {  		case 0:  			logger.LoggingInterval = new TimeSpan (0' 0' 1);  			break;  		case 1:  			logger.LoggingInterval = new TimeSpan (0' 0' 2);  			break;  		case 2:  			logger.LoggingInterval = new TimeSpan (0' 0' 5);  			break;  		case 3:  			logger.LoggingInterval = new TimeSpan (0' 0' 10);  			break;  		case 4:  			logger.LoggingInterval = new TimeSpan (0' 0' 30);  			break;  		case 5:  			logger.LoggingInterval = new TimeSpan (0' 1' 0);  			break;  		case 6:  			logger.LoggingInterval = new TimeSpan (0' 2' 0);  			break;  		case 7:  			logger.LoggingInterval = new TimeSpan (0' 5' 0);  			break;  		case 8:  			logger.LoggingInterval = new TimeSpan (0' 10' 0);  			break;  		case 9:  			logger.LoggingInterval = new TimeSpan (0' 30' 0);  			break;  		case 10:  			logger.LoggingInterval = new TimeSpan (1' 0' 0);  			break;  		case 11:  			logger.LoggingInterval = new TimeSpan (2' 0' 0);  			break;  		case 12:  			logger.LoggingInterval = new TimeSpan (6' 0' 0);  			break;  		}  	};  	InitializePlotForm ();  	startupMenuItem.Visible = startupManager.IsAvailable;  	if (startMinMenuItem.Checked) {  		if (!minTrayMenuItem.Checked) {  			WindowState = FormWindowState.Minimized;  			Show ();  		}  	}  	else {  		Show ();  	}  	// Create a handle' otherwise calling Close() does not fire FormClosed       	IntPtr handle = Handle;  	// Make sure the settings are saved when the user logs off  	Microsoft.Win32.SystemEvents.SessionEnded += delegate {  		computer.Close ();  		SaveConfiguration ();  		if (runWebServer.Value)  			server.Quit ();  	};  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: if (!PF.Visible) {  	runWebServer = new UserOption ("runWebServerMenuItem"' false' rWSMI' settings);  	runWebServer.Changed += delegate (object sender' EventArgs e) {  		if (runWebServer.Value)  			server.StartHTTPListener ();  		else  			server.StopHTTPListener ();  	};  	logSensors = new UserOption ("logSensorsMenuItem"' false' logSensorsMenuItem' settings);  	loggingInterval = new UserRadioGroup ("loggingInterval"' 0' new[] {  		log1sMenuItem'  		log2sMenuItem'  		log5sMenuItem'  		log10sMenuItem'  		log30sMenuItem'  		log1minMenuItem'  		log2minMenuItem'  		log5minMenuItem'  		log10minMenuItem'  		log30minMenuItem'  		log1hMenuItem'  		log2hMenuItem'  		log6hMenuItem  	}' settings);  	loggingInterval.Changed += (sender' e) =>  {  		switch (loggingInterval.Value) {  		case 0:  			logger.LoggingInterval = new TimeSpan (0' 0' 1);  			break;  		case 1:  			logger.LoggingInterval = new TimeSpan (0' 0' 2);  			break;  		case 2:  			logger.LoggingInterval = new TimeSpan (0' 0' 5);  			break;  		case 3:  			logger.LoggingInterval = new TimeSpan (0' 0' 10);  			break;  		case 4:  			logger.LoggingInterval = new TimeSpan (0' 0' 30);  			break;  		case 5:  			logger.LoggingInterval = new TimeSpan (0' 1' 0);  			break;  		case 6:  			logger.LoggingInterval = new TimeSpan (0' 2' 0);  			break;  		case 7:  			logger.LoggingInterval = new TimeSpan (0' 5' 0);  			break;  		case 8:  			logger.LoggingInterval = new TimeSpan (0' 10' 0);  			break;  		case 9:  			logger.LoggingInterval = new TimeSpan (0' 30' 0);  			break;  		case 10:  			logger.LoggingInterval = new TimeSpan (1' 0' 0);  			break;  		case 11:  			logger.LoggingInterval = new TimeSpan (2' 0' 0);  			break;  		case 12:  			logger.LoggingInterval = new TimeSpan (6' 0' 0);  			break;  		}  	};  	InitializePlotForm ();  	startupMenuItem.Visible = startupManager.IsAvailable;  	if (startMinMenuItem.Checked) {  		if (!minTrayMenuItem.Checked) {  			WindowState = FormWindowState.Minimized;  			Show ();  		}  	}  	else {  		Show ();  	}  	// Create a handle' otherwise calling Close() does not fire FormClosed       	IntPtr handle = Handle;  	// Make sure the settings are saved when the user logs off  	Microsoft.Win32.SystemEvents.SessionEnded += delegate {  		computer.Close ();  		SaveConfiguration ();  		if (runWebServer.Value)  			server.Quit ();  	};  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: if (!PF.Visible) {  	runWebServer = new UserOption ("runWebServerMenuItem"' false' rWSMI' settings);  	runWebServer.Changed += delegate (object sender' EventArgs e) {  		if (runWebServer.Value)  			server.StartHTTPListener ();  		else  			server.StopHTTPListener ();  	};  	logSensors = new UserOption ("logSensorsMenuItem"' false' logSensorsMenuItem' settings);  	loggingInterval = new UserRadioGroup ("loggingInterval"' 0' new[] {  		log1sMenuItem'  		log2sMenuItem'  		log5sMenuItem'  		log10sMenuItem'  		log30sMenuItem'  		log1minMenuItem'  		log2minMenuItem'  		log5minMenuItem'  		log10minMenuItem'  		log30minMenuItem'  		log1hMenuItem'  		log2hMenuItem'  		log6hMenuItem  	}' settings);  	loggingInterval.Changed += (sender' e) =>  {  		switch (loggingInterval.Value) {  		case 0:  			logger.LoggingInterval = new TimeSpan (0' 0' 1);  			break;  		case 1:  			logger.LoggingInterval = new TimeSpan (0' 0' 2);  			break;  		case 2:  			logger.LoggingInterval = new TimeSpan (0' 0' 5);  			break;  		case 3:  			logger.LoggingInterval = new TimeSpan (0' 0' 10);  			break;  		case 4:  			logger.LoggingInterval = new TimeSpan (0' 0' 30);  			break;  		case 5:  			logger.LoggingInterval = new TimeSpan (0' 1' 0);  			break;  		case 6:  			logger.LoggingInterval = new TimeSpan (0' 2' 0);  			break;  		case 7:  			logger.LoggingInterval = new TimeSpan (0' 5' 0);  			break;  		case 8:  			logger.LoggingInterval = new TimeSpan (0' 10' 0);  			break;  		case 9:  			logger.LoggingInterval = new TimeSpan (0' 30' 0);  			break;  		case 10:  			logger.LoggingInterval = new TimeSpan (1' 0' 0);  			break;  		case 11:  			logger.LoggingInterval = new TimeSpan (2' 0' 0);  			break;  		case 12:  			logger.LoggingInterval = new TimeSpan (6' 0' 0);  			break;  		}  	};  	InitializePlotForm ();  	startupMenuItem.Visible = startupManager.IsAvailable;  	if (startMinMenuItem.Checked) {  		if (!minTrayMenuItem.Checked) {  			WindowState = FormWindowState.Minimized;  			Show ();  		}  	}  	else {  		Show ();  	}  	// Create a handle' otherwise calling Close() does not fire FormClosed       	IntPtr handle = Handle;  	// Make sure the settings are saved when the user logs off  	Microsoft.Win32.SystemEvents.SessionEnded += delegate {  		computer.Close ();  		SaveConfiguration ();  		if (runWebServer.Value)  			server.Quit ();  	};  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: if (!PF.Visible) {  	runWebServer = new UserOption ("runWebServerMenuItem"' false' rWSMI' settings);  	runWebServer.Changed += delegate (object sender' EventArgs e) {  		if (runWebServer.Value)  			server.StartHTTPListener ();  		else  			server.StopHTTPListener ();  	};  	logSensors = new UserOption ("logSensorsMenuItem"' false' logSensorsMenuItem' settings);  	loggingInterval = new UserRadioGroup ("loggingInterval"' 0' new[] {  		log1sMenuItem'  		log2sMenuItem'  		log5sMenuItem'  		log10sMenuItem'  		log30sMenuItem'  		log1minMenuItem'  		log2minMenuItem'  		log5minMenuItem'  		log10minMenuItem'  		log30minMenuItem'  		log1hMenuItem'  		log2hMenuItem'  		log6hMenuItem  	}' settings);  	loggingInterval.Changed += (sender' e) =>  {  		switch (loggingInterval.Value) {  		case 0:  			logger.LoggingInterval = new TimeSpan (0' 0' 1);  			break;  		case 1:  			logger.LoggingInterval = new TimeSpan (0' 0' 2);  			break;  		case 2:  			logger.LoggingInterval = new TimeSpan (0' 0' 5);  			break;  		case 3:  			logger.LoggingInterval = new TimeSpan (0' 0' 10);  			break;  		case 4:  			logger.LoggingInterval = new TimeSpan (0' 0' 30);  			break;  		case 5:  			logger.LoggingInterval = new TimeSpan (0' 1' 0);  			break;  		case 6:  			logger.LoggingInterval = new TimeSpan (0' 2' 0);  			break;  		case 7:  			logger.LoggingInterval = new TimeSpan (0' 5' 0);  			break;  		case 8:  			logger.LoggingInterval = new TimeSpan (0' 10' 0);  			break;  		case 9:  			logger.LoggingInterval = new TimeSpan (0' 30' 0);  			break;  		case 10:  			logger.LoggingInterval = new TimeSpan (1' 0' 0);  			break;  		case 11:  			logger.LoggingInterval = new TimeSpan (2' 0' 0);  			break;  		case 12:  			logger.LoggingInterval = new TimeSpan (6' 0' 0);  			break;  		}  	};  	InitializePlotForm ();  	startupMenuItem.Visible = startupManager.IsAvailable;  	if (startMinMenuItem.Checked) {  		if (!minTrayMenuItem.Checked) {  			WindowState = FormWindowState.Minimized;  			Show ();  		}  	}  	else {  		Show ();  	}  	// Create a handle' otherwise calling Close() does not fire FormClosed       	IntPtr handle = Handle;  	// Make sure the settings are saved when the user logs off  	Microsoft.Win32.SystemEvents.SessionEnded += delegate {  		computer.Close ();  		SaveConfiguration ();  		if (runWebServer.Value)  			server.Quit ();  	};  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: if (!PF.Visible) {  	runWebServer = new UserOption ("runWebServerMenuItem"' false' rWSMI' settings);  	runWebServer.Changed += delegate (object sender' EventArgs e) {  		if (runWebServer.Value)  			server.StartHTTPListener ();  		else  			server.StopHTTPListener ();  	};  	logSensors = new UserOption ("logSensorsMenuItem"' false' logSensorsMenuItem' settings);  	loggingInterval = new UserRadioGroup ("loggingInterval"' 0' new[] {  		log1sMenuItem'  		log2sMenuItem'  		log5sMenuItem'  		log10sMenuItem'  		log30sMenuItem'  		log1minMenuItem'  		log2minMenuItem'  		log5minMenuItem'  		log10minMenuItem'  		log30minMenuItem'  		log1hMenuItem'  		log2hMenuItem'  		log6hMenuItem  	}' settings);  	loggingInterval.Changed += (sender' e) =>  {  		switch (loggingInterval.Value) {  		case 0:  			logger.LoggingInterval = new TimeSpan (0' 0' 1);  			break;  		case 1:  			logger.LoggingInterval = new TimeSpan (0' 0' 2);  			break;  		case 2:  			logger.LoggingInterval = new TimeSpan (0' 0' 5);  			break;  		case 3:  			logger.LoggingInterval = new TimeSpan (0' 0' 10);  			break;  		case 4:  			logger.LoggingInterval = new TimeSpan (0' 0' 30);  			break;  		case 5:  			logger.LoggingInterval = new TimeSpan (0' 1' 0);  			break;  		case 6:  			logger.LoggingInterval = new TimeSpan (0' 2' 0);  			break;  		case 7:  			logger.LoggingInterval = new TimeSpan (0' 5' 0);  			break;  		case 8:  			logger.LoggingInterval = new TimeSpan (0' 10' 0);  			break;  		case 9:  			logger.LoggingInterval = new TimeSpan (0' 30' 0);  			break;  		case 10:  			logger.LoggingInterval = new TimeSpan (1' 0' 0);  			break;  		case 11:  			logger.LoggingInterval = new TimeSpan (2' 0' 0);  			break;  		case 12:  			logger.LoggingInterval = new TimeSpan (6' 0' 0);  			break;  		}  	};  	InitializePlotForm ();  	startupMenuItem.Visible = startupManager.IsAvailable;  	if (startMinMenuItem.Checked) {  		if (!minTrayMenuItem.Checked) {  			WindowState = FormWindowState.Minimized;  			Show ();  		}  	}  	else {  		Show ();  	}  	// Create a handle' otherwise calling Close() does not fire FormClosed       	IntPtr handle = Handle;  	// Make sure the settings are saved when the user logs off  	Microsoft.Win32.SystemEvents.SessionEnded += delegate {  		computer.Close ();  		SaveConfiguration ();  		if (runWebServer.Value)  			server.Quit ();  	};  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: if (!PF.Visible) {  	runWebServer = new UserOption ("runWebServerMenuItem"' false' rWSMI' settings);  	runWebServer.Changed += delegate (object sender' EventArgs e) {  		if (runWebServer.Value)  			server.StartHTTPListener ();  		else  			server.StopHTTPListener ();  	};  	logSensors = new UserOption ("logSensorsMenuItem"' false' logSensorsMenuItem' settings);  	loggingInterval = new UserRadioGroup ("loggingInterval"' 0' new[] {  		log1sMenuItem'  		log2sMenuItem'  		log5sMenuItem'  		log10sMenuItem'  		log30sMenuItem'  		log1minMenuItem'  		log2minMenuItem'  		log5minMenuItem'  		log10minMenuItem'  		log30minMenuItem'  		log1hMenuItem'  		log2hMenuItem'  		log6hMenuItem  	}' settings);  	loggingInterval.Changed += (sender' e) =>  {  		switch (loggingInterval.Value) {  		case 0:  			logger.LoggingInterval = new TimeSpan (0' 0' 1);  			break;  		case 1:  			logger.LoggingInterval = new TimeSpan (0' 0' 2);  			break;  		case 2:  			logger.LoggingInterval = new TimeSpan (0' 0' 5);  			break;  		case 3:  			logger.LoggingInterval = new TimeSpan (0' 0' 10);  			break;  		case 4:  			logger.LoggingInterval = new TimeSpan (0' 0' 30);  			break;  		case 5:  			logger.LoggingInterval = new TimeSpan (0' 1' 0);  			break;  		case 6:  			logger.LoggingInterval = new TimeSpan (0' 2' 0);  			break;  		case 7:  			logger.LoggingInterval = new TimeSpan (0' 5' 0);  			break;  		case 8:  			logger.LoggingInterval = new TimeSpan (0' 10' 0);  			break;  		case 9:  			logger.LoggingInterval = new TimeSpan (0' 30' 0);  			break;  		case 10:  			logger.LoggingInterval = new TimeSpan (1' 0' 0);  			break;  		case 11:  			logger.LoggingInterval = new TimeSpan (2' 0' 0);  			break;  		case 12:  			logger.LoggingInterval = new TimeSpan (6' 0' 0);  			break;  		}  	};  	InitializePlotForm ();  	startupMenuItem.Visible = startupManager.IsAvailable;  	if (startMinMenuItem.Checked) {  		if (!minTrayMenuItem.Checked) {  			WindowState = FormWindowState.Minimized;  			Show ();  		}  	}  	else {  		Show ();  	}  	// Create a handle' otherwise calling Close() does not fire FormClosed       	IntPtr handle = Handle;  	// Make sure the settings are saved when the user logs off  	Microsoft.Win32.SystemEvents.SessionEnded += delegate {  		computer.Close ();  		SaveConfiguration ();  		if (runWebServer.Value)  			server.Quit ();  	};  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: if (!PF.Visible) {  	runWebServer = new UserOption ("runWebServerMenuItem"' false' rWSMI' settings);  	runWebServer.Changed += delegate (object sender' EventArgs e) {  		if (runWebServer.Value)  			server.StartHTTPListener ();  		else  			server.StopHTTPListener ();  	};  	logSensors = new UserOption ("logSensorsMenuItem"' false' logSensorsMenuItem' settings);  	loggingInterval = new UserRadioGroup ("loggingInterval"' 0' new[] {  		log1sMenuItem'  		log2sMenuItem'  		log5sMenuItem'  		log10sMenuItem'  		log30sMenuItem'  		log1minMenuItem'  		log2minMenuItem'  		log5minMenuItem'  		log10minMenuItem'  		log30minMenuItem'  		log1hMenuItem'  		log2hMenuItem'  		log6hMenuItem  	}' settings);  	loggingInterval.Changed += (sender' e) =>  {  		switch (loggingInterval.Value) {  		case 0:  			logger.LoggingInterval = new TimeSpan (0' 0' 1);  			break;  		case 1:  			logger.LoggingInterval = new TimeSpan (0' 0' 2);  			break;  		case 2:  			logger.LoggingInterval = new TimeSpan (0' 0' 5);  			break;  		case 3:  			logger.LoggingInterval = new TimeSpan (0' 0' 10);  			break;  		case 4:  			logger.LoggingInterval = new TimeSpan (0' 0' 30);  			break;  		case 5:  			logger.LoggingInterval = new TimeSpan (0' 1' 0);  			break;  		case 6:  			logger.LoggingInterval = new TimeSpan (0' 2' 0);  			break;  		case 7:  			logger.LoggingInterval = new TimeSpan (0' 5' 0);  			break;  		case 8:  			logger.LoggingInterval = new TimeSpan (0' 10' 0);  			break;  		case 9:  			logger.LoggingInterval = new TimeSpan (0' 30' 0);  			break;  		case 10:  			logger.LoggingInterval = new TimeSpan (1' 0' 0);  			break;  		case 11:  			logger.LoggingInterval = new TimeSpan (2' 0' 0);  			break;  		case 12:  			logger.LoggingInterval = new TimeSpan (6' 0' 0);  			break;  		}  	};  	InitializePlotForm ();  	startupMenuItem.Visible = startupManager.IsAvailable;  	if (startMinMenuItem.Checked) {  		if (!minTrayMenuItem.Checked) {  			WindowState = FormWindowState.Minimized;  			Show ();  		}  	}  	else {  		Show ();  	}  	// Create a handle' otherwise calling Close() does not fire FormClosed       	IntPtr handle = Handle;  	// Make sure the settings are saved when the user logs off  	Microsoft.Win32.SystemEvents.SessionEnded += delegate {  		computer.Close ();  		SaveConfiguration ();  		if (runWebServer.Value)  			server.Quit ();  	};  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: if (!PF.Visible) {  	runWebServer = new UserOption ("runWebServerMenuItem"' false' rWSMI' settings);  	runWebServer.Changed += delegate (object sender' EventArgs e) {  		if (runWebServer.Value)  			server.StartHTTPListener ();  		else  			server.StopHTTPListener ();  	};  	logSensors = new UserOption ("logSensorsMenuItem"' false' logSensorsMenuItem' settings);  	loggingInterval = new UserRadioGroup ("loggingInterval"' 0' new[] {  		log1sMenuItem'  		log2sMenuItem'  		log5sMenuItem'  		log10sMenuItem'  		log30sMenuItem'  		log1minMenuItem'  		log2minMenuItem'  		log5minMenuItem'  		log10minMenuItem'  		log30minMenuItem'  		log1hMenuItem'  		log2hMenuItem'  		log6hMenuItem  	}' settings);  	loggingInterval.Changed += (sender' e) =>  {  		switch (loggingInterval.Value) {  		case 0:  			logger.LoggingInterval = new TimeSpan (0' 0' 1);  			break;  		case 1:  			logger.LoggingInterval = new TimeSpan (0' 0' 2);  			break;  		case 2:  			logger.LoggingInterval = new TimeSpan (0' 0' 5);  			break;  		case 3:  			logger.LoggingInterval = new TimeSpan (0' 0' 10);  			break;  		case 4:  			logger.LoggingInterval = new TimeSpan (0' 0' 30);  			break;  		case 5:  			logger.LoggingInterval = new TimeSpan (0' 1' 0);  			break;  		case 6:  			logger.LoggingInterval = new TimeSpan (0' 2' 0);  			break;  		case 7:  			logger.LoggingInterval = new TimeSpan (0' 5' 0);  			break;  		case 8:  			logger.LoggingInterval = new TimeSpan (0' 10' 0);  			break;  		case 9:  			logger.LoggingInterval = new TimeSpan (0' 30' 0);  			break;  		case 10:  			logger.LoggingInterval = new TimeSpan (1' 0' 0);  			break;  		case 11:  			logger.LoggingInterval = new TimeSpan (2' 0' 0);  			break;  		case 12:  			logger.LoggingInterval = new TimeSpan (6' 0' 0);  			break;  		}  	};  	InitializePlotForm ();  	startupMenuItem.Visible = startupManager.IsAvailable;  	if (startMinMenuItem.Checked) {  		if (!minTrayMenuItem.Checked) {  			WindowState = FormWindowState.Minimized;  			Show ();  		}  	}  	else {  		Show ();  	}  	// Create a handle' otherwise calling Close() does not fire FormClosed       	IntPtr handle = Handle;  	// Make sure the settings are saved when the user logs off  	Microsoft.Win32.SystemEvents.SessionEnded += delegate {  		computer.Close ();  		SaveConfiguration ();  		if (runWebServer.Value)  			server.Quit ();  	};  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: if (!PF.Visible) {  	runWebServer = new UserOption ("runWebServerMenuItem"' false' rWSMI' settings);  	runWebServer.Changed += delegate (object sender' EventArgs e) {  		if (runWebServer.Value)  			server.StartHTTPListener ();  		else  			server.StopHTTPListener ();  	};  	logSensors = new UserOption ("logSensorsMenuItem"' false' logSensorsMenuItem' settings);  	loggingInterval = new UserRadioGroup ("loggingInterval"' 0' new[] {  		log1sMenuItem'  		log2sMenuItem'  		log5sMenuItem'  		log10sMenuItem'  		log30sMenuItem'  		log1minMenuItem'  		log2minMenuItem'  		log5minMenuItem'  		log10minMenuItem'  		log30minMenuItem'  		log1hMenuItem'  		log2hMenuItem'  		log6hMenuItem  	}' settings);  	loggingInterval.Changed += (sender' e) =>  {  		switch (loggingInterval.Value) {  		case 0:  			logger.LoggingInterval = new TimeSpan (0' 0' 1);  			break;  		case 1:  			logger.LoggingInterval = new TimeSpan (0' 0' 2);  			break;  		case 2:  			logger.LoggingInterval = new TimeSpan (0' 0' 5);  			break;  		case 3:  			logger.LoggingInterval = new TimeSpan (0' 0' 10);  			break;  		case 4:  			logger.LoggingInterval = new TimeSpan (0' 0' 30);  			break;  		case 5:  			logger.LoggingInterval = new TimeSpan (0' 1' 0);  			break;  		case 6:  			logger.LoggingInterval = new TimeSpan (0' 2' 0);  			break;  		case 7:  			logger.LoggingInterval = new TimeSpan (0' 5' 0);  			break;  		case 8:  			logger.LoggingInterval = new TimeSpan (0' 10' 0);  			break;  		case 9:  			logger.LoggingInterval = new TimeSpan (0' 30' 0);  			break;  		case 10:  			logger.LoggingInterval = new TimeSpan (1' 0' 0);  			break;  		case 11:  			logger.LoggingInterval = new TimeSpan (2' 0' 0);  			break;  		case 12:  			logger.LoggingInterval = new TimeSpan (6' 0' 0);  			break;  		}  	};  	InitializePlotForm ();  	startupMenuItem.Visible = startupManager.IsAvailable;  	if (startMinMenuItem.Checked) {  		if (!minTrayMenuItem.Checked) {  			WindowState = FormWindowState.Minimized;  			Show ();  		}  	}  	else {  		Show ();  	}  	// Create a handle' otherwise calling Close() does not fire FormClosed       	IntPtr handle = Handle;  	// Make sure the settings are saved when the user logs off  	Microsoft.Win32.SystemEvents.SessionEnded += delegate {  		computer.Close ();  		SaveConfiguration ();  		if (runWebServer.Value)  			server.Quit ();  	};  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: if (!PF.Visible) {  	runWebServer = new UserOption ("runWebServerMenuItem"' false' rWSMI' settings);  	runWebServer.Changed += delegate (object sender' EventArgs e) {  		if (runWebServer.Value)  			server.StartHTTPListener ();  		else  			server.StopHTTPListener ();  	};  	logSensors = new UserOption ("logSensorsMenuItem"' false' logSensorsMenuItem' settings);  	loggingInterval = new UserRadioGroup ("loggingInterval"' 0' new[] {  		log1sMenuItem'  		log2sMenuItem'  		log5sMenuItem'  		log10sMenuItem'  		log30sMenuItem'  		log1minMenuItem'  		log2minMenuItem'  		log5minMenuItem'  		log10minMenuItem'  		log30minMenuItem'  		log1hMenuItem'  		log2hMenuItem'  		log6hMenuItem  	}' settings);  	loggingInterval.Changed += (sender' e) =>  {  		switch (loggingInterval.Value) {  		case 0:  			logger.LoggingInterval = new TimeSpan (0' 0' 1);  			break;  		case 1:  			logger.LoggingInterval = new TimeSpan (0' 0' 2);  			break;  		case 2:  			logger.LoggingInterval = new TimeSpan (0' 0' 5);  			break;  		case 3:  			logger.LoggingInterval = new TimeSpan (0' 0' 10);  			break;  		case 4:  			logger.LoggingInterval = new TimeSpan (0' 0' 30);  			break;  		case 5:  			logger.LoggingInterval = new TimeSpan (0' 1' 0);  			break;  		case 6:  			logger.LoggingInterval = new TimeSpan (0' 2' 0);  			break;  		case 7:  			logger.LoggingInterval = new TimeSpan (0' 5' 0);  			break;  		case 8:  			logger.LoggingInterval = new TimeSpan (0' 10' 0);  			break;  		case 9:  			logger.LoggingInterval = new TimeSpan (0' 30' 0);  			break;  		case 10:  			logger.LoggingInterval = new TimeSpan (1' 0' 0);  			break;  		case 11:  			logger.LoggingInterval = new TimeSpan (2' 0' 0);  			break;  		case 12:  			logger.LoggingInterval = new TimeSpan (6' 0' 0);  			break;  		}  	};  	InitializePlotForm ();  	startupMenuItem.Visible = startupManager.IsAvailable;  	if (startMinMenuItem.Checked) {  		if (!minTrayMenuItem.Checked) {  			WindowState = FormWindowState.Minimized;  			Show ();  		}  	}  	else {  		Show ();  	}  	// Create a handle' otherwise calling Close() does not fire FormClosed       	IntPtr handle = Handle;  	// Make sure the settings are saved when the user logs off  	Microsoft.Win32.SystemEvents.SessionEnded += delegate {  		computer.Close ();  		SaveConfiguration ();  		if (runWebServer.Value)  			server.Quit ();  	};  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: if (!PF.Visible) {  	runWebServer = new UserOption ("runWebServerMenuItem"' false' rWSMI' settings);  	runWebServer.Changed += delegate (object sender' EventArgs e) {  		if (runWebServer.Value)  			server.StartHTTPListener ();  		else  			server.StopHTTPListener ();  	};  	logSensors = new UserOption ("logSensorsMenuItem"' false' logSensorsMenuItem' settings);  	loggingInterval = new UserRadioGroup ("loggingInterval"' 0' new[] {  		log1sMenuItem'  		log2sMenuItem'  		log5sMenuItem'  		log10sMenuItem'  		log30sMenuItem'  		log1minMenuItem'  		log2minMenuItem'  		log5minMenuItem'  		log10minMenuItem'  		log30minMenuItem'  		log1hMenuItem'  		log2hMenuItem'  		log6hMenuItem  	}' settings);  	loggingInterval.Changed += (sender' e) =>  {  		switch (loggingInterval.Value) {  		case 0:  			logger.LoggingInterval = new TimeSpan (0' 0' 1);  			break;  		case 1:  			logger.LoggingInterval = new TimeSpan (0' 0' 2);  			break;  		case 2:  			logger.LoggingInterval = new TimeSpan (0' 0' 5);  			break;  		case 3:  			logger.LoggingInterval = new TimeSpan (0' 0' 10);  			break;  		case 4:  			logger.LoggingInterval = new TimeSpan (0' 0' 30);  			break;  		case 5:  			logger.LoggingInterval = new TimeSpan (0' 1' 0);  			break;  		case 6:  			logger.LoggingInterval = new TimeSpan (0' 2' 0);  			break;  		case 7:  			logger.LoggingInterval = new TimeSpan (0' 5' 0);  			break;  		case 8:  			logger.LoggingInterval = new TimeSpan (0' 10' 0);  			break;  		case 9:  			logger.LoggingInterval = new TimeSpan (0' 30' 0);  			break;  		case 10:  			logger.LoggingInterval = new TimeSpan (1' 0' 0);  			break;  		case 11:  			logger.LoggingInterval = new TimeSpan (2' 0' 0);  			break;  		case 12:  			logger.LoggingInterval = new TimeSpan (6' 0' 0);  			break;  		}  	};  	InitializePlotForm ();  	startupMenuItem.Visible = startupManager.IsAvailable;  	if (startMinMenuItem.Checked) {  		if (!minTrayMenuItem.Checked) {  			WindowState = FormWindowState.Minimized;  			Show ();  		}  	}  	else {  		Show ();  	}  	// Create a handle' otherwise calling Close() does not fire FormClosed       	IntPtr handle = Handle;  	// Make sure the settings are saved when the user logs off  	Microsoft.Win32.SystemEvents.SessionEnded += delegate {  		computer.Close ();  		SaveConfiguration ();  		if (runWebServer.Value)  			server.Quit ();  	};  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: if (!PF.Visible) {  	runWebServer = new UserOption ("runWebServerMenuItem"' false' rWSMI' settings);  	runWebServer.Changed += delegate (object sender' EventArgs e) {  		if (runWebServer.Value)  			server.StartHTTPListener ();  		else  			server.StopHTTPListener ();  	};  	logSensors = new UserOption ("logSensorsMenuItem"' false' logSensorsMenuItem' settings);  	loggingInterval = new UserRadioGroup ("loggingInterval"' 0' new[] {  		log1sMenuItem'  		log2sMenuItem'  		log5sMenuItem'  		log10sMenuItem'  		log30sMenuItem'  		log1minMenuItem'  		log2minMenuItem'  		log5minMenuItem'  		log10minMenuItem'  		log30minMenuItem'  		log1hMenuItem'  		log2hMenuItem'  		log6hMenuItem  	}' settings);  	loggingInterval.Changed += (sender' e) =>  {  		switch (loggingInterval.Value) {  		case 0:  			logger.LoggingInterval = new TimeSpan (0' 0' 1);  			break;  		case 1:  			logger.LoggingInterval = new TimeSpan (0' 0' 2);  			break;  		case 2:  			logger.LoggingInterval = new TimeSpan (0' 0' 5);  			break;  		case 3:  			logger.LoggingInterval = new TimeSpan (0' 0' 10);  			break;  		case 4:  			logger.LoggingInterval = new TimeSpan (0' 0' 30);  			break;  		case 5:  			logger.LoggingInterval = new TimeSpan (0' 1' 0);  			break;  		case 6:  			logger.LoggingInterval = new TimeSpan (0' 2' 0);  			break;  		case 7:  			logger.LoggingInterval = new TimeSpan (0' 5' 0);  			break;  		case 8:  			logger.LoggingInterval = new TimeSpan (0' 10' 0);  			break;  		case 9:  			logger.LoggingInterval = new TimeSpan (0' 30' 0);  			break;  		case 10:  			logger.LoggingInterval = new TimeSpan (1' 0' 0);  			break;  		case 11:  			logger.LoggingInterval = new TimeSpan (2' 0' 0);  			break;  		case 12:  			logger.LoggingInterval = new TimeSpan (6' 0' 0);  			break;  		}  	};  	InitializePlotForm ();  	startupMenuItem.Visible = startupManager.IsAvailable;  	if (startMinMenuItem.Checked) {  		if (!minTrayMenuItem.Checked) {  			WindowState = FormWindowState.Minimized;  			Show ();  		}  	}  	else {  		Show ();  	}  	// Create a handle' otherwise calling Close() does not fire FormClosed       	IntPtr handle = Handle;  	// Make sure the settings are saved when the user logs off  	Microsoft.Win32.SystemEvents.SessionEnded += delegate {  		computer.Close ();  		SaveConfiguration ();  		if (runWebServer.Value)  			server.Quit ();  	};  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: if (!PF.Visible) {  	runWebServer = new UserOption ("runWebServerMenuItem"' false' rWSMI' settings);  	runWebServer.Changed += delegate (object sender' EventArgs e) {  		if (runWebServer.Value)  			server.StartHTTPListener ();  		else  			server.StopHTTPListener ();  	};  	logSensors = new UserOption ("logSensorsMenuItem"' false' logSensorsMenuItem' settings);  	loggingInterval = new UserRadioGroup ("loggingInterval"' 0' new[] {  		log1sMenuItem'  		log2sMenuItem'  		log5sMenuItem'  		log10sMenuItem'  		log30sMenuItem'  		log1minMenuItem'  		log2minMenuItem'  		log5minMenuItem'  		log10minMenuItem'  		log30minMenuItem'  		log1hMenuItem'  		log2hMenuItem'  		log6hMenuItem  	}' settings);  	loggingInterval.Changed += (sender' e) =>  {  		switch (loggingInterval.Value) {  		case 0:  			logger.LoggingInterval = new TimeSpan (0' 0' 1);  			break;  		case 1:  			logger.LoggingInterval = new TimeSpan (0' 0' 2);  			break;  		case 2:  			logger.LoggingInterval = new TimeSpan (0' 0' 5);  			break;  		case 3:  			logger.LoggingInterval = new TimeSpan (0' 0' 10);  			break;  		case 4:  			logger.LoggingInterval = new TimeSpan (0' 0' 30);  			break;  		case 5:  			logger.LoggingInterval = new TimeSpan (0' 1' 0);  			break;  		case 6:  			logger.LoggingInterval = new TimeSpan (0' 2' 0);  			break;  		case 7:  			logger.LoggingInterval = new TimeSpan (0' 5' 0);  			break;  		case 8:  			logger.LoggingInterval = new TimeSpan (0' 10' 0);  			break;  		case 9:  			logger.LoggingInterval = new TimeSpan (0' 30' 0);  			break;  		case 10:  			logger.LoggingInterval = new TimeSpan (1' 0' 0);  			break;  		case 11:  			logger.LoggingInterval = new TimeSpan (2' 0' 0);  			break;  		case 12:  			logger.LoggingInterval = new TimeSpan (6' 0' 0);  			break;  		}  	};  	InitializePlotForm ();  	startupMenuItem.Visible = startupManager.IsAvailable;  	if (startMinMenuItem.Checked) {  		if (!minTrayMenuItem.Checked) {  			WindowState = FormWindowState.Minimized;  			Show ();  		}  	}  	else {  		Show ();  	}  	// Create a handle' otherwise calling Close() does not fire FormClosed       	IntPtr handle = Handle;  	// Make sure the settings are saved when the user logs off  	Microsoft.Win32.SystemEvents.SessionEnded += delegate {  		computer.Close ();  		SaveConfiguration ();  		if (runWebServer.Value)  			server.Quit ();  	};  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: if (!PF.Visible) {  	runWebServer = new UserOption ("runWebServerMenuItem"' false' rWSMI' settings);  	runWebServer.Changed += delegate (object sender' EventArgs e) {  		if (runWebServer.Value)  			server.StartHTTPListener ();  		else  			server.StopHTTPListener ();  	};  	logSensors = new UserOption ("logSensorsMenuItem"' false' logSensorsMenuItem' settings);  	loggingInterval = new UserRadioGroup ("loggingInterval"' 0' new[] {  		log1sMenuItem'  		log2sMenuItem'  		log5sMenuItem'  		log10sMenuItem'  		log30sMenuItem'  		log1minMenuItem'  		log2minMenuItem'  		log5minMenuItem'  		log10minMenuItem'  		log30minMenuItem'  		log1hMenuItem'  		log2hMenuItem'  		log6hMenuItem  	}' settings);  	loggingInterval.Changed += (sender' e) =>  {  		switch (loggingInterval.Value) {  		case 0:  			logger.LoggingInterval = new TimeSpan (0' 0' 1);  			break;  		case 1:  			logger.LoggingInterval = new TimeSpan (0' 0' 2);  			break;  		case 2:  			logger.LoggingInterval = new TimeSpan (0' 0' 5);  			break;  		case 3:  			logger.LoggingInterval = new TimeSpan (0' 0' 10);  			break;  		case 4:  			logger.LoggingInterval = new TimeSpan (0' 0' 30);  			break;  		case 5:  			logger.LoggingInterval = new TimeSpan (0' 1' 0);  			break;  		case 6:  			logger.LoggingInterval = new TimeSpan (0' 2' 0);  			break;  		case 7:  			logger.LoggingInterval = new TimeSpan (0' 5' 0);  			break;  		case 8:  			logger.LoggingInterval = new TimeSpan (0' 10' 0);  			break;  		case 9:  			logger.LoggingInterval = new TimeSpan (0' 30' 0);  			break;  		case 10:  			logger.LoggingInterval = new TimeSpan (1' 0' 0);  			break;  		case 11:  			logger.LoggingInterval = new TimeSpan (2' 0' 0);  			break;  		case 12:  			logger.LoggingInterval = new TimeSpan (6' 0' 0);  			break;  		}  	};  	InitializePlotForm ();  	startupMenuItem.Visible = startupManager.IsAvailable;  	if (startMinMenuItem.Checked) {  		if (!minTrayMenuItem.Checked) {  			WindowState = FormWindowState.Minimized;  			Show ();  		}  	}  	else {  		Show ();  	}  	// Create a handle' otherwise calling Close() does not fire FormClosed       	IntPtr handle = Handle;  	// Make sure the settings are saved when the user logs off  	Microsoft.Win32.SystemEvents.SessionEnded += delegate {  		computer.Close ();  		SaveConfiguration ();  		if (runWebServer.Value)  			server.Quit ();  	};  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: loggingInterval.Changed += (sender' e) =>  {  	switch (loggingInterval.Value) {  	case 0:  		logger.LoggingInterval = new TimeSpan (0' 0' 1);  		break;  	case 1:  		logger.LoggingInterval = new TimeSpan (0' 0' 2);  		break;  	case 2:  		logger.LoggingInterval = new TimeSpan (0' 0' 5);  		break;  	case 3:  		logger.LoggingInterval = new TimeSpan (0' 0' 10);  		break;  	case 4:  		logger.LoggingInterval = new TimeSpan (0' 0' 30);  		break;  	case 5:  		logger.LoggingInterval = new TimeSpan (0' 1' 0);  		break;  	case 6:  		logger.LoggingInterval = new TimeSpan (0' 2' 0);  		break;  	case 7:  		logger.LoggingInterval = new TimeSpan (0' 5' 0);  		break;  	case 8:  		logger.LoggingInterval = new TimeSpan (0' 10' 0);  		break;  	case 9:  		logger.LoggingInterval = new TimeSpan (0' 30' 0);  		break;  	case 10:  		logger.LoggingInterval = new TimeSpan (1' 0' 0);  		break;  	case 11:  		logger.LoggingInterval = new TimeSpan (2' 0' 0);  		break;  	case 12:  		logger.LoggingInterval = new TimeSpan (6' 0' 0);  		break;  	}  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: loggingInterval.Changed += (sender' e) =>  {  	switch (loggingInterval.Value) {  	case 0:  		logger.LoggingInterval = new TimeSpan (0' 0' 1);  		break;  	case 1:  		logger.LoggingInterval = new TimeSpan (0' 0' 2);  		break;  	case 2:  		logger.LoggingInterval = new TimeSpan (0' 0' 5);  		break;  	case 3:  		logger.LoggingInterval = new TimeSpan (0' 0' 10);  		break;  	case 4:  		logger.LoggingInterval = new TimeSpan (0' 0' 30);  		break;  	case 5:  		logger.LoggingInterval = new TimeSpan (0' 1' 0);  		break;  	case 6:  		logger.LoggingInterval = new TimeSpan (0' 2' 0);  		break;  	case 7:  		logger.LoggingInterval = new TimeSpan (0' 5' 0);  		break;  	case 8:  		logger.LoggingInterval = new TimeSpan (0' 10' 0);  		break;  	case 9:  		logger.LoggingInterval = new TimeSpan (0' 30' 0);  		break;  	case 10:  		logger.LoggingInterval = new TimeSpan (1' 0' 0);  		break;  	case 11:  		logger.LoggingInterval = new TimeSpan (2' 0' 0);  		break;  	case 12:  		logger.LoggingInterval = new TimeSpan (6' 0' 0);  		break;  	}  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: loggingInterval.Changed += (sender' e) =>  {  	switch (loggingInterval.Value) {  	case 0:  		logger.LoggingInterval = new TimeSpan (0' 0' 1);  		break;  	case 1:  		logger.LoggingInterval = new TimeSpan (0' 0' 2);  		break;  	case 2:  		logger.LoggingInterval = new TimeSpan (0' 0' 5);  		break;  	case 3:  		logger.LoggingInterval = new TimeSpan (0' 0' 10);  		break;  	case 4:  		logger.LoggingInterval = new TimeSpan (0' 0' 30);  		break;  	case 5:  		logger.LoggingInterval = new TimeSpan (0' 1' 0);  		break;  	case 6:  		logger.LoggingInterval = new TimeSpan (0' 2' 0);  		break;  	case 7:  		logger.LoggingInterval = new TimeSpan (0' 5' 0);  		break;  	case 8:  		logger.LoggingInterval = new TimeSpan (0' 10' 0);  		break;  	case 9:  		logger.LoggingInterval = new TimeSpan (0' 30' 0);  		break;  	case 10:  		logger.LoggingInterval = new TimeSpan (1' 0' 0);  		break;  	case 11:  		logger.LoggingInterval = new TimeSpan (2' 0' 0);  		break;  	case 12:  		logger.LoggingInterval = new TimeSpan (6' 0' 0);  		break;  	}  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: loggingInterval.Changed += (sender' e) =>  {  	switch (loggingInterval.Value) {  	case 0:  		logger.LoggingInterval = new TimeSpan (0' 0' 1);  		break;  	case 1:  		logger.LoggingInterval = new TimeSpan (0' 0' 2);  		break;  	case 2:  		logger.LoggingInterval = new TimeSpan (0' 0' 5);  		break;  	case 3:  		logger.LoggingInterval = new TimeSpan (0' 0' 10);  		break;  	case 4:  		logger.LoggingInterval = new TimeSpan (0' 0' 30);  		break;  	case 5:  		logger.LoggingInterval = new TimeSpan (0' 1' 0);  		break;  	case 6:  		logger.LoggingInterval = new TimeSpan (0' 2' 0);  		break;  	case 7:  		logger.LoggingInterval = new TimeSpan (0' 5' 0);  		break;  	case 8:  		logger.LoggingInterval = new TimeSpan (0' 10' 0);  		break;  	case 9:  		logger.LoggingInterval = new TimeSpan (0' 30' 0);  		break;  	case 10:  		logger.LoggingInterval = new TimeSpan (1' 0' 0);  		break;  	case 11:  		logger.LoggingInterval = new TimeSpan (2' 0' 0);  		break;  	case 12:  		logger.LoggingInterval = new TimeSpan (6' 0' 0);  		break;  	}  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: loggingInterval.Changed += (sender' e) =>  {  	switch (loggingInterval.Value) {  	case 0:  		logger.LoggingInterval = new TimeSpan (0' 0' 1);  		break;  	case 1:  		logger.LoggingInterval = new TimeSpan (0' 0' 2);  		break;  	case 2:  		logger.LoggingInterval = new TimeSpan (0' 0' 5);  		break;  	case 3:  		logger.LoggingInterval = new TimeSpan (0' 0' 10);  		break;  	case 4:  		logger.LoggingInterval = new TimeSpan (0' 0' 30);  		break;  	case 5:  		logger.LoggingInterval = new TimeSpan (0' 1' 0);  		break;  	case 6:  		logger.LoggingInterval = new TimeSpan (0' 2' 0);  		break;  	case 7:  		logger.LoggingInterval = new TimeSpan (0' 5' 0);  		break;  	case 8:  		logger.LoggingInterval = new TimeSpan (0' 10' 0);  		break;  	case 9:  		logger.LoggingInterval = new TimeSpan (0' 30' 0);  		break;  	case 10:  		logger.LoggingInterval = new TimeSpan (1' 0' 0);  		break;  	case 11:  		logger.LoggingInterval = new TimeSpan (2' 0' 0);  		break;  	case 12:  		logger.LoggingInterval = new TimeSpan (6' 0' 0);  		break;  	}  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: loggingInterval.Changed += (sender' e) =>  {  	switch (loggingInterval.Value) {  	case 0:  		logger.LoggingInterval = new TimeSpan (0' 0' 1);  		break;  	case 1:  		logger.LoggingInterval = new TimeSpan (0' 0' 2);  		break;  	case 2:  		logger.LoggingInterval = new TimeSpan (0' 0' 5);  		break;  	case 3:  		logger.LoggingInterval = new TimeSpan (0' 0' 10);  		break;  	case 4:  		logger.LoggingInterval = new TimeSpan (0' 0' 30);  		break;  	case 5:  		logger.LoggingInterval = new TimeSpan (0' 1' 0);  		break;  	case 6:  		logger.LoggingInterval = new TimeSpan (0' 2' 0);  		break;  	case 7:  		logger.LoggingInterval = new TimeSpan (0' 5' 0);  		break;  	case 8:  		logger.LoggingInterval = new TimeSpan (0' 10' 0);  		break;  	case 9:  		logger.LoggingInterval = new TimeSpan (0' 30' 0);  		break;  	case 10:  		logger.LoggingInterval = new TimeSpan (1' 0' 0);  		break;  	case 11:  		logger.LoggingInterval = new TimeSpan (2' 0' 0);  		break;  	case 12:  		logger.LoggingInterval = new TimeSpan (6' 0' 0);  		break;  	}  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: loggingInterval.Changed += (sender' e) =>  {  	switch (loggingInterval.Value) {  	case 0:  		logger.LoggingInterval = new TimeSpan (0' 0' 1);  		break;  	case 1:  		logger.LoggingInterval = new TimeSpan (0' 0' 2);  		break;  	case 2:  		logger.LoggingInterval = new TimeSpan (0' 0' 5);  		break;  	case 3:  		logger.LoggingInterval = new TimeSpan (0' 0' 10);  		break;  	case 4:  		logger.LoggingInterval = new TimeSpan (0' 0' 30);  		break;  	case 5:  		logger.LoggingInterval = new TimeSpan (0' 1' 0);  		break;  	case 6:  		logger.LoggingInterval = new TimeSpan (0' 2' 0);  		break;  	case 7:  		logger.LoggingInterval = new TimeSpan (0' 5' 0);  		break;  	case 8:  		logger.LoggingInterval = new TimeSpan (0' 10' 0);  		break;  	case 9:  		logger.LoggingInterval = new TimeSpan (0' 30' 0);  		break;  	case 10:  		logger.LoggingInterval = new TimeSpan (1' 0' 0);  		break;  	case 11:  		logger.LoggingInterval = new TimeSpan (2' 0' 0);  		break;  	case 12:  		logger.LoggingInterval = new TimeSpan (6' 0' 0);  		break;  	}  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: loggingInterval.Changed += (sender' e) =>  {  	switch (loggingInterval.Value) {  	case 0:  		logger.LoggingInterval = new TimeSpan (0' 0' 1);  		break;  	case 1:  		logger.LoggingInterval = new TimeSpan (0' 0' 2);  		break;  	case 2:  		logger.LoggingInterval = new TimeSpan (0' 0' 5);  		break;  	case 3:  		logger.LoggingInterval = new TimeSpan (0' 0' 10);  		break;  	case 4:  		logger.LoggingInterval = new TimeSpan (0' 0' 30);  		break;  	case 5:  		logger.LoggingInterval = new TimeSpan (0' 1' 0);  		break;  	case 6:  		logger.LoggingInterval = new TimeSpan (0' 2' 0);  		break;  	case 7:  		logger.LoggingInterval = new TimeSpan (0' 5' 0);  		break;  	case 8:  		logger.LoggingInterval = new TimeSpan (0' 10' 0);  		break;  	case 9:  		logger.LoggingInterval = new TimeSpan (0' 30' 0);  		break;  	case 10:  		logger.LoggingInterval = new TimeSpan (1' 0' 0);  		break;  	case 11:  		logger.LoggingInterval = new TimeSpan (2' 0' 0);  		break;  	case 12:  		logger.LoggingInterval = new TimeSpan (6' 0' 0);  		break;  	}  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: loggingInterval.Changed += (sender' e) =>  {  	switch (loggingInterval.Value) {  	case 0:  		logger.LoggingInterval = new TimeSpan (0' 0' 1);  		break;  	case 1:  		logger.LoggingInterval = new TimeSpan (0' 0' 2);  		break;  	case 2:  		logger.LoggingInterval = new TimeSpan (0' 0' 5);  		break;  	case 3:  		logger.LoggingInterval = new TimeSpan (0' 0' 10);  		break;  	case 4:  		logger.LoggingInterval = new TimeSpan (0' 0' 30);  		break;  	case 5:  		logger.LoggingInterval = new TimeSpan (0' 1' 0);  		break;  	case 6:  		logger.LoggingInterval = new TimeSpan (0' 2' 0);  		break;  	case 7:  		logger.LoggingInterval = new TimeSpan (0' 5' 0);  		break;  	case 8:  		logger.LoggingInterval = new TimeSpan (0' 10' 0);  		break;  	case 9:  		logger.LoggingInterval = new TimeSpan (0' 30' 0);  		break;  	case 10:  		logger.LoggingInterval = new TimeSpan (1' 0' 0);  		break;  	case 11:  		logger.LoggingInterval = new TimeSpan (2' 0' 0);  		break;  	case 12:  		logger.LoggingInterval = new TimeSpan (6' 0' 0);  		break;  	}  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: loggingInterval.Changed += (sender' e) =>  {  	switch (loggingInterval.Value) {  	case 0:  		logger.LoggingInterval = new TimeSpan (0' 0' 1);  		break;  	case 1:  		logger.LoggingInterval = new TimeSpan (0' 0' 2);  		break;  	case 2:  		logger.LoggingInterval = new TimeSpan (0' 0' 5);  		break;  	case 3:  		logger.LoggingInterval = new TimeSpan (0' 0' 10);  		break;  	case 4:  		logger.LoggingInterval = new TimeSpan (0' 0' 30);  		break;  	case 5:  		logger.LoggingInterval = new TimeSpan (0' 1' 0);  		break;  	case 6:  		logger.LoggingInterval = new TimeSpan (0' 2' 0);  		break;  	case 7:  		logger.LoggingInterval = new TimeSpan (0' 5' 0);  		break;  	case 8:  		logger.LoggingInterval = new TimeSpan (0' 10' 0);  		break;  	case 9:  		logger.LoggingInterval = new TimeSpan (0' 30' 0);  		break;  	case 10:  		logger.LoggingInterval = new TimeSpan (1' 0' 0);  		break;  	case 11:  		logger.LoggingInterval = new TimeSpan (2' 0' 0);  		break;  	case 12:  		logger.LoggingInterval = new TimeSpan (6' 0' 0);  		break;  	}  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: loggingInterval.Changed += (sender' e) =>  {  	switch (loggingInterval.Value) {  	case 0:  		logger.LoggingInterval = new TimeSpan (0' 0' 1);  		break;  	case 1:  		logger.LoggingInterval = new TimeSpan (0' 0' 2);  		break;  	case 2:  		logger.LoggingInterval = new TimeSpan (0' 0' 5);  		break;  	case 3:  		logger.LoggingInterval = new TimeSpan (0' 0' 10);  		break;  	case 4:  		logger.LoggingInterval = new TimeSpan (0' 0' 30);  		break;  	case 5:  		logger.LoggingInterval = new TimeSpan (0' 1' 0);  		break;  	case 6:  		logger.LoggingInterval = new TimeSpan (0' 2' 0);  		break;  	case 7:  		logger.LoggingInterval = new TimeSpan (0' 5' 0);  		break;  	case 8:  		logger.LoggingInterval = new TimeSpan (0' 10' 0);  		break;  	case 9:  		logger.LoggingInterval = new TimeSpan (0' 30' 0);  		break;  	case 10:  		logger.LoggingInterval = new TimeSpan (1' 0' 0);  		break;  	case 11:  		logger.LoggingInterval = new TimeSpan (2' 0' 0);  		break;  	case 12:  		logger.LoggingInterval = new TimeSpan (6' 0' 0);  		break;  	}  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: loggingInterval.Changed += (sender' e) =>  {  	switch (loggingInterval.Value) {  	case 0:  		logger.LoggingInterval = new TimeSpan (0' 0' 1);  		break;  	case 1:  		logger.LoggingInterval = new TimeSpan (0' 0' 2);  		break;  	case 2:  		logger.LoggingInterval = new TimeSpan (0' 0' 5);  		break;  	case 3:  		logger.LoggingInterval = new TimeSpan (0' 0' 10);  		break;  	case 4:  		logger.LoggingInterval = new TimeSpan (0' 0' 30);  		break;  	case 5:  		logger.LoggingInterval = new TimeSpan (0' 1' 0);  		break;  	case 6:  		logger.LoggingInterval = new TimeSpan (0' 2' 0);  		break;  	case 7:  		logger.LoggingInterval = new TimeSpan (0' 5' 0);  		break;  	case 8:  		logger.LoggingInterval = new TimeSpan (0' 10' 0);  		break;  	case 9:  		logger.LoggingInterval = new TimeSpan (0' 30' 0);  		break;  	case 10:  		logger.LoggingInterval = new TimeSpan (1' 0' 0);  		break;  	case 11:  		logger.LoggingInterval = new TimeSpan (2' 0' 0);  		break;  	case 12:  		logger.LoggingInterval = new TimeSpan (6' 0' 0);  		break;  	}  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: loggingInterval.Changed += (sender' e) =>  {  	switch (loggingInterval.Value) {  	case 0:  		logger.LoggingInterval = new TimeSpan (0' 0' 1);  		break;  	case 1:  		logger.LoggingInterval = new TimeSpan (0' 0' 2);  		break;  	case 2:  		logger.LoggingInterval = new TimeSpan (0' 0' 5);  		break;  	case 3:  		logger.LoggingInterval = new TimeSpan (0' 0' 10);  		break;  	case 4:  		logger.LoggingInterval = new TimeSpan (0' 0' 30);  		break;  	case 5:  		logger.LoggingInterval = new TimeSpan (0' 1' 0);  		break;  	case 6:  		logger.LoggingInterval = new TimeSpan (0' 2' 0);  		break;  	case 7:  		logger.LoggingInterval = new TimeSpan (0' 5' 0);  		break;  	case 8:  		logger.LoggingInterval = new TimeSpan (0' 10' 0);  		break;  	case 9:  		logger.LoggingInterval = new TimeSpan (0' 30' 0);  		break;  	case 10:  		logger.LoggingInterval = new TimeSpan (1' 0' 0);  		break;  	case 11:  		logger.LoggingInterval = new TimeSpan (2' 0' 0);  		break;  	case 12:  		logger.LoggingInterval = new TimeSpan (6' 0' 0);  		break;  	}  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: loggingInterval.Changed += (sender' e) =>  {  	switch (loggingInterval.Value) {  	case 0:  		logger.LoggingInterval = new TimeSpan (0' 0' 1);  		break;  	case 1:  		logger.LoggingInterval = new TimeSpan (0' 0' 2);  		break;  	case 2:  		logger.LoggingInterval = new TimeSpan (0' 0' 5);  		break;  	case 3:  		logger.LoggingInterval = new TimeSpan (0' 0' 10);  		break;  	case 4:  		logger.LoggingInterval = new TimeSpan (0' 0' 30);  		break;  	case 5:  		logger.LoggingInterval = new TimeSpan (0' 1' 0);  		break;  	case 6:  		logger.LoggingInterval = new TimeSpan (0' 2' 0);  		break;  	case 7:  		logger.LoggingInterval = new TimeSpan (0' 5' 0);  		break;  	case 8:  		logger.LoggingInterval = new TimeSpan (0' 10' 0);  		break;  	case 9:  		logger.LoggingInterval = new TimeSpan (0' 30' 0);  		break;  	case 10:  		logger.LoggingInterval = new TimeSpan (1' 0' 0);  		break;  	case 11:  		logger.LoggingInterval = new TimeSpan (2' 0' 0);  		break;  	case 12:  		logger.LoggingInterval = new TimeSpan (6' 0' 0);  		break;  	}  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: loggingInterval.Changed += (sender' e) =>  {  	switch (loggingInterval.Value) {  	case 0:  		logger.LoggingInterval = new TimeSpan (0' 0' 1);  		break;  	case 1:  		logger.LoggingInterval = new TimeSpan (0' 0' 2);  		break;  	case 2:  		logger.LoggingInterval = new TimeSpan (0' 0' 5);  		break;  	case 3:  		logger.LoggingInterval = new TimeSpan (0' 0' 10);  		break;  	case 4:  		logger.LoggingInterval = new TimeSpan (0' 0' 30);  		break;  	case 5:  		logger.LoggingInterval = new TimeSpan (0' 1' 0);  		break;  	case 6:  		logger.LoggingInterval = new TimeSpan (0' 2' 0);  		break;  	case 7:  		logger.LoggingInterval = new TimeSpan (0' 5' 0);  		break;  	case 8:  		logger.LoggingInterval = new TimeSpan (0' 10' 0);  		break;  	case 9:  		logger.LoggingInterval = new TimeSpan (0' 30' 0);  		break;  	case 10:  		logger.LoggingInterval = new TimeSpan (1' 0' 0);  		break;  	case 11:  		logger.LoggingInterval = new TimeSpan (2' 0' 0);  		break;  	case 12:  		logger.LoggingInterval = new TimeSpan (6' 0' 0);  		break;  	}  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: loggingInterval.Changed += (sender' e) =>  {  	switch (loggingInterval.Value) {  	case 0:  		logger.LoggingInterval = new TimeSpan (0' 0' 1);  		break;  	case 1:  		logger.LoggingInterval = new TimeSpan (0' 0' 2);  		break;  	case 2:  		logger.LoggingInterval = new TimeSpan (0' 0' 5);  		break;  	case 3:  		logger.LoggingInterval = new TimeSpan (0' 0' 10);  		break;  	case 4:  		logger.LoggingInterval = new TimeSpan (0' 0' 30);  		break;  	case 5:  		logger.LoggingInterval = new TimeSpan (0' 1' 0);  		break;  	case 6:  		logger.LoggingInterval = new TimeSpan (0' 2' 0);  		break;  	case 7:  		logger.LoggingInterval = new TimeSpan (0' 5' 0);  		break;  	case 8:  		logger.LoggingInterval = new TimeSpan (0' 10' 0);  		break;  	case 9:  		logger.LoggingInterval = new TimeSpan (0' 30' 0);  		break;  	case 10:  		logger.LoggingInterval = new TimeSpan (1' 0' 0);  		break;  	case 11:  		logger.LoggingInterval = new TimeSpan (2' 0' 0);  		break;  	case 12:  		logger.LoggingInterval = new TimeSpan (6' 0' 0);  		break;  	}  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: loggingInterval.Changed += (sender' e) =>  {  	switch (loggingInterval.Value) {  	case 0:  		logger.LoggingInterval = new TimeSpan (0' 0' 1);  		break;  	case 1:  		logger.LoggingInterval = new TimeSpan (0' 0' 2);  		break;  	case 2:  		logger.LoggingInterval = new TimeSpan (0' 0' 5);  		break;  	case 3:  		logger.LoggingInterval = new TimeSpan (0' 0' 10);  		break;  	case 4:  		logger.LoggingInterval = new TimeSpan (0' 0' 30);  		break;  	case 5:  		logger.LoggingInterval = new TimeSpan (0' 1' 0);  		break;  	case 6:  		logger.LoggingInterval = new TimeSpan (0' 2' 0);  		break;  	case 7:  		logger.LoggingInterval = new TimeSpan (0' 5' 0);  		break;  	case 8:  		logger.LoggingInterval = new TimeSpan (0' 10' 0);  		break;  	case 9:  		logger.LoggingInterval = new TimeSpan (0' 30' 0);  		break;  	case 10:  		logger.LoggingInterval = new TimeSpan (1' 0' 0);  		break;  	case 11:  		logger.LoggingInterval = new TimeSpan (2' 0' 0);  		break;  	case 12:  		logger.LoggingInterval = new TimeSpan (6' 0' 0);  		break;  	}  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: loggingInterval.Changed += (sender' e) =>  {  	switch (loggingInterval.Value) {  	case 0:  		logger.LoggingInterval = new TimeSpan (0' 0' 1);  		break;  	case 1:  		logger.LoggingInterval = new TimeSpan (0' 0' 2);  		break;  	case 2:  		logger.LoggingInterval = new TimeSpan (0' 0' 5);  		break;  	case 3:  		logger.LoggingInterval = new TimeSpan (0' 0' 10);  		break;  	case 4:  		logger.LoggingInterval = new TimeSpan (0' 0' 30);  		break;  	case 5:  		logger.LoggingInterval = new TimeSpan (0' 1' 0);  		break;  	case 6:  		logger.LoggingInterval = new TimeSpan (0' 2' 0);  		break;  	case 7:  		logger.LoggingInterval = new TimeSpan (0' 5' 0);  		break;  	case 8:  		logger.LoggingInterval = new TimeSpan (0' 10' 0);  		break;  	case 9:  		logger.LoggingInterval = new TimeSpan (0' 30' 0);  		break;  	case 10:  		logger.LoggingInterval = new TimeSpan (1' 0' 0);  		break;  	case 11:  		logger.LoggingInterval = new TimeSpan (2' 0' 0);  		break;  	case 12:  		logger.LoggingInterval = new TimeSpan (6' 0' 0);  		break;  	}  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: loggingInterval.Changed += (sender' e) =>  {  	switch (loggingInterval.Value) {  	case 0:  		logger.LoggingInterval = new TimeSpan (0' 0' 1);  		break;  	case 1:  		logger.LoggingInterval = new TimeSpan (0' 0' 2);  		break;  	case 2:  		logger.LoggingInterval = new TimeSpan (0' 0' 5);  		break;  	case 3:  		logger.LoggingInterval = new TimeSpan (0' 0' 10);  		break;  	case 4:  		logger.LoggingInterval = new TimeSpan (0' 0' 30);  		break;  	case 5:  		logger.LoggingInterval = new TimeSpan (0' 1' 0);  		break;  	case 6:  		logger.LoggingInterval = new TimeSpan (0' 2' 0);  		break;  	case 7:  		logger.LoggingInterval = new TimeSpan (0' 5' 0);  		break;  	case 8:  		logger.LoggingInterval = new TimeSpan (0' 10' 0);  		break;  	case 9:  		logger.LoggingInterval = new TimeSpan (0' 30' 0);  		break;  	case 10:  		logger.LoggingInterval = new TimeSpan (1' 0' 0);  		break;  	case 11:  		logger.LoggingInterval = new TimeSpan (2' 0' 0);  		break;  	case 12:  		logger.LoggingInterval = new TimeSpan (6' 0' 0);  		break;  	}  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: loggingInterval.Changed += (sender' e) =>  {  	switch (loggingInterval.Value) {  	case 0:  		logger.LoggingInterval = new TimeSpan (0' 0' 1);  		break;  	case 1:  		logger.LoggingInterval = new TimeSpan (0' 0' 2);  		break;  	case 2:  		logger.LoggingInterval = new TimeSpan (0' 0' 5);  		break;  	case 3:  		logger.LoggingInterval = new TimeSpan (0' 0' 10);  		break;  	case 4:  		logger.LoggingInterval = new TimeSpan (0' 0' 30);  		break;  	case 5:  		logger.LoggingInterval = new TimeSpan (0' 1' 0);  		break;  	case 6:  		logger.LoggingInterval = new TimeSpan (0' 2' 0);  		break;  	case 7:  		logger.LoggingInterval = new TimeSpan (0' 5' 0);  		break;  	case 8:  		logger.LoggingInterval = new TimeSpan (0' 10' 0);  		break;  	case 9:  		logger.LoggingInterval = new TimeSpan (0' 30' 0);  		break;  	case 10:  		logger.LoggingInterval = new TimeSpan (1' 0' 0);  		break;  	case 11:  		logger.LoggingInterval = new TimeSpan (2' 0' 0);  		break;  	case 12:  		logger.LoggingInterval = new TimeSpan (6' 0' 0);  		break;  	}  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: loggingInterval.Changed += (sender' e) =>  {  	switch (loggingInterval.Value) {  	case 0:  		logger.LoggingInterval = new TimeSpan (0' 0' 1);  		break;  	case 1:  		logger.LoggingInterval = new TimeSpan (0' 0' 2);  		break;  	case 2:  		logger.LoggingInterval = new TimeSpan (0' 0' 5);  		break;  	case 3:  		logger.LoggingInterval = new TimeSpan (0' 0' 10);  		break;  	case 4:  		logger.LoggingInterval = new TimeSpan (0' 0' 30);  		break;  	case 5:  		logger.LoggingInterval = new TimeSpan (0' 1' 0);  		break;  	case 6:  		logger.LoggingInterval = new TimeSpan (0' 2' 0);  		break;  	case 7:  		logger.LoggingInterval = new TimeSpan (0' 5' 0);  		break;  	case 8:  		logger.LoggingInterval = new TimeSpan (0' 10' 0);  		break;  	case 9:  		logger.LoggingInterval = new TimeSpan (0' 30' 0);  		break;  	case 10:  		logger.LoggingInterval = new TimeSpan (1' 0' 0);  		break;  	case 11:  		logger.LoggingInterval = new TimeSpan (2' 0' 0);  		break;  	case 12:  		logger.LoggingInterval = new TimeSpan (6' 0' 0);  		break;  	}  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: switch (loggingInterval.Value) {  case 0:  	logger.LoggingInterval = new TimeSpan (0' 0' 1);  	break;  case 1:  	logger.LoggingInterval = new TimeSpan (0' 0' 2);  	break;  case 2:  	logger.LoggingInterval = new TimeSpan (0' 0' 5);  	break;  case 3:  	logger.LoggingInterval = new TimeSpan (0' 0' 10);  	break;  case 4:  	logger.LoggingInterval = new TimeSpan (0' 0' 30);  	break;  case 5:  	logger.LoggingInterval = new TimeSpan (0' 1' 0);  	break;  case 6:  	logger.LoggingInterval = new TimeSpan (0' 2' 0);  	break;  case 7:  	logger.LoggingInterval = new TimeSpan (0' 5' 0);  	break;  case 8:  	logger.LoggingInterval = new TimeSpan (0' 10' 0);  	break;  case 9:  	logger.LoggingInterval = new TimeSpan (0' 30' 0);  	break;  case 10:  	logger.LoggingInterval = new TimeSpan (1' 0' 0);  	break;  case 11:  	logger.LoggingInterval = new TimeSpan (2' 0' 0);  	break;  case 12:  	logger.LoggingInterval = new TimeSpan (6' 0' 0);  	break;  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: switch (loggingInterval.Value) {  case 0:  	logger.LoggingInterval = new TimeSpan (0' 0' 1);  	break;  case 1:  	logger.LoggingInterval = new TimeSpan (0' 0' 2);  	break;  case 2:  	logger.LoggingInterval = new TimeSpan (0' 0' 5);  	break;  case 3:  	logger.LoggingInterval = new TimeSpan (0' 0' 10);  	break;  case 4:  	logger.LoggingInterval = new TimeSpan (0' 0' 30);  	break;  case 5:  	logger.LoggingInterval = new TimeSpan (0' 1' 0);  	break;  case 6:  	logger.LoggingInterval = new TimeSpan (0' 2' 0);  	break;  case 7:  	logger.LoggingInterval = new TimeSpan (0' 5' 0);  	break;  case 8:  	logger.LoggingInterval = new TimeSpan (0' 10' 0);  	break;  case 9:  	logger.LoggingInterval = new TimeSpan (0' 30' 0);  	break;  case 10:  	logger.LoggingInterval = new TimeSpan (1' 0' 0);  	break;  case 11:  	logger.LoggingInterval = new TimeSpan (2' 0' 0);  	break;  case 12:  	logger.LoggingInterval = new TimeSpan (6' 0' 0);  	break;  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: switch (loggingInterval.Value) {  case 0:  	logger.LoggingInterval = new TimeSpan (0' 0' 1);  	break;  case 1:  	logger.LoggingInterval = new TimeSpan (0' 0' 2);  	break;  case 2:  	logger.LoggingInterval = new TimeSpan (0' 0' 5);  	break;  case 3:  	logger.LoggingInterval = new TimeSpan (0' 0' 10);  	break;  case 4:  	logger.LoggingInterval = new TimeSpan (0' 0' 30);  	break;  case 5:  	logger.LoggingInterval = new TimeSpan (0' 1' 0);  	break;  case 6:  	logger.LoggingInterval = new TimeSpan (0' 2' 0);  	break;  case 7:  	logger.LoggingInterval = new TimeSpan (0' 5' 0);  	break;  case 8:  	logger.LoggingInterval = new TimeSpan (0' 10' 0);  	break;  case 9:  	logger.LoggingInterval = new TimeSpan (0' 30' 0);  	break;  case 10:  	logger.LoggingInterval = new TimeSpan (1' 0' 0);  	break;  case 11:  	logger.LoggingInterval = new TimeSpan (2' 0' 0);  	break;  case 12:  	logger.LoggingInterval = new TimeSpan (6' 0' 0);  	break;  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: switch (loggingInterval.Value) {  case 0:  	logger.LoggingInterval = new TimeSpan (0' 0' 1);  	break;  case 1:  	logger.LoggingInterval = new TimeSpan (0' 0' 2);  	break;  case 2:  	logger.LoggingInterval = new TimeSpan (0' 0' 5);  	break;  case 3:  	logger.LoggingInterval = new TimeSpan (0' 0' 10);  	break;  case 4:  	logger.LoggingInterval = new TimeSpan (0' 0' 30);  	break;  case 5:  	logger.LoggingInterval = new TimeSpan (0' 1' 0);  	break;  case 6:  	logger.LoggingInterval = new TimeSpan (0' 2' 0);  	break;  case 7:  	logger.LoggingInterval = new TimeSpan (0' 5' 0);  	break;  case 8:  	logger.LoggingInterval = new TimeSpan (0' 10' 0);  	break;  case 9:  	logger.LoggingInterval = new TimeSpan (0' 30' 0);  	break;  case 10:  	logger.LoggingInterval = new TimeSpan (1' 0' 0);  	break;  case 11:  	logger.LoggingInterval = new TimeSpan (2' 0' 0);  	break;  case 12:  	logger.LoggingInterval = new TimeSpan (6' 0' 0);  	break;  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: switch (loggingInterval.Value) {  case 0:  	logger.LoggingInterval = new TimeSpan (0' 0' 1);  	break;  case 1:  	logger.LoggingInterval = new TimeSpan (0' 0' 2);  	break;  case 2:  	logger.LoggingInterval = new TimeSpan (0' 0' 5);  	break;  case 3:  	logger.LoggingInterval = new TimeSpan (0' 0' 10);  	break;  case 4:  	logger.LoggingInterval = new TimeSpan (0' 0' 30);  	break;  case 5:  	logger.LoggingInterval = new TimeSpan (0' 1' 0);  	break;  case 6:  	logger.LoggingInterval = new TimeSpan (0' 2' 0);  	break;  case 7:  	logger.LoggingInterval = new TimeSpan (0' 5' 0);  	break;  case 8:  	logger.LoggingInterval = new TimeSpan (0' 10' 0);  	break;  case 9:  	logger.LoggingInterval = new TimeSpan (0' 30' 0);  	break;  case 10:  	logger.LoggingInterval = new TimeSpan (1' 0' 0);  	break;  case 11:  	logger.LoggingInterval = new TimeSpan (2' 0' 0);  	break;  case 12:  	logger.LoggingInterval = new TimeSpan (6' 0' 0);  	break;  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: switch (loggingInterval.Value) {  case 0:  	logger.LoggingInterval = new TimeSpan (0' 0' 1);  	break;  case 1:  	logger.LoggingInterval = new TimeSpan (0' 0' 2);  	break;  case 2:  	logger.LoggingInterval = new TimeSpan (0' 0' 5);  	break;  case 3:  	logger.LoggingInterval = new TimeSpan (0' 0' 10);  	break;  case 4:  	logger.LoggingInterval = new TimeSpan (0' 0' 30);  	break;  case 5:  	logger.LoggingInterval = new TimeSpan (0' 1' 0);  	break;  case 6:  	logger.LoggingInterval = new TimeSpan (0' 2' 0);  	break;  case 7:  	logger.LoggingInterval = new TimeSpan (0' 5' 0);  	break;  case 8:  	logger.LoggingInterval = new TimeSpan (0' 10' 0);  	break;  case 9:  	logger.LoggingInterval = new TimeSpan (0' 30' 0);  	break;  case 10:  	logger.LoggingInterval = new TimeSpan (1' 0' 0);  	break;  case 11:  	logger.LoggingInterval = new TimeSpan (2' 0' 0);  	break;  case 12:  	logger.LoggingInterval = new TimeSpan (6' 0' 0);  	break;  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: switch (loggingInterval.Value) {  case 0:  	logger.LoggingInterval = new TimeSpan (0' 0' 1);  	break;  case 1:  	logger.LoggingInterval = new TimeSpan (0' 0' 2);  	break;  case 2:  	logger.LoggingInterval = new TimeSpan (0' 0' 5);  	break;  case 3:  	logger.LoggingInterval = new TimeSpan (0' 0' 10);  	break;  case 4:  	logger.LoggingInterval = new TimeSpan (0' 0' 30);  	break;  case 5:  	logger.LoggingInterval = new TimeSpan (0' 1' 0);  	break;  case 6:  	logger.LoggingInterval = new TimeSpan (0' 2' 0);  	break;  case 7:  	logger.LoggingInterval = new TimeSpan (0' 5' 0);  	break;  case 8:  	logger.LoggingInterval = new TimeSpan (0' 10' 0);  	break;  case 9:  	logger.LoggingInterval = new TimeSpan (0' 30' 0);  	break;  case 10:  	logger.LoggingInterval = new TimeSpan (1' 0' 0);  	break;  case 11:  	logger.LoggingInterval = new TimeSpan (2' 0' 0);  	break;  case 12:  	logger.LoggingInterval = new TimeSpan (6' 0' 0);  	break;  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: switch (loggingInterval.Value) {  case 0:  	logger.LoggingInterval = new TimeSpan (0' 0' 1);  	break;  case 1:  	logger.LoggingInterval = new TimeSpan (0' 0' 2);  	break;  case 2:  	logger.LoggingInterval = new TimeSpan (0' 0' 5);  	break;  case 3:  	logger.LoggingInterval = new TimeSpan (0' 0' 10);  	break;  case 4:  	logger.LoggingInterval = new TimeSpan (0' 0' 30);  	break;  case 5:  	logger.LoggingInterval = new TimeSpan (0' 1' 0);  	break;  case 6:  	logger.LoggingInterval = new TimeSpan (0' 2' 0);  	break;  case 7:  	logger.LoggingInterval = new TimeSpan (0' 5' 0);  	break;  case 8:  	logger.LoggingInterval = new TimeSpan (0' 10' 0);  	break;  case 9:  	logger.LoggingInterval = new TimeSpan (0' 30' 0);  	break;  case 10:  	logger.LoggingInterval = new TimeSpan (1' 0' 0);  	break;  case 11:  	logger.LoggingInterval = new TimeSpan (2' 0' 0);  	break;  case 12:  	logger.LoggingInterval = new TimeSpan (6' 0' 0);  	break;  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: switch (loggingInterval.Value) {  case 0:  	logger.LoggingInterval = new TimeSpan (0' 0' 1);  	break;  case 1:  	logger.LoggingInterval = new TimeSpan (0' 0' 2);  	break;  case 2:  	logger.LoggingInterval = new TimeSpan (0' 0' 5);  	break;  case 3:  	logger.LoggingInterval = new TimeSpan (0' 0' 10);  	break;  case 4:  	logger.LoggingInterval = new TimeSpan (0' 0' 30);  	break;  case 5:  	logger.LoggingInterval = new TimeSpan (0' 1' 0);  	break;  case 6:  	logger.LoggingInterval = new TimeSpan (0' 2' 0);  	break;  case 7:  	logger.LoggingInterval = new TimeSpan (0' 5' 0);  	break;  case 8:  	logger.LoggingInterval = new TimeSpan (0' 10' 0);  	break;  case 9:  	logger.LoggingInterval = new TimeSpan (0' 30' 0);  	break;  case 10:  	logger.LoggingInterval = new TimeSpan (1' 0' 0);  	break;  case 11:  	logger.LoggingInterval = new TimeSpan (2' 0' 0);  	break;  case 12:  	logger.LoggingInterval = new TimeSpan (6' 0' 0);  	break;  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: switch (loggingInterval.Value) {  case 0:  	logger.LoggingInterval = new TimeSpan (0' 0' 1);  	break;  case 1:  	logger.LoggingInterval = new TimeSpan (0' 0' 2);  	break;  case 2:  	logger.LoggingInterval = new TimeSpan (0' 0' 5);  	break;  case 3:  	logger.LoggingInterval = new TimeSpan (0' 0' 10);  	break;  case 4:  	logger.LoggingInterval = new TimeSpan (0' 0' 30);  	break;  case 5:  	logger.LoggingInterval = new TimeSpan (0' 1' 0);  	break;  case 6:  	logger.LoggingInterval = new TimeSpan (0' 2' 0);  	break;  case 7:  	logger.LoggingInterval = new TimeSpan (0' 5' 0);  	break;  case 8:  	logger.LoggingInterval = new TimeSpan (0' 10' 0);  	break;  case 9:  	logger.LoggingInterval = new TimeSpan (0' 30' 0);  	break;  case 10:  	logger.LoggingInterval = new TimeSpan (1' 0' 0);  	break;  case 11:  	logger.LoggingInterval = new TimeSpan (2' 0' 0);  	break;  case 12:  	logger.LoggingInterval = new TimeSpan (6' 0' 0);  	break;  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: switch (loggingInterval.Value) {  case 0:  	logger.LoggingInterval = new TimeSpan (0' 0' 1);  	break;  case 1:  	logger.LoggingInterval = new TimeSpan (0' 0' 2);  	break;  case 2:  	logger.LoggingInterval = new TimeSpan (0' 0' 5);  	break;  case 3:  	logger.LoggingInterval = new TimeSpan (0' 0' 10);  	break;  case 4:  	logger.LoggingInterval = new TimeSpan (0' 0' 30);  	break;  case 5:  	logger.LoggingInterval = new TimeSpan (0' 1' 0);  	break;  case 6:  	logger.LoggingInterval = new TimeSpan (0' 2' 0);  	break;  case 7:  	logger.LoggingInterval = new TimeSpan (0' 5' 0);  	break;  case 8:  	logger.LoggingInterval = new TimeSpan (0' 10' 0);  	break;  case 9:  	logger.LoggingInterval = new TimeSpan (0' 30' 0);  	break;  case 10:  	logger.LoggingInterval = new TimeSpan (1' 0' 0);  	break;  case 11:  	logger.LoggingInterval = new TimeSpan (2' 0' 0);  	break;  case 12:  	logger.LoggingInterval = new TimeSpan (6' 0' 0);  	break;  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: switch (loggingInterval.Value) {  case 0:  	logger.LoggingInterval = new TimeSpan (0' 0' 1);  	break;  case 1:  	logger.LoggingInterval = new TimeSpan (0' 0' 2);  	break;  case 2:  	logger.LoggingInterval = new TimeSpan (0' 0' 5);  	break;  case 3:  	logger.LoggingInterval = new TimeSpan (0' 0' 10);  	break;  case 4:  	logger.LoggingInterval = new TimeSpan (0' 0' 30);  	break;  case 5:  	logger.LoggingInterval = new TimeSpan (0' 1' 0);  	break;  case 6:  	logger.LoggingInterval = new TimeSpan (0' 2' 0);  	break;  case 7:  	logger.LoggingInterval = new TimeSpan (0' 5' 0);  	break;  case 8:  	logger.LoggingInterval = new TimeSpan (0' 10' 0);  	break;  case 9:  	logger.LoggingInterval = new TimeSpan (0' 30' 0);  	break;  case 10:  	logger.LoggingInterval = new TimeSpan (1' 0' 0);  	break;  case 11:  	logger.LoggingInterval = new TimeSpan (2' 0' 0);  	break;  case 12:  	logger.LoggingInterval = new TimeSpan (6' 0' 0);  	break;  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: switch (loggingInterval.Value) {  case 0:  	logger.LoggingInterval = new TimeSpan (0' 0' 1);  	break;  case 1:  	logger.LoggingInterval = new TimeSpan (0' 0' 2);  	break;  case 2:  	logger.LoggingInterval = new TimeSpan (0' 0' 5);  	break;  case 3:  	logger.LoggingInterval = new TimeSpan (0' 0' 10);  	break;  case 4:  	logger.LoggingInterval = new TimeSpan (0' 0' 30);  	break;  case 5:  	logger.LoggingInterval = new TimeSpan (0' 1' 0);  	break;  case 6:  	logger.LoggingInterval = new TimeSpan (0' 2' 0);  	break;  case 7:  	logger.LoggingInterval = new TimeSpan (0' 5' 0);  	break;  case 8:  	logger.LoggingInterval = new TimeSpan (0' 10' 0);  	break;  case 9:  	logger.LoggingInterval = new TimeSpan (0' 30' 0);  	break;  case 10:  	logger.LoggingInterval = new TimeSpan (1' 0' 0);  	break;  case 11:  	logger.LoggingInterval = new TimeSpan (2' 0' 0);  	break;  case 12:  	logger.LoggingInterval = new TimeSpan (6' 0' 0);  	break;  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: switch (loggingInterval.Value) {  case 0:  	logger.LoggingInterval = new TimeSpan (0' 0' 1);  	break;  case 1:  	logger.LoggingInterval = new TimeSpan (0' 0' 2);  	break;  case 2:  	logger.LoggingInterval = new TimeSpan (0' 0' 5);  	break;  case 3:  	logger.LoggingInterval = new TimeSpan (0' 0' 10);  	break;  case 4:  	logger.LoggingInterval = new TimeSpan (0' 0' 30);  	break;  case 5:  	logger.LoggingInterval = new TimeSpan (0' 1' 0);  	break;  case 6:  	logger.LoggingInterval = new TimeSpan (0' 2' 0);  	break;  case 7:  	logger.LoggingInterval = new TimeSpan (0' 5' 0);  	break;  case 8:  	logger.LoggingInterval = new TimeSpan (0' 10' 0);  	break;  case 9:  	logger.LoggingInterval = new TimeSpan (0' 30' 0);  	break;  case 10:  	logger.LoggingInterval = new TimeSpan (1' 0' 0);  	break;  case 11:  	logger.LoggingInterval = new TimeSpan (2' 0' 0);  	break;  case 12:  	logger.LoggingInterval = new TimeSpan (6' 0' 0);  	break;  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: switch (loggingInterval.Value) {  case 0:  	logger.LoggingInterval = new TimeSpan (0' 0' 1);  	break;  case 1:  	logger.LoggingInterval = new TimeSpan (0' 0' 2);  	break;  case 2:  	logger.LoggingInterval = new TimeSpan (0' 0' 5);  	break;  case 3:  	logger.LoggingInterval = new TimeSpan (0' 0' 10);  	break;  case 4:  	logger.LoggingInterval = new TimeSpan (0' 0' 30);  	break;  case 5:  	logger.LoggingInterval = new TimeSpan (0' 1' 0);  	break;  case 6:  	logger.LoggingInterval = new TimeSpan (0' 2' 0);  	break;  case 7:  	logger.LoggingInterval = new TimeSpan (0' 5' 0);  	break;  case 8:  	logger.LoggingInterval = new TimeSpan (0' 10' 0);  	break;  case 9:  	logger.LoggingInterval = new TimeSpan (0' 30' 0);  	break;  case 10:  	logger.LoggingInterval = new TimeSpan (1' 0' 0);  	break;  case 11:  	logger.LoggingInterval = new TimeSpan (2' 0' 0);  	break;  case 12:  	logger.LoggingInterval = new TimeSpan (6' 0' 0);  	break;  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: switch (loggingInterval.Value) {  case 0:  	logger.LoggingInterval = new TimeSpan (0' 0' 1);  	break;  case 1:  	logger.LoggingInterval = new TimeSpan (0' 0' 2);  	break;  case 2:  	logger.LoggingInterval = new TimeSpan (0' 0' 5);  	break;  case 3:  	logger.LoggingInterval = new TimeSpan (0' 0' 10);  	break;  case 4:  	logger.LoggingInterval = new TimeSpan (0' 0' 30);  	break;  case 5:  	logger.LoggingInterval = new TimeSpan (0' 1' 0);  	break;  case 6:  	logger.LoggingInterval = new TimeSpan (0' 2' 0);  	break;  case 7:  	logger.LoggingInterval = new TimeSpan (0' 5' 0);  	break;  case 8:  	logger.LoggingInterval = new TimeSpan (0' 10' 0);  	break;  case 9:  	logger.LoggingInterval = new TimeSpan (0' 30' 0);  	break;  case 10:  	logger.LoggingInterval = new TimeSpan (1' 0' 0);  	break;  case 11:  	logger.LoggingInterval = new TimeSpan (2' 0' 0);  	break;  case 12:  	logger.LoggingInterval = new TimeSpan (6' 0' 0);  	break;  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: switch (loggingInterval.Value) {  case 0:  	logger.LoggingInterval = new TimeSpan (0' 0' 1);  	break;  case 1:  	logger.LoggingInterval = new TimeSpan (0' 0' 2);  	break;  case 2:  	logger.LoggingInterval = new TimeSpan (0' 0' 5);  	break;  case 3:  	logger.LoggingInterval = new TimeSpan (0' 0' 10);  	break;  case 4:  	logger.LoggingInterval = new TimeSpan (0' 0' 30);  	break;  case 5:  	logger.LoggingInterval = new TimeSpan (0' 1' 0);  	break;  case 6:  	logger.LoggingInterval = new TimeSpan (0' 2' 0);  	break;  case 7:  	logger.LoggingInterval = new TimeSpan (0' 5' 0);  	break;  case 8:  	logger.LoggingInterval = new TimeSpan (0' 10' 0);  	break;  case 9:  	logger.LoggingInterval = new TimeSpan (0' 30' 0);  	break;  case 10:  	logger.LoggingInterval = new TimeSpan (1' 0' 0);  	break;  case 11:  	logger.LoggingInterval = new TimeSpan (2' 0' 0);  	break;  case 12:  	logger.LoggingInterval = new TimeSpan (6' 0' 0);  	break;  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: switch (loggingInterval.Value) {  case 0:  	logger.LoggingInterval = new TimeSpan (0' 0' 1);  	break;  case 1:  	logger.LoggingInterval = new TimeSpan (0' 0' 2);  	break;  case 2:  	logger.LoggingInterval = new TimeSpan (0' 0' 5);  	break;  case 3:  	logger.LoggingInterval = new TimeSpan (0' 0' 10);  	break;  case 4:  	logger.LoggingInterval = new TimeSpan (0' 0' 30);  	break;  case 5:  	logger.LoggingInterval = new TimeSpan (0' 1' 0);  	break;  case 6:  	logger.LoggingInterval = new TimeSpan (0' 2' 0);  	break;  case 7:  	logger.LoggingInterval = new TimeSpan (0' 5' 0);  	break;  case 8:  	logger.LoggingInterval = new TimeSpan (0' 10' 0);  	break;  case 9:  	logger.LoggingInterval = new TimeSpan (0' 30' 0);  	break;  case 10:  	logger.LoggingInterval = new TimeSpan (1' 0' 0);  	break;  case 11:  	logger.LoggingInterval = new TimeSpan (2' 0' 0);  	break;  case 12:  	logger.LoggingInterval = new TimeSpan (6' 0' 0);  	break;  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: switch (loggingInterval.Value) {  case 0:  	logger.LoggingInterval = new TimeSpan (0' 0' 1);  	break;  case 1:  	logger.LoggingInterval = new TimeSpan (0' 0' 2);  	break;  case 2:  	logger.LoggingInterval = new TimeSpan (0' 0' 5);  	break;  case 3:  	logger.LoggingInterval = new TimeSpan (0' 0' 10);  	break;  case 4:  	logger.LoggingInterval = new TimeSpan (0' 0' 30);  	break;  case 5:  	logger.LoggingInterval = new TimeSpan (0' 1' 0);  	break;  case 6:  	logger.LoggingInterval = new TimeSpan (0' 2' 0);  	break;  case 7:  	logger.LoggingInterval = new TimeSpan (0' 5' 0);  	break;  case 8:  	logger.LoggingInterval = new TimeSpan (0' 10' 0);  	break;  case 9:  	logger.LoggingInterval = new TimeSpan (0' 30' 0);  	break;  case 10:  	logger.LoggingInterval = new TimeSpan (1' 0' 0);  	break;  case 11:  	logger.LoggingInterval = new TimeSpan (2' 0' 0);  	break;  case 12:  	logger.LoggingInterval = new TimeSpan (6' 0' 0);  	break;  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: switch (loggingInterval.Value) {  case 0:  	logger.LoggingInterval = new TimeSpan (0' 0' 1);  	break;  case 1:  	logger.LoggingInterval = new TimeSpan (0' 0' 2);  	break;  case 2:  	logger.LoggingInterval = new TimeSpan (0' 0' 5);  	break;  case 3:  	logger.LoggingInterval = new TimeSpan (0' 0' 10);  	break;  case 4:  	logger.LoggingInterval = new TimeSpan (0' 0' 30);  	break;  case 5:  	logger.LoggingInterval = new TimeSpan (0' 1' 0);  	break;  case 6:  	logger.LoggingInterval = new TimeSpan (0' 2' 0);  	break;  case 7:  	logger.LoggingInterval = new TimeSpan (0' 5' 0);  	break;  case 8:  	logger.LoggingInterval = new TimeSpan (0' 10' 0);  	break;  case 9:  	logger.LoggingInterval = new TimeSpan (0' 30' 0);  	break;  case 10:  	logger.LoggingInterval = new TimeSpan (1' 0' 0);  	break;  case 11:  	logger.LoggingInterval = new TimeSpan (2' 0' 0);  	break;  case 12:  	logger.LoggingInterval = new TimeSpan (6' 0' 0);  	break;  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: switch (loggingInterval.Value) {  case 0:  	logger.LoggingInterval = new TimeSpan (0' 0' 1);  	break;  case 1:  	logger.LoggingInterval = new TimeSpan (0' 0' 2);  	break;  case 2:  	logger.LoggingInterval = new TimeSpan (0' 0' 5);  	break;  case 3:  	logger.LoggingInterval = new TimeSpan (0' 0' 10);  	break;  case 4:  	logger.LoggingInterval = new TimeSpan (0' 0' 30);  	break;  case 5:  	logger.LoggingInterval = new TimeSpan (0' 1' 0);  	break;  case 6:  	logger.LoggingInterval = new TimeSpan (0' 2' 0);  	break;  case 7:  	logger.LoggingInterval = new TimeSpan (0' 5' 0);  	break;  case 8:  	logger.LoggingInterval = new TimeSpan (0' 10' 0);  	break;  case 9:  	logger.LoggingInterval = new TimeSpan (0' 30' 0);  	break;  case 10:  	logger.LoggingInterval = new TimeSpan (1' 0' 0);  	break;  case 11:  	logger.LoggingInterval = new TimeSpan (2' 0' 0);  	break;  case 12:  	logger.LoggingInterval = new TimeSpan (6' 0' 0);  	break;  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: logger.LoggingInterval = new TimeSpan (0' 0' 2);  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: logger.LoggingInterval = new TimeSpan (0' 0' 5);  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: logger.LoggingInterval = new TimeSpan (0' 0' 10);  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: logger.LoggingInterval = new TimeSpan (0' 0' 30);  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: logger.LoggingInterval = new TimeSpan (0' 2' 0);  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: logger.LoggingInterval = new TimeSpan (0' 5' 0);  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: logger.LoggingInterval = new TimeSpan (0' 10' 0);  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: logger.LoggingInterval = new TimeSpan (0' 30' 0);  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: logger.LoggingInterval = new TimeSpan (2' 0' 0);  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following statement contains a magic number: logger.LoggingInterval = new TimeSpan (6' 0' 0);  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,InitializePlotForm,The following statement contains a magic number: plotForm.Bounds = new Rectangle {  	X = settings.GetValue ("plotForm.Location.X"' -100000)'  	Y = settings.GetValue ("plotForm.Location.Y"' 100)'  	Width = settings.GetValue ("plotForm.Width"' 600)'  	Height = settings.GetValue ("plotForm.Height"' 400)  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,InitializePlotForm,The following statement contains a magic number: plotForm.Bounds = new Rectangle {  	X = settings.GetValue ("plotForm.Location.X"' -100000)'  	Y = settings.GetValue ("plotForm.Location.Y"' 100)'  	Width = settings.GetValue ("plotForm.Width"' 600)'  	Height = settings.GetValue ("plotForm.Height"' 400)  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,InitializePlotForm,The following statement contains a magic number: plotForm.Bounds = new Rectangle {  	X = settings.GetValue ("plotForm.Location.X"' -100000)'  	Y = settings.GetValue ("plotForm.Location.Y"' 100)'  	Width = settings.GetValue ("plotForm.Width"' 600)'  	Height = settings.GetValue ("plotForm.Height"' 400)  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,InitializePlotForm,The following statement contains a magic number: plotForm.Bounds = new Rectangle {  	X = settings.GetValue ("plotForm.Location.X"' -100000)'  	Y = settings.GetValue ("plotForm.Location.Y"' 100)'  	Width = settings.GetValue ("plotForm.Width"' 600)'  	Height = settings.GetValue ("plotForm.Height"' 400)  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,InitializePlotForm,The following statement contains a magic number: plotLocation.Changed += delegate (object sender' EventArgs e) {  	switch (plotLocation.Value) {  	case 0:  		splitContainer.Panel2.Controls.Clear ();  		splitContainer.Panel2Collapsed = true;  		plotForm.Controls.Add (plotPanel);  		if (showPlot.Value && this.Visible)  			plotForm.Show ();  		break;  	case 1:  		plotForm.Controls.Clear ();  		plotForm.Hide ();  		splitContainer.Orientation = Orientation.Horizontal;  		splitContainer.Panel2.Controls.Add (plotPanel);  		splitContainer.Panel2Collapsed = !showPlot.Value;  		break;  	case 2:  		plotForm.Controls.Clear ();  		plotForm.Hide ();  		splitContainer.Orientation = Orientation.Vertical;  		splitContainer.Panel2.Controls.Add (plotPanel);  		splitContainer.Panel2Collapsed = !showPlot.Value;  		break;  	}  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,InitializePlotForm,The following statement contains a magic number: switch (plotLocation.Value) {  case 0:  	splitContainer.Panel2.Controls.Clear ();  	splitContainer.Panel2Collapsed = true;  	plotForm.Controls.Add (plotPanel);  	if (showPlot.Value && this.Visible)  		plotForm.Show ();  	break;  case 1:  	plotForm.Controls.Clear ();  	plotForm.Hide ();  	splitContainer.Orientation = Orientation.Horizontal;  	splitContainer.Panel2.Controls.Add (plotPanel);  	splitContainer.Panel2Collapsed = !showPlot.Value;  	break;  case 2:  	plotForm.Controls.Clear ();  	plotForm.Hide ();  	splitContainer.Orientation = Orientation.Vertical;  	splitContainer.Panel2.Controls.Add (plotPanel);  	splitContainer.Panel2Collapsed = !showPlot.Value;  	break;  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,InitializePlotForm,The following statement contains a magic number: plotForm.VisibleChanged += delegate (object sender' EventArgs e) {  	Rectangle bounds = new Rectangle (plotForm.Location' plotForm.Size);  	Screen screen = Screen.FromRectangle (bounds);  	Rectangle intersection = Rectangle.Intersect (screen.WorkingArea' bounds);  	if (intersection.Width < Math.Min (16' bounds.Width) || intersection.Height < Math.Min (16' bounds.Height)) {  		plotForm.Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2);  	}  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,InitializePlotForm,The following statement contains a magic number: plotForm.VisibleChanged += delegate (object sender' EventArgs e) {  	Rectangle bounds = new Rectangle (plotForm.Location' plotForm.Size);  	Screen screen = Screen.FromRectangle (bounds);  	Rectangle intersection = Rectangle.Intersect (screen.WorkingArea' bounds);  	if (intersection.Width < Math.Min (16' bounds.Width) || intersection.Height < Math.Min (16' bounds.Height)) {  		plotForm.Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2);  	}  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,InitializePlotForm,The following statement contains a magic number: plotForm.VisibleChanged += delegate (object sender' EventArgs e) {  	Rectangle bounds = new Rectangle (plotForm.Location' plotForm.Size);  	Screen screen = Screen.FromRectangle (bounds);  	Rectangle intersection = Rectangle.Intersect (screen.WorkingArea' bounds);  	if (intersection.Width < Math.Min (16' bounds.Width) || intersection.Height < Math.Min (16' bounds.Height)) {  		plotForm.Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2);  	}  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,InitializePlotForm,The following statement contains a magic number: plotForm.VisibleChanged += delegate (object sender' EventArgs e) {  	Rectangle bounds = new Rectangle (plotForm.Location' plotForm.Size);  	Screen screen = Screen.FromRectangle (bounds);  	Rectangle intersection = Rectangle.Intersect (screen.WorkingArea' bounds);  	if (intersection.Width < Math.Min (16' bounds.Width) || intersection.Height < Math.Min (16' bounds.Height)) {  		plotForm.Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2);  	}  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,InitializePlotForm,The following statement contains a magic number: plotForm.VisibleChanged += delegate (object sender' EventArgs e) {  	Rectangle bounds = new Rectangle (plotForm.Location' plotForm.Size);  	Screen screen = Screen.FromRectangle (bounds);  	Rectangle intersection = Rectangle.Intersect (screen.WorkingArea' bounds);  	if (intersection.Width < Math.Min (16' bounds.Width) || intersection.Height < Math.Min (16' bounds.Height)) {  		plotForm.Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2);  	}  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,InitializePlotForm,The following statement contains a magic number: plotForm.VisibleChanged += delegate (object sender' EventArgs e) {  	Rectangle bounds = new Rectangle (plotForm.Location' plotForm.Size);  	Screen screen = Screen.FromRectangle (bounds);  	Rectangle intersection = Rectangle.Intersect (screen.WorkingArea' bounds);  	if (intersection.Width < Math.Min (16' bounds.Width) || intersection.Height < Math.Min (16' bounds.Height)) {  		plotForm.Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2);  	}  };  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,InitializePlotForm,The following statement contains a magic number: if (intersection.Width < Math.Min (16' bounds.Width) || intersection.Height < Math.Min (16' bounds.Height)) {  	plotForm.Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2);  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,InitializePlotForm,The following statement contains a magic number: if (intersection.Width < Math.Min (16' bounds.Width) || intersection.Height < Math.Min (16' bounds.Height)) {  	plotForm.Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2);  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,InitializePlotForm,The following statement contains a magic number: if (intersection.Width < Math.Min (16' bounds.Width) || intersection.Height < Math.Min (16' bounds.Height)) {  	plotForm.Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2);  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,InitializePlotForm,The following statement contains a magic number: if (intersection.Width < Math.Min (16' bounds.Width) || intersection.Height < Math.Min (16' bounds.Height)) {  	plotForm.Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2);  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,InitializePlotForm,The following statement contains a magic number: if (intersection.Width < Math.Min (16' bounds.Width) || intersection.Height < Math.Min (16' bounds.Height)) {  	plotForm.Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2);  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,InitializePlotForm,The following statement contains a magic number: if (intersection.Width < Math.Min (16' bounds.Width) || intersection.Height < Math.Min (16' bounds.Height)) {  	plotForm.Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2);  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,InitializePlotForm,The following statement contains a magic number: plotForm.Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2);  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,InitializePlotForm,The following statement contains a magic number: plotForm.Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2);  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,InitializePlotForm,The following statement contains a magic number: plotForm.Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2);  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,InitializePlotForm,The following statement contains a magic number: plotForm.Location = new Point (screen.WorkingArea.Width / 2 - bounds.Width / 2' screen.WorkingArea.Height / 2 - bounds.Height / 2);  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,timer_Tick,The following statement contains a magic number: if (logSensors != null) {  	if (logSensors.Value && delayCount >= 4)  		logger.Log ();  	if (delayCount < 4)  		delayCount++;  }  else {  	logSensors = new UserOption ("logSensorsMenuItem"' false' logSensorsMenuItem' settings);  	if (logSensors.Value && delayCount >= 4)  		logger.Log ();  	if (delayCount < 4)  		delayCount++;  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,timer_Tick,The following statement contains a magic number: if (logSensors != null) {  	if (logSensors.Value && delayCount >= 4)  		logger.Log ();  	if (delayCount < 4)  		delayCount++;  }  else {  	logSensors = new UserOption ("logSensorsMenuItem"' false' logSensorsMenuItem' settings);  	if (logSensors.Value && delayCount >= 4)  		logger.Log ();  	if (delayCount < 4)  		delayCount++;  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,timer_Tick,The following statement contains a magic number: if (logSensors != null) {  	if (logSensors.Value && delayCount >= 4)  		logger.Log ();  	if (delayCount < 4)  		delayCount++;  }  else {  	logSensors = new UserOption ("logSensorsMenuItem"' false' logSensorsMenuItem' settings);  	if (logSensors.Value && delayCount >= 4)  		logger.Log ();  	if (delayCount < 4)  		delayCount++;  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,timer_Tick,The following statement contains a magic number: if (logSensors != null) {  	if (logSensors.Value && delayCount >= 4)  		logger.Log ();  	if (delayCount < 4)  		delayCount++;  }  else {  	logSensors = new UserOption ("logSensorsMenuItem"' false' logSensorsMenuItem' settings);  	if (logSensors.Value && delayCount >= 4)  		logger.Log ();  	if (delayCount < 4)  		delayCount++;  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,timer_Tick,The following statement contains a magic number: if (logSensors.Value && delayCount >= 4)  	logger.Log ();  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,timer_Tick,The following statement contains a magic number: if (delayCount < 4)  	delayCount++;  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,timer_Tick,The following statement contains a magic number: if (logSensors.Value && delayCount >= 4)  	logger.Log ();  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,timer_Tick,The following statement contains a magic number: if (delayCount < 4)  	delayCount++;  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm_Load,The following statement contains a magic number: if (intersection.Width < 20 || intersection.Height < 20 || !settings.Contains ("mainForm.Location.X")) {  	newBounds.X = (Screen.PrimaryScreen.WorkingArea.Width / 2) - (newBounds.Width / 2);  	newBounds.Y = (Screen.PrimaryScreen.WorkingArea.Height / 2) - (newBounds.Height / 2);  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm_Load,The following statement contains a magic number: if (intersection.Width < 20 || intersection.Height < 20 || !settings.Contains ("mainForm.Location.X")) {  	newBounds.X = (Screen.PrimaryScreen.WorkingArea.Width / 2) - (newBounds.Width / 2);  	newBounds.Y = (Screen.PrimaryScreen.WorkingArea.Height / 2) - (newBounds.Height / 2);  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm_Load,The following statement contains a magic number: if (intersection.Width < 20 || intersection.Height < 20 || !settings.Contains ("mainForm.Location.X")) {  	newBounds.X = (Screen.PrimaryScreen.WorkingArea.Width / 2) - (newBounds.Width / 2);  	newBounds.Y = (Screen.PrimaryScreen.WorkingArea.Height / 2) - (newBounds.Height / 2);  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm_Load,The following statement contains a magic number: if (intersection.Width < 20 || intersection.Height < 20 || !settings.Contains ("mainForm.Location.X")) {  	newBounds.X = (Screen.PrimaryScreen.WorkingArea.Width / 2) - (newBounds.Width / 2);  	newBounds.Y = (Screen.PrimaryScreen.WorkingArea.Height / 2) - (newBounds.Height / 2);  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm_Load,The following statement contains a magic number: if (intersection.Width < 20 || intersection.Height < 20 || !settings.Contains ("mainForm.Location.X")) {  	newBounds.X = (Screen.PrimaryScreen.WorkingArea.Width / 2) - (newBounds.Width / 2);  	newBounds.Y = (Screen.PrimaryScreen.WorkingArea.Height / 2) - (newBounds.Height / 2);  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm_Load,The following statement contains a magic number: if (intersection.Width < 20 || intersection.Height < 20 || !settings.Contains ("mainForm.Location.X")) {  	newBounds.X = (Screen.PrimaryScreen.WorkingArea.Width / 2) - (newBounds.Width / 2);  	newBounds.Y = (Screen.PrimaryScreen.WorkingArea.Height / 2) - (newBounds.Height / 2);  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm_Load,The following statement contains a magic number: newBounds.X = (Screen.PrimaryScreen.WorkingArea.Width / 2) - (newBounds.Width / 2);  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm_Load,The following statement contains a magic number: newBounds.X = (Screen.PrimaryScreen.WorkingArea.Width / 2) - (newBounds.Width / 2);  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm_Load,The following statement contains a magic number: newBounds.Y = (Screen.PrimaryScreen.WorkingArea.Height / 2) - (newBounds.Height / 2);  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm_Load,The following statement contains a magic number: newBounds.Y = (Screen.PrimaryScreen.WorkingArea.Height / 2) - (newBounds.Height / 2);  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,treeView_Click,The following statement contains a magic number: if (m == null || m.Button != MouseButtons.Right)// this means left-mouseclick   {  	clicks++;  	System.Windows.Forms.MessageBox.Show ("Left mouse clicked");  }  else {  	NodeControlInfo info = treeView.GetNodeControlInfoAt (new Point (m.X' m.Y));  	treeView.SelectedNode = info.Node;  	if (info.Node != null) {  		SensorNode node = info.Node.Tag as SensorNode;  		if (node != null && node.Sensor != null) {  			treeContextMenu.MenuItems.Clear ();  			if (node.Sensor.Parameters.Length > 0) {  				MenuItem item = new MenuItem ("Parameters...");  				item.Click += delegate (object obj' EventArgs args) {  					ShowParameterForm (node.Sensor);  				};  				treeContextMenu.MenuItems.Add (item);  			}  			if (nodeTextBoxText.EditEnabled) {  				MenuItem item = new MenuItem ("Rename");  				item.Click += delegate (object obj' EventArgs args) {  					nodeTextBoxText.BeginEdit ();  				};  				treeContextMenu.MenuItems.Add (item);  			}  			if (node.IsVisible) {  				MenuItem item = new MenuItem ("Hide");  				item.Click += delegate (object obj' EventArgs args) {  					node.IsVisible = false;  				};  				treeContextMenu.MenuItems.Add (item);  			}  			else {  				MenuItem item = new MenuItem ("Unhide");  				item.Click += delegate (object obj' EventArgs args) {  					node.IsVisible = true;  				};  				treeContextMenu.MenuItems.Add (item);  			}  			treeContextMenu.MenuItems.Add (new MenuItem ("-"));  			{  				MenuItem item = new MenuItem ("Show in Tray");  				item.Checked = systemTray.Contains (node.Sensor);  				item.Click += delegate (object obj' EventArgs args) {  					if (item.Checked)  						systemTray.Remove (node.Sensor);  					else  						systemTray.Add (node.Sensor' true);  				};  				treeContextMenu.MenuItems.Add (item);  			}  			if (gadget != null) {  				MenuItem item = new MenuItem ("Show in Gadget");  				item.Checked = gadget.Contains (node.Sensor);  				item.Click += delegate (object obj' EventArgs args) {  					if (item.Checked) {  						gadget.Remove (node.Sensor);  					}  					else {  						gadget.Add (node.Sensor);  					}  				};  				treeContextMenu.MenuItems.Add (item);  			}  			if (node.Sensor.Control != null) {  				treeContextMenu.MenuItems.Add (new MenuItem ("-"));  				IControl control = node.Sensor.Control;  				MenuItem controlItem = new MenuItem ("Control");  				MenuItem defaultItem = new MenuItem ("Default");  				defaultItem.Checked = control.ControlMode == ControlMode.Default;  				controlItem.MenuItems.Add (defaultItem);  				defaultItem.Click += delegate (object obj' EventArgs args) {  					control.SetDefault ();  				};  				MenuItem manualItem = new MenuItem ("Manual");  				controlItem.MenuItems.Add (manualItem);  				manualItem.Checked = control.ControlMode == ControlMode.Software;  				for (int i = 0; i <= 100; i += 5) {  					if (i <= control.MaxSoftwareValue && i >= control.MinSoftwareValue) {  						MenuItem item = new MenuItem (i + " %");  						item.RadioCheck = true;  						manualItem.MenuItems.Add (item);  						item.Checked = control.ControlMode == ControlMode.Software && Math.Round (control.SoftwareValue) == i;  						int softwareValue = i;  						item.Click += delegate (object obj' EventArgs args) {  							control.SetSoftware (softwareValue);  						};  					}  				}  				treeContextMenu.MenuItems.Add (controlItem);  			}  			treeContextMenu.Show (treeView' new Point (m.X' m.Y));  		}  		HardwareNode hardwareNode = info.Node.Tag as HardwareNode;  		if (hardwareNode != null && hardwareNode.Hardware != null) {  			treeContextMenu.MenuItems.Clear ();  			if (nodeTextBoxText.EditEnabled) {  				MenuItem item = new MenuItem ("Rename");  				item.Click += delegate (object obj' EventArgs args) {  					nodeTextBoxText.BeginEdit ();  				};  				treeContextMenu.MenuItems.Add (item);  			}  			if (hardwareNode.Hardware.HardwareType.ToString () == hardwareNode.HDDType ())// For the HDD's in the system  			 {  				MenuItem item = new MenuItem ("Properties");  				item.Click += delegate (object obj' EventArgs args) {  					// Harddrive with Identifier /hdd/7 is at the top of the list and harddrive with identifier /hdd/0 is at the bottom of the list!!!  					string[] hddInfo =  {    					};  					List<HardwareNode> hardWareNodes = new List<HardwareNode> ();  					foreach (Node n in root.Nodes) {  						HardwareNode HN = n as HardwareNode;  						if (HN.Hardware.HardwareType.ToString () == hardwareNode.HDDType ()) {  							totalHarddriveCount++;  						}  					}  					HDDDialog = new HDDForm ();  					int driveIndex = Convert.ToInt32 (hardwareNode.Hardware.Identifier.ToString ().Replace ("/hdd/"' ""));  					string harddriveAddress = @"\\.\PhysicalDrive" + driveIndex;  					//  IntPtr deviceHandle = smart.OpenDrive(driveIndex);  					HDDDialog.SelectRequestedHardDisk (hardwareNode.Hardware.Name);  					HDDDialog.Show ();  				};  				treeContextMenu.MenuItems.Add (item);  			}  			;  			if (hardwareNode.Hardware.HardwareType.ToString () == hardwareNode.RAMType ())// For the RAM memory  			 {  				MenuItem item = new MenuItem ("Properties");  				item.Click += delegate (object obj' EventArgs args) {  					RAMDialog = new RAMForm ();  					RAMDialog.Show ();  				};  				treeContextMenu.MenuItems.Add (item);  			}  			treeContextMenu.Show (treeView' new Point (m.X' m.Y));  		}  	}  	return;  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,treeView_Click,The following statement contains a magic number: if (m == null || m.Button != MouseButtons.Right)// this means left-mouseclick   {  	clicks++;  	System.Windows.Forms.MessageBox.Show ("Left mouse clicked");  }  else {  	NodeControlInfo info = treeView.GetNodeControlInfoAt (new Point (m.X' m.Y));  	treeView.SelectedNode = info.Node;  	if (info.Node != null) {  		SensorNode node = info.Node.Tag as SensorNode;  		if (node != null && node.Sensor != null) {  			treeContextMenu.MenuItems.Clear ();  			if (node.Sensor.Parameters.Length > 0) {  				MenuItem item = new MenuItem ("Parameters...");  				item.Click += delegate (object obj' EventArgs args) {  					ShowParameterForm (node.Sensor);  				};  				treeContextMenu.MenuItems.Add (item);  			}  			if (nodeTextBoxText.EditEnabled) {  				MenuItem item = new MenuItem ("Rename");  				item.Click += delegate (object obj' EventArgs args) {  					nodeTextBoxText.BeginEdit ();  				};  				treeContextMenu.MenuItems.Add (item);  			}  			if (node.IsVisible) {  				MenuItem item = new MenuItem ("Hide");  				item.Click += delegate (object obj' EventArgs args) {  					node.IsVisible = false;  				};  				treeContextMenu.MenuItems.Add (item);  			}  			else {  				MenuItem item = new MenuItem ("Unhide");  				item.Click += delegate (object obj' EventArgs args) {  					node.IsVisible = true;  				};  				treeContextMenu.MenuItems.Add (item);  			}  			treeContextMenu.MenuItems.Add (new MenuItem ("-"));  			{  				MenuItem item = new MenuItem ("Show in Tray");  				item.Checked = systemTray.Contains (node.Sensor);  				item.Click += delegate (object obj' EventArgs args) {  					if (item.Checked)  						systemTray.Remove (node.Sensor);  					else  						systemTray.Add (node.Sensor' true);  				};  				treeContextMenu.MenuItems.Add (item);  			}  			if (gadget != null) {  				MenuItem item = new MenuItem ("Show in Gadget");  				item.Checked = gadget.Contains (node.Sensor);  				item.Click += delegate (object obj' EventArgs args) {  					if (item.Checked) {  						gadget.Remove (node.Sensor);  					}  					else {  						gadget.Add (node.Sensor);  					}  				};  				treeContextMenu.MenuItems.Add (item);  			}  			if (node.Sensor.Control != null) {  				treeContextMenu.MenuItems.Add (new MenuItem ("-"));  				IControl control = node.Sensor.Control;  				MenuItem controlItem = new MenuItem ("Control");  				MenuItem defaultItem = new MenuItem ("Default");  				defaultItem.Checked = control.ControlMode == ControlMode.Default;  				controlItem.MenuItems.Add (defaultItem);  				defaultItem.Click += delegate (object obj' EventArgs args) {  					control.SetDefault ();  				};  				MenuItem manualItem = new MenuItem ("Manual");  				controlItem.MenuItems.Add (manualItem);  				manualItem.Checked = control.ControlMode == ControlMode.Software;  				for (int i = 0; i <= 100; i += 5) {  					if (i <= control.MaxSoftwareValue && i >= control.MinSoftwareValue) {  						MenuItem item = new MenuItem (i + " %");  						item.RadioCheck = true;  						manualItem.MenuItems.Add (item);  						item.Checked = control.ControlMode == ControlMode.Software && Math.Round (control.SoftwareValue) == i;  						int softwareValue = i;  						item.Click += delegate (object obj' EventArgs args) {  							control.SetSoftware (softwareValue);  						};  					}  				}  				treeContextMenu.MenuItems.Add (controlItem);  			}  			treeContextMenu.Show (treeView' new Point (m.X' m.Y));  		}  		HardwareNode hardwareNode = info.Node.Tag as HardwareNode;  		if (hardwareNode != null && hardwareNode.Hardware != null) {  			treeContextMenu.MenuItems.Clear ();  			if (nodeTextBoxText.EditEnabled) {  				MenuItem item = new MenuItem ("Rename");  				item.Click += delegate (object obj' EventArgs args) {  					nodeTextBoxText.BeginEdit ();  				};  				treeContextMenu.MenuItems.Add (item);  			}  			if (hardwareNode.Hardware.HardwareType.ToString () == hardwareNode.HDDType ())// For the HDD's in the system  			 {  				MenuItem item = new MenuItem ("Properties");  				item.Click += delegate (object obj' EventArgs args) {  					// Harddrive with Identifier /hdd/7 is at the top of the list and harddrive with identifier /hdd/0 is at the bottom of the list!!!  					string[] hddInfo =  {    					};  					List<HardwareNode> hardWareNodes = new List<HardwareNode> ();  					foreach (Node n in root.Nodes) {  						HardwareNode HN = n as HardwareNode;  						if (HN.Hardware.HardwareType.ToString () == hardwareNode.HDDType ()) {  							totalHarddriveCount++;  						}  					}  					HDDDialog = new HDDForm ();  					int driveIndex = Convert.ToInt32 (hardwareNode.Hardware.Identifier.ToString ().Replace ("/hdd/"' ""));  					string harddriveAddress = @"\\.\PhysicalDrive" + driveIndex;  					//  IntPtr deviceHandle = smart.OpenDrive(driveIndex);  					HDDDialog.SelectRequestedHardDisk (hardwareNode.Hardware.Name);  					HDDDialog.Show ();  				};  				treeContextMenu.MenuItems.Add (item);  			}  			;  			if (hardwareNode.Hardware.HardwareType.ToString () == hardwareNode.RAMType ())// For the RAM memory  			 {  				MenuItem item = new MenuItem ("Properties");  				item.Click += delegate (object obj' EventArgs args) {  					RAMDialog = new RAMForm ();  					RAMDialog.Show ();  				};  				treeContextMenu.MenuItems.Add (item);  			}  			treeContextMenu.Show (treeView' new Point (m.X' m.Y));  		}  	}  	return;  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,treeView_Click,The following statement contains a magic number: if (info.Node != null) {  	SensorNode node = info.Node.Tag as SensorNode;  	if (node != null && node.Sensor != null) {  		treeContextMenu.MenuItems.Clear ();  		if (node.Sensor.Parameters.Length > 0) {  			MenuItem item = new MenuItem ("Parameters...");  			item.Click += delegate (object obj' EventArgs args) {  				ShowParameterForm (node.Sensor);  			};  			treeContextMenu.MenuItems.Add (item);  		}  		if (nodeTextBoxText.EditEnabled) {  			MenuItem item = new MenuItem ("Rename");  			item.Click += delegate (object obj' EventArgs args) {  				nodeTextBoxText.BeginEdit ();  			};  			treeContextMenu.MenuItems.Add (item);  		}  		if (node.IsVisible) {  			MenuItem item = new MenuItem ("Hide");  			item.Click += delegate (object obj' EventArgs args) {  				node.IsVisible = false;  			};  			treeContextMenu.MenuItems.Add (item);  		}  		else {  			MenuItem item = new MenuItem ("Unhide");  			item.Click += delegate (object obj' EventArgs args) {  				node.IsVisible = true;  			};  			treeContextMenu.MenuItems.Add (item);  		}  		treeContextMenu.MenuItems.Add (new MenuItem ("-"));  		{  			MenuItem item = new MenuItem ("Show in Tray");  			item.Checked = systemTray.Contains (node.Sensor);  			item.Click += delegate (object obj' EventArgs args) {  				if (item.Checked)  					systemTray.Remove (node.Sensor);  				else  					systemTray.Add (node.Sensor' true);  			};  			treeContextMenu.MenuItems.Add (item);  		}  		if (gadget != null) {  			MenuItem item = new MenuItem ("Show in Gadget");  			item.Checked = gadget.Contains (node.Sensor);  			item.Click += delegate (object obj' EventArgs args) {  				if (item.Checked) {  					gadget.Remove (node.Sensor);  				}  				else {  					gadget.Add (node.Sensor);  				}  			};  			treeContextMenu.MenuItems.Add (item);  		}  		if (node.Sensor.Control != null) {  			treeContextMenu.MenuItems.Add (new MenuItem ("-"));  			IControl control = node.Sensor.Control;  			MenuItem controlItem = new MenuItem ("Control");  			MenuItem defaultItem = new MenuItem ("Default");  			defaultItem.Checked = control.ControlMode == ControlMode.Default;  			controlItem.MenuItems.Add (defaultItem);  			defaultItem.Click += delegate (object obj' EventArgs args) {  				control.SetDefault ();  			};  			MenuItem manualItem = new MenuItem ("Manual");  			controlItem.MenuItems.Add (manualItem);  			manualItem.Checked = control.ControlMode == ControlMode.Software;  			for (int i = 0; i <= 100; i += 5) {  				if (i <= control.MaxSoftwareValue && i >= control.MinSoftwareValue) {  					MenuItem item = new MenuItem (i + " %");  					item.RadioCheck = true;  					manualItem.MenuItems.Add (item);  					item.Checked = control.ControlMode == ControlMode.Software && Math.Round (control.SoftwareValue) == i;  					int softwareValue = i;  					item.Click += delegate (object obj' EventArgs args) {  						control.SetSoftware (softwareValue);  					};  				}  			}  			treeContextMenu.MenuItems.Add (controlItem);  		}  		treeContextMenu.Show (treeView' new Point (m.X' m.Y));  	}  	HardwareNode hardwareNode = info.Node.Tag as HardwareNode;  	if (hardwareNode != null && hardwareNode.Hardware != null) {  		treeContextMenu.MenuItems.Clear ();  		if (nodeTextBoxText.EditEnabled) {  			MenuItem item = new MenuItem ("Rename");  			item.Click += delegate (object obj' EventArgs args) {  				nodeTextBoxText.BeginEdit ();  			};  			treeContextMenu.MenuItems.Add (item);  		}  		if (hardwareNode.Hardware.HardwareType.ToString () == hardwareNode.HDDType ())// For the HDD's in the system  		 {  			MenuItem item = new MenuItem ("Properties");  			item.Click += delegate (object obj' EventArgs args) {  				// Harddrive with Identifier /hdd/7 is at the top of the list and harddrive with identifier /hdd/0 is at the bottom of the list!!!  				string[] hddInfo =  {    				};  				List<HardwareNode> hardWareNodes = new List<HardwareNode> ();  				foreach (Node n in root.Nodes) {  					HardwareNode HN = n as HardwareNode;  					if (HN.Hardware.HardwareType.ToString () == hardwareNode.HDDType ()) {  						totalHarddriveCount++;  					}  				}  				HDDDialog = new HDDForm ();  				int driveIndex = Convert.ToInt32 (hardwareNode.Hardware.Identifier.ToString ().Replace ("/hdd/"' ""));  				string harddriveAddress = @"\\.\PhysicalDrive" + driveIndex;  				//  IntPtr deviceHandle = smart.OpenDrive(driveIndex);  				HDDDialog.SelectRequestedHardDisk (hardwareNode.Hardware.Name);  				HDDDialog.Show ();  			};  			treeContextMenu.MenuItems.Add (item);  		}  		;  		if (hardwareNode.Hardware.HardwareType.ToString () == hardwareNode.RAMType ())// For the RAM memory  		 {  			MenuItem item = new MenuItem ("Properties");  			item.Click += delegate (object obj' EventArgs args) {  				RAMDialog = new RAMForm ();  				RAMDialog.Show ();  			};  			treeContextMenu.MenuItems.Add (item);  		}  		treeContextMenu.Show (treeView' new Point (m.X' m.Y));  	}  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,treeView_Click,The following statement contains a magic number: if (info.Node != null) {  	SensorNode node = info.Node.Tag as SensorNode;  	if (node != null && node.Sensor != null) {  		treeContextMenu.MenuItems.Clear ();  		if (node.Sensor.Parameters.Length > 0) {  			MenuItem item = new MenuItem ("Parameters...");  			item.Click += delegate (object obj' EventArgs args) {  				ShowParameterForm (node.Sensor);  			};  			treeContextMenu.MenuItems.Add (item);  		}  		if (nodeTextBoxText.EditEnabled) {  			MenuItem item = new MenuItem ("Rename");  			item.Click += delegate (object obj' EventArgs args) {  				nodeTextBoxText.BeginEdit ();  			};  			treeContextMenu.MenuItems.Add (item);  		}  		if (node.IsVisible) {  			MenuItem item = new MenuItem ("Hide");  			item.Click += delegate (object obj' EventArgs args) {  				node.IsVisible = false;  			};  			treeContextMenu.MenuItems.Add (item);  		}  		else {  			MenuItem item = new MenuItem ("Unhide");  			item.Click += delegate (object obj' EventArgs args) {  				node.IsVisible = true;  			};  			treeContextMenu.MenuItems.Add (item);  		}  		treeContextMenu.MenuItems.Add (new MenuItem ("-"));  		{  			MenuItem item = new MenuItem ("Show in Tray");  			item.Checked = systemTray.Contains (node.Sensor);  			item.Click += delegate (object obj' EventArgs args) {  				if (item.Checked)  					systemTray.Remove (node.Sensor);  				else  					systemTray.Add (node.Sensor' true);  			};  			treeContextMenu.MenuItems.Add (item);  		}  		if (gadget != null) {  			MenuItem item = new MenuItem ("Show in Gadget");  			item.Checked = gadget.Contains (node.Sensor);  			item.Click += delegate (object obj' EventArgs args) {  				if (item.Checked) {  					gadget.Remove (node.Sensor);  				}  				else {  					gadget.Add (node.Sensor);  				}  			};  			treeContextMenu.MenuItems.Add (item);  		}  		if (node.Sensor.Control != null) {  			treeContextMenu.MenuItems.Add (new MenuItem ("-"));  			IControl control = node.Sensor.Control;  			MenuItem controlItem = new MenuItem ("Control");  			MenuItem defaultItem = new MenuItem ("Default");  			defaultItem.Checked = control.ControlMode == ControlMode.Default;  			controlItem.MenuItems.Add (defaultItem);  			defaultItem.Click += delegate (object obj' EventArgs args) {  				control.SetDefault ();  			};  			MenuItem manualItem = new MenuItem ("Manual");  			controlItem.MenuItems.Add (manualItem);  			manualItem.Checked = control.ControlMode == ControlMode.Software;  			for (int i = 0; i <= 100; i += 5) {  				if (i <= control.MaxSoftwareValue && i >= control.MinSoftwareValue) {  					MenuItem item = new MenuItem (i + " %");  					item.RadioCheck = true;  					manualItem.MenuItems.Add (item);  					item.Checked = control.ControlMode == ControlMode.Software && Math.Round (control.SoftwareValue) == i;  					int softwareValue = i;  					item.Click += delegate (object obj' EventArgs args) {  						control.SetSoftware (softwareValue);  					};  				}  			}  			treeContextMenu.MenuItems.Add (controlItem);  		}  		treeContextMenu.Show (treeView' new Point (m.X' m.Y));  	}  	HardwareNode hardwareNode = info.Node.Tag as HardwareNode;  	if (hardwareNode != null && hardwareNode.Hardware != null) {  		treeContextMenu.MenuItems.Clear ();  		if (nodeTextBoxText.EditEnabled) {  			MenuItem item = new MenuItem ("Rename");  			item.Click += delegate (object obj' EventArgs args) {  				nodeTextBoxText.BeginEdit ();  			};  			treeContextMenu.MenuItems.Add (item);  		}  		if (hardwareNode.Hardware.HardwareType.ToString () == hardwareNode.HDDType ())// For the HDD's in the system  		 {  			MenuItem item = new MenuItem ("Properties");  			item.Click += delegate (object obj' EventArgs args) {  				// Harddrive with Identifier /hdd/7 is at the top of the list and harddrive with identifier /hdd/0 is at the bottom of the list!!!  				string[] hddInfo =  {    				};  				List<HardwareNode> hardWareNodes = new List<HardwareNode> ();  				foreach (Node n in root.Nodes) {  					HardwareNode HN = n as HardwareNode;  					if (HN.Hardware.HardwareType.ToString () == hardwareNode.HDDType ()) {  						totalHarddriveCount++;  					}  				}  				HDDDialog = new HDDForm ();  				int driveIndex = Convert.ToInt32 (hardwareNode.Hardware.Identifier.ToString ().Replace ("/hdd/"' ""));  				string harddriveAddress = @"\\.\PhysicalDrive" + driveIndex;  				//  IntPtr deviceHandle = smart.OpenDrive(driveIndex);  				HDDDialog.SelectRequestedHardDisk (hardwareNode.Hardware.Name);  				HDDDialog.Show ();  			};  			treeContextMenu.MenuItems.Add (item);  		}  		;  		if (hardwareNode.Hardware.HardwareType.ToString () == hardwareNode.RAMType ())// For the RAM memory  		 {  			MenuItem item = new MenuItem ("Properties");  			item.Click += delegate (object obj' EventArgs args) {  				RAMDialog = new RAMForm ();  				RAMDialog.Show ();  			};  			treeContextMenu.MenuItems.Add (item);  		}  		treeContextMenu.Show (treeView' new Point (m.X' m.Y));  	}  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,treeView_Click,The following statement contains a magic number: if (node != null && node.Sensor != null) {  	treeContextMenu.MenuItems.Clear ();  	if (node.Sensor.Parameters.Length > 0) {  		MenuItem item = new MenuItem ("Parameters...");  		item.Click += delegate (object obj' EventArgs args) {  			ShowParameterForm (node.Sensor);  		};  		treeContextMenu.MenuItems.Add (item);  	}  	if (nodeTextBoxText.EditEnabled) {  		MenuItem item = new MenuItem ("Rename");  		item.Click += delegate (object obj' EventArgs args) {  			nodeTextBoxText.BeginEdit ();  		};  		treeContextMenu.MenuItems.Add (item);  	}  	if (node.IsVisible) {  		MenuItem item = new MenuItem ("Hide");  		item.Click += delegate (object obj' EventArgs args) {  			node.IsVisible = false;  		};  		treeContextMenu.MenuItems.Add (item);  	}  	else {  		MenuItem item = new MenuItem ("Unhide");  		item.Click += delegate (object obj' EventArgs args) {  			node.IsVisible = true;  		};  		treeContextMenu.MenuItems.Add (item);  	}  	treeContextMenu.MenuItems.Add (new MenuItem ("-"));  	{  		MenuItem item = new MenuItem ("Show in Tray");  		item.Checked = systemTray.Contains (node.Sensor);  		item.Click += delegate (object obj' EventArgs args) {  			if (item.Checked)  				systemTray.Remove (node.Sensor);  			else  				systemTray.Add (node.Sensor' true);  		};  		treeContextMenu.MenuItems.Add (item);  	}  	if (gadget != null) {  		MenuItem item = new MenuItem ("Show in Gadget");  		item.Checked = gadget.Contains (node.Sensor);  		item.Click += delegate (object obj' EventArgs args) {  			if (item.Checked) {  				gadget.Remove (node.Sensor);  			}  			else {  				gadget.Add (node.Sensor);  			}  		};  		treeContextMenu.MenuItems.Add (item);  	}  	if (node.Sensor.Control != null) {  		treeContextMenu.MenuItems.Add (new MenuItem ("-"));  		IControl control = node.Sensor.Control;  		MenuItem controlItem = new MenuItem ("Control");  		MenuItem defaultItem = new MenuItem ("Default");  		defaultItem.Checked = control.ControlMode == ControlMode.Default;  		controlItem.MenuItems.Add (defaultItem);  		defaultItem.Click += delegate (object obj' EventArgs args) {  			control.SetDefault ();  		};  		MenuItem manualItem = new MenuItem ("Manual");  		controlItem.MenuItems.Add (manualItem);  		manualItem.Checked = control.ControlMode == ControlMode.Software;  		for (int i = 0; i <= 100; i += 5) {  			if (i <= control.MaxSoftwareValue && i >= control.MinSoftwareValue) {  				MenuItem item = new MenuItem (i + " %");  				item.RadioCheck = true;  				manualItem.MenuItems.Add (item);  				item.Checked = control.ControlMode == ControlMode.Software && Math.Round (control.SoftwareValue) == i;  				int softwareValue = i;  				item.Click += delegate (object obj' EventArgs args) {  					control.SetSoftware (softwareValue);  				};  			}  		}  		treeContextMenu.MenuItems.Add (controlItem);  	}  	treeContextMenu.Show (treeView' new Point (m.X' m.Y));  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,treeView_Click,The following statement contains a magic number: if (node != null && node.Sensor != null) {  	treeContextMenu.MenuItems.Clear ();  	if (node.Sensor.Parameters.Length > 0) {  		MenuItem item = new MenuItem ("Parameters...");  		item.Click += delegate (object obj' EventArgs args) {  			ShowParameterForm (node.Sensor);  		};  		treeContextMenu.MenuItems.Add (item);  	}  	if (nodeTextBoxText.EditEnabled) {  		MenuItem item = new MenuItem ("Rename");  		item.Click += delegate (object obj' EventArgs args) {  			nodeTextBoxText.BeginEdit ();  		};  		treeContextMenu.MenuItems.Add (item);  	}  	if (node.IsVisible) {  		MenuItem item = new MenuItem ("Hide");  		item.Click += delegate (object obj' EventArgs args) {  			node.IsVisible = false;  		};  		treeContextMenu.MenuItems.Add (item);  	}  	else {  		MenuItem item = new MenuItem ("Unhide");  		item.Click += delegate (object obj' EventArgs args) {  			node.IsVisible = true;  		};  		treeContextMenu.MenuItems.Add (item);  	}  	treeContextMenu.MenuItems.Add (new MenuItem ("-"));  	{  		MenuItem item = new MenuItem ("Show in Tray");  		item.Checked = systemTray.Contains (node.Sensor);  		item.Click += delegate (object obj' EventArgs args) {  			if (item.Checked)  				systemTray.Remove (node.Sensor);  			else  				systemTray.Add (node.Sensor' true);  		};  		treeContextMenu.MenuItems.Add (item);  	}  	if (gadget != null) {  		MenuItem item = new MenuItem ("Show in Gadget");  		item.Checked = gadget.Contains (node.Sensor);  		item.Click += delegate (object obj' EventArgs args) {  			if (item.Checked) {  				gadget.Remove (node.Sensor);  			}  			else {  				gadget.Add (node.Sensor);  			}  		};  		treeContextMenu.MenuItems.Add (item);  	}  	if (node.Sensor.Control != null) {  		treeContextMenu.MenuItems.Add (new MenuItem ("-"));  		IControl control = node.Sensor.Control;  		MenuItem controlItem = new MenuItem ("Control");  		MenuItem defaultItem = new MenuItem ("Default");  		defaultItem.Checked = control.ControlMode == ControlMode.Default;  		controlItem.MenuItems.Add (defaultItem);  		defaultItem.Click += delegate (object obj' EventArgs args) {  			control.SetDefault ();  		};  		MenuItem manualItem = new MenuItem ("Manual");  		controlItem.MenuItems.Add (manualItem);  		manualItem.Checked = control.ControlMode == ControlMode.Software;  		for (int i = 0; i <= 100; i += 5) {  			if (i <= control.MaxSoftwareValue && i >= control.MinSoftwareValue) {  				MenuItem item = new MenuItem (i + " %");  				item.RadioCheck = true;  				manualItem.MenuItems.Add (item);  				item.Checked = control.ControlMode == ControlMode.Software && Math.Round (control.SoftwareValue) == i;  				int softwareValue = i;  				item.Click += delegate (object obj' EventArgs args) {  					control.SetSoftware (softwareValue);  				};  			}  		}  		treeContextMenu.MenuItems.Add (controlItem);  	}  	treeContextMenu.Show (treeView' new Point (m.X' m.Y));  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,treeView_Click,The following statement contains a magic number: if (node.Sensor.Control != null) {  	treeContextMenu.MenuItems.Add (new MenuItem ("-"));  	IControl control = node.Sensor.Control;  	MenuItem controlItem = new MenuItem ("Control");  	MenuItem defaultItem = new MenuItem ("Default");  	defaultItem.Checked = control.ControlMode == ControlMode.Default;  	controlItem.MenuItems.Add (defaultItem);  	defaultItem.Click += delegate (object obj' EventArgs args) {  		control.SetDefault ();  	};  	MenuItem manualItem = new MenuItem ("Manual");  	controlItem.MenuItems.Add (manualItem);  	manualItem.Checked = control.ControlMode == ControlMode.Software;  	for (int i = 0; i <= 100; i += 5) {  		if (i <= control.MaxSoftwareValue && i >= control.MinSoftwareValue) {  			MenuItem item = new MenuItem (i + " %");  			item.RadioCheck = true;  			manualItem.MenuItems.Add (item);  			item.Checked = control.ControlMode == ControlMode.Software && Math.Round (control.SoftwareValue) == i;  			int softwareValue = i;  			item.Click += delegate (object obj' EventArgs args) {  				control.SetSoftware (softwareValue);  			};  		}  	}  	treeContextMenu.MenuItems.Add (controlItem);  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,treeView_Click,The following statement contains a magic number: if (node.Sensor.Control != null) {  	treeContextMenu.MenuItems.Add (new MenuItem ("-"));  	IControl control = node.Sensor.Control;  	MenuItem controlItem = new MenuItem ("Control");  	MenuItem defaultItem = new MenuItem ("Default");  	defaultItem.Checked = control.ControlMode == ControlMode.Default;  	controlItem.MenuItems.Add (defaultItem);  	defaultItem.Click += delegate (object obj' EventArgs args) {  		control.SetDefault ();  	};  	MenuItem manualItem = new MenuItem ("Manual");  	controlItem.MenuItems.Add (manualItem);  	manualItem.Checked = control.ControlMode == ControlMode.Software;  	for (int i = 0; i <= 100; i += 5) {  		if (i <= control.MaxSoftwareValue && i >= control.MinSoftwareValue) {  			MenuItem item = new MenuItem (i + " %");  			item.RadioCheck = true;  			manualItem.MenuItems.Add (item);  			item.Checked = control.ControlMode == ControlMode.Software && Math.Round (control.SoftwareValue) == i;  			int softwareValue = i;  			item.Click += delegate (object obj' EventArgs args) {  				control.SetSoftware (softwareValue);  			};  		}  	}  	treeContextMenu.MenuItems.Add (controlItem);  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,treeView_Click,The following statement contains a magic number: for (int i = 0; i <= 100; i += 5) {  	if (i <= control.MaxSoftwareValue && i >= control.MinSoftwareValue) {  		MenuItem item = new MenuItem (i + " %");  		item.RadioCheck = true;  		manualItem.MenuItems.Add (item);  		item.Checked = control.ControlMode == ControlMode.Software && Math.Round (control.SoftwareValue) == i;  		int softwareValue = i;  		item.Click += delegate (object obj' EventArgs args) {  			control.SetSoftware (softwareValue);  		};  	}  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,treeView_Click,The following statement contains a magic number: for (int i = 0; i <= 100; i += 5) {  	if (i <= control.MaxSoftwareValue && i >= control.MinSoftwareValue) {  		MenuItem item = new MenuItem (i + " %");  		item.RadioCheck = true;  		manualItem.MenuItems.Add (item);  		item.Checked = control.ControlMode == ControlMode.Software && Math.Round (control.SoftwareValue) == i;  		int softwareValue = i;  		item.Click += delegate (object obj' EventArgs args) {  			control.SetSoftware (softwareValue);  		};  	}  }  
Magic Number,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,treeView_Click,The following statement contains a magic number: i += 5
Magic Number,OpenHardwareMonitor.GUI,SensorNode,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNode.cs,ValueToString,The following statement contains a magic number: if (value.HasValue) {  	if (sensor.SensorType == SensorType.Temperature && unitManager.TemperatureUnit == TemperatureUnit.Fahrenheit) {  		return string.Format ("{0:F1} °F"' value * 1.8 + 32);  	}  	else {  		return string.Format (format' value);  	}  }  else  	return "-";  
Magic Number,OpenHardwareMonitor.GUI,SensorNode,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNode.cs,ValueToString,The following statement contains a magic number: if (value.HasValue) {  	if (sensor.SensorType == SensorType.Temperature && unitManager.TemperatureUnit == TemperatureUnit.Fahrenheit) {  		return string.Format ("{0:F1} °F"' value * 1.8 + 32);  	}  	else {  		return string.Format (format' value);  	}  }  else  	return "-";  
Magic Number,OpenHardwareMonitor.GUI,SensorNode,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNode.cs,ValueToString,The following statement contains a magic number: if (sensor.SensorType == SensorType.Temperature && unitManager.TemperatureUnit == TemperatureUnit.Fahrenheit) {  	return string.Format ("{0:F1} °F"' value * 1.8 + 32);  }  else {  	return string.Format (format' value);  }  
Magic Number,OpenHardwareMonitor.GUI,SensorNode,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNode.cs,ValueToString,The following statement contains a magic number: if (sensor.SensorType == SensorType.Temperature && unitManager.TemperatureUnit == TemperatureUnit.Fahrenheit) {  	return string.Format ("{0:F1} °F"' value * 1.8 + 32);  }  else {  	return string.Format (format' value);  }  
Magic Number,OpenHardwareMonitor.GUI,SensorNode,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNode.cs,ValueToString,The following statement contains a magic number: return string.Format ("{0:F1} °F"' value * 1.8 + 32);  
Magic Number,OpenHardwareMonitor.GUI,SensorNode,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNode.cs,ValueToString,The following statement contains a magic number: return string.Format ("{0:F1} °F"' value * 1.8 + 32);  
Magic Number,OpenHardwareMonitor.Utilities,HttpServer,C:\repos\timkoers_OpenHardwareMonitor\Utilities\HttpServer.cs,ServeResourceFile,The following statement contains a magic number: for (int i = 0; i < names.Length; i++) {  	if (names [i].Replace ('\\'' '.') == name) {  		using (Stream stream = Assembly.GetExecutingAssembly ().GetManifestResourceStream (names [i])) {  			response.ContentType = GetcontentType ("." + ext);  			response.ContentLength64 = stream.Length;  			byte[] buffer = new byte[512 * 1024];  			int len;  			try {  				Stream output = response.OutputStream;  				while ((len = stream.Read (buffer' 0' buffer.Length)) > 0) {  					output.Write (buffer' 0' len);  				}  				output.Flush ();  				output.Close ();  				response.Close ();  			}  			catch (HttpListenerException) {  			}  			catch (InvalidOperationException) {  			}  			return;  		}  	}  }  
Magic Number,OpenHardwareMonitor.Utilities,HttpServer,C:\repos\timkoers_OpenHardwareMonitor\Utilities\HttpServer.cs,ServeResourceFile,The following statement contains a magic number: for (int i = 0; i < names.Length; i++) {  	if (names [i].Replace ('\\'' '.') == name) {  		using (Stream stream = Assembly.GetExecutingAssembly ().GetManifestResourceStream (names [i])) {  			response.ContentType = GetcontentType ("." + ext);  			response.ContentLength64 = stream.Length;  			byte[] buffer = new byte[512 * 1024];  			int len;  			try {  				Stream output = response.OutputStream;  				while ((len = stream.Read (buffer' 0' buffer.Length)) > 0) {  					output.Write (buffer' 0' len);  				}  				output.Flush ();  				output.Close ();  				response.Close ();  			}  			catch (HttpListenerException) {  			}  			catch (InvalidOperationException) {  			}  			return;  		}  	}  }  
Magic Number,OpenHardwareMonitor.Utilities,HttpServer,C:\repos\timkoers_OpenHardwareMonitor\Utilities\HttpServer.cs,ServeResourceFile,The following statement contains a magic number: if (names [i].Replace ('\\'' '.') == name) {  	using (Stream stream = Assembly.GetExecutingAssembly ().GetManifestResourceStream (names [i])) {  		response.ContentType = GetcontentType ("." + ext);  		response.ContentLength64 = stream.Length;  		byte[] buffer = new byte[512 * 1024];  		int len;  		try {  			Stream output = response.OutputStream;  			while ((len = stream.Read (buffer' 0' buffer.Length)) > 0) {  				output.Write (buffer' 0' len);  			}  			output.Flush ();  			output.Close ();  			response.Close ();  		}  		catch (HttpListenerException) {  		}  		catch (InvalidOperationException) {  		}  		return;  	}  }  
Magic Number,OpenHardwareMonitor.Utilities,HttpServer,C:\repos\timkoers_OpenHardwareMonitor\Utilities\HttpServer.cs,ServeResourceFile,The following statement contains a magic number: if (names [i].Replace ('\\'' '.') == name) {  	using (Stream stream = Assembly.GetExecutingAssembly ().GetManifestResourceStream (names [i])) {  		response.ContentType = GetcontentType ("." + ext);  		response.ContentLength64 = stream.Length;  		byte[] buffer = new byte[512 * 1024];  		int len;  		try {  			Stream output = response.OutputStream;  			while ((len = stream.Read (buffer' 0' buffer.Length)) > 0) {  				output.Write (buffer' 0' len);  			}  			output.Flush ();  			output.Close ();  			response.Close ();  		}  		catch (HttpListenerException) {  		}  		catch (InvalidOperationException) {  		}  		return;  	}  }  
Magic Number,OpenHardwareMonitor.Utilities,HttpServer,C:\repos\timkoers_OpenHardwareMonitor\Utilities\HttpServer.cs,ServeResourceFile,The following statement contains a magic number: using (Stream stream = Assembly.GetExecutingAssembly ().GetManifestResourceStream (names [i])) {  	response.ContentType = GetcontentType ("." + ext);  	response.ContentLength64 = stream.Length;  	byte[] buffer = new byte[512 * 1024];  	int len;  	try {  		Stream output = response.OutputStream;  		while ((len = stream.Read (buffer' 0' buffer.Length)) > 0) {  			output.Write (buffer' 0' len);  		}  		output.Flush ();  		output.Close ();  		response.Close ();  	}  	catch (HttpListenerException) {  	}  	catch (InvalidOperationException) {  	}  	return;  }  
Magic Number,OpenHardwareMonitor.Utilities,HttpServer,C:\repos\timkoers_OpenHardwareMonitor\Utilities\HttpServer.cs,ServeResourceFile,The following statement contains a magic number: using (Stream stream = Assembly.GetExecutingAssembly ().GetManifestResourceStream (names [i])) {  	response.ContentType = GetcontentType ("." + ext);  	response.ContentLength64 = stream.Length;  	byte[] buffer = new byte[512 * 1024];  	int len;  	try {  		Stream output = response.OutputStream;  		while ((len = stream.Read (buffer' 0' buffer.Length)) > 0) {  			output.Write (buffer' 0' len);  		}  		output.Flush ();  		output.Close ();  		response.Close ();  	}  	catch (HttpListenerException) {  	}  	catch (InvalidOperationException) {  	}  	return;  }  
Magic Number,OpenHardwareMonitor.Utilities,HttpServer,C:\repos\timkoers_OpenHardwareMonitor\Utilities\HttpServer.cs,ServeResourceFile,The following statement contains a magic number: response.StatusCode = 404;  
Magic Number,OpenHardwareMonitor.Utilities,HttpServer,C:\repos\timkoers_OpenHardwareMonitor\Utilities\HttpServer.cs,ServeResourceImage,The following statement contains a magic number: response.StatusCode = 404;  
Magic Number,OpenHardwareMonitor.Utilities,Logger,C:\repos\timkoers_OpenHardwareMonitor\Utilities\Logger.cs,Log,The following statement contains a magic number: if (lastLoggedTime + LoggingInterval - new TimeSpan (5000000) > now)  	return;  
Missing Default,OpenHardwareMonitor.GUI,SensorGadget,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorGadget.cs,OnPaint,The following switch statement is missing a default case: switch (sensor.SensorType) {  case SensorType.Voltage:  	format = "{0:F3} V";  	break;  case SensorType.Clock:  	format = "{0:F0} MHz";  	break;  case SensorType.Temperature:  	format = "{0:F1} °C";  	break;  case SensorType.Fan:  	format = "{0:F0} RPM";  	break;  case SensorType.Flow:  	format = "{0:F0} L/h";  	break;  case SensorType.Power:  	format = "{0:F1} W";  	break;  case SensorType.Data:  	format = "{0:F1} GB";  	break;  case SensorType.Factor:  	format = "{0:F3}";  	break;  }  
Missing Default,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,GetString,The following switch statement is missing a default case: switch (sensor.SensorType) {  case SensorType.Voltage:  	return string.Format ("{0:F1}"' sensor.Value);  case SensorType.Clock:  	return string.Format ("{0:F1}"' 1e-3f * sensor.Value);  case SensorType.Load:  	return string.Format ("{0:F0}"' sensor.Value);  case SensorType.Temperature:  	if (unitManager.TemperatureUnit == TemperatureUnit.Fahrenheit)  		return string.Format ("{0:F0}"' UnitManager.CelsiusToFahrenheit (sensor.Value));  	else  		return string.Format ("{0:F0}"' sensor.Value);  case SensorType.Fan:  	return string.Format ("{0:F1}"' 1e-3f * sensor.Value);  case SensorType.Flow:  	return string.Format ("{0:F1}"' 1e-3f * sensor.Value);  case SensorType.Control:  	return string.Format ("{0:F0}"' sensor.Value);  case SensorType.Level:  	return string.Format ("{0:F0}"' sensor.Value);  case SensorType.Power:  	return string.Format ("{0:F0}"' sensor.Value);  case SensorType.Data:  	return string.Format ("{0:F0}"' sensor.Value);  case SensorType.Factor:  	return string.Format ("{0:F1}"' sensor.Value);  }  
Missing Default,OpenHardwareMonitor.GUI,SensorNotifyIcon,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNotifyIcon.cs,Update,The following switch statement is missing a default case: switch (sensor.SensorType) {  case SensorType.Voltage:  	format = "\n{0}: {1:F2} V";  	break;  case SensorType.Clock:  	format = "\n{0}: {1:F0} MHz";  	break;  case SensorType.Load:  	format = "\n{0}: {1:F1} %";  	break;  case SensorType.Temperature:  	format = "\n{0}: {1:F1} °C";  	break;  case SensorType.Fan:  	format = "\n{0}: {1:F0} RPM";  	break;  case SensorType.Flow:  	format = "\n{0}: {1:F0} L/h";  	break;  case SensorType.Control:  	format = "\n{0}: {1:F1} %";  	break;  case SensorType.Level:  	format = "\n{0}: {1:F1} %";  	break;  case SensorType.Power:  	format = "\n{0}: {1:F0} W";  	break;  case SensorType.Data:  	format = "\n{0}: {1:F0} GB";  	break;  case SensorType.Factor:  	format = "\n{0}: {1:F3} GB";  	break;  }  
Missing Default,OpenHardwareMonitor.GUI,TypeNode,C:\repos\timkoers_OpenHardwareMonitor\GUI\TypeNode.cs,TypeNode,The following switch statement is missing a default case: switch (sensorType) {  case SensorType.Voltage:  	this.Image = Utilities.EmbeddedResources.GetImage ("voltage.png");  	this.Text = "Voltages";  	break;  case SensorType.Clock:  	this.Image = Utilities.EmbeddedResources.GetImage ("clock.png");  	this.Text = "Clocks";  	break;  case SensorType.Load:  	this.Image = Utilities.EmbeddedResources.GetImage ("load.png");  	this.Text = "Load";  	break;  case SensorType.Temperature:  	this.Image = Utilities.EmbeddedResources.GetImage ("temperature.png");  	this.Text = "Temperatures";  	break;  case SensorType.Fan:  	this.Image = Utilities.EmbeddedResources.GetImage ("fan.png");  	this.Text = "Fans";  	break;  case SensorType.Flow:  	this.Image = Utilities.EmbeddedResources.GetImage ("flow.png");  	this.Text = "Flows";  	break;  case SensorType.Control:  	this.Image = Utilities.EmbeddedResources.GetImage ("control.png");  	this.Text = "Controls";  	break;  case SensorType.Level:  	this.Image = Utilities.EmbeddedResources.GetImage ("level.png");  	this.Text = "Levels";  	break;  case SensorType.Power:  	this.Image = Utilities.EmbeddedResources.GetImage ("power.png");  	this.Text = "Powers";  	break;  case SensorType.Data:  	this.Image = Utilities.EmbeddedResources.GetImage ("data.png");  	this.Text = "Data";  	break;  case SensorType.Factor:  	this.Image = Utilities.EmbeddedResources.GetImage ("factor.png");  	this.Text = "Factors";  	break;  }  
Missing Default,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,MainForm,The following switch statement is missing a default case: switch (loggingInterval.Value) {  case 0:  	logger.LoggingInterval = new TimeSpan (0' 0' 1);  	break;  case 1:  	logger.LoggingInterval = new TimeSpan (0' 0' 2);  	break;  case 2:  	logger.LoggingInterval = new TimeSpan (0' 0' 5);  	break;  case 3:  	logger.LoggingInterval = new TimeSpan (0' 0' 10);  	break;  case 4:  	logger.LoggingInterval = new TimeSpan (0' 0' 30);  	break;  case 5:  	logger.LoggingInterval = new TimeSpan (0' 1' 0);  	break;  case 6:  	logger.LoggingInterval = new TimeSpan (0' 2' 0);  	break;  case 7:  	logger.LoggingInterval = new TimeSpan (0' 5' 0);  	break;  case 8:  	logger.LoggingInterval = new TimeSpan (0' 10' 0);  	break;  case 9:  	logger.LoggingInterval = new TimeSpan (0' 30' 0);  	break;  case 10:  	logger.LoggingInterval = new TimeSpan (1' 0' 0);  	break;  case 11:  	logger.LoggingInterval = new TimeSpan (2' 0' 0);  	break;  case 12:  	logger.LoggingInterval = new TimeSpan (6' 0' 0);  	break;  }  
Missing Default,OpenHardwareMonitor.GUI,MainForm,C:\repos\timkoers_OpenHardwareMonitor\GUI\MainForm.cs,InitializePlotForm,The following switch statement is missing a default case: switch (plotLocation.Value) {  case 0:  	splitContainer.Panel2.Controls.Clear ();  	splitContainer.Panel2Collapsed = true;  	plotForm.Controls.Add (plotPanel);  	if (showPlot.Value && this.Visible)  		plotForm.Show ();  	break;  case 1:  	plotForm.Controls.Clear ();  	plotForm.Hide ();  	splitContainer.Orientation = Orientation.Horizontal;  	splitContainer.Panel2.Controls.Add (plotPanel);  	splitContainer.Panel2Collapsed = !showPlot.Value;  	break;  case 2:  	plotForm.Controls.Clear ();  	plotForm.Hide ();  	splitContainer.Orientation = Orientation.Vertical;  	splitContainer.Panel2.Controls.Add (plotPanel);  	splitContainer.Panel2Collapsed = !showPlot.Value;  	break;  }  
Missing Default,OpenHardwareMonitor.GUI,SensorNode,C:\repos\timkoers_OpenHardwareMonitor\GUI\SensorNode.cs,SensorNode,The following switch statement is missing a default case: switch (sensor.SensorType) {  case SensorType.Voltage:  	format = "{0:F3} V";  	break;  case SensorType.Clock:  	format = "{0:F0} MHz";  	break;  case SensorType.Load:  	format = "{0:F1} %";  	break;  case SensorType.Temperature:  	format = "{0:F1} °C";  	break;  case SensorType.Fan:  	format = "{0:F0} RPM";  	break;  case SensorType.Flow:  	format = "{0:F0} L/h";  	break;  case SensorType.Control:  	format = "{0:F1} %";  	break;  case SensorType.Level:  	format = "{0:F1} %";  	break;  case SensorType.Power:  	format = "{0:F1} W";  	break;  case SensorType.Data:  	format = "{0:F1} GB";  	break;  case SensorType.Factor:  	format = "{0:F3}";  	break;  }  
