Implementation smell,Namespace,Class,File,Method,Description
Long Method,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,CompleteTaskOrchestrationWorkItemAsync,The method has 134 lines of code.
Long Parameter List,DurableTask.ServiceBus.Common,ServiceBusUtils,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Common\ServiceBusUtils.cs,GetBrokeredMessageFromObjectAsync,The method has 7 parameters. Parameters: serializableObject' compressionSettings' messageSettings' instance' messageType' orchestrationServiceBlobStore' messageFireTime
Long Parameter List,DurableTask.ServiceBus.Common,ServiceBusUtils,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Common\ServiceBusUtils.cs,GenerateBrokeredMessageWithBlobKeyPropertyAsync,The method has 6 parameters. Parameters: stream' orchestrationServiceBlobStore' instance' messageSettings' messageFireTime' compressionType
Long Parameter List,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,ServiceBusOrchestrationService,The method has 5 parameters. Parameters: connectionString' hubName' instanceStore' blobStore' settings
Long Parameter List,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,CompleteTaskOrchestrationWorkItemAsync,The method has 7 parameters. Parameters: workItem' newOrchestrationRuntimeState' outboundMessages' orchestratorMessages' timerMessages' continuedAsNewMessage' orchestrationState
Long Parameter List,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,SafeCreateQueueAsync,The method has 6 parameters. Parameters: namespaceManager' path' requiresSessions' requiresDuplicateDetection' maxDeliveryCount' maxSizeInMegabytes
Long Parameter List,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,SafeDeleteAndCreateQueueAsync,The method has 6 parameters. Parameters: namespaceManager' path' requiresSessions' requiresDuplicateDetection' maxDeliveryCount' maxSizeInMegabytes
Long Parameter List,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,CreateQueueAsync,The method has 6 parameters. Parameters: namespaceManager' path' requiresSessions' requiresDuplicateDetection' maxDeliveryCount' maxSizeInMegabytes
Long Parameter List,DurableTask.ServiceBus.Tracking,AzureTableOrchestrationHistoryEventEntity,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableOrchestrationHistoryEventEntity.cs,AzureTableOrchestrationHistoryEventEntity,The method has 5 parameters. Parameters: instanceId' executionId' sequenceNumber' taskTimeStamp' historyEvent
Long Identifier,DurableTask.ServiceBus,ServiceBusConstants,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusConstants.cs,,The length of the parameter MaxStringLengthForAzureTableColumn is 34.
Long Identifier,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,TrySetSessionStateAsync,The length of the parameter isSessionSizeThresholdExceeded is 30.
Long Identifier,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,,The length of the parameter SessionStreamWarningSizeInBytes is 31.
Long Identifier,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,,The length of the parameter StatusPollingIntervalInSeconds is 30.
Long Identifier,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,,The length of the parameter DuplicateDetectionWindowInHours is 31.
Long Identifier,DurableTask.ServiceBus.Settings,ServiceBusMessageSettings,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Settings\ServiceBusMessageSettings.cs,ServiceBusMessageSettings,The length of the parameter messageOverflowThresholdInBytes is 31.
Long Identifier,DurableTask.ServiceBus.Settings,ServiceBusSessionSettings,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Settings\ServiceBusSessionSettings.cs,ServiceBusSessionSettings,The length of the parameter sessionOverflowThresholdInBytes is 31.
Long Identifier,DurableTask.ServiceBus.Tracking,AzureTableClient,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableClient.cs,,The length of the parameter JumpStartTableScanIntervalInDays is 32.
Long Identifier,DurableTask.ServiceBus.Tracking,AzureTableConstants,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableConstants.cs,,The length of the parameter InstanceHistoryTableNamePrefix is 30.
Long Identifier,DurableTask.ServiceBus.Tracking,AzureTableConstants,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableConstants.cs,,The length of the parameter InstanceStateCompleteDateRowPrefix is 34.
Long Identifier,DurableTask.ServiceBus.Tracking,AzureTableConstants,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableConstants.cs,,The length of the parameter PrimaryInstanceQueryExactTemplate is 33.
Long Identifier,DurableTask.ServiceBus.Tracking,AzureTableConstants,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableConstants.cs,,The length of the parameter PrimaryInstanceQueryRangeTemplate is 33.
Long Identifier,DurableTask.ServiceBus.Tracking,AzureTableConstants,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableConstants.cs,,The length of the parameter InstanceQuerySecondaryFilterTemplate is 36.
Long Identifier,DurableTask.ServiceBus.Tracking,AzureTableConstants,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableConstants.cs,,The length of the parameter InstanceQuerySecondaryFilterRangeTemplate is 41.
Long Identifier,DurableTask.ServiceBus.Tracking,AzureTableConstants,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableConstants.cs,,The length of the parameter InstanceQuerySecondaryFilterExactTemplate is 41.
Long Identifier,DurableTask.ServiceBus.Tracking,AzureTableConstants,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableConstants.cs,,The length of the parameter NameVersionQuerySecondaryFilterTemplate is 39.
Long Identifier,DurableTask.ServiceBus.Tracking,AzureTableConstants,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableConstants.cs,,The length of the parameter NameVersionQuerySecondaryFilterExactTemplate is 44.
Long Identifier,DurableTask.ServiceBus.Tracking,AzureTableConstants,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableConstants.cs,,The length of the parameter StatusQuerySecondaryFilterTemplate is 34.
Long Identifier,DurableTask.ServiceBus.Tracking,AzureTableConstants,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableConstants.cs,,The length of the parameter CreatedTimeRangeQuerySecondaryFilterTemplate is 44.
Long Identifier,DurableTask.ServiceBus.Tracking,AzureTableConstants,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableConstants.cs,,The length of the parameter CompletedTimeRangeQuerySecondaryFilterTemplate is 46.
Long Identifier,DurableTask.ServiceBus.Tracking,AzureTableConstants,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableConstants.cs,,The length of the parameter LastUpdatedTimeRangeQuerySecondaryFilterTemplate is 48.
Long Identifier,DurableTask.ServiceBus.Tracking,AzureTableInstanceStore,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableInstanceStore.cs,PurgeOrchestrationHistorySegmentAsync,The length of the parameter orchestrationStateEntitySegment is 31.
Long Identifier,DurableTask.ServiceBus.Tracking,AzureTableInstanceStore,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableInstanceStore.cs,,The length of the parameter MaxDisplayStringLengthForAzureTableColumn is 41.
Long Statement,DurableTask.ServiceBus.Common,BrokeredMessageExtensions,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Common\BrokeredMessageExtensions.cs,DeliveryLatency,The length of the statement  "            DateTime actualEnqueueTimeUtc = (!message.ScheduledEnqueueTimeUtc.IsSet()) ? message.EnqueuedTimeUtc : message.ScheduledEnqueueTimeUtc; " is 135.
Long Statement,DurableTask.ServiceBus.Common,ServiceBusUtils,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Common\ServiceBusUtils.cs,GetBrokeredMessageFromObjectAsync,The length of the statement  "            return GetBrokeredMessageFromObjectAsync(serializableObject' compressionSettings' new ServiceBusMessageSettings()' null' null' null' DateTimeUtils.MinDateTime); " is 160.
Long Statement,DurableTask.ServiceBus.Common,ServiceBusUtils,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Common\ServiceBusUtils.cs,GetBrokeredMessageFromObjectAsync,The length of the statement  "                        brokeredMessage = GenerateBrokeredMessageWithCompressionTypeProperty(compressedStream' FrameworkConstants.CompressionTypeGzipPropertyValue); " is 140.
Long Statement,DurableTask.ServiceBus.Common,ServiceBusUtils,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Common\ServiceBusUtils.cs,GetBrokeredMessageFromObjectAsync,The length of the statement  "                        brokeredMessage = await GenerateBrokeredMessageWithBlobKeyPropertyAsync(compressedStream' orchestrationServiceBlobStore' instance' messageSettings' messageFireTime' FrameworkConstants.CompressionTypeGzipPropertyValue); " is 218.
Long Statement,DurableTask.ServiceBus.Common,ServiceBusUtils,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Common\ServiceBusUtils.cs,GetBrokeredMessageFromObjectAsync,The length of the statement  "                        brokeredMessage = GenerateBrokeredMessageWithCompressionTypeProperty(rawStream' FrameworkConstants.CompressionTypeNonePropertyValue); " is 133.
Long Statement,DurableTask.ServiceBus.Common,ServiceBusUtils,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Common\ServiceBusUtils.cs,GetBrokeredMessageFromObjectAsync,The length of the statement  "                        brokeredMessage = await GenerateBrokeredMessageWithBlobKeyPropertyAsync(rawStream' orchestrationServiceBlobStore' instance' messageSettings' messageFireTime' FrameworkConstants.CompressionTypeNonePropertyValue); " is 211.
Long Statement,DurableTask.ServiceBus.Common,ServiceBusUtils,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Common\ServiceBusUtils.cs,GenerateBrokeredMessageWithBlobKeyPropertyAsync,The length of the statement  "                    $"The serialized message size {stream.Length} is larger than the supported external storage blob size {messageSettings.MessageMaxSizeInBytes}."' " is 144.
Long Statement,DurableTask.ServiceBus.Common,ServiceBusUtils,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Common\ServiceBusUtils.cs,LoadMessageStreamAsync,The length of the statement  "                throw new ArgumentException($"Failed to load compressed message from external storage with key: {blobKey}. Please provide an implementation of IServiceBusMessageStore for external storage."' nameof(orchestrationServiceBlobStore)); " is 230.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,StartAsync,The length of the statement  "            await Task.Factory.StartNew(() => this.ServiceMonitorAsync(this.cancellationTokenSource.Token)' this.cancellationTokenSource.Token); " is 132.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,StopAsync,The length of the statement  "            TraceHelper.Trace(TraceEventType.Information' "ServiceBusOrchestrationService-StatsFinal"' "Final Service Stats: {0}"' this.ServiceStats.ToString()); " is 149.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,CreateAsync,The length of the statement  "                this.SafeDeleteAndCreateQueueAsync(namespaceManager' orchestratorEntityName' true' true' Settings.MaxTaskOrchestrationDeliveryCount' Settings.MaxQueueSizeInMegabytes)' " is 167.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,CreateAsync,The length of the statement  "                this.SafeDeleteAndCreateQueueAsync(namespaceManager' workerEntityName' false' false' Settings.MaxTaskActivityDeliveryCount' Settings.MaxQueueSizeInMegabytes) " is 157.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,CreateAsync,The length of the statement  "                await this.SafeDeleteAndCreateQueueAsync(namespaceManager' trackingEntityName' true' false' Settings.MaxTrackingDeliveryCount' Settings.MaxQueueSizeInMegabytes); " is 161.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,CreateIfNotExistsAsync,The length of the statement  "                SafeCreateQueueAsync(namespaceManager' orchestratorEntityName' true' true' Settings.MaxTaskOrchestrationDeliveryCount' Settings.MaxQueueSizeInMegabytes)' " is 153.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,CreateIfNotExistsAsync,The length of the statement  "                SafeCreateQueueAsync(namespaceManager' workerEntityName' false' false' Settings.MaxTaskActivityDeliveryCount' Settings.MaxQueueSizeInMegabytes) " is 143.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,CreateIfNotExistsAsync,The length of the statement  "                await SafeCreateQueueAsync(namespaceManager' trackingEntityName' true' false' Settings.MaxTrackingDeliveryCount' Settings.MaxQueueSizeInMegabytes); " is 147.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,GetHubQueueMaxDeliveryCountsAsync,The length of the statement  "            result.Add("TaskOrchestration"' queues.Single(q => string.Equals(q.Path' orchestratorEntityName))?.MaxDeliveryCount ?? -1); " is 123.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,IsMaxMessageCountExceeded,The length of the statement  "                + ((InstanceStore != null) ? runtimeState.NewEvents.Count + 1 : 0) // one history message per new message + 1 for the orchestration " is 131.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,LockNextTaskOrchestrationWorkItemAsync,The length of the statement  "                    session.SessionId' "Receive Session Message Batch"' this.Settings.MaxRetries' Settings.IntervalBetweenRetriesSecs)).ToList(); " is 125.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,LockNextTaskOrchestrationWorkItemAsync,The length of the statement  "            ServiceBusUtils.CheckAndLogDeliveryCount(session.SessionId' newMessages' this.Settings.MaxTaskOrchestrationDeliveryCount); " is 122.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,LockNextTaskOrchestrationWorkItemAsync,The length of the statement  "                newMessages.Select(async message => await ServiceBusUtils.GetObjectFromBrokeredMessageAsync<TaskMessage>(message' this.BlobStore))); " is 132.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,LockNextTaskOrchestrationWorkItemAsync,The length of the statement  "                TraceHelper.Trace(TraceEventType.Error' "ServiceBusOrchestrationService-LockNextTaskOrchestrationWorkItem-DuplicateSessionId"' error); " is 134.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,RenewTaskOrchestrationWorkItemLockAsync,The length of the statement  "            TraceHelper.TraceSession(TraceEventType.Information' "ServiceBusOrchestrationService-RenewTaskOrchestrationWorkItem"' workItem.InstanceId' "Renew lock on orchestration session"); " is 178.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,CompleteTaskOrchestrationWorkItemAsync,The length of the statement  "                    e.Transaction.TransactionInformation.Status == TransactionStatus.Committed ? TraceEventType.Information : TraceEventType.Error' " is 127.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,CompleteTaskOrchestrationWorkItemAsync,The length of the statement  "                        this.LogSentMessages(session' "Continue as new"' new List<MessageContainer>() { new MessageContainer(continuedAsNewBrokeredMessage' null) }); " is 141.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,CompleteTaskOrchestrationWorkItemAsync,The length of the statement  "                        string allIds = string.Join(" "' sessionState.LockTokens.Values.Select(m => $"[SEQ: {m.SequenceNumber} LT: {m.LockToken}]")); " is 125.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,AbandonTaskOrchestrationWorkItemAsync,The length of the statement  "            TraceHelper.TraceSession(TraceEventType.Error' "ServiceBusOrchestrationService-AbandonTaskOrchestrationWorkItem"' workItem.InstanceId' "Abandoning {0} messages due to workitem abort"' sessionState.LockTokens.Keys.Count()); " is 222.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,AbandonTaskOrchestrationWorkItemAsync,The length of the statement  "                TraceHelper.TraceExceptionSession(TraceEventType.Warning' "ServiceBusOrchestrationService-AbandonTaskOrchestrationWorkItemError"' workItem.InstanceId' ex' "Error while aborting session"); " is 187.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,LockNextTaskActivityWorkItem,The length of the statement  "                GetFormattedLog($"New message to process: {receivedMessage.MessageId} [{receivedMessage.SequenceNumber}]' latency: {receivedMessage.DeliveryLatency()}ms")); " is 156.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,LockNextTaskActivityWorkItem,The length of the statement  "            TaskMessage taskMessage = await ServiceBusUtils.GetObjectFromBrokeredMessageAsync<TaskMessage>(receivedMessage' this.BlobStore); " is 128.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,CompleteTaskActivityWorkItemAsync,The length of the statement  "                    e.Transaction.TransactionInformation.Status == TransactionStatus.Committed ? TraceEventType.Information : TraceEventType.Error' " is 127.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,AbandonTaskActivityWorkItemAsync,The length of the statement  "            TraceHelper.Trace(TraceEventType.Information' "ServiceBusOrchestrationService-AbandonTaskActivityWorkItem"'  $"Abandoning message {workItem?.Id}"); " is 147.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,CreateTaskOrchestrationAsync,The length of the statement  "                // TODO: GetOrchestrationState is still flaky as we are fetching from 2 tables while messages are being deleted and added " is 121.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,CreateTaskOrchestrationAsync,The length of the statement  "                    throw new OrchestrationAlreadyExistsException($"An orchestration with id '{creationMessage.OrchestrationInstance.InstanceId}' already exists"); " is 143.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,CreateTaskOrchestrationAsync,The length of the statement  "                TraceHelper.Trace(TraceEventType.Warning' "ServiceBusOrchestrationService-CreateTaskOrchestration-ServiceBusError"' $"Error while adding message to ServiceBus: {ex.ToString()}"); " is 178.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,GetBrokeredMessageAsync,The length of the statement  "                brokeredMessage.MessageId = $"{executionStartedEvent.OrchestrationInstance.InstanceId}_{executionStartedEvent.OrchestrationInstance.ExecutionId}"; " is 146.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,GetOrchestrationStateAsync,The length of the statement  "            IEnumerable<OrchestrationStateInstanceEntity> states = await InstanceStore.GetOrchestrationStateAsync(instanceId' allExecutions); " is 129.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,PurgeOrchestrationHistoryAsync,The length of the statement  "            TraceHelper.Trace(TraceEventType.Information' "ServiceBusOrchestrationService-PurgeOrchestrationHistory-Start"' $"Purging orchestration instances before: {thresholdDateTimeUtc}' Type: {timeRangeFilterType}"); " is 208.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,PurgeOrchestrationHistoryAsync,The length of the statement  "                TraceHelper.Trace(TraceEventType.Information' "ServiceBusOrchestrationService-BlobsPurged"' $"Blob storage is purged."); " is 120.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,PurgeOrchestrationHistoryAsync,The length of the statement  "                TraceHelper.Trace(TraceEventType.Information' "ServiceBusOrchestrationService-HistoryPurged"' $"Purged {purgedEvents} orchestration histories"); " is 144.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,FetchTrackingWorkItemAsync,The length of the statement  "                    session.SessionId' "Receive Tracking Session Message Batch"' Settings.MaxRetries' Settings.IntervalBetweenRetriesSecs)).ToList(); " is 129.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,FetchTrackingWorkItemAsync,The length of the statement  "                GetFormattedLog($"{newMessages.Count()} new tracking messages to process: {string.Join("'"' newMessages.Select(m => m.MessageId))}")); " is 134.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,FetchTrackingWorkItemAsync,The length of the statement  "                newMessages.Select(async message => await ServiceBusUtils.GetObjectFromBrokeredMessageAsync<TaskMessage>(message' this.BlobStore))); " is 132.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,CreateTrackingMessagesAsync,The length of the statement  "            // This situation can happen due to corruption of service bus session state or if somehow first message of orchestration is not execution started " is 145.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,ProcessTrackingWorkItemAsync,The length of the statement  "                TraceEntities(TraceEventType.Critical' $"Failed to write history entity: {e}"' historyEntities' GetNormalizedWorkItemEvent); " is 124.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,GetNormalizedWorkItemEvent,The length of the statement  "                $"{message} - #{index} - Instance Id: {entity.InstanceId}' Execution Id: {entity.ExecutionId}' HistoryEvent Length: {historyEventLength}\n{serializedHistoryEvent}"); " is 165.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,GetSessionStateAsync,The length of the statement  "                return await RuntimeStateStreamConverter.RawStreamToRuntimeState(rawSessionStream' session.SessionId' orchestrationServiceBlobStore' DataConverter); " is 148.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,TrySetSessionStateAsync,The length of the statement  "            if (runtimeState.CompressedSize > SessionStreamWarningSizeInBytes && runtimeState.CompressedSize < Settings.SessionSettings.SessionOverflowThresholdInBytes) " is 156.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,TrySetSessionStateAsync,The length of the statement  "                    $"Size of session state ({runtimeState.CompressedSize}B) is nearing session size limit of {Settings.SessionSettings.SessionOverflowThresholdInBytes}B"); " is 152.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,TrySetSessionStateAsync,The length of the statement  "                string reason = $"Session state size of {runtimeState.CompressedSize} exceeded the termination threshold of {Settings.SessionSettings.SessionMaxSizeInBytes} bytes. More info: {exception.StackTrace}"; " is 199.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,TrySetSessionStateAsync,The length of the statement  "                TraceHelper.TraceSession(TraceEventType.Critical' "ServiceBusOrchestrationService-SessionSizeExceeded"' workItem.InstanceId' reason); " is 133.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,TrySetSessionStateAsync,The length of the statement  "                BrokeredMessage forcedTerminateMessage = await CreateForcedTerminateMessageAsync(runtimeState.OrchestrationInstance.InstanceId' reason); " is 136.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,ServiceMonitorAsync,The length of the statement  "                TraceHelper.Trace(TraceEventType.Information' "ServiceBusOrchestrationService-ServiceStats"' "Service Stats: {0}"' this.ServiceStats.ToString()); " is 145.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,ServiceMonitorAsync,The length of the statement  "                TraceHelper.Trace(TraceEventType.Information' "ServiceBusOrchestrationService-ServiceStats-Active"' "Active Session and Message Stats: Messages: {0}' Sessions: {1}"' orchestrationMessages.Count' orchestrationSessions.Count); " is 224.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,SafeCreateQueueAsync,The length of the statement  "                await CreateQueueAsync(namespaceManager' path' requiresSessions' requiresDuplicateDetection' maxDeliveryCount' maxSizeInMegabytes); " is 131.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,SafeDeleteAndCreateQueueAsync,The length of the statement  "            await SafeCreateQueueAsync(namespaceManager' path' requiresSessions' requiresDuplicateDetection' maxDeliveryCount' maxSizeInMegabytes); " is 135.
Long Statement,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,CreateQueueAsync,The length of the statement  "                throw new ArgumentException($"The specified value {maxSizeInMegabytes} is invalid for the maximum queue size in megabytes.\r\nIt must be one of the following values:\r\n{string.Join(";"' ValidQueueSizes)}"' nameof(maxSizeInMegabytes)); " is 235.
Long Statement,DurableTask.ServiceBus.Tracking,AzureTableClient,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableClient.cs,QueryOrchestrationStatesAsync,The length of the statement  "            TableQuery<AzureTableOrchestrationStateEntity> query = CreateQueryInternal(stateQuery' -JumpStartTableScanIntervalInDays' false); " is 129.
Long Statement,DurableTask.ServiceBus.Tracking,AzureTableClient,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableClient.cs,WriteEntitiesAsync,The length of the statement  "            return await PerformBatchTableOperationAsync("Write Entities"' this.historyTable' entities' (bo' te) => bo.InsertOrReplace(te)); " is 128.
Long Statement,DurableTask.ServiceBus.Tracking,AzureTableClient,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableClient.cs,WriteJumpStartEntitiesAsync,The length of the statement  "            return await PerformBatchTableOperationAsync("Write Entities"' this.jumpStartTable' entities' (bo' te) => bo.InsertOrReplace(te)); " is 130.
Long Statement,DurableTask.ServiceBus.Tracking,AzureTableClient,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableClient.cs,DeleteJumpStartEntitiesAsync,The length of the statement  "                TraceHelper.Trace(TraceEventType.Information' "AzureTableClient-DeleteJumpStartEntities-NotFound"' "DeleteJumpStartEntitiesAsync not found exception: {0}"' e.Message); " is 167.
Long Statement,DurableTask.ServiceBus.Tracking,AzureTableInstanceStore,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableInstanceStore.cs,InitializeStoreAsync,The length of the statement  "            // Keep calls sequential' running in parallel can be flaky' in particular the storage emulator will fail 50%+ of the time " is 121.
Long Statement,DurableTask.ServiceBus.Tracking,AzureTableInstanceStore,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableInstanceStore.cs,DeleteStoreAsync,The length of the statement  "            // Keep calls sequential' running in parallel can be flaky' in particular the storage emulator will fail 50%+ of the time " is 121.
Long Statement,DurableTask.ServiceBus.Tracking,AzureTableInstanceStore,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableInstanceStore.cs,WriteEntitiesAsync,The length of the statement  "            return await Utils.ExecuteWithRetries(() => this.tableClient.WriteEntitiesAsync(entities.Select(HistoryEventToTableEntity))' " is 124.
Long Statement,DurableTask.ServiceBus.Tracking,AzureTableInstanceStore,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableInstanceStore.cs,DeleteEntitiesAsync,The length of the statement  "            return await Utils.ExecuteWithRetries(() => this.tableClient.DeleteEntitiesAsync(entities.Select(HistoryEventToTableEntity))' " is 125.
Long Statement,DurableTask.ServiceBus.Tracking,AzureTableInstanceStore,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableInstanceStore.cs,GetOrchestrationStateAsync,The length of the statement  "            IEnumerable<AzureTableOrchestrationStateEntity> jumpStartEntities = await Utils.ExecuteWithRetries(() => this.tableClient.QueryJumpStartOrchestrationsAsync(new OrchestrationStateQuery().AddInstanceFilter(instanceId))' " is 217.
Long Statement,DurableTask.ServiceBus.Tracking,AzureTableInstanceStore,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableInstanceStore.cs,GetOrchestrationStateAsync,The length of the statement  "            IEnumerable<AzureTableOrchestrationStateEntity> stateEntities = await Utils.ExecuteWithRetries(() =>  tableClient.QueryOrchestrationStatesAsync(new OrchestrationStateQuery().AddInstanceFilter(instanceId))' " is 205.
Long Statement,DurableTask.ServiceBus.Tracking,AzureTableInstanceStore,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableInstanceStore.cs,QueryOrchestrationStatesAsync,The length of the statement  "            IEnumerable<AzureTableOrchestrationStateEntity> jumpStartEntities = await this.tableClient.QueryJumpStartOrchestrationsAsync(stateQuery).ConfigureAwait(false); " is 159.
Long Statement,DurableTask.ServiceBus.Tracking,AzureTableOrchestrationHistoryEventEntity,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableOrchestrationHistoryEventEntity.cs,WriteEntity,The length of the statement  "            // that we build will have to especially check for this event and flag the orchestration as unplayable if it sees this event " is 124.
Long Statement,DurableTask.ServiceBus.Tracking,AzureTableOrchestrationStateEntity,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableOrchestrationStateEntity.cs,WriteEntity,The length of the statement  "            retVals.Add("Output"' new EntityProperty(State.Output.Truncate(ServiceBusConstants.MaxStringLengthForAzureTableColumn))); " is 121.
Long Statement,DurableTask.ServiceBus.Tracking,AzureTableOrchestrationStateEntity,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableOrchestrationStateEntity.cs,ToString,The length of the statement  "                "Instance Id: {0} Execution Id: {1} Name: {2} Version: {3} CreatedTime: {4} CompletedTime: {5} LastUpdated: {6} Status: {7} User Status: {8} Input: {9} Output: {10} Size: {11} CompressedSize: {12}"' " is 198.
Long Statement,DurableTask.ServiceBus.Tracking,BlobStorageClient,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\BlobStorageClient.cs,DeleteExpiredContainersAsync,The length of the statement  "            var tasks = containers.Where(container => BlobStorageClientHelper.IsContainerExpired(container.Name' thresholdDateTimeUtc)).ToList().Select(container => container.DeleteIfExistsAsync()); " is 186.
Long Statement,DurableTask.ServiceBus.Tracking,BlobStorageClientHelper,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\BlobStorageClientHelper.cs,ParseKey,The length of the statement  "                throw new ArgumentException($"Blob key {key} does not contain required 2 or more segments: containerNameSuffix|blobName."' nameof(key)); " is 136.
Long Statement,DurableTask.ServiceBus.Tracking,JumpStartManager,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\JumpStartManager.cs,JumpStartAsync,The length of the statement  "                    IEnumerable<OrchestrationJumpStartInstanceEntity> entities = await this.service.InstanceStore.GetJumpStartEntitiesAsync(1000); " is 126.
Long Statement,DurableTask.ServiceBus.Tracking,JumpStartManager,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\JumpStartManager.cs,JumpStartOrchestrationAsync,The length of the statement  "            OrchestrationStateInstanceEntity stateEntity = (await this.service.InstanceStore.GetEntitiesAsync(instance.InstanceId' instance.ExecutionId))?.FirstOrDefault(); " is 160.
Magic Number,DurableTask.ServiceBus.Common,ServiceBusUtils,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Common\ServiceBusUtils.cs,CheckAndLogDeliveryCount,The following statement contains a magic number: if (message.DeliveryCount >= maxDeliveryCount - 2)              {                  if (!string.IsNullOrEmpty(sessionId))                  {                      TraceHelper.TraceSession(                          TraceEventType.Critical'                           "MaxDeliveryCountApproaching-Session"'                           sessionId'                          "Delivery count for message with id {0} is {1}. Message will be deadlettered if processing continues to fail."'                          message.MessageId'                          message.DeliveryCount);                  }                  else                  {                      TraceHelper.Trace(                          TraceEventType.Critical'                          "MaxDeliveryCountApproaching"'                          "Delivery count for message with id {0} is {1}. Message will be deadlettered if processing continues to fail."'                          message.MessageId'                           message.DeliveryCount);                  }              }
Magic Number,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,GetHubQueueMaxDeliveryCountsAsync,The following statement contains a magic number: var result = new Dictionary<string' int>(3);
Magic Number,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,WaitForOrchestrationAsync,The following statement contains a magic number: while (!cancellationToken.IsCancellationRequested && timeoutSeconds > 0)              {                  OrchestrationState state = (await GetOrchestrationStateAsync(instanceId' false))?.FirstOrDefault();                  if (state == null                      || (state.OrchestrationStatus == OrchestrationStatus.Running)                      || (state.OrchestrationStatus == OrchestrationStatus.Pending))                  {                      await Task.Delay(StatusPollingIntervalInSeconds * 1000' cancellationToken);                      timeoutSeconds -= StatusPollingIntervalInSeconds;                  }                  else                  {                      return state;                  }              }
Magic Number,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,SafeDeleteQueueAsync,The following statement contains a magic number: await Utils.ExecuteWithRetries(async () =>              {                  try                  {                      await namespaceManager.DeleteQueueAsync(path);                  }                  catch (MessagingEntityAlreadyExistsException)                  {                      await Task.FromResult(0);                  }              }' null' "SafeDeleteQueueAsync"' 3' 5);
Magic Number,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,SafeDeleteQueueAsync,The following statement contains a magic number: await Utils.ExecuteWithRetries(async () =>              {                  try                  {                      await namespaceManager.DeleteQueueAsync(path);                  }                  catch (MessagingEntityAlreadyExistsException)                  {                      await Task.FromResult(0);                  }              }' null' "SafeDeleteQueueAsync"' 3' 5);
Magic Number,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,SafeCreateQueueAsync,The following statement contains a magic number: await Utils.ExecuteWithRetries(async () =>              {                  try                  {                  await CreateQueueAsync(namespaceManager' path' requiresSessions' requiresDuplicateDetection' maxDeliveryCount' maxSizeInMegabytes);                  }                  catch (MessagingEntityAlreadyExistsException)                  {                      await Task.FromResult(0);                  }              }' null' "SafeCreateQueueAsync"' 3' 5);
Magic Number,DurableTask.ServiceBus,ServiceBusOrchestrationService,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\ServiceBusOrchestrationService.cs,SafeCreateQueueAsync,The following statement contains a magic number: await Utils.ExecuteWithRetries(async () =>              {                  try                  {                  await CreateQueueAsync(namespaceManager' path' requiresSessions' requiresDuplicateDetection' maxDeliveryCount' maxSizeInMegabytes);                  }                  catch (MessagingEntityAlreadyExistsException)                  {                      await Task.FromResult(0);                  }              }' null' "SafeCreateQueueAsync"' 3' 5);
Magic Number,DurableTask.ServiceBus.Tracking,AzureTableClient,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableClient.cs,PerformBatchTableOperationAsync,The following statement contains a magic number: foreach (AzureTableCompositeTableEntity entity in entities)              {                  foreach (ITableEntity e in entity.BuildDenormalizedEntities())                  {                      batchOperationFunc(batchOperation' e);                      if (++operationCounter == 100)                      {                          await ExecuteBatchOperationAsync(operationTag' table' batchOperation);                          batchOperation = new TableBatchOperation();                          operationCounter = 0;                      }                  }              }
Magic Number,DurableTask.ServiceBus.Tracking,AzureTableClient,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableClient.cs,ExecuteBatchOperationAsync,The following statement contains a magic number: foreach (TableResult result in results)              {                  if (result.HttpStatusCode < 200 || result.HttpStatusCode > 299)                  {                      throw new OrchestrationFrameworkException("Failed to perform " + operationTag + " batch operation: " +                                                                result.HttpStatusCode);                  }              }
Magic Number,DurableTask.ServiceBus.Tracking,AzureTableClient,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableClient.cs,ExecuteBatchOperationAsync,The following statement contains a magic number: foreach (TableResult result in results)              {                  if (result.HttpStatusCode < 200 || result.HttpStatusCode > 299)                  {                      throw new OrchestrationFrameworkException("Failed to perform " + operationTag + " batch operation: " +                                                                result.HttpStatusCode);                  }              }
Magic Number,DurableTask.ServiceBus.Tracking,AzureTableInstanceStore,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\AzureTableInstanceStore.cs,PurgeOrchestrationHistoryEventsAsync,The following statement contains a magic number: do              {                  TableQuerySegment<AzureTableOrchestrationStateEntity> resultSegment =                      (await tableClient.QueryOrchestrationStatesSegmentedAsync(                          new OrchestrationStateQuery()                              .AddTimeRangeFilter(DateTimeUtils.MinDateTime' thresholdDateTimeUtc' timeRangeFilterType)'                          continuationToken' 100)                          .ConfigureAwait(false));                    continuationToken = resultSegment.ContinuationToken;                    if (resultSegment.Results != null)                  {                      await PurgeOrchestrationHistorySegmentAsync(resultSegment).ConfigureAwait(false);                      purgeCount += resultSegment.Results.Count;                  }              } while (continuationToken != null);
Magic Number,DurableTask.ServiceBus.Tracking,BlobStorageClientHelper,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\BlobStorageClientHelper.cs,ParseKey,The following statement contains a magic number: string[] segments = key.Split(new[] {BlobStorageClientHelper.KeyDelimiter}' 2);
Magic Number,DurableTask.ServiceBus.Tracking,BlobStorageClientHelper,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\BlobStorageClientHelper.cs,ParseKey,The following statement contains a magic number: if (segments.Length < 2)              {                  throw new ArgumentException($"Blob key {key} does not contain required 2 or more segments: containerNameSuffix|blobName."' nameof(key));              }
Magic Number,DurableTask.ServiceBus.Tracking,BlobStorageClientHelper,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\BlobStorageClientHelper.cs,IsContainerExpired,The following statement contains a magic number: if (segments.Length != 4)              {                  TraceHelper.Trace(                      TraceEventType.Warning'                      "BlobStorageClientHelper-IsContainerExpired-ContainerIgnored"'                      $"Container name {containerName} does not contain required 4 segments. Container {containerName} is ignored.");                    return false;              }
Magic Number,DurableTask.ServiceBus.Tracking,JumpStartManager,C:\repos\affandar_durabletask\src\DurableTask.ServiceBus\Tracking\JumpStartManager.cs,JumpStartAsync,The following statement contains a magic number: while (isStarted == 1)              {                  TimeSpan delay = this.interval;                  try                  {                      TraceHelper.Trace(TraceEventType.Information' "JumpStartManager-Fetch-Begin"'  "Jump start starting fetch");                        // TODO: Query in batchces and change timeframe only after curent range is finished                      IEnumerable<OrchestrationJumpStartInstanceEntity> entities = await this.service.InstanceStore.GetJumpStartEntitiesAsync(1000);                      TraceHelper.Trace(                          TraceEventType.Information'                          "JumpStartManager-Fetch-End"'                          $"JumpStartManager: Fetched state entities count: {entities.Count()}");                      var taskList = new List<Task>();                      entities.ToList().ForEach(e => taskList.Add(this.JumpStartOrchestrationAsync(e)));                      await Task.WhenAll(taskList);                  }                  catch (TimeoutException)                  {                      delay = this.intervalOnTimeout;                  }                  catch (TaskCanceledException exception)                  {                      TraceHelper.Trace(                          TraceEventType.Information'                          "JumpStartManager-Fetch-TaskCanceled"'                          $"JumpStartManager: TaskCanceledException while fetching state entities' should be harmless: {exception.Message}");                      delay = this.interval;                  }                  catch (Exception exception) when (!Utils.IsFatal(exception))                  {                      if (isStarted == 0)                      {                          TraceHelper.Trace(                              TraceEventType.Information'                              "JumpStartManager-Fetch-HarmlessException"'                              $"JumpStartManager: Harmless exception while fetching state entities after Stop(): {exception.Message}");                      }                      else                      {                          TraceHelper.TraceException(                              TraceEventType.Warning'                              "JumpStartManager-Fetch-Exception"'                              exception'                              "JumpStartManager: Exception while fetching/processing state entities");                          delay = this.interval;                      }                  }                    await Task.Delay(delay);              }
