Implementation smell,Namespace,Class,File,Method,Description
Long Method,DurableTask.Samples,Program,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Program.cs,Main,The method has 148 lines of code.
Complex Method,DurableTask.Samples.Replat,MigrateOrchestration,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Replat\MigrateOrchestration.cs,RunTask,Cyclomatic complexity of the method is 11
Long Parameter List,DurableTask.Samples,OrchestrationConsoleTraceListener,C:\repos\affandar_durabletask\samples\DurableTask.Samples\OrchestrationConsoleTraceListener.cs,TraceEvent,The method has 5 parameters. Parameters: eventCache' source' eventType' id' message
Long Statement,DurableTask.Samples.Greetings2,GreetingsOrchestration2,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Greetings2\GreetingsOrchestration.cs,RunTask,The length of the statement  "            string greeting = await context.ScheduleTask<string>("DurableTaskSamples.Greetings.SendGreetingTask"' string.Empty' u.Result); " is 126.
Long Statement,DurableTask.Samples,Program,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Program.cs,Main,The length of the statement  "                            instance = taskHubClient.CreateOrchestrationInstanceAsync(typeof(AverageCalculatorOrchestration)' instanceId' input).Result; " is 124.
Long Statement,DurableTask.Samples,Program,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Program.cs,Main,The length of the statement  "                            instance = taskHubClient.CreateOrchestrationInstanceWithRaisedEventAsync(typeof(SignalOrchestration)' instanceId' null' options.Signal' options.Parameters[0]).Result; " is 166.
Long Statement,DurableTask.Samples,Program,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Program.cs,Main,The length of the statement  "                        var taskResult = taskHubClient.WaitForOrchestrationAsync(instance' TimeSpan.FromSeconds(60)' CancellationToken.None).Result; " is 124.
Long Statement,DurableTask.Samples.Replat,MigrateOrchestration,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Replat\MigrateOrchestration.cs,RunTask,The length of the statement  "                //this.LogOrchestrationEvent(TraceEventType.Information' "Updated Websites ttl for Subscription '{0}' with result '{1}'".FormatInvariant(subscriptionId' " is 152.
Long Statement,DurableTask.Samples.Replat,MigrateOrchestration,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Replat\MigrateOrchestration.cs,RunTask,The length of the statement  "            //this.LogOrchestrationEvent(TraceEventType.Information' "Subscription '{0}' locked result: {1}".FormatInvariant(subscriptionId' subscriptionLocked.ToString())); " is 161.
Long Statement,DurableTask.Samples.Replat,MigrateOrchestration,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Replat\MigrateOrchestration.cs,RunTask,The length of the statement  "            //this.LogOrchestrationEvent(TraceEventType.Information' "Subscription '{0}' has '{1}' apps to migrate".FormatInvariant(subscriptionId' apps.Length.ToString())); " is 161.
Long Statement,DurableTask.Samples.Replat,MigrateOrchestration,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Replat\MigrateOrchestration.cs,RunTask,The length of the statement  "                            //this.LogOrchestrationEvent(TraceEventType.Information' "Enabling Subscription '{0}' before migration".FormatInvariant(subscriptionId)); " is 137.
Long Statement,DurableTask.Samples.Replat,MigrateOrchestration,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Replat\MigrateOrchestration.cs,RunTask,The length of the statement  "                        //this.LogOrchestrationEvent(TraceEventType.Information' "Subscription '{0}' validated for starting migration".FormatInvariant(subscriptionId)); " is 144.
Long Statement,DurableTask.Samples.Replat,MigrateOrchestration,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Replat\MigrateOrchestration.cs,RunTask,The length of the statement  "                        this.status.IsMigrated = await this.ApplyAction(apps' (id' app) => this.MigrateApplication(id' input.SubscriptionId' app)); " is 123.
Long Statement,DurableTask.Samples.Replat,MigrateOrchestration,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Replat\MigrateOrchestration.cs,RunTask,The length of the statement  "                        //this.LogOrchestrationEvent(TraceEventType.Information' "Subscription '{0}' migration result: {1}".FormatInvariant(subscriptionId' " is 131.
Long Statement,DurableTask.Samples.Replat,MigrateOrchestration,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Replat\MigrateOrchestration.cs,RunTask,The length of the statement  "                            this.status.IsFlipped = await this.ApplyAction(apps' (i' app) => this.antaresReplatMigrationTasks.UpdateWebSiteHostName(subscriptionId' app)); " is 142.
Long Statement,DurableTask.Samples.Replat,MigrateOrchestration,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Replat\MigrateOrchestration.cs,RunTask,The length of the statement  "                            //this.LogOrchestrationEvent(TraceEventType.Information' "Subscription '{0}' flipped result: {1}".FormatInvariant(subscriptionId' " is 129.
Long Statement,DurableTask.Samples.Replat,MigrateOrchestration,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Replat\MigrateOrchestration.cs,RunTask,The length of the statement  "                            this.status.IsWhitelisted = await SafeTaskInvoke<bool>(() => this.antaresReplatMigrationTasks.WhitelistSubscription(subscriptionId)); " is 133.
Long Statement,DurableTask.Samples.Replat,MigrateOrchestration,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Replat\MigrateOrchestration.cs,RunTask,The length of the statement  "                            //this.LogOrchestrationEvent(TraceEventType.Information' "Subscription '{0}' IsWhitelisted result: {1}".FormatInvariant(subscriptionId' " is 135.
Long Statement,DurableTask.Samples.Replat,MigrateOrchestration,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Replat\MigrateOrchestration.cs,RunTask,The length of the statement  "                    //this.LogOrchestrationEvent(TraceEventType.Information' "Disable Subscription '{0}' after migration".FormatInvariant(subscriptionId)); " is 135.
Long Statement,DurableTask.Samples.Replat,MigrateOrchestration,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Replat\MigrateOrchestration.cs,RunTask,The length of the statement  "                //this.LogOrchestrationEvent(TraceEventType.Information' "Subscription '{0}' Unlocked".FormatInvariant(subscriptionId)); " is 120.
Long Statement,DurableTask.Samples.Replat,MigrateOrchestration,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Replat\MigrateOrchestration.cs,RunTask,The length of the statement  "                this.status.IsCleaned = await SafeTaskInvoke<bool>(() => this.antaresReplatMigrationTasks.CleanupPrivateStamp(subscriptionId)); " is 127.
Long Statement,DurableTask.Samples.Replat,MigrateOrchestration,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Replat\MigrateOrchestration.cs,RunTask,The length of the statement  "                //this.LogOrchestrationEvent(TraceEventType.Information' "Private stamp cleaned for Subscription '{0}'' Result: {1}".FormatInvariant( " is 133.
Long Statement,DurableTask.Samples.Replat,MigrateOrchestration,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Replat\MigrateOrchestration.cs,RunTask,The length of the statement  "            //this.LogOrchestrationEvent(TraceEventType.Information' "Migration result for Subscription '{0}': {1}".FormatInvariant( " is 120.
Long Statement,DurableTask.Samples.Signal,SignalOrchestration,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Signal\SignalOrchestration.cs,RunTask,The length of the statement  "            string greeting = await context.ScheduleTask<string>("DurableTask.Samples.Greetings.SendGreetingTask"' string.Empty' user); " is 123.
Long Statement,DurableTask.Samples.SumOfSquares,SumOfSquaresOrchestration,C:\repos\affandar_durabletask\samples\DurableTask.Samples\SumOfSquares\SumOfSquaresOrchestration.cs,RunTask,The length of the statement  "                        var subOrchestration = context.CreateSubOrchestrationInstance<int>(typeof(SumOfSquaresOrchestration)' item.ToString(Newtonsoft.Json.Formatting.None)); " is 150.
Long Statement,DurableTask.Samples.SumOfSquares,SumOfSquaresOrchestration,C:\repos\affandar_durabletask\samples\DurableTask.Samples\SumOfSquares\SumOfSquaresOrchestration.cs,RunTask,The length of the statement  "                        //resultChunks.Add(await context.CreateSubOrchestrationInstance<int>(typeof(SumOfSquaresOrchestration)' item.ToString(Newtonsoft.Json.Formatting.None))); " is 153.
Empty Catch Block,DurableTask.Samples.Replat,MigrateOrchestration,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Replat\MigrateOrchestration.cs,RunTask,The method has an empty catch block.
Empty Catch Block,DurableTask.Samples.Replat,MigrateOrchestration,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Replat\MigrateOrchestration.cs,SafeTaskInvoke,The method has an empty catch block.
Magic Number,DurableTask.Samples.AverageCalculator,AverageCalculatorOrchestration,C:\repos\affandar_durabletask\samples\DurableTask.Samples\AverageCalculator\AverageCalculatorOrchestration.cs,RunTask,The following statement contains a magic number: if (input == null || input.Length != 3)              {                  throw new ArgumentException("input");              }
Magic Number,DurableTask.Samples.AverageCalculator,AverageCalculatorOrchestration,C:\repos\affandar_durabletask\samples\DurableTask.Samples\AverageCalculator\AverageCalculatorOrchestration.cs,RunTask,The following statement contains a magic number: int step = input[2];
Magic Number,DurableTask.Samples.AverageCalculator,ComputeSumTask,C:\repos\affandar_durabletask\samples\DurableTask.Samples\AverageCalculator\ComputeSumTask.cs,Execute,The following statement contains a magic number: if (chunk == null || chunk.Length != 2)              {                  throw new ArgumentException("chunk");              }
Magic Number,DurableTask.Samples.Common.WorkItems,EmailTask,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Common.WorkItems\EmailTask.cs,Execute,The following statement contains a magic number: var smtp = new SmtpClient                  {                      Host = "smtp.live.com"'                      Port = 587'                      EnableSsl = true'                      DeliveryMethod = SmtpDeliveryMethod.Network'                      UseDefaultCredentials = false'                      Credentials = new NetworkCredential(FromAddress.Address' FromPassword)                  };
Magic Number,DurableTask.Samples.Cron,CronOrchestration,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Cron\CronOrchestration.cs,RunTask,The following statement contains a magic number: int numberOfTimes = 4;
Magic Number,DurableTask.Samples.Cron,CronOrchestration,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Cron\CronOrchestration.cs,RunTask,The following statement contains a magic number: int runAfterEverySeconds = 10;
Magic Number,DurableTask.Samples.Cron,CronTask,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Cron\CronTask.cs,Execute,The following statement contains a magic number: Thread.Sleep(2 * 1000);
Magic Number,DurableTask.Samples.Cron,CronTask,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Cron\CronTask.cs,Execute,The following statement contains a magic number: Thread.Sleep(2 * 1000);
Magic Number,DurableTaskSamples.Greetings,GetUserName,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Greetings\GetUserName.cs,InitializeComponent,The following statement contains a magic number: this.txtUserName.Location = new System.Drawing.Point(106' 10);
Magic Number,DurableTaskSamples.Greetings,GetUserName,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Greetings\GetUserName.cs,InitializeComponent,The following statement contains a magic number: this.txtUserName.Location = new System.Drawing.Point(106' 10);
Magic Number,DurableTaskSamples.Greetings,GetUserName,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Greetings\GetUserName.cs,InitializeComponent,The following statement contains a magic number: this.txtUserName.Size = new System.Drawing.Size(265' 20);
Magic Number,DurableTaskSamples.Greetings,GetUserName,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Greetings\GetUserName.cs,InitializeComponent,The following statement contains a magic number: this.txtUserName.Size = new System.Drawing.Size(265' 20);
Magic Number,DurableTaskSamples.Greetings,GetUserName,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Greetings\GetUserName.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 13);
Magic Number,DurableTaskSamples.Greetings,GetUserName,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Greetings\GetUserName.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 13);
Magic Number,DurableTaskSamples.Greetings,GetUserName,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Greetings\GetUserName.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(88' 13);
Magic Number,DurableTaskSamples.Greetings,GetUserName,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Greetings\GetUserName.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(88' 13);
Magic Number,DurableTaskSamples.Greetings,GetUserName,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Greetings\GetUserName.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point(15' 55);
Magic Number,DurableTaskSamples.Greetings,GetUserName,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Greetings\GetUserName.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point(15' 55);
Magic Number,DurableTaskSamples.Greetings,GetUserName,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Greetings\GetUserName.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size(112' 23);
Magic Number,DurableTaskSamples.Greetings,GetUserName,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Greetings\GetUserName.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size(112' 23);
Magic Number,DurableTaskSamples.Greetings,GetUserName,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Greetings\GetUserName.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.TabIndex = 2;
Magic Number,DurableTaskSamples.Greetings,GetUserName,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Greetings\GetUserName.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(404' 90);
Magic Number,DurableTaskSamples.Greetings,GetUserName,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Greetings\GetUserName.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(404' 90);
Magic Number,DurableTask.Samples.Greetings,SendGreetingTask,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Greetings\SendGreetingTask.cs,Execute,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace(user) && user.Equals("TimedOut"))              {                  message = "GetUser Timed out!!!";                  Console.WriteLine(message);              }              else              {                  Console.WriteLine("Sending greetings to user: " + user + "...");                    Thread.Sleep(5 * 1000);                    message = "Greeting sent to " + user;                  Console.WriteLine(message);              }
Magic Number,DurableTask.Samples.Greetings,SendGreetingTask,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Greetings\SendGreetingTask.cs,Execute,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace(user) && user.Equals("TimedOut"))              {                  message = "GetUser Timed out!!!";                  Console.WriteLine(message);              }              else              {                  Console.WriteLine("Sending greetings to user: " + user + "...");                    Thread.Sleep(5 * 1000);                    message = "Greeting sent to " + user;                  Console.WriteLine(message);              }
Magic Number,DurableTask.Samples,Program,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Program.cs,Main,The following statement contains a magic number: if (CommandLine.Parser.Default.ParseArgumentsStrict(args' options))              {                  string servicebusConnectionString = Program.GetSetting("ServiceBusConnectionString");                  string storageConnectionString = Program.GetSetting("StorageConnectionString");                  string taskHubName = ConfigurationManager.AppSettings["taskHubName"];                    IOrchestrationServiceInstanceStore instanceStore = new AzureTableInstanceStore(taskHubName' storageConnectionString);                    ServiceBusOrchestrationService orchestrationServiceAndClient =                      new ServiceBusOrchestrationService(servicebusConnectionString' taskHubName' instanceStore' null' null);                    TaskHubClient taskHubClient = new TaskHubClient(orchestrationServiceAndClient);                  TaskHubWorker taskHub = new TaskHubWorker(orchestrationServiceAndClient);                                    if (options.CreateHub)                  {                      orchestrationServiceAndClient.CreateIfNotExistsAsync().Wait();                  }                    OrchestrationInstance instance = null;                    if (!string.IsNullOrWhiteSpace(options.StartInstance))                  {                      string instanceId = options.InstanceId ?? Guid.NewGuid().ToString();                      Console.WriteLine($"Start Orchestration: {options.StartInstance}");                      switch (options.StartInstance)                      {                          case "Greetings":                              instance = taskHubClient.CreateOrchestrationInstanceAsync(typeof(GreetingsOrchestration)' instanceId' null).Result;                              break;                          case "Greetings2":                              if (options.Parameters == null || options.Parameters.Length != 1)                              {                                  throw new ArgumentException("parameters");                              }                              instance = taskHubClient.CreateOrchestrationInstanceAsync(typeof(GreetingsOrchestration2)' instanceId'                                   int.Parse(options.Parameters[0])).Result;                              break;                          case "Cron":                              // Sample Input: "0 12 * */2 Mon"                              instance = taskHubClient.CreateOrchestrationInstanceAsync(typeof(CronOrchestration)' instanceId'                                   (options.Parameters != null && options.Parameters.Length > 0) ? options.Parameters[0] : null).Result;                              break;                          case "Average":                              // Sample Input: "1 50 10"                              if (options.Parameters == null || options.Parameters.Length != 3)                              {                                  throw new ArgumentException("parameters");                              }                              int[] input = options.Parameters.Select(p => int.Parse(p)).ToArray();                              instance = taskHubClient.CreateOrchestrationInstanceAsync(typeof(AverageCalculatorOrchestration)' instanceId' input).Result;                              break;                          case "ErrorHandling":                              instance = taskHubClient.CreateOrchestrationInstanceAsync(typeof(ErrorHandlingOrchestration)' instanceId' null).Result;                              break;                          case "SumOfSquares":                              instance = taskHubClient.CreateOrchestrationInstanceAsync(                                  "SumOfSquaresOrchestration"'                                   "V1"'                                   instanceId'                                   File.ReadAllText("SumofSquares\\BagOfNumbers.json")'                                  new Dictionary<string' string>(1) { { "Category"' "testing" } }).Result;                              break;                          case "Signal":                              instance = taskHubClient.CreateOrchestrationInstanceAsync(typeof(SignalOrchestration)' instanceId' null).Result;                              break;                          case "SignalAndRaise":                              if (options.Parameters == null || options.Parameters.Length != 1)                              {                                  throw new ArgumentException("parameters");                              }                                instance = taskHubClient.CreateOrchestrationInstanceWithRaisedEventAsync(typeof(SignalOrchestration)' instanceId' null' options.Signal' options.Parameters[0]).Result;                              break;                          case "Replat":                              instance = taskHubClient.CreateOrchestrationInstanceAsync(typeof(MigrateOrchestration)' instanceId'                                  new MigrateOrchestrationData() { SubscriptionId = "03a1cd39-47ac-4a57-9ff5-a2c2a2a76088"' IsDisabled = false }).Result;                              break;                          default:                              throw new Exception("Unsupported Orchestration Name: " + options.StartInstance);                      }                        Console.WriteLine("Workflow Instance Started: " + instance);                  }                  else if (!string.IsNullOrWhiteSpace(options.Signal))                  {                      Console.WriteLine("Run RaiseEvent");                        if (string.IsNullOrWhiteSpace(options.InstanceId))                       {                          throw new ArgumentException("instanceId");                      }                      if (options.Parameters == null || options.Parameters.Length != 1)                      {                          throw new ArgumentException("parameters");                        }                      string instanceId = options.InstanceId;                      instance = new OrchestrationInstance { InstanceId = instanceId };                      taskHubClient.RaiseEventAsync(instance' options.Signal' options.Parameters[0]).Wait();                        Console.WriteLine("Press any key to quit.");                      Console.ReadLine();                  }                    if (!options.SkipWorker)                  {                      try                      {                          taskHub.AddTaskOrchestrations(                              typeof(GreetingsOrchestration)'                              typeof(GreetingsOrchestration2)'                               typeof(CronOrchestration)'                              typeof(AverageCalculatorOrchestration)'                               typeof(ErrorHandlingOrchestration)'                               typeof(SignalOrchestration)'                              typeof(MigrateOrchestration)'                              typeof(SumOfSquaresOrchestration)                              );                            taskHub.AddTaskOrchestrations(                              new NameValueObjectCreator<TaskOrchestration>("SumOfSquaresOrchestration"' "V1"' typeof(SumOfSquaresOrchestration)));                                                    taskHub.AddTaskActivities(                              new GetUserTask()'                               new SendGreetingTask()'                               new CronTask()'                               new ComputeSumTask()'                               new GoodTask()'                               new BadTask()'                               new CleanupTask()'                              new EmailTask()'                              new SumOfSquaresTask()                              );                            taskHub.AddTaskActivitiesFromInterface<IManagementSqlOrchestrationTasks>(new ManagementSqlOrchestrationTasks());                          taskHub.AddTaskActivitiesFromInterface<IMigrationTasks>(new MigrationTasks());                            taskHub.StartAsync().Wait();                            Console.WriteLine("Waiting up to 60 seconds for completion.");                            var taskResult = taskHubClient.WaitForOrchestrationAsync(instance' TimeSpan.FromSeconds(60)' CancellationToken.None).Result;                          Console.WriteLine($"Task done: {taskResult?.OrchestrationStatus}");                            Console.WriteLine("Press any key to quit.");                          Console.ReadLine();                            taskHub.StopAsync(true).Wait();                      }                      catch (Exception e)                      {                          // silently eat any unhadled exceptions.                          Console.WriteLine($"worker exception: {e}");                      }                  }                  else                  {                      Console.WriteLine("Skip Worker");                  }              }
Magic Number,DurableTask.Samples,Program,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Program.cs,Main,The following statement contains a magic number: if (CommandLine.Parser.Default.ParseArgumentsStrict(args' options))              {                  string servicebusConnectionString = Program.GetSetting("ServiceBusConnectionString");                  string storageConnectionString = Program.GetSetting("StorageConnectionString");                  string taskHubName = ConfigurationManager.AppSettings["taskHubName"];                    IOrchestrationServiceInstanceStore instanceStore = new AzureTableInstanceStore(taskHubName' storageConnectionString);                    ServiceBusOrchestrationService orchestrationServiceAndClient =                      new ServiceBusOrchestrationService(servicebusConnectionString' taskHubName' instanceStore' null' null);                    TaskHubClient taskHubClient = new TaskHubClient(orchestrationServiceAndClient);                  TaskHubWorker taskHub = new TaskHubWorker(orchestrationServiceAndClient);                                    if (options.CreateHub)                  {                      orchestrationServiceAndClient.CreateIfNotExistsAsync().Wait();                  }                    OrchestrationInstance instance = null;                    if (!string.IsNullOrWhiteSpace(options.StartInstance))                  {                      string instanceId = options.InstanceId ?? Guid.NewGuid().ToString();                      Console.WriteLine($"Start Orchestration: {options.StartInstance}");                      switch (options.StartInstance)                      {                          case "Greetings":                              instance = taskHubClient.CreateOrchestrationInstanceAsync(typeof(GreetingsOrchestration)' instanceId' null).Result;                              break;                          case "Greetings2":                              if (options.Parameters == null || options.Parameters.Length != 1)                              {                                  throw new ArgumentException("parameters");                              }                              instance = taskHubClient.CreateOrchestrationInstanceAsync(typeof(GreetingsOrchestration2)' instanceId'                                   int.Parse(options.Parameters[0])).Result;                              break;                          case "Cron":                              // Sample Input: "0 12 * */2 Mon"                              instance = taskHubClient.CreateOrchestrationInstanceAsync(typeof(CronOrchestration)' instanceId'                                   (options.Parameters != null && options.Parameters.Length > 0) ? options.Parameters[0] : null).Result;                              break;                          case "Average":                              // Sample Input: "1 50 10"                              if (options.Parameters == null || options.Parameters.Length != 3)                              {                                  throw new ArgumentException("parameters");                              }                              int[] input = options.Parameters.Select(p => int.Parse(p)).ToArray();                              instance = taskHubClient.CreateOrchestrationInstanceAsync(typeof(AverageCalculatorOrchestration)' instanceId' input).Result;                              break;                          case "ErrorHandling":                              instance = taskHubClient.CreateOrchestrationInstanceAsync(typeof(ErrorHandlingOrchestration)' instanceId' null).Result;                              break;                          case "SumOfSquares":                              instance = taskHubClient.CreateOrchestrationInstanceAsync(                                  "SumOfSquaresOrchestration"'                                   "V1"'                                   instanceId'                                   File.ReadAllText("SumofSquares\\BagOfNumbers.json")'                                  new Dictionary<string' string>(1) { { "Category"' "testing" } }).Result;                              break;                          case "Signal":                              instance = taskHubClient.CreateOrchestrationInstanceAsync(typeof(SignalOrchestration)' instanceId' null).Result;                              break;                          case "SignalAndRaise":                              if (options.Parameters == null || options.Parameters.Length != 1)                              {                                  throw new ArgumentException("parameters");                              }                                instance = taskHubClient.CreateOrchestrationInstanceWithRaisedEventAsync(typeof(SignalOrchestration)' instanceId' null' options.Signal' options.Parameters[0]).Result;                              break;                          case "Replat":                              instance = taskHubClient.CreateOrchestrationInstanceAsync(typeof(MigrateOrchestration)' instanceId'                                  new MigrateOrchestrationData() { SubscriptionId = "03a1cd39-47ac-4a57-9ff5-a2c2a2a76088"' IsDisabled = false }).Result;                              break;                          default:                              throw new Exception("Unsupported Orchestration Name: " + options.StartInstance);                      }                        Console.WriteLine("Workflow Instance Started: " + instance);                  }                  else if (!string.IsNullOrWhiteSpace(options.Signal))                  {                      Console.WriteLine("Run RaiseEvent");                        if (string.IsNullOrWhiteSpace(options.InstanceId))                       {                          throw new ArgumentException("instanceId");                      }                      if (options.Parameters == null || options.Parameters.Length != 1)                      {                          throw new ArgumentException("parameters");                        }                      string instanceId = options.InstanceId;                      instance = new OrchestrationInstance { InstanceId = instanceId };                      taskHubClient.RaiseEventAsync(instance' options.Signal' options.Parameters[0]).Wait();                        Console.WriteLine("Press any key to quit.");                      Console.ReadLine();                  }                    if (!options.SkipWorker)                  {                      try                      {                          taskHub.AddTaskOrchestrations(                              typeof(GreetingsOrchestration)'                              typeof(GreetingsOrchestration2)'                               typeof(CronOrchestration)'                              typeof(AverageCalculatorOrchestration)'                               typeof(ErrorHandlingOrchestration)'                               typeof(SignalOrchestration)'                              typeof(MigrateOrchestration)'                              typeof(SumOfSquaresOrchestration)                              );                            taskHub.AddTaskOrchestrations(                              new NameValueObjectCreator<TaskOrchestration>("SumOfSquaresOrchestration"' "V1"' typeof(SumOfSquaresOrchestration)));                                                    taskHub.AddTaskActivities(                              new GetUserTask()'                               new SendGreetingTask()'                               new CronTask()'                               new ComputeSumTask()'                               new GoodTask()'                               new BadTask()'                               new CleanupTask()'                              new EmailTask()'                              new SumOfSquaresTask()                              );                            taskHub.AddTaskActivitiesFromInterface<IManagementSqlOrchestrationTasks>(new ManagementSqlOrchestrationTasks());                          taskHub.AddTaskActivitiesFromInterface<IMigrationTasks>(new MigrationTasks());                            taskHub.StartAsync().Wait();                            Console.WriteLine("Waiting up to 60 seconds for completion.");                            var taskResult = taskHubClient.WaitForOrchestrationAsync(instance' TimeSpan.FromSeconds(60)' CancellationToken.None).Result;                          Console.WriteLine($"Task done: {taskResult?.OrchestrationStatus}");                            Console.WriteLine("Press any key to quit.");                          Console.ReadLine();                            taskHub.StopAsync(true).Wait();                      }                      catch (Exception e)                      {                          // silently eat any unhadled exceptions.                          Console.WriteLine($"worker exception: {e}");                      }                  }                  else                  {                      Console.WriteLine("Skip Worker");                  }              }
Magic Number,DurableTask.Samples.Replat,ManagementSqlOrchestrationTasks,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Replat\ManagementSqlOrchestrationTasks.cs,GetApplicationNames,The following statement contains a magic number: Application[] applications = new Application[20]              {                  new Application() { Name = "App1"' SiteName = "App1"' Platform = RuntimePlatform.Node' Region = "West US" }'                   new Application() { Name = "App2"' SiteName = "App2"' Platform = RuntimePlatform.Node' Region = "West US" }'                  new Application() { Name = "App3"' SiteName = "App3"' Platform = RuntimePlatform.Node' Region = "West US" }'                  new Application() { Name = "App4"' SiteName = "App4"' Platform = RuntimePlatform.Node' Region = "West US" }'                  new Application() { Name = "App5"' SiteName = "App5"' Platform = RuntimePlatform.Node' Region = "West US" }'                  new Application() { Name = "App6"' SiteName = "App6"' Platform = RuntimePlatform.Node' Region = "West US" }'                  new Application() { Name = "App7"' SiteName = "App7"' Platform = RuntimePlatform.Node' Region = "West US" }'                  new Application() { Name = "App8"' SiteName = "App8"' Platform = RuntimePlatform.Node' Region = "West US" }'                  new Application() { Name = "App9"' SiteName = "App9"' Platform = RuntimePlatform.Node' Region = "West US" }'                  new Application() { Name = "App10"' SiteName = "App10"' Platform = RuntimePlatform.Node' Region = "West US" }'                  new Application() { Name = "App11"' SiteName = "App11"' Platform = RuntimePlatform.Node' Region = "West US" }'                  new Application() { Name = "App12"' SiteName = "App12"' Platform = RuntimePlatform.Node' Region = "West US" }'                  new Application() { Name = "App13"' SiteName = "App13"' Platform = RuntimePlatform.Node' Region = "West US" }'                  new Application() { Name = "App14"' SiteName = "App14"' Platform = RuntimePlatform.Node' Region = "West US" }'                  new Application() { Name = "App15"' SiteName = "App15"' Platform = RuntimePlatform.Node' Region = "West US" }'                  new Application() { Name = "App16"' SiteName = "App16"' Platform = RuntimePlatform.Node' Region = "West US" }'                  new Application() { Name = "App17"' SiteName = "App17"' Platform = RuntimePlatform.Node' Region = "West US" }'                  new Application() { Name = "App18"' SiteName = "App18"' Platform = RuntimePlatform.Node' Region = "West US" }'                  new Application() { Name = "App19"' SiteName = "App19"' Platform = RuntimePlatform.Node' Region = "West US" }'                  new Application() { Name = "App20"' SiteName = "App20"' Platform = RuntimePlatform.Node' Region = "West US" }'              };
Magic Number,DurableTask.Samples.Replat,MigrateOrchestration,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Replat\MigrateOrchestration.cs,RunTask,The following statement contains a magic number: if (!input.IsDisabled)              {                  this.status.TtlUpdated = await this.antaresReplatMigrationTasks.UpdateTtl(subscriptionId);                  //this.LogOrchestrationEvent(TraceEventType.Information' "Updated Websites ttl for Subscription '{0}' with result '{1}'".FormatInvariant(subscriptionId'                  //    this.status.TtlUpdated.ToString()));                    // Wait for 1 hour (after TTL update) before starting actual migration to guarantee zero downtime for website                  this.status.TtlUpdateTimerFired = await this.Context.CreateTimer(this.Context.CurrentUtcDateTime.AddSeconds(10)' true);              }
Magic Number,DurableTask.Samples.Replat,MigrateOrchestration,C:\repos\affandar_durabletask\samples\DurableTask.Samples\Replat\MigrateOrchestration.cs,RunTask,The following statement contains a magic number: if (this.status.IsSuccess)              {                  // wait 5 minutes before cleaning up private stamps                  await this.Context.CreateTimer(this.Context.CurrentUtcDateTime.AddSeconds(5)' true);                    this.status.IsCleaned = await SafeTaskInvoke<bool>(() => this.antaresReplatMigrationTasks.CleanupPrivateStamp(subscriptionId));                  //this.LogOrchestrationEvent(TraceEventType.Information' "Private stamp cleaned for Subscription '{0}'' Result: {1}".FormatInvariant(                  //    subscriptionId' this.status.IsCleaned));              }
