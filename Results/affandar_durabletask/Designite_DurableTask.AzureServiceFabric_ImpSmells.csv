Implementation smell,Namespace,Class,File,Method,Description
Long Method,DurableTask.AzureServiceFabric,FabricOrchestrationService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationService.cs,CompleteTaskOrchestrationWorkItemAsync,The method has 113 lines of code.
Complex Method,DurableTask.AzureServiceFabric.Stores,ScheduledMessageProvider,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Stores\ScheduledMessageProvider.cs,ProcessScheduledMessages,Cyclomatic complexity of the method is 9
Long Parameter List,DurableTask.AzureServiceFabric,FabricOrchestrationService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationService.cs,FabricOrchestrationService,The method has 5 parameters. Parameters: stateManager' orchestrationProvider' instanceStore' settings' cancellationTokenSource
Long Parameter List,DurableTask.AzureServiceFabric,FabricOrchestrationService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationService.cs,CompleteTaskOrchestrationWorkItemAsync,The method has 7 parameters. Parameters: workItem' newOrchestrationRuntimeState' outboundMessages' orchestratorMessages' timerMessages' continuedAsNewMessage' orchestrationState
Long Parameter List,DurableTask.AzureServiceFabric,Utils,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Utils.cs,RunBackgroundJob,The method has 6 parameters. Parameters: loopAction' initialDelay' delayOnSuccess' delayOnException' actionName' token
Long Parameter List,DurableTask.AzureServiceFabric.Tracing,ServiceFabricProviderEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Tracing\ServiceFabricProviderEventSource.cs,LogFabricServiceInformation,The method has 8 parameters. Parameters: serviceName' serviceTypeName' replicaOrInstanceId' partitionId' applicationName' applicationTypeName' nodeName' message
Long Identifier,DurableTask.AzureServiceFabric,Constants,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Constants.cs,,The length of the parameter CollectionNameUniquenessPrefix is 30.
Long Identifier,DurableTask.AzureServiceFabric,Constants,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Constants.cs,,The length of the parameter SessionMessagesDictionaryPrefix is 31.
Long Identifier,DurableTask.AzureServiceFabric,Constants,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Constants.cs,,The length of the parameter ScheduledMessagesDictionaryName is 31.
Long Identifier,DurableTask.AzureServiceFabric,Constants,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Constants.cs,,The length of the parameter TaskHubProxyListenerEndpointName is 32.
Long Identifier,DurableTask.AzureServiceFabric,FabricOrchestrationInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationInstanceStore.cs,,The length of the parameter InstanceStoreCollectionNamePrefix is 33.
Long Identifier,DurableTask.AzureServiceFabric.Service,FabricPartitionEndpointResolver,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Service\FabricPartitionEndpointResolver.cs,GetServicePartitionsListAsync,The length of the parameter isNewTaskCompletionSourceCreated is 32.
Long Identifier,DurableTask.AzureServiceFabric.Service,FabricPartitionEndpointResolver,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Service\FabricPartitionEndpointResolver.cs,,The length of the parameter servicePartitionsTaskCompletionSource is 37.
Long Identifier,DurableTask.AzureServiceFabric.Service,TaskHubProxyListener,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Service\TaskHubProxyListener.cs,TaskHubProxyListener,The length of the parameter fabricOrchestrationProviderSettings is 35.
Long Identifier,DurableTask.AzureServiceFabric.Service,TaskHubProxyListener,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Service\TaskHubProxyListener.cs,,The length of the parameter fabricOrchestrationProviderSettings is 35.
Long Statement,DurableTask.AzureServiceFabric,AsyncManualResetEvent,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\AsyncManualResetEvent.cs,Reset,The length of the statement  "                if (!thisTcs.Task.IsCompleted || Interlocked.CompareExchange(ref this.taskCompletionSource' new TaskCompletionSource<bool>()' thisTcs) == thisTcs) " is 146.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationInstanceStore.cs,WriteEntitiesAsync,The length of the statement  "                            await this.executionIdStore.AddOrUpdateAsync(transaction' instance.InstanceId' new List<string> { instance.ExecutionId }' " is 121.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationInstanceStore.cs,WriteEntitiesAsync,The length of the statement  "                        var backupDictionary = await this.stateManager.GetOrAddAsync<IReliableDictionary<string' OrchestrationState>>(backupDictionaryName); " is 132.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationInstanceStore.cs,GetOrchestrationStateAsync,The length of the statement  "                throw new NotImplementedException("Querying for state across all executions for an orchestration is not supported' only the latest execution can be queried"); " is 158.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationInstanceStore.cs,GetExecutionIds,The length of the statement  "            }' uniqueActionIdentifier: $"Orchestration Instance Id = {instanceId}' Action = {nameof(FabricOrchestrationInstanceStore)}.{nameof(GetExecutionIds)}"); " is 151.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationInstanceStore.cs,GetOrchestrationStateAsync,The length of the statement  "            }' uniqueActionIdentifier: $"Orchestration Instance Id = {instanceId}' ExecutionId = {executionId}' Action = {nameof(FabricOrchestrationInstanceStore)}.{nameof(GetOrchestrationStateAsync)}:QueryInstanceStore"); " is 210.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationInstanceStore.cs,GetOrchestrationStateAsync,The length of the statement  "                var backupDictionary = await this.stateManager.TryGetAsync<IReliableDictionary<string' OrchestrationState>>(backupDictionaryName); " is 130.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationInstanceStore.cs,GetOrchestrationStateAsync,The length of the statement  "                    }' uniqueActionIdentifier: $"Orchestration Instance Id = {instanceId}' ExecutionId = {executionId}' Action = {nameof(FabricOrchestrationInstanceStore)}.{nameof(GetOrchestrationStateAsync)}:QueryBackupInstanceStore {backupDictionaryName}"); " is 239.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationInstanceStore.cs,PurgeOrchestrationHistoryEventsAsync,The length of the statement  "                ServiceFabricProviderEventSource.Tracing.LogProxyServiceError($"PurgeOrchestrationHistoryEventsAsync failed with exception {e.ToString()}"); " is 140.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationInstanceStore.cs,CleanupDayOldDictionariesAsync,The length of the statement  "            }' initialDelay: TimeSpan.FromMinutes(5)' delayOnSuccess: TimeSpan.FromHours(12)' delayOnException: TimeSpan.FromHours(1)' actionName: $"{nameof(CleanupDayOldDictionariesAsync)}"' token: this.cancellationToken); " is 211.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationInstanceStore.cs,CleanupOldDictionariesAsync,The length of the statement  "                            if (DateTime.TryParseExact(stringDate' TimeFormatString' CultureInfo.InvariantCulture' DateTimeStyles.None' out storeTime) " is 122.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationInstanceStore.cs,CleanupOldDictionariesAsync,The length of the statement  "                ServiceFabricProviderEventSource.Tracing.LogTimeTaken($"Enumerating all reliable states (count: {toDelete.Count + toKeep.Count})"' enumerationTime.TotalMilliseconds); " is 166.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationInstanceStore.cs,CleanupOldDictionariesAsync,The length of the statement  "                ServiceFabricProviderEventSource.Tracing.ReliableStateManagement($"Deleting {toDelete.Count} stores"' String.Join("'"' toDelete)); " is 130.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationInstanceStore.cs,CleanupOldDictionariesAsync,The length of the statement  "                ServiceFabricProviderEventSource.Tracing.ReliableStateManagement($"All remaining {toKeep.Count} stores"' String.Join("'"' toKeep)); " is 131.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationInstanceStore.cs,CleanupOldDictionariesAsync,The length of the statement  "                    ServiceFabricProviderEventSource.Tracing.LogTimeTaken($"Deleting reliable state {storeName}"' deleteTime.TotalMilliseconds); " is 124.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationInstanceStore.cs,CleanupOldDictionariesAsync,The length of the statement  "            }' initialDelay: TimeSpan.FromMinutes(5)' delayOnSuccess: TimeSpan.FromHours(1)' delayOnException: TimeSpan.FromMinutes(10)' actionName: $"{nameof(CleanupOldDictionariesAsync)}"' token: this.cancellationToken); " is 210.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationInstanceStore.cs,EnsureStoreInitializedAsync,The length of the statement  "                this.instanceStore = await this.stateManager.GetOrAddAsync<IReliableDictionary<string' OrchestrationState>>(Constants.InstanceStoreDictionaryName); " is 147.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationInstanceStore.cs,EnsureStoreInitializedAsync,The length of the statement  "                this.executionIdStore = await this.stateManager.GetOrAddAsync<IReliableDictionary<string' List<string>>>(Constants.ExecutionStoreDictionaryName); " is 145.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationInstanceStore.cs,WaitForOrchestrationAsync,The length of the statement  "            // If querying state for an orchestration that's not started or completed and state cleaned up' we will immediately return null. " is 128.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationProvider,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationProvider.cs,EnsureValidInstance,The length of the statement  "                throw new InvalidOperationException($"{nameof(IOrchestrationService)} instance has been stopped. Discard this provider instance and create a new provider object."); " is 164.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationService.cs,LockNextTaskOrchestrationWorkItemAsync,The length of the statement  "                        ServiceFabricProviderEventSource.Tracing.UnexpectedCodeCondition($"Orchestration with no execution started event found: {currentSession.SessionId}"); " is 149.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationService.cs,LockNextTaskOrchestrationWorkItemAsync,The length of the statement  "                    ServiceFabricProviderEventSource.Tracing.UnexpectedCodeCondition($"{nameof(FabricOrchestrationService)}.{nameof(LockNextTaskOrchestrationWorkItemAsync)} : Multiple receivers processing the same session : {currentSession.SessionId.InstanceId}?"); " is 245.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationService.cs,CompleteTaskOrchestrationWorkItemAsync,The length of the statement  "                                activityMessages = outboundMessages.Select(m => new Message<string' TaskMessageItem>(Guid.NewGuid().ToString()' new TaskMessageItem(m))).ToList(); " is 146.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationService.cs,CompleteTaskOrchestrationWorkItemAsync,The length of the statement  "                                scheduledMessages = timerMessages.Select(m => new Message<Guid' TaskMessageItem>(Guid.NewGuid()' new TaskMessageItem(m))).ToList(); " is 131.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationService.cs,CompleteTaskOrchestrationWorkItemAsync,The length of the statement  "                                    sessionsToEnqueue = await this.orchestrationProvider.TryAppendMessageBatchAsync(txn' orchestratorMessages.Select(tm => new TaskMessageItem(tm))); " is 145.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationService.cs,CompleteTaskOrchestrationWorkItemAsync,The length of the statement  "                                    await this.orchestrationProvider.AppendMessageBatchAsync(txn' orchestratorMessages.Select(tm => new TaskMessageItem(tm))); " is 122.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationService.cs,CompleteTaskOrchestrationWorkItemAsync,The length of the statement  "                            // When an orchestration is completed' we need to drop the session which involves 2 steps (1) Removing the row from sessions " is 124.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationService.cs,CompleteTaskOrchestrationWorkItemAsync,The length of the statement  "                            // part of transaction. Since it will happen outside the trasanction' if this transaction fails for some reason and we dropped " is 126.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationService.cs,CompleteTaskOrchestrationWorkItemAsync,The length of the statement  "                            // in the session messages dictionary which are needed for state to reach complete state (when the orchestration is picked up again in next fetch). " is 147.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationService.cs,CompleteTaskOrchestrationWorkItemAsync,The length of the statement  "                            // mark it as complete even if it is. So we use the work item's runtime state when 'newOrchestrationRuntimeState' is null " is 121.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationService.cs,CompleteTaskOrchestrationWorkItemAsync,The length of the statement  "                            // As part of next transaction' we are going to remove the row anyway for the session and it doesn't matter to update it to 'null'. " is 131.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationService.cs,CompleteTaskOrchestrationWorkItemAsync,The length of the statement  "                            await this.orchestrationProvider.UpdateSessionState(txn' sessionInfo.Instance' newOrchestrationRuntimeState ?? workItem.OrchestrationRuntimeState); " is 147.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationService.cs,CompleteTaskOrchestrationWorkItemAsync,The length of the statement  "                        ServiceFabricProviderEventSource.Tracing.ExceptionInReliableCollectionOperations($"OrchestrationInstance = {sessionInfo.Instance}' Action = {nameof(CompleteTaskOrchestrationWorkItemAsync)}"' ex.ToString()); " is 206.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationService.cs,CompleteTaskOrchestrationWorkItemAsync,The length of the statement  "                            orchestrationState.Output = $"Fabric exception when trying to process orchestration: {ex}. Investigate and consider reducing the serialization size of orchestration inputs/outputs/overall length to avoid the issue."; " is 216.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationService.cs,CompleteTaskOrchestrationWorkItemAsync,The length of the statement  "            }' uniqueActionIdentifier: $"OrchestrationId = '{workItem.InstanceId}'' Action = '{nameof(CompleteTaskOrchestrationWorkItemAsync)}'"); " is 134.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationService.cs,HandleCompletedOrchestration,The length of the statement  "            }' uniqueActionIdentifier: $"OrchestrationId = '{workItem.InstanceId}'' Action = '{nameof(HandleCompletedOrchestration)}'"); " is 124.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationService.cs,HandleCompletedOrchestration,The length of the statement  "            string message = string.Format("Orchestration with instanceId : '{0}' and executionId : '{1}' Finished with the status {2} and result {3} in {4} seconds."' " is 155.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationService.cs,AbandonTaskOrchestrationWorkItemAsync,The length of the statement  "                ServiceFabricProviderEventSource.Tracing.UnexpectedCodeCondition($"{nameof(AbandonTaskOrchestrationWorkItemAsync)} : Could not get a session info object while trying to abandon session {workItem.InstanceId}"); " is 209.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationService.cs,CompleteTaskActivityWorkItemAsync,The length of the statement  "                        ServiceFabricProviderEventSource.Tracing.ExceptionInReliableCollectionOperations($"OrchestrationInstance = {responseMessage.OrchestrationInstance}' ActivityId = {workItem.Id}' Action = {nameof(CompleteTaskActivityWorkItemAsync)}"' ex.ToString()); " is 246.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationService.cs,CompleteTaskActivityWorkItemAsync,The length of the statement  "                        string details = $"Fabric exception when trying to save activity result: {ex}. Consider reducing the serialization size of activity result to avoid the issue."; " is 160.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationService.cs,CompleteTaskActivityWorkItemAsync,The length of the statement  "            }' uniqueActionIdentifier: $"Orchestration = '{responseMessage.OrchestrationInstance}'' ActivityId = '{workItem.Id}'' Action = '{nameof(CompleteTaskActivityWorkItemAsync)}'"); " is 175.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationService.cs,TryRemoveSessionInfo,The length of the statement  "            ServiceFabricProviderEventSource.Tracing.TraceMessage(sessionId' $"{nameof(TryRemoveSessionInfo)}: Removed = {removed}"); " is 121.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationServiceClient,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationServiceClient.cs,CreateTaskOrchestrationAsync,The length of the statement  "                string message = string.Format("Orchestration with instanceId : '{0}' and executionId : '{1}' is Created."' instance.InstanceId' instance.ExecutionId); " is 151.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationServiceClient,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationServiceClient.cs,CreateTaskOrchestrationAsync,The length of the statement  "                ServiceFabricProviderEventSource.Tracing.LogOrchestrationInformation(instance.InstanceId' instance.ExecutionId' message); " is 121.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationServiceClient,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationServiceClient.cs,CreateTaskOrchestrationAsync,The length of the statement  "                throw new OrchestrationAlreadyExistsException($"An orchestration with id '{creationMessage.OrchestrationInstance.InstanceId}' is already running."); " is 148.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationServiceClient,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationServiceClient.cs,ForceTerminateTaskOrchestrationAsync,The length of the statement  "                throw new ArgumentException($"No execution id found for given instanceId {instanceId}' can only terminate the latest execution of a given orchestration"); " is 154.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationServiceController,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationServiceController.cs,CreateTaskOrchestration,The length of the statement  "                return BadRequest($"OrchestrationId from Uri {orchestrationId} doesn't match with the one from body {parameters.TaskMessage.OrchestrationInstance.InstanceId}"); " is 160.
Long Statement,DurableTask.AzureServiceFabric,FabricOrchestrationServiceController,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationServiceController.cs,PurgeOrchestrationHistory,The length of the statement  "            await this.orchestrationServiceClient.PurgeOrchestrationHistoryAsync(purgeParameters.ThresholdDateTimeUtc' purgeParameters.TimeRangeFilterType); " is 144.
Long Statement,DurableTask.AzureServiceFabric.Remote,RemoteOrchestrationServiceClient,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Remote\RemoteOrchestrationServiceClient.cs,CreateTaskOrchestrationAsync,The length of the statement  "            var uri = await ConstructEndpointUriAsync(creationMessage.OrchestrationInstance.InstanceId' GetOrchestrationFragment()' CancellationToken.None); " is 144.
Long Statement,DurableTask.AzureServiceFabric.Remote,RemoteOrchestrationServiceClient,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Remote\RemoteOrchestrationServiceClient.cs,CreateTaskOrchestrationAsync,The length of the statement  "            var uri = await ConstructEndpointUriAsync(creationMessage.OrchestrationInstance.InstanceId' GetOrchestrationFragment(creationMessage.OrchestrationInstance.InstanceId)' CancellationToken.None); " is 192.
Long Statement,DurableTask.AzureServiceFabric.Remote,RemoteOrchestrationServiceClient,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Remote\RemoteOrchestrationServiceClient.cs,CreateTaskOrchestrationAsync,The length of the statement  "            await this.PutJsonAsync(uri' new CreateTaskOrchestrationParameters() { TaskMessage = creationMessage' DedupeStatuses = dedupeStatuses }); " is 137.
Long Statement,DurableTask.AzureServiceFabric.Remote,RemoteOrchestrationServiceClient,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Remote\RemoteOrchestrationServiceClient.cs,PurgeOrchestrationHistoryAsync,The length of the statement  "                var task = this.HttpClient.PostAsJsonAsync(uri' new PurgeOrchestrationHistoryParameters { ThresholdDateTimeUtc = thresholdDateTimeUtc' TimeRangeFilterType = timeRangeFilterType }); " is 180.
Long Statement,DurableTask.AzureServiceFabric.Remote,RemoteOrchestrationServiceClient,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Remote\RemoteOrchestrationServiceClient.cs,SendTaskOrchestrationMessageAsync,The length of the statement  "            var uri = await ConstructEndpointUriAsync(message.OrchestrationInstance.InstanceId' GetMessageFragment(message.SequenceNumber)' CancellationToken.None); " is 152.
Long Statement,DurableTask.AzureServiceFabric.Service,ActivityLoggingMessageHandler,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Service\ActivityLoggingMessageHandler.cs,SendAsync,The length of the statement  "            ServiceFabricProviderEventSource.Tracing.LogProxyServiceRequestInformation($"Proxy service incoming request {requestUri} with method {requestMethod}"); " is 151.
Long Statement,DurableTask.AzureServiceFabric.Service,ActivityLoggingMessageHandler,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Service\ActivityLoggingMessageHandler.cs,SendAsync,The length of the statement  "                ServiceFabricProviderEventSource.Tracing.LogProxyServiceRequestInformation($"Proxy service responding request {requestUri} with method {requestMethod}"); " is 153.
Long Statement,DurableTask.AzureServiceFabric.Service,FabricPartitionEndpointResolver,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Service\FabricPartitionEndpointResolver.cs,GetPartitionEndPointAsync,The length of the statement  "            ResolvedServicePartition partition = await this.partitionResolver.ResolveAsync(this.serviceUri' new ServicePartitionKey(hash)' cancellationToken); " is 146.
Long Statement,DurableTask.AzureServiceFabric.Service,FabricPartitionEndpointResolver,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Service\FabricPartitionEndpointResolver.cs,GetPartitionEndpointsAsync,The length of the statement  "                var resolvedPartition = await this.partitionResolver.ResolveAsync(this.serviceUri' new ServicePartitionKey(partitionInfo.LowKey)' cancellationToken); " is 149.
Long Statement,DurableTask.AzureServiceFabric.Service,FabricPartitionEndpointResolver,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Service\FabricPartitionEndpointResolver.cs,GetServicePartitionsListAsync,The length of the statement  "                            throw new NotSupportedException("FabricPartitionEndpointResolver doesn't support non Int64RangePartitionInformation partitions"); " is 129.
Long Statement,DurableTask.AzureServiceFabric.Service,OwinCommunicationListener,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Service\OwinCommunicationListener.cs,OpenAsync,The length of the statement  "            ServiceFabricProviderEventSource.Tracing.TraceMessage(nameof(OwinCommunicationListener)' $"Opening on {listeningAddress}"); " is 123.
Long Statement,DurableTask.AzureServiceFabric.Service,ProxyServiceExceptionLogger,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Service\ProxyServiceExceptionLogger.cs,LogAsync,The length of the statement  "            ServiceFabricProviderEventSource.Tracing.LogProxyServiceError(context.Request.Method.ToString()' context.Request.RequestUri.AbsolutePath' context.Exception); " is 157.
Long Statement,DurableTask.AzureServiceFabric.Service,TaskHubProxyListener,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Service\TaskHubProxyListener.cs,OnChangeRoleAsync,The length of the statement  "            ServiceFabricProviderEventSource.Tracing.LogFabricServiceInformation(this.statefulService' $"TaskHubProxyListener OnChangeRoleAsync' current role = {this.currentRole}' new role = {newRole}"); " is 191.
Long Statement,DurableTask.AzureServiceFabric.Service,TaskHubProxyListener,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Service\TaskHubProxyListener.cs,OnChangeRoleAsync,The length of the statement  "            ServiceFabricProviderEventSource.Tracing.LogFabricServiceInformation(this.statefulService' $"TaskHubProxyListener OnChangeRoleAsync' current role = {this.currentRole}"); " is 169.
Long Statement,DurableTask.AzureServiceFabric.Service,TaskHubProxyListener,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Service\TaskHubProxyListener.cs,OnCloseAsync,The length of the statement  "            ServiceFabricProviderEventSource.Tracing.LogFabricServiceInformation(this.statefulService' "OnCloseAsync - will shutdown primary if not already done"); " is 151.
Long Statement,DurableTask.AzureServiceFabric.Service,TaskHubProxyListener,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Service\TaskHubProxyListener.cs,CreateServiceReplicaListener,The length of the statement  "                string listeningAddress = String.Format(CultureInfo.InvariantCulture' "http://{0}:{1}/{2}/dtfx/"' ipAddress' port' context.PartitionId); " is 136.
Long Statement,DurableTask.AzureServiceFabric.Service,TaskHubProxyListener,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Service\TaskHubProxyListener.cs,OnOpenAsync,The length of the statement  "            this.fabricProviderFactory = new FabricOrchestrationProviderFactory(statefulService.StateManager' this.fabricOrchestrationProviderSettings); " is 140.
Long Statement,DurableTask.AzureServiceFabric.Service,TaskHubProxyListener,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Service\TaskHubProxyListener.cs,StartAsync,The length of the statement  "                ServiceFabricProviderEventSource.Tracing.ServiceRequestFailed("RunAsync failed"' $"Exception Details Type: {exception.GetType()}' Message: {exception.Message}' StackTrace: {exception.StackTrace}"); " is 197.
Long Statement,DurableTask.AzureServiceFabric.Service,TaskHubProxyListener,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Service\TaskHubProxyListener.cs,StopAsync,The length of the statement  "                ServiceFabricProviderEventSource.Tracing.ServiceRequestFailed("Exception when Stopping Worker On Primary Stop"' e.ToString()); " is 126.
Long Statement,DurableTask.AzureServiceFabric.Service,TaskHubStatefulService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Service\TaskHubStatefulService.cs,CreateServiceReplicaListeners,The length of the statement  "            return serviceListeners.Select(listener => listener.CreateServiceReplicaListener()).Where(listener => listener != null); " is 120.
Long Statement,DurableTask.AzureServiceFabric.Service,TaskHubStatefulService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Service\TaskHubStatefulService.cs,RunAsync,The length of the statement  "                ServiceFabricProviderEventSource.Tracing.ServiceRequestFailed("RunAsync failed"' $"Exception Details Type: {exception.GetType()}' Message: {exception.Message}' StackTrace: {exception.StackTrace}"); " is 197.
Long Statement,DurableTask.AzureServiceFabric.Service,TaskHubStatefulService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Service\TaskHubStatefulService.cs,OnChangeRoleAsync,The length of the statement  "            ServiceFabricProviderEventSource.Tracing.LogFabricServiceInformation(this' $"TaskHubStatefulService invoking service listener OnChangeRoleAsync' current role = {this.currentRole}' new role = {newRole}"); " is 203.
Long Statement,DurableTask.AzureServiceFabric.Service,TaskHubStatefulService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Service\TaskHubStatefulService.cs,OnChangeRoleAsync,The length of the statement  "            ServiceFabricProviderEventSource.Tracing.LogFabricServiceInformation(this' $"TaskHubStatefulService invoked service listener OnChangeRoleAsync' current role = {this.currentRole}"); " is 180.
Long Statement,DurableTask.AzureServiceFabric.Service,TaskHubStatefulService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Service\TaskHubStatefulService.cs,OnCloseAsync,The length of the statement  "            ServiceFabricProviderEventSource.Tracing.LogFabricServiceInformation(this' "OnCloseAsync - will shutdown primary if not already done"); " is 135.
Long Statement,DurableTask.AzureServiceFabric.Stores,MessageProviderBase<TKey;TValue>,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Stores\MessageProviderBase.cs,GetValueAsync,The length of the statement  "                    var errorMessage = $"Internal Server Error: Did not find an item in reliable dictionary while having the item key {key} in memory"; " is 131.
Long Statement,DurableTask.AzureServiceFabric.Stores,MessageProviderBase<TKey;TValue>,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Stores\MessageProviderBase.cs,LogMetrics,The length of the statement  "                    ServiceFabricProviderEventSource.Tracing.ExceptionWhileRunningBackgroundJob("LogMetrics"' "Fabric object is closed while running the loop action"); " is 147.
Long Statement,DurableTask.AzureServiceFabric.Stores,MessageProviderBase<TKey;TValue>,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Stores\MessageProviderBase.cs,LogMetrics,The length of the statement  "            }' initialDelay: this.metricsInterval' delayOnSuccess: this.metricsInterval' delayOnException: this.metricsInterval' actionName: $"Log Store Count of {this.storeName}"' token: this.CancellationToken); " is 200.
Long Statement,DurableTask.AzureServiceFabric.Stores,ScheduledMessageProvider,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Stores\ScheduledMessageProvider.cs,StartAsync,The length of the statement  "                    ServiceFabricProviderEventSource.Tracing.UnexpectedCodeCondition($"{nameof(ScheduledMessageProvider)}.{nameof(StartAsync)} : Seeing a non timer event in scheduled messages while filling the pending items collection in role start"); " is 231.
Long Statement,DurableTask.AzureServiceFabric.Stores,ScheduledMessageProvider,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Stores\ScheduledMessageProvider.cs,StartAsync,The length of the statement  "                    ServiceFabricProviderEventSource.Tracing.UnexpectedCodeCondition($"{nameof(ScheduledMessageProvider)}.{nameof(StartAsync)} : Before we set the In memory set from the builder' there are items in it which should not happen."); " is 224.
Long Statement,DurableTask.AzureServiceFabric.Stores,ScheduledMessageProvider,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Stores\ScheduledMessageProvider.cs,ProcessScheduledMessages,The length of the statement  "                    ServiceFabricProviderEventSource.Tracing.ExceptionWhileRunningBackgroundJob($"{nameof(ScheduledMessageProvider)}.{nameof(ProcessScheduledMessages)}"' e.ToString()); " is 164.
Long Statement,DurableTask.AzureServiceFabric.Stores,SessionProvider,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Stores\SessionProvider.cs,AcceptSessionAsync,The length of the statement  "                                        if (this.lockedSessions.TryUpdate(returnInstanceId' newValue: LockState.Locked' comparisonValue: LockState.InFetchQueue)) " is 121.
Long Statement,DurableTask.AzureServiceFabric.Stores,SessionProvider,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Stores\SessionProvider.cs,AcceptSessionAsync,The length of the statement  "                                            var errorMessage = $"Internal Server Error : Unexpected to dequeue the session {returnInstanceId} which was already locked before"; " is 131.
Long Statement,DurableTask.AzureServiceFabric.Stores,SessionProvider,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Stores\SessionProvider.cs,AcceptSessionAsync,The length of the statement  "                                        var errorMessage = $"Internal Server Error: Did not find the session object in reliable dictionary while having the session {returnInstanceId} in memory"; " is 154.
Long Statement,DurableTask.AzureServiceFabric.Stores,SessionProvider,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Stores\SessionProvider.cs,ReceiveSessionMessagesAsync,The length of the statement  "            ServiceFabricProviderEventSource.Tracing.TraceMessage(session.SessionId.InstanceId' $"Number of received messages {messages.Count}"); " is 133.
Long Statement,DurableTask.AzureServiceFabric.Stores,SessionProvider,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Stores\SessionProvider.cs,CompleteMessages,The length of the statement  "                ServiceFabricProviderEventSource.Tracing.TraceMessage(instance.InstanceId' $"Number of completed messages {lockTokens.Count}"); " is 127.
Long Statement,DurableTask.AzureServiceFabric.Stores,SessionProvider,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Stores\SessionProvider.cs,CompleteMessages,The length of the statement  "                ServiceFabricProviderEventSource.Tracing.UnexpectedCodeCondition($"{nameof(SessionProvider)}.{nameof(CompleteMessages)} : Did not find session messages provider instance for session : {instance}."); " is 198.
Long Statement,DurableTask.AzureServiceFabric.Stores,SessionProvider,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Stores\SessionProvider.cs,AppendMessageAsync,The length of the statement  "            }' uniqueActionIdentifier: $"Orchestration = '{newMessage.TaskMessage.OrchestrationInstance}'' Action = '{nameof(SessionProvider)}.{nameof(AppendMessageAsync)}'"); " is 163.
Long Statement,DurableTask.AzureServiceFabric.Stores,SessionProvider,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Stores\SessionProvider.cs,AppendMessageAsync,The length of the statement  "            await sessionMessageProvider.SendBeginAsync(transaction' new Message<Guid' TaskMessageItem>(Guid.NewGuid()' newMessage)); " is 121.
Long Statement,DurableTask.AzureServiceFabric.Stores,SessionProvider,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Stores\SessionProvider.cs,AppendMessageAsync,The length of the statement  "            await this.Store.TryAddAsync(transaction' newMessage.TaskMessage.OrchestrationInstance.InstanceId' PersistentSession.Create(newMessage.TaskMessage.OrchestrationInstance)); " is 171.
Long Statement,DurableTask.AzureServiceFabric.Stores,SessionProvider,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Stores\SessionProvider.cs,TryAppendMessageAsync,The length of the statement  "                await sessionMessageProvider.SendBeginAsync(transaction' new Message<Guid' TaskMessageItem>(Guid.NewGuid()' newMessage)); " is 121.
Long Statement,DurableTask.AzureServiceFabric.Stores,SessionProvider,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Stores\SessionProvider.cs,TryAppendMessageBatchAsync,The length of the statement  "                    await sessionMessageProvider.SendBatchBeginAsync(transaction' group.Select(tm => new Message<Guid' TaskMessageItem>(Guid.NewGuid()' tm))); " is 138.
Long Statement,DurableTask.AzureServiceFabric.Stores,SessionProvider,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Stores\SessionProvider.cs,AppendMessageBatchAsync,The length of the statement  "                await sessionMessageProvider.SendBatchBeginAsync(transaction' group.Select(tm => new Message<Guid' TaskMessageItem>(Guid.NewGuid()' tm))); " is 138.
Long Statement,DurableTask.AzureServiceFabric.Stores,SessionProvider,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Stores\SessionProvider.cs,TryUnlockSession,The length of the statement  "            ServiceFabricProviderEventSource.Tracing.TraceMessage(instance.InstanceId' $"Session Unlock Begin' Abandon = {abandon}"); " is 121.
Long Statement,DurableTask.AzureServiceFabric.Stores,SessionProvider,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Stores\SessionProvider.cs,TryUnlockSession,The length of the statement  "            if (!this.lockedSessions.TryRemove(instance.InstanceId' out LockState lockState) || lockState == LockState.InFetchQueue) " is 120.
Long Statement,DurableTask.AzureServiceFabric.Stores,SessionProvider,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Stores\SessionProvider.cs,TryUnlockSession,The length of the statement  "                var errorMessage = $"{nameof(SessionProvider)}.{nameof(TryUnlockSession)} : Trying to unlock the session {instance.InstanceId} which was not locked."; " is 150.
Long Statement,DurableTask.AzureServiceFabric.Stores,SessionProvider,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Stores\SessionProvider.cs,TryUnlockSession,The length of the statement  "            ServiceFabricProviderEventSource.Tracing.TraceMessage(instance.InstanceId' $"Session Unlock End' Abandon = {abandon}' removed lock state = {lockState}"); " is 153.
Long Statement,DurableTask.AzureServiceFabric.Stores,SessionProvider,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Stores\SessionProvider.cs,TryAddSession,The length of the statement  "            bool added = await this.Store.TryAddAsync(transaction' newMessage.TaskMessage.OrchestrationInstance.InstanceId' PersistentSession.Create(newMessage.TaskMessage.OrchestrationInstance)); " is 184.
Long Statement,DurableTask.AzureServiceFabric.Stores,SessionProvider,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Stores\SessionProvider.cs,TryAddSession,The length of the statement  "                await sessionMessageProvider.SendBeginAsync(transaction' new Message<Guid' TaskMessageItem>(Guid.NewGuid()' newMessage)); " is 121.
Long Statement,DurableTask.AzureServiceFabric.Stores,SessionProvider,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Stores\SessionProvider.cs,GetSession,The length of the statement  "            }' uniqueActionIdentifier: $"Orchestration InstanceId = {instanceId}' Action = {nameof(SessionProvider)}.{nameof(GetSession)}"); " is 128.
Long Statement,DurableTask.AzureServiceFabric.Stores,SessionProvider,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Stores\SessionProvider.cs,DropSession,The length of the statement  "            var noWait = RetryHelper.ExecuteWithRetryOnTransient(() => this.StateManager.RemoveAsync(GetSessionMessagesDictionaryName(instance))' " is 133.
Long Statement,DurableTask.AzureServiceFabric.Stores,SessionProvider,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Stores\SessionProvider.cs,GetOrAddSessionMessagesInstance,The length of the statement  "            var newInstance = new SessionMessageProvider(this.StateManager' GetSessionMessagesDictionaryName(instance)' this.CancellationToken); " is 132.
Long Statement,DurableTask.AzureServiceFabric.TaskHelpers,RetryHelper,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\TaskHelpers\RetryHelper.cs,ExecuteWithRetryOnTransient,The length of the statement  "            return ExecuteWithRetryOnTransient(action' CountBasedFixedDelayRetryPolicy.GetNewDefaultPolicy()' uniqueActionIdentifier); " is 122.
Long Statement,DurableTask.AzureServiceFabric.TaskHelpers,RetryHelper,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\TaskHelpers\RetryHelper.cs,ExecuteWithRetryOnTransient,The length of the statement  "                    ServiceFabricProviderEventSource.Tracing.LogMeasurement($"{uniqueActionIdentifier}' Attempt Number : {attemptNumber}' Result : Success"' timer.ElapsedMilliseconds); " is 164.
Long Statement,DurableTask.AzureServiceFabric.TaskHelpers,RetryHelper,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\TaskHelpers\RetryHelper.cs,ExecuteWithRetryOnTransient,The length of the statement  "                    ServiceFabricProviderEventSource.Tracing.LogMeasurement($"{uniqueActionIdentifier}' Attempt Number : {attemptNumber}' ShouldRetry : {shouldRetry}"' timer.ElapsedMilliseconds); " is 175.
Long Statement,DurableTask.AzureServiceFabric.TaskHelpers,RetryHelper,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\TaskHelpers\RetryHelper.cs,ExecuteWithRetryOnTransient,The length of the statement  "            return ExecuteWithRetryOnTransient(action' CountBasedFixedDelayRetryPolicy.GetNewDefaultPolicy()' uniqueActionIdentifier); " is 122.
Long Statement,DurableTask.AzureServiceFabric.TaskHelpers,RetryHelper,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\TaskHelpers\RetryHelper.cs,ExecuteWithRetryOnTransient,The length of the statement  "                    ServiceFabricProviderEventSource.Tracing.LogMeasurement($"{uniqueActionIdentifier}' Attempt Number : {attemptNumber}' Result : Success"' timer.ElapsedMilliseconds); " is 164.
Long Statement,DurableTask.AzureServiceFabric.TaskHelpers,RetryHelper,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\TaskHelpers\RetryHelper.cs,ExecuteWithRetryOnTransient,The length of the statement  "                    ServiceFabricProviderEventSource.Tracing.LogMeasurement($"{uniqueActionIdentifier}' Attempt Number : {attemptNumber}' ShouldRetry : {shouldRetry}"' timer.ElapsedMilliseconds); " is 175.
Long Statement,DurableTask.AzureServiceFabric.Tracing,ServiceFabricProviderEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Tracing\ServiceFabricProviderEventSource.cs,LogFabricServiceInformation,The length of the statement  "                this.WriteEvent(510' serviceName' serviceTypeName' replicaOrInstanceId' partitionId' applicationName' applicationTypeName' nodeName' message); " is 142.
Long Statement,DurableTask.AzureServiceFabric.Tracing,TracingExtensions,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Tracing\TracingExtensions.cs,LogProxyServiceError,The length of the statement  "            string exceptionDetails = $"Type: {exception.GetType()}' Message: {exception.Message}' StackTrace: {exception.StackTrace}' InnerException: {exception.InnerException}"; " is 167.
Long Statement,DurableTask.AzureServiceFabric.Tracing,TracingExtensions,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Tracing\TracingExtensions.cs,LogProxyServiceError,The length of the statement  "            string logMessage = $"Proxy service request {requestUri} with method {requestMethod} resulted in error. Exception Details - {exceptionDetails}"; " is 144.
Empty Catch Block,DurableTask.AzureServiceFabric,Utils,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Utils.cs,RunBackgroundJob,The method has an empty catch block.
Empty Catch Block,DurableTask.AzureServiceFabric.Service,OwinCommunicationListener,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Service\OwinCommunicationListener.cs,StopWebServer,The method has an empty catch block.
Magic Number,DurableTask.AzureServiceFabric,FabricOrchestrationInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationInstanceStore.cs,WriteEntitiesAsync,The following statement contains a magic number: await this.executionIdStore.AddOrUpdateAsync(transaction' instance.InstanceId' new List<string> { instance.ExecutionId }'                                  (k' old) =>                                  {                                      old.Add(instance.ExecutionId);                                      if (old.Count > this.MaxExecutionIdsLength)                                      {                                          // Remove first 10% items.                                          int skipItemsLength = (int)(this.MaxExecutionIdsLength * 0.1);                                          old = old.Skip(skipItemsLength).ToList();                                      }                                        return old;                                  });
Magic Number,DurableTask.AzureServiceFabric,FabricOrchestrationInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationInstanceStore.cs,GetOrchestrationStateAsync,The following statement contains a magic number: i < 2
Magic Number,DurableTask.AzureServiceFabric,FabricOrchestrationInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationInstanceStore.cs,CleanupDayOldDictionariesAsync,The following statement contains a magic number: return Utils.RunBackgroundJob(async () =>              {                  var purgeTime = GetDictionaryKeyFromTimePrefixFormat(DateTime.UtcNow - TimeSpan.FromDays(1));                    for (int i = 0; i < 24; i++)                  {                      await this.stateManager.RemoveAsync($"{purgeTime}{i:D2}");                  }              }' initialDelay: TimeSpan.FromMinutes(5)' delayOnSuccess: TimeSpan.FromHours(12)' delayOnException: TimeSpan.FromHours(1)' actionName: $"{nameof(CleanupDayOldDictionariesAsync)}"' token: this.cancellationToken);
Magic Number,DurableTask.AzureServiceFabric,FabricOrchestrationInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationInstanceStore.cs,CleanupDayOldDictionariesAsync,The following statement contains a magic number: return Utils.RunBackgroundJob(async () =>              {                  var purgeTime = GetDictionaryKeyFromTimePrefixFormat(DateTime.UtcNow - TimeSpan.FromDays(1));                    for (int i = 0; i < 24; i++)                  {                      await this.stateManager.RemoveAsync($"{purgeTime}{i:D2}");                  }              }' initialDelay: TimeSpan.FromMinutes(5)' delayOnSuccess: TimeSpan.FromHours(12)' delayOnException: TimeSpan.FromHours(1)' actionName: $"{nameof(CleanupDayOldDictionariesAsync)}"' token: this.cancellationToken);
Magic Number,DurableTask.AzureServiceFabric,FabricOrchestrationInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationInstanceStore.cs,CleanupDayOldDictionariesAsync,The following statement contains a magic number: return Utils.RunBackgroundJob(async () =>              {                  var purgeTime = GetDictionaryKeyFromTimePrefixFormat(DateTime.UtcNow - TimeSpan.FromDays(1));                    for (int i = 0; i < 24; i++)                  {                      await this.stateManager.RemoveAsync($"{purgeTime}{i:D2}");                  }              }' initialDelay: TimeSpan.FromMinutes(5)' delayOnSuccess: TimeSpan.FromHours(12)' delayOnException: TimeSpan.FromHours(1)' actionName: $"{nameof(CleanupDayOldDictionariesAsync)}"' token: this.cancellationToken);
Magic Number,DurableTask.AzureServiceFabric,FabricOrchestrationInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationInstanceStore.cs,CleanupOldDictionariesAsync,The following statement contains a magic number: return Utils.RunBackgroundJob(async () =>              {                  List<string> toDelete = new List<string>();                  List<string> toKeep = new List<string>();                  var currentTime = DateTime.UtcNow;                  var ttl = TimeSpan.FromDays(1);                    var enumerationTime = await Utils.MeasureAsync(async () =>                  {                      var enumerator = this.stateManager.GetAsyncEnumerator();                      while (await enumerator.MoveNextAsync(this.cancellationToken))                      {                          var storeName = enumerator.Current.Name.AbsolutePath.Trim('/');                          if (storeName.StartsWith(InstanceStoreCollectionNamePrefix))                          {                              DateTime storeTime;                              var stringDate = storeName.Substring(InstanceStoreCollectionNamePrefix.Length);                              if (DateTime.TryParseExact(stringDate' TimeFormatString' CultureInfo.InvariantCulture' DateTimeStyles.None' out storeTime)                                  && (currentTime - storeTime > ttl))                              {                                  toDelete.Add(storeName);                                  continue;                              }                          }                            toKeep.Add(storeName);                      }                  });                  ServiceFabricProviderEventSource.Tracing.LogTimeTaken($"Enumerating all reliable states (count: {toDelete.Count + toKeep.Count})"' enumerationTime.TotalMilliseconds);                    ServiceFabricProviderEventSource.Tracing.ReliableStateManagement($"Deleting {toDelete.Count} stores"' String.Join("'"' toDelete));                  ServiceFabricProviderEventSource.Tracing.ReliableStateManagement($"All remaining {toKeep.Count} stores"' String.Join("'"' toKeep));                    foreach (var storeName in toDelete)                  {                      var deleteTime = await Utils.MeasureAsync(async () =>                      {                          await this.stateManager.RemoveAsync(storeName);                      });                      ServiceFabricProviderEventSource.Tracing.LogTimeTaken($"Deleting reliable state {storeName}"' deleteTime.TotalMilliseconds);                  }              }' initialDelay: TimeSpan.FromMinutes(5)' delayOnSuccess: TimeSpan.FromHours(1)' delayOnException: TimeSpan.FromMinutes(10)' actionName: $"{nameof(CleanupOldDictionariesAsync)}"' token: this.cancellationToken);
Magic Number,DurableTask.AzureServiceFabric,FabricOrchestrationInstanceStore,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationInstanceStore.cs,CleanupOldDictionariesAsync,The following statement contains a magic number: return Utils.RunBackgroundJob(async () =>              {                  List<string> toDelete = new List<string>();                  List<string> toKeep = new List<string>();                  var currentTime = DateTime.UtcNow;                  var ttl = TimeSpan.FromDays(1);                    var enumerationTime = await Utils.MeasureAsync(async () =>                  {                      var enumerator = this.stateManager.GetAsyncEnumerator();                      while (await enumerator.MoveNextAsync(this.cancellationToken))                      {                          var storeName = enumerator.Current.Name.AbsolutePath.Trim('/');                          if (storeName.StartsWith(InstanceStoreCollectionNamePrefix))                          {                              DateTime storeTime;                              var stringDate = storeName.Substring(InstanceStoreCollectionNamePrefix.Length);                              if (DateTime.TryParseExact(stringDate' TimeFormatString' CultureInfo.InvariantCulture' DateTimeStyles.None' out storeTime)                                  && (currentTime - storeTime > ttl))                              {                                  toDelete.Add(storeName);                                  continue;                              }                          }                            toKeep.Add(storeName);                      }                  });                  ServiceFabricProviderEventSource.Tracing.LogTimeTaken($"Enumerating all reliable states (count: {toDelete.Count + toKeep.Count})"' enumerationTime.TotalMilliseconds);                    ServiceFabricProviderEventSource.Tracing.ReliableStateManagement($"Deleting {toDelete.Count} stores"' String.Join("'"' toDelete));                  ServiceFabricProviderEventSource.Tracing.ReliableStateManagement($"All remaining {toKeep.Count} stores"' String.Join("'"' toKeep));                    foreach (var storeName in toDelete)                  {                      var deleteTime = await Utils.MeasureAsync(async () =>                      {                          await this.stateManager.RemoveAsync(storeName);                      });                      ServiceFabricProviderEventSource.Tracing.LogTimeTaken($"Deleting reliable state {storeName}"' deleteTime.TotalMilliseconds);                  }              }' initialDelay: TimeSpan.FromMinutes(5)' delayOnSuccess: TimeSpan.FromHours(1)' delayOnException: TimeSpan.FromMinutes(10)' actionName: $"{nameof(CleanupOldDictionariesAsync)}"' token: this.cancellationToken);
Magic Number,DurableTask.AzureServiceFabric,FabricOrchestrationProviderSettings,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationProviderSettings.cs,FabricOrchestrationProviderSettings,The following statement contains a magic number: TaskOrchestrationDispatcherSettings = new TaskOrchestrationDispatcherSettings()              {                  MaxConcurrentOrchestrations = 1000'                  DispatcherCount = 10              };
Magic Number,DurableTask.AzureServiceFabric,FabricOrchestrationProviderSettings,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationProviderSettings.cs,FabricOrchestrationProviderSettings,The following statement contains a magic number: TaskOrchestrationDispatcherSettings = new TaskOrchestrationDispatcherSettings()              {                  MaxConcurrentOrchestrations = 1000'                  DispatcherCount = 10              };
Magic Number,DurableTask.AzureServiceFabric,FabricOrchestrationProviderSettings,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationProviderSettings.cs,FabricOrchestrationProviderSettings,The following statement contains a magic number: TaskActivityDispatcherSettings = new TaskActivityDispatcherSettings()              {                  MaxConcurrentActivities = 1000'                  DispatcherCount = 10              };
Magic Number,DurableTask.AzureServiceFabric,FabricOrchestrationProviderSettings,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationProviderSettings.cs,FabricOrchestrationProviderSettings,The following statement contains a magic number: TaskActivityDispatcherSettings = new TaskActivityDispatcherSettings()              {                  MaxConcurrentActivities = 1000'                  DispatcherCount = 10              };
Magic Number,DurableTask.AzureServiceFabric,FabricOrchestrationService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\FabricOrchestrationService.cs,GetDelayForFetchOrProcessException,The following statement contains a magic number: return 2;
Magic Number,DurableTask.AzureServiceFabric.Service,DefaultStringPartitionHashing,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Service\DefaultStringPartitionHashing.cs,GeneratePartitionHashCodeAsync,The following statement contains a magic number: var long2 = BitConverter.ToInt64(hash' 8);
Magic Number,DurableTask.AzureServiceFabric.Service,DefaultStringPartitionHashing,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Service\DefaultStringPartitionHashing.cs,GeneratePartitionHashCodeAsync,The following statement contains a magic number: var long3 = BitConverter.ToInt64(hash' 16);
Magic Number,DurableTask.AzureServiceFabric.Service,DefaultStringPartitionHashing,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Service\DefaultStringPartitionHashing.cs,GeneratePartitionHashCodeAsync,The following statement contains a magic number: var long4 = BitConverter.ToInt64(hash' 24);
Magic Number,DurableTask.AzureServiceFabric.Service,Startup,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Service\Startup.cs,Startup,The following statement contains a magic number: ServicePointManager.DefaultConnectionLimit = 256;
Magic Number,DurableTask.AzureServiceFabric.Service,TaskHubStatefulService,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Service\TaskHubStatefulService.cs,RunAsync,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,DurableTask.AzureServiceFabric.TaskHelpers,CountBasedFixedDelayRetryPolicy,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\TaskHelpers\CountBasedFixedDelayRetryPolicy.cs,GetNewDefaultPolicy,The following statement contains a magic number: return new CountBasedFixedDelayRetryPolicy(3' TimeSpan.FromMilliseconds(100));
Magic Number,DurableTask.AzureServiceFabric.TaskHelpers,CountBasedFixedDelayRetryPolicy,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\TaskHelpers\CountBasedFixedDelayRetryPolicy.cs,GetNewDefaultPolicy,The following statement contains a magic number: return new CountBasedFixedDelayRetryPolicy(3' TimeSpan.FromMilliseconds(100));
Magic Number,DurableTask.AzureServiceFabric.Tracing,ServiceFabricProviderEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Tracing\ServiceFabricProviderEventSource.cs,LogMeasurement,The following statement contains a magic number: this.WriteEvent(2' uniqueActionIdentifier' elapsedMilliseconds);
Magic Number,DurableTask.AzureServiceFabric.Tracing,ServiceFabricProviderEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Tracing\ServiceFabricProviderEventSource.cs,LogOrchestrationInformation,The following statement contains a magic number: this.WriteEvent(501' instanceId' executionId' message);
Magic Number,DurableTask.AzureServiceFabric.Tracing,ServiceFabricProviderEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Tracing\ServiceFabricProviderEventSource.cs,LogStoreCount,The following statement contains a magic number: this.WriteEvent(503' storeName' count);
Magic Number,DurableTask.AzureServiceFabric.Tracing,ServiceFabricProviderEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Tracing\ServiceFabricProviderEventSource.cs,LogTimeTaken,The following statement contains a magic number: this.WriteEvent(504' uniqueActionIdentifier' elapsedMilliseconds);
Magic Number,DurableTask.AzureServiceFabric.Tracing,ServiceFabricProviderEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Tracing\ServiceFabricProviderEventSource.cs,ReliableStateManagement,The following statement contains a magic number: this.WriteEvent(505' operationIdentifier' operationData);
Magic Number,DurableTask.AzureServiceFabric.Tracing,ServiceFabricProviderEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Tracing\ServiceFabricProviderEventSource.cs,LogProxyServiceRequestInformation,The following statement contains a magic number: this.WriteEvent(506' message);
Magic Number,DurableTask.AzureServiceFabric.Tracing,ServiceFabricProviderEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Tracing\ServiceFabricProviderEventSource.cs,LogFabricServiceInformation,The following statement contains a magic number: this.WriteEvent(510' serviceName' serviceTypeName' replicaOrInstanceId' partitionId' applicationName' applicationTypeName' nodeName' message);
Magic Number,DurableTask.AzureServiceFabric.Tracing,ServiceFabricProviderEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Tracing\ServiceFabricProviderEventSource.cs,ExceptionWhileRunningBackgroundJob,The following statement contains a magic number: this.WriteEvent(1001' operationIdentifier' exception);
Magic Number,DurableTask.AzureServiceFabric.Tracing,ServiceFabricProviderEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Tracing\ServiceFabricProviderEventSource.cs,RetryableFabricException,The following statement contains a magic number: this.WriteEvent(1002' uniqueIdentifier' attemptNumber' exception);
Magic Number,DurableTask.AzureServiceFabric.Tracing,ServiceFabricProviderEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Tracing\ServiceFabricProviderEventSource.cs,UnexpectedCodeCondition,The following statement contains a magic number: this.WriteEvent(1501' uniqueMessage);
Magic Number,DurableTask.AzureServiceFabric.Tracing,ServiceFabricProviderEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Tracing\ServiceFabricProviderEventSource.cs,ExceptionInReliableCollectionOperations,The following statement contains a magic number: this.WriteEvent(1502' uniqueIdentifier' exception);
Magic Number,DurableTask.AzureServiceFabric.Tracing,ServiceFabricProviderEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Tracing\ServiceFabricProviderEventSource.cs,LogProxyServiceError,The following statement contains a magic number: this.WriteEvent(1503' message);
Magic Number,DurableTask.AzureServiceFabric.Tracing,ServiceFabricProviderEventSource,D:\research\architectureSmells\repos\affandar_durabletask\src\DurableTask.AzureServiceFabric\Tracing\ServiceFabricProviderEventSource.cs,ServiceRequestFailed,The following statement contains a magic number: this.WriteEvent(1504' exception);
